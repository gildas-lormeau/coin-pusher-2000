(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const r of s)if(r.type==="childList")for(const a of r.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&n(a)}).observe(document,{childList:!0,subtree:!0});function t(s){const r={};return s.integrity&&(r.integrity=s.integrity),s.referrerPolicy&&(r.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?r.credentials="include":s.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function n(s){if(s.ep)return;s.ep=!0;const r=t(s);fetch(s.href,r)}})();/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const Ao="178",m1={ROTATE:0,DOLLY:1,PAN:2},c1={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},tl=0,b7=1,nl=2,v4=1,il=2,bn=3,Zn=0,Wt=1,wn=2,ui=0,y1=1,v7=2,g7=3,w7=4,sl=5,Ri=100,rl=101,al=102,ol=103,ll=104,dl=200,cl=201,ul=202,pl=203,la=204,da=205,fl=206,hl=207,ml=208,yl=209,bl=210,vl=211,gl=212,wl=213,Tl=214,ca=0,ua=1,pa=2,T1=3,fa=4,ha=5,ma=6,ya=7,Co=0,xl=1,Sl=2,pi=0,Pl=1,Hl=2,Rl=3,g4=4,Nl=5,Ll=6,Ml=7,T7="attached",El="detached",w4=300,x1=301,S1=302,ba=303,va=304,v2=306,P1=1e3,Tn=1001,Ur=1002,Xt=1003,T4=1004,is=1005,vt=1006,zr=1007,xn=1008,Sn=1009,x4=1010,S4=1011,cs=1012,Fo=1013,Mi=1014,jt=1015,jn=1016,Vo=1017,Do=1018,us=1020,P4=35902,H4=1021,R4=1022,Yt=1023,ps=1026,fs=1027,g2=1028,jo=1029,N4=1030,Wo=1031,Uo=1033,Ir=33776,Xr=33777,Ar=33778,Cr=33779,ga=35840,wa=35841,Ta=35842,xa=35843,Sa=36196,Pa=37492,Ha=37496,Ra=37808,Na=37809,La=37810,Ma=37811,Ea=37812,Oa=37813,za=37814,Ia=37815,Xa=37816,Aa=37817,Ca=37818,Fa=37819,Va=37820,Da=37821,Fr=36492,ja=36494,Wa=36495,L4=36283,Ua=36284,qa=36285,Ga=36286,hs=2300,ms=2301,V2=2302,x7=2400,S7=2401,P7=2402,Ol=2500,zl=0,M4=1,Za=2,Il=3200,Xl=3201,qo=0,Al=1,Vn="",bt="srgb",xt="srgb-linear",qr="linear",Ae="srgb",Di=7680,H7=519,Cl=512,Fl=513,Vl=514,E4=515,Dl=516,jl=517,Wl=518,Ul=519,Ya=35044,R7="300 es",Wn=2e3,Gr=2001;class Xi{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){const n=this._listeners;return n===void 0?!1:n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){const n=this._listeners;if(n===void 0)return;const s=n[e];if(s!==void 0){const r=s.indexOf(t);r!==-1&&s.splice(r,1)}}dispatchEvent(e){const t=this._listeners;if(t===void 0)return;const n=t[e.type];if(n!==void 0){e.target=this;const s=n.slice(0);for(let r=0,a=s.length;r<a;r++)s[r].call(this,e);e.target=null}}}const St=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let N7=1234567;const b1=Math.PI/180,H1=180/Math.PI;function fn(){const i=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(St[i&255]+St[i>>8&255]+St[i>>16&255]+St[i>>24&255]+"-"+St[e&255]+St[e>>8&255]+"-"+St[e>>16&15|64]+St[e>>24&255]+"-"+St[t&63|128]+St[t>>8&255]+"-"+St[t>>16&255]+St[t>>24&255]+St[n&255]+St[n>>8&255]+St[n>>16&255]+St[n>>24&255]).toLowerCase()}function le(i,e,t){return Math.max(e,Math.min(t,i))}function Go(i,e){return(i%e+e)%e}function ql(i,e,t,n,s){return n+(i-e)*(s-n)/(t-e)}function Gl(i,e,t){return i!==e?(t-i)/(e-i):0}function rs(i,e,t){return(1-t)*i+t*e}function Zl(i,e,t,n){return rs(i,e,1-Math.exp(-t*n))}function Yl(i,e=1){return e-Math.abs(Go(i,e*2)-e)}function kl(i,e,t){return i<=e?0:i>=t?1:(i=(i-e)/(t-e),i*i*(3-2*i))}function Jl(i,e,t){return i<=e?0:i>=t?1:(i=(i-e)/(t-e),i*i*i*(i*(i*6-15)+10))}function Kl(i,e){return i+Math.floor(Math.random()*(e-i+1))}function Bl(i,e){return i+Math.random()*(e-i)}function Ql(i){return i*(.5-Math.random())}function _l(i){i!==void 0&&(N7=i);let e=N7+=1831565813;return e=Math.imul(e^e>>>15,e|1),e^=e+Math.imul(e^e>>>7,e|61),((e^e>>>14)>>>0)/4294967296}function $l(i){return i*b1}function ed(i){return i*H1}function td(i){return(i&i-1)===0&&i!==0}function nd(i){return Math.pow(2,Math.ceil(Math.log(i)/Math.LN2))}function id(i){return Math.pow(2,Math.floor(Math.log(i)/Math.LN2))}function sd(i,e,t,n,s){const r=Math.cos,a=Math.sin,o=r(t/2),l=a(t/2),d=r((e+n)/2),c=a((e+n)/2),u=r((e-n)/2),p=a((e-n)/2),h=r((n-e)/2),b=a((n-e)/2);switch(s){case"XYX":i.set(o*c,l*u,l*p,o*d);break;case"YZY":i.set(l*p,o*c,l*u,o*d);break;case"ZXZ":i.set(l*u,l*p,o*c,o*d);break;case"XZX":i.set(o*c,l*b,l*h,o*d);break;case"YXY":i.set(l*h,o*c,l*b,o*d);break;case"ZYZ":i.set(l*b,l*h,o*c,o*d);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+s)}}function pn(i,e){switch(e.constructor){case Float32Array:return i;case Uint32Array:return i/4294967295;case Uint16Array:return i/65535;case Uint8Array:return i/255;case Int32Array:return Math.max(i/2147483647,-1);case Int16Array:return Math.max(i/32767,-1);case Int8Array:return Math.max(i/127,-1);default:throw new Error("Invalid component type.")}}function Me(i,e){switch(e.constructor){case Float32Array:return i;case Uint32Array:return Math.round(i*4294967295);case Uint16Array:return Math.round(i*65535);case Uint8Array:return Math.round(i*255);case Int32Array:return Math.round(i*2147483647);case Int16Array:return Math.round(i*32767);case Int8Array:return Math.round(i*127);default:throw new Error("Invalid component type.")}}const O4={DEG2RAD:b1,RAD2DEG:H1,generateUUID:fn,clamp:le,euclideanModulo:Go,mapLinear:ql,inverseLerp:Gl,lerp:rs,damp:Zl,pingpong:Yl,smoothstep:kl,smootherstep:Jl,randInt:Kl,randFloat:Bl,randFloatSpread:Ql,seededRandom:_l,degToRad:$l,radToDeg:ed,isPowerOfTwo:td,ceilPowerOfTwo:nd,floorPowerOfTwo:id,setQuaternionFromProperEuler:sd,normalize:Me,denormalize:pn};class ee{constructor(e=0,t=0){ee.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,s=e.elements;return this.x=s[0]*t+s[3]*n+s[6],this.y=s[1]*t+s[4]*n+s[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=le(this.x,e.x,t.x),this.y=le(this.y,e.y,t.y),this}clampScalar(e,t){return this.x=le(this.x,e,t),this.y=le(this.y,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(le(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(le(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),s=Math.sin(t),r=this.x-e.x,a=this.y-e.y;return this.x=r*n-a*s+e.x,this.y=r*s+a*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}let _0=class{constructor(e=0,t=0,n=0,s=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=s}static slerpFlat(e,t,n,s,r,a,o){let l=n[s+0],d=n[s+1],c=n[s+2],u=n[s+3];const p=r[a+0],h=r[a+1],b=r[a+2],T=r[a+3];if(o===0){e[t+0]=l,e[t+1]=d,e[t+2]=c,e[t+3]=u;return}if(o===1){e[t+0]=p,e[t+1]=h,e[t+2]=b,e[t+3]=T;return}if(u!==T||l!==p||d!==h||c!==b){let m=1-o;const f=l*p+d*h+c*b+u*T,N=f>=0?1:-1,M=1-f*f;if(M>Number.EPSILON){const V=Math.sqrt(M),C=Math.atan2(V,f*N);m=Math.sin(m*C)/V,o=Math.sin(o*C)/V}const P=o*N;if(l=l*m+p*P,d=d*m+h*P,c=c*m+b*P,u=u*m+T*P,m===1-o){const V=1/Math.sqrt(l*l+d*d+c*c+u*u);l*=V,d*=V,c*=V,u*=V}}e[t]=l,e[t+1]=d,e[t+2]=c,e[t+3]=u}static multiplyQuaternionsFlat(e,t,n,s,r,a){const o=n[s],l=n[s+1],d=n[s+2],c=n[s+3],u=r[a],p=r[a+1],h=r[a+2],b=r[a+3];return e[t]=o*b+c*u+l*h-d*p,e[t+1]=l*b+c*p+d*u-o*h,e[t+2]=d*b+c*h+o*p-l*u,e[t+3]=c*b-o*u-l*p-d*h,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,s){return this._x=e,this._y=t,this._z=n,this._w=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t=!0){const n=e._x,s=e._y,r=e._z,a=e._order,o=Math.cos,l=Math.sin,d=o(n/2),c=o(s/2),u=o(r/2),p=l(n/2),h=l(s/2),b=l(r/2);switch(a){case"XYZ":this._x=p*c*u+d*h*b,this._y=d*h*u-p*c*b,this._z=d*c*b+p*h*u,this._w=d*c*u-p*h*b;break;case"YXZ":this._x=p*c*u+d*h*b,this._y=d*h*u-p*c*b,this._z=d*c*b-p*h*u,this._w=d*c*u+p*h*b;break;case"ZXY":this._x=p*c*u-d*h*b,this._y=d*h*u+p*c*b,this._z=d*c*b+p*h*u,this._w=d*c*u-p*h*b;break;case"ZYX":this._x=p*c*u-d*h*b,this._y=d*h*u+p*c*b,this._z=d*c*b-p*h*u,this._w=d*c*u+p*h*b;break;case"YZX":this._x=p*c*u+d*h*b,this._y=d*h*u+p*c*b,this._z=d*c*b-p*h*u,this._w=d*c*u-p*h*b;break;case"XZY":this._x=p*c*u-d*h*b,this._y=d*h*u-p*c*b,this._z=d*c*b+p*h*u,this._w=d*c*u+p*h*b;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return t===!0&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,s=Math.sin(n);return this._x=e.x*s,this._y=e.y*s,this._z=e.z*s,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],s=t[4],r=t[8],a=t[1],o=t[5],l=t[9],d=t[2],c=t[6],u=t[10],p=n+o+u;if(p>0){const h=.5/Math.sqrt(p+1);this._w=.25/h,this._x=(c-l)*h,this._y=(r-d)*h,this._z=(a-s)*h}else if(n>o&&n>u){const h=2*Math.sqrt(1+n-o-u);this._w=(c-l)/h,this._x=.25*h,this._y=(s+a)/h,this._z=(r+d)/h}else if(o>u){const h=2*Math.sqrt(1+o-n-u);this._w=(r-d)/h,this._x=(s+a)/h,this._y=.25*h,this._z=(l+c)/h}else{const h=2*Math.sqrt(1+u-n-o);this._w=(a-s)/h,this._x=(r+d)/h,this._y=(l+c)/h,this._z=.25*h}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<1e-8?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(le(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const s=Math.min(1,t/n);return this.slerp(e,s),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,s=e._y,r=e._z,a=e._w,o=t._x,l=t._y,d=t._z,c=t._w;return this._x=n*c+a*o+s*d-r*l,this._y=s*c+a*l+r*o-n*d,this._z=r*c+a*d+n*l-s*o,this._w=a*c-n*o-s*l-r*d,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,s=this._y,r=this._z,a=this._w;let o=a*e._w+n*e._x+s*e._y+r*e._z;if(o<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,o=-o):this.copy(e),o>=1)return this._w=a,this._x=n,this._y=s,this._z=r,this;const l=1-o*o;if(l<=Number.EPSILON){const h=1-t;return this._w=h*a+t*this._w,this._x=h*n+t*this._x,this._y=h*s+t*this._y,this._z=h*r+t*this._z,this.normalize(),this}const d=Math.sqrt(l),c=Math.atan2(d,o),u=Math.sin((1-t)*c)/d,p=Math.sin(t*c)/d;return this._w=a*u+this._w*p,this._x=n*u+this._x*p,this._y=s*u+this._y*p,this._z=r*u+this._z*p,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=2*Math.PI*Math.random(),t=2*Math.PI*Math.random(),n=Math.random(),s=Math.sqrt(1-n),r=Math.sqrt(n);return this.set(s*Math.sin(e),s*Math.cos(e),r*Math.sin(t),r*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}},x=class z4{constructor(e=0,t=0,n=0){z4.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(L7.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(L7.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,s=this.z,r=e.elements;return this.x=r[0]*t+r[3]*n+r[6]*s,this.y=r[1]*t+r[4]*n+r[7]*s,this.z=r[2]*t+r[5]*n+r[8]*s,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,s=this.z,r=e.elements,a=1/(r[3]*t+r[7]*n+r[11]*s+r[15]);return this.x=(r[0]*t+r[4]*n+r[8]*s+r[12])*a,this.y=(r[1]*t+r[5]*n+r[9]*s+r[13])*a,this.z=(r[2]*t+r[6]*n+r[10]*s+r[14])*a,this}applyQuaternion(e){const t=this.x,n=this.y,s=this.z,r=e.x,a=e.y,o=e.z,l=e.w,d=2*(a*s-o*n),c=2*(o*t-r*s),u=2*(r*n-a*t);return this.x=t+l*d+a*u-o*c,this.y=n+l*c+o*d-r*u,this.z=s+l*u+r*c-a*d,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,s=this.z,r=e.elements;return this.x=r[0]*t+r[4]*n+r[8]*s,this.y=r[1]*t+r[5]*n+r[9]*s,this.z=r[2]*t+r[6]*n+r[10]*s,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=le(this.x,e.x,t.x),this.y=le(this.y,e.y,t.y),this.z=le(this.z,e.z,t.z),this}clampScalar(e,t){return this.x=le(this.x,e,t),this.y=le(this.y,e,t),this.z=le(this.z,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(le(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,s=e.y,r=e.z,a=t.x,o=t.y,l=t.z;return this.x=s*l-r*o,this.y=r*a-n*l,this.z=n*o-s*a,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return D2.copy(this).projectOnVector(e),this.sub(D2)}reflect(e){return this.sub(D2.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(le(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,s=this.z-e.z;return t*t+n*n+s*s}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const s=Math.sin(t)*e;return this.x=s*Math.sin(n),this.y=Math.cos(t)*e,this.z=s*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),s=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=s,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=Math.random()*Math.PI*2,t=Math.random()*2-1,n=Math.sqrt(1-t*t);return this.x=n*Math.cos(e),this.y=t,this.z=n*Math.sin(e),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}};const D2=new x,L7=new _0;class re{constructor(e,t,n,s,r,a,o,l,d){re.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],e!==void 0&&this.set(e,t,n,s,r,a,o,l,d)}set(e,t,n,s,r,a,o,l,d){const c=this.elements;return c[0]=e,c[1]=s,c[2]=o,c[3]=t,c[4]=r,c[5]=l,c[6]=n,c[7]=a,c[8]=d,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,s=t.elements,r=this.elements,a=n[0],o=n[3],l=n[6],d=n[1],c=n[4],u=n[7],p=n[2],h=n[5],b=n[8],T=s[0],m=s[3],f=s[6],N=s[1],M=s[4],P=s[7],V=s[2],C=s[5],D=s[8];return r[0]=a*T+o*N+l*V,r[3]=a*m+o*M+l*C,r[6]=a*f+o*P+l*D,r[1]=d*T+c*N+u*V,r[4]=d*m+c*M+u*C,r[7]=d*f+c*P+u*D,r[2]=p*T+h*N+b*V,r[5]=p*m+h*M+b*C,r[8]=p*f+h*P+b*D,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],s=e[2],r=e[3],a=e[4],o=e[5],l=e[6],d=e[7],c=e[8];return t*a*c-t*o*d-n*r*c+n*o*l+s*r*d-s*a*l}invert(){const e=this.elements,t=e[0],n=e[1],s=e[2],r=e[3],a=e[4],o=e[5],l=e[6],d=e[7],c=e[8],u=c*a-o*d,p=o*l-c*r,h=d*r-a*l,b=t*u+n*p+s*h;if(b===0)return this.set(0,0,0,0,0,0,0,0,0);const T=1/b;return e[0]=u*T,e[1]=(s*d-c*n)*T,e[2]=(o*n-s*a)*T,e[3]=p*T,e[4]=(c*t-s*l)*T,e[5]=(s*r-o*t)*T,e[6]=h*T,e[7]=(n*l-d*t)*T,e[8]=(a*t-n*r)*T,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,s,r,a,o){const l=Math.cos(r),d=Math.sin(r);return this.set(n*l,n*d,-n*(l*a+d*o)+a+e,-s*d,s*l,-s*(-d*a+l*o)+o+t,0,0,1),this}scale(e,t){return this.premultiply(j2.makeScale(e,t)),this}rotate(e){return this.premultiply(j2.makeRotation(-e)),this}translate(e,t){return this.premultiply(j2.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,n,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,n=e.elements;for(let s=0;s<9;s++)if(t[s]!==n[s])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return new this.constructor().fromArray(this.elements)}}const j2=new re;function I4(i){for(let e=i.length-1;e>=0;--e)if(i[e]>=65535)return!0;return!1}function ys(i){return document.createElementNS("http://www.w3.org/1999/xhtml",i)}function rd(){const i=ys("canvas");return i.style.display="block",i}const M7={};function v1(i){i in M7||(M7[i]=!0,console.warn(i))}function ad(i,e,t){return new Promise(function(n,s){function r(){switch(i.clientWaitSync(e,i.SYNC_FLUSH_COMMANDS_BIT,0)){case i.WAIT_FAILED:s();break;case i.TIMEOUT_EXPIRED:setTimeout(r,t);break;default:n()}}setTimeout(r,t)})}function od(i){const e=i.elements;e[2]=.5*e[2]+.5*e[3],e[6]=.5*e[6]+.5*e[7],e[10]=.5*e[10]+.5*e[11],e[14]=.5*e[14]+.5*e[15]}function ld(i){const e=i.elements;e[11]===-1?(e[10]=-e[10]-1,e[14]=-e[14]):(e[10]=-e[10],e[14]=-e[14]+1)}const E7=new re().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),O7=new re().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function dd(){const i={enabled:!0,workingColorSpace:xt,spaces:{},convert:function(s,r,a){return this.enabled===!1||r===a||!r||!a||(this.spaces[r].transfer===Ae&&(s.r=Gn(s.r),s.g=Gn(s.g),s.b=Gn(s.b)),this.spaces[r].primaries!==this.spaces[a].primaries&&(s.applyMatrix3(this.spaces[r].toXYZ),s.applyMatrix3(this.spaces[a].fromXYZ)),this.spaces[a].transfer===Ae&&(s.r=g1(s.r),s.g=g1(s.g),s.b=g1(s.b))),s},workingToColorSpace:function(s,r){return this.convert(s,this.workingColorSpace,r)},colorSpaceToWorking:function(s,r){return this.convert(s,r,this.workingColorSpace)},getPrimaries:function(s){return this.spaces[s].primaries},getTransfer:function(s){return s===Vn?qr:this.spaces[s].transfer},getLuminanceCoefficients:function(s,r=this.workingColorSpace){return s.fromArray(this.spaces[r].luminanceCoefficients)},define:function(s){Object.assign(this.spaces,s)},_getMatrix:function(s,r,a){return s.copy(this.spaces[r].toXYZ).multiply(this.spaces[a].fromXYZ)},_getDrawingBufferColorSpace:function(s){return this.spaces[s].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(s=this.workingColorSpace){return this.spaces[s].workingColorSpaceConfig.unpackColorSpace},fromWorkingColorSpace:function(s,r){return v1("THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace()."),i.workingToColorSpace(s,r)},toWorkingColorSpace:function(s,r){return v1("THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking()."),i.colorSpaceToWorking(s,r)}},e=[.64,.33,.3,.6,.15,.06],t=[.2126,.7152,.0722],n=[.3127,.329];return i.define({[xt]:{primaries:e,whitePoint:n,transfer:qr,toXYZ:E7,fromXYZ:O7,luminanceCoefficients:t,workingColorSpaceConfig:{unpackColorSpace:bt},outputColorSpaceConfig:{drawingBufferColorSpace:bt}},[bt]:{primaries:e,whitePoint:n,transfer:Ae,toXYZ:E7,fromXYZ:O7,luminanceCoefficients:t,outputColorSpaceConfig:{drawingBufferColorSpace:bt}}}),i}const ge=dd();function Gn(i){return i<.04045?i*.0773993808:Math.pow(i*.9478672986+.0521327014,2.4)}function g1(i){return i<.0031308?i*12.92:1.055*Math.pow(i,.41666)-.055}let ji;class cd{static getDataURL(e,t="image/png"){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let n;if(e instanceof HTMLCanvasElement)n=e;else{ji===void 0&&(ji=ys("canvas")),ji.width=e.width,ji.height=e.height;const s=ji.getContext("2d");e instanceof ImageData?s.putImageData(e,0,0):s.drawImage(e,0,0,e.width,e.height),n=ji}return n.toDataURL(t)}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const t=ys("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const s=n.getImageData(0,0,e.width,e.height),r=s.data;for(let a=0;a<r.length;a++)r[a]=Gn(r[a]/255)*255;return n.putImageData(s,0,0),t}else if(e.data){const t=e.data.slice(0);for(let n=0;n<t.length;n++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[n]=Math.floor(Gn(t[n]/255)*255):t[n]=Gn(t[n]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}let ud=0;class Zo{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:ud++}),this.uuid=fn(),this.data=e,this.dataReady=!0,this.version=0}getSize(e){const t=this.data;return t instanceof HTMLVideoElement?e.set(t.videoWidth,t.videoHeight):t!==null?e.set(t.width,t.height,t.depth||0):e.set(0,0,0),e}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const n={uuid:this.uuid,url:""},s=this.data;if(s!==null){let r;if(Array.isArray(s)){r=[];for(let a=0,o=s.length;a<o;a++)s[a].isDataTexture?r.push(W2(s[a].image)):r.push(W2(s[a]))}else r=W2(s);n.url=r}return t||(e.images[this.uuid]=n),n}}function W2(i){return typeof HTMLImageElement<"u"&&i instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&i instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&i instanceof ImageBitmap?cd.getDataURL(i):i.data?{data:Array.from(i.data),width:i.width,height:i.height,type:i.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let pd=0;const U2=new x;class gt extends Xi{constructor(e=gt.DEFAULT_IMAGE,t=gt.DEFAULT_MAPPING,n=Tn,s=Tn,r=vt,a=xn,o=Yt,l=Sn,d=gt.DEFAULT_ANISOTROPY,c=Vn){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:pd++}),this.uuid=fn(),this.name="",this.source=new Zo(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=n,this.wrapT=s,this.magFilter=r,this.minFilter=a,this.anisotropy=d,this.format=o,this.internalFormat=null,this.type=l,this.offset=new ee(0,0),this.repeat=new ee(1,1),this.center=new ee(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new re,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=c,this.userData={},this.updateRanges=[],this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.isArrayTexture=!!(e&&e.depth&&e.depth>1),this.pmremVersion=0}get width(){return this.source.getSize(U2).x}get height(){return this.source.getSize(U2).y}get depth(){return this.source.getSize(U2).z}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.renderTarget=e.renderTarget,this.isRenderTargetTexture=e.isRenderTargetTexture,this.isArrayTexture=e.isArrayTexture,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}setValues(e){for(const t in e){const n=e[t];if(n===void 0){console.warn(`THREE.Texture.setValues(): parameter '${t}' has value of undefined.`);continue}const s=this[t];if(s===void 0){console.warn(`THREE.Texture.setValues(): property '${t}' does not exist.`);continue}s&&n&&s.isVector2&&n.isVector2||s&&n&&s.isVector3&&n.isVector3||s&&n&&s.isMatrix3&&n.isMatrix3?s.copy(n):this[t]=n}}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const n={metadata:{version:4.7,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==w4)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case P1:e.x=e.x-Math.floor(e.x);break;case Tn:e.x=e.x<0?0:1;break;case Ur:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case P1:e.y=e.y-Math.floor(e.y);break;case Tn:e.y=e.y<0?0:1;break;case Ur:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(e){e===!0&&this.pmremVersion++}}gt.DEFAULT_IMAGE=null;gt.DEFAULT_MAPPING=w4;gt.DEFAULT_ANISOTROPY=1;class He{constructor(e=0,t=0,n=0,s=1){He.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=s}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,s){return this.x=e,this.y=t,this.z=n,this.w=s,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,s=this.z,r=this.w,a=e.elements;return this.x=a[0]*t+a[4]*n+a[8]*s+a[12]*r,this.y=a[1]*t+a[5]*n+a[9]*s+a[13]*r,this.z=a[2]*t+a[6]*n+a[10]*s+a[14]*r,this.w=a[3]*t+a[7]*n+a[11]*s+a[15]*r,this}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this.w/=e.w,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,s,r;const l=e.elements,d=l[0],c=l[4],u=l[8],p=l[1],h=l[5],b=l[9],T=l[2],m=l[6],f=l[10];if(Math.abs(c-p)<.01&&Math.abs(u-T)<.01&&Math.abs(b-m)<.01){if(Math.abs(c+p)<.1&&Math.abs(u+T)<.1&&Math.abs(b+m)<.1&&Math.abs(d+h+f-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const M=(d+1)/2,P=(h+1)/2,V=(f+1)/2,C=(c+p)/4,D=(u+T)/4,G=(b+m)/4;return M>P&&M>V?M<.01?(n=0,s=.707106781,r=.707106781):(n=Math.sqrt(M),s=C/n,r=D/n):P>V?P<.01?(n=.707106781,s=0,r=.707106781):(s=Math.sqrt(P),n=C/s,r=G/s):V<.01?(n=.707106781,s=.707106781,r=0):(r=Math.sqrt(V),n=D/r,s=G/r),this.set(n,s,r,t),this}let N=Math.sqrt((m-b)*(m-b)+(u-T)*(u-T)+(p-c)*(p-c));return Math.abs(N)<.001&&(N=1),this.x=(m-b)/N,this.y=(u-T)/N,this.z=(p-c)/N,this.w=Math.acos((d+h+f-1)/2),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this.w=t[15],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=le(this.x,e.x,t.x),this.y=le(this.y,e.y,t.y),this.z=le(this.z,e.z,t.z),this.w=le(this.w,e.w,t.w),this}clampScalar(e,t){return this.x=le(this.x,e,t),this.y=le(this.y,e,t),this.z=le(this.z,e,t),this.w=le(this.w,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(le(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class fd extends Xi{constructor(e=1,t=1,n={}){super(),n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:vt,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1,depth:1,multiview:!1},n),this.isRenderTarget=!0,this.width=e,this.height=t,this.depth=n.depth,this.scissor=new He(0,0,e,t),this.scissorTest=!1,this.viewport=new He(0,0,e,t);const s={width:e,height:t,depth:n.depth},r=new gt(s);this.textures=[];const a=n.count;for(let o=0;o<a;o++)this.textures[o]=r.clone(),this.textures[o].isRenderTargetTexture=!0,this.textures[o].renderTarget=this;this._setTextureOptions(n),this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=n.depthTexture,this.samples=n.samples,this.multiview=n.multiview}_setTextureOptions(e={}){const t={minFilter:vt,generateMipmaps:!1,flipY:!1,internalFormat:null};e.mapping!==void 0&&(t.mapping=e.mapping),e.wrapS!==void 0&&(t.wrapS=e.wrapS),e.wrapT!==void 0&&(t.wrapT=e.wrapT),e.wrapR!==void 0&&(t.wrapR=e.wrapR),e.magFilter!==void 0&&(t.magFilter=e.magFilter),e.minFilter!==void 0&&(t.minFilter=e.minFilter),e.format!==void 0&&(t.format=e.format),e.type!==void 0&&(t.type=e.type),e.anisotropy!==void 0&&(t.anisotropy=e.anisotropy),e.colorSpace!==void 0&&(t.colorSpace=e.colorSpace),e.flipY!==void 0&&(t.flipY=e.flipY),e.generateMipmaps!==void 0&&(t.generateMipmaps=e.generateMipmaps),e.internalFormat!==void 0&&(t.internalFormat=e.internalFormat);for(let n=0;n<this.textures.length;n++)this.textures[n].setValues(t)}get texture(){return this.textures[0]}set texture(e){this.textures[0]=e}set depthTexture(e){this._depthTexture!==null&&(this._depthTexture.renderTarget=null),e!==null&&(e.renderTarget=this),this._depthTexture=e}get depthTexture(){return this._depthTexture}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e,this.height=t,this.depth=n;for(let s=0,r=this.textures.length;s<r;s++)this.textures[s].image.width=e,this.textures[s].image.height=t,this.textures[s].image.depth=n,this.textures[s].isArrayTexture=this.textures[s].image.depth>1;this.dispose()}this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.textures.length=0;for(let t=0,n=e.textures.length;t<n;t++){this.textures[t]=e.textures[t].clone(),this.textures[t].isRenderTargetTexture=!0,this.textures[t].renderTarget=this;const s=Object.assign({},e.textures[t].image);this.textures[t].source=new Zo(s)}return this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.resolveDepthBuffer=e.resolveDepthBuffer,this.resolveStencilBuffer=e.resolveStencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Ei extends fd{constructor(e=1,t=1,n={}){super(e,t,n),this.isWebGLRenderTarget=!0}}class X4 extends gt{constructor(e=null,t=1,n=1,s=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:s},this.magFilter=Xt,this.minFilter=Xt,this.wrapR=Tn,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class hd extends gt{constructor(e=null,t=1,n=1,s=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:s},this.magFilter=Xt,this.minFilter=Xt,this.wrapR=Tn,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Kn{constructor(e=new x(1/0,1/0,1/0),t=new x(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3)this.expandByPoint(nn.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++)this.expandByPoint(nn.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=nn.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(n!==void 0){const r=n.getAttribute("position");if(t===!0&&r!==void 0&&e.isInstancedMesh!==!0)for(let a=0,o=r.count;a<o;a++)e.isMesh===!0?e.getVertexPosition(a,nn):nn.fromBufferAttribute(r,a),nn.applyMatrix4(e.matrixWorld),this.expandByPoint(nn);else e.boundingBox!==void 0?(e.boundingBox===null&&e.computeBoundingBox(),Is.copy(e.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),Is.copy(n.boundingBox)),Is.applyMatrix4(e.matrixWorld),this.union(Is)}const s=e.children;for(let r=0,a=s.length;r<a;r++)this.expandByObject(s[r],t);return this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y&&e.z>=this.min.z&&e.z<=this.max.z}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y&&e.max.z>=this.min.z&&e.min.z<=this.max.z}intersectsSphere(e){return this.clampPoint(e.center,nn),nn.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(D1),Xs.subVectors(this.max,D1),Wi.subVectors(e.a,D1),Ui.subVectors(e.b,D1),qi.subVectors(e.c,D1),Qn.subVectors(Ui,Wi),_n.subVectors(qi,Ui),yi.subVectors(Wi,qi);let t=[0,-Qn.z,Qn.y,0,-_n.z,_n.y,0,-yi.z,yi.y,Qn.z,0,-Qn.x,_n.z,0,-_n.x,yi.z,0,-yi.x,-Qn.y,Qn.x,0,-_n.y,_n.x,0,-yi.y,yi.x,0];return!q2(t,Wi,Ui,qi,Xs)||(t=[1,0,0,0,1,0,0,0,1],!q2(t,Wi,Ui,qi,Xs))?!1:(As.crossVectors(Qn,_n),t=[As.x,As.y,As.z],q2(t,Wi,Ui,qi,Xs))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,nn).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(nn).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(En[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),En[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),En[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),En[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),En[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),En[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),En[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),En[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(En),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}toJSON(){return{min:this.min.toArray(),max:this.max.toArray()}}fromJSON(e){return this.min.fromArray(e.min),this.max.fromArray(e.max),this}}const En=[new x,new x,new x,new x,new x,new x,new x,new x],nn=new x,Is=new Kn,Wi=new x,Ui=new x,qi=new x,Qn=new x,_n=new x,yi=new x,D1=new x,Xs=new x,As=new x,bi=new x;function q2(i,e,t,n,s){for(let r=0,a=i.length-3;r<=a;r+=3){bi.fromArray(i,r);const o=s.x*Math.abs(bi.x)+s.y*Math.abs(bi.y)+s.z*Math.abs(bi.z),l=e.dot(bi),d=t.dot(bi),c=n.dot(bi);if(Math.max(-Math.max(l,d,c),Math.min(l,d,c))>o)return!1}return!0}const md=new Kn,j1=new x,G2=new x;class Hn{constructor(e=new x,t=-1){this.isSphere=!0,this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):md.setFromPoints(e).getCenter(n);let s=0;for(let r=0,a=e.length;r<a;r++)s=Math.max(s,n.distanceToSquared(e[r]));return this.radius=Math.sqrt(s),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;j1.subVectors(e,this.center);const t=j1.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t),s=(n-this.radius)*.5;this.center.addScaledVector(j1,s/n),this.radius+=s}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(G2.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(j1.copy(e.center).add(G2)),this.expandByPoint(j1.copy(e.center).sub(G2))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}toJSON(){return{radius:this.radius,center:this.center.toArray()}}fromJSON(e){return this.radius=e.radius,this.center.fromArray(e.center),this}}const On=new x,Z2=new x,Cs=new x,$n=new x,Y2=new x,Fs=new x,k2=new x;class E1{constructor(e=new x,t=new x(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,On)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=On.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(On.copy(this.origin).addScaledVector(this.direction,t),On.distanceToSquared(e))}distanceSqToSegment(e,t,n,s){Z2.copy(e).add(t).multiplyScalar(.5),Cs.copy(t).sub(e).normalize(),$n.copy(this.origin).sub(Z2);const r=e.distanceTo(t)*.5,a=-this.direction.dot(Cs),o=$n.dot(this.direction),l=-$n.dot(Cs),d=$n.lengthSq(),c=Math.abs(1-a*a);let u,p,h,b;if(c>0)if(u=a*l-o,p=a*o-l,b=r*c,u>=0)if(p>=-b)if(p<=b){const T=1/c;u*=T,p*=T,h=u*(u+a*p+2*o)+p*(a*u+p+2*l)+d}else p=r,u=Math.max(0,-(a*p+o)),h=-u*u+p*(p+2*l)+d;else p=-r,u=Math.max(0,-(a*p+o)),h=-u*u+p*(p+2*l)+d;else p<=-b?(u=Math.max(0,-(-a*r+o)),p=u>0?-r:Math.min(Math.max(-r,-l),r),h=-u*u+p*(p+2*l)+d):p<=b?(u=0,p=Math.min(Math.max(-r,-l),r),h=p*(p+2*l)+d):(u=Math.max(0,-(a*r+o)),p=u>0?r:Math.min(Math.max(-r,-l),r),h=-u*u+p*(p+2*l)+d);else p=a>0?-r:r,u=Math.max(0,-(a*p+o)),h=-u*u+p*(p+2*l)+d;return n&&n.copy(this.origin).addScaledVector(this.direction,u),s&&s.copy(Z2).addScaledVector(Cs,p),h}intersectSphere(e,t){On.subVectors(e.center,this.origin);const n=On.dot(this.direction),s=On.dot(On)-n*n,r=e.radius*e.radius;if(s>r)return null;const a=Math.sqrt(r-s),o=n-a,l=n+a;return l<0?null:o<0?this.at(l,t):this.at(o,t)}intersectsSphere(e){return e.radius<0?!1:this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,s,r,a,o,l;const d=1/this.direction.x,c=1/this.direction.y,u=1/this.direction.z,p=this.origin;return d>=0?(n=(e.min.x-p.x)*d,s=(e.max.x-p.x)*d):(n=(e.max.x-p.x)*d,s=(e.min.x-p.x)*d),c>=0?(r=(e.min.y-p.y)*c,a=(e.max.y-p.y)*c):(r=(e.max.y-p.y)*c,a=(e.min.y-p.y)*c),n>a||r>s||((r>n||isNaN(n))&&(n=r),(a<s||isNaN(s))&&(s=a),u>=0?(o=(e.min.z-p.z)*u,l=(e.max.z-p.z)*u):(o=(e.max.z-p.z)*u,l=(e.min.z-p.z)*u),n>l||o>s)||((o>n||n!==n)&&(n=o),(l<s||s!==s)&&(s=l),s<0)?null:this.at(n>=0?n:s,t)}intersectsBox(e){return this.intersectBox(e,On)!==null}intersectTriangle(e,t,n,s,r){Y2.subVectors(t,e),Fs.subVectors(n,e),k2.crossVectors(Y2,Fs);let a=this.direction.dot(k2),o;if(a>0){if(s)return null;o=1}else if(a<0)o=-1,a=-a;else return null;$n.subVectors(this.origin,e);const l=o*this.direction.dot(Fs.crossVectors($n,Fs));if(l<0)return null;const d=o*this.direction.dot(Y2.cross($n));if(d<0||l+d>a)return null;const c=-o*$n.dot(k2);return c<0?null:this.at(c/a,r)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class K0{constructor(e,t,n,s,r,a,o,l,d,c,u,p,h,b,T,m){K0.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],e!==void 0&&this.set(e,t,n,s,r,a,o,l,d,c,u,p,h,b,T,m)}set(e,t,n,s,r,a,o,l,d,c,u,p,h,b,T,m){const f=this.elements;return f[0]=e,f[4]=t,f[8]=n,f[12]=s,f[1]=r,f[5]=a,f[9]=o,f[13]=l,f[2]=d,f[6]=c,f[10]=u,f[14]=p,f[3]=h,f[7]=b,f[11]=T,f[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new K0().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,s=1/Gi.setFromMatrixColumn(e,0).length(),r=1/Gi.setFromMatrixColumn(e,1).length(),a=1/Gi.setFromMatrixColumn(e,2).length();return t[0]=n[0]*s,t[1]=n[1]*s,t[2]=n[2]*s,t[3]=0,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=0,t[8]=n[8]*a,t[9]=n[9]*a,t[10]=n[10]*a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,n=e.x,s=e.y,r=e.z,a=Math.cos(n),o=Math.sin(n),l=Math.cos(s),d=Math.sin(s),c=Math.cos(r),u=Math.sin(r);if(e.order==="XYZ"){const p=a*c,h=a*u,b=o*c,T=o*u;t[0]=l*c,t[4]=-l*u,t[8]=d,t[1]=h+b*d,t[5]=p-T*d,t[9]=-o*l,t[2]=T-p*d,t[6]=b+h*d,t[10]=a*l}else if(e.order==="YXZ"){const p=l*c,h=l*u,b=d*c,T=d*u;t[0]=p+T*o,t[4]=b*o-h,t[8]=a*d,t[1]=a*u,t[5]=a*c,t[9]=-o,t[2]=h*o-b,t[6]=T+p*o,t[10]=a*l}else if(e.order==="ZXY"){const p=l*c,h=l*u,b=d*c,T=d*u;t[0]=p-T*o,t[4]=-a*u,t[8]=b+h*o,t[1]=h+b*o,t[5]=a*c,t[9]=T-p*o,t[2]=-a*d,t[6]=o,t[10]=a*l}else if(e.order==="ZYX"){const p=a*c,h=a*u,b=o*c,T=o*u;t[0]=l*c,t[4]=b*d-h,t[8]=p*d+T,t[1]=l*u,t[5]=T*d+p,t[9]=h*d-b,t[2]=-d,t[6]=o*l,t[10]=a*l}else if(e.order==="YZX"){const p=a*l,h=a*d,b=o*l,T=o*d;t[0]=l*c,t[4]=T-p*u,t[8]=b*u+h,t[1]=u,t[5]=a*c,t[9]=-o*c,t[2]=-d*c,t[6]=h*u+b,t[10]=p-T*u}else if(e.order==="XZY"){const p=a*l,h=a*d,b=o*l,T=o*d;t[0]=l*c,t[4]=-u,t[8]=d*c,t[1]=p*u+T,t[5]=a*c,t[9]=h*u-b,t[2]=b*u-h,t[6]=o*c,t[10]=T*u+p}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(yd,e,bd)}lookAt(e,t,n){const s=this.elements;return qt.subVectors(e,t),qt.lengthSq()===0&&(qt.z=1),qt.normalize(),ei.crossVectors(n,qt),ei.lengthSq()===0&&(Math.abs(n.z)===1?qt.x+=1e-4:qt.z+=1e-4,qt.normalize(),ei.crossVectors(n,qt)),ei.normalize(),Vs.crossVectors(qt,ei),s[0]=ei.x,s[4]=Vs.x,s[8]=qt.x,s[1]=ei.y,s[5]=Vs.y,s[9]=qt.y,s[2]=ei.z,s[6]=Vs.z,s[10]=qt.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,s=t.elements,r=this.elements,a=n[0],o=n[4],l=n[8],d=n[12],c=n[1],u=n[5],p=n[9],h=n[13],b=n[2],T=n[6],m=n[10],f=n[14],N=n[3],M=n[7],P=n[11],V=n[15],C=s[0],D=s[4],G=s[8],L=s[12],H=s[1],W=s[5],B=s[9],Q=s[13],e0=s[2],u0=s[6],n0=s[10],b0=s[14],t0=s[3],x0=s[7],R0=s[11],V0=s[15];return r[0]=a*C+o*H+l*e0+d*t0,r[4]=a*D+o*W+l*u0+d*x0,r[8]=a*G+o*B+l*n0+d*R0,r[12]=a*L+o*Q+l*b0+d*V0,r[1]=c*C+u*H+p*e0+h*t0,r[5]=c*D+u*W+p*u0+h*x0,r[9]=c*G+u*B+p*n0+h*R0,r[13]=c*L+u*Q+p*b0+h*V0,r[2]=b*C+T*H+m*e0+f*t0,r[6]=b*D+T*W+m*u0+f*x0,r[10]=b*G+T*B+m*n0+f*R0,r[14]=b*L+T*Q+m*b0+f*V0,r[3]=N*C+M*H+P*e0+V*t0,r[7]=N*D+M*W+P*u0+V*x0,r[11]=N*G+M*B+P*n0+V*R0,r[15]=N*L+M*Q+P*b0+V*V0,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],s=e[8],r=e[12],a=e[1],o=e[5],l=e[9],d=e[13],c=e[2],u=e[6],p=e[10],h=e[14],b=e[3],T=e[7],m=e[11],f=e[15];return b*(+r*l*u-s*d*u-r*o*p+n*d*p+s*o*h-n*l*h)+T*(+t*l*h-t*d*p+r*a*p-s*a*h+s*d*c-r*l*c)+m*(+t*d*u-t*o*h-r*a*u+n*a*h+r*o*c-n*d*c)+f*(-s*o*c-t*l*u+t*o*p+s*a*u-n*a*p+n*l*c)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const s=this.elements;return e.isVector3?(s[12]=e.x,s[13]=e.y,s[14]=e.z):(s[12]=e,s[13]=t,s[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],s=e[2],r=e[3],a=e[4],o=e[5],l=e[6],d=e[7],c=e[8],u=e[9],p=e[10],h=e[11],b=e[12],T=e[13],m=e[14],f=e[15],N=u*m*d-T*p*d+T*l*h-o*m*h-u*l*f+o*p*f,M=b*p*d-c*m*d-b*l*h+a*m*h+c*l*f-a*p*f,P=c*T*d-b*u*d+b*o*h-a*T*h-c*o*f+a*u*f,V=b*u*l-c*T*l-b*o*p+a*T*p+c*o*m-a*u*m,C=t*N+n*M+s*P+r*V;if(C===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const D=1/C;return e[0]=N*D,e[1]=(T*p*r-u*m*r-T*s*h+n*m*h+u*s*f-n*p*f)*D,e[2]=(o*m*r-T*l*r+T*s*d-n*m*d-o*s*f+n*l*f)*D,e[3]=(u*l*r-o*p*r-u*s*d+n*p*d+o*s*h-n*l*h)*D,e[4]=M*D,e[5]=(c*m*r-b*p*r+b*s*h-t*m*h-c*s*f+t*p*f)*D,e[6]=(b*l*r-a*m*r-b*s*d+t*m*d+a*s*f-t*l*f)*D,e[7]=(a*p*r-c*l*r+c*s*d-t*p*d-a*s*h+t*l*h)*D,e[8]=P*D,e[9]=(b*u*r-c*T*r-b*n*h+t*T*h+c*n*f-t*u*f)*D,e[10]=(a*T*r-b*o*r+b*n*d-t*T*d-a*n*f+t*o*f)*D,e[11]=(c*o*r-a*u*r-c*n*d+t*u*d+a*n*h-t*o*h)*D,e[12]=V*D,e[13]=(c*T*s-b*u*s+b*n*p-t*T*p-c*n*m+t*u*m)*D,e[14]=(b*o*s-a*T*s-b*n*l+t*T*l+a*n*m-t*o*m)*D,e[15]=(a*u*s-c*o*s+c*n*l-t*u*l-a*n*p+t*o*p)*D,this}scale(e){const t=this.elements,n=e.x,s=e.y,r=e.z;return t[0]*=n,t[4]*=s,t[8]*=r,t[1]*=n,t[5]*=s,t[9]*=r,t[2]*=n,t[6]*=s,t[10]*=r,t[3]*=n,t[7]*=s,t[11]*=r,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],s=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,s))}makeTranslation(e,t,n){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),s=Math.sin(t),r=1-n,a=e.x,o=e.y,l=e.z,d=r*a,c=r*o;return this.set(d*a+n,d*o-s*l,d*l+s*o,0,d*o+s*l,c*o+n,c*l-s*a,0,d*l-s*o,c*l+s*a,r*l*l+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,s,r,a){return this.set(1,n,r,0,e,1,a,0,t,s,1,0,0,0,0,1),this}compose(e,t,n){const s=this.elements,r=t._x,a=t._y,o=t._z,l=t._w,d=r+r,c=a+a,u=o+o,p=r*d,h=r*c,b=r*u,T=a*c,m=a*u,f=o*u,N=l*d,M=l*c,P=l*u,V=n.x,C=n.y,D=n.z;return s[0]=(1-(T+f))*V,s[1]=(h+P)*V,s[2]=(b-M)*V,s[3]=0,s[4]=(h-P)*C,s[5]=(1-(p+f))*C,s[6]=(m+N)*C,s[7]=0,s[8]=(b+M)*D,s[9]=(m-N)*D,s[10]=(1-(p+T))*D,s[11]=0,s[12]=e.x,s[13]=e.y,s[14]=e.z,s[15]=1,this}decompose(e,t,n){const s=this.elements;let r=Gi.set(s[0],s[1],s[2]).length();const a=Gi.set(s[4],s[5],s[6]).length(),o=Gi.set(s[8],s[9],s[10]).length();this.determinant()<0&&(r=-r),e.x=s[12],e.y=s[13],e.z=s[14],sn.copy(this);const d=1/r,c=1/a,u=1/o;return sn.elements[0]*=d,sn.elements[1]*=d,sn.elements[2]*=d,sn.elements[4]*=c,sn.elements[5]*=c,sn.elements[6]*=c,sn.elements[8]*=u,sn.elements[9]*=u,sn.elements[10]*=u,t.setFromRotationMatrix(sn),n.x=r,n.y=a,n.z=o,this}makePerspective(e,t,n,s,r,a,o=Wn){const l=this.elements,d=2*r/(t-e),c=2*r/(n-s),u=(t+e)/(t-e),p=(n+s)/(n-s);let h,b;if(o===Wn)h=-(a+r)/(a-r),b=-2*a*r/(a-r);else if(o===Gr)h=-a/(a-r),b=-a*r/(a-r);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+o);return l[0]=d,l[4]=0,l[8]=u,l[12]=0,l[1]=0,l[5]=c,l[9]=p,l[13]=0,l[2]=0,l[6]=0,l[10]=h,l[14]=b,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(e,t,n,s,r,a,o=Wn){const l=this.elements,d=1/(t-e),c=1/(n-s),u=1/(a-r),p=(t+e)*d,h=(n+s)*c;let b,T;if(o===Wn)b=(a+r)*u,T=-2*u;else if(o===Gr)b=r*u,T=-1*u;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+o);return l[0]=2*d,l[4]=0,l[8]=0,l[12]=-p,l[1]=0,l[5]=2*c,l[9]=0,l[13]=-h,l[2]=0,l[6]=0,l[10]=T,l[14]=-b,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let s=0;s<16;s++)if(t[s]!==n[s])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}const Gi=new x,sn=new K0,yd=new x(0,0,0),bd=new x(1,1,1),ei=new x,Vs=new x,qt=new x,z7=new K0,I7=new _0;class Ne{constructor(e=0,t=0,n=0,s=Ne.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=s}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,s=this._order){return this._x=e,this._y=t,this._z=n,this._order=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const s=e.elements,r=s[0],a=s[4],o=s[8],l=s[1],d=s[5],c=s[9],u=s[2],p=s[6],h=s[10];switch(t){case"XYZ":this._y=Math.asin(le(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-c,h),this._z=Math.atan2(-a,r)):(this._x=Math.atan2(p,d),this._z=0);break;case"YXZ":this._x=Math.asin(-le(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(o,h),this._z=Math.atan2(l,d)):(this._y=Math.atan2(-u,r),this._z=0);break;case"ZXY":this._x=Math.asin(le(p,-1,1)),Math.abs(p)<.9999999?(this._y=Math.atan2(-u,h),this._z=Math.atan2(-a,d)):(this._y=0,this._z=Math.atan2(l,r));break;case"ZYX":this._y=Math.asin(-le(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(p,h),this._z=Math.atan2(l,r)):(this._x=0,this._z=Math.atan2(-a,d));break;case"YZX":this._z=Math.asin(le(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-c,d),this._y=Math.atan2(-u,r)):(this._x=0,this._y=Math.atan2(o,h));break;case"XZY":this._z=Math.asin(-le(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(p,d),this._y=Math.atan2(o,r)):(this._x=Math.atan2(-c,h),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return z7.makeRotationFromQuaternion(e),this.setFromRotationMatrix(z7,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return I7.setFromEuler(this),this.setFromQuaternion(I7,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}Ne.DEFAULT_ORDER="XYZ";class Yo{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let vd=0;const X7=new x,Zi=new _0,zn=new K0,Ds=new x,W1=new x,gd=new x,wd=new _0,A7=new x(1,0,0),C7=new x(0,1,0),F7=new x(0,0,1),V7={type:"added"},Td={type:"removed"},Yi={type:"childadded",child:null},J2={type:"childremoved",child:null};class Ye extends Xi{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:vd++}),this.uuid=fn(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Ye.DEFAULT_UP.clone();const e=new x,t=new Ne,n=new _0,s=new x(1,1,1);function r(){n.setFromEuler(t,!1)}function a(){t.setFromQuaternion(n,void 0,!1)}t._onChange(r),n._onChange(a),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:s},modelViewMatrix:{value:new K0},normalMatrix:{value:new re}}),this.matrix=new K0,this.matrixWorld=new K0,this.matrixAutoUpdate=Ye.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Ye.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new Yo,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.customDepthMaterial=void 0,this.customDistanceMaterial=void 0,this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return Zi.setFromAxisAngle(e,t),this.quaternion.multiply(Zi),this}rotateOnWorldAxis(e,t){return Zi.setFromAxisAngle(e,t),this.quaternion.premultiply(Zi),this}rotateX(e){return this.rotateOnAxis(A7,e)}rotateY(e){return this.rotateOnAxis(C7,e)}rotateZ(e){return this.rotateOnAxis(F7,e)}translateOnAxis(e,t){return X7.copy(e).applyQuaternion(this.quaternion),this.position.add(X7.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(A7,e)}translateY(e){return this.translateOnAxis(C7,e)}translateZ(e){return this.translateOnAxis(F7,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(zn.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?Ds.copy(e):Ds.set(e,t,n);const s=this.parent;this.updateWorldMatrix(!0,!1),W1.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?zn.lookAt(W1,Ds,this.up):zn.lookAt(Ds,W1,this.up),this.quaternion.setFromRotationMatrix(zn),s&&(zn.extractRotation(s.matrixWorld),Zi.setFromRotationMatrix(zn),this.quaternion.premultiply(Zi.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.removeFromParent(),e.parent=this,this.children.push(e),e.dispatchEvent(V7),Yi.child=e,this.dispatchEvent(Yi),Yi.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(Td),J2.child=e,this.dispatchEvent(J2),J2.child=null),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),zn.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),zn.multiply(e.parent.matrixWorld)),e.applyMatrix4(zn),e.removeFromParent(),e.parent=this,this.children.push(e),e.updateWorldMatrix(!1,!0),e.dispatchEvent(V7),Yi.child=e,this.dispatchEvent(Yi),Yi.child=null,this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,s=this.children.length;n<s;n++){const a=this.children[n].getObjectByProperty(e,t);if(a!==void 0)return a}}getObjectsByProperty(e,t,n=[]){this[e]===t&&n.push(this);const s=this.children;for(let r=0,a=s.length;r<a;r++)s[r].getObjectsByProperty(e,t,n);return n}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(W1,e,gd),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(W1,wd,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].updateMatrixWorld(e)}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),t===!0){const s=this.children;for(let r=0,a=s.length;r<a;r++)s[r].updateWorldMatrix(!1,!0)}}toJSON(e){const t=e===void 0||typeof e=="string",n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.7,type:"Object",generator:"Object3D.toJSON"});const s={};s.uuid=this.uuid,s.type=this.type,this.name!==""&&(s.name=this.name),this.castShadow===!0&&(s.castShadow=!0),this.receiveShadow===!0&&(s.receiveShadow=!0),this.visible===!1&&(s.visible=!1),this.frustumCulled===!1&&(s.frustumCulled=!1),this.renderOrder!==0&&(s.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(s.userData=this.userData),s.layers=this.layers.mask,s.matrix=this.matrix.toArray(),s.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(s.matrixAutoUpdate=!1),this.isInstancedMesh&&(s.type="InstancedMesh",s.count=this.count,s.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(s.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(s.type="BatchedMesh",s.perObjectFrustumCulled=this.perObjectFrustumCulled,s.sortObjects=this.sortObjects,s.drawRanges=this._drawRanges,s.reservedRanges=this._reservedRanges,s.geometryInfo=this._geometryInfo.map(o=>({...o,boundingBox:o.boundingBox?o.boundingBox.toJSON():void 0,boundingSphere:o.boundingSphere?o.boundingSphere.toJSON():void 0})),s.instanceInfo=this._instanceInfo.map(o=>({...o})),s.availableInstanceIds=this._availableInstanceIds.slice(),s.availableGeometryIds=this._availableGeometryIds.slice(),s.nextIndexStart=this._nextIndexStart,s.nextVertexStart=this._nextVertexStart,s.geometryCount=this._geometryCount,s.maxInstanceCount=this._maxInstanceCount,s.maxVertexCount=this._maxVertexCount,s.maxIndexCount=this._maxIndexCount,s.geometryInitialized=this._geometryInitialized,s.matricesTexture=this._matricesTexture.toJSON(e),s.indirectTexture=this._indirectTexture.toJSON(e),this._colorsTexture!==null&&(s.colorsTexture=this._colorsTexture.toJSON(e)),this.boundingSphere!==null&&(s.boundingSphere=this.boundingSphere.toJSON()),this.boundingBox!==null&&(s.boundingBox=this.boundingBox.toJSON()));function r(o,l){return o[l.uuid]===void 0&&(o[l.uuid]=l.toJSON(e)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?s.background=this.background.toJSON():this.background.isTexture&&(s.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(s.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){s.geometry=r(e.geometries,this.geometry);const o=this.geometry.parameters;if(o!==void 0&&o.shapes!==void 0){const l=o.shapes;if(Array.isArray(l))for(let d=0,c=l.length;d<c;d++){const u=l[d];r(e.shapes,u)}else r(e.shapes,l)}}if(this.isSkinnedMesh&&(s.bindMode=this.bindMode,s.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(r(e.skeletons,this.skeleton),s.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const o=[];for(let l=0,d=this.material.length;l<d;l++)o.push(r(e.materials,this.material[l]));s.material=o}else s.material=r(e.materials,this.material);if(this.children.length>0){s.children=[];for(let o=0;o<this.children.length;o++)s.children.push(this.children[o].toJSON(e).object)}if(this.animations.length>0){s.animations=[];for(let o=0;o<this.animations.length;o++){const l=this.animations[o];s.animations.push(r(e.animations,l))}}if(t){const o=a(e.geometries),l=a(e.materials),d=a(e.textures),c=a(e.images),u=a(e.shapes),p=a(e.skeletons),h=a(e.animations),b=a(e.nodes);o.length>0&&(n.geometries=o),l.length>0&&(n.materials=l),d.length>0&&(n.textures=d),c.length>0&&(n.images=c),u.length>0&&(n.shapes=u),p.length>0&&(n.skeletons=p),h.length>0&&(n.animations=h),b.length>0&&(n.nodes=b)}return n.object=s,n;function a(o){const l=[];for(const d in o){const c=o[d];delete c.metadata,l.push(c)}return l}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let n=0;n<e.children.length;n++){const s=e.children[n];this.add(s.clone())}return this}}Ye.DEFAULT_UP=new x(0,1,0);Ye.DEFAULT_MATRIX_AUTO_UPDATE=!0;Ye.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const rn=new x,In=new x,K2=new x,Xn=new x,ki=new x,Ji=new x,D7=new x,B2=new x,Q2=new x,_2=new x,$2=new He,e3=new He,t3=new He;let a1=class o1{constructor(e=new x,t=new x,n=new x){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,s){s.subVectors(n,t),rn.subVectors(e,t),s.cross(rn);const r=s.lengthSq();return r>0?s.multiplyScalar(1/Math.sqrt(r)):s.set(0,0,0)}static getBarycoord(e,t,n,s,r){rn.subVectors(s,t),In.subVectors(n,t),K2.subVectors(e,t);const a=rn.dot(rn),o=rn.dot(In),l=rn.dot(K2),d=In.dot(In),c=In.dot(K2),u=a*d-o*o;if(u===0)return r.set(0,0,0),null;const p=1/u,h=(d*l-o*c)*p,b=(a*c-o*l)*p;return r.set(1-h-b,b,h)}static containsPoint(e,t,n,s){return this.getBarycoord(e,t,n,s,Xn)===null?!1:Xn.x>=0&&Xn.y>=0&&Xn.x+Xn.y<=1}static getInterpolation(e,t,n,s,r,a,o,l){return this.getBarycoord(e,t,n,s,Xn)===null?(l.x=0,l.y=0,"z"in l&&(l.z=0),"w"in l&&(l.w=0),null):(l.setScalar(0),l.addScaledVector(r,Xn.x),l.addScaledVector(a,Xn.y),l.addScaledVector(o,Xn.z),l)}static getInterpolatedAttribute(e,t,n,s,r,a){return $2.setScalar(0),e3.setScalar(0),t3.setScalar(0),$2.fromBufferAttribute(e,t),e3.fromBufferAttribute(e,n),t3.fromBufferAttribute(e,s),a.setScalar(0),a.addScaledVector($2,r.x),a.addScaledVector(e3,r.y),a.addScaledVector(t3,r.z),a}static isFrontFacing(e,t,n,s){return rn.subVectors(n,t),In.subVectors(e,t),rn.cross(In).dot(s)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,s){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[s]),this}setFromAttributeAndIndices(e,t,n,s){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,s),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return rn.subVectors(this.c,this.b),In.subVectors(this.a,this.b),rn.cross(In).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return o1.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return o1.getBarycoord(e,this.a,this.b,this.c,t)}getInterpolation(e,t,n,s,r){return o1.getInterpolation(e,this.a,this.b,this.c,t,n,s,r)}containsPoint(e){return o1.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return o1.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,s=this.b,r=this.c;let a,o;ki.subVectors(s,n),Ji.subVectors(r,n),B2.subVectors(e,n);const l=ki.dot(B2),d=Ji.dot(B2);if(l<=0&&d<=0)return t.copy(n);Q2.subVectors(e,s);const c=ki.dot(Q2),u=Ji.dot(Q2);if(c>=0&&u<=c)return t.copy(s);const p=l*u-c*d;if(p<=0&&l>=0&&c<=0)return a=l/(l-c),t.copy(n).addScaledVector(ki,a);_2.subVectors(e,r);const h=ki.dot(_2),b=Ji.dot(_2);if(b>=0&&h<=b)return t.copy(r);const T=h*d-l*b;if(T<=0&&d>=0&&b<=0)return o=d/(d-b),t.copy(n).addScaledVector(Ji,o);const m=c*b-h*u;if(m<=0&&u-c>=0&&h-b>=0)return D7.subVectors(r,s),o=(u-c)/(u-c+(h-b)),t.copy(s).addScaledVector(D7,o);const f=1/(m+T+p);return a=T*f,o=p*f,t.copy(n).addScaledVector(ki,a).addScaledVector(Ji,o)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}};const A4={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},ti={h:0,s:0,l:0},js={h:0,s:0,l:0};function n3(i,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?i+(e-i)*6*t:t<1/2?e:t<2/3?i+(e-i)*6*(2/3-t):i}class te{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,n)}set(e,t,n){if(t===void 0&&n===void 0){const s=e;s&&s.isColor?this.copy(s):typeof s=="number"?this.setHex(s):typeof s=="string"&&this.setStyle(s)}else this.setRGB(e,t,n);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=bt){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,ge.colorSpaceToWorking(this,t),this}setRGB(e,t,n,s=ge.workingColorSpace){return this.r=e,this.g=t,this.b=n,ge.colorSpaceToWorking(this,s),this}setHSL(e,t,n,s=ge.workingColorSpace){if(e=Go(e,1),t=le(t,0,1),n=le(n,0,1),t===0)this.r=this.g=this.b=n;else{const r=n<=.5?n*(1+t):n+t-n*t,a=2*n-r;this.r=n3(a,r,e+1/3),this.g=n3(a,r,e),this.b=n3(a,r,e-1/3)}return ge.colorSpaceToWorking(this,s),this}setStyle(e,t=bt){function n(r){r!==void 0&&parseFloat(r)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let s;if(s=/^(\w+)\(([^\)]*)\)/.exec(e)){let r;const a=s[1],o=s[2];switch(a){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return n(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,t);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return n(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,t);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return n(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(s=/^\#([A-Fa-f\d]+)$/.exec(e)){const r=s[1],a=r.length;if(a===3)return this.setRGB(parseInt(r.charAt(0),16)/15,parseInt(r.charAt(1),16)/15,parseInt(r.charAt(2),16)/15,t);if(a===6)return this.setHex(parseInt(r,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=bt){const n=A4[e.toLowerCase()];return n!==void 0?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=Gn(e.r),this.g=Gn(e.g),this.b=Gn(e.b),this}copyLinearToSRGB(e){return this.r=g1(e.r),this.g=g1(e.g),this.b=g1(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=bt){return ge.workingToColorSpace(Pt.copy(this),e),Math.round(le(Pt.r*255,0,255))*65536+Math.round(le(Pt.g*255,0,255))*256+Math.round(le(Pt.b*255,0,255))}getHexString(e=bt){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=ge.workingColorSpace){ge.workingToColorSpace(Pt.copy(this),t);const n=Pt.r,s=Pt.g,r=Pt.b,a=Math.max(n,s,r),o=Math.min(n,s,r);let l,d;const c=(o+a)/2;if(o===a)l=0,d=0;else{const u=a-o;switch(d=c<=.5?u/(a+o):u/(2-a-o),a){case n:l=(s-r)/u+(s<r?6:0);break;case s:l=(r-n)/u+2;break;case r:l=(n-s)/u+4;break}l/=6}return e.h=l,e.s=d,e.l=c,e}getRGB(e,t=ge.workingColorSpace){return ge.workingToColorSpace(Pt.copy(this),t),e.r=Pt.r,e.g=Pt.g,e.b=Pt.b,e}getStyle(e=bt){ge.workingToColorSpace(Pt.copy(this),e);const t=Pt.r,n=Pt.g,s=Pt.b;return e!==bt?`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${s.toFixed(3)})`:`rgb(${Math.round(t*255)},${Math.round(n*255)},${Math.round(s*255)})`}offsetHSL(e,t,n){return this.getHSL(ti),this.setHSL(ti.h+e,ti.s+t,ti.l+n)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(ti),e.getHSL(js);const n=rs(ti.h,js.h,t),s=rs(ti.s,js.s,t),r=rs(ti.l,js.l,t);return this.setHSL(n,s,r),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const t=this.r,n=this.g,s=this.b,r=e.elements;return this.r=r[0]*t+r[3]*n+r[6]*s,this.g=r[1]*t+r[4]*n+r[7]*s,this.b=r[2]*t+r[5]*n+r[8]*s,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const Pt=new te;te.NAMES=A4;let xd=0;class hn extends Xi{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:xd++}),this.uuid=fn(),this.name="",this.type="Material",this.blending=y1,this.side=Zn,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=la,this.blendDst=da,this.blendEquation=Ri,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new te(0,0,0),this.blendAlpha=0,this.depthFunc=T1,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=H7,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Di,this.stencilZFail=Di,this.stencilZPass=Di,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.allowOverride=!0,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const n=e[t];if(n===void 0){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const s=this[t];if(s===void 0){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}s&&s.isColor?s.set(n):s&&s.isVector3&&n&&n.isVector3?s.copy(n):this[t]=n}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const n={metadata:{version:4.7,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==y1&&(n.blending=this.blending),this.side!==Zn&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==la&&(n.blendSrc=this.blendSrc),this.blendDst!==da&&(n.blendDst=this.blendDst),this.blendEquation!==Ri&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==T1&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==H7&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==Di&&(n.stencilFail=this.stencilFail),this.stencilZFail!==Di&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==Di&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function s(r){const a=[];for(const o in r){const l=r[o];delete l.metadata,a.push(l)}return a}if(t){const r=s(e.textures),a=s(e.images);r.length>0&&(n.textures=r),a.length>0&&(n.images=a)}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const s=t.length;n=new Array(s);for(let r=0;r!==s;++r)n[r]=t[r].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}}class Un extends hn{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new te(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Ne,this.combine=Co,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const Dn=Sd();function Sd(){const i=new ArrayBuffer(4),e=new Float32Array(i),t=new Uint32Array(i),n=new Uint32Array(512),s=new Uint32Array(512);for(let l=0;l<256;++l){const d=l-127;d<-27?(n[l]=0,n[l|256]=32768,s[l]=24,s[l|256]=24):d<-14?(n[l]=1024>>-d-14,n[l|256]=1024>>-d-14|32768,s[l]=-d-1,s[l|256]=-d-1):d<=15?(n[l]=d+15<<10,n[l|256]=d+15<<10|32768,s[l]=13,s[l|256]=13):d<128?(n[l]=31744,n[l|256]=64512,s[l]=24,s[l|256]=24):(n[l]=31744,n[l|256]=64512,s[l]=13,s[l|256]=13)}const r=new Uint32Array(2048),a=new Uint32Array(64),o=new Uint32Array(64);for(let l=1;l<1024;++l){let d=l<<13,c=0;for(;(d&8388608)===0;)d<<=1,c-=8388608;d&=-8388609,c+=947912704,r[l]=d|c}for(let l=1024;l<2048;++l)r[l]=939524096+(l-1024<<13);for(let l=1;l<31;++l)a[l]=l<<23;a[31]=1199570944,a[32]=2147483648;for(let l=33;l<63;++l)a[l]=2147483648+(l-32<<23);a[63]=3347054592;for(let l=1;l<64;++l)l!==32&&(o[l]=1024);return{floatView:e,uint32View:t,baseTable:n,shiftTable:s,mantissaTable:r,exponentTable:a,offsetTable:o}}function Pd(i){Math.abs(i)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),i=le(i,-65504,65504),Dn.floatView[0]=i;const e=Dn.uint32View[0],t=e>>23&511;return Dn.baseTable[t]+((e&8388607)>>Dn.shiftTable[t])}function Hd(i){const e=i>>10;return Dn.uint32View[0]=Dn.mantissaTable[Dn.offsetTable[e]+(i&1023)]+Dn.exponentTable[e],Dn.floatView[0]}class j7{static toHalfFloat(e){return Pd(e)}static fromHalfFloat(e){return Hd(e)}}const _e=new x,Ws=new ee;let Rd=0;class At{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,Object.defineProperty(this,"id",{value:Rd++}),this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n,this.usage=Ya,this.updateRanges=[],this.gpuType=jt,this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let s=0,r=this.itemSize;s<r;s++)this.array[e+s]=t.array[n+s];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)Ws.fromBufferAttribute(this,t),Ws.applyMatrix3(e),this.setXY(t,Ws.x,Ws.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)_e.fromBufferAttribute(this,t),_e.applyMatrix3(e),this.setXYZ(t,_e.x,_e.y,_e.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)_e.fromBufferAttribute(this,t),_e.applyMatrix4(e),this.setXYZ(t,_e.x,_e.y,_e.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)_e.fromBufferAttribute(this,t),_e.applyNormalMatrix(e),this.setXYZ(t,_e.x,_e.y,_e.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)_e.fromBufferAttribute(this,t),_e.transformDirection(e),this.setXYZ(t,_e.x,_e.y,_e.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let n=this.array[e*this.itemSize+t];return this.normalized&&(n=pn(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=Me(n,this.array)),this.array[e*this.itemSize+t]=n,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=pn(t,this.array)),t}setX(e,t){return this.normalized&&(t=Me(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=pn(t,this.array)),t}setY(e,t){return this.normalized&&(t=Me(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=pn(t,this.array)),t}setZ(e,t){return this.normalized&&(t=Me(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=pn(t,this.array)),t}setW(e,t){return this.normalized&&(t=Me(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=Me(t,this.array),n=Me(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,s){return e*=this.itemSize,this.normalized&&(t=Me(t,this.array),n=Me(n,this.array),s=Me(s,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=s,this}setXYZW(e,t,n,s,r){return e*=this.itemSize,this.normalized&&(t=Me(t,this.array),n=Me(n,this.array),s=Me(s,this.array),r=Me(r,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=s,this.array[e+3]=r,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==Ya&&(e.usage=this.usage),e}}class C4 extends At{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class ko extends At{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class wt extends At{constructor(e,t,n){super(new Float32Array(e),t,n)}}let Nd=0;const kt=new K0,i3=new Ye,Ki=new x,Gt=new Kn,U1=new Kn,ut=new x;class Mt extends Xi{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:Nd++}),this.uuid=fn(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(I4(e)?ko:C4)(e,1):this.index=e,this}setIndirect(e){return this.indirect=e,this}getIndirect(){return this.indirect}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const r=new re().getNormalMatrix(e);n.applyNormalMatrix(r),n.needsUpdate=!0}const s=this.attributes.tangent;return s!==void 0&&(s.transformDirection(e),s.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return kt.makeRotationFromQuaternion(e),this.applyMatrix4(kt),this}rotateX(e){return kt.makeRotationX(e),this.applyMatrix4(kt),this}rotateY(e){return kt.makeRotationY(e),this.applyMatrix4(kt),this}rotateZ(e){return kt.makeRotationZ(e),this.applyMatrix4(kt),this}translate(e,t,n){return kt.makeTranslation(e,t,n),this.applyMatrix4(kt),this}scale(e,t,n){return kt.makeScale(e,t,n),this.applyMatrix4(kt),this}lookAt(e){return i3.lookAt(e),i3.updateMatrix(),this.applyMatrix4(i3.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Ki).negate(),this.translate(Ki.x,Ki.y,Ki.z),this}setFromPoints(e){const t=this.getAttribute("position");if(t===void 0){const n=[];for(let s=0,r=e.length;s<r;s++){const a=e[s];n.push(a.x,a.y,a.z||0)}this.setAttribute("position",new wt(n,3))}else{const n=Math.min(e.length,t.count);for(let s=0;s<n;s++){const r=e[s];t.setXYZ(s,r.x,r.y,r.z||0)}e.length>t.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),t.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Kn);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new x(-1/0,-1/0,-1/0),new x(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,s=t.length;n<s;n++){const r=t[n];Gt.setFromBufferAttribute(r),this.morphTargetsRelative?(ut.addVectors(this.boundingBox.min,Gt.min),this.boundingBox.expandByPoint(ut),ut.addVectors(this.boundingBox.max,Gt.max),this.boundingBox.expandByPoint(ut)):(this.boundingBox.expandByPoint(Gt.min),this.boundingBox.expandByPoint(Gt.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Hn);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new x,1/0);return}if(e){const n=this.boundingSphere.center;if(Gt.setFromBufferAttribute(e),t)for(let r=0,a=t.length;r<a;r++){const o=t[r];U1.setFromBufferAttribute(o),this.morphTargetsRelative?(ut.addVectors(Gt.min,U1.min),Gt.expandByPoint(ut),ut.addVectors(Gt.max,U1.max),Gt.expandByPoint(ut)):(Gt.expandByPoint(U1.min),Gt.expandByPoint(U1.max))}Gt.getCenter(n);let s=0;for(let r=0,a=e.count;r<a;r++)ut.fromBufferAttribute(e,r),s=Math.max(s,n.distanceToSquared(ut));if(t)for(let r=0,a=t.length;r<a;r++){const o=t[r],l=this.morphTargetsRelative;for(let d=0,c=o.count;d<c;d++)ut.fromBufferAttribute(o,d),l&&(Ki.fromBufferAttribute(e,d),ut.add(Ki)),s=Math.max(s,n.distanceToSquared(ut))}this.boundingSphere.radius=Math.sqrt(s),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=t.position,s=t.normal,r=t.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new At(new Float32Array(4*n.count),4));const a=this.getAttribute("tangent"),o=[],l=[];for(let G=0;G<n.count;G++)o[G]=new x,l[G]=new x;const d=new x,c=new x,u=new x,p=new ee,h=new ee,b=new ee,T=new x,m=new x;function f(G,L,H){d.fromBufferAttribute(n,G),c.fromBufferAttribute(n,L),u.fromBufferAttribute(n,H),p.fromBufferAttribute(r,G),h.fromBufferAttribute(r,L),b.fromBufferAttribute(r,H),c.sub(d),u.sub(d),h.sub(p),b.sub(p);const W=1/(h.x*b.y-b.x*h.y);isFinite(W)&&(T.copy(c).multiplyScalar(b.y).addScaledVector(u,-h.y).multiplyScalar(W),m.copy(u).multiplyScalar(h.x).addScaledVector(c,-b.x).multiplyScalar(W),o[G].add(T),o[L].add(T),o[H].add(T),l[G].add(m),l[L].add(m),l[H].add(m))}let N=this.groups;N.length===0&&(N=[{start:0,count:e.count}]);for(let G=0,L=N.length;G<L;++G){const H=N[G],W=H.start,B=H.count;for(let Q=W,e0=W+B;Q<e0;Q+=3)f(e.getX(Q+0),e.getX(Q+1),e.getX(Q+2))}const M=new x,P=new x,V=new x,C=new x;function D(G){V.fromBufferAttribute(s,G),C.copy(V);const L=o[G];M.copy(L),M.sub(V.multiplyScalar(V.dot(L))).normalize(),P.crossVectors(C,L);const W=P.dot(l[G])<0?-1:1;a.setXYZW(G,M.x,M.y,M.z,W)}for(let G=0,L=N.length;G<L;++G){const H=N[G],W=H.start,B=H.count;for(let Q=W,e0=W+B;Q<e0;Q+=3)D(e.getX(Q+0)),D(e.getX(Q+1)),D(e.getX(Q+2))}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new At(new Float32Array(t.count*3),3),this.setAttribute("normal",n);else for(let p=0,h=n.count;p<h;p++)n.setXYZ(p,0,0,0);const s=new x,r=new x,a=new x,o=new x,l=new x,d=new x,c=new x,u=new x;if(e)for(let p=0,h=e.count;p<h;p+=3){const b=e.getX(p+0),T=e.getX(p+1),m=e.getX(p+2);s.fromBufferAttribute(t,b),r.fromBufferAttribute(t,T),a.fromBufferAttribute(t,m),c.subVectors(a,r),u.subVectors(s,r),c.cross(u),o.fromBufferAttribute(n,b),l.fromBufferAttribute(n,T),d.fromBufferAttribute(n,m),o.add(c),l.add(c),d.add(c),n.setXYZ(b,o.x,o.y,o.z),n.setXYZ(T,l.x,l.y,l.z),n.setXYZ(m,d.x,d.y,d.z)}else for(let p=0,h=t.count;p<h;p+=3)s.fromBufferAttribute(t,p+0),r.fromBufferAttribute(t,p+1),a.fromBufferAttribute(t,p+2),c.subVectors(a,r),u.subVectors(s,r),c.cross(u),n.setXYZ(p+0,c.x,c.y,c.z),n.setXYZ(p+1,c.x,c.y,c.z),n.setXYZ(p+2,c.x,c.y,c.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)ut.fromBufferAttribute(e,t),ut.normalize(),e.setXYZ(t,ut.x,ut.y,ut.z)}toNonIndexed(){function e(o,l){const d=o.array,c=o.itemSize,u=o.normalized,p=new d.constructor(l.length*c);let h=0,b=0;for(let T=0,m=l.length;T<m;T++){o.isInterleavedBufferAttribute?h=l[T]*o.data.stride+o.offset:h=l[T]*c;for(let f=0;f<c;f++)p[b++]=d[h++]}return new At(p,c,u)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new Mt,n=this.index.array,s=this.attributes;for(const o in s){const l=s[o],d=e(l,n);t.setAttribute(o,d)}const r=this.morphAttributes;for(const o in r){const l=[],d=r[o];for(let c=0,u=d.length;c<u;c++){const p=d[c],h=e(p,n);l.push(h)}t.morphAttributes[o]=l}t.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let o=0,l=a.length;o<l;o++){const d=a[o];t.addGroup(d.start,d.count,d.materialIndex)}return t}toJSON(){const e={metadata:{version:4.7,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const d in l)l[d]!==void 0&&(e[d]=l[d]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const l in n){const d=n[l];e.data.attributes[l]=d.toJSON(e.data)}const s={};let r=!1;for(const l in this.morphAttributes){const d=this.morphAttributes[l],c=[];for(let u=0,p=d.length;u<p;u++){const h=d[u];c.push(h.toJSON(e.data))}c.length>0&&(s[l]=c,r=!0)}r&&(e.data.morphAttributes=s,e.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(e.data.groups=JSON.parse(JSON.stringify(a)));const o=this.boundingSphere;return o!==null&&(e.data.boundingSphere=o.toJSON()),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone());const s=e.attributes;for(const d in s){const c=s[d];this.setAttribute(d,c.clone(t))}const r=e.morphAttributes;for(const d in r){const c=[],u=r[d];for(let p=0,h=u.length;p<h;p++)c.push(u[p].clone(t));this.morphAttributes[d]=c}this.morphTargetsRelative=e.morphTargetsRelative;const a=e.groups;for(let d=0,c=a.length;d<c;d++){const u=a[d];this.addGroup(u.start,u.count,u.materialIndex)}const o=e.boundingBox;o!==null&&(this.boundingBox=o.clone());const l=e.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const W7=new K0,vi=new E1,Us=new Hn,U7=new x,qs=new x,Gs=new x,Zs=new x,s3=new x,Ys=new x,q7=new x,ks=new x;class Be extends Ye{constructor(e=new Mt,t=new Un){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.count=1,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const s=t[n[0]];if(s!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,a=s.length;r<a;r++){const o=s[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=r}}}}getVertexPosition(e,t){const n=this.geometry,s=n.attributes.position,r=n.morphAttributes.position,a=n.morphTargetsRelative;t.fromBufferAttribute(s,e);const o=this.morphTargetInfluences;if(r&&o){Ys.set(0,0,0);for(let l=0,d=r.length;l<d;l++){const c=o[l],u=r[l];c!==0&&(s3.fromBufferAttribute(u,e),a?Ys.addScaledVector(s3,c):Ys.addScaledVector(s3.sub(t),c))}t.add(Ys)}return t}raycast(e,t){const n=this.geometry,s=this.material,r=this.matrixWorld;s!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),Us.copy(n.boundingSphere),Us.applyMatrix4(r),vi.copy(e.ray).recast(e.near),!(Us.containsPoint(vi.origin)===!1&&(vi.intersectSphere(Us,U7)===null||vi.origin.distanceToSquared(U7)>(e.far-e.near)**2))&&(W7.copy(r).invert(),vi.copy(e.ray).applyMatrix4(W7),!(n.boundingBox!==null&&vi.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(e,t,vi)))}_computeIntersections(e,t,n){let s;const r=this.geometry,a=this.material,o=r.index,l=r.attributes.position,d=r.attributes.uv,c=r.attributes.uv1,u=r.attributes.normal,p=r.groups,h=r.drawRange;if(o!==null)if(Array.isArray(a))for(let b=0,T=p.length;b<T;b++){const m=p[b],f=a[m.materialIndex],N=Math.max(m.start,h.start),M=Math.min(o.count,Math.min(m.start+m.count,h.start+h.count));for(let P=N,V=M;P<V;P+=3){const C=o.getX(P),D=o.getX(P+1),G=o.getX(P+2);s=Js(this,f,e,n,d,c,u,C,D,G),s&&(s.faceIndex=Math.floor(P/3),s.face.materialIndex=m.materialIndex,t.push(s))}}else{const b=Math.max(0,h.start),T=Math.min(o.count,h.start+h.count);for(let m=b,f=T;m<f;m+=3){const N=o.getX(m),M=o.getX(m+1),P=o.getX(m+2);s=Js(this,a,e,n,d,c,u,N,M,P),s&&(s.faceIndex=Math.floor(m/3),t.push(s))}}else if(l!==void 0)if(Array.isArray(a))for(let b=0,T=p.length;b<T;b++){const m=p[b],f=a[m.materialIndex],N=Math.max(m.start,h.start),M=Math.min(l.count,Math.min(m.start+m.count,h.start+h.count));for(let P=N,V=M;P<V;P+=3){const C=P,D=P+1,G=P+2;s=Js(this,f,e,n,d,c,u,C,D,G),s&&(s.faceIndex=Math.floor(P/3),s.face.materialIndex=m.materialIndex,t.push(s))}}else{const b=Math.max(0,h.start),T=Math.min(l.count,h.start+h.count);for(let m=b,f=T;m<f;m+=3){const N=m,M=m+1,P=m+2;s=Js(this,a,e,n,d,c,u,N,M,P),s&&(s.faceIndex=Math.floor(m/3),t.push(s))}}}}function Ld(i,e,t,n,s,r,a,o){let l;if(e.side===Wt?l=n.intersectTriangle(a,r,s,!0,o):l=n.intersectTriangle(s,r,a,e.side===Zn,o),l===null)return null;ks.copy(o),ks.applyMatrix4(i.matrixWorld);const d=t.ray.origin.distanceTo(ks);return d<t.near||d>t.far?null:{distance:d,point:ks.clone(),object:i}}function Js(i,e,t,n,s,r,a,o,l,d){i.getVertexPosition(o,qs),i.getVertexPosition(l,Gs),i.getVertexPosition(d,Zs);const c=Ld(i,e,t,n,qs,Gs,Zs,q7);if(c){const u=new x;a1.getBarycoord(q7,qs,Gs,Zs,u),s&&(c.uv=a1.getInterpolatedAttribute(s,o,l,d,u,new ee)),r&&(c.uv1=a1.getInterpolatedAttribute(r,o,l,d,u,new ee)),a&&(c.normal=a1.getInterpolatedAttribute(a,o,l,d,u,new x),c.normal.dot(n.direction)>0&&c.normal.multiplyScalar(-1));const p={a:o,b:l,c:d,normal:new x,materialIndex:0};a1.getNormal(qs,Gs,Zs,p.normal),c.face=p,c.barycoord=u}return c}class en extends Mt{constructor(e=1,t=1,n=1,s=1,r=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:s,heightSegments:r,depthSegments:a};const o=this;s=Math.floor(s),r=Math.floor(r),a=Math.floor(a);const l=[],d=[],c=[],u=[];let p=0,h=0;b("z","y","x",-1,-1,n,t,e,a,r,0),b("z","y","x",1,-1,n,t,-e,a,r,1),b("x","z","y",1,1,e,n,t,s,a,2),b("x","z","y",1,-1,e,n,-t,s,a,3),b("x","y","z",1,-1,e,t,n,s,r,4),b("x","y","z",-1,-1,e,t,-n,s,r,5),this.setIndex(l),this.setAttribute("position",new wt(d,3)),this.setAttribute("normal",new wt(c,3)),this.setAttribute("uv",new wt(u,2));function b(T,m,f,N,M,P,V,C,D,G,L){const H=P/D,W=V/G,B=P/2,Q=V/2,e0=C/2,u0=D+1,n0=G+1;let b0=0,t0=0;const x0=new x;for(let R0=0;R0<n0;R0++){const V0=R0*W-Q;for(let B0=0;B0<u0;B0++){const ue=B0*H-B;x0[T]=ue*N,x0[m]=V0*M,x0[f]=e0,d.push(x0.x,x0.y,x0.z),x0[T]=0,x0[m]=0,x0[f]=C>0?1:-1,c.push(x0.x,x0.y,x0.z),u.push(B0/D),u.push(1-R0/G),b0+=1}}for(let R0=0;R0<G;R0++)for(let V0=0;V0<D;V0++){const B0=p+V0+u0*R0,ue=p+V0+u0*(R0+1),s0=p+(V0+1)+u0*(R0+1),w0=p+(V0+1)+u0*R0;l.push(B0,ue,w0),l.push(ue,s0,w0),t0+=6}o.addGroup(h,t0,L),h+=t0,p+=b0}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new en(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function R1(i){const e={};for(const t in i){e[t]={};for(const n in i[t]){const s=i[t][n];s&&(s.isColor||s.isMatrix3||s.isMatrix4||s.isVector2||s.isVector3||s.isVector4||s.isTexture||s.isQuaternion)?s.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[t][n]=null):e[t][n]=s.clone():Array.isArray(s)?e[t][n]=s.slice():e[t][n]=s}}return e}function Ot(i){const e={};for(let t=0;t<i.length;t++){const n=R1(i[t]);for(const s in n)e[s]=n[s]}return e}function Md(i){const e=[];for(let t=0;t<i.length;t++)e.push(i[t].clone());return e}function F4(i){const e=i.getRenderTarget();return e===null?i.outputColorSpace:e.isXRRenderTarget===!0?e.texture.colorSpace:ge.workingColorSpace}const Ed={clone:R1,merge:Ot};var Od=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,zd=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class fi extends hn{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=Od,this.fragmentShader=zd,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=R1(e.uniforms),this.uniformsGroups=Md(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const s in this.uniforms){const a=this.uniforms[s].value;a&&a.isTexture?t.uniforms[s]={type:"t",value:a.toJSON(e).uuid}:a&&a.isColor?t.uniforms[s]={type:"c",value:a.getHex()}:a&&a.isVector2?t.uniforms[s]={type:"v2",value:a.toArray()}:a&&a.isVector3?t.uniforms[s]={type:"v3",value:a.toArray()}:a&&a.isVector4?t.uniforms[s]={type:"v4",value:a.toArray()}:a&&a.isMatrix3?t.uniforms[s]={type:"m3",value:a.toArray()}:a&&a.isMatrix4?t.uniforms[s]={type:"m4",value:a.toArray()}:t.uniforms[s]={value:a}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;const n={};for(const s in this.extensions)this.extensions[s]===!0&&(n[s]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}let V4=class extends Ye{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new K0,this.projectionMatrix=new K0,this.projectionMatrixInverse=new K0,this.coordinateSystem=Wn}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}};const ni=new x,G7=new ee,Z7=new ee;class It extends V4{constructor(e=50,t=1,n=.1,s=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=s,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=H1*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(b1*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return H1*2*Math.atan(Math.tan(b1*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,t,n){ni.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),t.set(ni.x,ni.y).multiplyScalar(-e/ni.z),ni.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(ni.x,ni.y).multiplyScalar(-e/ni.z)}getViewSize(e,t){return this.getViewBounds(e,G7,Z7),t.subVectors(Z7,G7)}setViewOffset(e,t,n,s,r,a){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=s,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(b1*.5*this.fov)/this.zoom,n=2*t,s=this.aspect*n,r=-.5*s;const a=this.view;if(this.view!==null&&this.view.enabled){const l=a.fullWidth,d=a.fullHeight;r+=a.offsetX*s/l,t-=a.offsetY*n/d,s*=a.width/l,n*=a.height/d}const o=this.filmOffset;o!==0&&(r+=e*o/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+s,t,t-n,e,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const Bi=-90,Qi=1;class Id extends Ye{constructor(e,t,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const s=new It(Bi,Qi,e,t);s.layers=this.layers,this.add(s);const r=new It(Bi,Qi,e,t);r.layers=this.layers,this.add(r);const a=new It(Bi,Qi,e,t);a.layers=this.layers,this.add(a);const o=new It(Bi,Qi,e,t);o.layers=this.layers,this.add(o);const l=new It(Bi,Qi,e,t);l.layers=this.layers,this.add(l);const d=new It(Bi,Qi,e,t);d.layers=this.layers,this.add(d)}updateCoordinateSystem(){const e=this.coordinateSystem,t=this.children.concat(),[n,s,r,a,o,l]=t;for(const d of t)this.remove(d);if(e===Wn)n.up.set(0,1,0),n.lookAt(1,0,0),s.up.set(0,1,0),s.lookAt(-1,0,0),r.up.set(0,0,-1),r.lookAt(0,1,0),a.up.set(0,0,1),a.lookAt(0,-1,0),o.up.set(0,1,0),o.lookAt(0,0,1),l.up.set(0,1,0),l.lookAt(0,0,-1);else if(e===Gr)n.up.set(0,-1,0),n.lookAt(-1,0,0),s.up.set(0,-1,0),s.lookAt(1,0,0),r.up.set(0,0,1),r.lookAt(0,1,0),a.up.set(0,0,-1),a.lookAt(0,-1,0),o.up.set(0,-1,0),o.lookAt(0,0,1),l.up.set(0,-1,0),l.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);for(const d of t)this.add(d),d.updateMatrixWorld()}update(e,t){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:s}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());const[r,a,o,l,d,c]=this.children,u=e.getRenderTarget(),p=e.getActiveCubeFace(),h=e.getActiveMipmapLevel(),b=e.xr.enabled;e.xr.enabled=!1;const T=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0,s),e.render(t,r),e.setRenderTarget(n,1,s),e.render(t,a),e.setRenderTarget(n,2,s),e.render(t,o),e.setRenderTarget(n,3,s),e.render(t,l),e.setRenderTarget(n,4,s),e.render(t,d),n.texture.generateMipmaps=T,e.setRenderTarget(n,5,s),e.render(t,c),e.setRenderTarget(u,p,h),e.xr.enabled=b,n.texture.needsPMREMUpdate=!0}}class D4 extends gt{constructor(e=[],t=x1,n,s,r,a,o,l,d,c){super(e,t,n,s,r,a,o,l,d,c),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class Xd extends Ei{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const n={width:e,height:e,depth:1},s=[n,n,n,n,n,n];this.texture=new D4(s),this._setTextureOptions(t),this.texture.isRenderTargetTexture=!0}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},s=new en(5,5,5),r=new fi({name:"CubemapFromEquirect",uniforms:R1(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:Wt,blending:ui});r.uniforms.tEquirect.value=t;const a=new Be(s,r),o=t.minFilter;return t.minFilter===xn&&(t.minFilter=vt),new Id(1,10,this).update(e,a),t.minFilter=o,a.geometry.dispose(),a.material.dispose(),this}clear(e,t=!0,n=!0,s=!0){const r=e.getRenderTarget();for(let a=0;a<6;a++)e.setRenderTarget(this,a),e.clear(t,n,s);e.setRenderTarget(r)}}class ci extends Ye{constructor(){super(),this.isGroup=!0,this.type="Group"}}const Ad={type:"move"};class r3{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new ci,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new ci,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new x,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new x),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new ci,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new x,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new x),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const n of e.hand.values())this._getHandJoint(t,n)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let s=null,r=null,a=null;const o=this._targetRay,l=this._grip,d=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(d&&e.hand){a=!0;for(const T of e.hand.values()){const m=t.getJointPose(T,n),f=this._getHandJoint(d,T);m!==null&&(f.matrix.fromArray(m.transform.matrix),f.matrix.decompose(f.position,f.rotation,f.scale),f.matrixWorldNeedsUpdate=!0,f.jointRadius=m.radius),f.visible=m!==null}const c=d.joints["index-finger-tip"],u=d.joints["thumb-tip"],p=c.position.distanceTo(u.position),h=.02,b=.005;d.inputState.pinching&&p>h+b?(d.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!d.inputState.pinching&&p<=h-b&&(d.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else l!==null&&e.gripSpace&&(r=t.getPose(e.gripSpace,n),r!==null&&(l.matrix.fromArray(r.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),l.matrixWorldNeedsUpdate=!0,r.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(r.linearVelocity)):l.hasLinearVelocity=!1,r.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(r.angularVelocity)):l.hasAngularVelocity=!1));o!==null&&(s=t.getPose(e.targetRaySpace,n),s===null&&r!==null&&(s=r),s!==null&&(o.matrix.fromArray(s.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,s.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(s.linearVelocity)):o.hasLinearVelocity=!1,s.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(s.angularVelocity)):o.hasAngularVelocity=!1,this.dispatchEvent(Ad)))}return o!==null&&(o.visible=s!==null),l!==null&&(l.visible=r!==null),d!==null&&(d.visible=a!==null),this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const n=new ci;n.matrixAutoUpdate=!1,n.visible=!1,e.joints[t.jointName]=n,e.add(n)}return e.joints[t.jointName]}}let Y7=class extends Ye{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new Ne,this.environmentIntensity=1,this.environmentRotation=new Ne,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,this.backgroundRotation.copy(e.backgroundRotation),this.environmentIntensity=e.environmentIntensity,this.environmentRotation.copy(e.environmentRotation),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(t.object.backgroundIntensity=this.backgroundIntensity),t.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(t.object.environmentIntensity=this.environmentIntensity),t.object.environmentRotation=this.environmentRotation.toArray(),t}};class Cd{constructor(e,t){this.isInterleavedBuffer=!0,this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=Ya,this.updateRanges=[],this.version=0,this.uuid=fn()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,n){e*=this.stride,n*=t.stride;for(let s=0,r=this.stride;s<r;s++)this.array[e+s]=t.array[n+s];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=fn()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(t,this.stride);return n.setUsage(this.usage),n}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=fn()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const Et=new x;class Jo{constructor(e,t,n,s=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=e,this.itemSize=t,this.offset=n,this.normalized=s}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,n=this.data.count;t<n;t++)Et.fromBufferAttribute(this,t),Et.applyMatrix4(e),this.setXYZ(t,Et.x,Et.y,Et.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)Et.fromBufferAttribute(this,t),Et.applyNormalMatrix(e),this.setXYZ(t,Et.x,Et.y,Et.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)Et.fromBufferAttribute(this,t),Et.transformDirection(e),this.setXYZ(t,Et.x,Et.y,Et.z);return this}getComponent(e,t){let n=this.array[e*this.data.stride+this.offset+t];return this.normalized&&(n=pn(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=Me(n,this.array)),this.data.array[e*this.data.stride+this.offset+t]=n,this}setX(e,t){return this.normalized&&(t=Me(t,this.array)),this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.normalized&&(t=Me(t,this.array)),this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.normalized&&(t=Me(t,this.array)),this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.normalized&&(t=Me(t,this.array)),this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){let t=this.data.array[e*this.data.stride+this.offset];return this.normalized&&(t=pn(t,this.array)),t}getY(e){let t=this.data.array[e*this.data.stride+this.offset+1];return this.normalized&&(t=pn(t,this.array)),t}getZ(e){let t=this.data.array[e*this.data.stride+this.offset+2];return this.normalized&&(t=pn(t,this.array)),t}getW(e){let t=this.data.array[e*this.data.stride+this.offset+3];return this.normalized&&(t=pn(t,this.array)),t}setXY(e,t,n){return e=e*this.data.stride+this.offset,this.normalized&&(t=Me(t,this.array),n=Me(n,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this}setXYZ(e,t,n,s){return e=e*this.data.stride+this.offset,this.normalized&&(t=Me(t,this.array),n=Me(n,this.array),s=Me(s,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=s,this}setXYZW(e,t,n,s,r){return e=e*this.data.stride+this.offset,this.normalized&&(t=Me(t,this.array),n=Me(n,this.array),s=Me(s,this.array),r=Me(r,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=s,this.data.array[e+3]=r,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const s=n*this.data.stride+this.offset;for(let r=0;r<this.itemSize;r++)t.push(this.data.array[s+r])}return new At(new this.array.constructor(t),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new Jo(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const s=n*this.data.stride+this.offset;for(let r=0;r<this.itemSize;r++)t.push(this.data.array[s+r])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}const k7=new x,J7=new He,K7=new He,Fd=new x,B7=new K0,Ks=new x,a3=new Hn,Q7=new K0,o3=new E1;class Vd extends Be{constructor(e,t){super(e,t),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode=T7,this.bindMatrix=new K0,this.bindMatrixInverse=new K0,this.boundingBox=null,this.boundingSphere=null}computeBoundingBox(){const e=this.geometry;this.boundingBox===null&&(this.boundingBox=new Kn),this.boundingBox.makeEmpty();const t=e.getAttribute("position");for(let n=0;n<t.count;n++)this.getVertexPosition(n,Ks),this.boundingBox.expandByPoint(Ks)}computeBoundingSphere(){const e=this.geometry;this.boundingSphere===null&&(this.boundingSphere=new Hn),this.boundingSphere.makeEmpty();const t=e.getAttribute("position");for(let n=0;n<t.count;n++)this.getVertexPosition(n,Ks),this.boundingSphere.expandByPoint(Ks)}copy(e,t){return super.copy(e,t),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}raycast(e,t){const n=this.material,s=this.matrixWorld;n!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),a3.copy(this.boundingSphere),a3.applyMatrix4(s),e.ray.intersectsSphere(a3)!==!1&&(Q7.copy(s).invert(),o3.copy(e.ray).applyMatrix4(Q7),!(this.boundingBox!==null&&o3.intersectsBox(this.boundingBox)===!1)&&this._computeIntersections(e,t,o3)))}getVertexPosition(e,t){return super.getVertexPosition(e,t),this.applyBoneTransform(e,t),t}bind(e,t){this.skeleton=e,t===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new He,t=this.geometry.attributes.skinWeight;for(let n=0,s=t.count;n<s;n++){e.fromBufferAttribute(t,n);const r=1/e.manhattanLength();r!==1/0?e.multiplyScalar(r):e.set(1,0,0,0),t.setXYZW(n,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode===T7?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode===El?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}applyBoneTransform(e,t){const n=this.skeleton,s=this.geometry;J7.fromBufferAttribute(s.attributes.skinIndex,e),K7.fromBufferAttribute(s.attributes.skinWeight,e),k7.copy(t).applyMatrix4(this.bindMatrix),t.set(0,0,0);for(let r=0;r<4;r++){const a=K7.getComponent(r);if(a!==0){const o=J7.getComponent(r);B7.multiplyMatrices(n.bones[o].matrixWorld,n.boneInverses[o]),t.addScaledVector(Fd.copy(k7).applyMatrix4(B7),a)}}return t.applyMatrix4(this.bindMatrixInverse)}}class j4 extends Ye{constructor(){super(),this.isBone=!0,this.type="Bone"}}class Ko extends gt{constructor(e=null,t=1,n=1,s,r,a,o,l,d=Xt,c=Xt,u,p){super(null,a,o,l,d,c,s,r,u,p),this.isDataTexture=!0,this.image={data:e,width:t,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const _7=new K0,Dd=new K0;class Bo{constructor(e=[],t=[]){this.uuid=fn(),this.bones=e.slice(0),this.boneInverses=t,this.boneMatrices=null,this.boneTexture=null,this.init()}init(){const e=this.bones,t=this.boneInverses;if(this.boneMatrices=new Float32Array(e.length*16),t.length===0)this.calculateInverses();else if(e.length!==t.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let n=0,s=this.bones.length;n<s;n++)this.boneInverses.push(new K0)}}calculateInverses(){this.boneInverses.length=0;for(let e=0,t=this.bones.length;e<t;e++){const n=new K0;this.bones[e]&&n.copy(this.bones[e].matrixWorld).invert(),this.boneInverses.push(n)}}pose(){for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&n.matrixWorld.copy(this.boneInverses[e]).invert()}for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&(n.parent&&n.parent.isBone?(n.matrix.copy(n.parent.matrixWorld).invert(),n.matrix.multiply(n.matrixWorld)):n.matrix.copy(n.matrixWorld),n.matrix.decompose(n.position,n.quaternion,n.scale))}}update(){const e=this.bones,t=this.boneInverses,n=this.boneMatrices,s=this.boneTexture;for(let r=0,a=e.length;r<a;r++){const o=e[r]?e[r].matrixWorld:Dd;_7.multiplyMatrices(o,t[r]),_7.toArray(n,r*16)}s!==null&&(s.needsUpdate=!0)}clone(){return new Bo(this.bones,this.boneInverses)}computeBoneTexture(){let e=Math.sqrt(this.bones.length*4);e=Math.ceil(e/4)*4,e=Math.max(e,4);const t=new Float32Array(e*e*4);t.set(this.boneMatrices);const n=new Ko(t,e,e,Yt,jt);return n.needsUpdate=!0,this.boneMatrices=t,this.boneTexture=n,this}getBoneByName(e){for(let t=0,n=this.bones.length;t<n;t++){const s=this.bones[t];if(s.name===e)return s}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(e,t){this.uuid=e.uuid;for(let n=0,s=e.bones.length;n<s;n++){const r=e.bones[n];let a=t[r];a===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",r),a=new j4),this.bones.push(a),this.boneInverses.push(new K0().fromArray(e.boneInverses[n]))}return this.init(),this}toJSON(){const e={metadata:{version:4.7,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};e.uuid=this.uuid;const t=this.bones,n=this.boneInverses;for(let s=0,r=t.length;s<r;s++){const a=t[s];e.bones.push(a.uuid);const o=n[s];e.boneInverses.push(o.toArray())}return e}}class ka extends At{constructor(e,t,n,s=1){super(e,t,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=s}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}const _i=new K0,$7=new K0,Bs=[],e9=new Kn,jd=new K0,q1=new Be,G1=new Hn;class Ai extends Be{constructor(e,t,n){super(e,t),this.isInstancedMesh=!0,this.instanceMatrix=new ka(new Float32Array(n*16),16),this.instanceColor=null,this.morphTexture=null,this.count=n,this.boundingBox=null,this.boundingSphere=null;for(let s=0;s<n;s++)this.setMatrixAt(s,jd)}computeBoundingBox(){const e=this.geometry,t=this.count;this.boundingBox===null&&(this.boundingBox=new Kn),e.boundingBox===null&&e.computeBoundingBox(),this.boundingBox.makeEmpty();for(let n=0;n<t;n++)this.getMatrixAt(n,_i),e9.copy(e.boundingBox).applyMatrix4(_i),this.boundingBox.union(e9)}computeBoundingSphere(){const e=this.geometry,t=this.count;this.boundingSphere===null&&(this.boundingSphere=new Hn),e.boundingSphere===null&&e.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let n=0;n<t;n++)this.getMatrixAt(n,_i),G1.copy(e.boundingSphere).applyMatrix4(_i),this.boundingSphere.union(G1)}copy(e,t){return super.copy(e,t),this.instanceMatrix.copy(e.instanceMatrix),e.morphTexture!==null&&(this.morphTexture=e.morphTexture.clone()),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}getColorAt(e,t){t.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,e*16)}getMorphAt(e,t){const n=t.morphTargetInfluences,s=this.morphTexture.source.data.data,r=n.length+1,a=e*r+1;for(let o=0;o<n.length;o++)n[o]=s[a+o]}raycast(e,t){const n=this.matrixWorld,s=this.count;if(q1.geometry=this.geometry,q1.material=this.material,q1.material!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),G1.copy(this.boundingSphere),G1.applyMatrix4(n),e.ray.intersectsSphere(G1)!==!1))for(let r=0;r<s;r++){this.getMatrixAt(r,_i),$7.multiplyMatrices(n,_i),q1.matrixWorld=$7,q1.raycast(e,Bs);for(let a=0,o=Bs.length;a<o;a++){const l=Bs[a];l.instanceId=r,l.object=this,t.push(l)}Bs.length=0}}setColorAt(e,t){this.instanceColor===null&&(this.instanceColor=new ka(new Float32Array(this.instanceMatrix.count*3).fill(1),3)),t.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,t){t.toArray(this.instanceMatrix.array,e*16)}setMorphAt(e,t){const n=t.morphTargetInfluences,s=n.length+1;this.morphTexture===null&&(this.morphTexture=new Ko(new Float32Array(s*this.count),s,this.count,g2,jt));const r=this.morphTexture.source.data.data;let a=0;for(let d=0;d<n.length;d++)a+=n[d];const o=this.geometry.morphTargetsRelative?1:1-a,l=s*e;r[l]=o,r.set(n,l+1)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"}),this.morphTexture!==null&&(this.morphTexture.dispose(),this.morphTexture=null)}}const l3=new x,Wd=new x,Ud=new re;class oi{constructor(e=new x(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,s){return this.normal.set(e,t,n),this.constant=s,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const s=l3.subVectors(n,t).cross(Wd.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(s,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const n=e.delta(l3),s=this.normal.dot(n);if(s===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const r=-(e.start.dot(this.normal)+this.constant)/s;return r<0||r>1?null:t.copy(e.start).addScaledVector(n,r)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||Ud.getNormalMatrix(e),s=this.coplanarPoint(l3).applyMatrix4(e),r=this.normal.applyMatrix3(n).normalize();return this.constant=-s.dot(r),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const gi=new Hn,qd=new ee(.5,.5),Qs=new x;class Qo{constructor(e=new oi,t=new oi,n=new oi,s=new oi,r=new oi,a=new oi){this.planes=[e,t,n,s,r,a]}set(e,t,n,s,r,a){const o=this.planes;return o[0].copy(e),o[1].copy(t),o[2].copy(n),o[3].copy(s),o[4].copy(r),o[5].copy(a),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e,t=Wn){const n=this.planes,s=e.elements,r=s[0],a=s[1],o=s[2],l=s[3],d=s[4],c=s[5],u=s[6],p=s[7],h=s[8],b=s[9],T=s[10],m=s[11],f=s[12],N=s[13],M=s[14],P=s[15];if(n[0].setComponents(l-r,p-d,m-h,P-f).normalize(),n[1].setComponents(l+r,p+d,m+h,P+f).normalize(),n[2].setComponents(l+a,p+c,m+b,P+N).normalize(),n[3].setComponents(l-a,p-c,m-b,P-N).normalize(),n[4].setComponents(l-o,p-u,m-T,P-M).normalize(),t===Wn)n[5].setComponents(l+o,p+u,m+T,P+M).normalize();else if(t===Gr)n[5].setComponents(o,u,T,M).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);return this}intersectsObject(e){if(e.boundingSphere!==void 0)e.boundingSphere===null&&e.computeBoundingSphere(),gi.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;t.boundingSphere===null&&t.computeBoundingSphere(),gi.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(gi)}intersectsSprite(e){gi.center.set(0,0,0);const t=qd.distanceTo(e.center);return gi.radius=.7071067811865476+t,gi.applyMatrix4(e.matrixWorld),this.intersectsSphere(gi)}intersectsSphere(e){const t=this.planes,n=e.center,s=-e.radius;for(let r=0;r<6;r++)if(t[r].distanceToPoint(n)<s)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const s=t[n];if(Qs.x=s.normal.x>0?e.max.x:e.min.x,Qs.y=s.normal.y>0?e.max.y:e.min.y,Qs.z=s.normal.z>0?e.max.z:e.min.z,s.distanceToPoint(Qs)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}class bs extends hn{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new te(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}const Zr=new x,Yr=new x,t9=new K0,Z1=new E1,_s=new Hn,d3=new x,n9=new x;class w2 extends Ye{constructor(e=new Mt,t=new bs){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=t,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[0];for(let s=1,r=t.count;s<r;s++)Zr.fromBufferAttribute(t,s-1),Yr.fromBufferAttribute(t,s),n[s]=n[s-1],n[s]+=Zr.distanceTo(Yr);e.setAttribute("lineDistance",new wt(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,t){const n=this.geometry,s=this.matrixWorld,r=e.params.Line.threshold,a=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),_s.copy(n.boundingSphere),_s.applyMatrix4(s),_s.radius+=r,e.ray.intersectsSphere(_s)===!1)return;t9.copy(s).invert(),Z1.copy(e.ray).applyMatrix4(t9);const o=r/((this.scale.x+this.scale.y+this.scale.z)/3),l=o*o,d=this.isLineSegments?2:1,c=n.index,p=n.attributes.position;if(c!==null){const h=Math.max(0,a.start),b=Math.min(c.count,a.start+a.count);for(let T=h,m=b-1;T<m;T+=d){const f=c.getX(T),N=c.getX(T+1),M=$s(this,e,Z1,l,f,N,T);M&&t.push(M)}if(this.isLineLoop){const T=c.getX(b-1),m=c.getX(h),f=$s(this,e,Z1,l,T,m,b-1);f&&t.push(f)}}else{const h=Math.max(0,a.start),b=Math.min(p.count,a.start+a.count);for(let T=h,m=b-1;T<m;T+=d){const f=$s(this,e,Z1,l,T,T+1,T);f&&t.push(f)}if(this.isLineLoop){const T=$s(this,e,Z1,l,b-1,h,b-1);T&&t.push(T)}}}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const s=t[n[0]];if(s!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,a=s.length;r<a;r++){const o=s[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=r}}}}}function $s(i,e,t,n,s,r,a){const o=i.geometry.attributes.position;if(Zr.fromBufferAttribute(o,s),Yr.fromBufferAttribute(o,r),t.distanceSqToSegment(Zr,Yr,d3,n9)>n)return;d3.applyMatrix4(i.matrixWorld);const d=e.ray.origin.distanceTo(d3);if(!(d<e.near||d>e.far))return{distance:d,point:n9.clone().applyMatrix4(i.matrixWorld),index:a,face:null,faceIndex:null,barycoord:null,object:i}}const i9=new x,s9=new x;class _o extends w2{constructor(e,t){super(e,t),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[];for(let s=0,r=t.count;s<r;s+=2)i9.fromBufferAttribute(t,s),s9.fromBufferAttribute(t,s+1),n[s]=s===0?0:n[s-1],n[s+1]=n[s]+i9.distanceTo(s9);e.setAttribute("lineDistance",new wt(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class Gd extends w2{constructor(e,t){super(e,t),this.isLineLoop=!0,this.type="LineLoop"}}class W4 extends hn{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new te(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}const r9=new K0,Ja=new E1,er=new Hn,tr=new x;class Zd extends Ye{constructor(e=new Mt,t=new W4){super(),this.isPoints=!0,this.type="Points",this.geometry=e,this.material=t,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}raycast(e,t){const n=this.geometry,s=this.matrixWorld,r=e.params.Points.threshold,a=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),er.copy(n.boundingSphere),er.applyMatrix4(s),er.radius+=r,e.ray.intersectsSphere(er)===!1)return;r9.copy(s).invert(),Ja.copy(e.ray).applyMatrix4(r9);const o=r/((this.scale.x+this.scale.y+this.scale.z)/3),l=o*o,d=n.index,u=n.attributes.position;if(d!==null){const p=Math.max(0,a.start),h=Math.min(d.count,a.start+a.count);for(let b=p,T=h;b<T;b++){const m=d.getX(b);tr.fromBufferAttribute(u,m),a9(tr,m,l,s,e,t,this)}}else{const p=Math.max(0,a.start),h=Math.min(u.count,a.start+a.count);for(let b=p,T=h;b<T;b++)tr.fromBufferAttribute(u,b),a9(tr,b,l,s,e,t,this)}}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const s=t[n[0]];if(s!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,a=s.length;r<a;r++){const o=s[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=r}}}}}function a9(i,e,t,n,s,r,a){const o=Ja.distanceSqToPoint(i);if(o<t){const l=new x;Ja.closestPointToPoint(i,l),l.applyMatrix4(n);const d=s.ray.origin.distanceTo(l);if(d<s.near||d>s.far)return;r.push({distance:d,distanceToRay:Math.sqrt(o),point:l,index:e,face:null,faceIndex:null,barycoord:null,object:a})}}class U4 extends gt{constructor(e,t,n=Mi,s,r,a,o=Xt,l=Xt,d,c=ps,u=1){if(c!==ps&&c!==fs)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");const p={width:e,height:t,depth:u};super(p,s,r,a,o,l,c,n,d),this.isDepthTexture=!0,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.source=new Zo(Object.assign({},e.image)),this.compareFunction=e.compareFunction,this}toJSON(e){const t=super.toJSON(e);return this.compareFunction!==null&&(t.compareFunction=this.compareFunction),t}}class T2 extends Mt{constructor(e=1,t=1,n=1,s=32,r=1,a=!1,o=0,l=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:s,heightSegments:r,openEnded:a,thetaStart:o,thetaLength:l};const d=this;s=Math.floor(s),r=Math.floor(r);const c=[],u=[],p=[],h=[];let b=0;const T=[],m=n/2;let f=0;N(),a===!1&&(e>0&&M(!0),t>0&&M(!1)),this.setIndex(c),this.setAttribute("position",new wt(u,3)),this.setAttribute("normal",new wt(p,3)),this.setAttribute("uv",new wt(h,2));function N(){const P=new x,V=new x;let C=0;const D=(t-e)/n;for(let G=0;G<=r;G++){const L=[],H=G/r,W=H*(t-e)+e;for(let B=0;B<=s;B++){const Q=B/s,e0=Q*l+o,u0=Math.sin(e0),n0=Math.cos(e0);V.x=W*u0,V.y=-H*n+m,V.z=W*n0,u.push(V.x,V.y,V.z),P.set(u0,D,n0).normalize(),p.push(P.x,P.y,P.z),h.push(Q,1-H),L.push(b++)}T.push(L)}for(let G=0;G<s;G++)for(let L=0;L<r;L++){const H=T[L][G],W=T[L+1][G],B=T[L+1][G+1],Q=T[L][G+1];(e>0||L!==0)&&(c.push(H,W,Q),C+=3),(t>0||L!==r-1)&&(c.push(W,B,Q),C+=3)}d.addGroup(f,C,0),f+=C}function M(P){const V=b,C=new ee,D=new x;let G=0;const L=P===!0?e:t,H=P===!0?1:-1;for(let B=1;B<=s;B++)u.push(0,m*H,0),p.push(0,H,0),h.push(.5,.5),b++;const W=b;for(let B=0;B<=s;B++){const e0=B/s*l+o,u0=Math.cos(e0),n0=Math.sin(e0);D.x=L*n0,D.y=m*H,D.z=L*u0,u.push(D.x,D.y,D.z),p.push(0,H,0),C.x=u0*.5+.5,C.y=n0*.5*H+.5,h.push(C.x,C.y),b++}for(let B=0;B<s;B++){const Q=V+B,e0=W+B;P===!0?c.push(e0,e0+1,Q):c.push(e0+1,e0,Q),G+=3}d.addGroup(f,G,P===!0?1:2),f+=G}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new T2(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}const nr=new x,ir=new x,c3=new x,sr=new a1;class Yd extends Mt{constructor(e=null,t=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:e,thresholdAngle:t},e!==null){const s=Math.pow(10,4),r=Math.cos(b1*t),a=e.getIndex(),o=e.getAttribute("position"),l=a?a.count:o.count,d=[0,0,0],c=["a","b","c"],u=new Array(3),p={},h=[];for(let b=0;b<l;b+=3){a?(d[0]=a.getX(b),d[1]=a.getX(b+1),d[2]=a.getX(b+2)):(d[0]=b,d[1]=b+1,d[2]=b+2);const{a:T,b:m,c:f}=sr;if(T.fromBufferAttribute(o,d[0]),m.fromBufferAttribute(o,d[1]),f.fromBufferAttribute(o,d[2]),sr.getNormal(c3),u[0]=`${Math.round(T.x*s)},${Math.round(T.y*s)},${Math.round(T.z*s)}`,u[1]=`${Math.round(m.x*s)},${Math.round(m.y*s)},${Math.round(m.z*s)}`,u[2]=`${Math.round(f.x*s)},${Math.round(f.y*s)},${Math.round(f.z*s)}`,!(u[0]===u[1]||u[1]===u[2]||u[2]===u[0]))for(let N=0;N<3;N++){const M=(N+1)%3,P=u[N],V=u[M],C=sr[c[N]],D=sr[c[M]],G=`${P}_${V}`,L=`${V}_${P}`;L in p&&p[L]?(c3.dot(p[L].normal)<=r&&(h.push(C.x,C.y,C.z),h.push(D.x,D.y,D.z)),p[L]=null):G in p||(p[G]={index0:d[N],index1:d[M],normal:c3.clone()})}}for(const b in p)if(p[b]){const{index0:T,index1:m}=p[b];nr.fromBufferAttribute(o,T),ir.fromBufferAttribute(o,m),h.push(nr.x,nr.y,nr.z),h.push(ir.x,ir.y,ir.z)}this.setAttribute("position",new wt(h,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}class x2 extends Mt{constructor(e=1,t=1,n=1,s=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:s};const r=e/2,a=t/2,o=Math.floor(n),l=Math.floor(s),d=o+1,c=l+1,u=e/o,p=t/l,h=[],b=[],T=[],m=[];for(let f=0;f<c;f++){const N=f*p-a;for(let M=0;M<d;M++){const P=M*u-r;b.push(P,-N,0),T.push(0,0,1),m.push(M/o),m.push(1-f/l)}}for(let f=0;f<l;f++)for(let N=0;N<o;N++){const M=N+d*f,P=N+d*(f+1),V=N+1+d*(f+1),C=N+1+d*f;h.push(M,P,C),h.push(P,V,C)}this.setIndex(h),this.setAttribute("position",new wt(b,3)),this.setAttribute("normal",new wt(T,3)),this.setAttribute("uv",new wt(m,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new x2(e.width,e.height,e.widthSegments,e.heightSegments)}}class kr extends Mt{constructor(e=1,t=32,n=16,s=0,r=Math.PI*2,a=0,o=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:s,phiLength:r,thetaStart:a,thetaLength:o},t=Math.max(3,Math.floor(t)),n=Math.max(2,Math.floor(n));const l=Math.min(a+o,Math.PI);let d=0;const c=[],u=new x,p=new x,h=[],b=[],T=[],m=[];for(let f=0;f<=n;f++){const N=[],M=f/n;let P=0;f===0&&a===0?P=.5/t:f===n&&l===Math.PI&&(P=-.5/t);for(let V=0;V<=t;V++){const C=V/t;u.x=-e*Math.cos(s+C*r)*Math.sin(a+M*o),u.y=e*Math.cos(a+M*o),u.z=e*Math.sin(s+C*r)*Math.sin(a+M*o),b.push(u.x,u.y,u.z),p.copy(u).normalize(),T.push(p.x,p.y,p.z),m.push(C+P,1-M),N.push(d++)}c.push(N)}for(let f=0;f<n;f++)for(let N=0;N<t;N++){const M=c[f][N+1],P=c[f][N],V=c[f+1][N],C=c[f+1][N+1];(f!==0||a>0)&&h.push(M,P,C),(f!==n-1||l<Math.PI)&&h.push(P,V,C)}this.setIndex(h),this.setAttribute("position",new wt(b,3)),this.setAttribute("normal",new wt(T,3)),this.setAttribute("uv",new wt(m,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new kr(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class O1 extends hn{constructor(e){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new te(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new te(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=qo,this.normalScale=new ee(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Ne,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class Rn extends O1{constructor(e){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new ee(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return le(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new te(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new te(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new te(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(e)}get anisotropy(){return this._anisotropy}set anisotropy(e){this._anisotropy>0!=e>0&&this.version++,this._anisotropy=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){this._iridescence>0!=e>0&&this.version++,this._iridescence=e}get dispersion(){return this._dispersion}set dispersion(e){this._dispersion>0!=e>0&&this.version++,this._dispersion=e}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=e.anisotropy,this.anisotropyRotation=e.anisotropyRotation,this.anisotropyMap=e.anisotropyMap,this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.dispersion=e.dispersion,this.ior=e.ior,this.iridescence=e.iridescence,this.iridescenceMap=e.iridescenceMap,this.iridescenceIOR=e.iridescenceIOR,this.iridescenceThicknessRange=[...e.iridescenceThicknessRange],this.iridescenceThicknessMap=e.iridescenceThicknessMap,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}}class q4 extends hn{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new te(16777215),this.specular=new te(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new te(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=qo,this.normalScale=new ee(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Ne,this.combine=Co,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class kd extends hn{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=Il,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class Jd extends hn{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}function rr(i,e){return!i||i.constructor===e?i:typeof e.BYTES_PER_ELEMENT=="number"?new e(i):Array.prototype.slice.call(i)}function Kd(i){return ArrayBuffer.isView(i)&&!(i instanceof DataView)}function Bd(i){function e(s,r){return i[s]-i[r]}const t=i.length,n=new Array(t);for(let s=0;s!==t;++s)n[s]=s;return n.sort(e),n}function o9(i,e,t){const n=i.length,s=new i.constructor(n);for(let r=0,a=0;a!==n;++r){const o=t[r]*e;for(let l=0;l!==e;++l)s[a++]=i[o+l]}return s}function G4(i,e,t,n){let s=1,r=i[0];for(;r!==void 0&&r[n]===void 0;)r=i[s++];if(r===void 0)return;let a=r[n];if(a!==void 0)if(Array.isArray(a))do a=r[n],a!==void 0&&(e.push(r.time),t.push(...a)),r=i[s++];while(r!==void 0);else if(a.toArray!==void 0)do a=r[n],a!==void 0&&(e.push(r.time),a.toArray(t,t.length)),r=i[s++];while(r!==void 0);else do a=r[n],a!==void 0&&(e.push(r.time),t.push(a)),r=i[s++];while(r!==void 0)}class Rs{constructor(e,t,n,s){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=s!==void 0?s:new t.constructor(n),this.sampleValues=t,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(e){const t=this.parameterPositions;let n=this._cachedIndex,s=t[n],r=t[n-1];n:{e:{let a;t:{i:if(!(e<s)){for(let o=n+2;;){if(s===void 0){if(e<r)break i;return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}if(n===o)break;if(r=s,s=t[++n],e<s)break e}a=t.length;break t}if(!(e>=r)){const o=t[1];e<o&&(n=2,r=o);for(let l=n-2;;){if(r===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(n===l)break;if(s=r,r=t[--n-1],e>=r)break e}a=n,n=0;break t}break n}for(;n<a;){const o=n+a>>>1;e<t[o]?a=o:n=o+1}if(s=t[n],r=t[n-1],r===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(s===void 0)return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}this._cachedIndex=n,this.intervalChanged_(n,r,s)}return this.interpolate_(n,r,e,s)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,s=this.valueSize,r=e*s;for(let a=0;a!==s;++a)t[a]=n[r+a];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class Qd extends Rs{constructor(e,t,n,s){super(e,t,n,s),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:x7,endingEnd:x7}}intervalChanged_(e,t,n){const s=this.parameterPositions;let r=e-2,a=e+1,o=s[r],l=s[a];if(o===void 0)switch(this.getSettings_().endingStart){case S7:r=e,o=2*t-n;break;case P7:r=s.length-2,o=t+s[r]-s[r+1];break;default:r=e,o=n}if(l===void 0)switch(this.getSettings_().endingEnd){case S7:a=e,l=2*n-t;break;case P7:a=1,l=n+s[1]-s[0];break;default:a=e-1,l=t}const d=(n-t)*.5,c=this.valueSize;this._weightPrev=d/(t-o),this._weightNext=d/(l-n),this._offsetPrev=r*c,this._offsetNext=a*c}interpolate_(e,t,n,s){const r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,l=e*o,d=l-o,c=this._offsetPrev,u=this._offsetNext,p=this._weightPrev,h=this._weightNext,b=(n-t)/(s-t),T=b*b,m=T*b,f=-p*m+2*p*T-p*b,N=(1+p)*m+(-1.5-2*p)*T+(-.5+p)*b+1,M=(-1-h)*m+(1.5+h)*T+.5*b,P=h*m-h*T;for(let V=0;V!==o;++V)r[V]=f*a[c+V]+N*a[d+V]+M*a[l+V]+P*a[u+V];return r}}class _d extends Rs{constructor(e,t,n,s){super(e,t,n,s)}interpolate_(e,t,n,s){const r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,l=e*o,d=l-o,c=(n-t)/(s-t),u=1-c;for(let p=0;p!==o;++p)r[p]=a[d+p]*u+a[l+p]*c;return r}}class $d extends Rs{constructor(e,t,n,s){super(e,t,n,s)}interpolate_(e){return this.copySampleValue_(e-1)}}class mn{constructor(e,t,n,s){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===void 0||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=rr(t,this.TimeBufferType),this.values=rr(n,this.ValueBufferType),this.setInterpolation(s||this.DefaultInterpolation)}static toJSON(e){const t=e.constructor;let n;if(t.toJSON!==this.toJSON)n=t.toJSON(e);else{n={name:e.name,times:rr(e.times,Array),values:rr(e.values,Array)};const s=e.getInterpolation();s!==e.DefaultInterpolation&&(n.interpolation=s)}return n.type=e.ValueTypeName,n}InterpolantFactoryMethodDiscrete(e){return new $d(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new _d(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new Qd(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case hs:t=this.InterpolantFactoryMethodDiscrete;break;case ms:t=this.InterpolantFactoryMethodLinear;break;case V2:t=this.InterpolantFactoryMethodSmooth;break}if(t===void 0){const n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(n);return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return hs;case this.InterpolantFactoryMethodLinear:return ms;case this.InterpolantFactoryMethodSmooth:return V2}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const t=this.times;for(let n=0,s=t.length;n!==s;++n)t[n]+=e}return this}scale(e){if(e!==1){const t=this.times;for(let n=0,s=t.length;n!==s;++n)t[n]*=e}return this}trim(e,t){const n=this.times,s=n.length;let r=0,a=s-1;for(;r!==s&&n[r]<e;)++r;for(;a!==-1&&n[a]>t;)--a;if(++a,r!==0||a!==s){r>=a&&(a=Math.max(a,1),r=a-1);const o=this.getValueSize();this.times=n.slice(r,a),this.values=this.values.slice(r*o,a*o)}return this}validate(){let e=!0;const t=this.getValueSize();t-Math.floor(t)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const n=this.times,s=this.values,r=n.length;r===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let a=null;for(let o=0;o!==r;o++){const l=n[o];if(typeof l=="number"&&isNaN(l)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,o,l),e=!1;break}if(a!==null&&a>l){console.error("THREE.KeyframeTrack: Out of order keys.",this,o,l,a),e=!1;break}a=l}if(s!==void 0&&Kd(s))for(let o=0,l=s.length;o!==l;++o){const d=s[o];if(isNaN(d)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,o,d),e=!1;break}}return e}optimize(){const e=this.times.slice(),t=this.values.slice(),n=this.getValueSize(),s=this.getInterpolation()===V2,r=e.length-1;let a=1;for(let o=1;o<r;++o){let l=!1;const d=e[o],c=e[o+1];if(d!==c&&(o!==1||d!==e[0]))if(s)l=!0;else{const u=o*n,p=u-n,h=u+n;for(let b=0;b!==n;++b){const T=t[u+b];if(T!==t[p+b]||T!==t[h+b]){l=!0;break}}}if(l){if(o!==a){e[a]=e[o];const u=o*n,p=a*n;for(let h=0;h!==n;++h)t[p+h]=t[u+h]}++a}}if(r>0){e[a]=e[r];for(let o=r*n,l=a*n,d=0;d!==n;++d)t[l+d]=t[o+d];++a}return a!==e.length?(this.times=e.slice(0,a),this.values=t.slice(0,a*n)):(this.times=e,this.values=t),this}clone(){const e=this.times.slice(),t=this.values.slice(),n=this.constructor,s=new n(this.name,e,t);return s.createInterpolant=this.createInterpolant,s}}mn.prototype.ValueTypeName="";mn.prototype.TimeBufferType=Float32Array;mn.prototype.ValueBufferType=Float32Array;mn.prototype.DefaultInterpolation=ms;class z1 extends mn{constructor(e,t,n){super(e,t,n)}}z1.prototype.ValueTypeName="bool";z1.prototype.ValueBufferType=Array;z1.prototype.DefaultInterpolation=hs;z1.prototype.InterpolantFactoryMethodLinear=void 0;z1.prototype.InterpolantFactoryMethodSmooth=void 0;class Z4 extends mn{constructor(e,t,n,s){super(e,t,n,s)}}Z4.prototype.ValueTypeName="color";class N1 extends mn{constructor(e,t,n,s){super(e,t,n,s)}}N1.prototype.ValueTypeName="number";class ec extends Rs{constructor(e,t,n,s){super(e,t,n,s)}interpolate_(e,t,n,s){const r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,l=(n-t)/(s-t);let d=e*o;for(let c=d+o;d!==c;d+=4)_0.slerpFlat(r,0,a,d-o,a,d,l);return r}}class L1 extends mn{constructor(e,t,n,s){super(e,t,n,s)}InterpolantFactoryMethodLinear(e){return new ec(this.times,this.values,this.getValueSize(),e)}}L1.prototype.ValueTypeName="quaternion";L1.prototype.InterpolantFactoryMethodSmooth=void 0;class I1 extends mn{constructor(e,t,n){super(e,t,n)}}I1.prototype.ValueTypeName="string";I1.prototype.ValueBufferType=Array;I1.prototype.DefaultInterpolation=hs;I1.prototype.InterpolantFactoryMethodLinear=void 0;I1.prototype.InterpolantFactoryMethodSmooth=void 0;class M1 extends mn{constructor(e,t,n,s){super(e,t,n,s)}}M1.prototype.ValueTypeName="vector";class tc{constructor(e="",t=-1,n=[],s=Ol){this.name=e,this.tracks=n,this.duration=t,this.blendMode=s,this.uuid=fn(),this.duration<0&&this.resetDuration()}static parse(e){const t=[],n=e.tracks,s=1/(e.fps||1);for(let a=0,o=n.length;a!==o;++a)t.push(ic(n[a]).scale(s));const r=new this(e.name,e.duration,t,e.blendMode);return r.uuid=e.uuid,r}static toJSON(e){const t=[],n=e.tracks,s={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode};for(let r=0,a=n.length;r!==a;++r)t.push(mn.toJSON(n[r]));return s}static CreateFromMorphTargetSequence(e,t,n,s){const r=t.length,a=[];for(let o=0;o<r;o++){let l=[],d=[];l.push((o+r-1)%r,o,(o+1)%r),d.push(0,1,0);const c=Bd(l);l=o9(l,1,c),d=o9(d,1,c),!s&&l[0]===0&&(l.push(r),d.push(d[0])),a.push(new N1(".morphTargetInfluences["+t[o].name+"]",l,d).scale(1/n))}return new this(e,-1,a)}static findByName(e,t){let n=e;if(!Array.isArray(e)){const s=e;n=s.geometry&&s.geometry.animations||s.animations}for(let s=0;s<n.length;s++)if(n[s].name===t)return n[s];return null}static CreateClipsFromMorphTargetSequences(e,t,n){const s={},r=/^([\w-]*?)([\d]+)$/;for(let o=0,l=e.length;o<l;o++){const d=e[o],c=d.name.match(r);if(c&&c.length>1){const u=c[1];let p=s[u];p||(s[u]=p=[]),p.push(d)}}const a=[];for(const o in s)a.push(this.CreateFromMorphTargetSequence(o,s[o],t,n));return a}static parseAnimation(e,t){if(console.warn("THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185"),!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(u,p,h,b,T){if(h.length!==0){const m=[],f=[];G4(h,m,f,b),m.length!==0&&T.push(new u(p,m,f))}},s=[],r=e.name||"default",a=e.fps||30,o=e.blendMode;let l=e.length||-1;const d=e.hierarchy||[];for(let u=0;u<d.length;u++){const p=d[u].keys;if(!(!p||p.length===0))if(p[0].morphTargets){const h={};let b;for(b=0;b<p.length;b++)if(p[b].morphTargets)for(let T=0;T<p[b].morphTargets.length;T++)h[p[b].morphTargets[T]]=-1;for(const T in h){const m=[],f=[];for(let N=0;N!==p[b].morphTargets.length;++N){const M=p[b];m.push(M.time),f.push(M.morphTarget===T?1:0)}s.push(new N1(".morphTargetInfluence["+T+"]",m,f))}l=h.length*a}else{const h=".bones["+t[u].name+"]";n(M1,h+".position",p,"pos",s),n(L1,h+".quaternion",p,"rot",s),n(M1,h+".scale",p,"scl",s)}}return s.length===0?null:new this(r,l,s,o)}resetDuration(){const e=this.tracks;let t=0;for(let n=0,s=e.length;n!==s;++n){const r=this.tracks[n];t=Math.max(t,r.times[r.times.length-1])}return this.duration=t,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new this.constructor(this.name,this.duration,e,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function nc(i){switch(i.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return N1;case"vector":case"vector2":case"vector3":case"vector4":return M1;case"color":return Z4;case"quaternion":return L1;case"bool":case"boolean":return z1;case"string":return I1}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+i)}function ic(i){if(i.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=nc(i.type);if(i.times===void 0){const t=[],n=[];G4(i.keys,t,n,"value"),i.times=t,i.values=n}return e.parse!==void 0?e.parse(i):new e(i.name,i.times,i.values,i.interpolation)}const qn={enabled:!1,files:{},add:function(i,e){this.enabled!==!1&&(this.files[i]=e)},get:function(i){if(this.enabled!==!1)return this.files[i]},remove:function(i){delete this.files[i]},clear:function(){this.files={}}};class sc{constructor(e,t,n){const s=this;let r=!1,a=0,o=0,l;const d=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(c){o++,r===!1&&s.onStart!==void 0&&s.onStart(c,a,o),r=!0},this.itemEnd=function(c){a++,s.onProgress!==void 0&&s.onProgress(c,a,o),a===o&&(r=!1,s.onLoad!==void 0&&s.onLoad())},this.itemError=function(c){s.onError!==void 0&&s.onError(c)},this.resolveURL=function(c){return l?l(c):c},this.setURLModifier=function(c){return l=c,this},this.addHandler=function(c,u){return d.push(c,u),this},this.removeHandler=function(c){const u=d.indexOf(c);return u!==-1&&d.splice(u,2),this},this.getHandler=function(c){for(let u=0,p=d.length;u<p;u+=2){const h=d[u],b=d[u+1];if(h.global&&(h.lastIndex=0),h.test(c))return b}return null}}}const rc=new sc;class Ci{constructor(e){this.manager=e!==void 0?e:rc,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(s,r){n.load(e,s,t,r)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}Ci.DEFAULT_MATERIAL_NAME="__DEFAULT";const An={};class ac extends Error{constructor(e,t){super(e),this.response=t}}class $o extends Ci{constructor(e){super(e),this.mimeType="",this.responseType=""}load(e,t,n,s){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const r=qn.get(`file:${e}`);if(r!==void 0)return this.manager.itemStart(e),setTimeout(()=>{t&&t(r),this.manager.itemEnd(e)},0),r;if(An[e]!==void 0){An[e].push({onLoad:t,onProgress:n,onError:s});return}An[e]=[],An[e].push({onLoad:t,onProgress:n,onError:s});const a=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),o=this.mimeType,l=this.responseType;fetch(a).then(d=>{if(d.status===200||d.status===0){if(d.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream>"u"||d.body===void 0||d.body.getReader===void 0)return d;const c=An[e],u=d.body.getReader(),p=d.headers.get("X-File-Size")||d.headers.get("Content-Length"),h=p?parseInt(p):0,b=h!==0;let T=0;const m=new ReadableStream({start(f){N();function N(){u.read().then(({done:M,value:P})=>{if(M)f.close();else{T+=P.byteLength;const V=new ProgressEvent("progress",{lengthComputable:b,loaded:T,total:h});for(let C=0,D=c.length;C<D;C++){const G=c[C];G.onProgress&&G.onProgress(V)}f.enqueue(P),N()}},M=>{f.error(M)})}}});return new Response(m)}else throw new ac(`fetch for "${d.url}" responded with ${d.status}: ${d.statusText}`,d)}).then(d=>{switch(l){case"arraybuffer":return d.arrayBuffer();case"blob":return d.blob();case"document":return d.text().then(c=>new DOMParser().parseFromString(c,o));case"json":return d.json();default:if(o==="")return d.text();{const u=/charset="?([^;"\s]*)"?/i.exec(o),p=u&&u[1]?u[1].toLowerCase():void 0,h=new TextDecoder(p);return d.arrayBuffer().then(b=>h.decode(b))}}}).then(d=>{qn.add(`file:${e}`,d);const c=An[e];delete An[e];for(let u=0,p=c.length;u<p;u++){const h=c[u];h.onLoad&&h.onLoad(d)}}).catch(d=>{const c=An[e];if(c===void 0)throw this.manager.itemError(e),d;delete An[e];for(let u=0,p=c.length;u<p;u++){const h=c[u];h.onError&&h.onError(d)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}const $i=new WeakMap;class oc extends Ci{constructor(e){super(e)}load(e,t,n,s){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const r=this,a=qn.get(`image:${e}`);if(a!==void 0){if(a.complete===!0)r.manager.itemStart(e),setTimeout(function(){t&&t(a),r.manager.itemEnd(e)},0);else{let u=$i.get(a);u===void 0&&(u=[],$i.set(a,u)),u.push({onLoad:t,onError:s})}return a}const o=ys("img");function l(){c(),t&&t(this);const u=$i.get(this)||[];for(let p=0;p<u.length;p++){const h=u[p];h.onLoad&&h.onLoad(this)}$i.delete(this),r.manager.itemEnd(e)}function d(u){c(),s&&s(u),qn.remove(`image:${e}`);const p=$i.get(this)||[];for(let h=0;h<p.length;h++){const b=p[h];b.onError&&b.onError(u)}$i.delete(this),r.manager.itemError(e),r.manager.itemEnd(e)}function c(){o.removeEventListener("load",l,!1),o.removeEventListener("error",d,!1)}return o.addEventListener("load",l,!1),o.addEventListener("error",d,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(o.crossOrigin=this.crossOrigin),qn.add(`image:${e}`,o),r.manager.itemStart(e),o.src=e,o}}class lc extends Ci{constructor(e){super(e)}load(e,t,n,s){const r=this,a=new Ko,o=new $o(this.manager);return o.setResponseType("arraybuffer"),o.setRequestHeader(this.requestHeader),o.setPath(this.path),o.setWithCredentials(r.withCredentials),o.load(e,function(l){let d;try{d=r.parse(l)}catch(c){if(s!==void 0)s(c);else{console.error(c);return}}d.image!==void 0?a.image=d.image:d.data!==void 0&&(a.image.width=d.width,a.image.height=d.height,a.image.data=d.data),a.wrapS=d.wrapS!==void 0?d.wrapS:Tn,a.wrapT=d.wrapT!==void 0?d.wrapT:Tn,a.magFilter=d.magFilter!==void 0?d.magFilter:vt,a.minFilter=d.minFilter!==void 0?d.minFilter:vt,a.anisotropy=d.anisotropy!==void 0?d.anisotropy:1,d.colorSpace!==void 0&&(a.colorSpace=d.colorSpace),d.flipY!==void 0&&(a.flipY=d.flipY),d.format!==void 0&&(a.format=d.format),d.type!==void 0&&(a.type=d.type),d.mipmaps!==void 0&&(a.mipmaps=d.mipmaps,a.minFilter=xn),d.mipmapCount===1&&(a.minFilter=vt),d.generateMipmaps!==void 0&&(a.generateMipmaps=d.generateMipmaps),a.needsUpdate=!0,t&&t(a,d)},n,s),a}}class dc extends Ci{constructor(e){super(e)}load(e,t,n,s){const r=new gt,a=new oc(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(e,function(o){r.image=o,r.needsUpdate=!0,t!==void 0&&t(r)},n,s),r}}class S2 extends Ye{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new te(e),this.intensity=t}dispose(){}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(t.object.target=this.target.uuid),t}}const u3=new K0,l9=new x,d9=new x;class e7{constructor(e){this.camera=e,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new ee(512,512),this.mapType=Sn,this.map=null,this.mapPass=null,this.matrix=new K0,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Qo,this._frameExtents=new ee(1,1),this._viewportCount=1,this._viewports=[new He(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,n=this.matrix;l9.setFromMatrixPosition(e.matrixWorld),t.position.copy(l9),d9.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(d9),t.updateMatrixWorld(),u3.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(u3),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(u3)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.intensity=e.intensity,this.bias=e.bias,this.radius=e.radius,this.autoUpdate=e.autoUpdate,this.needsUpdate=e.needsUpdate,this.normalBias=e.normalBias,this.blurSamples=e.blurSamples,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.intensity!==1&&(e.intensity=this.intensity),this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class cc extends e7{constructor(){super(new It(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1,this.aspect=1}updateMatrices(e){const t=this.camera,n=H1*2*e.angle*this.focus,s=this.mapSize.width/this.mapSize.height*this.aspect,r=e.distance||t.far;(n!==t.fov||s!==t.aspect||r!==t.far)&&(t.fov=n,t.aspect=s,t.far=r,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}class Y4 extends S2{constructor(e,t,n=0,s=Math.PI/3,r=0,a=2){super(e,t),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(Ye.DEFAULT_UP),this.updateMatrix(),this.target=new Ye,this.distance=n,this.angle=s,this.penumbra=r,this.decay=a,this.map=null,this.shadow=new cc}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}const c9=new K0,Y1=new x,p3=new x;class uc extends e7{constructor(){super(new It(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new ee(4,2),this._viewportCount=6,this._viewports=[new He(2,1,1,1),new He(0,1,1,1),new He(3,1,1,1),new He(1,1,1,1),new He(3,0,1,1),new He(1,0,1,1)],this._cubeDirections=[new x(1,0,0),new x(-1,0,0),new x(0,0,1),new x(0,0,-1),new x(0,1,0),new x(0,-1,0)],this._cubeUps=[new x(0,1,0),new x(0,1,0),new x(0,1,0),new x(0,1,0),new x(0,0,1),new x(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera,s=this.matrix,r=e.distance||n.far;r!==n.far&&(n.far=r,n.updateProjectionMatrix()),Y1.setFromMatrixPosition(e.matrixWorld),n.position.copy(Y1),p3.copy(n.position),p3.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(p3),n.updateMatrixWorld(),s.makeTranslation(-Y1.x,-Y1.y,-Y1.z),c9.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(c9)}}class k4 extends S2{constructor(e,t,n=0,s=2){super(e,t),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=s,this.shadow=new uc}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}class t7 extends V4{constructor(e=-1,t=1,n=1,s=-1,r=.1,a=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=s,this.near=r,this.far=a,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,s,r,a){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=s,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,s=(this.top+this.bottom)/2;let r=n-e,a=n+e,o=s+t,l=s-t;if(this.view!==null&&this.view.enabled){const d=(this.right-this.left)/this.view.fullWidth/this.zoom,c=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=d*this.view.offsetX,a=r+d*this.view.width,o-=c*this.view.offsetY,l=o-c*this.view.height}this.projectionMatrix.makeOrthographic(r,a,o,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}class pc extends e7{constructor(){super(new t7(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class J4 extends S2{constructor(e,t){super(e,t),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(Ye.DEFAULT_UP),this.updateMatrix(),this.target=new Ye,this.shadow=new pc}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}class fc extends S2{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}}class as{static extractUrlBase(e){const t=e.lastIndexOf("/");return t===-1?"./":e.slice(0,t+1)}static resolveURL(e,t){return typeof e!="string"||e===""?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}}const f3=new WeakMap;class hc extends Ci{constructor(e){super(e),this.isImageBitmapLoader=!0,typeof createImageBitmap>"u"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch>"u"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(e){return this.options=e,this}load(e,t,n,s){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const r=this,a=qn.get(`image-bitmap:${e}`);if(a!==void 0){if(r.manager.itemStart(e),a.then){a.then(d=>{if(f3.has(a)===!0)s&&s(f3.get(a)),r.manager.itemError(e),r.manager.itemEnd(e);else return t&&t(d),r.manager.itemEnd(e),d});return}return setTimeout(function(){t&&t(a),r.manager.itemEnd(e)},0),a}const o={};o.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",o.headers=this.requestHeader;const l=fetch(e,o).then(function(d){return d.blob()}).then(function(d){return createImageBitmap(d,Object.assign(r.options,{colorSpaceConversion:"none"}))}).then(function(d){return qn.add(`image-bitmap:${e}`,d),t&&t(d),r.manager.itemEnd(e),d}).catch(function(d){s&&s(d),f3.set(l,d),qn.remove(`image-bitmap:${e}`),r.manager.itemError(e),r.manager.itemEnd(e)});qn.add(`image-bitmap:${e}`,l),r.manager.itemStart(e)}}class mc extends It{constructor(e=[]){super(),this.isArrayCamera=!0,this.isMultiViewCamera=!1,this.cameras=e}}const n7="\\[\\]\\.:\\/",yc=new RegExp("["+n7+"]","g"),i7="[^"+n7+"]",bc="[^"+n7.replace("\\.","")+"]",vc=/((?:WC+[\/:])*)/.source.replace("WC",i7),gc=/(WCOD+)?/.source.replace("WCOD",bc),wc=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",i7),Tc=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",i7),xc=new RegExp("^"+vc+gc+wc+Tc+"$"),Sc=["material","materials","bones","map"];class Pc{constructor(e,t,n){const s=n||Ee.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,s)}getValue(e,t){this.bind();const n=this._targetGroup.nCachedObjects_,s=this._bindings[n];s!==void 0&&s.getValue(e,t)}setValue(e,t){const n=this._bindings;for(let s=this._targetGroup.nCachedObjects_,r=n.length;s!==r;++s)n[s].setValue(e,t)}bind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()}unbind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}}class Ee{constructor(e,t,n){this.path=t,this.parsedPath=n||Ee.parseTrackName(t),this.node=Ee.findNode(e,this.parsedPath.nodeName),this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,n){return e&&e.isAnimationObjectGroup?new Ee.Composite(e,t,n):new Ee(e,t,n)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(yc,"")}static parseTrackName(e){const t=xc.exec(e);if(t===null)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},s=n.nodeName&&n.nodeName.lastIndexOf(".");if(s!==void 0&&s!==-1){const r=n.nodeName.substring(s+1);Sc.indexOf(r)!==-1&&(n.nodeName=n.nodeName.substring(0,s),n.objectName=r)}if(n.propertyName===null||n.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return n}static findNode(e,t){if(t===void 0||t===""||t==="."||t===-1||t===e.name||t===e.uuid)return e;if(e.skeleton){const n=e.skeleton.getBoneByName(t);if(n!==void 0)return n}if(e.children){const n=function(r){for(let a=0;a<r.length;a++){const o=r[a];if(o.name===t||o.uuid===t)return o;const l=n(o.children);if(l)return l}return null},s=n(e.children);if(s)return s}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){const n=this.resolvedProperty;for(let s=0,r=n.length;s!==r;++s)e[t++]=n[s]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){const n=this.resolvedProperty;for(let s=0,r=n.length;s!==r;++s)n[s]=e[t++]}_setValue_array_setNeedsUpdate(e,t){const n=this.resolvedProperty;for(let s=0,r=n.length;s!==r;++s)n[s]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){const n=this.resolvedProperty;for(let s=0,r=n.length;s!==r;++s)n[s]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node;const t=this.parsedPath,n=t.objectName,s=t.propertyName;let r=t.propertyIndex;if(e||(e=Ee.findNode(this.rootNode,t.nodeName),this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");return}if(n){let d=t.objectIndex;switch(n){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let c=0;c<e.length;c++)if(e[c].name===d){d=c;break}break;case"map":if("map"in e){e=e.map;break}if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}e=e.material.map;break;default:if(e[n]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[n]}if(d!==void 0){if(e[d]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[d]}}const a=e[s];if(a===void 0){const d=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+d+"."+s+" but it wasn't found.",e);return}let o=this.Versioning.None;this.targetObject=e,e.isMaterial===!0?o=this.Versioning.NeedsUpdate:e.isObject3D===!0&&(o=this.Versioning.MatrixWorldNeedsUpdate);let l=this.BindingType.Direct;if(r!==void 0){if(s==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[r]!==void 0&&(r=e.morphTargetDictionary[r])}l=this.BindingType.ArrayElement,this.resolvedProperty=a,this.propertyIndex=r}else a.fromArray!==void 0&&a.toArray!==void 0?(l=this.BindingType.HasFromToArray,this.resolvedProperty=a):Array.isArray(a)?(l=this.BindingType.EntireArray,this.resolvedProperty=a):this.propertyName=s;this.getValue=this.GetterByBindingType[l],this.setValue=this.SetterByBindingTypeAndVersioning[l][o]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Ee.Composite=Pc;Ee.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};Ee.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};Ee.prototype.GetterByBindingType=[Ee.prototype._getValue_direct,Ee.prototype._getValue_array,Ee.prototype._getValue_arrayElement,Ee.prototype._getValue_toArray];Ee.prototype.SetterByBindingTypeAndVersioning=[[Ee.prototype._setValue_direct,Ee.prototype._setValue_direct_setNeedsUpdate,Ee.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Ee.prototype._setValue_array,Ee.prototype._setValue_array_setNeedsUpdate,Ee.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Ee.prototype._setValue_arrayElement,Ee.prototype._setValue_arrayElement_setNeedsUpdate,Ee.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Ee.prototype._setValue_fromArray,Ee.prototype._setValue_fromArray_setNeedsUpdate,Ee.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];const u9=new K0;class Hc{constructor(e,t,n=0,s=1/0){this.ray=new E1(e,t),this.near=n,this.far=s,this.camera=null,this.layers=new Yo,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,t){this.ray.set(e,t)}setFromCamera(e,t){t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}setFromXRController(e){return u9.identity().extractRotation(e.matrixWorld),this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(u9),this}intersectObject(e,t=!0,n=[]){return Ka(e,this,n,t),n.sort(p9),n}intersectObjects(e,t=!0,n=[]){for(let s=0,r=e.length;s<r;s++)Ka(e[s],this,n,t);return n.sort(p9),n}}function p9(i,e){return i.distance-e.distance}function Ka(i,e,t,n){let s=!0;if(i.layers.test(e.layers)&&i.raycast(e,t)===!1&&(s=!1),s===!0&&n===!0){const r=i.children;for(let a=0,o=r.length;a<o;a++)Ka(r[a],e,t,!0)}}class f9{constructor(e=1,t=0,n=0){this.radius=e,this.phi=t,this.theta=n}set(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=le(this.phi,1e-6,Math.PI-1e-6),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(le(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class Rc extends Xi{constructor(e,t=null){super(),this.object=e,this.domElement=t,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(e){if(e===void 0){console.warn("THREE.Controls: connect() now requires an element.");return}this.domElement!==null&&this.disconnect(),this.domElement=e}disconnect(){}dispose(){}update(){}}function h9(i,e,t,n){const s=Nc(n);switch(t){case H4:return i*e;case g2:return i*e/s.components*s.byteLength;case jo:return i*e/s.components*s.byteLength;case N4:return i*e*2/s.components*s.byteLength;case Wo:return i*e*2/s.components*s.byteLength;case R4:return i*e*3/s.components*s.byteLength;case Yt:return i*e*4/s.components*s.byteLength;case Uo:return i*e*4/s.components*s.byteLength;case Ir:case Xr:return Math.floor((i+3)/4)*Math.floor((e+3)/4)*8;case Ar:case Cr:return Math.floor((i+3)/4)*Math.floor((e+3)/4)*16;case wa:case xa:return Math.max(i,16)*Math.max(e,8)/4;case ga:case Ta:return Math.max(i,8)*Math.max(e,8)/2;case Sa:case Pa:return Math.floor((i+3)/4)*Math.floor((e+3)/4)*8;case Ha:return Math.floor((i+3)/4)*Math.floor((e+3)/4)*16;case Ra:return Math.floor((i+3)/4)*Math.floor((e+3)/4)*16;case Na:return Math.floor((i+4)/5)*Math.floor((e+3)/4)*16;case La:return Math.floor((i+4)/5)*Math.floor((e+4)/5)*16;case Ma:return Math.floor((i+5)/6)*Math.floor((e+4)/5)*16;case Ea:return Math.floor((i+5)/6)*Math.floor((e+5)/6)*16;case Oa:return Math.floor((i+7)/8)*Math.floor((e+4)/5)*16;case za:return Math.floor((i+7)/8)*Math.floor((e+5)/6)*16;case Ia:return Math.floor((i+7)/8)*Math.floor((e+7)/8)*16;case Xa:return Math.floor((i+9)/10)*Math.floor((e+4)/5)*16;case Aa:return Math.floor((i+9)/10)*Math.floor((e+5)/6)*16;case Ca:return Math.floor((i+9)/10)*Math.floor((e+7)/8)*16;case Fa:return Math.floor((i+9)/10)*Math.floor((e+9)/10)*16;case Va:return Math.floor((i+11)/12)*Math.floor((e+9)/10)*16;case Da:return Math.floor((i+11)/12)*Math.floor((e+11)/12)*16;case Fr:case ja:case Wa:return Math.ceil(i/4)*Math.ceil(e/4)*16;case L4:case Ua:return Math.ceil(i/4)*Math.ceil(e/4)*8;case qa:case Ga:return Math.ceil(i/4)*Math.ceil(e/4)*16}throw new Error(`Unable to determine texture byte length for ${t} format.`)}function Nc(i){switch(i){case Sn:case x4:return{byteLength:1,components:1};case cs:case S4:case jn:return{byteLength:2,components:1};case Vo:case Do:return{byteLength:2,components:4};case Mi:case Fo:case jt:return{byteLength:4,components:1};case P4:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${i}.`)}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:Ao}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=Ao);/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function K4(){let i=null,e=!1,t=null,n=null;function s(r,a){t(r,a),n=i.requestAnimationFrame(s)}return{start:function(){e!==!0&&t!==null&&(n=i.requestAnimationFrame(s),e=!0)},stop:function(){i.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(r){t=r},setContext:function(r){i=r}}}function Lc(i){const e=new WeakMap;function t(o,l){const d=o.array,c=o.usage,u=d.byteLength,p=i.createBuffer();i.bindBuffer(l,p),i.bufferData(l,d,c),o.onUploadCallback();let h;if(d instanceof Float32Array)h=i.FLOAT;else if(typeof Float16Array<"u"&&d instanceof Float16Array)h=i.HALF_FLOAT;else if(d instanceof Uint16Array)o.isFloat16BufferAttribute?h=i.HALF_FLOAT:h=i.UNSIGNED_SHORT;else if(d instanceof Int16Array)h=i.SHORT;else if(d instanceof Uint32Array)h=i.UNSIGNED_INT;else if(d instanceof Int32Array)h=i.INT;else if(d instanceof Int8Array)h=i.BYTE;else if(d instanceof Uint8Array)h=i.UNSIGNED_BYTE;else if(d instanceof Uint8ClampedArray)h=i.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+d);return{buffer:p,type:h,bytesPerElement:d.BYTES_PER_ELEMENT,version:o.version,size:u}}function n(o,l,d){const c=l.array,u=l.updateRanges;if(i.bindBuffer(d,o),u.length===0)i.bufferSubData(d,0,c);else{u.sort((h,b)=>h.start-b.start);let p=0;for(let h=1;h<u.length;h++){const b=u[p],T=u[h];T.start<=b.start+b.count+1?b.count=Math.max(b.count,T.start+T.count-b.start):(++p,u[p]=T)}u.length=p+1;for(let h=0,b=u.length;h<b;h++){const T=u[h];i.bufferSubData(d,T.start*c.BYTES_PER_ELEMENT,c,T.start,T.count)}l.clearUpdateRanges()}l.onUploadCallback()}function s(o){return o.isInterleavedBufferAttribute&&(o=o.data),e.get(o)}function r(o){o.isInterleavedBufferAttribute&&(o=o.data);const l=e.get(o);l&&(i.deleteBuffer(l.buffer),e.delete(o))}function a(o,l){if(o.isInterleavedBufferAttribute&&(o=o.data),o.isGLBufferAttribute){const c=e.get(o);(!c||c.version<o.version)&&e.set(o,{buffer:o.buffer,type:o.type,bytesPerElement:o.elementSize,version:o.version});return}const d=e.get(o);if(d===void 0)e.set(o,t(o,l));else if(d.version<o.version){if(d.size!==o.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");n(d.buffer,o,l),d.version=o.version}}return{get:s,remove:r,update:a}}var Mc=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,Ec=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,Oc=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,zc=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,Ic=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,Xc=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,Ac=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,Cc=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,Fc=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,Vc=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,Dc=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,jc=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,Wc=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,Uc=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,qc=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,Gc=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,Zc=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,Yc=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,kc=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,Jc=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,Kc=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,Bc=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,Qc=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,_c=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,$c=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,eu=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,tu=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,nu=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,iu=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,su=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,ru="gl_FragColor = linearToOutputTexel( gl_FragColor );",au=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,ou=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,lu=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,du=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,cu=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,uu=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,pu=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,fu=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,hu=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,mu=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,yu=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,bu=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,vu=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,gu=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,wu=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,Tu=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,xu=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,Su=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,Pu=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,Hu=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,Ru=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,Nu=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,Lu=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,Mu=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,Eu=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,Ou=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,zu=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,Iu=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,Xu=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,Au=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,Cu=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,Fu=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,Vu=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,Du=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,ju=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,Wu=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,Uu=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,qu=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,Gu=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,Zu=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,Yu=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,ku=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,Ju=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,Ku=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,Bu=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,Qu=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,_u=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,$u=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,ep=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,tp=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,np=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,ip=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,sp=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,rp=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,ap=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,op=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,lp=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,dp=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,cp=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,up=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,pp=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,fp=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,hp=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,mp=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,yp=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,bp=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,vp=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,gp=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,wp=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,Tp=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,xp=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,Sp=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,Pp=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,Hp=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,Rp=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,Np=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const Lp=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,Mp=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,Ep=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,Op=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,zp=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,Ip=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,Xp=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,Ap=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,Cp=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,Fp=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,Vp=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,Dp=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,jp=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,Wp=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Up=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,qp=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Gp=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Zp=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Yp=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,kp=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Jp=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,Kp=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,Bp=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Qp=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,_p=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,$p=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,ef=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,tf=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,nf=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,sf=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,rf=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,af=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,of=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,lf=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,oe={alphahash_fragment:Mc,alphahash_pars_fragment:Ec,alphamap_fragment:Oc,alphamap_pars_fragment:zc,alphatest_fragment:Ic,alphatest_pars_fragment:Xc,aomap_fragment:Ac,aomap_pars_fragment:Cc,batching_pars_vertex:Fc,batching_vertex:Vc,begin_vertex:Dc,beginnormal_vertex:jc,bsdfs:Wc,iridescence_fragment:Uc,bumpmap_pars_fragment:qc,clipping_planes_fragment:Gc,clipping_planes_pars_fragment:Zc,clipping_planes_pars_vertex:Yc,clipping_planes_vertex:kc,color_fragment:Jc,color_pars_fragment:Kc,color_pars_vertex:Bc,color_vertex:Qc,common:_c,cube_uv_reflection_fragment:$c,defaultnormal_vertex:eu,displacementmap_pars_vertex:tu,displacementmap_vertex:nu,emissivemap_fragment:iu,emissivemap_pars_fragment:su,colorspace_fragment:ru,colorspace_pars_fragment:au,envmap_fragment:ou,envmap_common_pars_fragment:lu,envmap_pars_fragment:du,envmap_pars_vertex:cu,envmap_physical_pars_fragment:Tu,envmap_vertex:uu,fog_vertex:pu,fog_pars_vertex:fu,fog_fragment:hu,fog_pars_fragment:mu,gradientmap_pars_fragment:yu,lightmap_pars_fragment:bu,lights_lambert_fragment:vu,lights_lambert_pars_fragment:gu,lights_pars_begin:wu,lights_toon_fragment:xu,lights_toon_pars_fragment:Su,lights_phong_fragment:Pu,lights_phong_pars_fragment:Hu,lights_physical_fragment:Ru,lights_physical_pars_fragment:Nu,lights_fragment_begin:Lu,lights_fragment_maps:Mu,lights_fragment_end:Eu,logdepthbuf_fragment:Ou,logdepthbuf_pars_fragment:zu,logdepthbuf_pars_vertex:Iu,logdepthbuf_vertex:Xu,map_fragment:Au,map_pars_fragment:Cu,map_particle_fragment:Fu,map_particle_pars_fragment:Vu,metalnessmap_fragment:Du,metalnessmap_pars_fragment:ju,morphinstance_vertex:Wu,morphcolor_vertex:Uu,morphnormal_vertex:qu,morphtarget_pars_vertex:Gu,morphtarget_vertex:Zu,normal_fragment_begin:Yu,normal_fragment_maps:ku,normal_pars_fragment:Ju,normal_pars_vertex:Ku,normal_vertex:Bu,normalmap_pars_fragment:Qu,clearcoat_normal_fragment_begin:_u,clearcoat_normal_fragment_maps:$u,clearcoat_pars_fragment:ep,iridescence_pars_fragment:tp,opaque_fragment:np,packing:ip,premultiplied_alpha_fragment:sp,project_vertex:rp,dithering_fragment:ap,dithering_pars_fragment:op,roughnessmap_fragment:lp,roughnessmap_pars_fragment:dp,shadowmap_pars_fragment:cp,shadowmap_pars_vertex:up,shadowmap_vertex:pp,shadowmask_pars_fragment:fp,skinbase_vertex:hp,skinning_pars_vertex:mp,skinning_vertex:yp,skinnormal_vertex:bp,specularmap_fragment:vp,specularmap_pars_fragment:gp,tonemapping_fragment:wp,tonemapping_pars_fragment:Tp,transmission_fragment:xp,transmission_pars_fragment:Sp,uv_pars_fragment:Pp,uv_pars_vertex:Hp,uv_vertex:Rp,worldpos_vertex:Np,background_vert:Lp,background_frag:Mp,backgroundCube_vert:Ep,backgroundCube_frag:Op,cube_vert:zp,cube_frag:Ip,depth_vert:Xp,depth_frag:Ap,distanceRGBA_vert:Cp,distanceRGBA_frag:Fp,equirect_vert:Vp,equirect_frag:Dp,linedashed_vert:jp,linedashed_frag:Wp,meshbasic_vert:Up,meshbasic_frag:qp,meshlambert_vert:Gp,meshlambert_frag:Zp,meshmatcap_vert:Yp,meshmatcap_frag:kp,meshnormal_vert:Jp,meshnormal_frag:Kp,meshphong_vert:Bp,meshphong_frag:Qp,meshphysical_vert:_p,meshphysical_frag:$p,meshtoon_vert:ef,meshtoon_frag:tf,points_vert:nf,points_frag:sf,shadow_vert:rf,shadow_frag:af,sprite_vert:of,sprite_frag:lf},N0={common:{diffuse:{value:new te(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new re},alphaMap:{value:null},alphaMapTransform:{value:new re},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new re}},envmap:{envMap:{value:null},envMapRotation:{value:new re},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new re}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new re}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new re},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new re},normalScale:{value:new ee(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new re},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new re}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new re}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new re}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new te(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new te(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new re},alphaTest:{value:0},uvTransform:{value:new re}},sprite:{diffuse:{value:new te(16777215)},opacity:{value:1},center:{value:new ee(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new re},alphaMap:{value:null},alphaMapTransform:{value:new re},alphaTest:{value:0}}},gn={basic:{uniforms:Ot([N0.common,N0.specularmap,N0.envmap,N0.aomap,N0.lightmap,N0.fog]),vertexShader:oe.meshbasic_vert,fragmentShader:oe.meshbasic_frag},lambert:{uniforms:Ot([N0.common,N0.specularmap,N0.envmap,N0.aomap,N0.lightmap,N0.emissivemap,N0.bumpmap,N0.normalmap,N0.displacementmap,N0.fog,N0.lights,{emissive:{value:new te(0)}}]),vertexShader:oe.meshlambert_vert,fragmentShader:oe.meshlambert_frag},phong:{uniforms:Ot([N0.common,N0.specularmap,N0.envmap,N0.aomap,N0.lightmap,N0.emissivemap,N0.bumpmap,N0.normalmap,N0.displacementmap,N0.fog,N0.lights,{emissive:{value:new te(0)},specular:{value:new te(1118481)},shininess:{value:30}}]),vertexShader:oe.meshphong_vert,fragmentShader:oe.meshphong_frag},standard:{uniforms:Ot([N0.common,N0.envmap,N0.aomap,N0.lightmap,N0.emissivemap,N0.bumpmap,N0.normalmap,N0.displacementmap,N0.roughnessmap,N0.metalnessmap,N0.fog,N0.lights,{emissive:{value:new te(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:oe.meshphysical_vert,fragmentShader:oe.meshphysical_frag},toon:{uniforms:Ot([N0.common,N0.aomap,N0.lightmap,N0.emissivemap,N0.bumpmap,N0.normalmap,N0.displacementmap,N0.gradientmap,N0.fog,N0.lights,{emissive:{value:new te(0)}}]),vertexShader:oe.meshtoon_vert,fragmentShader:oe.meshtoon_frag},matcap:{uniforms:Ot([N0.common,N0.bumpmap,N0.normalmap,N0.displacementmap,N0.fog,{matcap:{value:null}}]),vertexShader:oe.meshmatcap_vert,fragmentShader:oe.meshmatcap_frag},points:{uniforms:Ot([N0.points,N0.fog]),vertexShader:oe.points_vert,fragmentShader:oe.points_frag},dashed:{uniforms:Ot([N0.common,N0.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:oe.linedashed_vert,fragmentShader:oe.linedashed_frag},depth:{uniforms:Ot([N0.common,N0.displacementmap]),vertexShader:oe.depth_vert,fragmentShader:oe.depth_frag},normal:{uniforms:Ot([N0.common,N0.bumpmap,N0.normalmap,N0.displacementmap,{opacity:{value:1}}]),vertexShader:oe.meshnormal_vert,fragmentShader:oe.meshnormal_frag},sprite:{uniforms:Ot([N0.sprite,N0.fog]),vertexShader:oe.sprite_vert,fragmentShader:oe.sprite_frag},background:{uniforms:{uvTransform:{value:new re},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:oe.background_vert,fragmentShader:oe.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new re}},vertexShader:oe.backgroundCube_vert,fragmentShader:oe.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:oe.cube_vert,fragmentShader:oe.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:oe.equirect_vert,fragmentShader:oe.equirect_frag},distanceRGBA:{uniforms:Ot([N0.common,N0.displacementmap,{referencePosition:{value:new x},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:oe.distanceRGBA_vert,fragmentShader:oe.distanceRGBA_frag},shadow:{uniforms:Ot([N0.lights,N0.fog,{color:{value:new te(0)},opacity:{value:1}}]),vertexShader:oe.shadow_vert,fragmentShader:oe.shadow_frag}};gn.physical={uniforms:Ot([gn.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new re},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new re},clearcoatNormalScale:{value:new ee(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new re},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new re},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new re},sheen:{value:0},sheenColor:{value:new te(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new re},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new re},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new re},transmissionSamplerSize:{value:new ee},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new re},attenuationDistance:{value:0},attenuationColor:{value:new te(0)},specularColor:{value:new te(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new re},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new re},anisotropyVector:{value:new ee},anisotropyMap:{value:null},anisotropyMapTransform:{value:new re}}]),vertexShader:oe.meshphysical_vert,fragmentShader:oe.meshphysical_frag};const ar={r:0,b:0,g:0},wi=new Ne,df=new K0;function cf(i,e,t,n,s,r,a){const o=new te(0);let l=r===!0?0:1,d,c,u=null,p=0,h=null;function b(M){let P=M.isScene===!0?M.background:null;return P&&P.isTexture&&(P=(M.backgroundBlurriness>0?t:e).get(P)),P}function T(M){let P=!1;const V=b(M);V===null?f(o,l):V&&V.isColor&&(f(V,1),P=!0);const C=i.xr.getEnvironmentBlendMode();C==="additive"?n.buffers.color.setClear(0,0,0,1,a):C==="alpha-blend"&&n.buffers.color.setClear(0,0,0,0,a),(i.autoClear||P)&&(n.buffers.depth.setTest(!0),n.buffers.depth.setMask(!0),n.buffers.color.setMask(!0),i.clear(i.autoClearColor,i.autoClearDepth,i.autoClearStencil))}function m(M,P){const V=b(P);V&&(V.isCubeTexture||V.mapping===v2)?(c===void 0&&(c=new Be(new en(1,1,1),new fi({name:"BackgroundCubeMaterial",uniforms:R1(gn.backgroundCube.uniforms),vertexShader:gn.backgroundCube.vertexShader,fragmentShader:gn.backgroundCube.fragmentShader,side:Wt,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),c.geometry.deleteAttribute("normal"),c.geometry.deleteAttribute("uv"),c.onBeforeRender=function(C,D,G){this.matrixWorld.copyPosition(G.matrixWorld)},Object.defineProperty(c.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),s.update(c)),wi.copy(P.backgroundRotation),wi.x*=-1,wi.y*=-1,wi.z*=-1,V.isCubeTexture&&V.isRenderTargetTexture===!1&&(wi.y*=-1,wi.z*=-1),c.material.uniforms.envMap.value=V,c.material.uniforms.flipEnvMap.value=V.isCubeTexture&&V.isRenderTargetTexture===!1?-1:1,c.material.uniforms.backgroundBlurriness.value=P.backgroundBlurriness,c.material.uniforms.backgroundIntensity.value=P.backgroundIntensity,c.material.uniforms.backgroundRotation.value.setFromMatrix4(df.makeRotationFromEuler(wi)),c.material.toneMapped=ge.getTransfer(V.colorSpace)!==Ae,(u!==V||p!==V.version||h!==i.toneMapping)&&(c.material.needsUpdate=!0,u=V,p=V.version,h=i.toneMapping),c.layers.enableAll(),M.unshift(c,c.geometry,c.material,0,0,null)):V&&V.isTexture&&(d===void 0&&(d=new Be(new x2(2,2),new fi({name:"BackgroundMaterial",uniforms:R1(gn.background.uniforms),vertexShader:gn.background.vertexShader,fragmentShader:gn.background.fragmentShader,side:Zn,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),d.geometry.deleteAttribute("normal"),Object.defineProperty(d.material,"map",{get:function(){return this.uniforms.t2D.value}}),s.update(d)),d.material.uniforms.t2D.value=V,d.material.uniforms.backgroundIntensity.value=P.backgroundIntensity,d.material.toneMapped=ge.getTransfer(V.colorSpace)!==Ae,V.matrixAutoUpdate===!0&&V.updateMatrix(),d.material.uniforms.uvTransform.value.copy(V.matrix),(u!==V||p!==V.version||h!==i.toneMapping)&&(d.material.needsUpdate=!0,u=V,p=V.version,h=i.toneMapping),d.layers.enableAll(),M.unshift(d,d.geometry,d.material,0,0,null))}function f(M,P){M.getRGB(ar,F4(i)),n.buffers.color.setClear(ar.r,ar.g,ar.b,P,a)}function N(){c!==void 0&&(c.geometry.dispose(),c.material.dispose(),c=void 0),d!==void 0&&(d.geometry.dispose(),d.material.dispose(),d=void 0)}return{getClearColor:function(){return o},setClearColor:function(M,P=1){o.set(M),l=P,f(o,l)},getClearAlpha:function(){return l},setClearAlpha:function(M){l=M,f(o,l)},render:T,addToRenderList:m,dispose:N}}function uf(i,e){const t=i.getParameter(i.MAX_VERTEX_ATTRIBS),n={},s=p(null);let r=s,a=!1;function o(H,W,B,Q,e0){let u0=!1;const n0=u(Q,B,W);r!==n0&&(r=n0,d(r.object)),u0=h(H,Q,B,e0),u0&&b(H,Q,B,e0),e0!==null&&e.update(e0,i.ELEMENT_ARRAY_BUFFER),(u0||a)&&(a=!1,P(H,W,B,Q),e0!==null&&i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,e.get(e0).buffer))}function l(){return i.createVertexArray()}function d(H){return i.bindVertexArray(H)}function c(H){return i.deleteVertexArray(H)}function u(H,W,B){const Q=B.wireframe===!0;let e0=n[H.id];e0===void 0&&(e0={},n[H.id]=e0);let u0=e0[W.id];u0===void 0&&(u0={},e0[W.id]=u0);let n0=u0[Q];return n0===void 0&&(n0=p(l()),u0[Q]=n0),n0}function p(H){const W=[],B=[],Q=[];for(let e0=0;e0<t;e0++)W[e0]=0,B[e0]=0,Q[e0]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:W,enabledAttributes:B,attributeDivisors:Q,object:H,attributes:{},index:null}}function h(H,W,B,Q){const e0=r.attributes,u0=W.attributes;let n0=0;const b0=B.getAttributes();for(const t0 in b0)if(b0[t0].location>=0){const R0=e0[t0];let V0=u0[t0];if(V0===void 0&&(t0==="instanceMatrix"&&H.instanceMatrix&&(V0=H.instanceMatrix),t0==="instanceColor"&&H.instanceColor&&(V0=H.instanceColor)),R0===void 0||R0.attribute!==V0||V0&&R0.data!==V0.data)return!0;n0++}return r.attributesNum!==n0||r.index!==Q}function b(H,W,B,Q){const e0={},u0=W.attributes;let n0=0;const b0=B.getAttributes();for(const t0 in b0)if(b0[t0].location>=0){let R0=u0[t0];R0===void 0&&(t0==="instanceMatrix"&&H.instanceMatrix&&(R0=H.instanceMatrix),t0==="instanceColor"&&H.instanceColor&&(R0=H.instanceColor));const V0={};V0.attribute=R0,R0&&R0.data&&(V0.data=R0.data),e0[t0]=V0,n0++}r.attributes=e0,r.attributesNum=n0,r.index=Q}function T(){const H=r.newAttributes;for(let W=0,B=H.length;W<B;W++)H[W]=0}function m(H){f(H,0)}function f(H,W){const B=r.newAttributes,Q=r.enabledAttributes,e0=r.attributeDivisors;B[H]=1,Q[H]===0&&(i.enableVertexAttribArray(H),Q[H]=1),e0[H]!==W&&(i.vertexAttribDivisor(H,W),e0[H]=W)}function N(){const H=r.newAttributes,W=r.enabledAttributes;for(let B=0,Q=W.length;B<Q;B++)W[B]!==H[B]&&(i.disableVertexAttribArray(B),W[B]=0)}function M(H,W,B,Q,e0,u0,n0){n0===!0?i.vertexAttribIPointer(H,W,B,e0,u0):i.vertexAttribPointer(H,W,B,Q,e0,u0)}function P(H,W,B,Q){T();const e0=Q.attributes,u0=B.getAttributes(),n0=W.defaultAttributeValues;for(const b0 in u0){const t0=u0[b0];if(t0.location>=0){let x0=e0[b0];if(x0===void 0&&(b0==="instanceMatrix"&&H.instanceMatrix&&(x0=H.instanceMatrix),b0==="instanceColor"&&H.instanceColor&&(x0=H.instanceColor)),x0!==void 0){const R0=x0.normalized,V0=x0.itemSize,B0=e.get(x0);if(B0===void 0)continue;const ue=B0.buffer,s0=B0.type,w0=B0.bytesPerElement,T0=s0===i.INT||s0===i.UNSIGNED_INT||x0.gpuType===Fo;if(x0.isInterleavedBufferAttribute){const S0=x0.data,I0=S0.stride,me=x0.offset;if(S0.isInstancedInterleavedBuffer){for(let Z0=0;Z0<t0.locationSize;Z0++)f(t0.location+Z0,S0.meshPerAttribute);H.isInstancedMesh!==!0&&Q._maxInstanceCount===void 0&&(Q._maxInstanceCount=S0.meshPerAttribute*S0.count)}else for(let Z0=0;Z0<t0.locationSize;Z0++)m(t0.location+Z0);i.bindBuffer(i.ARRAY_BUFFER,ue);for(let Z0=0;Z0<t0.locationSize;Z0++)M(t0.location+Z0,V0/t0.locationSize,s0,R0,I0*w0,(me+V0/t0.locationSize*Z0)*w0,T0)}else{if(x0.isInstancedBufferAttribute){for(let S0=0;S0<t0.locationSize;S0++)f(t0.location+S0,x0.meshPerAttribute);H.isInstancedMesh!==!0&&Q._maxInstanceCount===void 0&&(Q._maxInstanceCount=x0.meshPerAttribute*x0.count)}else for(let S0=0;S0<t0.locationSize;S0++)m(t0.location+S0);i.bindBuffer(i.ARRAY_BUFFER,ue);for(let S0=0;S0<t0.locationSize;S0++)M(t0.location+S0,V0/t0.locationSize,s0,R0,V0*w0,V0/t0.locationSize*S0*w0,T0)}}else if(n0!==void 0){const R0=n0[b0];if(R0!==void 0)switch(R0.length){case 2:i.vertexAttrib2fv(t0.location,R0);break;case 3:i.vertexAttrib3fv(t0.location,R0);break;case 4:i.vertexAttrib4fv(t0.location,R0);break;default:i.vertexAttrib1fv(t0.location,R0)}}}}N()}function V(){G();for(const H in n){const W=n[H];for(const B in W){const Q=W[B];for(const e0 in Q)c(Q[e0].object),delete Q[e0];delete W[B]}delete n[H]}}function C(H){if(n[H.id]===void 0)return;const W=n[H.id];for(const B in W){const Q=W[B];for(const e0 in Q)c(Q[e0].object),delete Q[e0];delete W[B]}delete n[H.id]}function D(H){for(const W in n){const B=n[W];if(B[H.id]===void 0)continue;const Q=B[H.id];for(const e0 in Q)c(Q[e0].object),delete Q[e0];delete B[H.id]}}function G(){L(),a=!0,r!==s&&(r=s,d(r.object))}function L(){s.geometry=null,s.program=null,s.wireframe=!1}return{setup:o,reset:G,resetDefaultState:L,dispose:V,releaseStatesOfGeometry:C,releaseStatesOfProgram:D,initAttributes:T,enableAttribute:m,disableUnusedAttributes:N}}function pf(i,e,t){let n;function s(d){n=d}function r(d,c){i.drawArrays(n,d,c),t.update(c,n,1)}function a(d,c,u){u!==0&&(i.drawArraysInstanced(n,d,c,u),t.update(c,n,u))}function o(d,c,u){if(u===0)return;e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n,d,0,c,0,u);let h=0;for(let b=0;b<u;b++)h+=c[b];t.update(h,n,1)}function l(d,c,u,p){if(u===0)return;const h=e.get("WEBGL_multi_draw");if(h===null)for(let b=0;b<d.length;b++)a(d[b],c[b],p[b]);else{h.multiDrawArraysInstancedWEBGL(n,d,0,c,0,p,0,u);let b=0;for(let T=0;T<u;T++)b+=c[T]*p[T];t.update(b,n,1)}}this.setMode=s,this.render=r,this.renderInstances=a,this.renderMultiDraw=o,this.renderMultiDrawInstances=l}function ff(i,e,t,n){let s;function r(){if(s!==void 0)return s;if(e.has("EXT_texture_filter_anisotropic")===!0){const D=e.get("EXT_texture_filter_anisotropic");s=i.getParameter(D.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else s=0;return s}function a(D){return!(D!==Yt&&n.convert(D)!==i.getParameter(i.IMPLEMENTATION_COLOR_READ_FORMAT))}function o(D){const G=D===jn&&(e.has("EXT_color_buffer_half_float")||e.has("EXT_color_buffer_float"));return!(D!==Sn&&n.convert(D)!==i.getParameter(i.IMPLEMENTATION_COLOR_READ_TYPE)&&D!==jt&&!G)}function l(D){if(D==="highp"){if(i.getShaderPrecisionFormat(i.VERTEX_SHADER,i.HIGH_FLOAT).precision>0&&i.getShaderPrecisionFormat(i.FRAGMENT_SHADER,i.HIGH_FLOAT).precision>0)return"highp";D="mediump"}return D==="mediump"&&i.getShaderPrecisionFormat(i.VERTEX_SHADER,i.MEDIUM_FLOAT).precision>0&&i.getShaderPrecisionFormat(i.FRAGMENT_SHADER,i.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let d=t.precision!==void 0?t.precision:"highp";const c=l(d);c!==d&&(console.warn("THREE.WebGLRenderer:",d,"not supported, using",c,"instead."),d=c);const u=t.logarithmicDepthBuffer===!0,p=t.reverseDepthBuffer===!0&&e.has("EXT_clip_control"),h=i.getParameter(i.MAX_TEXTURE_IMAGE_UNITS),b=i.getParameter(i.MAX_VERTEX_TEXTURE_IMAGE_UNITS),T=i.getParameter(i.MAX_TEXTURE_SIZE),m=i.getParameter(i.MAX_CUBE_MAP_TEXTURE_SIZE),f=i.getParameter(i.MAX_VERTEX_ATTRIBS),N=i.getParameter(i.MAX_VERTEX_UNIFORM_VECTORS),M=i.getParameter(i.MAX_VARYING_VECTORS),P=i.getParameter(i.MAX_FRAGMENT_UNIFORM_VECTORS),V=b>0,C=i.getParameter(i.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:r,getMaxPrecision:l,textureFormatReadable:a,textureTypeReadable:o,precision:d,logarithmicDepthBuffer:u,reverseDepthBuffer:p,maxTextures:h,maxVertexTextures:b,maxTextureSize:T,maxCubemapSize:m,maxAttributes:f,maxVertexUniforms:N,maxVaryings:M,maxFragmentUniforms:P,vertexTextures:V,maxSamples:C}}function hf(i){const e=this;let t=null,n=0,s=!1,r=!1;const a=new oi,o=new re,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(u,p){const h=u.length!==0||p||n!==0||s;return s=p,n=u.length,h},this.beginShadows=function(){r=!0,c(null)},this.endShadows=function(){r=!1},this.setGlobalState=function(u,p){t=c(u,p,0)},this.setState=function(u,p,h){const b=u.clippingPlanes,T=u.clipIntersection,m=u.clipShadows,f=i.get(u);if(!s||b===null||b.length===0||r&&!m)r?c(null):d();else{const N=r?0:n,M=N*4;let P=f.clippingState||null;l.value=P,P=c(b,p,M,h);for(let V=0;V!==M;++V)P[V]=t[V];f.clippingState=P,this.numIntersection=T?this.numPlanes:0,this.numPlanes+=N}};function d(){l.value!==t&&(l.value=t,l.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function c(u,p,h,b){const T=u!==null?u.length:0;let m=null;if(T!==0){if(m=l.value,b!==!0||m===null){const f=h+T*4,N=p.matrixWorldInverse;o.getNormalMatrix(N),(m===null||m.length<f)&&(m=new Float32Array(f));for(let M=0,P=h;M!==T;++M,P+=4)a.copy(u[M]).applyMatrix4(N,o),a.normal.toArray(m,P),m[P+3]=a.constant}l.value=m,l.needsUpdate=!0}return e.numPlanes=T,e.numIntersection=0,m}}function mf(i){let e=new WeakMap;function t(a,o){return o===ba?a.mapping=x1:o===va&&(a.mapping=S1),a}function n(a){if(a&&a.isTexture){const o=a.mapping;if(o===ba||o===va)if(e.has(a)){const l=e.get(a).texture;return t(l,a.mapping)}else{const l=a.image;if(l&&l.height>0){const d=new Xd(l.height);return d.fromEquirectangularTexture(i,a),e.set(a,d),a.addEventListener("dispose",s),t(d.texture,a.mapping)}else return null}}return a}function s(a){const o=a.target;o.removeEventListener("dispose",s);const l=e.get(o);l!==void 0&&(e.delete(o),l.dispose())}function r(){e=new WeakMap}return{get:n,dispose:r}}const u1=4,m9=[.125,.215,.35,.446,.526,.582],Ni=20,h3=new t7,y9=new te;let m3=null,y3=0,b3=0,v3=!1;const Pi=(1+Math.sqrt(5))/2,e1=1/Pi,b9=[new x(-Pi,e1,0),new x(Pi,e1,0),new x(-e1,0,Pi),new x(e1,0,Pi),new x(0,Pi,-e1),new x(0,Pi,e1),new x(-1,1,-1),new x(1,1,-1),new x(-1,1,1),new x(1,1,1)],yf=new x;class Ba{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,s=100,r={}){const{size:a=256,position:o=yf}=r;m3=this._renderer.getRenderTarget(),y3=this._renderer.getActiveCubeFace(),b3=this._renderer.getActiveMipmapLevel(),v3=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(a);const l=this._allocateTargets();return l.depthBuffer=!0,this._sceneToCubeUV(e,n,s,l,o),t>0&&this._blur(l,0,0,t),this._applyPMREM(l),this._cleanup(l),l}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=w9(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=g9(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(m3,y3,b3),this._renderer.xr.enabled=v3,e.scissorTest=!1,or(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===x1||e.mapping===S1?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),m3=this._renderer.getRenderTarget(),y3=this._renderer.getActiveCubeFace(),b3=this._renderer.getActiveMipmapLevel(),v3=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:vt,minFilter:vt,generateMipmaps:!1,type:jn,format:Yt,colorSpace:xt,depthBuffer:!1},s=v9(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=v9(e,t,n);const{_lodMax:r}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=bf(r)),this._blurMaterial=vf(r,e,t)}return s}_compileMaterial(e){const t=new Be(this._lodPlanes[0],e);this._renderer.compile(t,h3)}_sceneToCubeUV(e,t,n,s,r){const l=new It(90,1,t,n),d=[1,-1,1,1,1,1],c=[1,1,1,-1,-1,-1],u=this._renderer,p=u.autoClear,h=u.toneMapping;u.getClearColor(y9),u.toneMapping=pi,u.autoClear=!1;const b=new Un({name:"PMREM.Background",side:Wt,depthWrite:!1,depthTest:!1}),T=new Be(new en,b);let m=!1;const f=e.background;f?f.isColor&&(b.color.copy(f),e.background=null,m=!0):(b.color.copy(y9),m=!0);for(let N=0;N<6;N++){const M=N%3;M===0?(l.up.set(0,d[N],0),l.position.set(r.x,r.y,r.z),l.lookAt(r.x+c[N],r.y,r.z)):M===1?(l.up.set(0,0,d[N]),l.position.set(r.x,r.y,r.z),l.lookAt(r.x,r.y+c[N],r.z)):(l.up.set(0,d[N],0),l.position.set(r.x,r.y,r.z),l.lookAt(r.x,r.y,r.z+c[N]));const P=this._cubeSize;or(s,M*P,N>2?P:0,P,P),u.setRenderTarget(s),m&&u.render(T,l),u.render(e,l)}T.geometry.dispose(),T.material.dispose(),u.toneMapping=h,u.autoClear=p,e.background=f}_textureToCubeUV(e,t){const n=this._renderer,s=e.mapping===x1||e.mapping===S1;s?(this._cubemapMaterial===null&&(this._cubemapMaterial=w9()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=g9());const r=s?this._cubemapMaterial:this._equirectMaterial,a=new Be(this._lodPlanes[0],r),o=r.uniforms;o.envMap.value=e;const l=this._cubeSize;or(t,0,0,3*l,2*l),n.setRenderTarget(t),n.render(a,h3)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;const s=this._lodPlanes.length;for(let r=1;r<s;r++){const a=Math.sqrt(this._sigmas[r]*this._sigmas[r]-this._sigmas[r-1]*this._sigmas[r-1]),o=b9[(s-r-1)%b9.length];this._blur(e,r-1,r,a,o)}t.autoClear=n}_blur(e,t,n,s,r){const a=this._pingPongRenderTarget;this._halfBlur(e,a,t,n,s,"latitudinal",r),this._halfBlur(a,e,n,n,s,"longitudinal",r)}_halfBlur(e,t,n,s,r,a,o){const l=this._renderer,d=this._blurMaterial;a!=="latitudinal"&&a!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const c=3,u=new Be(this._lodPlanes[s],d),p=d.uniforms,h=this._sizeLods[n]-1,b=isFinite(r)?Math.PI/(2*h):2*Math.PI/(2*Ni-1),T=r/b,m=isFinite(r)?1+Math.floor(c*T):Ni;m>Ni&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${m} samples when the maximum is set to ${Ni}`);const f=[];let N=0;for(let D=0;D<Ni;++D){const G=D/T,L=Math.exp(-G*G/2);f.push(L),D===0?N+=L:D<m&&(N+=2*L)}for(let D=0;D<f.length;D++)f[D]=f[D]/N;p.envMap.value=e.texture,p.samples.value=m,p.weights.value=f,p.latitudinal.value=a==="latitudinal",o&&(p.poleAxis.value=o);const{_lodMax:M}=this;p.dTheta.value=b,p.mipInt.value=M-n;const P=this._sizeLods[s],V=3*P*(s>M-u1?s-M+u1:0),C=4*(this._cubeSize-P);or(t,V,C,3*P,2*P),l.setRenderTarget(t),l.render(u,h3)}}function bf(i){const e=[],t=[],n=[];let s=i;const r=i-u1+1+m9.length;for(let a=0;a<r;a++){const o=Math.pow(2,s);t.push(o);let l=1/o;a>i-u1?l=m9[a-i+u1-1]:a===0&&(l=0),n.push(l);const d=1/(o-2),c=-d,u=1+d,p=[c,c,u,c,u,u,c,c,u,u,c,u],h=6,b=6,T=3,m=2,f=1,N=new Float32Array(T*b*h),M=new Float32Array(m*b*h),P=new Float32Array(f*b*h);for(let C=0;C<h;C++){const D=C%3*2/3-1,G=C>2?0:-1,L=[D,G,0,D+2/3,G,0,D+2/3,G+1,0,D,G,0,D+2/3,G+1,0,D,G+1,0];N.set(L,T*b*C),M.set(p,m*b*C);const H=[C,C,C,C,C,C];P.set(H,f*b*C)}const V=new Mt;V.setAttribute("position",new At(N,T)),V.setAttribute("uv",new At(M,m)),V.setAttribute("faceIndex",new At(P,f)),e.push(V),s>u1&&s--}return{lodPlanes:e,sizeLods:t,sigmas:n}}function v9(i,e,t){const n=new Ei(i,e,t);return n.texture.mapping=v2,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function or(i,e,t,n,s){i.viewport.set(e,t,n,s),i.scissor.set(e,t,n,s)}function vf(i,e,t){const n=new Float32Array(Ni),s=new x(0,1,0);return new fi({name:"SphericalGaussianBlur",defines:{n:Ni,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${i}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:s}},vertexShader:s7(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:ui,depthTest:!1,depthWrite:!1})}function g9(){return new fi({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:s7(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:ui,depthTest:!1,depthWrite:!1})}function w9(){return new fi({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:s7(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:ui,depthTest:!1,depthWrite:!1})}function s7(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function gf(i){let e=new WeakMap,t=null;function n(o){if(o&&o.isTexture){const l=o.mapping,d=l===ba||l===va,c=l===x1||l===S1;if(d||c){let u=e.get(o);const p=u!==void 0?u.texture.pmremVersion:0;if(o.isRenderTargetTexture&&o.pmremVersion!==p)return t===null&&(t=new Ba(i)),u=d?t.fromEquirectangular(o,u):t.fromCubemap(o,u),u.texture.pmremVersion=o.pmremVersion,e.set(o,u),u.texture;if(u!==void 0)return u.texture;{const h=o.image;return d&&h&&h.height>0||c&&h&&s(h)?(t===null&&(t=new Ba(i)),u=d?t.fromEquirectangular(o):t.fromCubemap(o),u.texture.pmremVersion=o.pmremVersion,e.set(o,u),o.addEventListener("dispose",r),u.texture):null}}}return o}function s(o){let l=0;const d=6;for(let c=0;c<d;c++)o[c]!==void 0&&l++;return l===d}function r(o){const l=o.target;l.removeEventListener("dispose",r);const d=e.get(l);d!==void 0&&(e.delete(l),d.dispose())}function a(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:n,dispose:a}}function wf(i){const e={};function t(n){if(e[n]!==void 0)return e[n];let s;switch(n){case"WEBGL_depth_texture":s=i.getExtension("WEBGL_depth_texture")||i.getExtension("MOZ_WEBGL_depth_texture")||i.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":s=i.getExtension("EXT_texture_filter_anisotropic")||i.getExtension("MOZ_EXT_texture_filter_anisotropic")||i.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":s=i.getExtension("WEBGL_compressed_texture_s3tc")||i.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":s=i.getExtension("WEBGL_compressed_texture_pvrtc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:s=i.getExtension(n)}return e[n]=s,s}return{has:function(n){return t(n)!==null},init:function(){t("EXT_color_buffer_float"),t("WEBGL_clip_cull_distance"),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture"),t("WEBGL_render_shared_exponent")},get:function(n){const s=t(n);return s===null&&v1("THREE.WebGLRenderer: "+n+" extension not supported."),s}}}function Tf(i,e,t,n){const s={},r=new WeakMap;function a(u){const p=u.target;p.index!==null&&e.remove(p.index);for(const b in p.attributes)e.remove(p.attributes[b]);p.removeEventListener("dispose",a),delete s[p.id];const h=r.get(p);h&&(e.remove(h),r.delete(p)),n.releaseStatesOfGeometry(p),p.isInstancedBufferGeometry===!0&&delete p._maxInstanceCount,t.memory.geometries--}function o(u,p){return s[p.id]===!0||(p.addEventListener("dispose",a),s[p.id]=!0,t.memory.geometries++),p}function l(u){const p=u.attributes;for(const h in p)e.update(p[h],i.ARRAY_BUFFER)}function d(u){const p=[],h=u.index,b=u.attributes.position;let T=0;if(h!==null){const N=h.array;T=h.version;for(let M=0,P=N.length;M<P;M+=3){const V=N[M+0],C=N[M+1],D=N[M+2];p.push(V,C,C,D,D,V)}}else if(b!==void 0){const N=b.array;T=b.version;for(let M=0,P=N.length/3-1;M<P;M+=3){const V=M+0,C=M+1,D=M+2;p.push(V,C,C,D,D,V)}}else return;const m=new(I4(p)?ko:C4)(p,1);m.version=T;const f=r.get(u);f&&e.remove(f),r.set(u,m)}function c(u){const p=r.get(u);if(p){const h=u.index;h!==null&&p.version<h.version&&d(u)}else d(u);return r.get(u)}return{get:o,update:l,getWireframeAttribute:c}}function xf(i,e,t){let n;function s(p){n=p}let r,a;function o(p){r=p.type,a=p.bytesPerElement}function l(p,h){i.drawElements(n,h,r,p*a),t.update(h,n,1)}function d(p,h,b){b!==0&&(i.drawElementsInstanced(n,h,r,p*a,b),t.update(h,n,b))}function c(p,h,b){if(b===0)return;e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n,h,0,r,p,0,b);let m=0;for(let f=0;f<b;f++)m+=h[f];t.update(m,n,1)}function u(p,h,b,T){if(b===0)return;const m=e.get("WEBGL_multi_draw");if(m===null)for(let f=0;f<p.length;f++)d(p[f]/a,h[f],T[f]);else{m.multiDrawElementsInstancedWEBGL(n,h,0,r,p,0,T,0,b);let f=0;for(let N=0;N<b;N++)f+=h[N]*T[N];t.update(f,n,1)}}this.setMode=s,this.setIndex=o,this.render=l,this.renderInstances=d,this.renderMultiDraw=c,this.renderMultiDrawInstances=u}function Sf(i){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(r,a,o){switch(t.calls++,a){case i.TRIANGLES:t.triangles+=o*(r/3);break;case i.LINES:t.lines+=o*(r/2);break;case i.LINE_STRIP:t.lines+=o*(r-1);break;case i.LINE_LOOP:t.lines+=o*r;break;case i.POINTS:t.points+=o*r;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",a);break}}function s(){t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:s,update:n}}function Pf(i,e,t){const n=new WeakMap,s=new He;function r(a,o,l){const d=a.morphTargetInfluences,c=o.morphAttributes.position||o.morphAttributes.normal||o.morphAttributes.color,u=c!==void 0?c.length:0;let p=n.get(o);if(p===void 0||p.count!==u){let L=function(){D.dispose(),n.delete(o),o.removeEventListener("dispose",L)};p!==void 0&&p.texture.dispose();const h=o.morphAttributes.position!==void 0,b=o.morphAttributes.normal!==void 0,T=o.morphAttributes.color!==void 0,m=o.morphAttributes.position||[],f=o.morphAttributes.normal||[],N=o.morphAttributes.color||[];let M=0;h===!0&&(M=1),b===!0&&(M=2),T===!0&&(M=3);let P=o.attributes.position.count*M,V=1;P>e.maxTextureSize&&(V=Math.ceil(P/e.maxTextureSize),P=e.maxTextureSize);const C=new Float32Array(P*V*4*u),D=new X4(C,P,V,u);D.type=jt,D.needsUpdate=!0;const G=M*4;for(let H=0;H<u;H++){const W=m[H],B=f[H],Q=N[H],e0=P*V*4*H;for(let u0=0;u0<W.count;u0++){const n0=u0*G;h===!0&&(s.fromBufferAttribute(W,u0),C[e0+n0+0]=s.x,C[e0+n0+1]=s.y,C[e0+n0+2]=s.z,C[e0+n0+3]=0),b===!0&&(s.fromBufferAttribute(B,u0),C[e0+n0+4]=s.x,C[e0+n0+5]=s.y,C[e0+n0+6]=s.z,C[e0+n0+7]=0),T===!0&&(s.fromBufferAttribute(Q,u0),C[e0+n0+8]=s.x,C[e0+n0+9]=s.y,C[e0+n0+10]=s.z,C[e0+n0+11]=Q.itemSize===4?s.w:1)}}p={count:u,texture:D,size:new ee(P,V)},n.set(o,p),o.addEventListener("dispose",L)}if(a.isInstancedMesh===!0&&a.morphTexture!==null)l.getUniforms().setValue(i,"morphTexture",a.morphTexture,t);else{let h=0;for(let T=0;T<d.length;T++)h+=d[T];const b=o.morphTargetsRelative?1:1-h;l.getUniforms().setValue(i,"morphTargetBaseInfluence",b),l.getUniforms().setValue(i,"morphTargetInfluences",d)}l.getUniforms().setValue(i,"morphTargetsTexture",p.texture,t),l.getUniforms().setValue(i,"morphTargetsTextureSize",p.size)}return{update:r}}function Hf(i,e,t,n){let s=new WeakMap;function r(l){const d=n.render.frame,c=l.geometry,u=e.get(l,c);if(s.get(u)!==d&&(e.update(u),s.set(u,d)),l.isInstancedMesh&&(l.hasEventListener("dispose",o)===!1&&l.addEventListener("dispose",o),s.get(l)!==d&&(t.update(l.instanceMatrix,i.ARRAY_BUFFER),l.instanceColor!==null&&t.update(l.instanceColor,i.ARRAY_BUFFER),s.set(l,d))),l.isSkinnedMesh){const p=l.skeleton;s.get(p)!==d&&(p.update(),s.set(p,d))}return u}function a(){s=new WeakMap}function o(l){const d=l.target;d.removeEventListener("dispose",o),t.remove(d.instanceMatrix),d.instanceColor!==null&&t.remove(d.instanceColor)}return{update:r,dispose:a}}const B4=new gt,T9=new U4(1,1),Q4=new X4,_4=new hd,$4=new D4,x9=[],S9=[],P9=new Float32Array(16),H9=new Float32Array(9),R9=new Float32Array(4);function X1(i,e,t){const n=i[0];if(n<=0||n>0)return i;const s=e*t;let r=x9[s];if(r===void 0&&(r=new Float32Array(s),x9[s]=r),e!==0){n.toArray(r,0);for(let a=1,o=0;a!==e;++a)o+=t,i[a].toArray(r,o)}return r}function at(i,e){if(i.length!==e.length)return!1;for(let t=0,n=i.length;t<n;t++)if(i[t]!==e[t])return!1;return!0}function ot(i,e){for(let t=0,n=e.length;t<n;t++)i[t]=e[t]}function P2(i,e){let t=S9[e];t===void 0&&(t=new Int32Array(e),S9[e]=t);for(let n=0;n!==e;++n)t[n]=i.allocateTextureUnit();return t}function Rf(i,e){const t=this.cache;t[0]!==e&&(i.uniform1f(this.addr,e),t[0]=e)}function Nf(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(i.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(at(t,e))return;i.uniform2fv(this.addr,e),ot(t,e)}}function Lf(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(i.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(i.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(at(t,e))return;i.uniform3fv(this.addr,e),ot(t,e)}}function Mf(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(i.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(at(t,e))return;i.uniform4fv(this.addr,e),ot(t,e)}}function Ef(i,e){const t=this.cache,n=e.elements;if(n===void 0){if(at(t,e))return;i.uniformMatrix2fv(this.addr,!1,e),ot(t,e)}else{if(at(t,n))return;R9.set(n),i.uniformMatrix2fv(this.addr,!1,R9),ot(t,n)}}function Of(i,e){const t=this.cache,n=e.elements;if(n===void 0){if(at(t,e))return;i.uniformMatrix3fv(this.addr,!1,e),ot(t,e)}else{if(at(t,n))return;H9.set(n),i.uniformMatrix3fv(this.addr,!1,H9),ot(t,n)}}function zf(i,e){const t=this.cache,n=e.elements;if(n===void 0){if(at(t,e))return;i.uniformMatrix4fv(this.addr,!1,e),ot(t,e)}else{if(at(t,n))return;P9.set(n),i.uniformMatrix4fv(this.addr,!1,P9),ot(t,n)}}function If(i,e){const t=this.cache;t[0]!==e&&(i.uniform1i(this.addr,e),t[0]=e)}function Xf(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(i.uniform2i(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(at(t,e))return;i.uniform2iv(this.addr,e),ot(t,e)}}function Af(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(i.uniform3i(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(at(t,e))return;i.uniform3iv(this.addr,e),ot(t,e)}}function Cf(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(i.uniform4i(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(at(t,e))return;i.uniform4iv(this.addr,e),ot(t,e)}}function Ff(i,e){const t=this.cache;t[0]!==e&&(i.uniform1ui(this.addr,e),t[0]=e)}function Vf(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(i.uniform2ui(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(at(t,e))return;i.uniform2uiv(this.addr,e),ot(t,e)}}function Df(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(i.uniform3ui(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(at(t,e))return;i.uniform3uiv(this.addr,e),ot(t,e)}}function jf(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(i.uniform4ui(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(at(t,e))return;i.uniform4uiv(this.addr,e),ot(t,e)}}function Wf(i,e,t){const n=this.cache,s=t.allocateTextureUnit();n[0]!==s&&(i.uniform1i(this.addr,s),n[0]=s);let r;this.type===i.SAMPLER_2D_SHADOW?(T9.compareFunction=E4,r=T9):r=B4,t.setTexture2D(e||r,s)}function Uf(i,e,t){const n=this.cache,s=t.allocateTextureUnit();n[0]!==s&&(i.uniform1i(this.addr,s),n[0]=s),t.setTexture3D(e||_4,s)}function qf(i,e,t){const n=this.cache,s=t.allocateTextureUnit();n[0]!==s&&(i.uniform1i(this.addr,s),n[0]=s),t.setTextureCube(e||$4,s)}function Gf(i,e,t){const n=this.cache,s=t.allocateTextureUnit();n[0]!==s&&(i.uniform1i(this.addr,s),n[0]=s),t.setTexture2DArray(e||Q4,s)}function Zf(i){switch(i){case 5126:return Rf;case 35664:return Nf;case 35665:return Lf;case 35666:return Mf;case 35674:return Ef;case 35675:return Of;case 35676:return zf;case 5124:case 35670:return If;case 35667:case 35671:return Xf;case 35668:case 35672:return Af;case 35669:case 35673:return Cf;case 5125:return Ff;case 36294:return Vf;case 36295:return Df;case 36296:return jf;case 35678:case 36198:case 36298:case 36306:case 35682:return Wf;case 35679:case 36299:case 36307:return Uf;case 35680:case 36300:case 36308:case 36293:return qf;case 36289:case 36303:case 36311:case 36292:return Gf}}function Yf(i,e){i.uniform1fv(this.addr,e)}function kf(i,e){const t=X1(e,this.size,2);i.uniform2fv(this.addr,t)}function Jf(i,e){const t=X1(e,this.size,3);i.uniform3fv(this.addr,t)}function Kf(i,e){const t=X1(e,this.size,4);i.uniform4fv(this.addr,t)}function Bf(i,e){const t=X1(e,this.size,4);i.uniformMatrix2fv(this.addr,!1,t)}function Qf(i,e){const t=X1(e,this.size,9);i.uniformMatrix3fv(this.addr,!1,t)}function _f(i,e){const t=X1(e,this.size,16);i.uniformMatrix4fv(this.addr,!1,t)}function $f(i,e){i.uniform1iv(this.addr,e)}function eh(i,e){i.uniform2iv(this.addr,e)}function th(i,e){i.uniform3iv(this.addr,e)}function nh(i,e){i.uniform4iv(this.addr,e)}function ih(i,e){i.uniform1uiv(this.addr,e)}function sh(i,e){i.uniform2uiv(this.addr,e)}function rh(i,e){i.uniform3uiv(this.addr,e)}function ah(i,e){i.uniform4uiv(this.addr,e)}function oh(i,e,t){const n=this.cache,s=e.length,r=P2(t,s);at(n,r)||(i.uniform1iv(this.addr,r),ot(n,r));for(let a=0;a!==s;++a)t.setTexture2D(e[a]||B4,r[a])}function lh(i,e,t){const n=this.cache,s=e.length,r=P2(t,s);at(n,r)||(i.uniform1iv(this.addr,r),ot(n,r));for(let a=0;a!==s;++a)t.setTexture3D(e[a]||_4,r[a])}function dh(i,e,t){const n=this.cache,s=e.length,r=P2(t,s);at(n,r)||(i.uniform1iv(this.addr,r),ot(n,r));for(let a=0;a!==s;++a)t.setTextureCube(e[a]||$4,r[a])}function ch(i,e,t){const n=this.cache,s=e.length,r=P2(t,s);at(n,r)||(i.uniform1iv(this.addr,r),ot(n,r));for(let a=0;a!==s;++a)t.setTexture2DArray(e[a]||Q4,r[a])}function uh(i){switch(i){case 5126:return Yf;case 35664:return kf;case 35665:return Jf;case 35666:return Kf;case 35674:return Bf;case 35675:return Qf;case 35676:return _f;case 5124:case 35670:return $f;case 35667:case 35671:return eh;case 35668:case 35672:return th;case 35669:case 35673:return nh;case 5125:return ih;case 36294:return sh;case 36295:return rh;case 36296:return ah;case 35678:case 36198:case 36298:case 36306:case 35682:return oh;case 35679:case 36299:case 36307:return lh;case 35680:case 36300:case 36308:case 36293:return dh;case 36289:case 36303:case 36311:case 36292:return ch}}class ph{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.setValue=Zf(t.type)}}class fh{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=uh(t.type)}}class hh{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const s=this.seq;for(let r=0,a=s.length;r!==a;++r){const o=s[r];o.setValue(e,t[o.id],n)}}}const g3=/(\w+)(\])?(\[|\.)?/g;function N9(i,e){i.seq.push(e),i.map[e.id]=e}function mh(i,e,t){const n=i.name,s=n.length;for(g3.lastIndex=0;;){const r=g3.exec(n),a=g3.lastIndex;let o=r[1];const l=r[2]==="]",d=r[3];if(l&&(o=o|0),d===void 0||d==="["&&a+2===s){N9(t,d===void 0?new ph(o,i,e):new fh(o,i,e));break}else{let u=t.map[o];u===void 0&&(u=new hh(o),N9(t,u)),t=u}}}class Vr{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let s=0;s<n;++s){const r=e.getActiveUniform(t,s),a=e.getUniformLocation(t,r.name);mh(r,a,this)}}setValue(e,t,n,s){const r=this.map[t];r!==void 0&&r.setValue(e,n,s)}setOptional(e,t,n){const s=t[n];s!==void 0&&this.setValue(e,n,s)}static upload(e,t,n,s){for(let r=0,a=t.length;r!==a;++r){const o=t[r],l=n[o.id];l.needsUpdate!==!1&&o.setValue(e,l.value,s)}}static seqWithValue(e,t){const n=[];for(let s=0,r=e.length;s!==r;++s){const a=e[s];a.id in t&&n.push(a)}return n}}function L9(i,e,t){const n=i.createShader(e);return i.shaderSource(n,t),i.compileShader(n),n}const yh=37297;let bh=0;function vh(i,e){const t=i.split(`
`),n=[],s=Math.max(e-6,0),r=Math.min(e+6,t.length);for(let a=s;a<r;a++){const o=a+1;n.push(`${o===e?">":" "} ${o}: ${t[a]}`)}return n.join(`
`)}const M9=new re;function gh(i){ge._getMatrix(M9,ge.workingColorSpace,i);const e=`mat3( ${M9.elements.map(t=>t.toFixed(4))} )`;switch(ge.getTransfer(i)){case qr:return[e,"LinearTransferOETF"];case Ae:return[e,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",i),[e,"LinearTransferOETF"]}}function E9(i,e,t){const n=i.getShaderParameter(e,i.COMPILE_STATUS),s=i.getShaderInfoLog(e).trim();if(n&&s==="")return"";const r=/ERROR: 0:(\d+)/.exec(s);if(r){const a=parseInt(r[1]);return t.toUpperCase()+`

`+s+`

`+vh(i.getShaderSource(e),a)}else return s}function wh(i,e){const t=gh(e);return[`vec4 ${i}( vec4 value ) {`,`	return ${t[1]}( vec4( value.rgb * ${t[0]}, value.a ) );`,"}"].join(`
`)}function Th(i,e){let t;switch(e){case Pl:t="Linear";break;case Hl:t="Reinhard";break;case Rl:t="Cineon";break;case g4:t="ACESFilmic";break;case Ll:t="AgX";break;case Ml:t="Neutral";break;case Nl:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+i+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}const lr=new x;function xh(){ge.getLuminanceCoefficients(lr);const i=lr.x.toFixed(4),e=lr.y.toFixed(4),t=lr.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${i}, ${e}, ${t} );`,"	return dot( weights, rgb );","}"].join(`
`)}function Sh(i){return[i.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",i.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(ss).join(`
`)}function Ph(i){const e=[];for(const t in i){const n=i[t];n!==!1&&e.push("#define "+t+" "+n)}return e.join(`
`)}function Hh(i,e){const t={},n=i.getProgramParameter(e,i.ACTIVE_ATTRIBUTES);for(let s=0;s<n;s++){const r=i.getActiveAttrib(e,s),a=r.name;let o=1;r.type===i.FLOAT_MAT2&&(o=2),r.type===i.FLOAT_MAT3&&(o=3),r.type===i.FLOAT_MAT4&&(o=4),t[a]={type:r.type,location:i.getAttribLocation(e,a),locationSize:o}}return t}function ss(i){return i!==""}function O9(i,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return i.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function z9(i,e){return i.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const Rh=/^[ \t]*#include +<([\w\d./]+)>/gm;function Qa(i){return i.replace(Rh,Lh)}const Nh=new Map;function Lh(i,e){let t=oe[e];if(t===void 0){const n=Nh.get(e);if(n!==void 0)t=oe[n],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,n);else throw new Error("Can not resolve #include <"+e+">")}return Qa(t)}const Mh=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function I9(i){return i.replace(Mh,Eh)}function Eh(i,e,t,n){let s="";for(let r=parseInt(e);r<parseInt(t);r++)s+=n.replace(/\[\s*i\s*\]/g,"[ "+r+" ]").replace(/UNROLLED_LOOP_INDEX/g,r);return s}function X9(i){let e=`precision ${i.precision} float;
	precision ${i.precision} int;
	precision ${i.precision} sampler2D;
	precision ${i.precision} samplerCube;
	precision ${i.precision} sampler3D;
	precision ${i.precision} sampler2DArray;
	precision ${i.precision} sampler2DShadow;
	precision ${i.precision} samplerCubeShadow;
	precision ${i.precision} sampler2DArrayShadow;
	precision ${i.precision} isampler2D;
	precision ${i.precision} isampler3D;
	precision ${i.precision} isamplerCube;
	precision ${i.precision} isampler2DArray;
	precision ${i.precision} usampler2D;
	precision ${i.precision} usampler3D;
	precision ${i.precision} usamplerCube;
	precision ${i.precision} usampler2DArray;
	`;return i.precision==="highp"?e+=`
#define HIGH_PRECISION`:i.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:i.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function Oh(i){let e="SHADOWMAP_TYPE_BASIC";return i.shadowMapType===v4?e="SHADOWMAP_TYPE_PCF":i.shadowMapType===il?e="SHADOWMAP_TYPE_PCF_SOFT":i.shadowMapType===bn&&(e="SHADOWMAP_TYPE_VSM"),e}function zh(i){let e="ENVMAP_TYPE_CUBE";if(i.envMap)switch(i.envMapMode){case x1:case S1:e="ENVMAP_TYPE_CUBE";break;case v2:e="ENVMAP_TYPE_CUBE_UV";break}return e}function Ih(i){let e="ENVMAP_MODE_REFLECTION";if(i.envMap)switch(i.envMapMode){case S1:e="ENVMAP_MODE_REFRACTION";break}return e}function Xh(i){let e="ENVMAP_BLENDING_NONE";if(i.envMap)switch(i.combine){case Co:e="ENVMAP_BLENDING_MULTIPLY";break;case xl:e="ENVMAP_BLENDING_MIX";break;case Sl:e="ENVMAP_BLENDING_ADD";break}return e}function Ah(i){const e=i.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2,n=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:n,maxMip:t}}function Ch(i,e,t,n){const s=i.getContext(),r=t.defines;let a=t.vertexShader,o=t.fragmentShader;const l=Oh(t),d=zh(t),c=Ih(t),u=Xh(t),p=Ah(t),h=Sh(t),b=Ph(r),T=s.createProgram();let m,f,N=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(m=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,b].filter(ss).join(`
`),m.length>0&&(m+=`
`),f=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,b].filter(ss).join(`
`),f.length>0&&(f+=`
`)):(m=[X9(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,b,t.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",t.batching?"#define USE_BATCHING":"",t.batchingColor?"#define USE_BATCHING_COLOR":"",t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.instancingMorph?"#define USE_INSTANCING_MORPH":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+c:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+t.anisotropyMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(ss).join(`
`),f=[X9(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,b,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+d:"",t.envMap?"#define "+c:"",t.envMap?"#define "+u:"",p?"#define CUBEUV_TEXEL_WIDTH "+p.texelWidth:"",p?"#define CUBEUV_TEXEL_HEIGHT "+p.texelHeight:"",p?"#define CUBEUV_MAX_MIP "+p.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.dispersion?"#define USE_DISPERSION":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor||t.batchingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==pi?"#define TONE_MAPPING":"",t.toneMapping!==pi?oe.tonemapping_pars_fragment:"",t.toneMapping!==pi?Th("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",oe.colorspace_pars_fragment,wh("linearToOutputTexel",t.outputColorSpace),xh(),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(ss).join(`
`)),a=Qa(a),a=O9(a,t),a=z9(a,t),o=Qa(o),o=O9(o,t),o=z9(o,t),a=I9(a),o=I9(o),t.isRawShaderMaterial!==!0&&(N=`#version 300 es
`,m=[h,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+m,f=["#define varying in",t.glslVersion===R7?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===R7?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+f);const M=N+m+a,P=N+f+o,V=L9(s,s.VERTEX_SHADER,M),C=L9(s,s.FRAGMENT_SHADER,P);s.attachShader(T,V),s.attachShader(T,C),t.index0AttributeName!==void 0?s.bindAttribLocation(T,0,t.index0AttributeName):t.morphTargets===!0&&s.bindAttribLocation(T,0,"position"),s.linkProgram(T);function D(W){if(i.debug.checkShaderErrors){const B=s.getProgramInfoLog(T).trim(),Q=s.getShaderInfoLog(V).trim(),e0=s.getShaderInfoLog(C).trim();let u0=!0,n0=!0;if(s.getProgramParameter(T,s.LINK_STATUS)===!1)if(u0=!1,typeof i.debug.onShaderError=="function")i.debug.onShaderError(s,T,V,C);else{const b0=E9(s,V,"vertex"),t0=E9(s,C,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(T,s.VALIDATE_STATUS)+`

Material Name: `+W.name+`
Material Type: `+W.type+`

Program Info Log: `+B+`
`+b0+`
`+t0)}else B!==""?console.warn("THREE.WebGLProgram: Program Info Log:",B):(Q===""||e0==="")&&(n0=!1);n0&&(W.diagnostics={runnable:u0,programLog:B,vertexShader:{log:Q,prefix:m},fragmentShader:{log:e0,prefix:f}})}s.deleteShader(V),s.deleteShader(C),G=new Vr(s,T),L=Hh(s,T)}let G;this.getUniforms=function(){return G===void 0&&D(this),G};let L;this.getAttributes=function(){return L===void 0&&D(this),L};let H=t.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return H===!1&&(H=s.getProgramParameter(T,yh)),H},this.destroy=function(){n.releaseStatesOfProgram(this),s.deleteProgram(T),this.program=void 0},this.type=t.shaderType,this.name=t.shaderName,this.id=bh++,this.cacheKey=e,this.usedTimes=1,this.program=T,this.vertexShader=V,this.fragmentShader=C,this}let Fh=0;class Vh{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,s=this._getShaderStage(t),r=this._getShaderStage(n),a=this._getShaderCacheForMaterial(e);return a.has(s)===!1&&(a.add(s),s.usedTimes++),a.has(r)===!1&&(a.add(r),r.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const n of t)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);return n===void 0&&(n=new Set,t.set(e,n)),n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);return n===void 0&&(n=new Dh(e),t.set(e,n)),n}}class Dh{constructor(e){this.id=Fh++,this.code=e,this.usedTimes=0}}function jh(i,e,t,n,s,r,a){const o=new Yo,l=new Vh,d=new Set,c=[],u=s.logarithmicDepthBuffer,p=s.vertexTextures;let h=s.precision;const b={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function T(L){return d.add(L),L===0?"uv":`uv${L}`}function m(L,H,W,B,Q){const e0=B.fog,u0=Q.geometry,n0=L.isMeshStandardMaterial?B.environment:null,b0=(L.isMeshStandardMaterial?t:e).get(L.envMap||n0),t0=b0&&b0.mapping===v2?b0.image.height:null,x0=b[L.type];L.precision!==null&&(h=s.getMaxPrecision(L.precision),h!==L.precision&&console.warn("THREE.WebGLProgram.getParameters:",L.precision,"not supported, using",h,"instead."));const R0=u0.morphAttributes.position||u0.morphAttributes.normal||u0.morphAttributes.color,V0=R0!==void 0?R0.length:0;let B0=0;u0.morphAttributes.position!==void 0&&(B0=1),u0.morphAttributes.normal!==void 0&&(B0=2),u0.morphAttributes.color!==void 0&&(B0=3);let ue,s0,w0,T0;if(x0){const Pe=gn[x0];ue=Pe.vertexShader,s0=Pe.fragmentShader}else ue=L.vertexShader,s0=L.fragmentShader,l.update(L),w0=l.getVertexShaderID(L),T0=l.getFragmentShaderID(L);const S0=i.getRenderTarget(),I0=i.state.buffers.depth.getReversed(),me=Q.isInstancedMesh===!0,Z0=Q.isBatchedMesh===!0,Le=!!L.map,Oe=!!L.matcap,fe=!!b0,j=!!L.aoMap,dt=!!L.lightMap,we=!!L.bumpMap,ze=!!L.normalMap,D0=!!L.displacementMap,ve=!!L.emissiveMap,G0=!!L.metalnessMap,ie=!!L.roughnessMap,Qe=L.anisotropy>0,I=L.clearcoat>0,S=L.dispersion>0,K=L.iridescence>0,r0=L.sheen>0,p0=L.transmission>0,i0=Qe&&!!L.anisotropyMap,A0=I&&!!L.clearcoatMap,H0=I&&!!L.clearcoatNormalMap,C0=I&&!!L.clearcoatRoughnessMap,W0=K&&!!L.iridescenceMap,l0=K&&!!L.iridescenceThicknessMap,P0=r0&&!!L.sheenColorMap,Y0=r0&&!!L.sheenRoughnessMap,j0=!!L.specularMap,v0=!!L.specularColorMap,F0=!!L.specularIntensityMap,q=p0&&!!L.transmissionMap,_=p0&&!!L.thicknessMap,h0=!!L.gradientMap,O0=!!L.alphaMap,y0=L.alphaTest>0,d0=!!L.alphaHash,X0=!!L.extensions;let ne=pi;L.toneMapped&&(S0===null||S0.isXRRenderTarget===!0)&&(ne=i.toneMapping);const Ve={shaderID:x0,shaderType:L.type,shaderName:L.name,vertexShader:ue,fragmentShader:s0,defines:L.defines,customVertexShaderID:w0,customFragmentShaderID:T0,isRawShaderMaterial:L.isRawShaderMaterial===!0,glslVersion:L.glslVersion,precision:h,batching:Z0,batchingColor:Z0&&Q._colorsTexture!==null,instancing:me,instancingColor:me&&Q.instanceColor!==null,instancingMorph:me&&Q.morphTexture!==null,supportsVertexTextures:p,outputColorSpace:S0===null?i.outputColorSpace:S0.isXRRenderTarget===!0?S0.texture.colorSpace:xt,alphaToCoverage:!!L.alphaToCoverage,map:Le,matcap:Oe,envMap:fe,envMapMode:fe&&b0.mapping,envMapCubeUVHeight:t0,aoMap:j,lightMap:dt,bumpMap:we,normalMap:ze,displacementMap:p&&D0,emissiveMap:ve,normalMapObjectSpace:ze&&L.normalMapType===Al,normalMapTangentSpace:ze&&L.normalMapType===qo,metalnessMap:G0,roughnessMap:ie,anisotropy:Qe,anisotropyMap:i0,clearcoat:I,clearcoatMap:A0,clearcoatNormalMap:H0,clearcoatRoughnessMap:C0,dispersion:S,iridescence:K,iridescenceMap:W0,iridescenceThicknessMap:l0,sheen:r0,sheenColorMap:P0,sheenRoughnessMap:Y0,specularMap:j0,specularColorMap:v0,specularIntensityMap:F0,transmission:p0,transmissionMap:q,thicknessMap:_,gradientMap:h0,opaque:L.transparent===!1&&L.blending===y1&&L.alphaToCoverage===!1,alphaMap:O0,alphaTest:y0,alphaHash:d0,combine:L.combine,mapUv:Le&&T(L.map.channel),aoMapUv:j&&T(L.aoMap.channel),lightMapUv:dt&&T(L.lightMap.channel),bumpMapUv:we&&T(L.bumpMap.channel),normalMapUv:ze&&T(L.normalMap.channel),displacementMapUv:D0&&T(L.displacementMap.channel),emissiveMapUv:ve&&T(L.emissiveMap.channel),metalnessMapUv:G0&&T(L.metalnessMap.channel),roughnessMapUv:ie&&T(L.roughnessMap.channel),anisotropyMapUv:i0&&T(L.anisotropyMap.channel),clearcoatMapUv:A0&&T(L.clearcoatMap.channel),clearcoatNormalMapUv:H0&&T(L.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:C0&&T(L.clearcoatRoughnessMap.channel),iridescenceMapUv:W0&&T(L.iridescenceMap.channel),iridescenceThicknessMapUv:l0&&T(L.iridescenceThicknessMap.channel),sheenColorMapUv:P0&&T(L.sheenColorMap.channel),sheenRoughnessMapUv:Y0&&T(L.sheenRoughnessMap.channel),specularMapUv:j0&&T(L.specularMap.channel),specularColorMapUv:v0&&T(L.specularColorMap.channel),specularIntensityMapUv:F0&&T(L.specularIntensityMap.channel),transmissionMapUv:q&&T(L.transmissionMap.channel),thicknessMapUv:_&&T(L.thicknessMap.channel),alphaMapUv:O0&&T(L.alphaMap.channel),vertexTangents:!!u0.attributes.tangent&&(ze||Qe),vertexColors:L.vertexColors,vertexAlphas:L.vertexColors===!0&&!!u0.attributes.color&&u0.attributes.color.itemSize===4,pointsUvs:Q.isPoints===!0&&!!u0.attributes.uv&&(Le||O0),fog:!!e0,useFog:L.fog===!0,fogExp2:!!e0&&e0.isFogExp2,flatShading:L.flatShading===!0&&L.wireframe===!1,sizeAttenuation:L.sizeAttenuation===!0,logarithmicDepthBuffer:u,reverseDepthBuffer:I0,skinning:Q.isSkinnedMesh===!0,morphTargets:u0.morphAttributes.position!==void 0,morphNormals:u0.morphAttributes.normal!==void 0,morphColors:u0.morphAttributes.color!==void 0,morphTargetsCount:V0,morphTextureStride:B0,numDirLights:H.directional.length,numPointLights:H.point.length,numSpotLights:H.spot.length,numSpotLightMaps:H.spotLightMap.length,numRectAreaLights:H.rectArea.length,numHemiLights:H.hemi.length,numDirLightShadows:H.directionalShadowMap.length,numPointLightShadows:H.pointShadowMap.length,numSpotLightShadows:H.spotShadowMap.length,numSpotLightShadowsWithMaps:H.numSpotLightShadowsWithMaps,numLightProbes:H.numLightProbes,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:L.dithering,shadowMapEnabled:i.shadowMap.enabled&&W.length>0,shadowMapType:i.shadowMap.type,toneMapping:ne,decodeVideoTexture:Le&&L.map.isVideoTexture===!0&&ge.getTransfer(L.map.colorSpace)===Ae,decodeVideoTextureEmissive:ve&&L.emissiveMap.isVideoTexture===!0&&ge.getTransfer(L.emissiveMap.colorSpace)===Ae,premultipliedAlpha:L.premultipliedAlpha,doubleSided:L.side===wn,flipSided:L.side===Wt,useDepthPacking:L.depthPacking>=0,depthPacking:L.depthPacking||0,index0AttributeName:L.index0AttributeName,extensionClipCullDistance:X0&&L.extensions.clipCullDistance===!0&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(X0&&L.extensions.multiDraw===!0||Z0)&&n.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:L.customProgramCacheKey()};return Ve.vertexUv1s=d.has(1),Ve.vertexUv2s=d.has(2),Ve.vertexUv3s=d.has(3),d.clear(),Ve}function f(L){const H=[];if(L.shaderID?H.push(L.shaderID):(H.push(L.customVertexShaderID),H.push(L.customFragmentShaderID)),L.defines!==void 0)for(const W in L.defines)H.push(W),H.push(L.defines[W]);return L.isRawShaderMaterial===!1&&(N(H,L),M(H,L),H.push(i.outputColorSpace)),H.push(L.customProgramCacheKey),H.join()}function N(L,H){L.push(H.precision),L.push(H.outputColorSpace),L.push(H.envMapMode),L.push(H.envMapCubeUVHeight),L.push(H.mapUv),L.push(H.alphaMapUv),L.push(H.lightMapUv),L.push(H.aoMapUv),L.push(H.bumpMapUv),L.push(H.normalMapUv),L.push(H.displacementMapUv),L.push(H.emissiveMapUv),L.push(H.metalnessMapUv),L.push(H.roughnessMapUv),L.push(H.anisotropyMapUv),L.push(H.clearcoatMapUv),L.push(H.clearcoatNormalMapUv),L.push(H.clearcoatRoughnessMapUv),L.push(H.iridescenceMapUv),L.push(H.iridescenceThicknessMapUv),L.push(H.sheenColorMapUv),L.push(H.sheenRoughnessMapUv),L.push(H.specularMapUv),L.push(H.specularColorMapUv),L.push(H.specularIntensityMapUv),L.push(H.transmissionMapUv),L.push(H.thicknessMapUv),L.push(H.combine),L.push(H.fogExp2),L.push(H.sizeAttenuation),L.push(H.morphTargetsCount),L.push(H.morphAttributeCount),L.push(H.numDirLights),L.push(H.numPointLights),L.push(H.numSpotLights),L.push(H.numSpotLightMaps),L.push(H.numHemiLights),L.push(H.numRectAreaLights),L.push(H.numDirLightShadows),L.push(H.numPointLightShadows),L.push(H.numSpotLightShadows),L.push(H.numSpotLightShadowsWithMaps),L.push(H.numLightProbes),L.push(H.shadowMapType),L.push(H.toneMapping),L.push(H.numClippingPlanes),L.push(H.numClipIntersection),L.push(H.depthPacking)}function M(L,H){o.disableAll(),H.supportsVertexTextures&&o.enable(0),H.instancing&&o.enable(1),H.instancingColor&&o.enable(2),H.instancingMorph&&o.enable(3),H.matcap&&o.enable(4),H.envMap&&o.enable(5),H.normalMapObjectSpace&&o.enable(6),H.normalMapTangentSpace&&o.enable(7),H.clearcoat&&o.enable(8),H.iridescence&&o.enable(9),H.alphaTest&&o.enable(10),H.vertexColors&&o.enable(11),H.vertexAlphas&&o.enable(12),H.vertexUv1s&&o.enable(13),H.vertexUv2s&&o.enable(14),H.vertexUv3s&&o.enable(15),H.vertexTangents&&o.enable(16),H.anisotropy&&o.enable(17),H.alphaHash&&o.enable(18),H.batching&&o.enable(19),H.dispersion&&o.enable(20),H.batchingColor&&o.enable(21),H.gradientMap&&o.enable(22),L.push(o.mask),o.disableAll(),H.fog&&o.enable(0),H.useFog&&o.enable(1),H.flatShading&&o.enable(2),H.logarithmicDepthBuffer&&o.enable(3),H.reverseDepthBuffer&&o.enable(4),H.skinning&&o.enable(5),H.morphTargets&&o.enable(6),H.morphNormals&&o.enable(7),H.morphColors&&o.enable(8),H.premultipliedAlpha&&o.enable(9),H.shadowMapEnabled&&o.enable(10),H.doubleSided&&o.enable(11),H.flipSided&&o.enable(12),H.useDepthPacking&&o.enable(13),H.dithering&&o.enable(14),H.transmission&&o.enable(15),H.sheen&&o.enable(16),H.opaque&&o.enable(17),H.pointsUvs&&o.enable(18),H.decodeVideoTexture&&o.enable(19),H.decodeVideoTextureEmissive&&o.enable(20),H.alphaToCoverage&&o.enable(21),L.push(o.mask)}function P(L){const H=b[L.type];let W;if(H){const B=gn[H];W=Ed.clone(B.uniforms)}else W=L.uniforms;return W}function V(L,H){let W;for(let B=0,Q=c.length;B<Q;B++){const e0=c[B];if(e0.cacheKey===H){W=e0,++W.usedTimes;break}}return W===void 0&&(W=new Ch(i,H,L,r),c.push(W)),W}function C(L){if(--L.usedTimes===0){const H=c.indexOf(L);c[H]=c[c.length-1],c.pop(),L.destroy()}}function D(L){l.remove(L)}function G(){l.dispose()}return{getParameters:m,getProgramCacheKey:f,getUniforms:P,acquireProgram:V,releaseProgram:C,releaseShaderCache:D,programs:c,dispose:G}}function Wh(){let i=new WeakMap;function e(a){return i.has(a)}function t(a){let o=i.get(a);return o===void 0&&(o={},i.set(a,o)),o}function n(a){i.delete(a)}function s(a,o,l){i.get(a)[o]=l}function r(){i=new WeakMap}return{has:e,get:t,remove:n,update:s,dispose:r}}function Uh(i,e){return i.groupOrder!==e.groupOrder?i.groupOrder-e.groupOrder:i.renderOrder!==e.renderOrder?i.renderOrder-e.renderOrder:i.material.id!==e.material.id?i.material.id-e.material.id:i.z!==e.z?i.z-e.z:i.id-e.id}function A9(i,e){return i.groupOrder!==e.groupOrder?i.groupOrder-e.groupOrder:i.renderOrder!==e.renderOrder?i.renderOrder-e.renderOrder:i.z!==e.z?e.z-i.z:i.id-e.id}function C9(){const i=[];let e=0;const t=[],n=[],s=[];function r(){e=0,t.length=0,n.length=0,s.length=0}function a(u,p,h,b,T,m){let f=i[e];return f===void 0?(f={id:u.id,object:u,geometry:p,material:h,groupOrder:b,renderOrder:u.renderOrder,z:T,group:m},i[e]=f):(f.id=u.id,f.object=u,f.geometry=p,f.material=h,f.groupOrder=b,f.renderOrder=u.renderOrder,f.z=T,f.group=m),e++,f}function o(u,p,h,b,T,m){const f=a(u,p,h,b,T,m);h.transmission>0?n.push(f):h.transparent===!0?s.push(f):t.push(f)}function l(u,p,h,b,T,m){const f=a(u,p,h,b,T,m);h.transmission>0?n.unshift(f):h.transparent===!0?s.unshift(f):t.unshift(f)}function d(u,p){t.length>1&&t.sort(u||Uh),n.length>1&&n.sort(p||A9),s.length>1&&s.sort(p||A9)}function c(){for(let u=e,p=i.length;u<p;u++){const h=i[u];if(h.id===null)break;h.id=null,h.object=null,h.geometry=null,h.material=null,h.group=null}}return{opaque:t,transmissive:n,transparent:s,init:r,push:o,unshift:l,finish:c,sort:d}}function qh(){let i=new WeakMap;function e(n,s){const r=i.get(n);let a;return r===void 0?(a=new C9,i.set(n,[a])):s>=r.length?(a=new C9,r.push(a)):a=r[s],a}function t(){i=new WeakMap}return{get:e,dispose:t}}function Gh(){const i={};return{get:function(e){if(i[e.id]!==void 0)return i[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new x,color:new te};break;case"SpotLight":t={position:new x,direction:new x,color:new te,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new x,color:new te,distance:0,decay:0};break;case"HemisphereLight":t={direction:new x,skyColor:new te,groundColor:new te};break;case"RectAreaLight":t={color:new te,position:new x,halfWidth:new x,halfHeight:new x};break}return i[e.id]=t,t}}}function Zh(){const i={};return{get:function(e){if(i[e.id]!==void 0)return i[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ee};break;case"SpotLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ee};break;case"PointLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ee,shadowCameraNear:1,shadowCameraFar:1e3};break}return i[e.id]=t,t}}}let Yh=0;function kh(i,e){return(e.castShadow?2:0)-(i.castShadow?2:0)+(e.map?1:0)-(i.map?1:0)}function Jh(i){const e=new Gh,t=Zh(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let d=0;d<9;d++)n.probe.push(new x);const s=new x,r=new K0,a=new K0;function o(d){let c=0,u=0,p=0;for(let L=0;L<9;L++)n.probe[L].set(0,0,0);let h=0,b=0,T=0,m=0,f=0,N=0,M=0,P=0,V=0,C=0,D=0;d.sort(kh);for(let L=0,H=d.length;L<H;L++){const W=d[L],B=W.color,Q=W.intensity,e0=W.distance,u0=W.shadow&&W.shadow.map?W.shadow.map.texture:null;if(W.isAmbientLight)c+=B.r*Q,u+=B.g*Q,p+=B.b*Q;else if(W.isLightProbe){for(let n0=0;n0<9;n0++)n.probe[n0].addScaledVector(W.sh.coefficients[n0],Q);D++}else if(W.isDirectionalLight){const n0=e.get(W);if(n0.color.copy(W.color).multiplyScalar(W.intensity),W.castShadow){const b0=W.shadow,t0=t.get(W);t0.shadowIntensity=b0.intensity,t0.shadowBias=b0.bias,t0.shadowNormalBias=b0.normalBias,t0.shadowRadius=b0.radius,t0.shadowMapSize=b0.mapSize,n.directionalShadow[h]=t0,n.directionalShadowMap[h]=u0,n.directionalShadowMatrix[h]=W.shadow.matrix,N++}n.directional[h]=n0,h++}else if(W.isSpotLight){const n0=e.get(W);n0.position.setFromMatrixPosition(W.matrixWorld),n0.color.copy(B).multiplyScalar(Q),n0.distance=e0,n0.coneCos=Math.cos(W.angle),n0.penumbraCos=Math.cos(W.angle*(1-W.penumbra)),n0.decay=W.decay,n.spot[T]=n0;const b0=W.shadow;if(W.map&&(n.spotLightMap[V]=W.map,V++,b0.updateMatrices(W),W.castShadow&&C++),n.spotLightMatrix[T]=b0.matrix,W.castShadow){const t0=t.get(W);t0.shadowIntensity=b0.intensity,t0.shadowBias=b0.bias,t0.shadowNormalBias=b0.normalBias,t0.shadowRadius=b0.radius,t0.shadowMapSize=b0.mapSize,n.spotShadow[T]=t0,n.spotShadowMap[T]=u0,P++}T++}else if(W.isRectAreaLight){const n0=e.get(W);n0.color.copy(B).multiplyScalar(Q),n0.halfWidth.set(W.width*.5,0,0),n0.halfHeight.set(0,W.height*.5,0),n.rectArea[m]=n0,m++}else if(W.isPointLight){const n0=e.get(W);if(n0.color.copy(W.color).multiplyScalar(W.intensity),n0.distance=W.distance,n0.decay=W.decay,W.castShadow){const b0=W.shadow,t0=t.get(W);t0.shadowIntensity=b0.intensity,t0.shadowBias=b0.bias,t0.shadowNormalBias=b0.normalBias,t0.shadowRadius=b0.radius,t0.shadowMapSize=b0.mapSize,t0.shadowCameraNear=b0.camera.near,t0.shadowCameraFar=b0.camera.far,n.pointShadow[b]=t0,n.pointShadowMap[b]=u0,n.pointShadowMatrix[b]=W.shadow.matrix,M++}n.point[b]=n0,b++}else if(W.isHemisphereLight){const n0=e.get(W);n0.skyColor.copy(W.color).multiplyScalar(Q),n0.groundColor.copy(W.groundColor).multiplyScalar(Q),n.hemi[f]=n0,f++}}m>0&&(i.has("OES_texture_float_linear")===!0?(n.rectAreaLTC1=N0.LTC_FLOAT_1,n.rectAreaLTC2=N0.LTC_FLOAT_2):(n.rectAreaLTC1=N0.LTC_HALF_1,n.rectAreaLTC2=N0.LTC_HALF_2)),n.ambient[0]=c,n.ambient[1]=u,n.ambient[2]=p;const G=n.hash;(G.directionalLength!==h||G.pointLength!==b||G.spotLength!==T||G.rectAreaLength!==m||G.hemiLength!==f||G.numDirectionalShadows!==N||G.numPointShadows!==M||G.numSpotShadows!==P||G.numSpotMaps!==V||G.numLightProbes!==D)&&(n.directional.length=h,n.spot.length=T,n.rectArea.length=m,n.point.length=b,n.hemi.length=f,n.directionalShadow.length=N,n.directionalShadowMap.length=N,n.pointShadow.length=M,n.pointShadowMap.length=M,n.spotShadow.length=P,n.spotShadowMap.length=P,n.directionalShadowMatrix.length=N,n.pointShadowMatrix.length=M,n.spotLightMatrix.length=P+V-C,n.spotLightMap.length=V,n.numSpotLightShadowsWithMaps=C,n.numLightProbes=D,G.directionalLength=h,G.pointLength=b,G.spotLength=T,G.rectAreaLength=m,G.hemiLength=f,G.numDirectionalShadows=N,G.numPointShadows=M,G.numSpotShadows=P,G.numSpotMaps=V,G.numLightProbes=D,n.version=Yh++)}function l(d,c){let u=0,p=0,h=0,b=0,T=0;const m=c.matrixWorldInverse;for(let f=0,N=d.length;f<N;f++){const M=d[f];if(M.isDirectionalLight){const P=n.directional[u];P.direction.setFromMatrixPosition(M.matrixWorld),s.setFromMatrixPosition(M.target.matrixWorld),P.direction.sub(s),P.direction.transformDirection(m),u++}else if(M.isSpotLight){const P=n.spot[h];P.position.setFromMatrixPosition(M.matrixWorld),P.position.applyMatrix4(m),P.direction.setFromMatrixPosition(M.matrixWorld),s.setFromMatrixPosition(M.target.matrixWorld),P.direction.sub(s),P.direction.transformDirection(m),h++}else if(M.isRectAreaLight){const P=n.rectArea[b];P.position.setFromMatrixPosition(M.matrixWorld),P.position.applyMatrix4(m),a.identity(),r.copy(M.matrixWorld),r.premultiply(m),a.extractRotation(r),P.halfWidth.set(M.width*.5,0,0),P.halfHeight.set(0,M.height*.5,0),P.halfWidth.applyMatrix4(a),P.halfHeight.applyMatrix4(a),b++}else if(M.isPointLight){const P=n.point[p];P.position.setFromMatrixPosition(M.matrixWorld),P.position.applyMatrix4(m),p++}else if(M.isHemisphereLight){const P=n.hemi[T];P.direction.setFromMatrixPosition(M.matrixWorld),P.direction.transformDirection(m),T++}}}return{setup:o,setupView:l,state:n}}function F9(i){const e=new Jh(i),t=[],n=[];function s(c){d.camera=c,t.length=0,n.length=0}function r(c){t.push(c)}function a(c){n.push(c)}function o(){e.setup(t)}function l(c){e.setupView(t,c)}const d={lightsArray:t,shadowsArray:n,camera:null,lights:e,transmissionRenderTarget:{}};return{init:s,state:d,setupLights:o,setupLightsView:l,pushLight:r,pushShadow:a}}function Kh(i){let e=new WeakMap;function t(s,r=0){const a=e.get(s);let o;return a===void 0?(o=new F9(i),e.set(s,[o])):r>=a.length?(o=new F9(i),a.push(o)):o=a[r],o}function n(){e=new WeakMap}return{get:t,dispose:n}}const Bh=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,Qh=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function _h(i,e,t){let n=new Qo;const s=new ee,r=new ee,a=new He,o=new kd({depthPacking:Xl}),l=new Jd,d={},c=t.maxTextureSize,u={[Zn]:Wt,[Wt]:Zn,[wn]:wn},p=new fi({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new ee},radius:{value:4}},vertexShader:Bh,fragmentShader:Qh}),h=p.clone();h.defines.HORIZONTAL_PASS=1;const b=new Mt;b.setAttribute("position",new At(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const T=new Be(b,p),m=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=v4;let f=this.type;this.render=function(C,D,G){if(m.enabled===!1||m.autoUpdate===!1&&m.needsUpdate===!1||C.length===0)return;const L=i.getRenderTarget(),H=i.getActiveCubeFace(),W=i.getActiveMipmapLevel(),B=i.state;B.setBlending(ui),B.buffers.color.setClear(1,1,1,1),B.buffers.depth.setTest(!0),B.setScissorTest(!1);const Q=f!==bn&&this.type===bn,e0=f===bn&&this.type!==bn;for(let u0=0,n0=C.length;u0<n0;u0++){const b0=C[u0],t0=b0.shadow;if(t0===void 0){console.warn("THREE.WebGLShadowMap:",b0,"has no shadow.");continue}if(t0.autoUpdate===!1&&t0.needsUpdate===!1)continue;s.copy(t0.mapSize);const x0=t0.getFrameExtents();if(s.multiply(x0),r.copy(t0.mapSize),(s.x>c||s.y>c)&&(s.x>c&&(r.x=Math.floor(c/x0.x),s.x=r.x*x0.x,t0.mapSize.x=r.x),s.y>c&&(r.y=Math.floor(c/x0.y),s.y=r.y*x0.y,t0.mapSize.y=r.y)),t0.map===null||Q===!0||e0===!0){const V0=this.type!==bn?{minFilter:Xt,magFilter:Xt}:{};t0.map!==null&&t0.map.dispose(),t0.map=new Ei(s.x,s.y,V0),t0.map.texture.name=b0.name+".shadowMap",t0.camera.updateProjectionMatrix()}i.setRenderTarget(t0.map),i.clear();const R0=t0.getViewportCount();for(let V0=0;V0<R0;V0++){const B0=t0.getViewport(V0);a.set(r.x*B0.x,r.y*B0.y,r.x*B0.z,r.y*B0.w),B.viewport(a),t0.updateMatrices(b0,V0),n=t0.getFrustum(),P(D,G,t0.camera,b0,this.type)}t0.isPointLightShadow!==!0&&this.type===bn&&N(t0,G),t0.needsUpdate=!1}f=this.type,m.needsUpdate=!1,i.setRenderTarget(L,H,W)};function N(C,D){const G=e.update(T);p.defines.VSM_SAMPLES!==C.blurSamples&&(p.defines.VSM_SAMPLES=C.blurSamples,h.defines.VSM_SAMPLES=C.blurSamples,p.needsUpdate=!0,h.needsUpdate=!0),C.mapPass===null&&(C.mapPass=new Ei(s.x,s.y)),p.uniforms.shadow_pass.value=C.map.texture,p.uniforms.resolution.value=C.mapSize,p.uniforms.radius.value=C.radius,i.setRenderTarget(C.mapPass),i.clear(),i.renderBufferDirect(D,null,G,p,T,null),h.uniforms.shadow_pass.value=C.mapPass.texture,h.uniforms.resolution.value=C.mapSize,h.uniforms.radius.value=C.radius,i.setRenderTarget(C.map),i.clear(),i.renderBufferDirect(D,null,G,h,T,null)}function M(C,D,G,L){let H=null;const W=G.isPointLight===!0?C.customDistanceMaterial:C.customDepthMaterial;if(W!==void 0)H=W;else if(H=G.isPointLight===!0?l:o,i.localClippingEnabled&&D.clipShadows===!0&&Array.isArray(D.clippingPlanes)&&D.clippingPlanes.length!==0||D.displacementMap&&D.displacementScale!==0||D.alphaMap&&D.alphaTest>0||D.map&&D.alphaTest>0||D.alphaToCoverage===!0){const B=H.uuid,Q=D.uuid;let e0=d[B];e0===void 0&&(e0={},d[B]=e0);let u0=e0[Q];u0===void 0&&(u0=H.clone(),e0[Q]=u0,D.addEventListener("dispose",V)),H=u0}if(H.visible=D.visible,H.wireframe=D.wireframe,L===bn?H.side=D.shadowSide!==null?D.shadowSide:D.side:H.side=D.shadowSide!==null?D.shadowSide:u[D.side],H.alphaMap=D.alphaMap,H.alphaTest=D.alphaToCoverage===!0?.5:D.alphaTest,H.map=D.map,H.clipShadows=D.clipShadows,H.clippingPlanes=D.clippingPlanes,H.clipIntersection=D.clipIntersection,H.displacementMap=D.displacementMap,H.displacementScale=D.displacementScale,H.displacementBias=D.displacementBias,H.wireframeLinewidth=D.wireframeLinewidth,H.linewidth=D.linewidth,G.isPointLight===!0&&H.isMeshDistanceMaterial===!0){const B=i.properties.get(H);B.light=G}return H}function P(C,D,G,L,H){if(C.visible===!1)return;if(C.layers.test(D.layers)&&(C.isMesh||C.isLine||C.isPoints)&&(C.castShadow||C.receiveShadow&&H===bn)&&(!C.frustumCulled||n.intersectsObject(C))){C.modelViewMatrix.multiplyMatrices(G.matrixWorldInverse,C.matrixWorld);const Q=e.update(C),e0=C.material;if(Array.isArray(e0)){const u0=Q.groups;for(let n0=0,b0=u0.length;n0<b0;n0++){const t0=u0[n0],x0=e0[t0.materialIndex];if(x0&&x0.visible){const R0=M(C,x0,L,H);C.onBeforeShadow(i,C,D,G,Q,R0,t0),i.renderBufferDirect(G,null,Q,R0,C,t0),C.onAfterShadow(i,C,D,G,Q,R0,t0)}}}else if(e0.visible){const u0=M(C,e0,L,H);C.onBeforeShadow(i,C,D,G,Q,u0,null),i.renderBufferDirect(G,null,Q,u0,C,null),C.onAfterShadow(i,C,D,G,Q,u0,null)}}const B=C.children;for(let Q=0,e0=B.length;Q<e0;Q++)P(B[Q],D,G,L,H)}function V(C){C.target.removeEventListener("dispose",V);for(const G in d){const L=d[G],H=C.target.uuid;H in L&&(L[H].dispose(),delete L[H])}}}const $h={[ca]:ua,[pa]:ma,[fa]:ya,[T1]:ha,[ua]:ca,[ma]:pa,[ya]:fa,[ha]:T1};function em(i,e){function t(){let q=!1;const _=new He;let h0=null;const O0=new He(0,0,0,0);return{setMask:function(y0){h0!==y0&&!q&&(i.colorMask(y0,y0,y0,y0),h0=y0)},setLocked:function(y0){q=y0},setClear:function(y0,d0,X0,ne,Ve){Ve===!0&&(y0*=ne,d0*=ne,X0*=ne),_.set(y0,d0,X0,ne),O0.equals(_)===!1&&(i.clearColor(y0,d0,X0,ne),O0.copy(_))},reset:function(){q=!1,h0=null,O0.set(-1,0,0,0)}}}function n(){let q=!1,_=!1,h0=null,O0=null,y0=null;return{setReversed:function(d0){if(_!==d0){const X0=e.get("EXT_clip_control");d0?X0.clipControlEXT(X0.LOWER_LEFT_EXT,X0.ZERO_TO_ONE_EXT):X0.clipControlEXT(X0.LOWER_LEFT_EXT,X0.NEGATIVE_ONE_TO_ONE_EXT),_=d0;const ne=y0;y0=null,this.setClear(ne)}},getReversed:function(){return _},setTest:function(d0){d0?S0(i.DEPTH_TEST):I0(i.DEPTH_TEST)},setMask:function(d0){h0!==d0&&!q&&(i.depthMask(d0),h0=d0)},setFunc:function(d0){if(_&&(d0=$h[d0]),O0!==d0){switch(d0){case ca:i.depthFunc(i.NEVER);break;case ua:i.depthFunc(i.ALWAYS);break;case pa:i.depthFunc(i.LESS);break;case T1:i.depthFunc(i.LEQUAL);break;case fa:i.depthFunc(i.EQUAL);break;case ha:i.depthFunc(i.GEQUAL);break;case ma:i.depthFunc(i.GREATER);break;case ya:i.depthFunc(i.NOTEQUAL);break;default:i.depthFunc(i.LEQUAL)}O0=d0}},setLocked:function(d0){q=d0},setClear:function(d0){y0!==d0&&(_&&(d0=1-d0),i.clearDepth(d0),y0=d0)},reset:function(){q=!1,h0=null,O0=null,y0=null,_=!1}}}function s(){let q=!1,_=null,h0=null,O0=null,y0=null,d0=null,X0=null,ne=null,Ve=null;return{setTest:function(Pe){q||(Pe?S0(i.STENCIL_TEST):I0(i.STENCIL_TEST))},setMask:function(Pe){_!==Pe&&!q&&(i.stencilMask(Pe),_=Pe)},setFunc:function(Pe,Ut,tn){(h0!==Pe||O0!==Ut||y0!==tn)&&(i.stencilFunc(Pe,Ut,tn),h0=Pe,O0=Ut,y0=tn)},setOp:function(Pe,Ut,tn){(d0!==Pe||X0!==Ut||ne!==tn)&&(i.stencilOp(Pe,Ut,tn),d0=Pe,X0=Ut,ne=tn)},setLocked:function(Pe){q=Pe},setClear:function(Pe){Ve!==Pe&&(i.clearStencil(Pe),Ve=Pe)},reset:function(){q=!1,_=null,h0=null,O0=null,y0=null,d0=null,X0=null,ne=null,Ve=null}}}const r=new t,a=new n,o=new s,l=new WeakMap,d=new WeakMap;let c={},u={},p=new WeakMap,h=[],b=null,T=!1,m=null,f=null,N=null,M=null,P=null,V=null,C=null,D=new te(0,0,0),G=0,L=!1,H=null,W=null,B=null,Q=null,e0=null;const u0=i.getParameter(i.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let n0=!1,b0=0;const t0=i.getParameter(i.VERSION);t0.indexOf("WebGL")!==-1?(b0=parseFloat(/^WebGL (\d)/.exec(t0)[1]),n0=b0>=1):t0.indexOf("OpenGL ES")!==-1&&(b0=parseFloat(/^OpenGL ES (\d)/.exec(t0)[1]),n0=b0>=2);let x0=null,R0={};const V0=i.getParameter(i.SCISSOR_BOX),B0=i.getParameter(i.VIEWPORT),ue=new He().fromArray(V0),s0=new He().fromArray(B0);function w0(q,_,h0,O0){const y0=new Uint8Array(4),d0=i.createTexture();i.bindTexture(q,d0),i.texParameteri(q,i.TEXTURE_MIN_FILTER,i.NEAREST),i.texParameteri(q,i.TEXTURE_MAG_FILTER,i.NEAREST);for(let X0=0;X0<h0;X0++)q===i.TEXTURE_3D||q===i.TEXTURE_2D_ARRAY?i.texImage3D(_,0,i.RGBA,1,1,O0,0,i.RGBA,i.UNSIGNED_BYTE,y0):i.texImage2D(_+X0,0,i.RGBA,1,1,0,i.RGBA,i.UNSIGNED_BYTE,y0);return d0}const T0={};T0[i.TEXTURE_2D]=w0(i.TEXTURE_2D,i.TEXTURE_2D,1),T0[i.TEXTURE_CUBE_MAP]=w0(i.TEXTURE_CUBE_MAP,i.TEXTURE_CUBE_MAP_POSITIVE_X,6),T0[i.TEXTURE_2D_ARRAY]=w0(i.TEXTURE_2D_ARRAY,i.TEXTURE_2D_ARRAY,1,1),T0[i.TEXTURE_3D]=w0(i.TEXTURE_3D,i.TEXTURE_3D,1,1),r.setClear(0,0,0,1),a.setClear(1),o.setClear(0),S0(i.DEPTH_TEST),a.setFunc(T1),we(!1),ze(b7),S0(i.CULL_FACE),j(ui);function S0(q){c[q]!==!0&&(i.enable(q),c[q]=!0)}function I0(q){c[q]!==!1&&(i.disable(q),c[q]=!1)}function me(q,_){return u[q]!==_?(i.bindFramebuffer(q,_),u[q]=_,q===i.DRAW_FRAMEBUFFER&&(u[i.FRAMEBUFFER]=_),q===i.FRAMEBUFFER&&(u[i.DRAW_FRAMEBUFFER]=_),!0):!1}function Z0(q,_){let h0=h,O0=!1;if(q){h0=p.get(_),h0===void 0&&(h0=[],p.set(_,h0));const y0=q.textures;if(h0.length!==y0.length||h0[0]!==i.COLOR_ATTACHMENT0){for(let d0=0,X0=y0.length;d0<X0;d0++)h0[d0]=i.COLOR_ATTACHMENT0+d0;h0.length=y0.length,O0=!0}}else h0[0]!==i.BACK&&(h0[0]=i.BACK,O0=!0);O0&&i.drawBuffers(h0)}function Le(q){return b!==q?(i.useProgram(q),b=q,!0):!1}const Oe={[Ri]:i.FUNC_ADD,[rl]:i.FUNC_SUBTRACT,[al]:i.FUNC_REVERSE_SUBTRACT};Oe[ol]=i.MIN,Oe[ll]=i.MAX;const fe={[dl]:i.ZERO,[cl]:i.ONE,[ul]:i.SRC_COLOR,[la]:i.SRC_ALPHA,[bl]:i.SRC_ALPHA_SATURATE,[ml]:i.DST_COLOR,[fl]:i.DST_ALPHA,[pl]:i.ONE_MINUS_SRC_COLOR,[da]:i.ONE_MINUS_SRC_ALPHA,[yl]:i.ONE_MINUS_DST_COLOR,[hl]:i.ONE_MINUS_DST_ALPHA,[vl]:i.CONSTANT_COLOR,[gl]:i.ONE_MINUS_CONSTANT_COLOR,[wl]:i.CONSTANT_ALPHA,[Tl]:i.ONE_MINUS_CONSTANT_ALPHA};function j(q,_,h0,O0,y0,d0,X0,ne,Ve,Pe){if(q===ui){T===!0&&(I0(i.BLEND),T=!1);return}if(T===!1&&(S0(i.BLEND),T=!0),q!==sl){if(q!==m||Pe!==L){if((f!==Ri||P!==Ri)&&(i.blendEquation(i.FUNC_ADD),f=Ri,P=Ri),Pe)switch(q){case y1:i.blendFuncSeparate(i.ONE,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE_MINUS_SRC_ALPHA);break;case v7:i.blendFunc(i.ONE,i.ONE);break;case g7:i.blendFuncSeparate(i.ZERO,i.ONE_MINUS_SRC_COLOR,i.ZERO,i.ONE);break;case w7:i.blendFuncSeparate(i.DST_COLOR,i.ONE_MINUS_SRC_ALPHA,i.ZERO,i.ONE);break;default:console.error("THREE.WebGLState: Invalid blending: ",q);break}else switch(q){case y1:i.blendFuncSeparate(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE_MINUS_SRC_ALPHA);break;case v7:i.blendFuncSeparate(i.SRC_ALPHA,i.ONE,i.ONE,i.ONE);break;case g7:console.error("THREE.WebGLState: SubtractiveBlending requires material.premultipliedAlpha = true");break;case w7:console.error("THREE.WebGLState: MultiplyBlending requires material.premultipliedAlpha = true");break;default:console.error("THREE.WebGLState: Invalid blending: ",q);break}N=null,M=null,V=null,C=null,D.set(0,0,0),G=0,m=q,L=Pe}return}y0=y0||_,d0=d0||h0,X0=X0||O0,(_!==f||y0!==P)&&(i.blendEquationSeparate(Oe[_],Oe[y0]),f=_,P=y0),(h0!==N||O0!==M||d0!==V||X0!==C)&&(i.blendFuncSeparate(fe[h0],fe[O0],fe[d0],fe[X0]),N=h0,M=O0,V=d0,C=X0),(ne.equals(D)===!1||Ve!==G)&&(i.blendColor(ne.r,ne.g,ne.b,Ve),D.copy(ne),G=Ve),m=q,L=!1}function dt(q,_){q.side===wn?I0(i.CULL_FACE):S0(i.CULL_FACE);let h0=q.side===Wt;_&&(h0=!h0),we(h0),q.blending===y1&&q.transparent===!1?j(ui):j(q.blending,q.blendEquation,q.blendSrc,q.blendDst,q.blendEquationAlpha,q.blendSrcAlpha,q.blendDstAlpha,q.blendColor,q.blendAlpha,q.premultipliedAlpha),a.setFunc(q.depthFunc),a.setTest(q.depthTest),a.setMask(q.depthWrite),r.setMask(q.colorWrite);const O0=q.stencilWrite;o.setTest(O0),O0&&(o.setMask(q.stencilWriteMask),o.setFunc(q.stencilFunc,q.stencilRef,q.stencilFuncMask),o.setOp(q.stencilFail,q.stencilZFail,q.stencilZPass)),ve(q.polygonOffset,q.polygonOffsetFactor,q.polygonOffsetUnits),q.alphaToCoverage===!0?S0(i.SAMPLE_ALPHA_TO_COVERAGE):I0(i.SAMPLE_ALPHA_TO_COVERAGE)}function we(q){H!==q&&(q?i.frontFace(i.CW):i.frontFace(i.CCW),H=q)}function ze(q){q!==tl?(S0(i.CULL_FACE),q!==W&&(q===b7?i.cullFace(i.BACK):q===nl?i.cullFace(i.FRONT):i.cullFace(i.FRONT_AND_BACK))):I0(i.CULL_FACE),W=q}function D0(q){q!==B&&(n0&&i.lineWidth(q),B=q)}function ve(q,_,h0){q?(S0(i.POLYGON_OFFSET_FILL),(Q!==_||e0!==h0)&&(i.polygonOffset(_,h0),Q=_,e0=h0)):I0(i.POLYGON_OFFSET_FILL)}function G0(q){q?S0(i.SCISSOR_TEST):I0(i.SCISSOR_TEST)}function ie(q){q===void 0&&(q=i.TEXTURE0+u0-1),x0!==q&&(i.activeTexture(q),x0=q)}function Qe(q,_,h0){h0===void 0&&(x0===null?h0=i.TEXTURE0+u0-1:h0=x0);let O0=R0[h0];O0===void 0&&(O0={type:void 0,texture:void 0},R0[h0]=O0),(O0.type!==q||O0.texture!==_)&&(x0!==h0&&(i.activeTexture(h0),x0=h0),i.bindTexture(q,_||T0[q]),O0.type=q,O0.texture=_)}function I(){const q=R0[x0];q!==void 0&&q.type!==void 0&&(i.bindTexture(q.type,null),q.type=void 0,q.texture=void 0)}function S(){try{i.compressedTexImage2D(...arguments)}catch(q){console.error("THREE.WebGLState:",q)}}function K(){try{i.compressedTexImage3D(...arguments)}catch(q){console.error("THREE.WebGLState:",q)}}function r0(){try{i.texSubImage2D(...arguments)}catch(q){console.error("THREE.WebGLState:",q)}}function p0(){try{i.texSubImage3D(...arguments)}catch(q){console.error("THREE.WebGLState:",q)}}function i0(){try{i.compressedTexSubImage2D(...arguments)}catch(q){console.error("THREE.WebGLState:",q)}}function A0(){try{i.compressedTexSubImage3D(...arguments)}catch(q){console.error("THREE.WebGLState:",q)}}function H0(){try{i.texStorage2D(...arguments)}catch(q){console.error("THREE.WebGLState:",q)}}function C0(){try{i.texStorage3D(...arguments)}catch(q){console.error("THREE.WebGLState:",q)}}function W0(){try{i.texImage2D(...arguments)}catch(q){console.error("THREE.WebGLState:",q)}}function l0(){try{i.texImage3D(...arguments)}catch(q){console.error("THREE.WebGLState:",q)}}function P0(q){ue.equals(q)===!1&&(i.scissor(q.x,q.y,q.z,q.w),ue.copy(q))}function Y0(q){s0.equals(q)===!1&&(i.viewport(q.x,q.y,q.z,q.w),s0.copy(q))}function j0(q,_){let h0=d.get(_);h0===void 0&&(h0=new WeakMap,d.set(_,h0));let O0=h0.get(q);O0===void 0&&(O0=i.getUniformBlockIndex(_,q.name),h0.set(q,O0))}function v0(q,_){const O0=d.get(_).get(q);l.get(_)!==O0&&(i.uniformBlockBinding(_,O0,q.__bindingPointIndex),l.set(_,O0))}function F0(){i.disable(i.BLEND),i.disable(i.CULL_FACE),i.disable(i.DEPTH_TEST),i.disable(i.POLYGON_OFFSET_FILL),i.disable(i.SCISSOR_TEST),i.disable(i.STENCIL_TEST),i.disable(i.SAMPLE_ALPHA_TO_COVERAGE),i.blendEquation(i.FUNC_ADD),i.blendFunc(i.ONE,i.ZERO),i.blendFuncSeparate(i.ONE,i.ZERO,i.ONE,i.ZERO),i.blendColor(0,0,0,0),i.colorMask(!0,!0,!0,!0),i.clearColor(0,0,0,0),i.depthMask(!0),i.depthFunc(i.LESS),a.setReversed(!1),i.clearDepth(1),i.stencilMask(4294967295),i.stencilFunc(i.ALWAYS,0,4294967295),i.stencilOp(i.KEEP,i.KEEP,i.KEEP),i.clearStencil(0),i.cullFace(i.BACK),i.frontFace(i.CCW),i.polygonOffset(0,0),i.activeTexture(i.TEXTURE0),i.bindFramebuffer(i.FRAMEBUFFER,null),i.bindFramebuffer(i.DRAW_FRAMEBUFFER,null),i.bindFramebuffer(i.READ_FRAMEBUFFER,null),i.useProgram(null),i.lineWidth(1),i.scissor(0,0,i.canvas.width,i.canvas.height),i.viewport(0,0,i.canvas.width,i.canvas.height),c={},x0=null,R0={},u={},p=new WeakMap,h=[],b=null,T=!1,m=null,f=null,N=null,M=null,P=null,V=null,C=null,D=new te(0,0,0),G=0,L=!1,H=null,W=null,B=null,Q=null,e0=null,ue.set(0,0,i.canvas.width,i.canvas.height),s0.set(0,0,i.canvas.width,i.canvas.height),r.reset(),a.reset(),o.reset()}return{buffers:{color:r,depth:a,stencil:o},enable:S0,disable:I0,bindFramebuffer:me,drawBuffers:Z0,useProgram:Le,setBlending:j,setMaterial:dt,setFlipSided:we,setCullFace:ze,setLineWidth:D0,setPolygonOffset:ve,setScissorTest:G0,activeTexture:ie,bindTexture:Qe,unbindTexture:I,compressedTexImage2D:S,compressedTexImage3D:K,texImage2D:W0,texImage3D:l0,updateUBOMapping:j0,uniformBlockBinding:v0,texStorage2D:H0,texStorage3D:C0,texSubImage2D:r0,texSubImage3D:p0,compressedTexSubImage2D:i0,compressedTexSubImage3D:A0,scissor:P0,viewport:Y0,reset:F0}}function tm(i,e,t,n,s,r,a){const o=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,l=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),d=new ee,c=new WeakMap;let u;const p=new WeakMap;let h=!1;try{h=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function b(I,S){return h?new OffscreenCanvas(I,S):ys("canvas")}function T(I,S,K){let r0=1;const p0=Qe(I);if((p0.width>K||p0.height>K)&&(r0=K/Math.max(p0.width,p0.height)),r0<1)if(typeof HTMLImageElement<"u"&&I instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&I instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&I instanceof ImageBitmap||typeof VideoFrame<"u"&&I instanceof VideoFrame){const i0=Math.floor(r0*p0.width),A0=Math.floor(r0*p0.height);u===void 0&&(u=b(i0,A0));const H0=S?b(i0,A0):u;return H0.width=i0,H0.height=A0,H0.getContext("2d").drawImage(I,0,0,i0,A0),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+p0.width+"x"+p0.height+") to ("+i0+"x"+A0+")."),H0}else return"data"in I&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+p0.width+"x"+p0.height+")."),I;return I}function m(I){return I.generateMipmaps}function f(I){i.generateMipmap(I)}function N(I){return I.isWebGLCubeRenderTarget?i.TEXTURE_CUBE_MAP:I.isWebGL3DRenderTarget?i.TEXTURE_3D:I.isWebGLArrayRenderTarget||I.isCompressedArrayTexture?i.TEXTURE_2D_ARRAY:i.TEXTURE_2D}function M(I,S,K,r0,p0=!1){if(I!==null){if(i[I]!==void 0)return i[I];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+I+"'")}let i0=S;if(S===i.RED&&(K===i.FLOAT&&(i0=i.R32F),K===i.HALF_FLOAT&&(i0=i.R16F),K===i.UNSIGNED_BYTE&&(i0=i.R8)),S===i.RED_INTEGER&&(K===i.UNSIGNED_BYTE&&(i0=i.R8UI),K===i.UNSIGNED_SHORT&&(i0=i.R16UI),K===i.UNSIGNED_INT&&(i0=i.R32UI),K===i.BYTE&&(i0=i.R8I),K===i.SHORT&&(i0=i.R16I),K===i.INT&&(i0=i.R32I)),S===i.RG&&(K===i.FLOAT&&(i0=i.RG32F),K===i.HALF_FLOAT&&(i0=i.RG16F),K===i.UNSIGNED_BYTE&&(i0=i.RG8)),S===i.RG_INTEGER&&(K===i.UNSIGNED_BYTE&&(i0=i.RG8UI),K===i.UNSIGNED_SHORT&&(i0=i.RG16UI),K===i.UNSIGNED_INT&&(i0=i.RG32UI),K===i.BYTE&&(i0=i.RG8I),K===i.SHORT&&(i0=i.RG16I),K===i.INT&&(i0=i.RG32I)),S===i.RGB_INTEGER&&(K===i.UNSIGNED_BYTE&&(i0=i.RGB8UI),K===i.UNSIGNED_SHORT&&(i0=i.RGB16UI),K===i.UNSIGNED_INT&&(i0=i.RGB32UI),K===i.BYTE&&(i0=i.RGB8I),K===i.SHORT&&(i0=i.RGB16I),K===i.INT&&(i0=i.RGB32I)),S===i.RGBA_INTEGER&&(K===i.UNSIGNED_BYTE&&(i0=i.RGBA8UI),K===i.UNSIGNED_SHORT&&(i0=i.RGBA16UI),K===i.UNSIGNED_INT&&(i0=i.RGBA32UI),K===i.BYTE&&(i0=i.RGBA8I),K===i.SHORT&&(i0=i.RGBA16I),K===i.INT&&(i0=i.RGBA32I)),S===i.RGB&&K===i.UNSIGNED_INT_5_9_9_9_REV&&(i0=i.RGB9_E5),S===i.RGBA){const A0=p0?qr:ge.getTransfer(r0);K===i.FLOAT&&(i0=i.RGBA32F),K===i.HALF_FLOAT&&(i0=i.RGBA16F),K===i.UNSIGNED_BYTE&&(i0=A0===Ae?i.SRGB8_ALPHA8:i.RGBA8),K===i.UNSIGNED_SHORT_4_4_4_4&&(i0=i.RGBA4),K===i.UNSIGNED_SHORT_5_5_5_1&&(i0=i.RGB5_A1)}return(i0===i.R16F||i0===i.R32F||i0===i.RG16F||i0===i.RG32F||i0===i.RGBA16F||i0===i.RGBA32F)&&e.get("EXT_color_buffer_float"),i0}function P(I,S){let K;return I?S===null||S===Mi||S===us?K=i.DEPTH24_STENCIL8:S===jt?K=i.DEPTH32F_STENCIL8:S===cs&&(K=i.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):S===null||S===Mi||S===us?K=i.DEPTH_COMPONENT24:S===jt?K=i.DEPTH_COMPONENT32F:S===cs&&(K=i.DEPTH_COMPONENT16),K}function V(I,S){return m(I)===!0||I.isFramebufferTexture&&I.minFilter!==Xt&&I.minFilter!==vt?Math.log2(Math.max(S.width,S.height))+1:I.mipmaps!==void 0&&I.mipmaps.length>0?I.mipmaps.length:I.isCompressedTexture&&Array.isArray(I.image)?S.mipmaps.length:1}function C(I){const S=I.target;S.removeEventListener("dispose",C),G(S),S.isVideoTexture&&c.delete(S)}function D(I){const S=I.target;S.removeEventListener("dispose",D),H(S)}function G(I){const S=n.get(I);if(S.__webglInit===void 0)return;const K=I.source,r0=p.get(K);if(r0){const p0=r0[S.__cacheKey];p0.usedTimes--,p0.usedTimes===0&&L(I),Object.keys(r0).length===0&&p.delete(K)}n.remove(I)}function L(I){const S=n.get(I);i.deleteTexture(S.__webglTexture);const K=I.source,r0=p.get(K);delete r0[S.__cacheKey],a.memory.textures--}function H(I){const S=n.get(I);if(I.depthTexture&&(I.depthTexture.dispose(),n.remove(I.depthTexture)),I.isWebGLCubeRenderTarget)for(let r0=0;r0<6;r0++){if(Array.isArray(S.__webglFramebuffer[r0]))for(let p0=0;p0<S.__webglFramebuffer[r0].length;p0++)i.deleteFramebuffer(S.__webglFramebuffer[r0][p0]);else i.deleteFramebuffer(S.__webglFramebuffer[r0]);S.__webglDepthbuffer&&i.deleteRenderbuffer(S.__webglDepthbuffer[r0])}else{if(Array.isArray(S.__webglFramebuffer))for(let r0=0;r0<S.__webglFramebuffer.length;r0++)i.deleteFramebuffer(S.__webglFramebuffer[r0]);else i.deleteFramebuffer(S.__webglFramebuffer);if(S.__webglDepthbuffer&&i.deleteRenderbuffer(S.__webglDepthbuffer),S.__webglMultisampledFramebuffer&&i.deleteFramebuffer(S.__webglMultisampledFramebuffer),S.__webglColorRenderbuffer)for(let r0=0;r0<S.__webglColorRenderbuffer.length;r0++)S.__webglColorRenderbuffer[r0]&&i.deleteRenderbuffer(S.__webglColorRenderbuffer[r0]);S.__webglDepthRenderbuffer&&i.deleteRenderbuffer(S.__webglDepthRenderbuffer)}const K=I.textures;for(let r0=0,p0=K.length;r0<p0;r0++){const i0=n.get(K[r0]);i0.__webglTexture&&(i.deleteTexture(i0.__webglTexture),a.memory.textures--),n.remove(K[r0])}n.remove(I)}let W=0;function B(){W=0}function Q(){const I=W;return I>=s.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+I+" texture units while this GPU supports only "+s.maxTextures),W+=1,I}function e0(I){const S=[];return S.push(I.wrapS),S.push(I.wrapT),S.push(I.wrapR||0),S.push(I.magFilter),S.push(I.minFilter),S.push(I.anisotropy),S.push(I.internalFormat),S.push(I.format),S.push(I.type),S.push(I.generateMipmaps),S.push(I.premultiplyAlpha),S.push(I.flipY),S.push(I.unpackAlignment),S.push(I.colorSpace),S.join()}function u0(I,S){const K=n.get(I);if(I.isVideoTexture&&G0(I),I.isRenderTargetTexture===!1&&I.version>0&&K.__version!==I.version){const r0=I.image;if(r0===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(r0.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{T0(K,I,S);return}}t.bindTexture(i.TEXTURE_2D,K.__webglTexture,i.TEXTURE0+S)}function n0(I,S){const K=n.get(I);if(I.version>0&&K.__version!==I.version){T0(K,I,S);return}t.bindTexture(i.TEXTURE_2D_ARRAY,K.__webglTexture,i.TEXTURE0+S)}function b0(I,S){const K=n.get(I);if(I.version>0&&K.__version!==I.version){T0(K,I,S);return}t.bindTexture(i.TEXTURE_3D,K.__webglTexture,i.TEXTURE0+S)}function t0(I,S){const K=n.get(I);if(I.version>0&&K.__version!==I.version){S0(K,I,S);return}t.bindTexture(i.TEXTURE_CUBE_MAP,K.__webglTexture,i.TEXTURE0+S)}const x0={[P1]:i.REPEAT,[Tn]:i.CLAMP_TO_EDGE,[Ur]:i.MIRRORED_REPEAT},R0={[Xt]:i.NEAREST,[T4]:i.NEAREST_MIPMAP_NEAREST,[is]:i.NEAREST_MIPMAP_LINEAR,[vt]:i.LINEAR,[zr]:i.LINEAR_MIPMAP_NEAREST,[xn]:i.LINEAR_MIPMAP_LINEAR},V0={[Cl]:i.NEVER,[Ul]:i.ALWAYS,[Fl]:i.LESS,[E4]:i.LEQUAL,[Vl]:i.EQUAL,[Wl]:i.GEQUAL,[Dl]:i.GREATER,[jl]:i.NOTEQUAL};function B0(I,S){if(S.type===jt&&e.has("OES_texture_float_linear")===!1&&(S.magFilter===vt||S.magFilter===zr||S.magFilter===is||S.magFilter===xn||S.minFilter===vt||S.minFilter===zr||S.minFilter===is||S.minFilter===xn)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),i.texParameteri(I,i.TEXTURE_WRAP_S,x0[S.wrapS]),i.texParameteri(I,i.TEXTURE_WRAP_T,x0[S.wrapT]),(I===i.TEXTURE_3D||I===i.TEXTURE_2D_ARRAY)&&i.texParameteri(I,i.TEXTURE_WRAP_R,x0[S.wrapR]),i.texParameteri(I,i.TEXTURE_MAG_FILTER,R0[S.magFilter]),i.texParameteri(I,i.TEXTURE_MIN_FILTER,R0[S.minFilter]),S.compareFunction&&(i.texParameteri(I,i.TEXTURE_COMPARE_MODE,i.COMPARE_REF_TO_TEXTURE),i.texParameteri(I,i.TEXTURE_COMPARE_FUNC,V0[S.compareFunction])),e.has("EXT_texture_filter_anisotropic")===!0){if(S.magFilter===Xt||S.minFilter!==is&&S.minFilter!==xn||S.type===jt&&e.has("OES_texture_float_linear")===!1)return;if(S.anisotropy>1||n.get(S).__currentAnisotropy){const K=e.get("EXT_texture_filter_anisotropic");i.texParameterf(I,K.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(S.anisotropy,s.getMaxAnisotropy())),n.get(S).__currentAnisotropy=S.anisotropy}}}function ue(I,S){let K=!1;I.__webglInit===void 0&&(I.__webglInit=!0,S.addEventListener("dispose",C));const r0=S.source;let p0=p.get(r0);p0===void 0&&(p0={},p.set(r0,p0));const i0=e0(S);if(i0!==I.__cacheKey){p0[i0]===void 0&&(p0[i0]={texture:i.createTexture(),usedTimes:0},a.memory.textures++,K=!0),p0[i0].usedTimes++;const A0=p0[I.__cacheKey];A0!==void 0&&(p0[I.__cacheKey].usedTimes--,A0.usedTimes===0&&L(S)),I.__cacheKey=i0,I.__webglTexture=p0[i0].texture}return K}function s0(I,S,K){return Math.floor(Math.floor(I/K)/S)}function w0(I,S,K,r0){const i0=I.updateRanges;if(i0.length===0)t.texSubImage2D(i.TEXTURE_2D,0,0,0,S.width,S.height,K,r0,S.data);else{i0.sort((l0,P0)=>l0.start-P0.start);let A0=0;for(let l0=1;l0<i0.length;l0++){const P0=i0[A0],Y0=i0[l0],j0=P0.start+P0.count,v0=s0(Y0.start,S.width,4),F0=s0(P0.start,S.width,4);Y0.start<=j0+1&&v0===F0&&s0(Y0.start+Y0.count-1,S.width,4)===v0?P0.count=Math.max(P0.count,Y0.start+Y0.count-P0.start):(++A0,i0[A0]=Y0)}i0.length=A0+1;const H0=i.getParameter(i.UNPACK_ROW_LENGTH),C0=i.getParameter(i.UNPACK_SKIP_PIXELS),W0=i.getParameter(i.UNPACK_SKIP_ROWS);i.pixelStorei(i.UNPACK_ROW_LENGTH,S.width);for(let l0=0,P0=i0.length;l0<P0;l0++){const Y0=i0[l0],j0=Math.floor(Y0.start/4),v0=Math.ceil(Y0.count/4),F0=j0%S.width,q=Math.floor(j0/S.width),_=v0,h0=1;i.pixelStorei(i.UNPACK_SKIP_PIXELS,F0),i.pixelStorei(i.UNPACK_SKIP_ROWS,q),t.texSubImage2D(i.TEXTURE_2D,0,F0,q,_,h0,K,r0,S.data)}I.clearUpdateRanges(),i.pixelStorei(i.UNPACK_ROW_LENGTH,H0),i.pixelStorei(i.UNPACK_SKIP_PIXELS,C0),i.pixelStorei(i.UNPACK_SKIP_ROWS,W0)}}function T0(I,S,K){let r0=i.TEXTURE_2D;(S.isDataArrayTexture||S.isCompressedArrayTexture)&&(r0=i.TEXTURE_2D_ARRAY),S.isData3DTexture&&(r0=i.TEXTURE_3D);const p0=ue(I,S),i0=S.source;t.bindTexture(r0,I.__webglTexture,i.TEXTURE0+K);const A0=n.get(i0);if(i0.version!==A0.__version||p0===!0){t.activeTexture(i.TEXTURE0+K);const H0=ge.getPrimaries(ge.workingColorSpace),C0=S.colorSpace===Vn?null:ge.getPrimaries(S.colorSpace),W0=S.colorSpace===Vn||H0===C0?i.NONE:i.BROWSER_DEFAULT_WEBGL;i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,S.flipY),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,S.premultiplyAlpha),i.pixelStorei(i.UNPACK_ALIGNMENT,S.unpackAlignment),i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,W0);let l0=T(S.image,!1,s.maxTextureSize);l0=ie(S,l0);const P0=r.convert(S.format,S.colorSpace),Y0=r.convert(S.type);let j0=M(S.internalFormat,P0,Y0,S.colorSpace,S.isVideoTexture);B0(r0,S);let v0;const F0=S.mipmaps,q=S.isVideoTexture!==!0,_=A0.__version===void 0||p0===!0,h0=i0.dataReady,O0=V(S,l0);if(S.isDepthTexture)j0=P(S.format===fs,S.type),_&&(q?t.texStorage2D(i.TEXTURE_2D,1,j0,l0.width,l0.height):t.texImage2D(i.TEXTURE_2D,0,j0,l0.width,l0.height,0,P0,Y0,null));else if(S.isDataTexture)if(F0.length>0){q&&_&&t.texStorage2D(i.TEXTURE_2D,O0,j0,F0[0].width,F0[0].height);for(let y0=0,d0=F0.length;y0<d0;y0++)v0=F0[y0],q?h0&&t.texSubImage2D(i.TEXTURE_2D,y0,0,0,v0.width,v0.height,P0,Y0,v0.data):t.texImage2D(i.TEXTURE_2D,y0,j0,v0.width,v0.height,0,P0,Y0,v0.data);S.generateMipmaps=!1}else q?(_&&t.texStorage2D(i.TEXTURE_2D,O0,j0,l0.width,l0.height),h0&&w0(S,l0,P0,Y0)):t.texImage2D(i.TEXTURE_2D,0,j0,l0.width,l0.height,0,P0,Y0,l0.data);else if(S.isCompressedTexture)if(S.isCompressedArrayTexture){q&&_&&t.texStorage3D(i.TEXTURE_2D_ARRAY,O0,j0,F0[0].width,F0[0].height,l0.depth);for(let y0=0,d0=F0.length;y0<d0;y0++)if(v0=F0[y0],S.format!==Yt)if(P0!==null)if(q){if(h0)if(S.layerUpdates.size>0){const X0=h9(v0.width,v0.height,S.format,S.type);for(const ne of S.layerUpdates){const Ve=v0.data.subarray(ne*X0/v0.data.BYTES_PER_ELEMENT,(ne+1)*X0/v0.data.BYTES_PER_ELEMENT);t.compressedTexSubImage3D(i.TEXTURE_2D_ARRAY,y0,0,0,ne,v0.width,v0.height,1,P0,Ve)}S.clearLayerUpdates()}else t.compressedTexSubImage3D(i.TEXTURE_2D_ARRAY,y0,0,0,0,v0.width,v0.height,l0.depth,P0,v0.data)}else t.compressedTexImage3D(i.TEXTURE_2D_ARRAY,y0,j0,v0.width,v0.height,l0.depth,0,v0.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else q?h0&&t.texSubImage3D(i.TEXTURE_2D_ARRAY,y0,0,0,0,v0.width,v0.height,l0.depth,P0,Y0,v0.data):t.texImage3D(i.TEXTURE_2D_ARRAY,y0,j0,v0.width,v0.height,l0.depth,0,P0,Y0,v0.data)}else{q&&_&&t.texStorage2D(i.TEXTURE_2D,O0,j0,F0[0].width,F0[0].height);for(let y0=0,d0=F0.length;y0<d0;y0++)v0=F0[y0],S.format!==Yt?P0!==null?q?h0&&t.compressedTexSubImage2D(i.TEXTURE_2D,y0,0,0,v0.width,v0.height,P0,v0.data):t.compressedTexImage2D(i.TEXTURE_2D,y0,j0,v0.width,v0.height,0,v0.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):q?h0&&t.texSubImage2D(i.TEXTURE_2D,y0,0,0,v0.width,v0.height,P0,Y0,v0.data):t.texImage2D(i.TEXTURE_2D,y0,j0,v0.width,v0.height,0,P0,Y0,v0.data)}else if(S.isDataArrayTexture)if(q){if(_&&t.texStorage3D(i.TEXTURE_2D_ARRAY,O0,j0,l0.width,l0.height,l0.depth),h0)if(S.layerUpdates.size>0){const y0=h9(l0.width,l0.height,S.format,S.type);for(const d0 of S.layerUpdates){const X0=l0.data.subarray(d0*y0/l0.data.BYTES_PER_ELEMENT,(d0+1)*y0/l0.data.BYTES_PER_ELEMENT);t.texSubImage3D(i.TEXTURE_2D_ARRAY,0,0,0,d0,l0.width,l0.height,1,P0,Y0,X0)}S.clearLayerUpdates()}else t.texSubImage3D(i.TEXTURE_2D_ARRAY,0,0,0,0,l0.width,l0.height,l0.depth,P0,Y0,l0.data)}else t.texImage3D(i.TEXTURE_2D_ARRAY,0,j0,l0.width,l0.height,l0.depth,0,P0,Y0,l0.data);else if(S.isData3DTexture)q?(_&&t.texStorage3D(i.TEXTURE_3D,O0,j0,l0.width,l0.height,l0.depth),h0&&t.texSubImage3D(i.TEXTURE_3D,0,0,0,0,l0.width,l0.height,l0.depth,P0,Y0,l0.data)):t.texImage3D(i.TEXTURE_3D,0,j0,l0.width,l0.height,l0.depth,0,P0,Y0,l0.data);else if(S.isFramebufferTexture){if(_)if(q)t.texStorage2D(i.TEXTURE_2D,O0,j0,l0.width,l0.height);else{let y0=l0.width,d0=l0.height;for(let X0=0;X0<O0;X0++)t.texImage2D(i.TEXTURE_2D,X0,j0,y0,d0,0,P0,Y0,null),y0>>=1,d0>>=1}}else if(F0.length>0){if(q&&_){const y0=Qe(F0[0]);t.texStorage2D(i.TEXTURE_2D,O0,j0,y0.width,y0.height)}for(let y0=0,d0=F0.length;y0<d0;y0++)v0=F0[y0],q?h0&&t.texSubImage2D(i.TEXTURE_2D,y0,0,0,P0,Y0,v0):t.texImage2D(i.TEXTURE_2D,y0,j0,P0,Y0,v0);S.generateMipmaps=!1}else if(q){if(_){const y0=Qe(l0);t.texStorage2D(i.TEXTURE_2D,O0,j0,y0.width,y0.height)}h0&&t.texSubImage2D(i.TEXTURE_2D,0,0,0,P0,Y0,l0)}else t.texImage2D(i.TEXTURE_2D,0,j0,P0,Y0,l0);m(S)&&f(r0),A0.__version=i0.version,S.onUpdate&&S.onUpdate(S)}I.__version=S.version}function S0(I,S,K){if(S.image.length!==6)return;const r0=ue(I,S),p0=S.source;t.bindTexture(i.TEXTURE_CUBE_MAP,I.__webglTexture,i.TEXTURE0+K);const i0=n.get(p0);if(p0.version!==i0.__version||r0===!0){t.activeTexture(i.TEXTURE0+K);const A0=ge.getPrimaries(ge.workingColorSpace),H0=S.colorSpace===Vn?null:ge.getPrimaries(S.colorSpace),C0=S.colorSpace===Vn||A0===H0?i.NONE:i.BROWSER_DEFAULT_WEBGL;i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,S.flipY),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,S.premultiplyAlpha),i.pixelStorei(i.UNPACK_ALIGNMENT,S.unpackAlignment),i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,C0);const W0=S.isCompressedTexture||S.image[0].isCompressedTexture,l0=S.image[0]&&S.image[0].isDataTexture,P0=[];for(let d0=0;d0<6;d0++)!W0&&!l0?P0[d0]=T(S.image[d0],!0,s.maxCubemapSize):P0[d0]=l0?S.image[d0].image:S.image[d0],P0[d0]=ie(S,P0[d0]);const Y0=P0[0],j0=r.convert(S.format,S.colorSpace),v0=r.convert(S.type),F0=M(S.internalFormat,j0,v0,S.colorSpace),q=S.isVideoTexture!==!0,_=i0.__version===void 0||r0===!0,h0=p0.dataReady;let O0=V(S,Y0);B0(i.TEXTURE_CUBE_MAP,S);let y0;if(W0){q&&_&&t.texStorage2D(i.TEXTURE_CUBE_MAP,O0,F0,Y0.width,Y0.height);for(let d0=0;d0<6;d0++){y0=P0[d0].mipmaps;for(let X0=0;X0<y0.length;X0++){const ne=y0[X0];S.format!==Yt?j0!==null?q?h0&&t.compressedTexSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+d0,X0,0,0,ne.width,ne.height,j0,ne.data):t.compressedTexImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+d0,X0,F0,ne.width,ne.height,0,ne.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):q?h0&&t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+d0,X0,0,0,ne.width,ne.height,j0,v0,ne.data):t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+d0,X0,F0,ne.width,ne.height,0,j0,v0,ne.data)}}}else{if(y0=S.mipmaps,q&&_){y0.length>0&&O0++;const d0=Qe(P0[0]);t.texStorage2D(i.TEXTURE_CUBE_MAP,O0,F0,d0.width,d0.height)}for(let d0=0;d0<6;d0++)if(l0){q?h0&&t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+d0,0,0,0,P0[d0].width,P0[d0].height,j0,v0,P0[d0].data):t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+d0,0,F0,P0[d0].width,P0[d0].height,0,j0,v0,P0[d0].data);for(let X0=0;X0<y0.length;X0++){const Ve=y0[X0].image[d0].image;q?h0&&t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+d0,X0+1,0,0,Ve.width,Ve.height,j0,v0,Ve.data):t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+d0,X0+1,F0,Ve.width,Ve.height,0,j0,v0,Ve.data)}}else{q?h0&&t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+d0,0,0,0,j0,v0,P0[d0]):t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+d0,0,F0,j0,v0,P0[d0]);for(let X0=0;X0<y0.length;X0++){const ne=y0[X0];q?h0&&t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+d0,X0+1,0,0,j0,v0,ne.image[d0]):t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+d0,X0+1,F0,j0,v0,ne.image[d0])}}}m(S)&&f(i.TEXTURE_CUBE_MAP),i0.__version=p0.version,S.onUpdate&&S.onUpdate(S)}I.__version=S.version}function I0(I,S,K,r0,p0,i0){const A0=r.convert(K.format,K.colorSpace),H0=r.convert(K.type),C0=M(K.internalFormat,A0,H0,K.colorSpace),W0=n.get(S),l0=n.get(K);if(l0.__renderTarget=S,!W0.__hasExternalTextures){const P0=Math.max(1,S.width>>i0),Y0=Math.max(1,S.height>>i0);p0===i.TEXTURE_3D||p0===i.TEXTURE_2D_ARRAY?t.texImage3D(p0,i0,C0,P0,Y0,S.depth,0,A0,H0,null):t.texImage2D(p0,i0,C0,P0,Y0,0,A0,H0,null)}t.bindFramebuffer(i.FRAMEBUFFER,I),ve(S)?o.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,r0,p0,l0.__webglTexture,0,D0(S)):(p0===i.TEXTURE_2D||p0>=i.TEXTURE_CUBE_MAP_POSITIVE_X&&p0<=i.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&i.framebufferTexture2D(i.FRAMEBUFFER,r0,p0,l0.__webglTexture,i0),t.bindFramebuffer(i.FRAMEBUFFER,null)}function me(I,S,K){if(i.bindRenderbuffer(i.RENDERBUFFER,I),S.depthBuffer){const r0=S.depthTexture,p0=r0&&r0.isDepthTexture?r0.type:null,i0=P(S.stencilBuffer,p0),A0=S.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,H0=D0(S);ve(S)?o.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,H0,i0,S.width,S.height):K?i.renderbufferStorageMultisample(i.RENDERBUFFER,H0,i0,S.width,S.height):i.renderbufferStorage(i.RENDERBUFFER,i0,S.width,S.height),i.framebufferRenderbuffer(i.FRAMEBUFFER,A0,i.RENDERBUFFER,I)}else{const r0=S.textures;for(let p0=0;p0<r0.length;p0++){const i0=r0[p0],A0=r.convert(i0.format,i0.colorSpace),H0=r.convert(i0.type),C0=M(i0.internalFormat,A0,H0,i0.colorSpace),W0=D0(S);K&&ve(S)===!1?i.renderbufferStorageMultisample(i.RENDERBUFFER,W0,C0,S.width,S.height):ve(S)?o.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,W0,C0,S.width,S.height):i.renderbufferStorage(i.RENDERBUFFER,C0,S.width,S.height)}}i.bindRenderbuffer(i.RENDERBUFFER,null)}function Z0(I,S){if(S&&S.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(i.FRAMEBUFFER,I),!(S.depthTexture&&S.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const r0=n.get(S.depthTexture);r0.__renderTarget=S,(!r0.__webglTexture||S.depthTexture.image.width!==S.width||S.depthTexture.image.height!==S.height)&&(S.depthTexture.image.width=S.width,S.depthTexture.image.height=S.height,S.depthTexture.needsUpdate=!0),u0(S.depthTexture,0);const p0=r0.__webglTexture,i0=D0(S);if(S.depthTexture.format===ps)ve(S)?o.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.TEXTURE_2D,p0,0,i0):i.framebufferTexture2D(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.TEXTURE_2D,p0,0);else if(S.depthTexture.format===fs)ve(S)?o.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.TEXTURE_2D,p0,0,i0):i.framebufferTexture2D(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.TEXTURE_2D,p0,0);else throw new Error("Unknown depthTexture format")}function Le(I){const S=n.get(I),K=I.isWebGLCubeRenderTarget===!0;if(S.__boundDepthTexture!==I.depthTexture){const r0=I.depthTexture;if(S.__depthDisposeCallback&&S.__depthDisposeCallback(),r0){const p0=()=>{delete S.__boundDepthTexture,delete S.__depthDisposeCallback,r0.removeEventListener("dispose",p0)};r0.addEventListener("dispose",p0),S.__depthDisposeCallback=p0}S.__boundDepthTexture=r0}if(I.depthTexture&&!S.__autoAllocateDepthBuffer){if(K)throw new Error("target.depthTexture not supported in Cube render targets");const r0=I.texture.mipmaps;r0&&r0.length>0?Z0(S.__webglFramebuffer[0],I):Z0(S.__webglFramebuffer,I)}else if(K){S.__webglDepthbuffer=[];for(let r0=0;r0<6;r0++)if(t.bindFramebuffer(i.FRAMEBUFFER,S.__webglFramebuffer[r0]),S.__webglDepthbuffer[r0]===void 0)S.__webglDepthbuffer[r0]=i.createRenderbuffer(),me(S.__webglDepthbuffer[r0],I,!1);else{const p0=I.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,i0=S.__webglDepthbuffer[r0];i.bindRenderbuffer(i.RENDERBUFFER,i0),i.framebufferRenderbuffer(i.FRAMEBUFFER,p0,i.RENDERBUFFER,i0)}}else{const r0=I.texture.mipmaps;if(r0&&r0.length>0?t.bindFramebuffer(i.FRAMEBUFFER,S.__webglFramebuffer[0]):t.bindFramebuffer(i.FRAMEBUFFER,S.__webglFramebuffer),S.__webglDepthbuffer===void 0)S.__webglDepthbuffer=i.createRenderbuffer(),me(S.__webglDepthbuffer,I,!1);else{const p0=I.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,i0=S.__webglDepthbuffer;i.bindRenderbuffer(i.RENDERBUFFER,i0),i.framebufferRenderbuffer(i.FRAMEBUFFER,p0,i.RENDERBUFFER,i0)}}t.bindFramebuffer(i.FRAMEBUFFER,null)}function Oe(I,S,K){const r0=n.get(I);S!==void 0&&I0(r0.__webglFramebuffer,I,I.texture,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,0),K!==void 0&&Le(I)}function fe(I){const S=I.texture,K=n.get(I),r0=n.get(S);I.addEventListener("dispose",D);const p0=I.textures,i0=I.isWebGLCubeRenderTarget===!0,A0=p0.length>1;if(A0||(r0.__webglTexture===void 0&&(r0.__webglTexture=i.createTexture()),r0.__version=S.version,a.memory.textures++),i0){K.__webglFramebuffer=[];for(let H0=0;H0<6;H0++)if(S.mipmaps&&S.mipmaps.length>0){K.__webglFramebuffer[H0]=[];for(let C0=0;C0<S.mipmaps.length;C0++)K.__webglFramebuffer[H0][C0]=i.createFramebuffer()}else K.__webglFramebuffer[H0]=i.createFramebuffer()}else{if(S.mipmaps&&S.mipmaps.length>0){K.__webglFramebuffer=[];for(let H0=0;H0<S.mipmaps.length;H0++)K.__webglFramebuffer[H0]=i.createFramebuffer()}else K.__webglFramebuffer=i.createFramebuffer();if(A0)for(let H0=0,C0=p0.length;H0<C0;H0++){const W0=n.get(p0[H0]);W0.__webglTexture===void 0&&(W0.__webglTexture=i.createTexture(),a.memory.textures++)}if(I.samples>0&&ve(I)===!1){K.__webglMultisampledFramebuffer=i.createFramebuffer(),K.__webglColorRenderbuffer=[],t.bindFramebuffer(i.FRAMEBUFFER,K.__webglMultisampledFramebuffer);for(let H0=0;H0<p0.length;H0++){const C0=p0[H0];K.__webglColorRenderbuffer[H0]=i.createRenderbuffer(),i.bindRenderbuffer(i.RENDERBUFFER,K.__webglColorRenderbuffer[H0]);const W0=r.convert(C0.format,C0.colorSpace),l0=r.convert(C0.type),P0=M(C0.internalFormat,W0,l0,C0.colorSpace,I.isXRRenderTarget===!0),Y0=D0(I);i.renderbufferStorageMultisample(i.RENDERBUFFER,Y0,P0,I.width,I.height),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+H0,i.RENDERBUFFER,K.__webglColorRenderbuffer[H0])}i.bindRenderbuffer(i.RENDERBUFFER,null),I.depthBuffer&&(K.__webglDepthRenderbuffer=i.createRenderbuffer(),me(K.__webglDepthRenderbuffer,I,!0)),t.bindFramebuffer(i.FRAMEBUFFER,null)}}if(i0){t.bindTexture(i.TEXTURE_CUBE_MAP,r0.__webglTexture),B0(i.TEXTURE_CUBE_MAP,S);for(let H0=0;H0<6;H0++)if(S.mipmaps&&S.mipmaps.length>0)for(let C0=0;C0<S.mipmaps.length;C0++)I0(K.__webglFramebuffer[H0][C0],I,S,i.COLOR_ATTACHMENT0,i.TEXTURE_CUBE_MAP_POSITIVE_X+H0,C0);else I0(K.__webglFramebuffer[H0],I,S,i.COLOR_ATTACHMENT0,i.TEXTURE_CUBE_MAP_POSITIVE_X+H0,0);m(S)&&f(i.TEXTURE_CUBE_MAP),t.unbindTexture()}else if(A0){for(let H0=0,C0=p0.length;H0<C0;H0++){const W0=p0[H0],l0=n.get(W0);t.bindTexture(i.TEXTURE_2D,l0.__webglTexture),B0(i.TEXTURE_2D,W0),I0(K.__webglFramebuffer,I,W0,i.COLOR_ATTACHMENT0+H0,i.TEXTURE_2D,0),m(W0)&&f(i.TEXTURE_2D)}t.unbindTexture()}else{let H0=i.TEXTURE_2D;if((I.isWebGL3DRenderTarget||I.isWebGLArrayRenderTarget)&&(H0=I.isWebGL3DRenderTarget?i.TEXTURE_3D:i.TEXTURE_2D_ARRAY),t.bindTexture(H0,r0.__webglTexture),B0(H0,S),S.mipmaps&&S.mipmaps.length>0)for(let C0=0;C0<S.mipmaps.length;C0++)I0(K.__webglFramebuffer[C0],I,S,i.COLOR_ATTACHMENT0,H0,C0);else I0(K.__webglFramebuffer,I,S,i.COLOR_ATTACHMENT0,H0,0);m(S)&&f(H0),t.unbindTexture()}I.depthBuffer&&Le(I)}function j(I){const S=I.textures;for(let K=0,r0=S.length;K<r0;K++){const p0=S[K];if(m(p0)){const i0=N(I),A0=n.get(p0).__webglTexture;t.bindTexture(i0,A0),f(i0),t.unbindTexture()}}}const dt=[],we=[];function ze(I){if(I.samples>0){if(ve(I)===!1){const S=I.textures,K=I.width,r0=I.height;let p0=i.COLOR_BUFFER_BIT;const i0=I.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,A0=n.get(I),H0=S.length>1;if(H0)for(let W0=0;W0<S.length;W0++)t.bindFramebuffer(i.FRAMEBUFFER,A0.__webglMultisampledFramebuffer),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+W0,i.RENDERBUFFER,null),t.bindFramebuffer(i.FRAMEBUFFER,A0.__webglFramebuffer),i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0+W0,i.TEXTURE_2D,null,0);t.bindFramebuffer(i.READ_FRAMEBUFFER,A0.__webglMultisampledFramebuffer);const C0=I.texture.mipmaps;C0&&C0.length>0?t.bindFramebuffer(i.DRAW_FRAMEBUFFER,A0.__webglFramebuffer[0]):t.bindFramebuffer(i.DRAW_FRAMEBUFFER,A0.__webglFramebuffer);for(let W0=0;W0<S.length;W0++){if(I.resolveDepthBuffer&&(I.depthBuffer&&(p0|=i.DEPTH_BUFFER_BIT),I.stencilBuffer&&I.resolveStencilBuffer&&(p0|=i.STENCIL_BUFFER_BIT)),H0){i.framebufferRenderbuffer(i.READ_FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.RENDERBUFFER,A0.__webglColorRenderbuffer[W0]);const l0=n.get(S[W0]).__webglTexture;i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,l0,0)}i.blitFramebuffer(0,0,K,r0,0,0,K,r0,p0,i.NEAREST),l===!0&&(dt.length=0,we.length=0,dt.push(i.COLOR_ATTACHMENT0+W0),I.depthBuffer&&I.resolveDepthBuffer===!1&&(dt.push(i0),we.push(i0),i.invalidateFramebuffer(i.DRAW_FRAMEBUFFER,we)),i.invalidateFramebuffer(i.READ_FRAMEBUFFER,dt))}if(t.bindFramebuffer(i.READ_FRAMEBUFFER,null),t.bindFramebuffer(i.DRAW_FRAMEBUFFER,null),H0)for(let W0=0;W0<S.length;W0++){t.bindFramebuffer(i.FRAMEBUFFER,A0.__webglMultisampledFramebuffer),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+W0,i.RENDERBUFFER,A0.__webglColorRenderbuffer[W0]);const l0=n.get(S[W0]).__webglTexture;t.bindFramebuffer(i.FRAMEBUFFER,A0.__webglFramebuffer),i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0+W0,i.TEXTURE_2D,l0,0)}t.bindFramebuffer(i.DRAW_FRAMEBUFFER,A0.__webglMultisampledFramebuffer)}else if(I.depthBuffer&&I.resolveDepthBuffer===!1&&l){const S=I.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT;i.invalidateFramebuffer(i.DRAW_FRAMEBUFFER,[S])}}}function D0(I){return Math.min(s.maxSamples,I.samples)}function ve(I){const S=n.get(I);return I.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&S.__useRenderToTexture!==!1}function G0(I){const S=a.render.frame;c.get(I)!==S&&(c.set(I,S),I.update())}function ie(I,S){const K=I.colorSpace,r0=I.format,p0=I.type;return I.isCompressedTexture===!0||I.isVideoTexture===!0||K!==xt&&K!==Vn&&(ge.getTransfer(K)===Ae?(r0!==Yt||p0!==Sn)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",K)),S}function Qe(I){return typeof HTMLImageElement<"u"&&I instanceof HTMLImageElement?(d.width=I.naturalWidth||I.width,d.height=I.naturalHeight||I.height):typeof VideoFrame<"u"&&I instanceof VideoFrame?(d.width=I.displayWidth,d.height=I.displayHeight):(d.width=I.width,d.height=I.height),d}this.allocateTextureUnit=Q,this.resetTextureUnits=B,this.setTexture2D=u0,this.setTexture2DArray=n0,this.setTexture3D=b0,this.setTextureCube=t0,this.rebindTextures=Oe,this.setupRenderTarget=fe,this.updateRenderTargetMipmap=j,this.updateMultisampleRenderTarget=ze,this.setupDepthRenderbuffer=Le,this.setupFrameBufferTexture=I0,this.useMultisampledRTT=ve}function nm(i,e){function t(n,s=Vn){let r;const a=ge.getTransfer(s);if(n===Sn)return i.UNSIGNED_BYTE;if(n===Vo)return i.UNSIGNED_SHORT_4_4_4_4;if(n===Do)return i.UNSIGNED_SHORT_5_5_5_1;if(n===P4)return i.UNSIGNED_INT_5_9_9_9_REV;if(n===x4)return i.BYTE;if(n===S4)return i.SHORT;if(n===cs)return i.UNSIGNED_SHORT;if(n===Fo)return i.INT;if(n===Mi)return i.UNSIGNED_INT;if(n===jt)return i.FLOAT;if(n===jn)return i.HALF_FLOAT;if(n===H4)return i.ALPHA;if(n===R4)return i.RGB;if(n===Yt)return i.RGBA;if(n===ps)return i.DEPTH_COMPONENT;if(n===fs)return i.DEPTH_STENCIL;if(n===g2)return i.RED;if(n===jo)return i.RED_INTEGER;if(n===N4)return i.RG;if(n===Wo)return i.RG_INTEGER;if(n===Uo)return i.RGBA_INTEGER;if(n===Ir||n===Xr||n===Ar||n===Cr)if(a===Ae)if(r=e.get("WEBGL_compressed_texture_s3tc_srgb"),r!==null){if(n===Ir)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===Xr)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===Ar)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===Cr)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(r=e.get("WEBGL_compressed_texture_s3tc"),r!==null){if(n===Ir)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===Xr)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===Ar)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===Cr)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(n===ga||n===wa||n===Ta||n===xa)if(r=e.get("WEBGL_compressed_texture_pvrtc"),r!==null){if(n===ga)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===wa)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===Ta)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===xa)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(n===Sa||n===Pa||n===Ha)if(r=e.get("WEBGL_compressed_texture_etc"),r!==null){if(n===Sa||n===Pa)return a===Ae?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(n===Ha)return a===Ae?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(n===Ra||n===Na||n===La||n===Ma||n===Ea||n===Oa||n===za||n===Ia||n===Xa||n===Aa||n===Ca||n===Fa||n===Va||n===Da)if(r=e.get("WEBGL_compressed_texture_astc"),r!==null){if(n===Ra)return a===Ae?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===Na)return a===Ae?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===La)return a===Ae?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===Ma)return a===Ae?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===Ea)return a===Ae?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===Oa)return a===Ae?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===za)return a===Ae?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===Ia)return a===Ae?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===Xa)return a===Ae?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===Aa)return a===Ae?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===Ca)return a===Ae?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===Fa)return a===Ae?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===Va)return a===Ae?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===Da)return a===Ae?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(n===Fr||n===ja||n===Wa)if(r=e.get("EXT_texture_compression_bptc"),r!==null){if(n===Fr)return a===Ae?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===ja)return r.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===Wa)return r.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(n===L4||n===Ua||n===qa||n===Ga)if(r=e.get("EXT_texture_compression_rgtc"),r!==null){if(n===Fr)return r.COMPRESSED_RED_RGTC1_EXT;if(n===Ua)return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===qa)return r.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===Ga)return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return n===us?i.UNSIGNED_INT_24_8:i[n]!==void 0?i[n]:null}return{convert:t}}const im=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,sm=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class rm{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(e,t,n){if(this.texture===null){const s=new gt,r=e.properties.get(s);r.__webglTexture=t.texture,(t.depthNear!==n.depthNear||t.depthFar!==n.depthFar)&&(this.depthNear=t.depthNear,this.depthFar=t.depthFar),this.texture=s}}getMesh(e){if(this.texture!==null&&this.mesh===null){const t=e.cameras[0].viewport,n=new fi({vertexShader:im,fragmentShader:sm,uniforms:{depthColor:{value:this.texture},depthWidth:{value:t.z},depthHeight:{value:t.w}}});this.mesh=new Be(new x2(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class am extends Xi{constructor(e,t){super();const n=this;let s=null,r=1,a=null,o="local-floor",l=1,d=null,c=null,u=null,p=null,h=null,b=null;const T=new rm,m=t.getContextAttributes();let f=null,N=null;const M=[],P=[],V=new ee;let C=null;const D=new It;D.viewport=new He;const G=new It;G.viewport=new He;const L=[D,G],H=new mc;let W=null,B=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(s0){let w0=M[s0];return w0===void 0&&(w0=new r3,M[s0]=w0),w0.getTargetRaySpace()},this.getControllerGrip=function(s0){let w0=M[s0];return w0===void 0&&(w0=new r3,M[s0]=w0),w0.getGripSpace()},this.getHand=function(s0){let w0=M[s0];return w0===void 0&&(w0=new r3,M[s0]=w0),w0.getHandSpace()};function Q(s0){const w0=P.indexOf(s0.inputSource);if(w0===-1)return;const T0=M[w0];T0!==void 0&&(T0.update(s0.inputSource,s0.frame,d||a),T0.dispatchEvent({type:s0.type,data:s0.inputSource}))}function e0(){s.removeEventListener("select",Q),s.removeEventListener("selectstart",Q),s.removeEventListener("selectend",Q),s.removeEventListener("squeeze",Q),s.removeEventListener("squeezestart",Q),s.removeEventListener("squeezeend",Q),s.removeEventListener("end",e0),s.removeEventListener("inputsourceschange",u0);for(let s0=0;s0<M.length;s0++){const w0=P[s0];w0!==null&&(P[s0]=null,M[s0].disconnect(w0))}W=null,B=null,T.reset(),e.setRenderTarget(f),h=null,p=null,u=null,s=null,N=null,ue.stop(),n.isPresenting=!1,e.setPixelRatio(C),e.setSize(V.width,V.height,!1),n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(s0){r=s0,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(s0){o=s0,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return d||a},this.setReferenceSpace=function(s0){d=s0},this.getBaseLayer=function(){return p!==null?p:h},this.getBinding=function(){return u},this.getFrame=function(){return b},this.getSession=function(){return s},this.setSession=async function(s0){if(s=s0,s!==null){if(f=e.getRenderTarget(),s.addEventListener("select",Q),s.addEventListener("selectstart",Q),s.addEventListener("selectend",Q),s.addEventListener("squeeze",Q),s.addEventListener("squeezestart",Q),s.addEventListener("squeezeend",Q),s.addEventListener("end",e0),s.addEventListener("inputsourceschange",u0),m.xrCompatible!==!0&&await t.makeXRCompatible(),C=e.getPixelRatio(),e.getSize(V),typeof XRWebGLBinding<"u"&&"createProjectionLayer"in XRWebGLBinding.prototype){let T0=null,S0=null,I0=null;m.depth&&(I0=m.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,T0=m.stencil?fs:ps,S0=m.stencil?us:Mi);const me={colorFormat:t.RGBA8,depthFormat:I0,scaleFactor:r};u=new XRWebGLBinding(s,t),p=u.createProjectionLayer(me),s.updateRenderState({layers:[p]}),e.setPixelRatio(1),e.setSize(p.textureWidth,p.textureHeight,!1),N=new Ei(p.textureWidth,p.textureHeight,{format:Yt,type:Sn,depthTexture:new U4(p.textureWidth,p.textureHeight,S0,void 0,void 0,void 0,void 0,void 0,void 0,T0),stencilBuffer:m.stencil,colorSpace:e.outputColorSpace,samples:m.antialias?4:0,resolveDepthBuffer:p.ignoreDepthValues===!1,resolveStencilBuffer:p.ignoreDepthValues===!1})}else{const T0={antialias:m.antialias,alpha:!0,depth:m.depth,stencil:m.stencil,framebufferScaleFactor:r};h=new XRWebGLLayer(s,t,T0),s.updateRenderState({baseLayer:h}),e.setPixelRatio(1),e.setSize(h.framebufferWidth,h.framebufferHeight,!1),N=new Ei(h.framebufferWidth,h.framebufferHeight,{format:Yt,type:Sn,colorSpace:e.outputColorSpace,stencilBuffer:m.stencil,resolveDepthBuffer:h.ignoreDepthValues===!1,resolveStencilBuffer:h.ignoreDepthValues===!1})}N.isXRRenderTarget=!0,this.setFoveation(l),d=null,a=await s.requestReferenceSpace(o),ue.setContext(s),ue.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(s!==null)return s.environmentBlendMode},this.getDepthTexture=function(){return T.getDepthTexture()};function u0(s0){for(let w0=0;w0<s0.removed.length;w0++){const T0=s0.removed[w0],S0=P.indexOf(T0);S0>=0&&(P[S0]=null,M[S0].disconnect(T0))}for(let w0=0;w0<s0.added.length;w0++){const T0=s0.added[w0];let S0=P.indexOf(T0);if(S0===-1){for(let me=0;me<M.length;me++)if(me>=P.length){P.push(T0),S0=me;break}else if(P[me]===null){P[me]=T0,S0=me;break}if(S0===-1)break}const I0=M[S0];I0&&I0.connect(T0)}}const n0=new x,b0=new x;function t0(s0,w0,T0){n0.setFromMatrixPosition(w0.matrixWorld),b0.setFromMatrixPosition(T0.matrixWorld);const S0=n0.distanceTo(b0),I0=w0.projectionMatrix.elements,me=T0.projectionMatrix.elements,Z0=I0[14]/(I0[10]-1),Le=I0[14]/(I0[10]+1),Oe=(I0[9]+1)/I0[5],fe=(I0[9]-1)/I0[5],j=(I0[8]-1)/I0[0],dt=(me[8]+1)/me[0],we=Z0*j,ze=Z0*dt,D0=S0/(-j+dt),ve=D0*-j;if(w0.matrixWorld.decompose(s0.position,s0.quaternion,s0.scale),s0.translateX(ve),s0.translateZ(D0),s0.matrixWorld.compose(s0.position,s0.quaternion,s0.scale),s0.matrixWorldInverse.copy(s0.matrixWorld).invert(),I0[10]===-1)s0.projectionMatrix.copy(w0.projectionMatrix),s0.projectionMatrixInverse.copy(w0.projectionMatrixInverse);else{const G0=Z0+D0,ie=Le+D0,Qe=we-ve,I=ze+(S0-ve),S=Oe*Le/ie*G0,K=fe*Le/ie*G0;s0.projectionMatrix.makePerspective(Qe,I,S,K,G0,ie),s0.projectionMatrixInverse.copy(s0.projectionMatrix).invert()}}function x0(s0,w0){w0===null?s0.matrixWorld.copy(s0.matrix):s0.matrixWorld.multiplyMatrices(w0.matrixWorld,s0.matrix),s0.matrixWorldInverse.copy(s0.matrixWorld).invert()}this.updateCamera=function(s0){if(s===null)return;let w0=s0.near,T0=s0.far;T.texture!==null&&(T.depthNear>0&&(w0=T.depthNear),T.depthFar>0&&(T0=T.depthFar)),H.near=G.near=D.near=w0,H.far=G.far=D.far=T0,(W!==H.near||B!==H.far)&&(s.updateRenderState({depthNear:H.near,depthFar:H.far}),W=H.near,B=H.far),D.layers.mask=s0.layers.mask|2,G.layers.mask=s0.layers.mask|4,H.layers.mask=D.layers.mask|G.layers.mask;const S0=s0.parent,I0=H.cameras;x0(H,S0);for(let me=0;me<I0.length;me++)x0(I0[me],S0);I0.length===2?t0(H,D,G):H.projectionMatrix.copy(D.projectionMatrix),R0(s0,H,S0)};function R0(s0,w0,T0){T0===null?s0.matrix.copy(w0.matrixWorld):(s0.matrix.copy(T0.matrixWorld),s0.matrix.invert(),s0.matrix.multiply(w0.matrixWorld)),s0.matrix.decompose(s0.position,s0.quaternion,s0.scale),s0.updateMatrixWorld(!0),s0.projectionMatrix.copy(w0.projectionMatrix),s0.projectionMatrixInverse.copy(w0.projectionMatrixInverse),s0.isPerspectiveCamera&&(s0.fov=H1*2*Math.atan(1/s0.projectionMatrix.elements[5]),s0.zoom=1)}this.getCamera=function(){return H},this.getFoveation=function(){if(!(p===null&&h===null))return l},this.setFoveation=function(s0){l=s0,p!==null&&(p.fixedFoveation=s0),h!==null&&h.fixedFoveation!==void 0&&(h.fixedFoveation=s0)},this.hasDepthSensing=function(){return T.texture!==null},this.getDepthSensingMesh=function(){return T.getMesh(H)};let V0=null;function B0(s0,w0){if(c=w0.getViewerPose(d||a),b=w0,c!==null){const T0=c.views;h!==null&&(e.setRenderTargetFramebuffer(N,h.framebuffer),e.setRenderTarget(N));let S0=!1;T0.length!==H.cameras.length&&(H.cameras.length=0,S0=!0);for(let Z0=0;Z0<T0.length;Z0++){const Le=T0[Z0];let Oe=null;if(h!==null)Oe=h.getViewport(Le);else{const j=u.getViewSubImage(p,Le);Oe=j.viewport,Z0===0&&(e.setRenderTargetTextures(N,j.colorTexture,j.depthStencilTexture),e.setRenderTarget(N))}let fe=L[Z0];fe===void 0&&(fe=new It,fe.layers.enable(Z0),fe.viewport=new He,L[Z0]=fe),fe.matrix.fromArray(Le.transform.matrix),fe.matrix.decompose(fe.position,fe.quaternion,fe.scale),fe.projectionMatrix.fromArray(Le.projectionMatrix),fe.projectionMatrixInverse.copy(fe.projectionMatrix).invert(),fe.viewport.set(Oe.x,Oe.y,Oe.width,Oe.height),Z0===0&&(H.matrix.copy(fe.matrix),H.matrix.decompose(H.position,H.quaternion,H.scale)),S0===!0&&H.cameras.push(fe)}const I0=s.enabledFeatures;if(I0&&I0.includes("depth-sensing")&&s.depthUsage=="gpu-optimized"&&u){const Z0=u.getDepthInformation(T0[0]);Z0&&Z0.isValid&&Z0.texture&&T.init(e,Z0,s.renderState)}}for(let T0=0;T0<M.length;T0++){const S0=P[T0],I0=M[T0];S0!==null&&I0!==void 0&&I0.update(S0,w0,d||a)}V0&&V0(s0,w0),w0.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:w0}),b=null}const ue=new K4;ue.setAnimationLoop(B0),this.setAnimationLoop=function(s0){V0=s0},this.dispose=function(){}}}const Ti=new Ne,om=new K0;function lm(i,e){function t(m,f){m.matrixAutoUpdate===!0&&m.updateMatrix(),f.value.copy(m.matrix)}function n(m,f){f.color.getRGB(m.fogColor.value,F4(i)),f.isFog?(m.fogNear.value=f.near,m.fogFar.value=f.far):f.isFogExp2&&(m.fogDensity.value=f.density)}function s(m,f,N,M,P){f.isMeshBasicMaterial||f.isMeshLambertMaterial?r(m,f):f.isMeshToonMaterial?(r(m,f),u(m,f)):f.isMeshPhongMaterial?(r(m,f),c(m,f)):f.isMeshStandardMaterial?(r(m,f),p(m,f),f.isMeshPhysicalMaterial&&h(m,f,P)):f.isMeshMatcapMaterial?(r(m,f),b(m,f)):f.isMeshDepthMaterial?r(m,f):f.isMeshDistanceMaterial?(r(m,f),T(m,f)):f.isMeshNormalMaterial?r(m,f):f.isLineBasicMaterial?(a(m,f),f.isLineDashedMaterial&&o(m,f)):f.isPointsMaterial?l(m,f,N,M):f.isSpriteMaterial?d(m,f):f.isShadowMaterial?(m.color.value.copy(f.color),m.opacity.value=f.opacity):f.isShaderMaterial&&(f.uniformsNeedUpdate=!1)}function r(m,f){m.opacity.value=f.opacity,f.color&&m.diffuse.value.copy(f.color),f.emissive&&m.emissive.value.copy(f.emissive).multiplyScalar(f.emissiveIntensity),f.map&&(m.map.value=f.map,t(f.map,m.mapTransform)),f.alphaMap&&(m.alphaMap.value=f.alphaMap,t(f.alphaMap,m.alphaMapTransform)),f.bumpMap&&(m.bumpMap.value=f.bumpMap,t(f.bumpMap,m.bumpMapTransform),m.bumpScale.value=f.bumpScale,f.side===Wt&&(m.bumpScale.value*=-1)),f.normalMap&&(m.normalMap.value=f.normalMap,t(f.normalMap,m.normalMapTransform),m.normalScale.value.copy(f.normalScale),f.side===Wt&&m.normalScale.value.negate()),f.displacementMap&&(m.displacementMap.value=f.displacementMap,t(f.displacementMap,m.displacementMapTransform),m.displacementScale.value=f.displacementScale,m.displacementBias.value=f.displacementBias),f.emissiveMap&&(m.emissiveMap.value=f.emissiveMap,t(f.emissiveMap,m.emissiveMapTransform)),f.specularMap&&(m.specularMap.value=f.specularMap,t(f.specularMap,m.specularMapTransform)),f.alphaTest>0&&(m.alphaTest.value=f.alphaTest);const N=e.get(f),M=N.envMap,P=N.envMapRotation;M&&(m.envMap.value=M,Ti.copy(P),Ti.x*=-1,Ti.y*=-1,Ti.z*=-1,M.isCubeTexture&&M.isRenderTargetTexture===!1&&(Ti.y*=-1,Ti.z*=-1),m.envMapRotation.value.setFromMatrix4(om.makeRotationFromEuler(Ti)),m.flipEnvMap.value=M.isCubeTexture&&M.isRenderTargetTexture===!1?-1:1,m.reflectivity.value=f.reflectivity,m.ior.value=f.ior,m.refractionRatio.value=f.refractionRatio),f.lightMap&&(m.lightMap.value=f.lightMap,m.lightMapIntensity.value=f.lightMapIntensity,t(f.lightMap,m.lightMapTransform)),f.aoMap&&(m.aoMap.value=f.aoMap,m.aoMapIntensity.value=f.aoMapIntensity,t(f.aoMap,m.aoMapTransform))}function a(m,f){m.diffuse.value.copy(f.color),m.opacity.value=f.opacity,f.map&&(m.map.value=f.map,t(f.map,m.mapTransform))}function o(m,f){m.dashSize.value=f.dashSize,m.totalSize.value=f.dashSize+f.gapSize,m.scale.value=f.scale}function l(m,f,N,M){m.diffuse.value.copy(f.color),m.opacity.value=f.opacity,m.size.value=f.size*N,m.scale.value=M*.5,f.map&&(m.map.value=f.map,t(f.map,m.uvTransform)),f.alphaMap&&(m.alphaMap.value=f.alphaMap,t(f.alphaMap,m.alphaMapTransform)),f.alphaTest>0&&(m.alphaTest.value=f.alphaTest)}function d(m,f){m.diffuse.value.copy(f.color),m.opacity.value=f.opacity,m.rotation.value=f.rotation,f.map&&(m.map.value=f.map,t(f.map,m.mapTransform)),f.alphaMap&&(m.alphaMap.value=f.alphaMap,t(f.alphaMap,m.alphaMapTransform)),f.alphaTest>0&&(m.alphaTest.value=f.alphaTest)}function c(m,f){m.specular.value.copy(f.specular),m.shininess.value=Math.max(f.shininess,1e-4)}function u(m,f){f.gradientMap&&(m.gradientMap.value=f.gradientMap)}function p(m,f){m.metalness.value=f.metalness,f.metalnessMap&&(m.metalnessMap.value=f.metalnessMap,t(f.metalnessMap,m.metalnessMapTransform)),m.roughness.value=f.roughness,f.roughnessMap&&(m.roughnessMap.value=f.roughnessMap,t(f.roughnessMap,m.roughnessMapTransform)),f.envMap&&(m.envMapIntensity.value=f.envMapIntensity)}function h(m,f,N){m.ior.value=f.ior,f.sheen>0&&(m.sheenColor.value.copy(f.sheenColor).multiplyScalar(f.sheen),m.sheenRoughness.value=f.sheenRoughness,f.sheenColorMap&&(m.sheenColorMap.value=f.sheenColorMap,t(f.sheenColorMap,m.sheenColorMapTransform)),f.sheenRoughnessMap&&(m.sheenRoughnessMap.value=f.sheenRoughnessMap,t(f.sheenRoughnessMap,m.sheenRoughnessMapTransform))),f.clearcoat>0&&(m.clearcoat.value=f.clearcoat,m.clearcoatRoughness.value=f.clearcoatRoughness,f.clearcoatMap&&(m.clearcoatMap.value=f.clearcoatMap,t(f.clearcoatMap,m.clearcoatMapTransform)),f.clearcoatRoughnessMap&&(m.clearcoatRoughnessMap.value=f.clearcoatRoughnessMap,t(f.clearcoatRoughnessMap,m.clearcoatRoughnessMapTransform)),f.clearcoatNormalMap&&(m.clearcoatNormalMap.value=f.clearcoatNormalMap,t(f.clearcoatNormalMap,m.clearcoatNormalMapTransform),m.clearcoatNormalScale.value.copy(f.clearcoatNormalScale),f.side===Wt&&m.clearcoatNormalScale.value.negate())),f.dispersion>0&&(m.dispersion.value=f.dispersion),f.iridescence>0&&(m.iridescence.value=f.iridescence,m.iridescenceIOR.value=f.iridescenceIOR,m.iridescenceThicknessMinimum.value=f.iridescenceThicknessRange[0],m.iridescenceThicknessMaximum.value=f.iridescenceThicknessRange[1],f.iridescenceMap&&(m.iridescenceMap.value=f.iridescenceMap,t(f.iridescenceMap,m.iridescenceMapTransform)),f.iridescenceThicknessMap&&(m.iridescenceThicknessMap.value=f.iridescenceThicknessMap,t(f.iridescenceThicknessMap,m.iridescenceThicknessMapTransform))),f.transmission>0&&(m.transmission.value=f.transmission,m.transmissionSamplerMap.value=N.texture,m.transmissionSamplerSize.value.set(N.width,N.height),f.transmissionMap&&(m.transmissionMap.value=f.transmissionMap,t(f.transmissionMap,m.transmissionMapTransform)),m.thickness.value=f.thickness,f.thicknessMap&&(m.thicknessMap.value=f.thicknessMap,t(f.thicknessMap,m.thicknessMapTransform)),m.attenuationDistance.value=f.attenuationDistance,m.attenuationColor.value.copy(f.attenuationColor)),f.anisotropy>0&&(m.anisotropyVector.value.set(f.anisotropy*Math.cos(f.anisotropyRotation),f.anisotropy*Math.sin(f.anisotropyRotation)),f.anisotropyMap&&(m.anisotropyMap.value=f.anisotropyMap,t(f.anisotropyMap,m.anisotropyMapTransform))),m.specularIntensity.value=f.specularIntensity,m.specularColor.value.copy(f.specularColor),f.specularColorMap&&(m.specularColorMap.value=f.specularColorMap,t(f.specularColorMap,m.specularColorMapTransform)),f.specularIntensityMap&&(m.specularIntensityMap.value=f.specularIntensityMap,t(f.specularIntensityMap,m.specularIntensityMapTransform))}function b(m,f){f.matcap&&(m.matcap.value=f.matcap)}function T(m,f){const N=e.get(f).light;m.referencePosition.value.setFromMatrixPosition(N.matrixWorld),m.nearDistance.value=N.shadow.camera.near,m.farDistance.value=N.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:s}}function dm(i,e,t,n){let s={},r={},a=[];const o=i.getParameter(i.MAX_UNIFORM_BUFFER_BINDINGS);function l(N,M){const P=M.program;n.uniformBlockBinding(N,P)}function d(N,M){let P=s[N.id];P===void 0&&(b(N),P=c(N),s[N.id]=P,N.addEventListener("dispose",m));const V=M.program;n.updateUBOMapping(N,V);const C=e.render.frame;r[N.id]!==C&&(p(N),r[N.id]=C)}function c(N){const M=u();N.__bindingPointIndex=M;const P=i.createBuffer(),V=N.__size,C=N.usage;return i.bindBuffer(i.UNIFORM_BUFFER,P),i.bufferData(i.UNIFORM_BUFFER,V,C),i.bindBuffer(i.UNIFORM_BUFFER,null),i.bindBufferBase(i.UNIFORM_BUFFER,M,P),P}function u(){for(let N=0;N<o;N++)if(a.indexOf(N)===-1)return a.push(N),N;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function p(N){const M=s[N.id],P=N.uniforms,V=N.__cache;i.bindBuffer(i.UNIFORM_BUFFER,M);for(let C=0,D=P.length;C<D;C++){const G=Array.isArray(P[C])?P[C]:[P[C]];for(let L=0,H=G.length;L<H;L++){const W=G[L];if(h(W,C,L,V)===!0){const B=W.__offset,Q=Array.isArray(W.value)?W.value:[W.value];let e0=0;for(let u0=0;u0<Q.length;u0++){const n0=Q[u0],b0=T(n0);typeof n0=="number"||typeof n0=="boolean"?(W.__data[0]=n0,i.bufferSubData(i.UNIFORM_BUFFER,B+e0,W.__data)):n0.isMatrix3?(W.__data[0]=n0.elements[0],W.__data[1]=n0.elements[1],W.__data[2]=n0.elements[2],W.__data[3]=0,W.__data[4]=n0.elements[3],W.__data[5]=n0.elements[4],W.__data[6]=n0.elements[5],W.__data[7]=0,W.__data[8]=n0.elements[6],W.__data[9]=n0.elements[7],W.__data[10]=n0.elements[8],W.__data[11]=0):(n0.toArray(W.__data,e0),e0+=b0.storage/Float32Array.BYTES_PER_ELEMENT)}i.bufferSubData(i.UNIFORM_BUFFER,B,W.__data)}}}i.bindBuffer(i.UNIFORM_BUFFER,null)}function h(N,M,P,V){const C=N.value,D=M+"_"+P;if(V[D]===void 0)return typeof C=="number"||typeof C=="boolean"?V[D]=C:V[D]=C.clone(),!0;{const G=V[D];if(typeof C=="number"||typeof C=="boolean"){if(G!==C)return V[D]=C,!0}else if(G.equals(C)===!1)return G.copy(C),!0}return!1}function b(N){const M=N.uniforms;let P=0;const V=16;for(let D=0,G=M.length;D<G;D++){const L=Array.isArray(M[D])?M[D]:[M[D]];for(let H=0,W=L.length;H<W;H++){const B=L[H],Q=Array.isArray(B.value)?B.value:[B.value];for(let e0=0,u0=Q.length;e0<u0;e0++){const n0=Q[e0],b0=T(n0),t0=P%V,x0=t0%b0.boundary,R0=t0+x0;P+=x0,R0!==0&&V-R0<b0.storage&&(P+=V-R0),B.__data=new Float32Array(b0.storage/Float32Array.BYTES_PER_ELEMENT),B.__offset=P,P+=b0.storage}}}const C=P%V;return C>0&&(P+=V-C),N.__size=P,N.__cache={},this}function T(N){const M={boundary:0,storage:0};return typeof N=="number"||typeof N=="boolean"?(M.boundary=4,M.storage=4):N.isVector2?(M.boundary=8,M.storage=8):N.isVector3||N.isColor?(M.boundary=16,M.storage=12):N.isVector4?(M.boundary=16,M.storage=16):N.isMatrix3?(M.boundary=48,M.storage=48):N.isMatrix4?(M.boundary=64,M.storage=64):N.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",N),M}function m(N){const M=N.target;M.removeEventListener("dispose",m);const P=a.indexOf(M.__bindingPointIndex);a.splice(P,1),i.deleteBuffer(s[M.id]),delete s[M.id],delete r[M.id]}function f(){for(const N in s)i.deleteBuffer(s[N]);a=[],s={},r={}}return{bind:l,update:d,dispose:f}}class cm{constructor(e={}){const{canvas:t=rd(),context:n=null,depth:s=!0,stencil:r=!1,alpha:a=!1,antialias:o=!1,premultipliedAlpha:l=!0,preserveDrawingBuffer:d=!1,powerPreference:c="default",failIfMajorPerformanceCaveat:u=!1,reverseDepthBuffer:p=!1}=e;this.isWebGLRenderer=!0;let h;if(n!==null){if(typeof WebGLRenderingContext<"u"&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");h=n.getContextAttributes().alpha}else h=a;const b=new Uint32Array(4),T=new Int32Array(4);let m=null,f=null;const N=[],M=[];this.domElement=t,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.toneMapping=pi,this.toneMappingExposure=1,this.transmissionResolutionScale=1;const P=this;let V=!1;this._outputColorSpace=bt;let C=0,D=0,G=null,L=-1,H=null;const W=new He,B=new He;let Q=null;const e0=new te(0);let u0=0,n0=t.width,b0=t.height,t0=1,x0=null,R0=null;const V0=new He(0,0,n0,b0),B0=new He(0,0,n0,b0);let ue=!1;const s0=new Qo;let w0=!1,T0=!1;const S0=new K0,I0=new K0,me=new x,Z0=new He,Le={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let Oe=!1;function fe(){return G===null?t0:1}let j=n;function dt(w,E){return t.getContext(w,E)}try{const w={alpha:!0,depth:s,stencil:r,antialias:o,premultipliedAlpha:l,preserveDrawingBuffer:d,powerPreference:c,failIfMajorPerformanceCaveat:u};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${Ao}`),t.addEventListener("webglcontextlost",O0,!1),t.addEventListener("webglcontextrestored",y0,!1),t.addEventListener("webglcontextcreationerror",d0,!1),j===null){const E="webgl2";if(j=dt(E,w),j===null)throw dt(E)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(w){throw console.error("THREE.WebGLRenderer: "+w.message),w}let we,ze,D0,ve,G0,ie,Qe,I,S,K,r0,p0,i0,A0,H0,C0,W0,l0,P0,Y0,j0,v0,F0,q;function _(){we=new wf(j),we.init(),v0=new nm(j,we),ze=new ff(j,we,e,v0),D0=new em(j,we),ze.reverseDepthBuffer&&p&&D0.buffers.depth.setReversed(!0),ve=new Sf(j),G0=new Wh,ie=new tm(j,we,D0,G0,ze,v0,ve),Qe=new mf(P),I=new gf(P),S=new Lc(j),F0=new uf(j,S),K=new Tf(j,S,ve,F0),r0=new Hf(j,K,S,ve),P0=new Pf(j,ze,ie),C0=new hf(G0),p0=new jh(P,Qe,I,we,ze,F0,C0),i0=new lm(P,G0),A0=new qh,H0=new Kh(we),l0=new cf(P,Qe,I,D0,r0,h,l),W0=new _h(P,r0,ze),q=new dm(j,ve,ze,D0),Y0=new pf(j,we,ve),j0=new xf(j,we,ve),ve.programs=p0.programs,P.capabilities=ze,P.extensions=we,P.properties=G0,P.renderLists=A0,P.shadowMap=W0,P.state=D0,P.info=ve}_();const h0=new am(P,j);this.xr=h0,this.getContext=function(){return j},this.getContextAttributes=function(){return j.getContextAttributes()},this.forceContextLoss=function(){const w=we.get("WEBGL_lose_context");w&&w.loseContext()},this.forceContextRestore=function(){const w=we.get("WEBGL_lose_context");w&&w.restoreContext()},this.getPixelRatio=function(){return t0},this.setPixelRatio=function(w){w!==void 0&&(t0=w,this.setSize(n0,b0,!1))},this.getSize=function(w){return w.set(n0,b0)},this.setSize=function(w,E,O=!0){if(h0.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}n0=w,b0=E,t.width=Math.floor(w*t0),t.height=Math.floor(E*t0),O===!0&&(t.style.width=w+"px",t.style.height=E+"px"),this.setViewport(0,0,w,E)},this.getDrawingBufferSize=function(w){return w.set(n0*t0,b0*t0).floor()},this.setDrawingBufferSize=function(w,E,O){n0=w,b0=E,t0=O,t.width=Math.floor(w*O),t.height=Math.floor(E*O),this.setViewport(0,0,w,E)},this.getCurrentViewport=function(w){return w.copy(W)},this.getViewport=function(w){return w.copy(V0)},this.setViewport=function(w,E,O,A){w.isVector4?V0.set(w.x,w.y,w.z,w.w):V0.set(w,E,O,A),D0.viewport(W.copy(V0).multiplyScalar(t0).round())},this.getScissor=function(w){return w.copy(B0)},this.setScissor=function(w,E,O,A){w.isVector4?B0.set(w.x,w.y,w.z,w.w):B0.set(w,E,O,A),D0.scissor(B.copy(B0).multiplyScalar(t0).round())},this.getScissorTest=function(){return ue},this.setScissorTest=function(w){D0.setScissorTest(ue=w)},this.setOpaqueSort=function(w){x0=w},this.setTransparentSort=function(w){R0=w},this.getClearColor=function(w){return w.copy(l0.getClearColor())},this.setClearColor=function(){l0.setClearColor(...arguments)},this.getClearAlpha=function(){return l0.getClearAlpha()},this.setClearAlpha=function(){l0.setClearAlpha(...arguments)},this.clear=function(w=!0,E=!0,O=!0){let A=0;if(w){let z=!1;if(G!==null){const Z=G.texture.format;z=Z===Uo||Z===Wo||Z===jo}if(z){const Z=G.texture.type,k=Z===Sn||Z===Mi||Z===cs||Z===us||Z===Vo||Z===Do,J=l0.getClearColor(),$=l0.getClearAlpha(),a0=J.r,o0=J.g,c0=J.b;k?(b[0]=a0,b[1]=o0,b[2]=c0,b[3]=$,j.clearBufferuiv(j.COLOR,0,b)):(T[0]=a0,T[1]=o0,T[2]=c0,T[3]=$,j.clearBufferiv(j.COLOR,0,T))}else A|=j.COLOR_BUFFER_BIT}E&&(A|=j.DEPTH_BUFFER_BIT),O&&(A|=j.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),j.clear(A)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",O0,!1),t.removeEventListener("webglcontextrestored",y0,!1),t.removeEventListener("webglcontextcreationerror",d0,!1),l0.dispose(),A0.dispose(),H0.dispose(),G0.dispose(),Qe.dispose(),I.dispose(),r0.dispose(),F0.dispose(),q.dispose(),p0.dispose(),h0.dispose(),h0.removeEventListener("sessionstart",Ms),h0.removeEventListener("sessionend",Es),Ln.stop()};function O0(w){w.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),V=!0}function y0(){console.log("THREE.WebGLRenderer: Context Restored."),V=!1;const w=ve.autoReset,E=W0.enabled,O=W0.autoUpdate,A=W0.needsUpdate,z=W0.type;_(),ve.autoReset=w,W0.enabled=E,W0.autoUpdate=O,W0.needsUpdate=A,W0.type=z}function d0(w){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",w.statusMessage)}function X0(w){const E=w.target;E.removeEventListener("dispose",X0),ne(E)}function ne(w){Ve(w),G0.remove(w)}function Ve(w){const E=G0.get(w).programs;E!==void 0&&(E.forEach(function(O){p0.releaseProgram(O)}),w.isShaderMaterial&&p0.releaseShaderCache(w))}this.renderBufferDirect=function(w,E,O,A,z,Z){E===null&&(E=Le);const k=z.isMesh&&z.matrixWorld.determinant()<0,J=C2(w,E,O,A,z);D0.setMaterial(A,k);let $=O.index,a0=1;if(A.wireframe===!0){if($=K.getWireframeAttribute(O),$===void 0)return;a0=2}const o0=O.drawRange,c0=O.attributes.position;let f0=o0.start*a0,g0=(o0.start+o0.count)*a0;Z!==null&&(f0=Math.max(f0,Z.start*a0),g0=Math.min(g0,(Z.start+Z.count)*a0)),$!==null?(f0=Math.max(f0,0),g0=Math.min(g0,$.count)):c0!=null&&(f0=Math.max(f0,0),g0=Math.min(g0,c0.count));const M0=g0-f0;if(M0<0||M0===1/0)return;F0.setup(z,A,J,O,$);let q0,k0=Y0;if($!==null&&(q0=S.get($),k0=j0,k0.setIndex(q0)),z.isMesh)A.wireframe===!0?(D0.setLineWidth(A.wireframeLinewidth*fe()),k0.setMode(j.LINES)):k0.setMode(j.TRIANGLES);else if(z.isLine){let z0=A.linewidth;z0===void 0&&(z0=1),D0.setLineWidth(z0*fe()),z.isLineSegments?k0.setMode(j.LINES):z.isLineLoop?k0.setMode(j.LINE_LOOP):k0.setMode(j.LINE_STRIP)}else z.isPoints?k0.setMode(j.POINTS):z.isSprite&&k0.setMode(j.TRIANGLES);if(z.isBatchedMesh)if(z._multiDrawInstances!==null)v1("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),k0.renderMultiDrawInstances(z._multiDrawStarts,z._multiDrawCounts,z._multiDrawCount,z._multiDrawInstances);else if(we.get("WEBGL_multi_draw"))k0.renderMultiDraw(z._multiDrawStarts,z._multiDrawCounts,z._multiDrawCount);else{const z0=z._multiDrawStarts,$0=z._multiDrawCounts,E0=z._multiDrawCount,Te=$?S.get($).bytesPerElement:1,tt=G0.get(A).currentProgram.getUniforms();for(let xe=0;xe<E0;xe++)tt.setValue(j,"_gl_DrawID",xe),k0.render(z0[xe]/Te,$0[xe])}else if(z.isInstancedMesh)k0.renderInstances(f0,M0,z.count);else if(O.isInstancedBufferGeometry){const z0=O._maxInstanceCount!==void 0?O._maxInstanceCount:1/0,$0=Math.min(O.instanceCount,z0);k0.renderInstances(f0,M0,$0)}else k0.render(f0,M0)};function Pe(w,E,O){w.transparent===!0&&w.side===wn&&w.forceSinglePass===!1?(w.side=Wt,w.needsUpdate=!0,Vi(w,E,O),w.side=Zn,w.needsUpdate=!0,Vi(w,E,O),w.side=wn):Vi(w,E,O)}this.compile=function(w,E,O=null){O===null&&(O=w),f=H0.get(O),f.init(E),M.push(f),O.traverseVisible(function(z){z.isLight&&z.layers.test(E.layers)&&(f.pushLight(z),z.castShadow&&f.pushShadow(z))}),w!==O&&w.traverseVisible(function(z){z.isLight&&z.layers.test(E.layers)&&(f.pushLight(z),z.castShadow&&f.pushShadow(z))}),f.setupLights();const A=new Set;return w.traverse(function(z){if(!(z.isMesh||z.isPoints||z.isLine||z.isSprite))return;const Z=z.material;if(Z)if(Array.isArray(Z))for(let k=0;k<Z.length;k++){const J=Z[k];Pe(J,O,z),A.add(J)}else Pe(Z,O,z),A.add(Z)}),f=M.pop(),A},this.compileAsync=function(w,E,O=null){const A=this.compile(w,E,O);return new Promise(z=>{function Z(){if(A.forEach(function(k){G0.get(k).currentProgram.isReady()&&A.delete(k)}),A.size===0){z(w);return}setTimeout(Z,10)}we.get("KHR_parallel_shader_compile")!==null?Z():setTimeout(Z,10)})};let Ut=null;function tn(w){Ut&&Ut(w)}function Ms(){Ln.stop()}function Es(){Ln.start()}const Ln=new K4;Ln.setAnimationLoop(tn),typeof self<"u"&&Ln.setContext(self),this.setAnimationLoop=function(w){Ut=w,h0.setAnimationLoop(w),w===null?Ln.stop():Ln.start()},h0.addEventListener("sessionstart",Ms),h0.addEventListener("sessionend",Es),this.render=function(w,E){if(E!==void 0&&E.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(V===!0)return;if(w.matrixWorldAutoUpdate===!0&&w.updateMatrixWorld(),E.parent===null&&E.matrixWorldAutoUpdate===!0&&E.updateMatrixWorld(),h0.enabled===!0&&h0.isPresenting===!0&&(h0.cameraAutoUpdate===!0&&h0.updateCamera(E),E=h0.getCamera()),w.isScene===!0&&w.onBeforeRender(P,w,E,G),f=H0.get(w,M.length),f.init(E),M.push(f),I0.multiplyMatrices(E.projectionMatrix,E.matrixWorldInverse),s0.setFromProjectionMatrix(I0),T0=this.localClippingEnabled,w0=C0.init(this.clippingPlanes,T0),m=A0.get(w,N.length),m.init(),N.push(m),h0.enabled===!0&&h0.isPresenting===!0){const Z=P.xr.getDepthSensingMesh();Z!==null&&A1(Z,E,-1/0,P.sortObjects)}A1(w,E,0,P.sortObjects),m.finish(),P.sortObjects===!0&&m.sort(x0,R0),Oe=h0.enabled===!1||h0.isPresenting===!1||h0.hasDepthSensing()===!1,Oe&&l0.addToRenderList(m,w),this.info.render.frame++,w0===!0&&C0.beginShadows();const O=f.state.shadowsArray;W0.render(O,w,E),w0===!0&&C0.endShadows(),this.info.autoReset===!0&&this.info.reset();const A=m.opaque,z=m.transmissive;if(f.setupLights(),E.isArrayCamera){const Z=E.cameras;if(z.length>0)for(let k=0,J=Z.length;k<J;k++){const $=Z[k];Os(A,z,w,$)}Oe&&l0.render(w);for(let k=0,J=Z.length;k<J;k++){const $=Z[k];C1(m,w,$,$.viewport)}}else z.length>0&&Os(A,z,w,E),Oe&&l0.render(w),C1(m,w,E);G!==null&&D===0&&(ie.updateMultisampleRenderTarget(G),ie.updateRenderTargetMipmap(G)),w.isScene===!0&&w.onAfterRender(P,w,E),F0.resetDefaultState(),L=-1,H=null,M.pop(),M.length>0?(f=M[M.length-1],w0===!0&&C0.setGlobalState(P.clippingPlanes,f.state.camera)):f=null,N.pop(),N.length>0?m=N[N.length-1]:m=null};function A1(w,E,O,A){if(w.visible===!1)return;if(w.layers.test(E.layers)){if(w.isGroup)O=w.renderOrder;else if(w.isLOD)w.autoUpdate===!0&&w.update(E);else if(w.isLight)f.pushLight(w),w.castShadow&&f.pushShadow(w);else if(w.isSprite){if(!w.frustumCulled||s0.intersectsSprite(w)){A&&Z0.setFromMatrixPosition(w.matrixWorld).applyMatrix4(I0);const k=r0.update(w),J=w.material;J.visible&&m.push(w,k,J,O,Z0.z,null)}}else if((w.isMesh||w.isLine||w.isPoints)&&(!w.frustumCulled||s0.intersectsObject(w))){const k=r0.update(w),J=w.material;if(A&&(w.boundingSphere!==void 0?(w.boundingSphere===null&&w.computeBoundingSphere(),Z0.copy(w.boundingSphere.center)):(k.boundingSphere===null&&k.computeBoundingSphere(),Z0.copy(k.boundingSphere.center)),Z0.applyMatrix4(w.matrixWorld).applyMatrix4(I0)),Array.isArray(J)){const $=k.groups;for(let a0=0,o0=$.length;a0<o0;a0++){const c0=$[a0],f0=J[c0.materialIndex];f0&&f0.visible&&m.push(w,k,f0,O,Z0.z,c0)}}else J.visible&&m.push(w,k,J,O,Z0.z,null)}}const Z=w.children;for(let k=0,J=Z.length;k<J;k++)A1(Z[k],E,O,A)}function C1(w,E,O,A){const z=w.opaque,Z=w.transmissive,k=w.transparent;f.setupLightsView(O),w0===!0&&C0.setGlobalState(P.clippingPlanes,O),A&&D0.viewport(W.copy(A)),z.length>0&&Fi(z,E,O),Z.length>0&&Fi(Z,E,O),k.length>0&&Fi(k,E,O),D0.buffers.depth.setTest(!0),D0.buffers.depth.setMask(!0),D0.buffers.color.setMask(!0),D0.setPolygonOffset(!1)}function Os(w,E,O,A){if((O.isScene===!0?O.overrideMaterial:null)!==null)return;f.state.transmissionRenderTarget[A.id]===void 0&&(f.state.transmissionRenderTarget[A.id]=new Ei(1,1,{generateMipmaps:!0,type:we.has("EXT_color_buffer_half_float")||we.has("EXT_color_buffer_float")?jn:Sn,minFilter:xn,samples:4,stencilBuffer:r,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:ge.workingColorSpace}));const Z=f.state.transmissionRenderTarget[A.id],k=A.viewport||W;Z.setSize(k.z*P.transmissionResolutionScale,k.w*P.transmissionResolutionScale);const J=P.getRenderTarget(),$=P.getActiveCubeFace(),a0=P.getActiveMipmapLevel();P.setRenderTarget(Z),P.getClearColor(e0),u0=P.getClearAlpha(),u0<1&&P.setClearColor(16777215,.5),P.clear(),Oe&&l0.render(O);const o0=P.toneMapping;P.toneMapping=pi;const c0=A.viewport;if(A.viewport!==void 0&&(A.viewport=void 0),f.setupLightsView(A),w0===!0&&C0.setGlobalState(P.clippingPlanes,A),Fi(w,O,A),ie.updateMultisampleRenderTarget(Z),ie.updateRenderTargetMipmap(Z),we.has("WEBGL_multisampled_render_to_texture")===!1){let f0=!1;for(let g0=0,M0=E.length;g0<M0;g0++){const q0=E[g0],k0=q0.object,z0=q0.geometry,$0=q0.material,E0=q0.group;if($0.side===wn&&k0.layers.test(A.layers)){const Te=$0.side;$0.side=Wt,$0.needsUpdate=!0,zs(k0,O,A,z0,$0,E0),$0.side=Te,$0.needsUpdate=!0,f0=!0}}f0===!0&&(ie.updateMultisampleRenderTarget(Z),ie.updateRenderTargetMipmap(Z))}P.setRenderTarget(J,$,a0),P.setClearColor(e0,u0),c0!==void 0&&(A.viewport=c0),P.toneMapping=o0}function Fi(w,E,O){const A=E.isScene===!0?E.overrideMaterial:null;for(let z=0,Z=w.length;z<Z;z++){const k=w[z],J=k.object,$=k.geometry,a0=k.group;let o0=k.material;o0.allowOverride===!0&&A!==null&&(o0=A),J.layers.test(O.layers)&&zs(J,E,O,$,o0,a0)}}function zs(w,E,O,A,z,Z){w.onBeforeRender(P,E,O,A,z,Z),w.modelViewMatrix.multiplyMatrices(O.matrixWorldInverse,w.matrixWorld),w.normalMatrix.getNormalMatrix(w.modelViewMatrix),z.onBeforeRender(P,E,O,A,w,Z),z.transparent===!0&&z.side===wn&&z.forceSinglePass===!1?(z.side=Wt,z.needsUpdate=!0,P.renderBufferDirect(O,E,A,z,w,Z),z.side=Zn,z.needsUpdate=!0,P.renderBufferDirect(O,E,A,z,w,Z),z.side=wn):P.renderBufferDirect(O,E,A,z,w,Z),w.onAfterRender(P,E,O,A,z,Z)}function Vi(w,E,O){E.isScene!==!0&&(E=Le);const A=G0.get(w),z=f.state.lights,Z=f.state.shadowsArray,k=z.state.version,J=p0.getParameters(w,z.state,Z,E,O),$=p0.getProgramCacheKey(J);let a0=A.programs;A.environment=w.isMeshStandardMaterial?E.environment:null,A.fog=E.fog,A.envMap=(w.isMeshStandardMaterial?I:Qe).get(w.envMap||A.environment),A.envMapRotation=A.environment!==null&&w.envMap===null?E.environmentRotation:w.envMapRotation,a0===void 0&&(w.addEventListener("dispose",X0),a0=new Map,A.programs=a0);let o0=a0.get($);if(o0!==void 0){if(A.currentProgram===o0&&A.lightsStateVersion===k)return V1(w,J),o0}else J.uniforms=p0.getUniforms(w),w.onBeforeCompile(J,P),o0=p0.acquireProgram(J,$),a0.set($,o0),A.uniforms=J.uniforms;const c0=A.uniforms;return(!w.isShaderMaterial&&!w.isRawShaderMaterial||w.clipping===!0)&&(c0.clippingPlanes=C0.uniform),V1(w,J),A.needsLights=Bn(w),A.lightsStateVersion=k,A.needsLights&&(c0.ambientLightColor.value=z.state.ambient,c0.lightProbe.value=z.state.probe,c0.directionalLights.value=z.state.directional,c0.directionalLightShadows.value=z.state.directionalShadow,c0.spotLights.value=z.state.spot,c0.spotLightShadows.value=z.state.spotShadow,c0.rectAreaLights.value=z.state.rectArea,c0.ltc_1.value=z.state.rectAreaLTC1,c0.ltc_2.value=z.state.rectAreaLTC2,c0.pointLights.value=z.state.point,c0.pointLightShadows.value=z.state.pointShadow,c0.hemisphereLights.value=z.state.hemi,c0.directionalShadowMap.value=z.state.directionalShadowMap,c0.directionalShadowMatrix.value=z.state.directionalShadowMatrix,c0.spotShadowMap.value=z.state.spotShadowMap,c0.spotLightMatrix.value=z.state.spotLightMatrix,c0.spotLightMap.value=z.state.spotLightMap,c0.pointShadowMap.value=z.state.pointShadowMap,c0.pointShadowMatrix.value=z.state.pointShadowMatrix),A.currentProgram=o0,A.uniformsList=null,o0}function F1(w){if(w.uniformsList===null){const E=w.currentProgram.getUniforms();w.uniformsList=Vr.seqWithValue(E.seq,w.uniforms)}return w.uniformsList}function V1(w,E){const O=G0.get(w);O.outputColorSpace=E.outputColorSpace,O.batching=E.batching,O.batchingColor=E.batchingColor,O.instancing=E.instancing,O.instancingColor=E.instancingColor,O.instancingMorph=E.instancingMorph,O.skinning=E.skinning,O.morphTargets=E.morphTargets,O.morphNormals=E.morphNormals,O.morphColors=E.morphColors,O.morphTargetsCount=E.morphTargetsCount,O.numClippingPlanes=E.numClippingPlanes,O.numIntersection=E.numClipIntersection,O.vertexAlphas=E.vertexAlphas,O.vertexTangents=E.vertexTangents,O.toneMapping=E.toneMapping}function C2(w,E,O,A,z){E.isScene!==!0&&(E=Le),ie.resetTextureUnits();const Z=E.fog,k=A.isMeshStandardMaterial?E.environment:null,J=G===null?P.outputColorSpace:G.isXRRenderTarget===!0?G.texture.colorSpace:xt,$=(A.isMeshStandardMaterial?I:Qe).get(A.envMap||k),a0=A.vertexColors===!0&&!!O.attributes.color&&O.attributes.color.itemSize===4,o0=!!O.attributes.tangent&&(!!A.normalMap||A.anisotropy>0),c0=!!O.morphAttributes.position,f0=!!O.morphAttributes.normal,g0=!!O.morphAttributes.color;let M0=pi;A.toneMapped&&(G===null||G.isXRRenderTarget===!0)&&(M0=P.toneMapping);const q0=O.morphAttributes.position||O.morphAttributes.normal||O.morphAttributes.color,k0=q0!==void 0?q0.length:0,z0=G0.get(A),$0=f.state.lights;if(w0===!0&&(T0===!0||w!==H)){const De=w===H&&A.id===L;C0.setState(A,w,De)}let E0=!1;A.version===z0.__version?(z0.needsLights&&z0.lightsStateVersion!==$0.state.version||z0.outputColorSpace!==J||z.isBatchedMesh&&z0.batching===!1||!z.isBatchedMesh&&z0.batching===!0||z.isBatchedMesh&&z0.batchingColor===!0&&z.colorTexture===null||z.isBatchedMesh&&z0.batchingColor===!1&&z.colorTexture!==null||z.isInstancedMesh&&z0.instancing===!1||!z.isInstancedMesh&&z0.instancing===!0||z.isSkinnedMesh&&z0.skinning===!1||!z.isSkinnedMesh&&z0.skinning===!0||z.isInstancedMesh&&z0.instancingColor===!0&&z.instanceColor===null||z.isInstancedMesh&&z0.instancingColor===!1&&z.instanceColor!==null||z.isInstancedMesh&&z0.instancingMorph===!0&&z.morphTexture===null||z.isInstancedMesh&&z0.instancingMorph===!1&&z.morphTexture!==null||z0.envMap!==$||A.fog===!0&&z0.fog!==Z||z0.numClippingPlanes!==void 0&&(z0.numClippingPlanes!==C0.numPlanes||z0.numIntersection!==C0.numIntersection)||z0.vertexAlphas!==a0||z0.vertexTangents!==o0||z0.morphTargets!==c0||z0.morphNormals!==f0||z0.morphColors!==g0||z0.toneMapping!==M0||z0.morphTargetsCount!==k0)&&(E0=!0):(E0=!0,z0.__version=A.version);let Te=z0.currentProgram;E0===!0&&(Te=Vi(A,E,z));let tt=!1,xe=!1,ye=!1;const J0=Te.getUniforms(),Je=z0.uniforms;if(D0.useProgram(Te.program)&&(tt=!0,xe=!0,ye=!0),A.id!==L&&(L=A.id,xe=!0),tt||H!==w){D0.buffers.depth.getReversed()?(S0.copy(w.projectionMatrix),od(S0),ld(S0),J0.setValue(j,"projectionMatrix",S0)):J0.setValue(j,"projectionMatrix",w.projectionMatrix),J0.setValue(j,"viewMatrix",w.matrixWorldInverse);const nt=J0.map.cameraPosition;nt!==void 0&&nt.setValue(j,me.setFromMatrixPosition(w.matrixWorld)),ze.logarithmicDepthBuffer&&J0.setValue(j,"logDepthBufFC",2/(Math.log(w.far+1)/Math.LN2)),(A.isMeshPhongMaterial||A.isMeshToonMaterial||A.isMeshLambertMaterial||A.isMeshBasicMaterial||A.isMeshStandardMaterial||A.isShaderMaterial)&&J0.setValue(j,"isOrthographic",w.isOrthographicCamera===!0),H!==w&&(H=w,xe=!0,ye=!0)}if(z.isSkinnedMesh){J0.setOptional(j,z,"bindMatrix"),J0.setOptional(j,z,"bindMatrixInverse");const De=z.skeleton;De&&(De.boneTexture===null&&De.computeBoneTexture(),J0.setValue(j,"boneTexture",De.boneTexture,ie))}z.isBatchedMesh&&(J0.setOptional(j,z,"batchingTexture"),J0.setValue(j,"batchingTexture",z._matricesTexture,ie),J0.setOptional(j,z,"batchingIdTexture"),J0.setValue(j,"batchingIdTexture",z._indirectTexture,ie),J0.setOptional(j,z,"batchingColorTexture"),z._colorsTexture!==null&&J0.setValue(j,"batchingColorTexture",z._colorsTexture,ie));const ct=O.morphAttributes;if((ct.position!==void 0||ct.normal!==void 0||ct.color!==void 0)&&P0.update(z,O,Te),(xe||z0.receiveShadow!==z.receiveShadow)&&(z0.receiveShadow=z.receiveShadow,J0.setValue(j,"receiveShadow",z.receiveShadow)),A.isMeshGouraudMaterial&&A.envMap!==null&&(Je.envMap.value=$,Je.flipEnvMap.value=$.isCubeTexture&&$.isRenderTargetTexture===!1?-1:1),A.isMeshStandardMaterial&&A.envMap===null&&E.environment!==null&&(Je.envMapIntensity.value=E.environmentIntensity),xe&&(J0.setValue(j,"toneMappingExposure",P.toneMappingExposure),z0.needsLights&&Mn(Je,ye),Z&&A.fog===!0&&i0.refreshFogUniforms(Je,Z),i0.refreshMaterialUniforms(Je,A,t0,b0,f.state.transmissionRenderTarget[w.id]),Vr.upload(j,F1(z0),Je,ie)),A.isShaderMaterial&&A.uniformsNeedUpdate===!0&&(Vr.upload(j,F1(z0),Je,ie),A.uniformsNeedUpdate=!1),A.isSpriteMaterial&&J0.setValue(j,"center",z.center),J0.setValue(j,"modelViewMatrix",z.modelViewMatrix),J0.setValue(j,"normalMatrix",z.normalMatrix),J0.setValue(j,"modelMatrix",z.matrixWorld),A.isShaderMaterial||A.isRawShaderMaterial){const De=A.uniformsGroups;for(let nt=0,F2=De.length;nt<F2;nt++){const mi=De[nt];q.update(mi,Te),q.bind(mi,Te)}}return Te}function Mn(w,E){w.ambientLightColor.needsUpdate=E,w.lightProbe.needsUpdate=E,w.directionalLights.needsUpdate=E,w.directionalLightShadows.needsUpdate=E,w.pointLights.needsUpdate=E,w.pointLightShadows.needsUpdate=E,w.spotLights.needsUpdate=E,w.spotLightShadows.needsUpdate=E,w.rectAreaLights.needsUpdate=E,w.hemisphereLights.needsUpdate=E}function Bn(w){return w.isMeshLambertMaterial||w.isMeshToonMaterial||w.isMeshPhongMaterial||w.isMeshStandardMaterial||w.isShadowMaterial||w.isShaderMaterial&&w.lights===!0}this.getActiveCubeFace=function(){return C},this.getActiveMipmapLevel=function(){return D},this.getRenderTarget=function(){return G},this.setRenderTargetTextures=function(w,E,O){const A=G0.get(w);A.__autoAllocateDepthBuffer=w.resolveDepthBuffer===!1,A.__autoAllocateDepthBuffer===!1&&(A.__useRenderToTexture=!1),G0.get(w.texture).__webglTexture=E,G0.get(w.depthTexture).__webglTexture=A.__autoAllocateDepthBuffer?void 0:O,A.__hasExternalTextures=!0},this.setRenderTargetFramebuffer=function(w,E){const O=G0.get(w);O.__webglFramebuffer=E,O.__useDefaultFramebuffer=E===void 0};const g=j.createFramebuffer();this.setRenderTarget=function(w,E=0,O=0){G=w,C=E,D=O;let A=!0,z=null,Z=!1,k=!1;if(w){const $=G0.get(w);if($.__useDefaultFramebuffer!==void 0)D0.bindFramebuffer(j.FRAMEBUFFER,null),A=!1;else if($.__webglFramebuffer===void 0)ie.setupRenderTarget(w);else if($.__hasExternalTextures)ie.rebindTextures(w,G0.get(w.texture).__webglTexture,G0.get(w.depthTexture).__webglTexture);else if(w.depthBuffer){const c0=w.depthTexture;if($.__boundDepthTexture!==c0){if(c0!==null&&G0.has(c0)&&(w.width!==c0.image.width||w.height!==c0.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");ie.setupDepthRenderbuffer(w)}}const a0=w.texture;(a0.isData3DTexture||a0.isDataArrayTexture||a0.isCompressedArrayTexture)&&(k=!0);const o0=G0.get(w).__webglFramebuffer;w.isWebGLCubeRenderTarget?(Array.isArray(o0[E])?z=o0[E][O]:z=o0[E],Z=!0):w.samples>0&&ie.useMultisampledRTT(w)===!1?z=G0.get(w).__webglMultisampledFramebuffer:Array.isArray(o0)?z=o0[O]:z=o0,W.copy(w.viewport),B.copy(w.scissor),Q=w.scissorTest}else W.copy(V0).multiplyScalar(t0).floor(),B.copy(B0).multiplyScalar(t0).floor(),Q=ue;if(O!==0&&(z=g),D0.bindFramebuffer(j.FRAMEBUFFER,z)&&A&&D0.drawBuffers(w,z),D0.viewport(W),D0.scissor(B),D0.setScissorTest(Q),Z){const $=G0.get(w.texture);j.framebufferTexture2D(j.FRAMEBUFFER,j.COLOR_ATTACHMENT0,j.TEXTURE_CUBE_MAP_POSITIVE_X+E,$.__webglTexture,O)}else if(k){const $=G0.get(w.texture),a0=E;j.framebufferTextureLayer(j.FRAMEBUFFER,j.COLOR_ATTACHMENT0,$.__webglTexture,O,a0)}else if(w!==null&&O!==0){const $=G0.get(w.texture);j.framebufferTexture2D(j.FRAMEBUFFER,j.COLOR_ATTACHMENT0,j.TEXTURE_2D,$.__webglTexture,O)}L=-1},this.readRenderTargetPixels=function(w,E,O,A,z,Z,k,J=0){if(!(w&&w.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let $=G0.get(w).__webglFramebuffer;if(w.isWebGLCubeRenderTarget&&k!==void 0&&($=$[k]),$){D0.bindFramebuffer(j.FRAMEBUFFER,$);try{const a0=w.textures[J],o0=a0.format,c0=a0.type;if(!ze.textureFormatReadable(o0)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!ze.textureTypeReadable(c0)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}E>=0&&E<=w.width-A&&O>=0&&O<=w.height-z&&(w.textures.length>1&&j.readBuffer(j.COLOR_ATTACHMENT0+J),j.readPixels(E,O,A,z,v0.convert(o0),v0.convert(c0),Z))}finally{const a0=G!==null?G0.get(G).__webglFramebuffer:null;D0.bindFramebuffer(j.FRAMEBUFFER,a0)}}},this.readRenderTargetPixelsAsync=async function(w,E,O,A,z,Z,k,J=0){if(!(w&&w.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let $=G0.get(w).__webglFramebuffer;if(w.isWebGLCubeRenderTarget&&k!==void 0&&($=$[k]),$)if(E>=0&&E<=w.width-A&&O>=0&&O<=w.height-z){D0.bindFramebuffer(j.FRAMEBUFFER,$);const a0=w.textures[J],o0=a0.format,c0=a0.type;if(!ze.textureFormatReadable(o0))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!ze.textureTypeReadable(c0))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");const f0=j.createBuffer();j.bindBuffer(j.PIXEL_PACK_BUFFER,f0),j.bufferData(j.PIXEL_PACK_BUFFER,Z.byteLength,j.STREAM_READ),w.textures.length>1&&j.readBuffer(j.COLOR_ATTACHMENT0+J),j.readPixels(E,O,A,z,v0.convert(o0),v0.convert(c0),0);const g0=G!==null?G0.get(G).__webglFramebuffer:null;D0.bindFramebuffer(j.FRAMEBUFFER,g0);const M0=j.fenceSync(j.SYNC_GPU_COMMANDS_COMPLETE,0);return j.flush(),await ad(j,M0,4),j.bindBuffer(j.PIXEL_PACK_BUFFER,f0),j.getBufferSubData(j.PIXEL_PACK_BUFFER,0,Z),j.deleteBuffer(f0),j.deleteSync(M0),Z}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")},this.copyFramebufferToTexture=function(w,E=null,O=0){const A=Math.pow(2,-O),z=Math.floor(w.image.width*A),Z=Math.floor(w.image.height*A),k=E!==null?E.x:0,J=E!==null?E.y:0;ie.setTexture2D(w,0),j.copyTexSubImage2D(j.TEXTURE_2D,O,0,0,k,J,z,Z),D0.unbindTexture()};const R=j.createFramebuffer(),X=j.createFramebuffer();this.copyTextureToTexture=function(w,E,O=null,A=null,z=0,Z=null){Z===null&&(z!==0?(v1("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),Z=z,z=0):Z=0);let k,J,$,a0,o0,c0,f0,g0,M0;const q0=w.isCompressedTexture?w.mipmaps[Z]:w.image;if(O!==null)k=O.max.x-O.min.x,J=O.max.y-O.min.y,$=O.isBox3?O.max.z-O.min.z:1,a0=O.min.x,o0=O.min.y,c0=O.isBox3?O.min.z:0;else{const ct=Math.pow(2,-z);k=Math.floor(q0.width*ct),J=Math.floor(q0.height*ct),w.isDataArrayTexture?$=q0.depth:w.isData3DTexture?$=Math.floor(q0.depth*ct):$=1,a0=0,o0=0,c0=0}A!==null?(f0=A.x,g0=A.y,M0=A.z):(f0=0,g0=0,M0=0);const k0=v0.convert(E.format),z0=v0.convert(E.type);let $0;E.isData3DTexture?(ie.setTexture3D(E,0),$0=j.TEXTURE_3D):E.isDataArrayTexture||E.isCompressedArrayTexture?(ie.setTexture2DArray(E,0),$0=j.TEXTURE_2D_ARRAY):(ie.setTexture2D(E,0),$0=j.TEXTURE_2D),j.pixelStorei(j.UNPACK_FLIP_Y_WEBGL,E.flipY),j.pixelStorei(j.UNPACK_PREMULTIPLY_ALPHA_WEBGL,E.premultiplyAlpha),j.pixelStorei(j.UNPACK_ALIGNMENT,E.unpackAlignment);const E0=j.getParameter(j.UNPACK_ROW_LENGTH),Te=j.getParameter(j.UNPACK_IMAGE_HEIGHT),tt=j.getParameter(j.UNPACK_SKIP_PIXELS),xe=j.getParameter(j.UNPACK_SKIP_ROWS),ye=j.getParameter(j.UNPACK_SKIP_IMAGES);j.pixelStorei(j.UNPACK_ROW_LENGTH,q0.width),j.pixelStorei(j.UNPACK_IMAGE_HEIGHT,q0.height),j.pixelStorei(j.UNPACK_SKIP_PIXELS,a0),j.pixelStorei(j.UNPACK_SKIP_ROWS,o0),j.pixelStorei(j.UNPACK_SKIP_IMAGES,c0);const J0=w.isDataArrayTexture||w.isData3DTexture,Je=E.isDataArrayTexture||E.isData3DTexture;if(w.isDepthTexture){const ct=G0.get(w),De=G0.get(E),nt=G0.get(ct.__renderTarget),F2=G0.get(De.__renderTarget);D0.bindFramebuffer(j.READ_FRAMEBUFFER,nt.__webglFramebuffer),D0.bindFramebuffer(j.DRAW_FRAMEBUFFER,F2.__webglFramebuffer);for(let mi=0;mi<$;mi++)J0&&(j.framebufferTextureLayer(j.READ_FRAMEBUFFER,j.COLOR_ATTACHMENT0,G0.get(w).__webglTexture,z,c0+mi),j.framebufferTextureLayer(j.DRAW_FRAMEBUFFER,j.COLOR_ATTACHMENT0,G0.get(E).__webglTexture,Z,M0+mi)),j.blitFramebuffer(a0,o0,k,J,f0,g0,k,J,j.DEPTH_BUFFER_BIT,j.NEAREST);D0.bindFramebuffer(j.READ_FRAMEBUFFER,null),D0.bindFramebuffer(j.DRAW_FRAMEBUFFER,null)}else if(z!==0||w.isRenderTargetTexture||G0.has(w)){const ct=G0.get(w),De=G0.get(E);D0.bindFramebuffer(j.READ_FRAMEBUFFER,R),D0.bindFramebuffer(j.DRAW_FRAMEBUFFER,X);for(let nt=0;nt<$;nt++)J0?j.framebufferTextureLayer(j.READ_FRAMEBUFFER,j.COLOR_ATTACHMENT0,ct.__webglTexture,z,c0+nt):j.framebufferTexture2D(j.READ_FRAMEBUFFER,j.COLOR_ATTACHMENT0,j.TEXTURE_2D,ct.__webglTexture,z),Je?j.framebufferTextureLayer(j.DRAW_FRAMEBUFFER,j.COLOR_ATTACHMENT0,De.__webglTexture,Z,M0+nt):j.framebufferTexture2D(j.DRAW_FRAMEBUFFER,j.COLOR_ATTACHMENT0,j.TEXTURE_2D,De.__webglTexture,Z),z!==0?j.blitFramebuffer(a0,o0,k,J,f0,g0,k,J,j.COLOR_BUFFER_BIT,j.NEAREST):Je?j.copyTexSubImage3D($0,Z,f0,g0,M0+nt,a0,o0,k,J):j.copyTexSubImage2D($0,Z,f0,g0,a0,o0,k,J);D0.bindFramebuffer(j.READ_FRAMEBUFFER,null),D0.bindFramebuffer(j.DRAW_FRAMEBUFFER,null)}else Je?w.isDataTexture||w.isData3DTexture?j.texSubImage3D($0,Z,f0,g0,M0,k,J,$,k0,z0,q0.data):E.isCompressedArrayTexture?j.compressedTexSubImage3D($0,Z,f0,g0,M0,k,J,$,k0,q0.data):j.texSubImage3D($0,Z,f0,g0,M0,k,J,$,k0,z0,q0):w.isDataTexture?j.texSubImage2D(j.TEXTURE_2D,Z,f0,g0,k,J,k0,z0,q0.data):w.isCompressedTexture?j.compressedTexSubImage2D(j.TEXTURE_2D,Z,f0,g0,q0.width,q0.height,k0,q0.data):j.texSubImage2D(j.TEXTURE_2D,Z,f0,g0,k,J,k0,z0,q0);j.pixelStorei(j.UNPACK_ROW_LENGTH,E0),j.pixelStorei(j.UNPACK_IMAGE_HEIGHT,Te),j.pixelStorei(j.UNPACK_SKIP_PIXELS,tt),j.pixelStorei(j.UNPACK_SKIP_ROWS,xe),j.pixelStorei(j.UNPACK_SKIP_IMAGES,ye),Z===0&&E.generateMipmaps&&j.generateMipmap($0),D0.unbindTexture()},this.copyTextureToTexture3D=function(w,E,O=null,A=null,z=0){return v1('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(w,E,O,A,z)},this.initRenderTarget=function(w){G0.get(w).__webglFramebuffer===void 0&&ie.setupRenderTarget(w)},this.initTexture=function(w){w.isCubeTexture?ie.setTextureCube(w,0):w.isData3DTexture?ie.setTexture3D(w,0):w.isDataArrayTexture||w.isCompressedArrayTexture?ie.setTexture2DArray(w,0):ie.setTexture2D(w,0),D0.unbindTexture()},this.resetState=function(){C=0,D=0,G=null,D0.reset(),F0.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Wn}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=ge._getDrawingBufferColorSpace(e),t.unpackColorSpace=ge._getUnpackColorSpace()}}const k1=new x;function Jt(i,e,t,n,s,r){const a=2*Math.PI*s/4,o=Math.max(r-2*s,0),l=Math.PI/4;k1.copy(e),k1[n]=0,k1.normalize();const d=.5*a/(a+o),c=1-k1.angleTo(i)/l;return Math.sign(k1[t])===1?c*d:o/(a+o)+d+d*(1-c)}class um extends en{constructor(e=1,t=1,n=1,s=2,r=.1){if(s=s*2+1,r=Math.min(e/2,t/2,n/2,r),super(e,t,n,s,s,s),s===1)return;const a=this.toNonIndexed();this.index=null,this.attributes.position=a.attributes.position,this.attributes.normal=a.attributes.normal,this.attributes.uv=a.attributes.uv;const o=new x,l=new x,d=new x(e,t,n).divideScalar(2).subScalar(r),c=this.attributes.position.array,u=this.attributes.normal.array,p=this.attributes.uv.array,h=c.length/6,b=new x,T=.5/s;for(let m=0,f=0;m<c.length;m+=3,f+=2)switch(o.fromArray(c,m),l.copy(o),l.x-=Math.sign(l.x)*T,l.y-=Math.sign(l.y)*T,l.z-=Math.sign(l.z)*T,l.normalize(),c[m+0]=d.x*Math.sign(o.x)+l.x*r,c[m+1]=d.y*Math.sign(o.y)+l.y*r,c[m+2]=d.z*Math.sign(o.z)+l.z*r,u[m+0]=l.x,u[m+1]=l.y,u[m+2]=l.z,Math.floor(m/h)){case 0:b.set(1,0,0),p[f+0]=Jt(b,l,"z","y",r,n),p[f+1]=1-Jt(b,l,"y","z",r,t);break;case 1:b.set(-1,0,0),p[f+0]=1-Jt(b,l,"z","y",r,n),p[f+1]=1-Jt(b,l,"y","z",r,t);break;case 2:b.set(0,1,0),p[f+0]=1-Jt(b,l,"x","z",r,e),p[f+1]=Jt(b,l,"z","x",r,n);break;case 3:b.set(0,-1,0),p[f+0]=1-Jt(b,l,"x","z",r,e),p[f+1]=1-Jt(b,l,"z","x",r,n);break;case 4:b.set(0,0,1),p[f+0]=1-Jt(b,l,"x","y",r,e),p[f+1]=1-Jt(b,l,"y","x",r,t);break;case 5:b.set(0,0,-1),p[f+0]=Jt(b,l,"x","y",r,e),p[f+1]=1-Jt(b,l,"y","x",r,t);break}}}const J1=new x,K1=new x,V9=new re;class pm extends _o{constructor(e,t=1,n=16711680){const s=new Mt,r=e.geometry.attributes.normal.count,a=new wt(r*2*3,3);s.setAttribute("position",a),super(s,new bs({color:n,toneMapped:!1})),this.object=e,this.size=t,this.type="VertexNormalsHelper",this.matrixAutoUpdate=!1,this.isVertexNormalsHelper=!0,this.update()}update(){this.object.updateMatrixWorld(!0),V9.getNormalMatrix(this.object.matrixWorld);const e=this.object.matrixWorld,t=this.geometry.attributes.position,n=this.object.geometry;if(n){const s=n.attributes.position,r=n.attributes.normal;let a=0;for(let o=0,l=s.count;o<l;o++)J1.fromBufferAttribute(s,o).applyMatrix4(e),K1.fromBufferAttribute(r,o),K1.applyMatrix3(V9).normalize().multiplyScalar(this.size).add(J1),t.setXYZ(a,J1.x,J1.y,J1.z),a=a+1,t.setXYZ(a,K1.x,K1.y,K1.z),a=a+1}t.needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}class fm{constructor({scene:e,joints:t=[]}){this.#e=e,this.#t=t}#e;#t;#n=new Map;#o=new WeakMap;#a=new WeakMap;initialize(){this.#e.forEachCollider(e=>{let t=this.#a.get(e.parent());t||(t=Math.round(16777215*Math.random()),this.#a.set(e.parent(),t));const n=new bs({color:t}),s=e.shapeType(),r=e.translation(),a=e.rotation();let o;if(s===0){const l=e.radius();o=new kr(l,8,8)}else if(s===1){const l=e.halfExtents();o=new en(l.x*2,l.y*2,l.z*2)}else if(s===6||s===9){const l=e.vertices(),d=e.indices();o=new Mt,o.setIndex(new ko(d,1)),o.setAttribute("position",new wt(l,3))}else if(s===10){const l=e.radius(),d=e.halfHeight()*2;o=new T2(l,l,d,6)}else if(s===12){const l=e.halfExtents();o=new um(l.x*2,l.y*2,l.z*2,1,e.roundRadius())}else console.warn("Unsupported collider shape:",s);if(o){o.computeVertexNormals();const l=new _o(new Yd(o),n);l.position.set(r.x,r.y,r.z),l.quaternion.set(a.x,a.y,a.z,a.w),l.material.depthTest=!1,l.material.transparent=!0,l.material.opacity=.5,this.#e.addObject(l);const d=new Be(o);d.position.copy(r),d.quaternion.copy(a);const c=new pm(d,.025);c.material.transparent=!0,c.material.opacity=.25,this.#e.addObject(c),this.#n.set(e,{wireframe:l,normalsHelper:c,normalMesh:d})}}),this.#t.forEach(({joint:e,jointData:t})=>{const n=new kr(5e-4,4,4),s=e.body1(),r=e.body2(),a=new Un({color:this.#a.get(s),depthTest:!1}),o=new Un({color:this.#a.get(r),depthTest:!1}),l=new Be(n,a),d=new Be(n,o),c=t1(e.body1(),e.anchor1()),u=t1(e.body2(),e.anchor2());l.position.copy(c),d.position.copy(u),this.#e.addObject(l),this.#e.addObject(d);const p={anchor1Mesh:l,anchor2Mesh:d};if(t.axis!==void 0){const h=t1(e.body1(),e.anchor1()),b=t.axis.clone().applyQuaternion(e.body1().rotation()),T=h.clone().add(b.multiplyScalar(.02)),m=new Mt().setFromPoints([h,T]),f=new bs({color:16776960,depthTest:!1}),N=new w2(m,f);this.#e.addObject(N),p.axisLine=N,p.axis=t.axis}this.#o.set(e,p)})}update(){this.#e.forEachCollider(e=>{const t=this.#n.get(e);if(t){const{wireframe:n,normalsHelper:s,normalMesh:r}=t,a=e.translation(),o=e.rotation();n.position.set(a.x,a.y,a.z),n.quaternion.set(o.x,o.y,o.z,o.w);const l=e.parent().isSleeping();r.position.set(a.x,a.y,a.z),r.quaternion.set(o.x,o.y,o.z,o.w);const d=l?0:this.#a.get(e.parent());s.material.color.setHex(d),s.update()}}),this.#t.forEach(({joint:e})=>{const{anchor1Mesh:t,anchor2Mesh:n,axisLine:s,axis:r}=this.#o.get(e),a=t1(e.body1(),e.anchor1()),o=t1(e.body2(),e.anchor2());if(t.position.copy(a),n.position.copy(o),s){const l=t1(e.body1(),e.anchor1()),d=r.clone().applyQuaternion(e.body1().rotation()),c=.01,u=l.clone().add(d.clone().multiplyScalar(-c)),p=l.clone().add(d.clone().multiplyScalar(c));s.geometry.setFromPoints([u,p])}})}}function t1(i,e){const t=new x().copy(i.translation());return t.add(new x().copy(e).applyQuaternion(i.rotation())),t}class hm{constructor({containerElement:e}){this.#e=document.createElement("div"),this.#e.style.position="absolute",this.#e.style.top="10px",this.#e.style.left="10px",this.#e.style.color="white",this.#e.style.fontSize="20px",this.#e.style.zIndex="1000",this.#e.style.pointerEvents="none",this.#e.style.userSelect="none",this.#e.style.fontFamily="Arial, sans-serif",this.#e.style.backgroundColor="rgba(0, 0, 0, 0.5)",this.#e.style.padding="5px",this.#e.style.borderRadius="5px",this.#e.style.boxShadow="0 0 10px rgba(0, 0, 0, 0.5)",e.appendChild(this.#e)}#e=null;#t=0;initialize(){}update(){const e=performance.now();if(this.#t){const t=e-this.#t;let n=Math.round(1e3/t);this.#e.innerText=`FPS: ${n}`}this.#t=e}}class mm{constructor({scene:e,containerElement:t}){this.#e=e,this.#t=document.createElement("div"),this.#t.style.position="absolute",this.#t.style.bottom="10px",this.#t.style.left="10px",this.#t.style.color="white",this.#t.style.fontSize="20px",this.#t.style.zIndex="1000",this.#t.style.pointerEvents="none",this.#t.style.userSelect="none",this.#t.style.fontFamily="Arial, sans-serif",this.#t.style.backgroundColor="rgba(0, 0, 0, 0.5)",this.#t.style.padding="5px",this.#t.style.borderRadius="5px",this.#t.style.boxShadow="0 0 10px rgba(0, 0, 0, 0.5)",t.appendChild(this.#t)}#e=null;#t=null;initialize(){}update(){const e=this.#e.triangles;this.#t.innerText=`Polygons: ${Intl.NumberFormat("en-US").format(e)}`}}const D9={type:"change"},r7={type:"start"},e8={type:"end"},dr=new E1,j9=new oi,ym=Math.cos(70*O4.DEG2RAD),it=new x,Ct=2*Math.PI,Fe={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},w3=1e-6;class bm extends Rc{constructor(e,t=null){super(e,t),this.state=Fe.NONE,this.target=new x,this.cursor=new x,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.keyRotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:m1.ROTATE,MIDDLE:m1.DOLLY,RIGHT:m1.PAN},this.touches={ONE:c1.ROTATE,TWO:c1.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this._lastPosition=new x,this._lastQuaternion=new _0,this._lastTargetPosition=new x,this._quat=new _0().setFromUnitVectors(e.up,new x(0,1,0)),this._quatInverse=this._quat.clone().invert(),this._spherical=new f9,this._sphericalDelta=new f9,this._scale=1,this._panOffset=new x,this._rotateStart=new ee,this._rotateEnd=new ee,this._rotateDelta=new ee,this._panStart=new ee,this._panEnd=new ee,this._panDelta=new ee,this._dollyStart=new ee,this._dollyEnd=new ee,this._dollyDelta=new ee,this._dollyDirection=new x,this._mouse=new ee,this._performCursorZoom=!1,this._pointers=[],this._pointerPositions={},this._controlActive=!1,this._onPointerMove=gm.bind(this),this._onPointerDown=vm.bind(this),this._onPointerUp=wm.bind(this),this._onContextMenu=Nm.bind(this),this._onMouseWheel=Sm.bind(this),this._onKeyDown=Pm.bind(this),this._onTouchStart=Hm.bind(this),this._onTouchMove=Rm.bind(this),this._onMouseDown=Tm.bind(this),this._onMouseMove=xm.bind(this),this._interceptControlDown=Lm.bind(this),this._interceptControlUp=Mm.bind(this),this.domElement!==null&&this.connect(this.domElement),this.update()}connect(e){super.connect(e),this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerUp),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.getRootNode().addEventListener("keydown",this._interceptControlDown,{passive:!0,capture:!0}),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerUp),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.stopListenToKeyEvents(),this.domElement.getRootNode().removeEventListener("keydown",this._interceptControlDown,{capture:!0}),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}getPolarAngle(){return this._spherical.phi}getAzimuthalAngle(){return this._spherical.theta}getDistance(){return this.object.position.distanceTo(this.target)}listenToKeyEvents(e){e.addEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=e}stopListenToKeyEvents(){this._domElementKeyEvents!==null&&(this._domElementKeyEvents.removeEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=null)}saveState(){this.target0.copy(this.target),this.position0.copy(this.object.position),this.zoom0=this.object.zoom}reset(){this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(D9),this.update(),this.state=Fe.NONE}update(e=null){const t=this.object.position;it.copy(t).sub(this.target),it.applyQuaternion(this._quat),this._spherical.setFromVector3(it),this.autoRotate&&this.state===Fe.NONE&&this._rotateLeft(this._getAutoRotationAngle(e)),this.enableDamping?(this._spherical.theta+=this._sphericalDelta.theta*this.dampingFactor,this._spherical.phi+=this._sphericalDelta.phi*this.dampingFactor):(this._spherical.theta+=this._sphericalDelta.theta,this._spherical.phi+=this._sphericalDelta.phi);let n=this.minAzimuthAngle,s=this.maxAzimuthAngle;isFinite(n)&&isFinite(s)&&(n<-Math.PI?n+=Ct:n>Math.PI&&(n-=Ct),s<-Math.PI?s+=Ct:s>Math.PI&&(s-=Ct),n<=s?this._spherical.theta=Math.max(n,Math.min(s,this._spherical.theta)):this._spherical.theta=this._spherical.theta>(n+s)/2?Math.max(n,this._spherical.theta):Math.min(s,this._spherical.theta)),this._spherical.phi=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,this._spherical.phi)),this._spherical.makeSafe(),this.enableDamping===!0?this.target.addScaledVector(this._panOffset,this.dampingFactor):this.target.add(this._panOffset),this.target.sub(this.cursor),this.target.clampLength(this.minTargetRadius,this.maxTargetRadius),this.target.add(this.cursor);let r=!1;if(this.zoomToCursor&&this._performCursorZoom||this.object.isOrthographicCamera)this._spherical.radius=this._clampDistance(this._spherical.radius);else{const a=this._spherical.radius;this._spherical.radius=this._clampDistance(this._spherical.radius*this._scale),r=a!=this._spherical.radius}if(it.setFromSpherical(this._spherical),it.applyQuaternion(this._quatInverse),t.copy(this.target).add(it),this.object.lookAt(this.target),this.enableDamping===!0?(this._sphericalDelta.theta*=1-this.dampingFactor,this._sphericalDelta.phi*=1-this.dampingFactor,this._panOffset.multiplyScalar(1-this.dampingFactor)):(this._sphericalDelta.set(0,0,0),this._panOffset.set(0,0,0)),this.zoomToCursor&&this._performCursorZoom){let a=null;if(this.object.isPerspectiveCamera){const o=it.length();a=this._clampDistance(o*this._scale);const l=o-a;this.object.position.addScaledVector(this._dollyDirection,l),this.object.updateMatrixWorld(),r=!!l}else if(this.object.isOrthographicCamera){const o=new x(this._mouse.x,this._mouse.y,0);o.unproject(this.object);const l=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),this.object.updateProjectionMatrix(),r=l!==this.object.zoom;const d=new x(this._mouse.x,this._mouse.y,0);d.unproject(this.object),this.object.position.sub(d).add(o),this.object.updateMatrixWorld(),a=it.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),this.zoomToCursor=!1;a!==null&&(this.screenSpacePanning?this.target.set(0,0,-1).transformDirection(this.object.matrix).multiplyScalar(a).add(this.object.position):(dr.origin.copy(this.object.position),dr.direction.set(0,0,-1).transformDirection(this.object.matrix),Math.abs(this.object.up.dot(dr.direction))<ym?this.object.lookAt(this.target):(j9.setFromNormalAndCoplanarPoint(this.object.up,this.target),dr.intersectPlane(j9,this.target))))}else if(this.object.isOrthographicCamera){const a=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),a!==this.object.zoom&&(this.object.updateProjectionMatrix(),r=!0)}return this._scale=1,this._performCursorZoom=!1,r||this._lastPosition.distanceToSquared(this.object.position)>w3||8*(1-this._lastQuaternion.dot(this.object.quaternion))>w3||this._lastTargetPosition.distanceToSquared(this.target)>w3?(this.dispatchEvent(D9),this._lastPosition.copy(this.object.position),this._lastQuaternion.copy(this.object.quaternion),this._lastTargetPosition.copy(this.target),!0):!1}_getAutoRotationAngle(e){return e!==null?Ct/60*this.autoRotateSpeed*e:Ct/60/60*this.autoRotateSpeed}_getZoomScale(e){const t=Math.abs(e*.01);return Math.pow(.95,this.zoomSpeed*t)}_rotateLeft(e){this._sphericalDelta.theta-=e}_rotateUp(e){this._sphericalDelta.phi-=e}_panLeft(e,t){it.setFromMatrixColumn(t,0),it.multiplyScalar(-e),this._panOffset.add(it)}_panUp(e,t){this.screenSpacePanning===!0?it.setFromMatrixColumn(t,1):(it.setFromMatrixColumn(t,0),it.crossVectors(this.object.up,it)),it.multiplyScalar(e),this._panOffset.add(it)}_pan(e,t){const n=this.domElement;if(this.object.isPerspectiveCamera){const s=this.object.position;it.copy(s).sub(this.target);let r=it.length();r*=Math.tan(this.object.fov/2*Math.PI/180),this._panLeft(2*e*r/n.clientHeight,this.object.matrix),this._panUp(2*t*r/n.clientHeight,this.object.matrix)}else this.object.isOrthographicCamera?(this._panLeft(e*(this.object.right-this.object.left)/this.object.zoom/n.clientWidth,this.object.matrix),this._panUp(t*(this.object.top-this.object.bottom)/this.object.zoom/n.clientHeight,this.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),this.enablePan=!1)}_dollyOut(e){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale/=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_dollyIn(e){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale*=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_updateZoomParameters(e,t){if(!this.zoomToCursor)return;this._performCursorZoom=!0;const n=this.domElement.getBoundingClientRect(),s=e-n.left,r=t-n.top,a=n.width,o=n.height;this._mouse.x=s/a*2-1,this._mouse.y=-(r/o)*2+1,this._dollyDirection.set(this._mouse.x,this._mouse.y,1).unproject(this.object).sub(this.object.position).normalize()}_clampDistance(e){return Math.max(this.minDistance,Math.min(this.maxDistance,e))}_handleMouseDownRotate(e){this._rotateStart.set(e.clientX,e.clientY)}_handleMouseDownDolly(e){this._updateZoomParameters(e.clientX,e.clientX),this._dollyStart.set(e.clientX,e.clientY)}_handleMouseDownPan(e){this._panStart.set(e.clientX,e.clientY)}_handleMouseMoveRotate(e){this._rotateEnd.set(e.clientX,e.clientY),this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const t=this.domElement;this._rotateLeft(Ct*this._rotateDelta.x/t.clientHeight),this._rotateUp(Ct*this._rotateDelta.y/t.clientHeight),this._rotateStart.copy(this._rotateEnd),this.update()}_handleMouseMoveDolly(e){this._dollyEnd.set(e.clientX,e.clientY),this._dollyDelta.subVectors(this._dollyEnd,this._dollyStart),this._dollyDelta.y>0?this._dollyOut(this._getZoomScale(this._dollyDelta.y)):this._dollyDelta.y<0&&this._dollyIn(this._getZoomScale(this._dollyDelta.y)),this._dollyStart.copy(this._dollyEnd),this.update()}_handleMouseMovePan(e){this._panEnd.set(e.clientX,e.clientY),this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd),this.update()}_handleMouseWheel(e){this._updateZoomParameters(e.clientX,e.clientY),e.deltaY<0?this._dollyIn(this._getZoomScale(e.deltaY)):e.deltaY>0&&this._dollyOut(this._getZoomScale(e.deltaY)),this.update()}_handleKeyDown(e){let t=!1;switch(e.code){case this.keys.UP:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateUp(Ct*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,this.keyPanSpeed),t=!0;break;case this.keys.BOTTOM:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateUp(-Ct*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,-this.keyPanSpeed),t=!0;break;case this.keys.LEFT:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateLeft(Ct*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(this.keyPanSpeed,0),t=!0;break;case this.keys.RIGHT:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateLeft(-Ct*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(-this.keyPanSpeed,0),t=!0;break}t&&(e.preventDefault(),this.update())}_handleTouchStartRotate(e){if(this._pointers.length===1)this._rotateStart.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),s=.5*(e.pageY+t.y);this._rotateStart.set(n,s)}}_handleTouchStartPan(e){if(this._pointers.length===1)this._panStart.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),s=.5*(e.pageY+t.y);this._panStart.set(n,s)}}_handleTouchStartDolly(e){const t=this._getSecondPointerPosition(e),n=e.pageX-t.x,s=e.pageY-t.y,r=Math.sqrt(n*n+s*s);this._dollyStart.set(0,r)}_handleTouchStartDollyPan(e){this.enableZoom&&this._handleTouchStartDolly(e),this.enablePan&&this._handleTouchStartPan(e)}_handleTouchStartDollyRotate(e){this.enableZoom&&this._handleTouchStartDolly(e),this.enableRotate&&this._handleTouchStartRotate(e)}_handleTouchMoveRotate(e){if(this._pointers.length==1)this._rotateEnd.set(e.pageX,e.pageY);else{const n=this._getSecondPointerPosition(e),s=.5*(e.pageX+n.x),r=.5*(e.pageY+n.y);this._rotateEnd.set(s,r)}this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const t=this.domElement;this._rotateLeft(Ct*this._rotateDelta.x/t.clientHeight),this._rotateUp(Ct*this._rotateDelta.y/t.clientHeight),this._rotateStart.copy(this._rotateEnd)}_handleTouchMovePan(e){if(this._pointers.length===1)this._panEnd.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),s=.5*(e.pageY+t.y);this._panEnd.set(n,s)}this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd)}_handleTouchMoveDolly(e){const t=this._getSecondPointerPosition(e),n=e.pageX-t.x,s=e.pageY-t.y,r=Math.sqrt(n*n+s*s);this._dollyEnd.set(0,r),this._dollyDelta.set(0,Math.pow(this._dollyEnd.y/this._dollyStart.y,this.zoomSpeed)),this._dollyOut(this._dollyDelta.y),this._dollyStart.copy(this._dollyEnd);const a=(e.pageX+t.x)*.5,o=(e.pageY+t.y)*.5;this._updateZoomParameters(a,o)}_handleTouchMoveDollyPan(e){this.enableZoom&&this._handleTouchMoveDolly(e),this.enablePan&&this._handleTouchMovePan(e)}_handleTouchMoveDollyRotate(e){this.enableZoom&&this._handleTouchMoveDolly(e),this.enableRotate&&this._handleTouchMoveRotate(e)}_addPointer(e){this._pointers.push(e.pointerId)}_removePointer(e){delete this._pointerPositions[e.pointerId];for(let t=0;t<this._pointers.length;t++)if(this._pointers[t]==e.pointerId){this._pointers.splice(t,1);return}}_isTrackingPointer(e){for(let t=0;t<this._pointers.length;t++)if(this._pointers[t]==e.pointerId)return!0;return!1}_trackPointer(e){let t=this._pointerPositions[e.pointerId];t===void 0&&(t=new ee,this._pointerPositions[e.pointerId]=t),t.set(e.pageX,e.pageY)}_getSecondPointerPosition(e){const t=e.pointerId===this._pointers[0]?this._pointers[1]:this._pointers[0];return this._pointerPositions[t]}_customWheelEvent(e){const t=e.deltaMode,n={clientX:e.clientX,clientY:e.clientY,deltaY:e.deltaY};switch(t){case 1:n.deltaY*=16;break;case 2:n.deltaY*=100;break}return e.ctrlKey&&!this._controlActive&&(n.deltaY*=10),n}}function vm(i){this.enabled!==!1&&(this._pointers.length===0&&(this.domElement.setPointerCapture(i.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),!this._isTrackingPointer(i)&&(this._addPointer(i),i.pointerType==="touch"?this._onTouchStart(i):this._onMouseDown(i)))}function gm(i){this.enabled!==!1&&(i.pointerType==="touch"?this._onTouchMove(i):this._onMouseMove(i))}function wm(i){switch(this._removePointer(i),this._pointers.length){case 0:this.domElement.releasePointerCapture(i.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.dispatchEvent(e8),this.state=Fe.NONE;break;case 1:const e=this._pointers[0],t=this._pointerPositions[e];this._onTouchStart({pointerId:e,pageX:t.x,pageY:t.y});break}}function Tm(i){let e;switch(i.button){case 0:e=this.mouseButtons.LEFT;break;case 1:e=this.mouseButtons.MIDDLE;break;case 2:e=this.mouseButtons.RIGHT;break;default:e=-1}switch(e){case m1.DOLLY:if(this.enableZoom===!1)return;this._handleMouseDownDolly(i),this.state=Fe.DOLLY;break;case m1.ROTATE:if(i.ctrlKey||i.metaKey||i.shiftKey){if(this.enablePan===!1)return;this._handleMouseDownPan(i),this.state=Fe.PAN}else{if(this.enableRotate===!1)return;this._handleMouseDownRotate(i),this.state=Fe.ROTATE}break;case m1.PAN:if(i.ctrlKey||i.metaKey||i.shiftKey){if(this.enableRotate===!1)return;this._handleMouseDownRotate(i),this.state=Fe.ROTATE}else{if(this.enablePan===!1)return;this._handleMouseDownPan(i),this.state=Fe.PAN}break;default:this.state=Fe.NONE}this.state!==Fe.NONE&&this.dispatchEvent(r7)}function xm(i){switch(this.state){case Fe.ROTATE:if(this.enableRotate===!1)return;this._handleMouseMoveRotate(i);break;case Fe.DOLLY:if(this.enableZoom===!1)return;this._handleMouseMoveDolly(i);break;case Fe.PAN:if(this.enablePan===!1)return;this._handleMouseMovePan(i);break}}function Sm(i){this.enabled===!1||this.enableZoom===!1||this.state!==Fe.NONE||(i.preventDefault(),this.dispatchEvent(r7),this._handleMouseWheel(this._customWheelEvent(i)),this.dispatchEvent(e8))}function Pm(i){this.enabled!==!1&&this._handleKeyDown(i)}function Hm(i){switch(this._trackPointer(i),this._pointers.length){case 1:switch(this.touches.ONE){case c1.ROTATE:if(this.enableRotate===!1)return;this._handleTouchStartRotate(i),this.state=Fe.TOUCH_ROTATE;break;case c1.PAN:if(this.enablePan===!1)return;this._handleTouchStartPan(i),this.state=Fe.TOUCH_PAN;break;default:this.state=Fe.NONE}break;case 2:switch(this.touches.TWO){case c1.DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchStartDollyPan(i),this.state=Fe.TOUCH_DOLLY_PAN;break;case c1.DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchStartDollyRotate(i),this.state=Fe.TOUCH_DOLLY_ROTATE;break;default:this.state=Fe.NONE}break;default:this.state=Fe.NONE}this.state!==Fe.NONE&&this.dispatchEvent(r7)}function Rm(i){switch(this._trackPointer(i),this.state){case Fe.TOUCH_ROTATE:if(this.enableRotate===!1)return;this._handleTouchMoveRotate(i),this.update();break;case Fe.TOUCH_PAN:if(this.enablePan===!1)return;this._handleTouchMovePan(i),this.update();break;case Fe.TOUCH_DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchMoveDollyPan(i),this.update();break;case Fe.TOUCH_DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchMoveDollyRotate(i),this.update();break;default:this.state=Fe.NONE}}function Nm(i){this.enabled!==!1&&i.preventDefault()}function Lm(i){i.key==="Control"&&(this._controlActive=!0,this.domElement.getRootNode().addEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function Mm(i){i.key==="Control"&&(this._controlActive=!1,this.domElement.getRootNode().removeEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}const Em=new x(0,.45,0);class Om{constructor({camera:e,containerElement:t}){this.#e=e,this.#t=t}#e;#t;initialize(){const e=new bm(this.#e,this.#t);e.target.copy(Em),e.update()}update(){}}class n1{static DEBUG_COLLIDERS=!1;static DEBUG_FPS=!1;static DEBUG_POLYGONS=!1;static DEBUG_CONTROLS=!1;static#e;static#t;static#n;static#o;static#a;static#r;static#c;static async initialize({scene:e,containerElement:t,camera:n,joints:s}){this.#e=e,this.#t=t,this.#n=n,this.DEBUG_COLLIDERS&&(this.#o=new fm({scene:this.#e,joints:s}),this.#o.initialize()),this.DEBUG_FPS&&(this.#a=new hm({containerElement:this.#t}),this.#a.initialize()),this.DEBUG_POLYGONS&&(this.#r=new mm({scene:this.#e,containerElement:this.#t}),this.#r.initialize()),this.DEBUG_CONTROLS&&(this.#c=new Om({scene:this.#e,containerElement:this.#t,camera:this.#n}),this.#c.initialize())}static update(){this.DEBUG_COLLIDERS&&this.#o.update(),this.DEBUG_FPS&&this.#a.update(),this.DEBUG_POLYGONS&&this.#r.update(),this.DEBUG_CONTROLS&&this.#c.update()}}function W9(i,e){if(e===zl)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),i;if(e===Za||e===M4){let t=i.getIndex();if(t===null){const a=[],o=i.getAttribute("position");if(o!==void 0){for(let l=0;l<o.count;l++)a.push(l);i.setIndex(a),t=i.getIndex()}else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),i}const n=t.count-2,s=[];if(e===Za)for(let a=1;a<=n;a++)s.push(t.getX(0)),s.push(t.getX(a)),s.push(t.getX(a+1));else for(let a=0;a<n;a++)a%2===0?(s.push(t.getX(a)),s.push(t.getX(a+1)),s.push(t.getX(a+2))):(s.push(t.getX(a+2)),s.push(t.getX(a+1)),s.push(t.getX(a)));s.length/3!==n&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");const r=i.clone();return r.setIndex(s),r.clearGroups(),r}else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",e),i}class zm extends Ci{constructor(e){super(e),this.dracoLoader=null,this.ktx2Loader=null,this.meshoptDecoder=null,this.pluginCallbacks=[],this.register(function(t){return new Fm(t)}),this.register(function(t){return new Vm(t)}),this.register(function(t){return new km(t)}),this.register(function(t){return new Jm(t)}),this.register(function(t){return new Km(t)}),this.register(function(t){return new jm(t)}),this.register(function(t){return new Wm(t)}),this.register(function(t){return new Um(t)}),this.register(function(t){return new qm(t)}),this.register(function(t){return new Cm(t)}),this.register(function(t){return new Gm(t)}),this.register(function(t){return new Dm(t)}),this.register(function(t){return new Ym(t)}),this.register(function(t){return new Zm(t)}),this.register(function(t){return new Xm(t)}),this.register(function(t){return new Bm(t)}),this.register(function(t){return new Qm(t)})}load(e,t,n,s){const r=this;let a;if(this.resourcePath!=="")a=this.resourcePath;else if(this.path!==""){const d=as.extractUrlBase(e);a=as.resolveURL(d,this.path)}else a=as.extractUrlBase(e);this.manager.itemStart(e);const o=function(d){s?s(d):console.error(d),r.manager.itemError(e),r.manager.itemEnd(e)},l=new $o(this.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),l.setRequestHeader(this.requestHeader),l.setWithCredentials(this.withCredentials),l.load(e,function(d){try{r.parse(d,a,function(c){t(c),r.manager.itemEnd(e)},o)}catch(c){o(c)}},n,o)}setDRACOLoader(e){return this.dracoLoader=e,this}setKTX2Loader(e){return this.ktx2Loader=e,this}setMeshoptDecoder(e){return this.meshoptDecoder=e,this}register(e){return this.pluginCallbacks.indexOf(e)===-1&&this.pluginCallbacks.push(e),this}unregister(e){return this.pluginCallbacks.indexOf(e)!==-1&&this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(e),1),this}parse(e,t,n,s){let r;const a={},o={},l=new TextDecoder;if(typeof e=="string")r=JSON.parse(e);else if(e instanceof ArrayBuffer)if(l.decode(new Uint8Array(e,0,4))===t8){try{a[he.KHR_BINARY_GLTF]=new _m(e)}catch(u){s&&s(u);return}r=JSON.parse(a[he.KHR_BINARY_GLTF].content)}else r=JSON.parse(l.decode(e));else r=e;if(r.asset===void 0||r.asset.version[0]<2){s&&s(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));return}const d=new uy(r,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,requestHeader:this.requestHeader,manager:this.manager,ktx2Loader:this.ktx2Loader,meshoptDecoder:this.meshoptDecoder});d.fileLoader.setRequestHeader(this.requestHeader);for(let c=0;c<this.pluginCallbacks.length;c++){const u=this.pluginCallbacks[c](d);u.name||console.error("THREE.GLTFLoader: Invalid plugin found: missing name"),o[u.name]=u,a[u.name]=!0}if(r.extensionsUsed)for(let c=0;c<r.extensionsUsed.length;++c){const u=r.extensionsUsed[c],p=r.extensionsRequired||[];switch(u){case he.KHR_MATERIALS_UNLIT:a[u]=new Am;break;case he.KHR_DRACO_MESH_COMPRESSION:a[u]=new $m(r,this.dracoLoader);break;case he.KHR_TEXTURE_TRANSFORM:a[u]=new ey;break;case he.KHR_MESH_QUANTIZATION:a[u]=new ty;break;default:p.indexOf(u)>=0&&o[u]===void 0&&console.warn('THREE.GLTFLoader: Unknown extension "'+u+'".')}}d.setExtensions(a),d.setPlugins(o),d.parse(n,s)}parseAsync(e,t){const n=this;return new Promise(function(s,r){n.parse(e,t,s,r)})}}function Im(){let i={};return{get:function(e){return i[e]},add:function(e,t){i[e]=t},remove:function(e){delete i[e]},removeAll:function(){i={}}}}const he={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_DISPERSION:"KHR_materials_dispersion",KHR_MATERIALS_IOR:"KHR_materials_ior",KHR_MATERIALS_SHEEN:"KHR_materials_sheen",KHR_MATERIALS_SPECULAR:"KHR_materials_specular",KHR_MATERIALS_TRANSMISSION:"KHR_materials_transmission",KHR_MATERIALS_IRIDESCENCE:"KHR_materials_iridescence",KHR_MATERIALS_ANISOTROPY:"KHR_materials_anisotropy",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_MATERIALS_VOLUME:"KHR_materials_volume",KHR_TEXTURE_BASISU:"KHR_texture_basisu",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",KHR_MATERIALS_EMISSIVE_STRENGTH:"KHR_materials_emissive_strength",EXT_MATERIALS_BUMP:"EXT_materials_bump",EXT_TEXTURE_WEBP:"EXT_texture_webp",EXT_TEXTURE_AVIF:"EXT_texture_avif",EXT_MESHOPT_COMPRESSION:"EXT_meshopt_compression",EXT_MESH_GPU_INSTANCING:"EXT_mesh_gpu_instancing"};class Xm{constructor(e){this.parser=e,this.name=he.KHR_LIGHTS_PUNCTUAL,this.cache={refs:{},uses:{}}}_markDefs(){const e=this.parser,t=this.parser.json.nodes||[];for(let n=0,s=t.length;n<s;n++){const r=t[n];r.extensions&&r.extensions[this.name]&&r.extensions[this.name].light!==void 0&&e._addNodeRef(this.cache,r.extensions[this.name].light)}}_loadLight(e){const t=this.parser,n="light:"+e;let s=t.cache.get(n);if(s)return s;const r=t.json,l=((r.extensions&&r.extensions[this.name]||{}).lights||[])[e];let d;const c=new te(16777215);l.color!==void 0&&c.setRGB(l.color[0],l.color[1],l.color[2],xt);const u=l.range!==void 0?l.range:0;switch(l.type){case"directional":d=new J4(c),d.target.position.set(0,0,-1),d.add(d.target);break;case"point":d=new k4(c),d.distance=u;break;case"spot":d=new Y4(c),d.distance=u,l.spot=l.spot||{},l.spot.innerConeAngle=l.spot.innerConeAngle!==void 0?l.spot.innerConeAngle:0,l.spot.outerConeAngle=l.spot.outerConeAngle!==void 0?l.spot.outerConeAngle:Math.PI/4,d.angle=l.spot.outerConeAngle,d.penumbra=1-l.spot.innerConeAngle/l.spot.outerConeAngle,d.target.position.set(0,0,-1),d.add(d.target);break;default:throw new Error("THREE.GLTFLoader: Unexpected light type: "+l.type)}return d.position.set(0,0,0),Cn(d,l),l.intensity!==void 0&&(d.intensity=l.intensity),d.name=t.createUniqueName(l.name||"light_"+e),s=Promise.resolve(d),t.cache.add(n,s),s}getDependency(e,t){if(e==="light")return this._loadLight(t)}createNodeAttachment(e){const t=this,n=this.parser,r=n.json.nodes[e],o=(r.extensions&&r.extensions[this.name]||{}).light;return o===void 0?null:this._loadLight(o).then(function(l){return n._getNodeRef(t.cache,o,l)})}}class Am{constructor(){this.name=he.KHR_MATERIALS_UNLIT}getMaterialType(){return Un}extendParams(e,t,n){const s=[];e.color=new te(1,1,1),e.opacity=1;const r=t.pbrMetallicRoughness;if(r){if(Array.isArray(r.baseColorFactor)){const a=r.baseColorFactor;e.color.setRGB(a[0],a[1],a[2],xt),e.opacity=a[3]}r.baseColorTexture!==void 0&&s.push(n.assignTexture(e,"map",r.baseColorTexture,bt))}return Promise.all(s)}}class Cm{constructor(e){this.parser=e,this.name=he.KHR_MATERIALS_EMISSIVE_STRENGTH}extendMaterialParams(e,t){const s=this.parser.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=s.extensions[this.name].emissiveStrength;return r!==void 0&&(t.emissiveIntensity=r),Promise.resolve()}}class Fm{constructor(e){this.parser=e,this.name=he.KHR_MATERIALS_CLEARCOAT}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Rn}extendMaterialParams(e,t){const n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=[],a=s.extensions[this.name];if(a.clearcoatFactor!==void 0&&(t.clearcoat=a.clearcoatFactor),a.clearcoatTexture!==void 0&&r.push(n.assignTexture(t,"clearcoatMap",a.clearcoatTexture)),a.clearcoatRoughnessFactor!==void 0&&(t.clearcoatRoughness=a.clearcoatRoughnessFactor),a.clearcoatRoughnessTexture!==void 0&&r.push(n.assignTexture(t,"clearcoatRoughnessMap",a.clearcoatRoughnessTexture)),a.clearcoatNormalTexture!==void 0&&(r.push(n.assignTexture(t,"clearcoatNormalMap",a.clearcoatNormalTexture)),a.clearcoatNormalTexture.scale!==void 0)){const o=a.clearcoatNormalTexture.scale;t.clearcoatNormalScale=new ee(o,o)}return Promise.all(r)}}class Vm{constructor(e){this.parser=e,this.name=he.KHR_MATERIALS_DISPERSION}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Rn}extendMaterialParams(e,t){const s=this.parser.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=s.extensions[this.name];return t.dispersion=r.dispersion!==void 0?r.dispersion:0,Promise.resolve()}}class Dm{constructor(e){this.parser=e,this.name=he.KHR_MATERIALS_IRIDESCENCE}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Rn}extendMaterialParams(e,t){const n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=[],a=s.extensions[this.name];return a.iridescenceFactor!==void 0&&(t.iridescence=a.iridescenceFactor),a.iridescenceTexture!==void 0&&r.push(n.assignTexture(t,"iridescenceMap",a.iridescenceTexture)),a.iridescenceIor!==void 0&&(t.iridescenceIOR=a.iridescenceIor),t.iridescenceThicknessRange===void 0&&(t.iridescenceThicknessRange=[100,400]),a.iridescenceThicknessMinimum!==void 0&&(t.iridescenceThicknessRange[0]=a.iridescenceThicknessMinimum),a.iridescenceThicknessMaximum!==void 0&&(t.iridescenceThicknessRange[1]=a.iridescenceThicknessMaximum),a.iridescenceThicknessTexture!==void 0&&r.push(n.assignTexture(t,"iridescenceThicknessMap",a.iridescenceThicknessTexture)),Promise.all(r)}}class jm{constructor(e){this.parser=e,this.name=he.KHR_MATERIALS_SHEEN}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Rn}extendMaterialParams(e,t){const n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=[];t.sheenColor=new te(0,0,0),t.sheenRoughness=0,t.sheen=1;const a=s.extensions[this.name];if(a.sheenColorFactor!==void 0){const o=a.sheenColorFactor;t.sheenColor.setRGB(o[0],o[1],o[2],xt)}return a.sheenRoughnessFactor!==void 0&&(t.sheenRoughness=a.sheenRoughnessFactor),a.sheenColorTexture!==void 0&&r.push(n.assignTexture(t,"sheenColorMap",a.sheenColorTexture,bt)),a.sheenRoughnessTexture!==void 0&&r.push(n.assignTexture(t,"sheenRoughnessMap",a.sheenRoughnessTexture)),Promise.all(r)}}class Wm{constructor(e){this.parser=e,this.name=he.KHR_MATERIALS_TRANSMISSION}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Rn}extendMaterialParams(e,t){const n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=[],a=s.extensions[this.name];return a.transmissionFactor!==void 0&&(t.transmission=a.transmissionFactor),a.transmissionTexture!==void 0&&r.push(n.assignTexture(t,"transmissionMap",a.transmissionTexture)),Promise.all(r)}}class Um{constructor(e){this.parser=e,this.name=he.KHR_MATERIALS_VOLUME}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Rn}extendMaterialParams(e,t){const n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=[],a=s.extensions[this.name];t.thickness=a.thicknessFactor!==void 0?a.thicknessFactor:0,a.thicknessTexture!==void 0&&r.push(n.assignTexture(t,"thicknessMap",a.thicknessTexture)),t.attenuationDistance=a.attenuationDistance||1/0;const o=a.attenuationColor||[1,1,1];return t.attenuationColor=new te().setRGB(o[0],o[1],o[2],xt),Promise.all(r)}}class qm{constructor(e){this.parser=e,this.name=he.KHR_MATERIALS_IOR}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Rn}extendMaterialParams(e,t){const s=this.parser.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=s.extensions[this.name];return t.ior=r.ior!==void 0?r.ior:1.5,Promise.resolve()}}class Gm{constructor(e){this.parser=e,this.name=he.KHR_MATERIALS_SPECULAR}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Rn}extendMaterialParams(e,t){const n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=[],a=s.extensions[this.name];t.specularIntensity=a.specularFactor!==void 0?a.specularFactor:1,a.specularTexture!==void 0&&r.push(n.assignTexture(t,"specularIntensityMap",a.specularTexture));const o=a.specularColorFactor||[1,1,1];return t.specularColor=new te().setRGB(o[0],o[1],o[2],xt),a.specularColorTexture!==void 0&&r.push(n.assignTexture(t,"specularColorMap",a.specularColorTexture,bt)),Promise.all(r)}}class Zm{constructor(e){this.parser=e,this.name=he.EXT_MATERIALS_BUMP}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Rn}extendMaterialParams(e,t){const n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=[],a=s.extensions[this.name];return t.bumpScale=a.bumpFactor!==void 0?a.bumpFactor:1,a.bumpTexture!==void 0&&r.push(n.assignTexture(t,"bumpMap",a.bumpTexture)),Promise.all(r)}}class Ym{constructor(e){this.parser=e,this.name=he.KHR_MATERIALS_ANISOTROPY}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Rn}extendMaterialParams(e,t){const n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=[],a=s.extensions[this.name];return a.anisotropyStrength!==void 0&&(t.anisotropy=a.anisotropyStrength),a.anisotropyRotation!==void 0&&(t.anisotropyRotation=a.anisotropyRotation),a.anisotropyTexture!==void 0&&r.push(n.assignTexture(t,"anisotropyMap",a.anisotropyTexture)),Promise.all(r)}}class km{constructor(e){this.parser=e,this.name=he.KHR_TEXTURE_BASISU}loadTexture(e){const t=this.parser,n=t.json,s=n.textures[e];if(!s.extensions||!s.extensions[this.name])return null;const r=s.extensions[this.name],a=t.options.ktx2Loader;if(!a){if(n.extensionsRequired&&n.extensionsRequired.indexOf(this.name)>=0)throw new Error("THREE.GLTFLoader: setKTX2Loader must be called before loading KTX2 textures");return null}return t.loadTextureImage(e,r.source,a)}}class Jm{constructor(e){this.parser=e,this.name=he.EXT_TEXTURE_WEBP}loadTexture(e){const t=this.name,n=this.parser,s=n.json,r=s.textures[e];if(!r.extensions||!r.extensions[t])return null;const a=r.extensions[t],o=s.images[a.source];let l=n.textureLoader;if(o.uri){const d=n.options.manager.getHandler(o.uri);d!==null&&(l=d)}return n.loadTextureImage(e,a.source,l)}}class Km{constructor(e){this.parser=e,this.name=he.EXT_TEXTURE_AVIF}loadTexture(e){const t=this.name,n=this.parser,s=n.json,r=s.textures[e];if(!r.extensions||!r.extensions[t])return null;const a=r.extensions[t],o=s.images[a.source];let l=n.textureLoader;if(o.uri){const d=n.options.manager.getHandler(o.uri);d!==null&&(l=d)}return n.loadTextureImage(e,a.source,l)}}class Bm{constructor(e){this.name=he.EXT_MESHOPT_COMPRESSION,this.parser=e}loadBufferView(e){const t=this.parser.json,n=t.bufferViews[e];if(n.extensions&&n.extensions[this.name]){const s=n.extensions[this.name],r=this.parser.getDependency("buffer",s.buffer),a=this.parser.options.meshoptDecoder;if(!a||!a.supported){if(t.extensionsRequired&&t.extensionsRequired.indexOf(this.name)>=0)throw new Error("THREE.GLTFLoader: setMeshoptDecoder must be called before loading compressed files");return null}return r.then(function(o){const l=s.byteOffset||0,d=s.byteLength||0,c=s.count,u=s.byteStride,p=new Uint8Array(o,l,d);return a.decodeGltfBufferAsync?a.decodeGltfBufferAsync(c,u,p,s.mode,s.filter).then(function(h){return h.buffer}):a.ready.then(function(){const h=new ArrayBuffer(c*u);return a.decodeGltfBuffer(new Uint8Array(h),c,u,p,s.mode,s.filter),h})})}else return null}}class Qm{constructor(e){this.name=he.EXT_MESH_GPU_INSTANCING,this.parser=e}createNodeMesh(e){const t=this.parser.json,n=t.nodes[e];if(!n.extensions||!n.extensions[this.name]||n.mesh===void 0)return null;const s=t.meshes[n.mesh];for(const d of s.primitives)if(d.mode!==Qt.TRIANGLES&&d.mode!==Qt.TRIANGLE_STRIP&&d.mode!==Qt.TRIANGLE_FAN&&d.mode!==void 0)return null;const a=n.extensions[this.name].attributes,o=[],l={};for(const d in a)o.push(this.parser.getDependency("accessor",a[d]).then(c=>(l[d]=c,l[d])));return o.length<1?null:(o.push(this.parser.createNodeMesh(e)),Promise.all(o).then(d=>{const c=d.pop(),u=c.isGroup?c.children:[c],p=d[0].count,h=[];for(const b of u){const T=new K0,m=new x,f=new _0,N=new x(1,1,1),M=new Ai(b.geometry,b.material,p);for(let P=0;P<p;P++)l.TRANSLATION&&m.fromBufferAttribute(l.TRANSLATION,P),l.ROTATION&&f.fromBufferAttribute(l.ROTATION,P),l.SCALE&&N.fromBufferAttribute(l.SCALE,P),M.setMatrixAt(P,T.compose(m,f,N));for(const P in l)if(P==="_COLOR_0"){const V=l[P];M.instanceColor=new ka(V.array,V.itemSize,V.normalized)}else P!=="TRANSLATION"&&P!=="ROTATION"&&P!=="SCALE"&&b.geometry.setAttribute(P,l[P]);Ye.prototype.copy.call(M,b),this.parser.assignFinalMaterial(M),h.push(M)}return c.isGroup?(c.clear(),c.add(...h),c):h[0]}))}}const t8="glTF",B1=12,U9={JSON:1313821514,BIN:5130562};class _m{constructor(e){this.name=he.KHR_BINARY_GLTF,this.content=null,this.body=null;const t=new DataView(e,0,B1),n=new TextDecoder;if(this.header={magic:n.decode(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==t8)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");const s=this.header.length-B1,r=new DataView(e,B1);let a=0;for(;a<s;){const o=r.getUint32(a,!0);a+=4;const l=r.getUint32(a,!0);if(a+=4,l===U9.JSON){const d=new Uint8Array(e,B1+a,o);this.content=n.decode(d)}else if(l===U9.BIN){const d=B1+a;this.body=e.slice(d,d+o)}a+=o}if(this.content===null)throw new Error("THREE.GLTFLoader: JSON content not found.")}}class $m{constructor(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=he.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}decodePrimitive(e,t){const n=this.json,s=this.dracoLoader,r=e.extensions[this.name].bufferView,a=e.extensions[this.name].attributes,o={},l={},d={};for(const c in a){const u=_a[c]||c.toLowerCase();o[u]=a[c]}for(const c in e.attributes){const u=_a[c]||c.toLowerCase();if(a[c]!==void 0){const p=n.accessors[e.attributes[c]],h=w1[p.componentType];d[u]=h.name,l[u]=p.normalized===!0}}return t.getDependency("bufferView",r).then(function(c){return new Promise(function(u,p){s.decodeDracoFile(c,function(h){for(const b in h.attributes){const T=h.attributes[b],m=l[b];m!==void 0&&(T.normalized=m)}u(h)},o,d,xt,p)})})}}class ey{constructor(){this.name=he.KHR_TEXTURE_TRANSFORM}extendTexture(e,t){return(t.texCoord===void 0||t.texCoord===e.channel)&&t.offset===void 0&&t.rotation===void 0&&t.scale===void 0||(e=e.clone(),t.texCoord!==void 0&&(e.channel=t.texCoord),t.offset!==void 0&&e.offset.fromArray(t.offset),t.rotation!==void 0&&(e.rotation=t.rotation),t.scale!==void 0&&e.repeat.fromArray(t.scale),e.needsUpdate=!0),e}}class ty{constructor(){this.name=he.KHR_MESH_QUANTIZATION}}class n8 extends Rs{constructor(e,t,n,s){super(e,t,n,s)}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,s=this.valueSize,r=e*s*3+s;for(let a=0;a!==s;a++)t[a]=n[r+a];return t}interpolate_(e,t,n,s){const r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,l=o*2,d=o*3,c=s-t,u=(n-t)/c,p=u*u,h=p*u,b=e*d,T=b-d,m=-2*h+3*p,f=h-p,N=1-m,M=f-p+u;for(let P=0;P!==o;P++){const V=a[T+P+o],C=a[T+P+l]*c,D=a[b+P+o],G=a[b+P]*c;r[P]=N*V+M*C+m*D+f*G}return r}}const ny=new _0;class iy extends n8{interpolate_(e,t,n,s){const r=super.interpolate_(e,t,n,s);return ny.fromArray(r).normalize().toArray(r),r}}const Qt={POINTS:0,LINES:1,LINE_LOOP:2,LINE_STRIP:3,TRIANGLES:4,TRIANGLE_STRIP:5,TRIANGLE_FAN:6},w1={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},q9={9728:Xt,9729:vt,9984:T4,9985:zr,9986:is,9987:xn},G9={33071:Tn,33648:Ur,10497:P1},T3={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},_a={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv1",TEXCOORD_2:"uv2",TEXCOORD_3:"uv3",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},ii={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},sy={CUBICSPLINE:void 0,LINEAR:ms,STEP:hs},x3={OPAQUE:"OPAQUE",MASK:"MASK",BLEND:"BLEND"};function ry(i){return i.DefaultMaterial===void 0&&(i.DefaultMaterial=new O1({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:Zn})),i.DefaultMaterial}function xi(i,e,t){for(const n in t.extensions)i[n]===void 0&&(e.userData.gltfExtensions=e.userData.gltfExtensions||{},e.userData.gltfExtensions[n]=t.extensions[n])}function Cn(i,e){e.extras!==void 0&&(typeof e.extras=="object"?Object.assign(i.userData,e.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+e.extras))}function ay(i,e,t){let n=!1,s=!1,r=!1;for(let d=0,c=e.length;d<c;d++){const u=e[d];if(u.POSITION!==void 0&&(n=!0),u.NORMAL!==void 0&&(s=!0),u.COLOR_0!==void 0&&(r=!0),n&&s&&r)break}if(!n&&!s&&!r)return Promise.resolve(i);const a=[],o=[],l=[];for(let d=0,c=e.length;d<c;d++){const u=e[d];if(n){const p=u.POSITION!==void 0?t.getDependency("accessor",u.POSITION):i.attributes.position;a.push(p)}if(s){const p=u.NORMAL!==void 0?t.getDependency("accessor",u.NORMAL):i.attributes.normal;o.push(p)}if(r){const p=u.COLOR_0!==void 0?t.getDependency("accessor",u.COLOR_0):i.attributes.color;l.push(p)}}return Promise.all([Promise.all(a),Promise.all(o),Promise.all(l)]).then(function(d){const c=d[0],u=d[1],p=d[2];return n&&(i.morphAttributes.position=c),s&&(i.morphAttributes.normal=u),r&&(i.morphAttributes.color=p),i.morphTargetsRelative=!0,i})}function oy(i,e){if(i.updateMorphTargets(),e.weights!==void 0)for(let t=0,n=e.weights.length;t<n;t++)i.morphTargetInfluences[t]=e.weights[t];if(e.extras&&Array.isArray(e.extras.targetNames)){const t=e.extras.targetNames;if(i.morphTargetInfluences.length===t.length){i.morphTargetDictionary={};for(let n=0,s=t.length;n<s;n++)i.morphTargetDictionary[t[n]]=n}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function ly(i){let e;const t=i.extensions&&i.extensions[he.KHR_DRACO_MESH_COMPRESSION];if(t?e="draco:"+t.bufferView+":"+t.indices+":"+S3(t.attributes):e=i.indices+":"+S3(i.attributes)+":"+i.mode,i.targets!==void 0)for(let n=0,s=i.targets.length;n<s;n++)e+=":"+S3(i.targets[n]);return e}function S3(i){let e="";const t=Object.keys(i).sort();for(let n=0,s=t.length;n<s;n++)e+=t[n]+":"+i[t[n]]+";";return e}function $a(i){switch(i){case Int8Array:return 1/127;case Uint8Array:return 1/255;case Int16Array:return 1/32767;case Uint16Array:return 1/65535;default:throw new Error("THREE.GLTFLoader: Unsupported normalized accessor component type.")}}function dy(i){return i.search(/\.jpe?g($|\?)/i)>0||i.search(/^data\:image\/jpeg/)===0?"image/jpeg":i.search(/\.webp($|\?)/i)>0||i.search(/^data\:image\/webp/)===0?"image/webp":i.search(/\.ktx2($|\?)/i)>0||i.search(/^data\:image\/ktx2/)===0?"image/ktx2":"image/png"}const cy=new K0;class uy{constructor(e={},t={}){this.json=e,this.extensions={},this.plugins={},this.options=t,this.cache=new Im,this.associations=new Map,this.primitiveCache={},this.nodeCache={},this.meshCache={refs:{},uses:{}},this.cameraCache={refs:{},uses:{}},this.lightCache={refs:{},uses:{}},this.sourceCache={},this.textureCache={},this.nodeNamesUsed={};let n=!1,s=-1,r=!1,a=-1;if(typeof navigator<"u"){const o=navigator.userAgent;n=/^((?!chrome|android).)*safari/i.test(o)===!0;const l=o.match(/Version\/(\d+)/);s=n&&l?parseInt(l[1],10):-1,r=o.indexOf("Firefox")>-1,a=r?o.match(/Firefox\/([0-9]+)\./)[1]:-1}typeof createImageBitmap>"u"||n&&s<17||r&&a<98?this.textureLoader=new dc(this.options.manager):this.textureLoader=new hc(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.textureLoader.setRequestHeader(this.options.requestHeader),this.fileLoader=new $o(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),this.options.crossOrigin==="use-credentials"&&this.fileLoader.setWithCredentials(!0)}setExtensions(e){this.extensions=e}setPlugins(e){this.plugins=e}parse(e,t){const n=this,s=this.json,r=this.extensions;this.cache.removeAll(),this.nodeCache={},this._invokeAll(function(a){return a._markDefs&&a._markDefs()}),Promise.all(this._invokeAll(function(a){return a.beforeRoot&&a.beforeRoot()})).then(function(){return Promise.all([n.getDependencies("scene"),n.getDependencies("animation"),n.getDependencies("camera")])}).then(function(a){const o={scene:a[0][s.scene||0],scenes:a[0],animations:a[1],cameras:a[2],asset:s.asset,parser:n,userData:{}};return xi(r,o,s),Cn(o,s),Promise.all(n._invokeAll(function(l){return l.afterRoot&&l.afterRoot(o)})).then(function(){for(const l of o.scenes)l.updateMatrixWorld();e(o)})}).catch(t)}_markDefs(){const e=this.json.nodes||[],t=this.json.skins||[],n=this.json.meshes||[];for(let s=0,r=t.length;s<r;s++){const a=t[s].joints;for(let o=0,l=a.length;o<l;o++)e[a[o]].isBone=!0}for(let s=0,r=e.length;s<r;s++){const a=e[s];a.mesh!==void 0&&(this._addNodeRef(this.meshCache,a.mesh),a.skin!==void 0&&(n[a.mesh].isSkinnedMesh=!0)),a.camera!==void 0&&this._addNodeRef(this.cameraCache,a.camera)}}_addNodeRef(e,t){t!==void 0&&(e.refs[t]===void 0&&(e.refs[t]=e.uses[t]=0),e.refs[t]++)}_getNodeRef(e,t,n){if(e.refs[t]<=1)return n;const s=n.clone(),r=(a,o)=>{const l=this.associations.get(a);l!=null&&this.associations.set(o,l);for(const[d,c]of a.children.entries())r(c,o.children[d])};return r(n,s),s.name+="_instance_"+e.uses[t]++,s}_invokeOne(e){const t=Object.values(this.plugins);t.push(this);for(let n=0;n<t.length;n++){const s=e(t[n]);if(s)return s}return null}_invokeAll(e){const t=Object.values(this.plugins);t.unshift(this);const n=[];for(let s=0;s<t.length;s++){const r=e(t[s]);r&&n.push(r)}return n}getDependency(e,t){const n=e+":"+t;let s=this.cache.get(n);if(!s){switch(e){case"scene":s=this.loadScene(t);break;case"node":s=this._invokeOne(function(r){return r.loadNode&&r.loadNode(t)});break;case"mesh":s=this._invokeOne(function(r){return r.loadMesh&&r.loadMesh(t)});break;case"accessor":s=this.loadAccessor(t);break;case"bufferView":s=this._invokeOne(function(r){return r.loadBufferView&&r.loadBufferView(t)});break;case"buffer":s=this.loadBuffer(t);break;case"material":s=this._invokeOne(function(r){return r.loadMaterial&&r.loadMaterial(t)});break;case"texture":s=this._invokeOne(function(r){return r.loadTexture&&r.loadTexture(t)});break;case"skin":s=this.loadSkin(t);break;case"animation":s=this._invokeOne(function(r){return r.loadAnimation&&r.loadAnimation(t)});break;case"camera":s=this.loadCamera(t);break;default:if(s=this._invokeOne(function(r){return r!=this&&r.getDependency&&r.getDependency(e,t)}),!s)throw new Error("Unknown type: "+e);break}this.cache.add(n,s)}return s}getDependencies(e){let t=this.cache.get(e);if(!t){const n=this,s=this.json[e+(e==="mesh"?"es":"s")]||[];t=Promise.all(s.map(function(r,a){return n.getDependency(e,a)})),this.cache.add(e,t)}return t}loadBuffer(e){const t=this.json.buffers[e],n=this.fileLoader;if(t.type&&t.type!=="arraybuffer")throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(t.uri===void 0&&e===0)return Promise.resolve(this.extensions[he.KHR_BINARY_GLTF].body);const s=this.options;return new Promise(function(r,a){n.load(as.resolveURL(t.uri,s.path),r,void 0,function(){a(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))})})}loadBufferView(e){const t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then(function(n){const s=t.byteLength||0,r=t.byteOffset||0;return n.slice(r,r+s)})}loadAccessor(e){const t=this,n=this.json,s=this.json.accessors[e];if(s.bufferView===void 0&&s.sparse===void 0){const a=T3[s.type],o=w1[s.componentType],l=s.normalized===!0,d=new o(s.count*a);return Promise.resolve(new At(d,a,l))}const r=[];return s.bufferView!==void 0?r.push(this.getDependency("bufferView",s.bufferView)):r.push(null),s.sparse!==void 0&&(r.push(this.getDependency("bufferView",s.sparse.indices.bufferView)),r.push(this.getDependency("bufferView",s.sparse.values.bufferView))),Promise.all(r).then(function(a){const o=a[0],l=T3[s.type],d=w1[s.componentType],c=d.BYTES_PER_ELEMENT,u=c*l,p=s.byteOffset||0,h=s.bufferView!==void 0?n.bufferViews[s.bufferView].byteStride:void 0,b=s.normalized===!0;let T,m;if(h&&h!==u){const f=Math.floor(p/h),N="InterleavedBuffer:"+s.bufferView+":"+s.componentType+":"+f+":"+s.count;let M=t.cache.get(N);M||(T=new d(o,f*h,s.count*h/c),M=new Cd(T,h/c),t.cache.add(N,M)),m=new Jo(M,l,p%h/c,b)}else o===null?T=new d(s.count*l):T=new d(o,p,s.count*l),m=new At(T,l,b);if(s.sparse!==void 0){const f=T3.SCALAR,N=w1[s.sparse.indices.componentType],M=s.sparse.indices.byteOffset||0,P=s.sparse.values.byteOffset||0,V=new N(a[1],M,s.sparse.count*f),C=new d(a[2],P,s.sparse.count*l);o!==null&&(m=new At(m.array.slice(),m.itemSize,m.normalized)),m.normalized=!1;for(let D=0,G=V.length;D<G;D++){const L=V[D];if(m.setX(L,C[D*l]),l>=2&&m.setY(L,C[D*l+1]),l>=3&&m.setZ(L,C[D*l+2]),l>=4&&m.setW(L,C[D*l+3]),l>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}m.normalized=b}return m})}loadTexture(e){const t=this.json,n=this.options,r=t.textures[e].source,a=t.images[r];let o=this.textureLoader;if(a.uri){const l=n.manager.getHandler(a.uri);l!==null&&(o=l)}return this.loadTextureImage(e,r,o)}loadTextureImage(e,t,n){const s=this,r=this.json,a=r.textures[e],o=r.images[t],l=(o.uri||o.bufferView)+":"+a.sampler;if(this.textureCache[l])return this.textureCache[l];const d=this.loadImageSource(t,n).then(function(c){c.flipY=!1,c.name=a.name||o.name||"",c.name===""&&typeof o.uri=="string"&&o.uri.startsWith("data:image/")===!1&&(c.name=o.uri);const p=(r.samplers||{})[a.sampler]||{};return c.magFilter=q9[p.magFilter]||vt,c.minFilter=q9[p.minFilter]||xn,c.wrapS=G9[p.wrapS]||P1,c.wrapT=G9[p.wrapT]||P1,c.generateMipmaps=!c.isCompressedTexture&&c.minFilter!==Xt&&c.minFilter!==vt,s.associations.set(c,{textures:e}),c}).catch(function(){return null});return this.textureCache[l]=d,d}loadImageSource(e,t){const n=this,s=this.json,r=this.options;if(this.sourceCache[e]!==void 0)return this.sourceCache[e].then(u=>u.clone());const a=s.images[e],o=self.URL||self.webkitURL;let l=a.uri||"",d=!1;if(a.bufferView!==void 0)l=n.getDependency("bufferView",a.bufferView).then(function(u){d=!0;const p=new Blob([u],{type:a.mimeType});return l=o.createObjectURL(p),l});else if(a.uri===void 0)throw new Error("THREE.GLTFLoader: Image "+e+" is missing URI and bufferView");const c=Promise.resolve(l).then(function(u){return new Promise(function(p,h){let b=p;t.isImageBitmapLoader===!0&&(b=function(T){const m=new gt(T);m.needsUpdate=!0,p(m)}),t.load(as.resolveURL(u,r.path),b,void 0,h)})}).then(function(u){return d===!0&&o.revokeObjectURL(l),Cn(u,a),u.userData.mimeType=a.mimeType||dy(a.uri),u}).catch(function(u){throw console.error("THREE.GLTFLoader: Couldn't load texture",l),u});return this.sourceCache[e]=c,c}assignTexture(e,t,n,s){const r=this;return this.getDependency("texture",n.index).then(function(a){if(!a)return null;if(n.texCoord!==void 0&&n.texCoord>0&&(a=a.clone(),a.channel=n.texCoord),r.extensions[he.KHR_TEXTURE_TRANSFORM]){const o=n.extensions!==void 0?n.extensions[he.KHR_TEXTURE_TRANSFORM]:void 0;if(o){const l=r.associations.get(a);a=r.extensions[he.KHR_TEXTURE_TRANSFORM].extendTexture(a,o),r.associations.set(a,l)}}return s!==void 0&&(a.colorSpace=s),e[t]=a,a})}assignFinalMaterial(e){const t=e.geometry;let n=e.material;const s=t.attributes.tangent===void 0,r=t.attributes.color!==void 0,a=t.attributes.normal===void 0;if(e.isPoints){const o="PointsMaterial:"+n.uuid;let l=this.cache.get(o);l||(l=new W4,hn.prototype.copy.call(l,n),l.color.copy(n.color),l.map=n.map,l.sizeAttenuation=!1,this.cache.add(o,l)),n=l}else if(e.isLine){const o="LineBasicMaterial:"+n.uuid;let l=this.cache.get(o);l||(l=new bs,hn.prototype.copy.call(l,n),l.color.copy(n.color),l.map=n.map,this.cache.add(o,l)),n=l}if(s||r||a){let o="ClonedMaterial:"+n.uuid+":";s&&(o+="derivative-tangents:"),r&&(o+="vertex-colors:"),a&&(o+="flat-shading:");let l=this.cache.get(o);l||(l=n.clone(),r&&(l.vertexColors=!0),a&&(l.flatShading=!0),s&&(l.normalScale&&(l.normalScale.y*=-1),l.clearcoatNormalScale&&(l.clearcoatNormalScale.y*=-1)),this.cache.add(o,l),this.associations.set(l,this.associations.get(n))),n=l}e.material=n}getMaterialType(){return O1}loadMaterial(e){const t=this,n=this.json,s=this.extensions,r=n.materials[e];let a;const o={},l=r.extensions||{},d=[];if(l[he.KHR_MATERIALS_UNLIT]){const u=s[he.KHR_MATERIALS_UNLIT];a=u.getMaterialType(),d.push(u.extendParams(o,r,t))}else{const u=r.pbrMetallicRoughness||{};if(o.color=new te(1,1,1),o.opacity=1,Array.isArray(u.baseColorFactor)){const p=u.baseColorFactor;o.color.setRGB(p[0],p[1],p[2],xt),o.opacity=p[3]}u.baseColorTexture!==void 0&&d.push(t.assignTexture(o,"map",u.baseColorTexture,bt)),o.metalness=u.metallicFactor!==void 0?u.metallicFactor:1,o.roughness=u.roughnessFactor!==void 0?u.roughnessFactor:1,u.metallicRoughnessTexture!==void 0&&(d.push(t.assignTexture(o,"metalnessMap",u.metallicRoughnessTexture)),d.push(t.assignTexture(o,"roughnessMap",u.metallicRoughnessTexture))),a=this._invokeOne(function(p){return p.getMaterialType&&p.getMaterialType(e)}),d.push(Promise.all(this._invokeAll(function(p){return p.extendMaterialParams&&p.extendMaterialParams(e,o)})))}r.doubleSided===!0&&(o.side=wn);const c=r.alphaMode||x3.OPAQUE;if(c===x3.BLEND?(o.transparent=!0,o.depthWrite=!1):(o.transparent=!1,c===x3.MASK&&(o.alphaTest=r.alphaCutoff!==void 0?r.alphaCutoff:.5)),r.normalTexture!==void 0&&a!==Un&&(d.push(t.assignTexture(o,"normalMap",r.normalTexture)),o.normalScale=new ee(1,1),r.normalTexture.scale!==void 0)){const u=r.normalTexture.scale;o.normalScale.set(u,u)}if(r.occlusionTexture!==void 0&&a!==Un&&(d.push(t.assignTexture(o,"aoMap",r.occlusionTexture)),r.occlusionTexture.strength!==void 0&&(o.aoMapIntensity=r.occlusionTexture.strength)),r.emissiveFactor!==void 0&&a!==Un){const u=r.emissiveFactor;o.emissive=new te().setRGB(u[0],u[1],u[2],xt)}return r.emissiveTexture!==void 0&&a!==Un&&d.push(t.assignTexture(o,"emissiveMap",r.emissiveTexture,bt)),Promise.all(d).then(function(){const u=new a(o);return r.name&&(u.name=r.name),Cn(u,r),t.associations.set(u,{materials:e}),r.extensions&&xi(s,u,r),u})}createUniqueName(e){const t=Ee.sanitizeNodeName(e||"");return t in this.nodeNamesUsed?t+"_"+ ++this.nodeNamesUsed[t]:(this.nodeNamesUsed[t]=0,t)}loadGeometries(e){const t=this,n=this.extensions,s=this.primitiveCache;function r(o){return n[he.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(o,t).then(function(l){return Z9(l,o,t)})}const a=[];for(let o=0,l=e.length;o<l;o++){const d=e[o],c=ly(d),u=s[c];if(u)a.push(u.promise);else{let p;d.extensions&&d.extensions[he.KHR_DRACO_MESH_COMPRESSION]?p=r(d):p=Z9(new Mt,d,t),s[c]={primitive:d,promise:p},a.push(p)}}return Promise.all(a)}loadMesh(e){const t=this,n=this.json,s=this.extensions,r=n.meshes[e],a=r.primitives,o=[];for(let l=0,d=a.length;l<d;l++){const c=a[l].material===void 0?ry(this.cache):this.getDependency("material",a[l].material);o.push(c)}return o.push(t.loadGeometries(a)),Promise.all(o).then(function(l){const d=l.slice(0,l.length-1),c=l[l.length-1],u=[];for(let h=0,b=c.length;h<b;h++){const T=c[h],m=a[h];let f;const N=d[h];if(m.mode===Qt.TRIANGLES||m.mode===Qt.TRIANGLE_STRIP||m.mode===Qt.TRIANGLE_FAN||m.mode===void 0)f=r.isSkinnedMesh===!0?new Vd(T,N):new Be(T,N),f.isSkinnedMesh===!0&&f.normalizeSkinWeights(),m.mode===Qt.TRIANGLE_STRIP?f.geometry=W9(f.geometry,M4):m.mode===Qt.TRIANGLE_FAN&&(f.geometry=W9(f.geometry,Za));else if(m.mode===Qt.LINES)f=new _o(T,N);else if(m.mode===Qt.LINE_STRIP)f=new w2(T,N);else if(m.mode===Qt.LINE_LOOP)f=new Gd(T,N);else if(m.mode===Qt.POINTS)f=new Zd(T,N);else throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+m.mode);Object.keys(f.geometry.morphAttributes).length>0&&oy(f,r),f.name=t.createUniqueName(r.name||"mesh_"+e),Cn(f,r),m.extensions&&xi(s,f,m),t.assignFinalMaterial(f),u.push(f)}for(let h=0,b=u.length;h<b;h++)t.associations.set(u[h],{meshes:e,primitives:h});if(u.length===1)return r.extensions&&xi(s,u[0],r),u[0];const p=new ci;r.extensions&&xi(s,p,r),t.associations.set(p,{meshes:e});for(let h=0,b=u.length;h<b;h++)p.add(u[h]);return p})}loadCamera(e){let t;const n=this.json.cameras[e],s=n[n.type];if(!s){console.warn("THREE.GLTFLoader: Missing camera parameters.");return}return n.type==="perspective"?t=new It(O4.radToDeg(s.yfov),s.aspectRatio||1,s.znear||1,s.zfar||2e6):n.type==="orthographic"&&(t=new t7(-s.xmag,s.xmag,s.ymag,-s.ymag,s.znear,s.zfar)),n.name&&(t.name=this.createUniqueName(n.name)),Cn(t,n),Promise.resolve(t)}loadSkin(e){const t=this.json.skins[e],n=[];for(let s=0,r=t.joints.length;s<r;s++)n.push(this._loadNodeShallow(t.joints[s]));return t.inverseBindMatrices!==void 0?n.push(this.getDependency("accessor",t.inverseBindMatrices)):n.push(null),Promise.all(n).then(function(s){const r=s.pop(),a=s,o=[],l=[];for(let d=0,c=a.length;d<c;d++){const u=a[d];if(u){o.push(u);const p=new K0;r!==null&&p.fromArray(r.array,d*16),l.push(p)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[d])}return new Bo(o,l)})}loadAnimation(e){const t=this.json,n=this,s=t.animations[e],r=s.name?s.name:"animation_"+e,a=[],o=[],l=[],d=[],c=[];for(let u=0,p=s.channels.length;u<p;u++){const h=s.channels[u],b=s.samplers[h.sampler],T=h.target,m=T.node,f=s.parameters!==void 0?s.parameters[b.input]:b.input,N=s.parameters!==void 0?s.parameters[b.output]:b.output;T.node!==void 0&&(a.push(this.getDependency("node",m)),o.push(this.getDependency("accessor",f)),l.push(this.getDependency("accessor",N)),d.push(b),c.push(T))}return Promise.all([Promise.all(a),Promise.all(o),Promise.all(l),Promise.all(d),Promise.all(c)]).then(function(u){const p=u[0],h=u[1],b=u[2],T=u[3],m=u[4],f=[];for(let N=0,M=p.length;N<M;N++){const P=p[N],V=h[N],C=b[N],D=T[N],G=m[N];if(P===void 0)continue;P.updateMatrix&&P.updateMatrix();const L=n._createAnimationTracks(P,V,C,D,G);if(L)for(let H=0;H<L.length;H++)f.push(L[H])}return new tc(r,void 0,f)})}createNodeMesh(e){const t=this.json,n=this,s=t.nodes[e];return s.mesh===void 0?null:n.getDependency("mesh",s.mesh).then(function(r){const a=n._getNodeRef(n.meshCache,s.mesh,r);return s.weights!==void 0&&a.traverse(function(o){if(o.isMesh)for(let l=0,d=s.weights.length;l<d;l++)o.morphTargetInfluences[l]=s.weights[l]}),a})}loadNode(e){const t=this.json,n=this,s=t.nodes[e],r=n._loadNodeShallow(e),a=[],o=s.children||[];for(let d=0,c=o.length;d<c;d++)a.push(n.getDependency("node",o[d]));const l=s.skin===void 0?Promise.resolve(null):n.getDependency("skin",s.skin);return Promise.all([r,Promise.all(a),l]).then(function(d){const c=d[0],u=d[1],p=d[2];p!==null&&c.traverse(function(h){h.isSkinnedMesh&&h.bind(p,cy)});for(let h=0,b=u.length;h<b;h++)c.add(u[h]);return c})}_loadNodeShallow(e){const t=this.json,n=this.extensions,s=this;if(this.nodeCache[e]!==void 0)return this.nodeCache[e];const r=t.nodes[e],a=r.name?s.createUniqueName(r.name):"",o=[],l=s._invokeOne(function(d){return d.createNodeMesh&&d.createNodeMesh(e)});return l&&o.push(l),r.camera!==void 0&&o.push(s.getDependency("camera",r.camera).then(function(d){return s._getNodeRef(s.cameraCache,r.camera,d)})),s._invokeAll(function(d){return d.createNodeAttachment&&d.createNodeAttachment(e)}).forEach(function(d){o.push(d)}),this.nodeCache[e]=Promise.all(o).then(function(d){let c;if(r.isBone===!0?c=new j4:d.length>1?c=new ci:d.length===1?c=d[0]:c=new Ye,c!==d[0])for(let u=0,p=d.length;u<p;u++)c.add(d[u]);if(r.name&&(c.userData.name=r.name,c.name=a),Cn(c,r),r.extensions&&xi(n,c,r),r.matrix!==void 0){const u=new K0;u.fromArray(r.matrix),c.applyMatrix4(u)}else r.translation!==void 0&&c.position.fromArray(r.translation),r.rotation!==void 0&&c.quaternion.fromArray(r.rotation),r.scale!==void 0&&c.scale.fromArray(r.scale);if(!s.associations.has(c))s.associations.set(c,{});else if(r.mesh!==void 0&&s.meshCache.refs[r.mesh]>1){const u=s.associations.get(c);s.associations.set(c,{...u})}return s.associations.get(c).nodes=e,c}),this.nodeCache[e]}loadScene(e){const t=this.extensions,n=this.json.scenes[e],s=this,r=new ci;n.name&&(r.name=s.createUniqueName(n.name)),Cn(r,n),n.extensions&&xi(t,r,n);const a=n.nodes||[],o=[];for(let l=0,d=a.length;l<d;l++)o.push(s.getDependency("node",a[l]));return Promise.all(o).then(function(l){for(let c=0,u=l.length;c<u;c++)r.add(l[c]);const d=c=>{const u=new Map;for(const[p,h]of s.associations)(p instanceof hn||p instanceof gt)&&u.set(p,h);return c.traverse(p=>{const h=s.associations.get(p);h!=null&&u.set(p,h)}),u};return s.associations=d(r),r})}_createAnimationTracks(e,t,n,s,r){const a=[],o=e.name?e.name:e.uuid,l=[];ii[r.path]===ii.weights?e.traverse(function(p){p.morphTargetInfluences&&l.push(p.name?p.name:p.uuid)}):l.push(o);let d;switch(ii[r.path]){case ii.weights:d=N1;break;case ii.rotation:d=L1;break;case ii.translation:case ii.scale:d=M1;break;default:switch(n.itemSize){case 1:d=N1;break;case 2:case 3:default:d=M1;break}break}const c=s.interpolation!==void 0?sy[s.interpolation]:ms,u=this._getArrayFromAccessor(n);for(let p=0,h=l.length;p<h;p++){const b=new d(l[p]+"."+ii[r.path],t.array,u,c);s.interpolation==="CUBICSPLINE"&&this._createCubicSplineTrackInterpolant(b),a.push(b)}return a}_getArrayFromAccessor(e){let t=e.array;if(e.normalized){const n=$a(t.constructor),s=new Float32Array(t.length);for(let r=0,a=t.length;r<a;r++)s[r]=t[r]*n;t=s}return t}_createCubicSplineTrackInterpolant(e){e.createInterpolant=function(n){const s=this instanceof L1?iy:n8;return new s(this.times,this.values,this.getValueSize()/3,n)},e.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0}}function py(i,e,t){const n=e.attributes,s=new Kn;if(n.POSITION!==void 0){const o=t.json.accessors[n.POSITION],l=o.min,d=o.max;if(l!==void 0&&d!==void 0){if(s.set(new x(l[0],l[1],l[2]),new x(d[0],d[1],d[2])),o.normalized){const c=$a(w1[o.componentType]);s.min.multiplyScalar(c),s.max.multiplyScalar(c)}}else{console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.");return}}else return;const r=e.targets;if(r!==void 0){const o=new x,l=new x;for(let d=0,c=r.length;d<c;d++){const u=r[d];if(u.POSITION!==void 0){const p=t.json.accessors[u.POSITION],h=p.min,b=p.max;if(h!==void 0&&b!==void 0){if(l.setX(Math.max(Math.abs(h[0]),Math.abs(b[0]))),l.setY(Math.max(Math.abs(h[1]),Math.abs(b[1]))),l.setZ(Math.max(Math.abs(h[2]),Math.abs(b[2]))),p.normalized){const T=$a(w1[p.componentType]);l.multiplyScalar(T)}o.max(l)}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}s.expandByVector(o)}i.boundingBox=s;const a=new Hn;s.getCenter(a.center),a.radius=s.min.distanceTo(s.max)/2,i.boundingSphere=a}function Z9(i,e,t){const n=e.attributes,s=[];function r(a,o){return t.getDependency("accessor",a).then(function(l){i.setAttribute(o,l)})}for(const a in n){const o=_a[a]||a.toLowerCase();o in i.attributes||s.push(r(n[a],o))}if(e.indices!==void 0&&!i.index){const a=t.getDependency("accessor",e.indices).then(function(o){i.setIndex(o)});s.push(a)}return ge.workingColorSpace!==xt&&"COLOR_0"in n&&console.warn(`THREE.GLTFLoader: Converting vertex colors from "srgb-linear" to "${ge.workingColorSpace}" not supported.`),Cn(i,e),py(i,e,t),Promise.all(s).then(function(){return e.targets!==void 0?ay(i,e.targets,t):i})}/*!
fflate - fast JavaScript compression/decompression
<https://101arrowz.github.io/fflate>
Licensed under MIT. https://github.com/101arrowz/fflate/blob/master/LICENSE
version 0.8.2
*/var $t=Uint8Array,p1=Uint16Array,fy=Int32Array,i8=new $t([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),s8=new $t([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),hy=new $t([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),r8=function(i,e){for(var t=new p1(31),n=0;n<31;++n)t[n]=e+=1<<i[n-1];for(var s=new fy(t[30]),n=1;n<30;++n)for(var r=t[n];r<t[n+1];++r)s[r]=r-t[n]<<5|n;return{b:t,r:s}},a8=r8(i8,2),o8=a8.b,my=a8.r;o8[28]=258,my[258]=28;var yy=r8(s8,0),by=yy.b,eo=new p1(32768);for(var Ge=0;Ge<32768;++Ge){var si=(Ge&43690)>>1|(Ge&21845)<<1;si=(si&52428)>>2|(si&13107)<<2,si=(si&61680)>>4|(si&3855)<<4,eo[Ge]=((si&65280)>>8|(si&255)<<8)>>1}var os=function(i,e,t){for(var n=i.length,s=0,r=new p1(e);s<n;++s)i[s]&&++r[i[s]-1];var a=new p1(e);for(s=1;s<e;++s)a[s]=a[s-1]+r[s-1]<<1;var o;if(t){o=new p1(1<<e);var l=15-e;for(s=0;s<n;++s)if(i[s])for(var d=s<<4|i[s],c=e-i[s],u=a[i[s]-1]++<<c,p=u|(1<<c)-1;u<=p;++u)o[eo[u]>>l]=d}else for(o=new p1(n),s=0;s<n;++s)i[s]&&(o[s]=eo[a[i[s]-1]++]>>15-i[s]);return o},Ns=new $t(288);for(var Ge=0;Ge<144;++Ge)Ns[Ge]=8;for(var Ge=144;Ge<256;++Ge)Ns[Ge]=9;for(var Ge=256;Ge<280;++Ge)Ns[Ge]=7;for(var Ge=280;Ge<288;++Ge)Ns[Ge]=8;var l8=new $t(32);for(var Ge=0;Ge<32;++Ge)l8[Ge]=5;var vy=os(Ns,9,1),gy=os(l8,5,1),P3=function(i){for(var e=i[0],t=1;t<i.length;++t)i[t]>e&&(e=i[t]);return e},an=function(i,e,t){var n=e/8|0;return(i[n]|i[n+1]<<8)>>(e&7)&t},H3=function(i,e){var t=e/8|0;return(i[t]|i[t+1]<<8|i[t+2]<<16)>>(e&7)},wy=function(i){return(i+7)/8|0},Ty=function(i,e,t){return(t==null||t>i.length)&&(t=i.length),new $t(i.subarray(e,t))},xy=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],ln=function(i,e,t){var n=new Error(e||xy[i]);if(n.code=i,Error.captureStackTrace&&Error.captureStackTrace(n,ln),!t)throw n;return n},Sy=function(i,e,t,n){var s=i.length,r=0;if(!s||e.f&&!e.l)return t||new $t(0);var a=!t,o=a||e.i!=2,l=e.i;a&&(t=new $t(s*3));var d=function(Le){var Oe=t.length;if(Le>Oe){var fe=new $t(Math.max(Oe*2,Le));fe.set(t),t=fe}},c=e.f||0,u=e.p||0,p=e.b||0,h=e.l,b=e.d,T=e.m,m=e.n,f=s*8;do{if(!h){c=an(i,u,1);var N=an(i,u+1,3);if(u+=3,N)if(N==1)h=vy,b=gy,T=9,m=5;else if(N==2){var C=an(i,u,31)+257,D=an(i,u+10,15)+4,G=C+an(i,u+5,31)+1;u+=14;for(var L=new $t(G),H=new $t(19),W=0;W<D;++W)H[hy[W]]=an(i,u+W*3,7);u+=D*3;for(var B=P3(H),Q=(1<<B)-1,e0=os(H,B,1),W=0;W<G;){var u0=e0[an(i,u,Q)];u+=u0&15;var M=u0>>4;if(M<16)L[W++]=M;else{var n0=0,b0=0;for(M==16?(b0=3+an(i,u,3),u+=2,n0=L[W-1]):M==17?(b0=3+an(i,u,7),u+=3):M==18&&(b0=11+an(i,u,127),u+=7);b0--;)L[W++]=n0}}var t0=L.subarray(0,C),x0=L.subarray(C);T=P3(t0),m=P3(x0),h=os(t0,T,1),b=os(x0,m,1)}else ln(1);else{var M=wy(u)+4,P=i[M-4]|i[M-3]<<8,V=M+P;if(V>s){l&&ln(0);break}o&&d(p+P),t.set(i.subarray(M,V),p),e.b=p+=P,e.p=u=V*8,e.f=c;continue}if(u>f){l&&ln(0);break}}o&&d(p+131072);for(var R0=(1<<T)-1,V0=(1<<m)-1,B0=u;;B0=u){var n0=h[H3(i,u)&R0],ue=n0>>4;if(u+=n0&15,u>f){l&&ln(0);break}if(n0||ln(2),ue<256)t[p++]=ue;else if(ue==256){B0=u,h=null;break}else{var s0=ue-254;if(ue>264){var W=ue-257,w0=i8[W];s0=an(i,u,(1<<w0)-1)+o8[W],u+=w0}var T0=b[H3(i,u)&V0],S0=T0>>4;T0||ln(3),u+=T0&15;var x0=by[S0];if(S0>3){var w0=s8[S0];x0+=H3(i,u)&(1<<w0)-1,u+=w0}if(u>f){l&&ln(0);break}o&&d(p+131072);var I0=p+s0;if(p<x0){var me=r-x0,Z0=Math.min(x0,I0);for(me+p<0&&ln(3);p<Z0;++p)t[p]=n[me+p]}for(;p<I0;++p)t[p]=t[p-x0]}}e.l=h,e.p=B0,e.b=p,e.f=c,h&&(c=1,e.m=T,e.d=b,e.n=m)}while(!c);return p!=t.length&&a?Ty(t,0,p):t.subarray(0,p)},Py=new $t(0),Hy=function(i,e){return((i[0]&15)!=8||i[0]>>4>7||(i[0]<<8|i[1])%31)&&ln(6,"invalid zlib data"),(i[1]>>5&1)==1&&ln(6,"invalid zlib data: "+(i[1]&32?"need":"unexpected")+" dictionary"),(i[1]>>3&4)+2};function cr(i,e){return Sy(i.subarray(Hy(i),-4),{i:2},e,e)}var Ry=typeof TextDecoder<"u"&&new TextDecoder,Ny=0;try{Ry.decode(Py,{stream:!0}),Ny=1}catch{}class Ly extends lc{constructor(e){super(e),this.type=jn}parse(e){const L=Math.pow(2.7182818,2.2);function H(g,R){let X=0;for(let E=0;E<65536;++E)(E==0||g[E>>3]&1<<(E&7))&&(R[X++]=E);const w=X-1;for(;X<65536;)R[X++]=0;return w}function W(g){for(let R=0;R<16384;R++)g[R]={},g[R].len=0,g[R].lit=0,g[R].p=null}const B={l:0,c:0,lc:0};function Q(g,R,X,w,E){for(;X<g;)R=R<<8|Y0(w,E),X+=8;X-=g,B.l=R>>X&(1<<g)-1,B.c=R,B.lc=X}const e0=new Array(59);function u0(g){for(let X=0;X<=58;++X)e0[X]=0;for(let X=0;X<65537;++X)e0[g[X]]+=1;let R=0;for(let X=58;X>0;--X){const w=R+e0[X]>>1;e0[X]=R,R=w}for(let X=0;X<65537;++X){const w=g[X];w>0&&(g[X]=w|e0[w]++<<6)}}function n0(g,R,X,w,E,O){const A=R;let z=0,Z=0;for(;w<=E;w++){if(A.value-R.value>X)return!1;Q(6,z,Z,g,A);const k=B.l;if(z=B.c,Z=B.lc,O[w]=k,k==63){if(A.value-R.value>X)throw new Error("Something wrong with hufUnpackEncTable");Q(8,z,Z,g,A);let J=B.l+6;if(z=B.c,Z=B.lc,w+J>E+1)throw new Error("Something wrong with hufUnpackEncTable");for(;J--;)O[w++]=0;w--}else if(k>=59){let J=k-59+2;if(w+J>E+1)throw new Error("Something wrong with hufUnpackEncTable");for(;J--;)O[w++]=0;w--}}u0(O)}function b0(g){return g&63}function t0(g){return g>>6}function x0(g,R,X,w){for(;R<=X;R++){const E=t0(g[R]),O=b0(g[R]);if(E>>O)throw new Error("Invalid table entry");if(O>14){const A=w[E>>O-14];if(A.len)throw new Error("Invalid table entry");if(A.lit++,A.p){const z=A.p;A.p=new Array(A.lit);for(let Z=0;Z<A.lit-1;++Z)A.p[Z]=z[Z]}else A.p=new Array(1);A.p[A.lit-1]=R}else if(O){let A=0;for(let z=1<<14-O;z>0;z--){const Z=w[(E<<14-O)+A];if(Z.len||Z.p)throw new Error("Invalid table entry");Z.len=O,Z.lit=R,A++}}}return!0}const R0={c:0,lc:0};function V0(g,R,X,w){g=g<<8|Y0(X,w),R+=8,R0.c=g,R0.lc=R}const B0={c:0,lc:0};function ue(g,R,X,w,E,O,A,z,Z){if(g==R){w<8&&(V0(X,w,E,O),X=R0.c,w=R0.lc),w-=8;let k=X>>w;if(k=new Uint8Array([k])[0],z.value+k>Z)return!1;const J=A[z.value-1];for(;k-- >0;)A[z.value++]=J}else if(z.value<Z)A[z.value++]=g;else return!1;B0.c=X,B0.lc=w}function s0(g){return g&65535}function w0(g){const R=s0(g);return R>32767?R-65536:R}const T0={a:0,b:0};function S0(g,R){const X=w0(g),E=w0(R),O=X+(E&1)+(E>>1),A=O,z=O-E;T0.a=A,T0.b=z}function I0(g,R){const X=s0(g),w=s0(R),E=X-(w>>1)&65535,O=w+E-32768&65535;T0.a=O,T0.b=E}function me(g,R,X,w,E,O,A){const z=A<16384,Z=X>E?E:X;let k=1,J,$;for(;k<=Z;)k<<=1;for(k>>=1,J=k,k>>=1;k>=1;){$=0;const a0=$+O*(E-J),o0=O*k,c0=O*J,f0=w*k,g0=w*J;let M0,q0,k0,z0;for(;$<=a0;$+=c0){let $0=$;const E0=$+w*(X-J);for(;$0<=E0;$0+=g0){const Te=$0+f0,tt=$0+o0,xe=tt+f0;z?(S0(g[$0+R],g[tt+R]),M0=T0.a,k0=T0.b,S0(g[Te+R],g[xe+R]),q0=T0.a,z0=T0.b,S0(M0,q0),g[$0+R]=T0.a,g[Te+R]=T0.b,S0(k0,z0),g[tt+R]=T0.a,g[xe+R]=T0.b):(I0(g[$0+R],g[tt+R]),M0=T0.a,k0=T0.b,I0(g[Te+R],g[xe+R]),q0=T0.a,z0=T0.b,I0(M0,q0),g[$0+R]=T0.a,g[Te+R]=T0.b,I0(k0,z0),g[tt+R]=T0.a,g[xe+R]=T0.b)}if(X&k){const Te=$0+o0;z?S0(g[$0+R],g[Te+R]):I0(g[$0+R],g[Te+R]),M0=T0.a,g[Te+R]=T0.b,g[$0+R]=M0}}if(E&k){let $0=$;const E0=$+w*(X-J);for(;$0<=E0;$0+=g0){const Te=$0+f0;z?S0(g[$0+R],g[Te+R]):I0(g[$0+R],g[Te+R]),M0=T0.a,g[Te+R]=T0.b,g[$0+R]=M0}}J=k,k>>=1}return $}function Z0(g,R,X,w,E,O,A,z,Z){let k=0,J=0;const $=A,a0=Math.trunc(w.value+(E+7)/8);for(;w.value<a0;)for(V0(k,J,X,w),k=R0.c,J=R0.lc;J>=14;){const c0=k>>J-14&16383,f0=R[c0];if(f0.len)J-=f0.len,ue(f0.lit,O,k,J,X,w,z,Z,$),k=B0.c,J=B0.lc;else{if(!f0.p)throw new Error("hufDecode issues");let g0;for(g0=0;g0<f0.lit;g0++){const M0=b0(g[f0.p[g0]]);for(;J<M0&&w.value<a0;)V0(k,J,X,w),k=R0.c,J=R0.lc;if(J>=M0&&t0(g[f0.p[g0]])==(k>>J-M0&(1<<M0)-1)){J-=M0,ue(f0.p[g0],O,k,J,X,w,z,Z,$),k=B0.c,J=B0.lc;break}}if(g0==f0.lit)throw new Error("hufDecode issues")}}const o0=8-E&7;for(k>>=o0,J-=o0;J>0;){const c0=R[k<<14-J&16383];if(c0.len)J-=c0.len,ue(c0.lit,O,k,J,X,w,z,Z,$),k=B0.c,J=B0.lc;else throw new Error("hufDecode issues")}return!0}function Le(g,R,X,w,E,O){const A={value:0},z=X.value,Z=P0(R,X),k=P0(R,X);X.value+=4;const J=P0(R,X);if(X.value+=4,Z<0||Z>=65537||k<0||k>=65537)throw new Error("Something wrong with HUF_ENCSIZE");const $=new Array(65537),a0=new Array(16384);W(a0);const o0=w-(X.value-z);if(n0(g,X,o0,Z,k,$),J>8*(w-(X.value-z)))throw new Error("Something wrong with hufUncompress");x0($,Z,k,a0),Z0($,a0,g,X,J,k,O,E,A)}function Oe(g,R,X){for(let w=0;w<X;++w)R[w]=g[R[w]]}function fe(g){for(let R=1;R<g.length;R++){const X=g[R-1]+g[R]-128;g[R]=X}}function j(g,R){let X=0,w=Math.floor((g.length+1)/2),E=0;const O=g.length-1;for(;!(E>O||(R[E++]=g[X++],E>O));)R[E++]=g[w++]}function dt(g){let R=g.byteLength;const X=new Array;let w=0;const E=new DataView(g);for(;R>0;){const O=E.getInt8(w++);if(O<0){const A=-O;R-=A+1;for(let z=0;z<A;z++)X.push(E.getUint8(w++))}else{const A=O;R-=2;const z=E.getUint8(w++);for(let Z=0;Z<A+1;Z++)X.push(z)}}return X}function we(g,R,X,w,E,O){let A=new DataView(O.buffer);const z=X[g.idx[0]].width,Z=X[g.idx[0]].height,k=3,J=Math.floor(z/8),$=Math.ceil(z/8),a0=Math.ceil(Z/8),o0=z-($-1)*8,c0=Z-(a0-1)*8,f0={value:0},g0=new Array(k),M0=new Array(k),q0=new Array(k),k0=new Array(k),z0=new Array(k);for(let E0=0;E0<k;++E0)z0[E0]=R[g.idx[E0]],g0[E0]=E0<1?0:g0[E0-1]+$*a0,M0[E0]=new Float32Array(64),q0[E0]=new Uint16Array(64),k0[E0]=new Uint16Array($*64);for(let E0=0;E0<a0;++E0){let Te=8;E0==a0-1&&(Te=c0);let tt=8;for(let ye=0;ye<$;++ye){ye==$-1&&(tt=o0);for(let J0=0;J0<k;++J0)q0[J0].fill(0),q0[J0][0]=E[g0[J0]++],ze(f0,w,q0[J0]),D0(q0[J0],M0[J0]),ve(M0[J0]);G0(M0);for(let J0=0;J0<k;++J0)ie(M0[J0],k0[J0],ye*64)}let xe=0;for(let ye=0;ye<k;++ye){const J0=X[g.idx[ye]].type;for(let Je=8*E0;Je<8*E0+Te;++Je){xe=z0[ye][Je];for(let ct=0;ct<J;++ct){const De=ct*64+(Je&7)*8;A.setUint16(xe+0*2*J0,k0[ye][De+0],!0),A.setUint16(xe+1*2*J0,k0[ye][De+1],!0),A.setUint16(xe+2*2*J0,k0[ye][De+2],!0),A.setUint16(xe+3*2*J0,k0[ye][De+3],!0),A.setUint16(xe+4*2*J0,k0[ye][De+4],!0),A.setUint16(xe+5*2*J0,k0[ye][De+5],!0),A.setUint16(xe+6*2*J0,k0[ye][De+6],!0),A.setUint16(xe+7*2*J0,k0[ye][De+7],!0),xe+=8*2*J0}}if(J!=$)for(let Je=8*E0;Je<8*E0+Te;++Je){const ct=z0[ye][Je]+8*J*2*J0,De=J*64+(Je&7)*8;for(let nt=0;nt<tt;++nt)A.setUint16(ct+nt*2*J0,k0[ye][De+nt],!0)}}}const $0=new Uint16Array(z);A=new DataView(O.buffer);for(let E0=0;E0<k;++E0){X[g.idx[E0]].decoded=!0;const Te=X[g.idx[E0]].type;if(X[E0].type==2)for(let tt=0;tt<Z;++tt){const xe=z0[E0][tt];for(let ye=0;ye<z;++ye)$0[ye]=A.getUint16(xe+ye*2*Te,!0);for(let ye=0;ye<z;++ye)A.setFloat32(xe+ye*2*Te,_($0[ye]),!0)}}}function ze(g,R,X){let w,E=1;for(;E<64;)w=R[g.value],w==65280?E=64:w>>8==255?E+=w&255:(X[E]=w,E++),g.value++}function D0(g,R){R[0]=_(g[0]),R[1]=_(g[1]),R[2]=_(g[5]),R[3]=_(g[6]),R[4]=_(g[14]),R[5]=_(g[15]),R[6]=_(g[27]),R[7]=_(g[28]),R[8]=_(g[2]),R[9]=_(g[4]),R[10]=_(g[7]),R[11]=_(g[13]),R[12]=_(g[16]),R[13]=_(g[26]),R[14]=_(g[29]),R[15]=_(g[42]),R[16]=_(g[3]),R[17]=_(g[8]),R[18]=_(g[12]),R[19]=_(g[17]),R[20]=_(g[25]),R[21]=_(g[30]),R[22]=_(g[41]),R[23]=_(g[43]),R[24]=_(g[9]),R[25]=_(g[11]),R[26]=_(g[18]),R[27]=_(g[24]),R[28]=_(g[31]),R[29]=_(g[40]),R[30]=_(g[44]),R[31]=_(g[53]),R[32]=_(g[10]),R[33]=_(g[19]),R[34]=_(g[23]),R[35]=_(g[32]),R[36]=_(g[39]),R[37]=_(g[45]),R[38]=_(g[52]),R[39]=_(g[54]),R[40]=_(g[20]),R[41]=_(g[22]),R[42]=_(g[33]),R[43]=_(g[38]),R[44]=_(g[46]),R[45]=_(g[51]),R[46]=_(g[55]),R[47]=_(g[60]),R[48]=_(g[21]),R[49]=_(g[34]),R[50]=_(g[37]),R[51]=_(g[47]),R[52]=_(g[50]),R[53]=_(g[56]),R[54]=_(g[59]),R[55]=_(g[61]),R[56]=_(g[35]),R[57]=_(g[36]),R[58]=_(g[48]),R[59]=_(g[49]),R[60]=_(g[57]),R[61]=_(g[58]),R[62]=_(g[62]),R[63]=_(g[63])}function ve(g){const R=.5*Math.cos(.7853975),X=.5*Math.cos(3.14159/16),w=.5*Math.cos(3.14159/8),E=.5*Math.cos(3*3.14159/16),O=.5*Math.cos(5*3.14159/16),A=.5*Math.cos(3*3.14159/8),z=.5*Math.cos(7*3.14159/16),Z=new Array(4),k=new Array(4),J=new Array(4),$=new Array(4);for(let a0=0;a0<8;++a0){const o0=a0*8;Z[0]=w*g[o0+2],Z[1]=A*g[o0+2],Z[2]=w*g[o0+6],Z[3]=A*g[o0+6],k[0]=X*g[o0+1]+E*g[o0+3]+O*g[o0+5]+z*g[o0+7],k[1]=E*g[o0+1]-z*g[o0+3]-X*g[o0+5]-O*g[o0+7],k[2]=O*g[o0+1]-X*g[o0+3]+z*g[o0+5]+E*g[o0+7],k[3]=z*g[o0+1]-O*g[o0+3]+E*g[o0+5]-X*g[o0+7],J[0]=R*(g[o0+0]+g[o0+4]),J[3]=R*(g[o0+0]-g[o0+4]),J[1]=Z[0]+Z[3],J[2]=Z[1]-Z[2],$[0]=J[0]+J[1],$[1]=J[3]+J[2],$[2]=J[3]-J[2],$[3]=J[0]-J[1],g[o0+0]=$[0]+k[0],g[o0+1]=$[1]+k[1],g[o0+2]=$[2]+k[2],g[o0+3]=$[3]+k[3],g[o0+4]=$[3]-k[3],g[o0+5]=$[2]-k[2],g[o0+6]=$[1]-k[1],g[o0+7]=$[0]-k[0]}for(let a0=0;a0<8;++a0)Z[0]=w*g[16+a0],Z[1]=A*g[16+a0],Z[2]=w*g[48+a0],Z[3]=A*g[48+a0],k[0]=X*g[8+a0]+E*g[24+a0]+O*g[40+a0]+z*g[56+a0],k[1]=E*g[8+a0]-z*g[24+a0]-X*g[40+a0]-O*g[56+a0],k[2]=O*g[8+a0]-X*g[24+a0]+z*g[40+a0]+E*g[56+a0],k[3]=z*g[8+a0]-O*g[24+a0]+E*g[40+a0]-X*g[56+a0],J[0]=R*(g[a0]+g[32+a0]),J[3]=R*(g[a0]-g[32+a0]),J[1]=Z[0]+Z[3],J[2]=Z[1]-Z[2],$[0]=J[0]+J[1],$[1]=J[3]+J[2],$[2]=J[3]-J[2],$[3]=J[0]-J[1],g[0+a0]=$[0]+k[0],g[8+a0]=$[1]+k[1],g[16+a0]=$[2]+k[2],g[24+a0]=$[3]+k[3],g[32+a0]=$[3]-k[3],g[40+a0]=$[2]-k[2],g[48+a0]=$[1]-k[1],g[56+a0]=$[0]-k[0]}function G0(g){for(let R=0;R<64;++R){const X=g[0][R],w=g[1][R],E=g[2][R];g[0][R]=X+1.5747*E,g[1][R]=X-.1873*w-.4682*E,g[2][R]=X+1.8556*w}}function ie(g,R,X){for(let w=0;w<64;++w)R[X+w]=j7.toHalfFloat(Qe(g[w]))}function Qe(g){return g<=1?Math.sign(g)*Math.pow(Math.abs(g),2.2):Math.sign(g)*Math.pow(L,Math.abs(g)-1)}function I(g){return new DataView(g.array.buffer,g.offset.value,g.size)}function S(g){const R=g.viewer.buffer.slice(g.offset.value,g.offset.value+g.size),X=new Uint8Array(dt(R)),w=new Uint8Array(X.length);return fe(X),j(X,w),new DataView(w.buffer)}function K(g){const R=g.array.slice(g.offset.value,g.offset.value+g.size),X=cr(R),w=new Uint8Array(X.length);return fe(X),j(X,w),new DataView(w.buffer)}function r0(g){const R=g.viewer,X={value:g.offset.value},w=new Uint16Array(g.columns*g.lines*(g.inputChannels.length*g.type)),E=new Uint8Array(8192);let O=0;const A=new Array(g.inputChannels.length);for(let c0=0,f0=g.inputChannels.length;c0<f0;c0++)A[c0]={},A[c0].start=O,A[c0].end=A[c0].start,A[c0].nx=g.columns,A[c0].ny=g.lines,A[c0].size=g.type,O+=A[c0].nx*A[c0].ny*A[c0].size;const z=h0(R,X),Z=h0(R,X);if(Z>=8192)throw new Error("Something is wrong with PIZ_COMPRESSION BITMAP_SIZE");if(z<=Z)for(let c0=0;c0<Z-z+1;c0++)E[c0+z]=j0(R,X);const k=new Uint16Array(65536),J=H(E,k),$=P0(R,X);Le(g.array,R,X,$,w,O);for(let c0=0;c0<g.inputChannels.length;++c0){const f0=A[c0];for(let g0=0;g0<A[c0].size;++g0)me(w,f0.start+g0,f0.nx,f0.size,f0.ny,f0.nx*f0.size,J)}Oe(k,w,O);let a0=0;const o0=new Uint8Array(w.buffer.byteLength);for(let c0=0;c0<g.lines;c0++)for(let f0=0;f0<g.inputChannels.length;f0++){const g0=A[f0],M0=g0.nx*g0.size,q0=new Uint8Array(w.buffer,g0.end*2,M0*2);o0.set(q0,a0),a0+=M0*2,g0.end+=M0}return new DataView(o0.buffer)}function p0(g){const R=g.array.slice(g.offset.value,g.offset.value+g.size),X=cr(R),w=g.inputChannels.length*g.lines*g.columns*g.totalBytes,E=new ArrayBuffer(w),O=new DataView(E);let A=0,z=0;const Z=new Array(4);for(let k=0;k<g.lines;k++)for(let J=0;J<g.inputChannels.length;J++){let $=0;switch(g.inputChannels[J].pixelType){case 1:Z[0]=A,Z[1]=Z[0]+g.columns,A=Z[1]+g.columns;for(let o0=0;o0<g.columns;++o0){const c0=X[Z[0]++]<<8|X[Z[1]++];$+=c0,O.setUint16(z,$,!0),z+=2}break;case 2:Z[0]=A,Z[1]=Z[0]+g.columns,Z[2]=Z[1]+g.columns,A=Z[2]+g.columns;for(let o0=0;o0<g.columns;++o0){const c0=X[Z[0]++]<<24|X[Z[1]++]<<16|X[Z[2]++]<<8;$+=c0,O.setUint32(z,$,!0),z+=4}break}}return O}function i0(g){const R=g.viewer,X={value:g.offset.value},w=new Uint8Array(g.columns*g.lines*(g.inputChannels.length*g.type*2)),E={version:v0(R,X),unknownUncompressedSize:v0(R,X),unknownCompressedSize:v0(R,X),acCompressedSize:v0(R,X),dcCompressedSize:v0(R,X),rleCompressedSize:v0(R,X),rleUncompressedSize:v0(R,X),rleRawSize:v0(R,X),totalAcUncompressedCount:v0(R,X),totalDcUncompressedCount:v0(R,X),acCompression:v0(R,X)};if(E.version<2)throw new Error("EXRLoader.parse: "+Mn.compression+" version "+E.version+" is unsupported");const O=new Array;let A=h0(R,X)-2;for(;A>0;){const f0=A0(R.buffer,X),g0=j0(R,X),M0=g0>>2&3,q0=(g0>>4)-1,k0=new Int8Array([q0])[0],z0=j0(R,X);O.push({name:f0,index:k0,type:z0,compression:M0}),A-=f0.length+3}const z=Mn.channels,Z=new Array(g.inputChannels.length);for(let f0=0;f0<g.inputChannels.length;++f0){const g0=Z[f0]={},M0=z[f0];g0.name=M0.name,g0.compression=0,g0.decoded=!1,g0.type=M0.pixelType,g0.pLinear=M0.pLinear,g0.width=g.columns,g0.height=g.lines}const k={idx:new Array(3)};for(let f0=0;f0<g.inputChannels.length;++f0){const g0=Z[f0];for(let M0=0;M0<O.length;++M0){const q0=O[M0];g0.name==q0.name&&(g0.compression=q0.compression,q0.index>=0&&(k.idx[q0.index]=f0),g0.offset=f0)}}let J,$,a0;if(E.acCompressedSize>0)switch(E.acCompression){case 0:J=new Uint16Array(E.totalAcUncompressedCount),Le(g.array,R,X,E.acCompressedSize,J,E.totalAcUncompressedCount);break;case 1:const f0=g.array.slice(X.value,X.value+E.totalAcUncompressedCount),g0=cr(f0);J=new Uint16Array(g0.buffer),X.value+=E.totalAcUncompressedCount;break}if(E.dcCompressedSize>0){const f0={array:g.array,offset:X,size:E.dcCompressedSize};$=new Uint16Array(K(f0).buffer),X.value+=E.dcCompressedSize}if(E.rleRawSize>0){const f0=g.array.slice(X.value,X.value+E.rleCompressedSize),g0=cr(f0);a0=dt(g0.buffer),X.value+=E.rleCompressedSize}let o0=0;const c0=new Array(Z.length);for(let f0=0;f0<c0.length;++f0)c0[f0]=new Array;for(let f0=0;f0<g.lines;++f0)for(let g0=0;g0<Z.length;++g0)c0[g0].push(o0),o0+=Z[g0].width*g.type*2;we(k,c0,Z,J,$,w);for(let f0=0;f0<Z.length;++f0){const g0=Z[f0];if(!g0.decoded)switch(g0.compression){case 2:let M0=0,q0=0;for(let k0=0;k0<g.lines;++k0){let z0=c0[f0][M0];for(let $0=0;$0<g0.width;++$0){for(let E0=0;E0<2*g0.type;++E0)w[z0++]=a0[q0+E0*g0.width*g0.height];q0++}M0++}break;case 1:default:throw new Error("EXRLoader.parse: unsupported channel compression")}}return new DataView(w.buffer)}function A0(g,R){const X=new Uint8Array(g);let w=0;for(;X[R.value+w]!=0;)w+=1;const E=new TextDecoder().decode(X.slice(R.value,R.value+w));return R.value=R.value+w+1,E}function H0(g,R,X){const w=new TextDecoder().decode(new Uint8Array(g).slice(R.value,R.value+X));return R.value=R.value+X,w}function C0(g,R){const X=l0(g,R),w=P0(g,R);return[X,w]}function W0(g,R){const X=P0(g,R),w=P0(g,R);return[X,w]}function l0(g,R){const X=g.getInt32(R.value,!0);return R.value=R.value+4,X}function P0(g,R){const X=g.getUint32(R.value,!0);return R.value=R.value+4,X}function Y0(g,R){const X=g[R.value];return R.value=R.value+1,X}function j0(g,R){const X=g.getUint8(R.value);return R.value=R.value+1,X}const v0=function(g,R){let X;return"getBigInt64"in DataView.prototype?X=Number(g.getBigInt64(R.value,!0)):X=g.getUint32(R.value+4,!0)+Number(g.getUint32(R.value,!0)<<32),R.value+=8,X};function F0(g,R){const X=g.getFloat32(R.value,!0);return R.value+=4,X}function q(g,R){return j7.toHalfFloat(F0(g,R))}function _(g){const R=(g&31744)>>10,X=g&1023;return(g>>15?-1:1)*(R?R===31?X?NaN:1/0:Math.pow(2,R-15)*(1+X/1024):6103515625e-14*(X/1024))}function h0(g,R){const X=g.getUint16(R.value,!0);return R.value+=2,X}function O0(g,R){return _(h0(g,R))}function y0(g,R,X,w){const E=X.value,O=[];for(;X.value<E+w-1;){const A=A0(R,X),z=l0(g,X),Z=j0(g,X);X.value+=3;const k=l0(g,X),J=l0(g,X);O.push({name:A,pixelType:z,pLinear:Z,xSampling:k,ySampling:J})}return X.value+=1,O}function d0(g,R){const X=F0(g,R),w=F0(g,R),E=F0(g,R),O=F0(g,R),A=F0(g,R),z=F0(g,R),Z=F0(g,R),k=F0(g,R);return{redX:X,redY:w,greenX:E,greenY:O,blueX:A,blueY:z,whiteX:Z,whiteY:k}}function X0(g,R){const X=["NO_COMPRESSION","RLE_COMPRESSION","ZIPS_COMPRESSION","ZIP_COMPRESSION","PIZ_COMPRESSION","PXR24_COMPRESSION","B44_COMPRESSION","B44A_COMPRESSION","DWAA_COMPRESSION","DWAB_COMPRESSION"],w=j0(g,R);return X[w]}function ne(g,R){const X=l0(g,R),w=l0(g,R),E=l0(g,R),O=l0(g,R);return{xMin:X,yMin:w,xMax:E,yMax:O}}function Ve(g,R){const X=["INCREASING_Y","DECREASING_Y","RANDOM_Y"],w=j0(g,R);return X[w]}function Pe(g,R){const X=["ENVMAP_LATLONG","ENVMAP_CUBE"],w=j0(g,R);return X[w]}function Ut(g,R){const X=["ONE_LEVEL","MIPMAP_LEVELS","RIPMAP_LEVELS"],w=["ROUND_DOWN","ROUND_UP"],E=P0(g,R),O=P0(g,R),A=j0(g,R);return{xSize:E,ySize:O,levelMode:X[A&15],roundingMode:w[A>>4]}}function tn(g,R){const X=F0(g,R),w=F0(g,R);return[X,w]}function Ms(g,R){const X=F0(g,R),w=F0(g,R),E=F0(g,R);return[X,w,E]}function Es(g,R,X,w,E){if(w==="string"||w==="stringvector"||w==="iccProfile")return H0(R,X,E);if(w==="chlist")return y0(g,R,X,E);if(w==="chromaticities")return d0(g,X);if(w==="compression")return X0(g,X);if(w==="box2i")return ne(g,X);if(w==="envmap")return Pe(g,X);if(w==="tiledesc")return Ut(g,X);if(w==="lineOrder")return Ve(g,X);if(w==="float")return F0(g,X);if(w==="v2f")return tn(g,X);if(w==="v3f")return Ms(g,X);if(w==="int")return l0(g,X);if(w==="rational")return C0(g,X);if(w==="timecode")return W0(g,X);if(w==="preview")return X.value+=E,"skipped";X.value+=E}function Ln(g,R){const X=Math.log2(g);return R=="ROUND_DOWN"?Math.floor(X):Math.ceil(X)}function A1(g,R,X){let w=0;switch(g.levelMode){case"ONE_LEVEL":w=1;break;case"MIPMAP_LEVELS":w=Ln(Math.max(R,X),g.roundingMode)+1;break;case"RIPMAP_LEVELS":throw new Error("THREE.EXRLoader: RIPMAP_LEVELS tiles currently unsupported.")}return w}function C1(g,R,X,w){const E=new Array(g);for(let O=0;O<g;O++){const A=1<<O;let z=R/A|0;w=="ROUND_UP"&&z*A<R&&(z+=1);const Z=Math.max(z,1);E[O]=(Z+X-1)/X|0}return E}function Os(){const g=this,R=g.offset,X={value:0};for(let w=0;w<g.tileCount;w++){const E=l0(g.viewer,R),O=l0(g.viewer,R);R.value+=8,g.size=P0(g.viewer,R);const A=E*g.blockWidth,z=O*g.blockHeight;g.columns=A+g.blockWidth>g.width?g.width-A:g.blockWidth,g.lines=z+g.blockHeight>g.height?g.height-z:g.blockHeight;const Z=g.columns*g.totalBytes,J=g.size<g.lines*Z?g.uncompress(g):I(g);R.value+=g.size;for(let $=0;$<g.lines;$++){const a0=$*g.columns*g.totalBytes;for(let o0=0;o0<g.inputChannels.length;o0++){const c0=Mn.channels[o0].name,f0=g.channelByteOffsets[c0]*g.columns,g0=g.decodeChannels[c0];if(g0===void 0)continue;X.value=a0+f0;const M0=(g.height-(1+z+$))*g.outLineWidth;for(let q0=0;q0<g.columns;q0++){const k0=M0+(q0+A)*g.outputChannels+g0;g.byteArray[k0]=g.getter(J,X)}}}}}function Fi(){const g=this,R=g.offset,X={value:0};for(let w=0;w<g.height/g.blockHeight;w++){const E=l0(g.viewer,R)-Mn.dataWindow.yMin;g.size=P0(g.viewer,R),g.lines=E+g.blockHeight>g.height?g.height-E:g.blockHeight;const O=g.columns*g.totalBytes,z=g.size<g.lines*O?g.uncompress(g):I(g);R.value+=g.size;for(let Z=0;Z<g.blockHeight;Z++){const k=w*g.blockHeight,J=Z+g.scanOrder(k);if(J>=g.height)continue;const $=Z*O,a0=(g.height-1-J)*g.outLineWidth;for(let o0=0;o0<g.inputChannels.length;o0++){const c0=Mn.channels[o0].name,f0=g.channelByteOffsets[c0]*g.columns,g0=g.decodeChannels[c0];if(g0!==void 0){X.value=$+f0;for(let M0=0;M0<g.columns;M0++){const q0=a0+M0*g.outputChannels+g0;g.byteArray[q0]=g.getter(z,X)}}}}}}function zs(g,R,X){const w={};if(g.getUint32(0,!0)!=20000630)throw new Error("THREE.EXRLoader: Provided file doesn't appear to be in OpenEXR format.");w.version=g.getUint8(4);const E=g.getUint8(5);w.spec={singleTile:!!(E&2),longName:!!(E&4),deepFormat:!!(E&8),multiPart:!!(E&16)},X.value=8;let O=!0;for(;O;){const A=A0(R,X);if(A==="")O=!1;else{const z=A0(R,X),Z=P0(g,X),k=Es(g,R,X,z,Z);k===void 0?console.warn(`THREE.EXRLoader: Skipped unknown header attribute type '${z}'.`):w[A]=k}}if((E&-7)!=0)throw console.error("THREE.EXRHeader:",w),new Error("THREE.EXRLoader: Provided file is currently unsupported.");return w}function Vi(g,R,X,w,E){const O={size:0,viewer:R,array:X,offset:w,width:g.dataWindow.xMax-g.dataWindow.xMin+1,height:g.dataWindow.yMax-g.dataWindow.yMin+1,inputChannels:g.channels,channelByteOffsets:{},scanOrder:null,totalBytes:null,columns:null,lines:null,type:null,uncompress:null,getter:null,format:null,colorSpace:xt};switch(g.compression){case"NO_COMPRESSION":O.blockHeight=1,O.uncompress=I;break;case"RLE_COMPRESSION":O.blockHeight=1,O.uncompress=S;break;case"ZIPS_COMPRESSION":O.blockHeight=1,O.uncompress=K;break;case"ZIP_COMPRESSION":O.blockHeight=16,O.uncompress=K;break;case"PIZ_COMPRESSION":O.blockHeight=32,O.uncompress=r0;break;case"PXR24_COMPRESSION":O.blockHeight=16,O.uncompress=p0;break;case"DWAA_COMPRESSION":O.blockHeight=32,O.uncompress=i0;break;case"DWAB_COMPRESSION":O.blockHeight=256,O.uncompress=i0;break;default:throw new Error("EXRLoader.parse: "+g.compression+" is unsupported")}const A={};for(const J of g.channels)switch(J.name){case"Y":case"R":case"G":case"B":case"A":A[J.name]=!0,O.type=J.pixelType}let z=!1;if(A.R&&A.G&&A.B)z=!A.A,O.outputChannels=4,O.decodeChannels={R:0,G:1,B:2,A:3};else if(A.Y)O.outputChannels=1,O.decodeChannels={Y:0};else throw new Error("EXRLoader.parse: file contains unsupported data channels.");if(O.type==1)switch(E){case jt:O.getter=O0;break;case jn:O.getter=h0;break}else if(O.type==2)switch(E){case jt:O.getter=F0;break;case jn:O.getter=q}else throw new Error("EXRLoader.parse: unsupported pixelType "+O.type+" for "+g.compression+".");O.columns=O.width;const Z=O.width*O.height*O.outputChannels;switch(E){case jt:O.byteArray=new Float32Array(Z),z&&O.byteArray.fill(1,0,Z);break;case jn:O.byteArray=new Uint16Array(Z),z&&O.byteArray.fill(15360,0,Z);break;default:console.error("THREE.EXRLoader: unsupported type: ",E);break}let k=0;for(const J of g.channels)O.decodeChannels[J.name]!==void 0&&(O.channelByteOffsets[J.name]=k),k+=J.pixelType*2;if(O.totalBytes=k,O.outLineWidth=O.width*O.outputChannels,g.lineOrder==="INCREASING_Y"?O.scanOrder=J=>J:O.scanOrder=J=>O.height-1-J,O.outputChannels==4?(O.format=Yt,O.colorSpace=xt):(O.format=g2,O.colorSpace=Vn),g.spec.singleTile){O.blockHeight=g.tiles.ySize,O.blockWidth=g.tiles.xSize;const J=A1(g.tiles,O.width,O.height),$=C1(J,O.width,g.tiles.xSize,g.tiles.roundingMode),a0=C1(J,O.height,g.tiles.ySize,g.tiles.roundingMode);O.tileCount=$[0]*a0[0];for(let o0=0;o0<J;o0++)for(let c0=0;c0<a0[o0];c0++)for(let f0=0;f0<$[o0];f0++)v0(R,w);O.decode=Os.bind(O)}else{O.blockWidth=O.width;const J=Math.ceil(O.height/O.blockHeight);for(let $=0;$<J;$++)v0(R,w);O.decode=Fi.bind(O)}return O}const F1={value:0},V1=new DataView(e),C2=new Uint8Array(e),Mn=zs(V1,e,F1),Bn=Vi(Mn,V1,C2,F1,this.type);return Bn.decode(),{header:Mn,width:Bn.width,height:Bn.height,data:Bn.byteArray,format:Bn.format,colorSpace:Bn.colorSpace,type:this.type}}setDataType(e){return this.type=e,this}load(e,t,n,s){function r(a,o){a.colorSpace=o.colorSpace,a.minFilter=vt,a.magFilter=vt,a.generateMipmaps=!1,a.flipY=!1,t&&t(a,o)}return super.load(e,r,n,s)}}const My=""+new URL("rapier_wasm3d_bg-DxsxPRy4.wasm",import.meta.url).href,Ey=async(i={},e)=>{let t;if(e.startsWith("data:")){const n=e.replace(/^data:.*?base64,/,"");let s;if(typeof Buffer=="function"&&typeof Buffer.from=="function")s=Buffer.from(n,"base64");else if(typeof atob=="function"){const r=atob(n);s=new Uint8Array(r.length);for(let a=0;a<r.length;a++)s[a]=r.charCodeAt(a)}else throw new Error("Cannot decode base64-encoded data URL");t=await WebAssembly.instantiate(s,i)}else{const n=await fetch(e),s=n.headers.get("Content-Type")||"";if("instantiateStreaming"in WebAssembly&&s.startsWith("application/wasm"))t=await WebAssembly.instantiateStreaming(n,i);else{const r=await n.arrayBuffer();t=await WebAssembly.instantiate(r,i)}}return t.instance.exports};let y;function Oy(i){y=i}const be=new Array(128).fill(void 0);be.push(void 0,null,!0,!1);function Re(i){return be[i]}let ls=be.length;function $e(i){ls===be.length&&be.push(be.length+1);const e=ls;return ls=be[e],be[e]=i,e}function a7(i,e){try{return i.apply(this,e)}catch(t){y.__wbindgen_export_0($e(t))}}function Q0(i){return i==null}let i1=null;function ft(){return(i1===null||i1.buffer.detached===!0||i1.buffer.detached===void 0&&i1.buffer!==y.memory.buffer)&&(i1=new DataView(y.memory.buffer)),i1}function zy(i){i<132||(be[i]=ls,ls=i)}function vs(i){const e=Re(i);return zy(i),e}const Iy=typeof TextDecoder>"u"?(0,module.require)("util").TextDecoder:TextDecoder;let d8=new Iy("utf-8",{ignoreBOM:!0,fatal:!0});d8.decode();let ur=null;function Xy(){return(ur===null||ur.byteLength===0)&&(ur=new Uint8Array(y.memory.buffer)),ur}function Ay(i,e){return i=i>>>0,d8.decode(Xy().subarray(i,i+e))}function F(i,e){if(!(i instanceof e))throw new Error(`expected instance of ${e.name}`)}let Ce=128;function Ue(i){if(Ce==1)throw new Error("out of js stack");return be[--Ce]=i,Ce}let pr=null;function Cy(){return(pr===null||pr.byteLength===0)&&(pr=new Int32Array(y.memory.buffer)),pr}function Fy(i,e){return i=i>>>0,Cy().subarray(i/4,i/4+e)}let fr=null;function c8(){return(fr===null||fr.byteLength===0)&&(fr=new Float32Array(y.memory.buffer)),fr}function Y9(i,e){return i=i>>>0,c8().subarray(i/4,i/4+e)}let hr=null;function u8(){return(hr===null||hr.byteLength===0)&&(hr=new Uint32Array(y.memory.buffer)),hr}function Vy(i,e){return i=i>>>0,u8().subarray(i/4,i/4+e)}let zt=0;function Q1(i,e){const t=e(i.length*4,4)>>>0;return u8().set(i,t/4),zt=i.length,t}function ri(i,e){const t=e(i.length*4,4)>>>0;return c8().set(i,t/4),zt=i.length,t}const H2=Object.freeze({LinX:0,0:"LinX",LinY:1,1:"LinY",LinZ:2,2:"LinZ",AngX:3,3:"AngX",AngY:4,4:"AngY",AngZ:5,5:"AngZ"}),dn=Object.freeze({Revolute:0,0:"Revolute",Fixed:1,1:"Fixed",Prismatic:2,2:"Prismatic",Rope:3,3:"Rope",Spring:4,4:"Spring",Spherical:5,5:"Spherical",Generic:6,6:"Generic"}),pt=Object.freeze({Ball:0,0:"Ball",Cuboid:1,1:"Cuboid",Capsule:2,2:"Capsule",Segment:3,3:"Segment",Polyline:4,4:"Polyline",Triangle:5,5:"Triangle",TriMesh:6,6:"TriMesh",HeightField:7,7:"HeightField",Compound:8,8:"Compound",ConvexPolyhedron:9,9:"ConvexPolyhedron",Cylinder:10,10:"Cylinder",Cone:11,11:"Cone",RoundCuboid:12,12:"RoundCuboid",RoundTriangle:13,13:"RoundTriangle",RoundCylinder:14,14:"RoundCylinder",RoundCone:15,15:"RoundCone",RoundConvexPolyhedron:16,16:"RoundConvexPolyhedron",HalfSpace:17,17:"HalfSpace",Voxels:18,18:"Voxels"}),R3=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawbroadphase_free(i>>>0,1));class Oi{static __wrap(e){e=e>>>0;const t=Object.create(Oi.prototype);return t.__wbg_ptr=e,R3.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,R3.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawbroadphase_free(e,0)}constructor(){const e=y.rawbroadphase_new();return this.__wbg_ptr=e>>>0,R3.register(this,this.__wbg_ptr,this),this}}const k9=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawccdsolver_free(i>>>0,1));class to{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,k9.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawccdsolver_free(e,0)}constructor(){const e=y.rawccdsolver_new();return this.__wbg_ptr=e>>>0,k9.register(this,this.__wbg_ptr,this),this}}const J9=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawcharactercollision_free(i>>>0,1));class p8{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,J9.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawcharactercollision_free(e,0)}constructor(){const e=y.rawcharactercollision_new();return this.__wbg_ptr=e>>>0,J9.register(this,this.__wbg_ptr,this),this}handle(){return y.rawcharactercollision_handle(this.__wbg_ptr)}translationDeltaApplied(){const e=y.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return U.__wrap(e)}translationDeltaRemaining(){const e=y.rawcharactercollision_translationDeltaRemaining(this.__wbg_ptr);return U.__wrap(e)}toi(){return y.rawcharactercollision_toi(this.__wbg_ptr)}worldWitness1(){const e=y.rawcharactercollision_worldWitness1(this.__wbg_ptr);return U.__wrap(e)}worldWitness2(){const e=y.rawcharactercollision_worldWitness2(this.__wbg_ptr);return U.__wrap(e)}worldNormal1(){const e=y.rawcharactercollision_worldNormal1(this.__wbg_ptr);return U.__wrap(e)}worldNormal2(){const e=y.rawcharactercollision_worldNormal2(this.__wbg_ptr);return U.__wrap(e)}}const N3=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawcolliderset_free(i>>>0,1));class ke{static __wrap(e){e=e>>>0;const t=Object.create(ke.prototype);return t.__wbg_ptr=e,N3.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,N3.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawcolliderset_free(e,0)}coTranslation(e){const t=y.rawcolliderset_coTranslation(this.__wbg_ptr,e);return U.__wrap(t)}coRotation(e){const t=y.rawcolliderset_coRotation(this.__wbg_ptr,e);return ce.__wrap(t)}coSetTranslation(e,t,n,s){y.rawcolliderset_coSetTranslation(this.__wbg_ptr,e,t,n,s)}coSetTranslationWrtParent(e,t,n,s){y.rawcolliderset_coSetTranslationWrtParent(this.__wbg_ptr,e,t,n,s)}coSetRotation(e,t,n,s,r){y.rawcolliderset_coSetRotation(this.__wbg_ptr,e,t,n,s,r)}coSetRotationWrtParent(e,t,n,s,r){y.rawcolliderset_coSetRotationWrtParent(this.__wbg_ptr,e,t,n,s,r)}coIsSensor(e){return y.rawcolliderset_coIsSensor(this.__wbg_ptr,e)!==0}coShapeType(e){return y.rawcolliderset_coShapeType(this.__wbg_ptr,e)}coHalfspaceNormal(e){const t=y.rawcolliderset_coHalfspaceNormal(this.__wbg_ptr,e);return t===0?void 0:U.__wrap(t)}coHalfExtents(e){const t=y.rawcolliderset_coHalfExtents(this.__wbg_ptr,e);return t===0?void 0:U.__wrap(t)}coSetHalfExtents(e,t){F(t,U),y.rawcolliderset_coSetHalfExtents(this.__wbg_ptr,e,t.__wbg_ptr)}coRadius(e){const t=y.rawcolliderset_coRadius(this.__wbg_ptr,e);return t===4294967297?void 0:t}coSetRadius(e,t){y.rawcolliderset_coSetRadius(this.__wbg_ptr,e,t)}coHalfHeight(e){const t=y.rawcolliderset_coHalfHeight(this.__wbg_ptr,e);return t===4294967297?void 0:t}coSetHalfHeight(e,t){y.rawcolliderset_coSetHalfHeight(this.__wbg_ptr,e,t)}coRoundRadius(e){const t=y.rawcolliderset_coRoundRadius(this.__wbg_ptr,e);return t===4294967297?void 0:t}coSetRoundRadius(e,t){y.rawcolliderset_coSetRoundRadius(this.__wbg_ptr,e,t)}coVoxelData(e){try{const s=y.__wbindgen_add_to_stack_pointer(-16);y.rawcolliderset_coVoxelData(s,this.__wbg_ptr,e);var t=ft().getInt32(s+4*0,!0),n=ft().getInt32(s+4*1,!0);let r;return t!==0&&(r=Fy(t,n).slice(),y.__wbindgen_export_1(t,n*4,4)),r}finally{y.__wbindgen_add_to_stack_pointer(16)}}coVoxelSize(e){const t=y.rawcolliderset_coVoxelSize(this.__wbg_ptr,e);return t===0?void 0:U.__wrap(t)}coSetVoxel(e,t,n,s,r){y.rawcolliderset_coSetVoxel(this.__wbg_ptr,e,t,n,s,r)}coPropagateVoxelChange(e,t,n,s,r,a,o,l){y.rawcolliderset_coPropagateVoxelChange(this.__wbg_ptr,e,t,n,s,r,a,o,l)}coCombineVoxelStates(e,t,n,s,r){y.rawcolliderset_coCombineVoxelStates(this.__wbg_ptr,e,t,n,s,r)}coVertices(e){try{const s=y.__wbindgen_add_to_stack_pointer(-16);y.rawcolliderset_coVertices(s,this.__wbg_ptr,e);var t=ft().getInt32(s+4*0,!0),n=ft().getInt32(s+4*1,!0);let r;return t!==0&&(r=Y9(t,n).slice(),y.__wbindgen_export_1(t,n*4,4)),r}finally{y.__wbindgen_add_to_stack_pointer(16)}}coIndices(e){try{const s=y.__wbindgen_add_to_stack_pointer(-16);y.rawcolliderset_coIndices(s,this.__wbg_ptr,e);var t=ft().getInt32(s+4*0,!0),n=ft().getInt32(s+4*1,!0);let r;return t!==0&&(r=Vy(t,n).slice(),y.__wbindgen_export_1(t,n*4,4)),r}finally{y.__wbindgen_add_to_stack_pointer(16)}}coTriMeshFlags(e){const t=y.rawcolliderset_coTriMeshFlags(this.__wbg_ptr,e);return t===4294967297?void 0:t}coHeightFieldFlags(e){const t=y.rawcolliderset_coHeightFieldFlags(this.__wbg_ptr,e);return t===4294967297?void 0:t}coHeightfieldHeights(e){try{const s=y.__wbindgen_add_to_stack_pointer(-16);y.rawcolliderset_coHeightfieldHeights(s,this.__wbg_ptr,e);var t=ft().getInt32(s+4*0,!0),n=ft().getInt32(s+4*1,!0);let r;return t!==0&&(r=Y9(t,n).slice(),y.__wbindgen_export_1(t,n*4,4)),r}finally{y.__wbindgen_add_to_stack_pointer(16)}}coHeightfieldScale(e){const t=y.rawcolliderset_coHeightfieldScale(this.__wbg_ptr,e);return t===0?void 0:U.__wrap(t)}coHeightfieldNRows(e){const t=y.rawcolliderset_coHeightfieldNRows(this.__wbg_ptr,e);return t===4294967297?void 0:t}coHeightfieldNCols(e){const t=y.rawcolliderset_coHeightfieldNCols(this.__wbg_ptr,e);return t===4294967297?void 0:t}coParent(e){try{const s=y.__wbindgen_add_to_stack_pointer(-16);y.rawcolliderset_coParent(s,this.__wbg_ptr,e);var t=ft().getInt32(s+4*0,!0),n=ft().getFloat64(s+8*1,!0);return t===0?void 0:n}finally{y.__wbindgen_add_to_stack_pointer(16)}}coSetEnabled(e,t){y.rawcolliderset_coSetEnabled(this.__wbg_ptr,e,t)}coIsEnabled(e){return y.rawcolliderset_coIsEnabled(this.__wbg_ptr,e)!==0}coSetContactSkin(e,t){y.rawcolliderset_coSetContactSkin(this.__wbg_ptr,e,t)}coContactSkin(e){return y.rawcolliderset_coContactSkin(this.__wbg_ptr,e)}coFriction(e){return y.rawcolliderset_coFriction(this.__wbg_ptr,e)}coRestitution(e){return y.rawcolliderset_coRestitution(this.__wbg_ptr,e)}coDensity(e){return y.rawcolliderset_coDensity(this.__wbg_ptr,e)}coMass(e){return y.rawcolliderset_coMass(this.__wbg_ptr,e)}coVolume(e){return y.rawcolliderset_coVolume(this.__wbg_ptr,e)}coCollisionGroups(e){return y.rawcolliderset_coCollisionGroups(this.__wbg_ptr,e)>>>0}coSolverGroups(e){return y.rawcolliderset_coSolverGroups(this.__wbg_ptr,e)>>>0}coActiveHooks(e){return y.rawcolliderset_coActiveHooks(this.__wbg_ptr,e)>>>0}coActiveCollisionTypes(e){return y.rawcolliderset_coActiveCollisionTypes(this.__wbg_ptr,e)}coActiveEvents(e){return y.rawcolliderset_coActiveEvents(this.__wbg_ptr,e)>>>0}coContactForceEventThreshold(e){return y.rawcolliderset_coContactForceEventThreshold(this.__wbg_ptr,e)}coContainsPoint(e,t){return F(t,U),y.rawcolliderset_coContainsPoint(this.__wbg_ptr,e,t.__wbg_ptr)!==0}coCastShape(e,t,n,s,r,a,o,l,d){F(t,U),F(n,U0),F(s,U),F(r,ce),F(a,U);const c=y.rawcolliderset_coCastShape(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,a.__wbg_ptr,o,l,d);return c===0?void 0:E2.__wrap(c)}coCastCollider(e,t,n,s,r,a,o){F(t,U),F(s,U);const l=y.rawcolliderset_coCastCollider(this.__wbg_ptr,e,t.__wbg_ptr,n,s.__wbg_ptr,r,a,o);return l===0?void 0:R2.__wrap(l)}coIntersectsShape(e,t,n,s){return F(t,U0),F(n,U),F(s,ce),y.rawcolliderset_coIntersectsShape(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr)!==0}coContactShape(e,t,n,s,r){F(t,U0),F(n,U),F(s,ce);const a=y.rawcolliderset_coContactShape(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r);return a===0?void 0:gs.__wrap(a)}coContactCollider(e,t,n){const s=y.rawcolliderset_coContactCollider(this.__wbg_ptr,e,t,n);return s===0?void 0:gs.__wrap(s)}coProjectPoint(e,t,n){F(t,U);const s=y.rawcolliderset_coProjectPoint(this.__wbg_ptr,e,t.__wbg_ptr,n);return N2.__wrap(s)}coIntersectsRay(e,t,n,s){return F(t,U),F(n,U),y.rawcolliderset_coIntersectsRay(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s)!==0}coCastRay(e,t,n,s,r){return F(t,U),F(n,U),y.rawcolliderset_coCastRay(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s,r)}coCastRayAndGetNormal(e,t,n,s,r){F(t,U),F(n,U);const a=y.rawcolliderset_coCastRayAndGetNormal(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s,r);return a===0?void 0:M2.__wrap(a)}coSetSensor(e,t){y.rawcolliderset_coSetSensor(this.__wbg_ptr,e,t)}coSetRestitution(e,t){y.rawcolliderset_coSetRestitution(this.__wbg_ptr,e,t)}coSetFriction(e,t){y.rawcolliderset_coSetFriction(this.__wbg_ptr,e,t)}coFrictionCombineRule(e){return y.rawcolliderset_coFrictionCombineRule(this.__wbg_ptr,e)>>>0}coSetFrictionCombineRule(e,t){y.rawcolliderset_coSetFrictionCombineRule(this.__wbg_ptr,e,t)}coRestitutionCombineRule(e){return y.rawcolliderset_coRestitutionCombineRule(this.__wbg_ptr,e)>>>0}coSetRestitutionCombineRule(e,t){y.rawcolliderset_coSetRestitutionCombineRule(this.__wbg_ptr,e,t)}coSetCollisionGroups(e,t){y.rawcolliderset_coSetCollisionGroups(this.__wbg_ptr,e,t)}coSetSolverGroups(e,t){y.rawcolliderset_coSetSolverGroups(this.__wbg_ptr,e,t)}coSetActiveHooks(e,t){y.rawcolliderset_coSetActiveHooks(this.__wbg_ptr,e,t)}coSetActiveEvents(e,t){y.rawcolliderset_coSetActiveEvents(this.__wbg_ptr,e,t)}coSetActiveCollisionTypes(e,t){y.rawcolliderset_coSetActiveCollisionTypes(this.__wbg_ptr,e,t)}coSetShape(e,t){F(t,U0),y.rawcolliderset_coSetShape(this.__wbg_ptr,e,t.__wbg_ptr)}coSetContactForceEventThreshold(e,t){y.rawcolliderset_coSetContactForceEventThreshold(this.__wbg_ptr,e,t)}coSetDensity(e,t){y.rawcolliderset_coSetDensity(this.__wbg_ptr,e,t)}coSetMass(e,t){y.rawcolliderset_coSetMass(this.__wbg_ptr,e,t)}coSetMassProperties(e,t,n,s,r){F(n,U),F(s,U),F(r,ce),y.rawcolliderset_coSetMassProperties(this.__wbg_ptr,e,t,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr)}constructor(){const e=y.rawcolliderset_new();return this.__wbg_ptr=e>>>0,N3.register(this,this.__wbg_ptr,this),this}len(){return y.rawcolliderset_len(this.__wbg_ptr)>>>0}contains(e){return y.rawcolliderset_contains(this.__wbg_ptr,e)!==0}createCollider(e,t,n,s,r,a,o,l,d,c,u,p,h,b,T,m,f,N,M,P,V,C,D,G,L){try{const B=y.__wbindgen_add_to_stack_pointer(-16);F(t,U0),F(n,U),F(s,ce),F(o,U),F(l,U),F(d,ce),F(L,qe),y.rawcolliderset_createCollider(B,this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r,a,o.__wbg_ptr,l.__wbg_ptr,d.__wbg_ptr,c,u,p,h,b,T,m,f,N,M,P,V,C,D,G,L.__wbg_ptr);var H=ft().getInt32(B+4*0,!0),W=ft().getFloat64(B+8*1,!0);return H===0?void 0:W}finally{y.__wbindgen_add_to_stack_pointer(16)}}remove(e,t,n,s){F(t,kn),F(n,qe),y.rawcolliderset_remove(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s)}isHandleValid(e){return y.rawcolliderset_contains(this.__wbg_ptr,e)!==0}forEachColliderHandle(e){try{y.rawcolliderset_forEachColliderHandle(this.__wbg_ptr,Ue(e))}finally{be[Ce++]=void 0}}}const K9=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawcollidershapecasthit_free(i>>>0,1));class R2{static __wrap(e){e=e>>>0;const t=Object.create(R2.prototype);return t.__wbg_ptr=e,K9.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,K9.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawcollidershapecasthit_free(e,0)}colliderHandle(){return y.rawcharactercollision_handle(this.__wbg_ptr)}time_of_impact(){return y.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}witness1(){const e=y.rawcollidershapecasthit_witness1(this.__wbg_ptr);return U.__wrap(e)}witness2(){const e=y.rawcollidershapecasthit_witness2(this.__wbg_ptr);return U.__wrap(e)}normal1(){const e=y.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return U.__wrap(e)}normal2(){const e=y.rawcharactercollision_translationDeltaRemaining(this.__wbg_ptr);return U.__wrap(e)}}const B9=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawcontactforceevent_free(i>>>0,1));class o7{static __wrap(e){e=e>>>0;const t=Object.create(o7.prototype);return t.__wbg_ptr=e,B9.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,B9.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawcontactforceevent_free(e,0)}collider1(){return y.rawcharactercollision_handle(this.__wbg_ptr)}collider2(){return y.rawcontactforceevent_collider2(this.__wbg_ptr)}total_force(){const e=y.rawcontactforceevent_total_force(this.__wbg_ptr);return U.__wrap(e)}total_force_magnitude(){return y.rawcontactforceevent_total_force_magnitude(this.__wbg_ptr)}max_force_direction(){const e=y.rawcontactforceevent_max_force_direction(this.__wbg_ptr);return U.__wrap(e)}max_force_magnitude(){return y.rawcontactforceevent_max_force_magnitude(this.__wbg_ptr)}}const Q9=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawcontactmanifold_free(i>>>0,1));class l7{static __wrap(e){e=e>>>0;const t=Object.create(l7.prototype);return t.__wbg_ptr=e,Q9.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,Q9.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawcontactmanifold_free(e,0)}normal(){const e=y.rawcontactmanifold_normal(this.__wbg_ptr);return U.__wrap(e)}local_n1(){const e=y.rawcontactmanifold_local_n1(this.__wbg_ptr);return U.__wrap(e)}local_n2(){const e=y.rawcontactmanifold_local_n2(this.__wbg_ptr);return U.__wrap(e)}subshape1(){return y.rawcontactmanifold_subshape1(this.__wbg_ptr)>>>0}subshape2(){return y.rawcontactmanifold_subshape2(this.__wbg_ptr)>>>0}num_contacts(){return y.rawcontactmanifold_num_contacts(this.__wbg_ptr)>>>0}contact_local_p1(e){const t=y.rawcontactmanifold_contact_local_p1(this.__wbg_ptr,e);return t===0?void 0:U.__wrap(t)}contact_local_p2(e){const t=y.rawcontactmanifold_contact_local_p2(this.__wbg_ptr,e);return t===0?void 0:U.__wrap(t)}contact_dist(e){return y.rawcontactmanifold_contact_dist(this.__wbg_ptr,e)}contact_fid1(e){return y.rawcontactmanifold_contact_fid1(this.__wbg_ptr,e)>>>0}contact_fid2(e){return y.rawcontactmanifold_contact_fid2(this.__wbg_ptr,e)>>>0}contact_impulse(e){return y.rawcontactmanifold_contact_impulse(this.__wbg_ptr,e)}contact_tangent_impulse_x(e){return y.rawcontactmanifold_contact_tangent_impulse_x(this.__wbg_ptr,e)}contact_tangent_impulse_y(e){return y.rawcontactmanifold_contact_tangent_impulse_y(this.__wbg_ptr,e)}num_solver_contacts(){return y.rawcontactmanifold_num_solver_contacts(this.__wbg_ptr)>>>0}solver_contact_point(e){const t=y.rawcontactmanifold_solver_contact_point(this.__wbg_ptr,e);return t===0?void 0:U.__wrap(t)}solver_contact_dist(e){return y.rawcontactmanifold_solver_contact_dist(this.__wbg_ptr,e)}solver_contact_friction(e){return y.rawcontactmanifold_solver_contact_friction(this.__wbg_ptr,e)}solver_contact_restitution(e){return y.rawcontactmanifold_solver_contact_restitution(this.__wbg_ptr,e)}solver_contact_tangent_velocity(e){const t=y.rawcontactmanifold_solver_contact_tangent_velocity(this.__wbg_ptr,e);return U.__wrap(t)}}const _9=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawcontactpair_free(i>>>0,1));class d7{static __wrap(e){e=e>>>0;const t=Object.create(d7.prototype);return t.__wbg_ptr=e,_9.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,_9.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawcontactpair_free(e,0)}collider1(){return y.rawcontactpair_collider1(this.__wbg_ptr)}collider2(){return y.rawcontactpair_collider2(this.__wbg_ptr)}numContactManifolds(){return y.rawcontactpair_numContactManifolds(this.__wbg_ptr)>>>0}contactManifold(e){const t=y.rawcontactpair_contactManifold(this.__wbg_ptr,e);return t===0?void 0:l7.__wrap(t)}}const $9=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawdebugrenderpipeline_free(i>>>0,1));class Dy{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,$9.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawdebugrenderpipeline_free(e,0)}constructor(){const e=y.rawdebugrenderpipeline_new();return this.__wbg_ptr=e>>>0,$9.register(this,this.__wbg_ptr,this),this}vertices(){const e=y.rawdebugrenderpipeline_vertices(this.__wbg_ptr);return vs(e)}colors(){const e=y.rawdebugrenderpipeline_colors(this.__wbg_ptr);return vs(e)}render(e,t,n,s,r,a,o){try{F(e,qe),F(t,ke),F(n,Yn),F(s,Jn),F(r,hi),y.rawdebugrenderpipeline_render(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,a,Ue(o))}finally{be[Ce++]=void 0}}}const e5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawdeserializedworld_free(i>>>0,1));class c7{static __wrap(e){e=e>>>0;const t=Object.create(c7.prototype);return t.__wbg_ptr=e,e5.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,e5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawdeserializedworld_free(e,0)}takeGravity(){const e=y.rawdeserializedworld_takeGravity(this.__wbg_ptr);return e===0?void 0:U.__wrap(e)}takeIntegrationParameters(){const e=y.rawdeserializedworld_takeIntegrationParameters(this.__wbg_ptr);return e===0?void 0:zi.__wrap(e)}takeIslandManager(){const e=y.rawdeserializedworld_takeIslandManager(this.__wbg_ptr);return e===0?void 0:kn.__wrap(e)}takeBroadPhase(){const e=y.rawdeserializedworld_takeBroadPhase(this.__wbg_ptr);return e===0?void 0:Oi.__wrap(e)}takeNarrowPhase(){const e=y.rawdeserializedworld_takeNarrowPhase(this.__wbg_ptr);return e===0?void 0:hi.__wrap(e)}takeBodies(){const e=y.rawdeserializedworld_takeBodies(this.__wbg_ptr);return e===0?void 0:qe.__wrap(e)}takeColliders(){const e=y.rawdeserializedworld_takeColliders(this.__wbg_ptr);return e===0?void 0:ke.__wrap(e)}takeImpulseJoints(){const e=y.rawdeserializedworld_takeImpulseJoints(this.__wbg_ptr);return e===0?void 0:Yn.__wrap(e)}takeMultibodyJoints(){const e=y.rawdeserializedworld_takeMultibodyJoints(this.__wbg_ptr);return e===0?void 0:Jn.__wrap(e)}}const t5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawdynamicraycastvehiclecontroller_free(i>>>0,1));class jy{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,t5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawdynamicraycastvehiclecontroller_free(e,0)}constructor(e){const t=y.rawdynamicraycastvehiclecontroller_new(e);return this.__wbg_ptr=t>>>0,t5.register(this,this.__wbg_ptr,this),this}current_vehicle_speed(){return y.rawdynamicraycastvehiclecontroller_current_vehicle_speed(this.__wbg_ptr)}chassis(){return y.rawdynamicraycastvehiclecontroller_chassis(this.__wbg_ptr)}index_up_axis(){return y.rawdynamicraycastvehiclecontroller_index_up_axis(this.__wbg_ptr)>>>0}set_index_up_axis(e){y.rawdynamicraycastvehiclecontroller_set_index_up_axis(this.__wbg_ptr,e)}index_forward_axis(){return y.rawdynamicraycastvehiclecontroller_index_forward_axis(this.__wbg_ptr)>>>0}set_index_forward_axis(e){y.rawdynamicraycastvehiclecontroller_set_index_forward_axis(this.__wbg_ptr,e)}add_wheel(e,t,n,s,r){F(e,U),F(t,U),F(n,U),y.rawdynamicraycastvehiclecontroller_add_wheel(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s,r)}num_wheels(){return y.rawdynamicraycastvehiclecontroller_num_wheels(this.__wbg_ptr)>>>0}update_vehicle(e,t,n,s,r,a,o){try{F(t,qe),F(n,ke),F(s,u7),y.rawdynamicraycastvehiclecontroller_update_vehicle(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r,Q0(a)?4294967297:a>>>0,Ue(o))}finally{be[Ce++]=void 0}}wheel_chassis_connection_point_cs(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs(this.__wbg_ptr,e);return t===0?void 0:U.__wrap(t)}set_wheel_chassis_connection_point_cs(e,t){F(t,U),y.rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs(this.__wbg_ptr,e,t.__wbg_ptr)}wheel_suspension_rest_length(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_suspension_rest_length(e,t){y.rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length(this.__wbg_ptr,e,t)}wheel_max_suspension_travel(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_max_suspension_travel(e,t){y.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel(this.__wbg_ptr,e,t)}wheel_radius(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_radius(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_radius(e,t){y.rawdynamicraycastvehiclecontroller_set_wheel_radius(this.__wbg_ptr,e,t)}wheel_suspension_stiffness(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_suspension_stiffness(e,t){y.rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness(this.__wbg_ptr,e,t)}wheel_suspension_compression(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_suspension_compression(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_suspension_compression(e,t){y.rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression(this.__wbg_ptr,e,t)}wheel_suspension_relaxation(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_suspension_relaxation(e,t){y.rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation(this.__wbg_ptr,e,t)}wheel_max_suspension_force(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_max_suspension_force(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_max_suspension_force(e,t){y.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force(this.__wbg_ptr,e,t)}wheel_brake(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_brake(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_brake(e,t){y.rawdynamicraycastvehiclecontroller_set_wheel_brake(this.__wbg_ptr,e,t)}wheel_steering(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_steering(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_steering(e,t){y.rawdynamicraycastvehiclecontroller_set_wheel_steering(this.__wbg_ptr,e,t)}wheel_engine_force(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_engine_force(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_engine_force(e,t){y.rawdynamicraycastvehiclecontroller_set_wheel_engine_force(this.__wbg_ptr,e,t)}wheel_direction_cs(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_direction_cs(this.__wbg_ptr,e);return t===0?void 0:U.__wrap(t)}set_wheel_direction_cs(e,t){F(t,U),y.rawdynamicraycastvehiclecontroller_set_wheel_direction_cs(this.__wbg_ptr,e,t.__wbg_ptr)}wheel_axle_cs(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_axle_cs(this.__wbg_ptr,e);return t===0?void 0:U.__wrap(t)}set_wheel_axle_cs(e,t){F(t,U),y.rawdynamicraycastvehiclecontroller_set_wheel_axle_cs(this.__wbg_ptr,e,t.__wbg_ptr)}wheel_friction_slip(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_friction_slip(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_friction_slip(e,t){y.rawdynamicraycastvehiclecontroller_set_wheel_friction_slip(this.__wbg_ptr,e,t)}wheel_side_friction_stiffness(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_side_friction_stiffness(e,t){y.rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness(this.__wbg_ptr,e,t)}wheel_rotation(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_rotation(this.__wbg_ptr,e);return t===4294967297?void 0:t}wheel_forward_impulse(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_forward_impulse(this.__wbg_ptr,e);return t===4294967297?void 0:t}wheel_side_impulse(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_side_impulse(this.__wbg_ptr,e);return t===4294967297?void 0:t}wheel_suspension_force(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_suspension_force(this.__wbg_ptr,e);return t===4294967297?void 0:t}wheel_contact_normal_ws(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws(this.__wbg_ptr,e);return t===0?void 0:U.__wrap(t)}wheel_contact_point_ws(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_contact_point_ws(this.__wbg_ptr,e);return t===0?void 0:U.__wrap(t)}wheel_suspension_length(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_suspension_length(this.__wbg_ptr,e);return t===4294967297?void 0:t}wheel_hard_point_ws(e){const t=y.rawdynamicraycastvehiclecontroller_wheel_hard_point_ws(this.__wbg_ptr,e);return t===0?void 0:U.__wrap(t)}wheel_is_in_contact(e){return y.rawdynamicraycastvehiclecontroller_wheel_is_in_contact(this.__wbg_ptr,e)!==0}wheel_ground_object(e){try{const s=y.__wbindgen_add_to_stack_pointer(-16);y.rawdynamicraycastvehiclecontroller_wheel_ground_object(s,this.__wbg_ptr,e);var t=ft().getInt32(s+4*0,!0),n=ft().getFloat64(s+8*1,!0);return t===0?void 0:n}finally{y.__wbindgen_add_to_stack_pointer(16)}}}const n5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_raweventqueue_free(i>>>0,1));class Wy{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,n5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_raweventqueue_free(e,0)}constructor(e){const t=y.raweventqueue_new(e);return this.__wbg_ptr=t>>>0,n5.register(this,this.__wbg_ptr,this),this}drainCollisionEvents(e){try{y.raweventqueue_drainCollisionEvents(this.__wbg_ptr,Ue(e))}finally{be[Ce++]=void 0}}drainContactForceEvents(e){try{y.raweventqueue_drainContactForceEvents(this.__wbg_ptr,Ue(e))}finally{be[Ce++]=void 0}}clear(){y.raweventqueue_clear(this.__wbg_ptr)}}const i5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawgenericjoint_free(i>>>0,1));class yt{static __wrap(e){e=e>>>0;const t=Object.create(yt.prototype);return t.__wbg_ptr=e,i5.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,i5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawgenericjoint_free(e,0)}static generic(e,t,n,s){F(e,U),F(t,U),F(n,U);const r=y.rawgenericjoint_generic(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s);return r===0?void 0:yt.__wrap(r)}static spring(e,t,n,s,r){F(s,U),F(r,U);const a=y.rawgenericjoint_spring(e,t,n,s.__wbg_ptr,r.__wbg_ptr);return yt.__wrap(a)}static rope(e,t,n){F(t,U),F(n,U);const s=y.rawgenericjoint_rope(e,t.__wbg_ptr,n.__wbg_ptr);return yt.__wrap(s)}static spherical(e,t){F(e,U),F(t,U);const n=y.rawgenericjoint_spherical(e.__wbg_ptr,t.__wbg_ptr);return yt.__wrap(n)}static prismatic(e,t,n,s,r,a){F(e,U),F(t,U),F(n,U);const o=y.rawgenericjoint_prismatic(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s,r,a);return o===0?void 0:yt.__wrap(o)}static fixed(e,t,n,s){F(e,U),F(t,ce),F(n,U),F(s,ce);const r=y.rawgenericjoint_fixed(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr);return yt.__wrap(r)}static revolute(e,t,n){F(e,U),F(t,U),F(n,U);const s=y.rawgenericjoint_revolute(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr);return s===0?void 0:yt.__wrap(s)}}const L3=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawimpulsejointset_free(i>>>0,1));class Yn{static __wrap(e){e=e>>>0;const t=Object.create(Yn.prototype);return t.__wbg_ptr=e,L3.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,L3.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawimpulsejointset_free(e,0)}jointType(e){return y.rawimpulsejointset_jointType(this.__wbg_ptr,e)}jointBodyHandle1(e){return y.rawimpulsejointset_jointBodyHandle1(this.__wbg_ptr,e)}jointBodyHandle2(e){return y.rawimpulsejointset_jointBodyHandle2(this.__wbg_ptr,e)}jointFrameX1(e){const t=y.rawimpulsejointset_jointFrameX1(this.__wbg_ptr,e);return ce.__wrap(t)}jointFrameX2(e){const t=y.rawimpulsejointset_jointFrameX2(this.__wbg_ptr,e);return ce.__wrap(t)}jointAnchor1(e){const t=y.rawimpulsejointset_jointAnchor1(this.__wbg_ptr,e);return U.__wrap(t)}jointAnchor2(e){const t=y.rawimpulsejointset_jointAnchor2(this.__wbg_ptr,e);return U.__wrap(t)}jointSetAnchor1(e,t){F(t,U),y.rawimpulsejointset_jointSetAnchor1(this.__wbg_ptr,e,t.__wbg_ptr)}jointSetAnchor2(e,t){F(t,U),y.rawimpulsejointset_jointSetAnchor2(this.__wbg_ptr,e,t.__wbg_ptr)}jointContactsEnabled(e){return y.rawimpulsejointset_jointContactsEnabled(this.__wbg_ptr,e)!==0}jointSetContactsEnabled(e,t){y.rawimpulsejointset_jointSetContactsEnabled(this.__wbg_ptr,e,t)}jointLimitsEnabled(e,t){return y.rawimpulsejointset_jointLimitsEnabled(this.__wbg_ptr,e,t)!==0}jointLimitsMin(e,t){return y.rawimpulsejointset_jointLimitsMin(this.__wbg_ptr,e,t)}jointLimitsMax(e,t){return y.rawimpulsejointset_jointLimitsMax(this.__wbg_ptr,e,t)}jointSetLimits(e,t,n,s){y.rawimpulsejointset_jointSetLimits(this.__wbg_ptr,e,t,n,s)}jointConfigureMotorModel(e,t,n){y.rawimpulsejointset_jointConfigureMotorModel(this.__wbg_ptr,e,t,n)}jointConfigureMotorVelocity(e,t,n,s){y.rawimpulsejointset_jointConfigureMotorVelocity(this.__wbg_ptr,e,t,n,s)}jointConfigureMotorPosition(e,t,n,s,r){y.rawimpulsejointset_jointConfigureMotorPosition(this.__wbg_ptr,e,t,n,s,r)}jointConfigureMotor(e,t,n,s,r,a){y.rawimpulsejointset_jointConfigureMotor(this.__wbg_ptr,e,t,n,s,r,a)}constructor(){const e=y.rawimpulsejointset_new();return this.__wbg_ptr=e>>>0,L3.register(this,this.__wbg_ptr,this),this}createJoint(e,t,n,s){return F(e,yt),y.rawimpulsejointset_createJoint(this.__wbg_ptr,e.__wbg_ptr,t,n,s)}remove(e,t){y.rawimpulsejointset_remove(this.__wbg_ptr,e,t)}len(){return y.rawimpulsejointset_len(this.__wbg_ptr)>>>0}contains(e){return y.rawimpulsejointset_contains(this.__wbg_ptr,e)!==0}forEachJointHandle(e){try{y.rawimpulsejointset_forEachJointHandle(this.__wbg_ptr,Ue(e))}finally{be[Ce++]=void 0}}forEachJointAttachedToRigidBody(e,t){try{y.rawimpulsejointset_forEachJointAttachedToRigidBody(this.__wbg_ptr,e,Ue(t))}finally{be[Ce++]=void 0}}}const M3=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawintegrationparameters_free(i>>>0,1));class zi{static __wrap(e){e=e>>>0;const t=Object.create(zi.prototype);return t.__wbg_ptr=e,M3.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,M3.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawintegrationparameters_free(e,0)}constructor(){const e=y.rawintegrationparameters_new();return this.__wbg_ptr=e>>>0,M3.register(this,this.__wbg_ptr,this),this}get dt(){return y.rawintegrationparameters_dt(this.__wbg_ptr)}get contact_erp(){return y.rawintegrationparameters_contact_erp(this.__wbg_ptr)}get normalizedAllowedLinearError(){return y.rawdynamicraycastvehiclecontroller_current_vehicle_speed(this.__wbg_ptr)}get normalizedPredictionDistance(){return y.rawcontactforceevent_max_force_magnitude(this.__wbg_ptr)}get numSolverIterations(){return y.rawintegrationparameters_numSolverIterations(this.__wbg_ptr)>>>0}get numAdditionalFrictionIterations(){return y.rawdynamicraycastvehiclecontroller_index_up_axis(this.__wbg_ptr)>>>0}get numInternalPgsIterations(){return y.rawdynamicraycastvehiclecontroller_index_forward_axis(this.__wbg_ptr)>>>0}get minIslandSize(){return y.rawintegrationparameters_minIslandSize(this.__wbg_ptr)>>>0}get maxCcdSubsteps(){return y.rawintegrationparameters_maxCcdSubsteps(this.__wbg_ptr)>>>0}get lengthUnit(){return y.rawintegrationparameters_lengthUnit(this.__wbg_ptr)}set dt(e){y.rawintegrationparameters_set_dt(this.__wbg_ptr,e)}set contact_natural_frequency(e){y.rawintegrationparameters_set_contact_natural_frequency(this.__wbg_ptr,e)}set normalizedAllowedLinearError(e){y.rawintegrationparameters_set_normalizedAllowedLinearError(this.__wbg_ptr,e)}set normalizedPredictionDistance(e){y.rawintegrationparameters_set_normalizedPredictionDistance(this.__wbg_ptr,e)}set numSolverIterations(e){y.rawintegrationparameters_set_numSolverIterations(this.__wbg_ptr,e)}set numAdditionalFrictionIterations(e){y.rawdynamicraycastvehiclecontroller_set_index_up_axis(this.__wbg_ptr,e)}set numInternalPgsIterations(e){y.rawdynamicraycastvehiclecontroller_set_index_forward_axis(this.__wbg_ptr,e)}set minIslandSize(e){y.rawintegrationparameters_set_minIslandSize(this.__wbg_ptr,e)}set maxCcdSubsteps(e){y.rawintegrationparameters_set_maxCcdSubsteps(this.__wbg_ptr,e)}set lengthUnit(e){y.rawintegrationparameters_set_lengthUnit(this.__wbg_ptr,e)}switchToStandardPgsSolver(){y.rawintegrationparameters_switchToStandardPgsSolver(this.__wbg_ptr)}switchToSmallStepsPgsSolver(){y.rawintegrationparameters_switchToSmallStepsPgsSolver(this.__wbg_ptr)}switchToSmallStepsPgsSolverWithoutWarmstart(){y.rawintegrationparameters_switchToSmallStepsPgsSolverWithoutWarmstart(this.__wbg_ptr)}}const E3=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawislandmanager_free(i>>>0,1));class kn{static __wrap(e){e=e>>>0;const t=Object.create(kn.prototype);return t.__wbg_ptr=e,E3.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,E3.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawislandmanager_free(e,0)}constructor(){const e=y.rawislandmanager_new();return this.__wbg_ptr=e>>>0,E3.register(this,this.__wbg_ptr,this),this}forEachActiveRigidBodyHandle(e){try{y.rawislandmanager_forEachActiveRigidBodyHandle(this.__wbg_ptr,Ue(e))}finally{be[Ce++]=void 0}}}const s5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawkinematiccharactercontroller_free(i>>>0,1));class Uy{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,s5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawkinematiccharactercontroller_free(e,0)}constructor(e){const t=y.rawkinematiccharactercontroller_new(e);return this.__wbg_ptr=t>>>0,s5.register(this,this.__wbg_ptr,this),this}up(){const e=y.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return U.__wrap(e)}setUp(e){F(e,U),y.rawkinematiccharactercontroller_setUp(this.__wbg_ptr,e.__wbg_ptr)}normalNudgeFactor(){return y.rawkinematiccharactercontroller_normalNudgeFactor(this.__wbg_ptr)}setNormalNudgeFactor(e){y.rawkinematiccharactercontroller_setNormalNudgeFactor(this.__wbg_ptr,e)}offset(){return y.rawintegrationparameters_dt(this.__wbg_ptr)}setOffset(e){y.rawkinematiccharactercontroller_setOffset(this.__wbg_ptr,e)}slideEnabled(){return y.rawkinematiccharactercontroller_slideEnabled(this.__wbg_ptr)!==0}setSlideEnabled(e){y.rawkinematiccharactercontroller_setSlideEnabled(this.__wbg_ptr,e)}autostepMaxHeight(){const e=y.rawkinematiccharactercontroller_autostepMaxHeight(this.__wbg_ptr);return e===4294967297?void 0:e}autostepMinWidth(){const e=y.rawkinematiccharactercontroller_autostepMinWidth(this.__wbg_ptr);return e===4294967297?void 0:e}autostepIncludesDynamicBodies(){const e=y.rawkinematiccharactercontroller_autostepIncludesDynamicBodies(this.__wbg_ptr);return e===16777215?void 0:e!==0}autostepEnabled(){return y.rawkinematiccharactercontroller_autostepEnabled(this.__wbg_ptr)!==0}enableAutostep(e,t,n){y.rawkinematiccharactercontroller_enableAutostep(this.__wbg_ptr,e,t,n)}disableAutostep(){y.rawkinematiccharactercontroller_disableAutostep(this.__wbg_ptr)}maxSlopeClimbAngle(){return y.rawkinematiccharactercontroller_maxSlopeClimbAngle(this.__wbg_ptr)}setMaxSlopeClimbAngle(e){y.rawkinematiccharactercontroller_setMaxSlopeClimbAngle(this.__wbg_ptr,e)}minSlopeSlideAngle(){return y.rawkinematiccharactercontroller_minSlopeSlideAngle(this.__wbg_ptr)}setMinSlopeSlideAngle(e){y.rawkinematiccharactercontroller_setMinSlopeSlideAngle(this.__wbg_ptr,e)}snapToGroundDistance(){const e=y.rawkinematiccharactercontroller_snapToGroundDistance(this.__wbg_ptr);return e===4294967297?void 0:e}enableSnapToGround(e){y.rawkinematiccharactercontroller_enableSnapToGround(this.__wbg_ptr,e)}disableSnapToGround(){y.rawkinematiccharactercontroller_disableSnapToGround(this.__wbg_ptr)}snapToGroundEnabled(){return y.rawkinematiccharactercontroller_snapToGroundEnabled(this.__wbg_ptr)!==0}computeColliderMovement(e,t,n,s,r,a,o,l,d,c,u){try{F(t,qe),F(n,ke),F(s,u7),F(a,U),y.rawkinematiccharactercontroller_computeColliderMovement(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r,a.__wbg_ptr,o,Q0(l)?4294967297:Math.fround(l),d,Q0(c)?4294967297:c>>>0,Ue(u))}finally{be[Ce++]=void 0}}computedMovement(){const e=y.rawkinematiccharactercontroller_computedMovement(this.__wbg_ptr);return U.__wrap(e)}computedGrounded(){return y.rawkinematiccharactercontroller_computedGrounded(this.__wbg_ptr)!==0}numComputedCollisions(){return y.rawkinematiccharactercontroller_numComputedCollisions(this.__wbg_ptr)>>>0}computedCollision(e,t){return F(t,p8),y.rawkinematiccharactercontroller_computedCollision(this.__wbg_ptr,e,t.__wbg_ptr)!==0}}const O3=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawmultibodyjointset_free(i>>>0,1));class Jn{static __wrap(e){e=e>>>0;const t=Object.create(Jn.prototype);return t.__wbg_ptr=e,O3.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,O3.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawmultibodyjointset_free(e,0)}jointType(e){return y.rawmultibodyjointset_jointType(this.__wbg_ptr,e)}jointFrameX1(e){const t=y.rawmultibodyjointset_jointFrameX1(this.__wbg_ptr,e);return ce.__wrap(t)}jointFrameX2(e){const t=y.rawmultibodyjointset_jointFrameX2(this.__wbg_ptr,e);return ce.__wrap(t)}jointAnchor1(e){const t=y.rawmultibodyjointset_jointAnchor1(this.__wbg_ptr,e);return U.__wrap(t)}jointAnchor2(e){const t=y.rawmultibodyjointset_jointAnchor2(this.__wbg_ptr,e);return U.__wrap(t)}jointContactsEnabled(e){return y.rawmultibodyjointset_jointContactsEnabled(this.__wbg_ptr,e)!==0}jointSetContactsEnabled(e,t){y.rawmultibodyjointset_jointSetContactsEnabled(this.__wbg_ptr,e,t)}jointLimitsEnabled(e,t){return y.rawmultibodyjointset_jointLimitsEnabled(this.__wbg_ptr,e,t)!==0}jointLimitsMin(e,t){return y.rawmultibodyjointset_jointLimitsMin(this.__wbg_ptr,e,t)}jointLimitsMax(e,t){return y.rawmultibodyjointset_jointLimitsMax(this.__wbg_ptr,e,t)}constructor(){const e=y.rawmultibodyjointset_new();return this.__wbg_ptr=e>>>0,O3.register(this,this.__wbg_ptr,this),this}createJoint(e,t,n,s){return F(e,yt),y.rawmultibodyjointset_createJoint(this.__wbg_ptr,e.__wbg_ptr,t,n,s)}remove(e,t){y.rawmultibodyjointset_remove(this.__wbg_ptr,e,t)}contains(e){return y.rawmultibodyjointset_contains(this.__wbg_ptr,e)!==0}forEachJointHandle(e){try{y.rawmultibodyjointset_forEachJointHandle(this.__wbg_ptr,Ue(e))}finally{be[Ce++]=void 0}}forEachJointAttachedToRigidBody(e,t){try{y.rawmultibodyjointset_forEachJointAttachedToRigidBody(this.__wbg_ptr,e,Ue(t))}finally{be[Ce++]=void 0}}}const z3=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawnarrowphase_free(i>>>0,1));class hi{static __wrap(e){e=e>>>0;const t=Object.create(hi.prototype);return t.__wbg_ptr=e,z3.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,z3.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawnarrowphase_free(e,0)}constructor(){const e=y.rawnarrowphase_new();return this.__wbg_ptr=e>>>0,z3.register(this,this.__wbg_ptr,this),this}contact_pairs_with(e,t){y.rawnarrowphase_contact_pairs_with(this.__wbg_ptr,e,$e(t))}contact_pair(e,t){const n=y.rawnarrowphase_contact_pair(this.__wbg_ptr,e,t);return n===0?void 0:d7.__wrap(n)}intersection_pairs_with(e,t){y.rawnarrowphase_intersection_pairs_with(this.__wbg_ptr,e,$e(t))}intersection_pair(e,t){return y.rawnarrowphase_intersection_pair(this.__wbg_ptr,e,t)!==0}}const r5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawphysicspipeline_free(i>>>0,1));class qy{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,r5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawphysicspipeline_free(e,0)}constructor(){const e=y.rawphysicspipeline_new();return this.__wbg_ptr=e>>>0,r5.register(this,this.__wbg_ptr,this),this}step(e,t,n,s,r,a,o,l,d,c){F(e,U),F(t,zi),F(n,kn),F(s,Oi),F(r,hi),F(a,qe),F(o,ke),F(l,Yn),F(d,Jn),F(c,to),y.rawphysicspipeline_step(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,a.__wbg_ptr,o.__wbg_ptr,l.__wbg_ptr,d.__wbg_ptr,c.__wbg_ptr)}stepWithEvents(e,t,n,s,r,a,o,l,d,c,u,p,h,b){F(e,U),F(t,zi),F(n,kn),F(s,Oi),F(r,hi),F(a,qe),F(o,ke),F(l,Yn),F(d,Jn),F(c,to),F(u,Wy),y.rawphysicspipeline_stepWithEvents(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,a.__wbg_ptr,o.__wbg_ptr,l.__wbg_ptr,d.__wbg_ptr,c.__wbg_ptr,u.__wbg_ptr,$e(p),$e(h),$e(b))}}const a5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawpidcontroller_free(i>>>0,1));class Gy{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,a5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawpidcontroller_free(e,0)}constructor(e,t,n,s){const r=y.rawpidcontroller_new(e,t,n,s);return this.__wbg_ptr=r>>>0,a5.register(this,this.__wbg_ptr,this),this}set_kp(e,t){y.rawpidcontroller_set_kp(this.__wbg_ptr,e,t)}set_ki(e,t){y.rawpidcontroller_set_ki(this.__wbg_ptr,e,t)}set_kd(e,t){y.rawpidcontroller_set_kd(this.__wbg_ptr,e,t)}set_axes_mask(e){y.rawpidcontroller_set_axes_mask(this.__wbg_ptr,e)}reset_integrals(){y.rawpidcontroller_reset_integrals(this.__wbg_ptr)}apply_linear_correction(e,t,n,s,r){F(t,qe),F(s,U),F(r,U),y.rawpidcontroller_apply_linear_correction(this.__wbg_ptr,e,t.__wbg_ptr,n,s.__wbg_ptr,r.__wbg_ptr)}apply_angular_correction(e,t,n,s,r){F(t,qe),F(s,ce),F(r,U),y.rawpidcontroller_apply_angular_correction(this.__wbg_ptr,e,t.__wbg_ptr,n,s.__wbg_ptr,r.__wbg_ptr)}linear_correction(e,t,n,s,r){F(t,qe),F(s,U),F(r,U);const a=y.rawpidcontroller_linear_correction(this.__wbg_ptr,e,t.__wbg_ptr,n,s.__wbg_ptr,r.__wbg_ptr);return U.__wrap(a)}angular_correction(e,t,n,s,r){F(t,qe),F(s,ce),F(r,U);const a=y.rawpidcontroller_angular_correction(this.__wbg_ptr,e,t.__wbg_ptr,n,s.__wbg_ptr,r.__wbg_ptr);return U.__wrap(a)}}const o5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawpointcolliderprojection_free(i>>>0,1));class Jr{static __wrap(e){e=e>>>0;const t=Object.create(Jr.prototype);return t.__wbg_ptr=e,o5.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,o5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawpointcolliderprojection_free(e,0)}colliderHandle(){return y.rawpointcolliderprojection_colliderHandle(this.__wbg_ptr)}point(){const e=y.rawpointcolliderprojection_point(this.__wbg_ptr);return U.__wrap(e)}isInside(){return y.rawpointcolliderprojection_isInside(this.__wbg_ptr)!==0}featureType(){return y.rawpointcolliderprojection_featureType(this.__wbg_ptr)}featureId(){const e=y.rawpointcolliderprojection_featureId(this.__wbg_ptr);return e===4294967297?void 0:e}}const l5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawpointprojection_free(i>>>0,1));class N2{static __wrap(e){e=e>>>0;const t=Object.create(N2.prototype);return t.__wbg_ptr=e,l5.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,l5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawpointprojection_free(e,0)}point(){const e=y.rawpointprojection_point(this.__wbg_ptr);return U.__wrap(e)}isInside(){return y.rawpointprojection_isInside(this.__wbg_ptr)!==0}}const d5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawquerypipeline_free(i>>>0,1));class u7{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,d5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawquerypipeline_free(e,0)}constructor(){const e=y.rawquerypipeline_new();return this.__wbg_ptr=e>>>0,d5.register(this,this.__wbg_ptr,this),this}update(e){F(e,ke),y.rawquerypipeline_update(this.__wbg_ptr,e.__wbg_ptr)}castRay(e,t,n,s,r,a,o,l,d,c,u){try{F(e,qe),F(t,ke),F(n,U),F(s,U);const p=y.rawquerypipeline_castRay(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r,a,o,Q0(l)?4294967297:l>>>0,!Q0(d),Q0(d)?0:d,!Q0(c),Q0(c)?0:c,Ue(u));return p===0?void 0:p7.__wrap(p)}finally{be[Ce++]=void 0}}castRayAndGetNormal(e,t,n,s,r,a,o,l,d,c,u){try{F(e,qe),F(t,ke),F(n,U),F(s,U);const p=y.rawquerypipeline_castRayAndGetNormal(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r,a,o,Q0(l)?4294967297:l>>>0,!Q0(d),Q0(d)?0:d,!Q0(c),Q0(c)?0:c,Ue(u));return p===0?void 0:L2.__wrap(p)}finally{be[Ce++]=void 0}}intersectionsWithRay(e,t,n,s,r,a,o,l,d,c,u,p){try{F(e,qe),F(t,ke),F(n,U),F(s,U),y.rawquerypipeline_intersectionsWithRay(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r,a,Ue(o),l,Q0(d)?4294967297:d>>>0,!Q0(c),Q0(c)?0:c,!Q0(u),Q0(u)?0:u,Ue(p))}finally{be[Ce++]=void 0,be[Ce++]=void 0}}intersectionWithShape(e,t,n,s,r,a,o,l,d,c){try{const h=y.__wbindgen_add_to_stack_pointer(-16);F(e,qe),F(t,ke),F(n,U),F(s,ce),F(r,U0),y.rawquerypipeline_intersectionWithShape(h,this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,a,Q0(o)?4294967297:o>>>0,!Q0(l),Q0(l)?0:l,!Q0(d),Q0(d)?0:d,Ue(c));var u=ft().getInt32(h+4*0,!0),p=ft().getFloat64(h+8*1,!0);return u===0?void 0:p}finally{y.__wbindgen_add_to_stack_pointer(16),be[Ce++]=void 0}}projectPoint(e,t,n,s,r,a,o,l,d){try{F(e,qe),F(t,ke),F(n,U);const c=y.rawquerypipeline_projectPoint(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s,r,Q0(a)?4294967297:a>>>0,!Q0(o),Q0(o)?0:o,!Q0(l),Q0(l)?0:l,Ue(d));return c===0?void 0:Jr.__wrap(c)}finally{be[Ce++]=void 0}}projectPointAndGetFeature(e,t,n,s,r,a,o,l){try{F(e,qe),F(t,ke),F(n,U);const d=y.rawquerypipeline_projectPointAndGetFeature(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s,Q0(r)?4294967297:r>>>0,!Q0(a),Q0(a)?0:a,!Q0(o),Q0(o)?0:o,Ue(l));return d===0?void 0:Jr.__wrap(d)}finally{be[Ce++]=void 0}}intersectionsWithPoint(e,t,n,s,r,a,o,l,d){try{F(e,qe),F(t,ke),F(n,U),y.rawquerypipeline_intersectionsWithPoint(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,Ue(s),r,Q0(a)?4294967297:a>>>0,!Q0(o),Q0(o)?0:o,!Q0(l),Q0(l)?0:l,Ue(d))}finally{be[Ce++]=void 0,be[Ce++]=void 0}}castShape(e,t,n,s,r,a,o,l,d,c,u,p,h,b){try{F(e,qe),F(t,ke),F(n,U),F(s,ce),F(r,U),F(a,U0);const T=y.rawquerypipeline_castShape(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,a.__wbg_ptr,o,l,d,c,Q0(u)?4294967297:u>>>0,!Q0(p),Q0(p)?0:p,!Q0(h),Q0(h)?0:h,Ue(b));return T===0?void 0:R2.__wrap(T)}finally{be[Ce++]=void 0}}intersectionsWithShape(e,t,n,s,r,a,o,l,d,c,u){try{F(e,qe),F(t,ke),F(n,U),F(s,ce),F(r,U0),y.rawquerypipeline_intersectionsWithShape(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,Ue(a),o,Q0(l)?4294967297:l>>>0,!Q0(d),Q0(d)?0:d,!Q0(c),Q0(c)?0:c,Ue(u))}finally{be[Ce++]=void 0,be[Ce++]=void 0}}collidersWithAabbIntersectingAabb(e,t,n){try{F(e,U),F(t,U),y.rawquerypipeline_collidersWithAabbIntersectingAabb(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,Ue(n))}finally{be[Ce++]=void 0}}}const c5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawraycolliderhit_free(i>>>0,1));class p7{static __wrap(e){e=e>>>0;const t=Object.create(p7.prototype);return t.__wbg_ptr=e,c5.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,c5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawraycolliderhit_free(e,0)}colliderHandle(){return y.rawcharactercollision_handle(this.__wbg_ptr)}timeOfImpact(){return y.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}}const u5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawraycolliderintersection_free(i>>>0,1));class L2{static __wrap(e){e=e>>>0;const t=Object.create(L2.prototype);return t.__wbg_ptr=e,u5.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,u5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawraycolliderintersection_free(e,0)}colliderHandle(){return y.rawpointcolliderprojection_colliderHandle(this.__wbg_ptr)}normal(){const e=y.rawcollidershapecasthit_witness1(this.__wbg_ptr);return U.__wrap(e)}time_of_impact(){return y.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}featureType(){return y.rawpointcolliderprojection_featureType(this.__wbg_ptr)}featureId(){const e=y.rawpointcolliderprojection_featureId(this.__wbg_ptr);return e===4294967297?void 0:e}}const p5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawrayintersection_free(i>>>0,1));class M2{static __wrap(e){e=e>>>0;const t=Object.create(M2.prototype);return t.__wbg_ptr=e,p5.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,p5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawrayintersection_free(e,0)}normal(){const e=y.rawcollidershapecasthit_witness1(this.__wbg_ptr);return U.__wrap(e)}time_of_impact(){return y.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}featureType(){return y.rawpointcolliderprojection_featureType(this.__wbg_ptr)}featureId(){const e=y.rawpointcolliderprojection_featureId(this.__wbg_ptr);return e===4294967297?void 0:e}}const I3=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawrigidbodyset_free(i>>>0,1));class qe{static __wrap(e){e=e>>>0;const t=Object.create(qe.prototype);return t.__wbg_ptr=e,I3.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,I3.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawrigidbodyset_free(e,0)}rbTranslation(e){const t=y.rawrigidbodyset_rbTranslation(this.__wbg_ptr,e);return U.__wrap(t)}rbRotation(e){const t=y.rawrigidbodyset_rbRotation(this.__wbg_ptr,e);return ce.__wrap(t)}rbSleep(e){y.rawrigidbodyset_rbSleep(this.__wbg_ptr,e)}rbIsSleeping(e){return y.rawrigidbodyset_rbIsSleeping(this.__wbg_ptr,e)!==0}rbIsMoving(e){return y.rawrigidbodyset_rbIsMoving(this.__wbg_ptr,e)!==0}rbNextTranslation(e){const t=y.rawrigidbodyset_rbNextTranslation(this.__wbg_ptr,e);return U.__wrap(t)}rbNextRotation(e){const t=y.rawrigidbodyset_rbNextRotation(this.__wbg_ptr,e);return ce.__wrap(t)}rbSetTranslation(e,t,n,s,r){y.rawrigidbodyset_rbSetTranslation(this.__wbg_ptr,e,t,n,s,r)}rbSetRotation(e,t,n,s,r,a){y.rawrigidbodyset_rbSetRotation(this.__wbg_ptr,e,t,n,s,r,a)}rbSetLinvel(e,t,n){F(t,U),y.rawrigidbodyset_rbSetLinvel(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbSetAngvel(e,t,n){F(t,U),y.rawrigidbodyset_rbSetAngvel(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbSetNextKinematicTranslation(e,t,n,s){y.rawrigidbodyset_rbSetNextKinematicTranslation(this.__wbg_ptr,e,t,n,s)}rbSetNextKinematicRotation(e,t,n,s,r){y.rawrigidbodyset_rbSetNextKinematicRotation(this.__wbg_ptr,e,t,n,s,r)}rbRecomputeMassPropertiesFromColliders(e,t){F(t,ke),y.rawrigidbodyset_rbRecomputeMassPropertiesFromColliders(this.__wbg_ptr,e,t.__wbg_ptr)}rbSetAdditionalMass(e,t,n){y.rawrigidbodyset_rbSetAdditionalMass(this.__wbg_ptr,e,t,n)}rbSetAdditionalMassProperties(e,t,n,s,r,a){F(n,U),F(s,U),F(r,ce),y.rawrigidbodyset_rbSetAdditionalMassProperties(this.__wbg_ptr,e,t,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,a)}rbLinvel(e){const t=y.rawrigidbodyset_rbLinvel(this.__wbg_ptr,e);return U.__wrap(t)}rbAngvel(e){const t=y.rawrigidbodyset_rbAngvel(this.__wbg_ptr,e);return U.__wrap(t)}rbVelocityAtPoint(e,t){F(t,U);const n=y.rawrigidbodyset_rbVelocityAtPoint(this.__wbg_ptr,e,t.__wbg_ptr);return U.__wrap(n)}rbLockTranslations(e,t,n){y.rawrigidbodyset_rbLockTranslations(this.__wbg_ptr,e,t,n)}rbSetEnabledTranslations(e,t,n,s,r){y.rawrigidbodyset_rbSetEnabledTranslations(this.__wbg_ptr,e,t,n,s,r)}rbLockRotations(e,t,n){y.rawrigidbodyset_rbLockRotations(this.__wbg_ptr,e,t,n)}rbSetEnabledRotations(e,t,n,s,r){y.rawrigidbodyset_rbSetEnabledRotations(this.__wbg_ptr,e,t,n,s,r)}rbDominanceGroup(e){return y.rawrigidbodyset_rbDominanceGroup(this.__wbg_ptr,e)}rbSetDominanceGroup(e,t){y.rawrigidbodyset_rbSetDominanceGroup(this.__wbg_ptr,e,t)}rbEnableCcd(e,t){y.rawrigidbodyset_rbEnableCcd(this.__wbg_ptr,e,t)}rbSetSoftCcdPrediction(e,t){y.rawrigidbodyset_rbSetSoftCcdPrediction(this.__wbg_ptr,e,t)}rbMass(e){return y.rawrigidbodyset_rbMass(this.__wbg_ptr,e)}rbInvMass(e){return y.rawrigidbodyset_rbInvMass(this.__wbg_ptr,e)}rbEffectiveInvMass(e){const t=y.rawrigidbodyset_rbEffectiveInvMass(this.__wbg_ptr,e);return U.__wrap(t)}rbLocalCom(e){const t=y.rawrigidbodyset_rbLocalCom(this.__wbg_ptr,e);return U.__wrap(t)}rbWorldCom(e){const t=y.rawrigidbodyset_rbWorldCom(this.__wbg_ptr,e);return U.__wrap(t)}rbInvPrincipalInertiaSqrt(e){const t=y.rawrigidbodyset_rbInvPrincipalInertiaSqrt(this.__wbg_ptr,e);return U.__wrap(t)}rbPrincipalInertiaLocalFrame(e){const t=y.rawrigidbodyset_rbPrincipalInertiaLocalFrame(this.__wbg_ptr,e);return ce.__wrap(t)}rbPrincipalInertia(e){const t=y.rawrigidbodyset_rbPrincipalInertia(this.__wbg_ptr,e);return U.__wrap(t)}rbEffectiveWorldInvInertiaSqrt(e){const t=y.rawrigidbodyset_rbEffectiveWorldInvInertiaSqrt(this.__wbg_ptr,e);return Kr.__wrap(t)}rbEffectiveAngularInertia(e){const t=y.rawrigidbodyset_rbEffectiveAngularInertia(this.__wbg_ptr,e);return Kr.__wrap(t)}rbWakeUp(e){y.rawrigidbodyset_rbWakeUp(this.__wbg_ptr,e)}rbIsCcdEnabled(e){return y.rawrigidbodyset_rbIsCcdEnabled(this.__wbg_ptr,e)!==0}rbSoftCcdPrediction(e){return y.rawrigidbodyset_rbSoftCcdPrediction(this.__wbg_ptr,e)}rbNumColliders(e){return y.rawrigidbodyset_rbNumColliders(this.__wbg_ptr,e)>>>0}rbCollider(e,t){return y.rawrigidbodyset_rbCollider(this.__wbg_ptr,e,t)}rbBodyType(e){return y.rawrigidbodyset_rbBodyType(this.__wbg_ptr,e)}rbSetBodyType(e,t,n){y.rawrigidbodyset_rbSetBodyType(this.__wbg_ptr,e,t,n)}rbIsFixed(e){return y.rawrigidbodyset_rbIsFixed(this.__wbg_ptr,e)!==0}rbIsKinematic(e){return y.rawrigidbodyset_rbIsKinematic(this.__wbg_ptr,e)!==0}rbIsDynamic(e){return y.rawrigidbodyset_rbIsDynamic(this.__wbg_ptr,e)!==0}rbLinearDamping(e){return y.rawrigidbodyset_rbLinearDamping(this.__wbg_ptr,e)}rbAngularDamping(e){return y.rawrigidbodyset_rbAngularDamping(this.__wbg_ptr,e)}rbSetLinearDamping(e,t){y.rawrigidbodyset_rbSetLinearDamping(this.__wbg_ptr,e,t)}rbSetAngularDamping(e,t){y.rawrigidbodyset_rbSetAngularDamping(this.__wbg_ptr,e,t)}rbSetEnabled(e,t){y.rawrigidbodyset_rbSetEnabled(this.__wbg_ptr,e,t)}rbIsEnabled(e){return y.rawrigidbodyset_rbIsEnabled(this.__wbg_ptr,e)!==0}rbGravityScale(e){return y.rawrigidbodyset_rbGravityScale(this.__wbg_ptr,e)}rbSetGravityScale(e,t,n){y.rawrigidbodyset_rbSetGravityScale(this.__wbg_ptr,e,t,n)}rbResetForces(e,t){y.rawrigidbodyset_rbResetForces(this.__wbg_ptr,e,t)}rbResetTorques(e,t){y.rawrigidbodyset_rbResetTorques(this.__wbg_ptr,e,t)}rbAddForce(e,t,n){F(t,U),y.rawrigidbodyset_rbAddForce(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbApplyImpulse(e,t,n){F(t,U),y.rawrigidbodyset_rbApplyImpulse(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbAddTorque(e,t,n){F(t,U),y.rawrigidbodyset_rbAddTorque(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbApplyTorqueImpulse(e,t,n){F(t,U),y.rawrigidbodyset_rbApplyTorqueImpulse(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbAddForceAtPoint(e,t,n,s){F(t,U),F(n,U),y.rawrigidbodyset_rbAddForceAtPoint(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s)}rbApplyImpulseAtPoint(e,t,n,s){F(t,U),F(n,U),y.rawrigidbodyset_rbApplyImpulseAtPoint(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s)}rbAdditionalSolverIterations(e){return y.rawrigidbodyset_rbAdditionalSolverIterations(this.__wbg_ptr,e)>>>0}rbSetAdditionalSolverIterations(e,t){y.rawrigidbodyset_rbSetAdditionalSolverIterations(this.__wbg_ptr,e,t)}rbUserData(e){return y.rawrigidbodyset_rbUserData(this.__wbg_ptr,e)>>>0}rbSetUserData(e,t){y.rawrigidbodyset_rbSetUserData(this.__wbg_ptr,e,t)}rbUserForce(e){const t=y.rawrigidbodyset_rbUserForce(this.__wbg_ptr,e);return U.__wrap(t)}rbUserTorque(e){const t=y.rawrigidbodyset_rbUserTorque(this.__wbg_ptr,e);return U.__wrap(t)}constructor(){const e=y.rawrigidbodyset_new();return this.__wbg_ptr=e>>>0,I3.register(this,this.__wbg_ptr,this),this}createRigidBody(e,t,n,s,r,a,o,l,d,c,u,p,h,b,T,m,f,N,M,P,V,C,D,G,L,H){return F(t,U),F(n,ce),F(o,U),F(l,U),F(d,U),F(c,U),F(u,ce),y.rawrigidbodyset_createRigidBody(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s,r,a,o.__wbg_ptr,l.__wbg_ptr,d.__wbg_ptr,c.__wbg_ptr,u.__wbg_ptr,p,h,b,T,m,f,N,M,P,V,C,D,G,L,H)}remove(e,t,n,s,r){F(t,kn),F(n,ke),F(s,Yn),F(r,Jn),y.rawrigidbodyset_remove(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr)}len(){return y.rawcolliderset_len(this.__wbg_ptr)>>>0}contains(e){return y.rawrigidbodyset_contains(this.__wbg_ptr,e)!==0}forEachRigidBodyHandle(e){try{y.rawrigidbodyset_forEachRigidBodyHandle(this.__wbg_ptr,Ue(e))}finally{be[Ce++]=void 0}}propagateModifiedBodyPositionsToColliders(e){F(e,ke),y.rawrigidbodyset_propagateModifiedBodyPositionsToColliders(this.__wbg_ptr,e.__wbg_ptr)}}const X3=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawrotation_free(i>>>0,1));class ce{static __wrap(e){e=e>>>0;const t=Object.create(ce.prototype);return t.__wbg_ptr=e,X3.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,X3.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawrotation_free(e,0)}constructor(e,t,n,s){const r=y.rawrotation_new(e,t,n,s);return this.__wbg_ptr=r>>>0,X3.register(this,this.__wbg_ptr,this),this}static identity(){const e=y.rawrotation_identity();return ce.__wrap(e)}get x(){return y.rawrotation_x(this.__wbg_ptr)}get y(){return y.rawintegrationparameters_dt(this.__wbg_ptr)}get z(){return y.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}get w(){return y.rawrotation_w(this.__wbg_ptr)}}const f5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawsdpmatrix3_free(i>>>0,1));class Kr{static __wrap(e){e=e>>>0;const t=Object.create(Kr.prototype);return t.__wbg_ptr=e,f5.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,f5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawsdpmatrix3_free(e,0)}elements(){const e=y.rawsdpmatrix3_elements(this.__wbg_ptr);return vs(e)}}const h5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawserializationpipeline_free(i>>>0,1));class Zy{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,h5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawserializationpipeline_free(e,0)}constructor(){const e=y.rawserializationpipeline_new();return this.__wbg_ptr=e>>>0,h5.register(this,this.__wbg_ptr,this),this}serializeAll(e,t,n,s,r,a,o,l,d){F(e,U),F(t,zi),F(n,kn),F(s,Oi),F(r,hi),F(a,qe),F(o,ke),F(l,Yn),F(d,Jn);const c=y.rawserializationpipeline_serializeAll(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,a.__wbg_ptr,o.__wbg_ptr,l.__wbg_ptr,d.__wbg_ptr);return vs(c)}deserializeAll(e){const t=y.rawserializationpipeline_deserializeAll(this.__wbg_ptr,$e(e));return t===0?void 0:c7.__wrap(t)}}const m5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawshape_free(i>>>0,1));class U0{static __wrap(e){e=e>>>0;const t=Object.create(U0.prototype);return t.__wbg_ptr=e,m5.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,m5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawshape_free(e,0)}static cuboid(e,t,n){const s=y.rawshape_cuboid(e,t,n);return U0.__wrap(s)}static roundCuboid(e,t,n,s){const r=y.rawshape_roundCuboid(e,t,n,s);return U0.__wrap(r)}static ball(e){const t=y.rawshape_ball(e);return U0.__wrap(t)}static halfspace(e){F(e,U);const t=y.rawshape_halfspace(e.__wbg_ptr);return U0.__wrap(t)}static capsule(e,t){const n=y.rawshape_capsule(e,t);return U0.__wrap(n)}static cylinder(e,t){const n=y.rawshape_cylinder(e,t);return U0.__wrap(n)}static roundCylinder(e,t,n){const s=y.rawshape_roundCylinder(e,t,n);return U0.__wrap(s)}static cone(e,t){const n=y.rawshape_cone(e,t);return U0.__wrap(n)}static roundCone(e,t,n){const s=y.rawshape_roundCone(e,t,n);return U0.__wrap(s)}static voxels(e,t){F(e,U);const n=Q1(t,y.__wbindgen_export_2),s=zt,r=y.rawshape_voxels(e.__wbg_ptr,n,s);return U0.__wrap(r)}static voxelsFromPoints(e,t){F(e,U);const n=ri(t,y.__wbindgen_export_2),s=zt,r=y.rawshape_voxelsFromPoints(e.__wbg_ptr,n,s);return U0.__wrap(r)}static polyline(e,t){const n=ri(e,y.__wbindgen_export_2),s=zt,r=Q1(t,y.__wbindgen_export_2),a=zt,o=y.rawshape_polyline(n,s,r,a);return U0.__wrap(o)}static trimesh(e,t,n){const s=ri(e,y.__wbindgen_export_2),r=zt,a=Q1(t,y.__wbindgen_export_2),o=zt,l=y.rawshape_trimesh(s,r,a,o,n);return l===0?void 0:U0.__wrap(l)}static heightfield(e,t,n,s,r){const a=ri(n,y.__wbindgen_export_2),o=zt;F(s,U);const l=y.rawshape_heightfield(e,t,a,o,s.__wbg_ptr,r);return U0.__wrap(l)}static segment(e,t){F(e,U),F(t,U);const n=y.rawshape_segment(e.__wbg_ptr,t.__wbg_ptr);return U0.__wrap(n)}static triangle(e,t,n){F(e,U),F(t,U),F(n,U);const s=y.rawshape_triangle(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr);return U0.__wrap(s)}static roundTriangle(e,t,n,s){F(e,U),F(t,U),F(n,U);const r=y.rawshape_roundTriangle(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s);return U0.__wrap(r)}static convexHull(e){const t=ri(e,y.__wbindgen_export_2),n=zt,s=y.rawshape_convexHull(t,n);return s===0?void 0:U0.__wrap(s)}static roundConvexHull(e,t){const n=ri(e,y.__wbindgen_export_2),s=zt,r=y.rawshape_roundConvexHull(n,s,t);return r===0?void 0:U0.__wrap(r)}static convexMesh(e,t){const n=ri(e,y.__wbindgen_export_2),s=zt,r=Q1(t,y.__wbindgen_export_2),a=zt,o=y.rawshape_convexMesh(n,s,r,a);return o===0?void 0:U0.__wrap(o)}static roundConvexMesh(e,t,n){const s=ri(e,y.__wbindgen_export_2),r=zt,a=Q1(t,y.__wbindgen_export_2),o=zt,l=y.rawshape_roundConvexMesh(s,r,a,o,n);return l===0?void 0:U0.__wrap(l)}castShape(e,t,n,s,r,a,o,l,d,c){F(e,U),F(t,ce),F(n,U),F(s,U0),F(r,U),F(a,ce),F(o,U);const u=y.rawshape_castShape(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,a.__wbg_ptr,o.__wbg_ptr,l,d,c);return u===0?void 0:E2.__wrap(u)}intersectsShape(e,t,n,s,r){return F(e,U),F(t,ce),F(n,U0),F(s,U),F(r,ce),y.rawshape_intersectsShape(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr)!==0}contactShape(e,t,n,s,r,a){F(e,U),F(t,ce),F(n,U0),F(s,U),F(r,ce);const o=y.rawshape_contactShape(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,a);return o===0?void 0:gs.__wrap(o)}containsPoint(e,t,n){return F(e,U),F(t,ce),F(n,U),y.rawshape_containsPoint(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr)!==0}projectPoint(e,t,n,s){F(e,U),F(t,ce),F(n,U);const r=y.rawshape_projectPoint(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s);return N2.__wrap(r)}intersectsRay(e,t,n,s,r){return F(e,U),F(t,ce),F(n,U),F(s,U),y.rawshape_intersectsRay(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r)!==0}castRay(e,t,n,s,r,a){return F(e,U),F(t,ce),F(n,U),F(s,U),y.rawshape_castRay(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r,a)}castRayAndGetNormal(e,t,n,s,r,a){F(e,U),F(t,ce),F(n,U),F(s,U);const o=y.rawshape_castRayAndGetNormal(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r,a);return o===0?void 0:M2.__wrap(o)}}const y5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawshapecasthit_free(i>>>0,1));class E2{static __wrap(e){e=e>>>0;const t=Object.create(E2.prototype);return t.__wbg_ptr=e,y5.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,y5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawshapecasthit_free(e,0)}time_of_impact(){return y.rawrotation_x(this.__wbg_ptr)}witness1(){const e=y.rawshapecasthit_witness1(this.__wbg_ptr);return U.__wrap(e)}witness2(){const e=y.rawcontactforceevent_total_force(this.__wbg_ptr);return U.__wrap(e)}normal1(){const e=y.rawshapecasthit_normal1(this.__wbg_ptr);return U.__wrap(e)}normal2(){const e=y.rawshapecasthit_normal2(this.__wbg_ptr);return U.__wrap(e)}}const b5=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawshapecontact_free(i>>>0,1));class gs{static __wrap(e){e=e>>>0;const t=Object.create(gs.prototype);return t.__wbg_ptr=e,b5.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,b5.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawshapecontact_free(e,0)}distance(){return y.rawkinematiccharactercontroller_maxSlopeClimbAngle(this.__wbg_ptr)}point1(){const e=y.rawpointprojection_point(this.__wbg_ptr);return U.__wrap(e)}point2(){const e=y.rawcollidershapecasthit_witness1(this.__wbg_ptr);return U.__wrap(e)}normal1(){const e=y.rawcollidershapecasthit_witness2(this.__wbg_ptr);return U.__wrap(e)}normal2(){const e=y.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return U.__wrap(e)}}const A3=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>y.__wbg_rawvector_free(i>>>0,1));class U{static __wrap(e){e=e>>>0;const t=Object.create(U.prototype);return t.__wbg_ptr=e,A3.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,A3.unregister(this),e}free(){const e=this.__destroy_into_raw();y.__wbg_rawvector_free(e,0)}static zero(){const e=y.rawvector_zero();return U.__wrap(e)}constructor(e,t,n){const s=y.rawvector_new(e,t,n);return this.__wbg_ptr=s>>>0,A3.register(this,this.__wbg_ptr,this),this}get x(){return y.rawrotation_x(this.__wbg_ptr)}set x(e){y.rawvector_set_x(this.__wbg_ptr,e)}get y(){return y.rawintegrationparameters_dt(this.__wbg_ptr)}set y(e){y.rawintegrationparameters_set_dt(this.__wbg_ptr,e)}get z(){return y.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}set z(e){y.rawvector_set_z(this.__wbg_ptr,e)}xyz(){const e=y.rawvector_xyz(this.__wbg_ptr);return U.__wrap(e)}yxz(){const e=y.rawvector_yxz(this.__wbg_ptr);return U.__wrap(e)}zxy(){const e=y.rawvector_zxy(this.__wbg_ptr);return U.__wrap(e)}xzy(){const e=y.rawvector_xzy(this.__wbg_ptr);return U.__wrap(e)}yzx(){const e=y.rawvector_yzx(this.__wbg_ptr);return U.__wrap(e)}zyx(){const e=y.rawvector_zyx(this.__wbg_ptr);return U.__wrap(e)}}function Yy(i,e,t,n){const s=Re(i).bind(Re(e),Re(t),Re(n));return $e(s)}function ky(i){const e=Re(i).buffer;return $e(e)}function Jy(){return a7(function(i,e,t){const n=Re(i).call(Re(e),Re(t));return $e(n)},arguments)}function Ky(){return a7(function(i,e,t,n){const s=Re(i).call(Re(e),Re(t),Re(n));return $e(s)},arguments)}function By(){return a7(function(i,e,t,n,s){const r=Re(i).call(Re(e),Re(t),Re(n),Re(s));return $e(r)},arguments)}function Qy(i){return Re(i).length}function _y(i){return Re(i).length}function $y(i){const e=new Uint8Array(Re(i));return $e(e)}function eb(i,e,t){const n=new Uint8Array(Re(i),e>>>0,t>>>0);return $e(n)}function tb(i,e,t){const n=new Float32Array(Re(i),e>>>0,t>>>0);return $e(n)}function nb(i){const e=new Float32Array(i>>>0);return $e(e)}function ib(i){const e=o7.__wrap(i);return $e(e)}function sb(i){const e=L2.__wrap(i);return $e(e)}function rb(i,e,t){Re(i).set(Re(e),t>>>0)}function ab(i,e,t){Re(i).set(Re(e),t>>>0)}function ob(i){const e=Re(i);return typeof e=="boolean"?e?1:0:2}function lb(i){return typeof Re(i)=="function"}function db(){const i=y.memory;return $e(i)}function cb(i,e){const t=Re(e),n=typeof t=="number"?t:void 0;ft().setFloat64(i+8*1,Q0(n)?0:n,!0),ft().setInt32(i+4*0,!Q0(n),!0)}function ub(i){return $e(i)}function pb(i){vs(i)}function fb(i,e){throw new Error(Ay(i,e))}URL=globalThis.URL;const v=await Ey({"./rapier_wasm3d_bg.js":{__wbindgen_number_new:ub,__wbindgen_boolean_get:ob,__wbindgen_object_drop_ref:pb,__wbindgen_number_get:cb,__wbindgen_is_function:lb,__wbg_rawraycolliderintersection_new:sb,__wbg_rawcontactforceevent_new:ib,__wbg_call_7cccdd69e0791ae2:Jy,__wbg_call_833bed5770ea2041:Ky,__wbg_call_b8adc8b1d0a0d8eb:By,__wbg_bind_c8359b1cba058168:Yy,__wbg_buffer_609cc3eee51ed158:ky,__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a:eb,__wbg_new_a12002a7f91c75be:$y,__wbg_set_65595bdd868b3009:ab,__wbg_length_a446193dc22c12f8:_y,__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354:tb,__wbg_set_10bad9bee0e9c58b:rb,__wbg_length_3b4f022188ae8db6:Qy,__wbg_newwithlength_5a5efe313cfd59f1:nb,__wbindgen_throw:fb,__wbindgen_memory:db}},My),hb=v.memory,mb=v.version,yb=v.__wbg_rawkinematiccharactercontroller_free,bb=v.rawkinematiccharactercontroller_new,vb=v.rawkinematiccharactercontroller_setUp,gb=v.rawkinematiccharactercontroller_normalNudgeFactor,wb=v.rawkinematiccharactercontroller_setNormalNudgeFactor,Tb=v.rawkinematiccharactercontroller_setOffset,xb=v.rawkinematiccharactercontroller_slideEnabled,Sb=v.rawkinematiccharactercontroller_setSlideEnabled,Pb=v.rawkinematiccharactercontroller_autostepMaxHeight,Hb=v.rawkinematiccharactercontroller_autostepMinWidth,Rb=v.rawkinematiccharactercontroller_autostepIncludesDynamicBodies,Nb=v.rawkinematiccharactercontroller_autostepEnabled,Lb=v.rawkinematiccharactercontroller_enableAutostep,Mb=v.rawkinematiccharactercontroller_disableAutostep,Eb=v.rawkinematiccharactercontroller_maxSlopeClimbAngle,Ob=v.rawkinematiccharactercontroller_setMaxSlopeClimbAngle,zb=v.rawkinematiccharactercontroller_minSlopeSlideAngle,Ib=v.rawkinematiccharactercontroller_setMinSlopeSlideAngle,Xb=v.rawkinematiccharactercontroller_snapToGroundDistance,Ab=v.rawkinematiccharactercontroller_enableSnapToGround,Cb=v.rawkinematiccharactercontroller_disableSnapToGround,Fb=v.rawkinematiccharactercontroller_snapToGroundEnabled,Vb=v.rawkinematiccharactercontroller_computeColliderMovement,Db=v.rawkinematiccharactercontroller_computedMovement,jb=v.rawkinematiccharactercontroller_computedGrounded,Wb=v.rawkinematiccharactercontroller_numComputedCollisions,Ub=v.rawkinematiccharactercontroller_computedCollision,qb=v.__wbg_rawcharactercollision_free,Gb=v.rawcharactercollision_new,Zb=v.rawcharactercollision_handle,Yb=v.rawcharactercollision_translationDeltaApplied,kb=v.rawcharactercollision_translationDeltaRemaining,Jb=v.rawcharactercollision_toi,Kb=v.rawcharactercollision_worldWitness1,Bb=v.rawcharactercollision_worldWitness2,Qb=v.rawcharactercollision_worldNormal1,_b=v.rawcharactercollision_worldNormal2,$b=v.__wbg_rawpidcontroller_free,ev=v.rawpidcontroller_new,tv=v.rawpidcontroller_set_kp,nv=v.rawpidcontroller_set_ki,iv=v.rawpidcontroller_set_kd,sv=v.rawpidcontroller_set_axes_mask,rv=v.rawpidcontroller_reset_integrals,av=v.rawpidcontroller_apply_linear_correction,ov=v.rawpidcontroller_apply_angular_correction,lv=v.rawpidcontroller_linear_correction,dv=v.rawpidcontroller_angular_correction,cv=v.__wbg_rawdynamicraycastvehiclecontroller_free,uv=v.rawdynamicraycastvehiclecontroller_new,pv=v.rawdynamicraycastvehiclecontroller_current_vehicle_speed,fv=v.rawdynamicraycastvehiclecontroller_chassis,hv=v.rawdynamicraycastvehiclecontroller_index_up_axis,mv=v.rawdynamicraycastvehiclecontroller_set_index_up_axis,yv=v.rawdynamicraycastvehiclecontroller_index_forward_axis,bv=v.rawdynamicraycastvehiclecontroller_set_index_forward_axis,vv=v.rawdynamicraycastvehiclecontroller_add_wheel,gv=v.rawdynamicraycastvehiclecontroller_num_wheels,wv=v.rawdynamicraycastvehiclecontroller_update_vehicle,Tv=v.rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs,xv=v.rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs,Sv=v.rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length,Pv=v.rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length,Hv=v.rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel,Rv=v.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel,Nv=v.rawdynamicraycastvehiclecontroller_wheel_radius,Lv=v.rawdynamicraycastvehiclecontroller_set_wheel_radius,Mv=v.rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness,Ev=v.rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness,Ov=v.rawdynamicraycastvehiclecontroller_wheel_suspension_compression,zv=v.rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression,Iv=v.rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation,Xv=v.rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation,Av=v.rawdynamicraycastvehiclecontroller_wheel_max_suspension_force,Cv=v.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force,Fv=v.rawdynamicraycastvehiclecontroller_wheel_brake,Vv=v.rawdynamicraycastvehiclecontroller_set_wheel_brake,Dv=v.rawdynamicraycastvehiclecontroller_wheel_steering,jv=v.rawdynamicraycastvehiclecontroller_set_wheel_steering,Wv=v.rawdynamicraycastvehiclecontroller_wheel_engine_force,Uv=v.rawdynamicraycastvehiclecontroller_set_wheel_engine_force,qv=v.rawdynamicraycastvehiclecontroller_wheel_direction_cs,Gv=v.rawdynamicraycastvehiclecontroller_set_wheel_direction_cs,Zv=v.rawdynamicraycastvehiclecontroller_wheel_axle_cs,Yv=v.rawdynamicraycastvehiclecontroller_set_wheel_axle_cs,kv=v.rawdynamicraycastvehiclecontroller_wheel_friction_slip,Jv=v.rawdynamicraycastvehiclecontroller_set_wheel_friction_slip,Kv=v.rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness,Bv=v.rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness,Qv=v.rawdynamicraycastvehiclecontroller_wheel_rotation,_v=v.rawdynamicraycastvehiclecontroller_wheel_forward_impulse,$v=v.rawdynamicraycastvehiclecontroller_wheel_side_impulse,eg=v.rawdynamicraycastvehiclecontroller_wheel_suspension_force,tg=v.rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws,ng=v.rawdynamicraycastvehiclecontroller_wheel_contact_point_ws,ig=v.rawdynamicraycastvehiclecontroller_wheel_suspension_length,sg=v.rawdynamicraycastvehiclecontroller_wheel_hard_point_ws,rg=v.rawdynamicraycastvehiclecontroller_wheel_is_in_contact,ag=v.rawdynamicraycastvehiclecontroller_wheel_ground_object,og=v.__wbg_rawccdsolver_free,lg=v.rawccdsolver_new,dg=v.rawimpulsejointset_jointType,cg=v.rawimpulsejointset_jointBodyHandle1,ug=v.rawimpulsejointset_jointBodyHandle2,pg=v.rawimpulsejointset_jointFrameX1,fg=v.rawimpulsejointset_jointFrameX2,hg=v.rawimpulsejointset_jointAnchor1,mg=v.rawimpulsejointset_jointAnchor2,yg=v.rawimpulsejointset_jointSetAnchor1,bg=v.rawimpulsejointset_jointSetAnchor2,vg=v.rawimpulsejointset_jointContactsEnabled,gg=v.rawimpulsejointset_jointSetContactsEnabled,wg=v.rawimpulsejointset_jointLimitsEnabled,Tg=v.rawimpulsejointset_jointLimitsMin,xg=v.rawimpulsejointset_jointLimitsMax,Sg=v.rawimpulsejointset_jointSetLimits,Pg=v.rawimpulsejointset_jointConfigureMotorModel,Hg=v.rawimpulsejointset_jointConfigureMotorVelocity,Rg=v.rawimpulsejointset_jointConfigureMotorPosition,Ng=v.rawimpulsejointset_jointConfigureMotor,Lg=v.__wbg_rawimpulsejointset_free,Mg=v.rawimpulsejointset_new,Eg=v.rawimpulsejointset_createJoint,Og=v.rawimpulsejointset_remove,zg=v.rawimpulsejointset_len,Ig=v.rawimpulsejointset_contains,Xg=v.rawimpulsejointset_forEachJointHandle,Ag=v.rawimpulsejointset_forEachJointAttachedToRigidBody,Cg=v.__wbg_rawintegrationparameters_free,Fg=v.rawintegrationparameters_new,Vg=v.rawintegrationparameters_dt,Dg=v.rawintegrationparameters_contact_erp,jg=v.rawintegrationparameters_numSolverIterations,Wg=v.rawintegrationparameters_minIslandSize,Ug=v.rawintegrationparameters_maxCcdSubsteps,qg=v.rawintegrationparameters_lengthUnit,Gg=v.rawintegrationparameters_set_dt,Zg=v.rawintegrationparameters_set_contact_natural_frequency,Yg=v.rawintegrationparameters_set_normalizedAllowedLinearError,kg=v.rawintegrationparameters_set_normalizedPredictionDistance,Jg=v.rawintegrationparameters_set_numSolverIterations,Kg=v.rawintegrationparameters_set_minIslandSize,Bg=v.rawintegrationparameters_set_maxCcdSubsteps,Qg=v.rawintegrationparameters_set_lengthUnit,_g=v.rawintegrationparameters_switchToStandardPgsSolver,$g=v.rawintegrationparameters_switchToSmallStepsPgsSolver,ew=v.rawintegrationparameters_switchToSmallStepsPgsSolverWithoutWarmstart,tw=v.__wbg_rawislandmanager_free,nw=v.rawislandmanager_new,iw=v.rawislandmanager_forEachActiveRigidBodyHandle,sw=v.__wbg_rawgenericjoint_free,rw=v.rawgenericjoint_generic,aw=v.rawgenericjoint_spring,ow=v.rawgenericjoint_rope,lw=v.rawgenericjoint_spherical,dw=v.rawgenericjoint_prismatic,cw=v.rawgenericjoint_fixed,uw=v.rawgenericjoint_revolute,pw=v.rawmultibodyjointset_jointType,fw=v.rawmultibodyjointset_jointFrameX1,hw=v.rawmultibodyjointset_jointFrameX2,mw=v.rawmultibodyjointset_jointAnchor1,yw=v.rawmultibodyjointset_jointAnchor2,bw=v.rawmultibodyjointset_jointContactsEnabled,vw=v.rawmultibodyjointset_jointSetContactsEnabled,gw=v.rawmultibodyjointset_jointLimitsEnabled,ww=v.rawmultibodyjointset_jointLimitsMin,Tw=v.rawmultibodyjointset_jointLimitsMax,xw=v.__wbg_rawmultibodyjointset_free,Sw=v.rawmultibodyjointset_new,Pw=v.rawmultibodyjointset_createJoint,Hw=v.rawmultibodyjointset_remove,Rw=v.rawmultibodyjointset_contains,Nw=v.rawmultibodyjointset_forEachJointHandle,Lw=v.rawmultibodyjointset_forEachJointAttachedToRigidBody,Mw=v.rawrigidbodyset_rbTranslation,Ew=v.rawrigidbodyset_rbRotation,Ow=v.rawrigidbodyset_rbSleep,zw=v.rawrigidbodyset_rbIsSleeping,Iw=v.rawrigidbodyset_rbIsMoving,Xw=v.rawrigidbodyset_rbNextTranslation,Aw=v.rawrigidbodyset_rbNextRotation,Cw=v.rawrigidbodyset_rbSetTranslation,Fw=v.rawrigidbodyset_rbSetRotation,Vw=v.rawrigidbodyset_rbSetLinvel,Dw=v.rawrigidbodyset_rbSetAngvel,jw=v.rawrigidbodyset_rbSetNextKinematicTranslation,Ww=v.rawrigidbodyset_rbSetNextKinematicRotation,Uw=v.rawrigidbodyset_rbRecomputeMassPropertiesFromColliders,qw=v.rawrigidbodyset_rbSetAdditionalMass,Gw=v.rawrigidbodyset_rbSetAdditionalMassProperties,Zw=v.rawrigidbodyset_rbLinvel,Yw=v.rawrigidbodyset_rbAngvel,kw=v.rawrigidbodyset_rbVelocityAtPoint,Jw=v.rawrigidbodyset_rbLockTranslations,Kw=v.rawrigidbodyset_rbSetEnabledTranslations,Bw=v.rawrigidbodyset_rbLockRotations,Qw=v.rawrigidbodyset_rbSetEnabledRotations,_w=v.rawrigidbodyset_rbDominanceGroup,$w=v.rawrigidbodyset_rbSetDominanceGroup,eT=v.rawrigidbodyset_rbEnableCcd,tT=v.rawrigidbodyset_rbSetSoftCcdPrediction,nT=v.rawrigidbodyset_rbMass,iT=v.rawrigidbodyset_rbInvMass,sT=v.rawrigidbodyset_rbEffectiveInvMass,rT=v.rawrigidbodyset_rbLocalCom,aT=v.rawrigidbodyset_rbWorldCom,oT=v.rawrigidbodyset_rbInvPrincipalInertiaSqrt,lT=v.rawrigidbodyset_rbPrincipalInertiaLocalFrame,dT=v.rawrigidbodyset_rbPrincipalInertia,cT=v.rawrigidbodyset_rbEffectiveWorldInvInertiaSqrt,uT=v.rawrigidbodyset_rbEffectiveAngularInertia,pT=v.rawrigidbodyset_rbWakeUp,fT=v.rawrigidbodyset_rbIsCcdEnabled,hT=v.rawrigidbodyset_rbSoftCcdPrediction,mT=v.rawrigidbodyset_rbNumColliders,yT=v.rawrigidbodyset_rbCollider,bT=v.rawrigidbodyset_rbBodyType,vT=v.rawrigidbodyset_rbSetBodyType,gT=v.rawrigidbodyset_rbIsFixed,wT=v.rawrigidbodyset_rbIsKinematic,TT=v.rawrigidbodyset_rbIsDynamic,xT=v.rawrigidbodyset_rbLinearDamping,ST=v.rawrigidbodyset_rbAngularDamping,PT=v.rawrigidbodyset_rbSetLinearDamping,HT=v.rawrigidbodyset_rbSetAngularDamping,RT=v.rawrigidbodyset_rbSetEnabled,NT=v.rawrigidbodyset_rbIsEnabled,LT=v.rawrigidbodyset_rbGravityScale,MT=v.rawrigidbodyset_rbSetGravityScale,ET=v.rawrigidbodyset_rbResetForces,OT=v.rawrigidbodyset_rbResetTorques,zT=v.rawrigidbodyset_rbAddForce,IT=v.rawrigidbodyset_rbApplyImpulse,XT=v.rawrigidbodyset_rbAddTorque,AT=v.rawrigidbodyset_rbApplyTorqueImpulse,CT=v.rawrigidbodyset_rbAddForceAtPoint,FT=v.rawrigidbodyset_rbApplyImpulseAtPoint,VT=v.rawrigidbodyset_rbAdditionalSolverIterations,DT=v.rawrigidbodyset_rbSetAdditionalSolverIterations,jT=v.rawrigidbodyset_rbUserData,WT=v.rawrigidbodyset_rbSetUserData,UT=v.rawrigidbodyset_rbUserForce,qT=v.rawrigidbodyset_rbUserTorque,GT=v.__wbg_rawrigidbodyset_free,ZT=v.rawrigidbodyset_new,YT=v.rawrigidbodyset_createRigidBody,kT=v.rawrigidbodyset_remove,JT=v.rawrigidbodyset_contains,KT=v.rawrigidbodyset_forEachRigidBodyHandle,BT=v.rawrigidbodyset_propagateModifiedBodyPositionsToColliders,QT=v.__wbg_rawbroadphase_free,_T=v.rawbroadphase_new,$T=v.rawcolliderset_coTranslation,ex=v.rawcolliderset_coRotation,tx=v.rawcolliderset_coSetTranslation,nx=v.rawcolliderset_coSetTranslationWrtParent,ix=v.rawcolliderset_coSetRotation,sx=v.rawcolliderset_coSetRotationWrtParent,rx=v.rawcolliderset_coIsSensor,ax=v.rawcolliderset_coShapeType,ox=v.rawcolliderset_coHalfspaceNormal,lx=v.rawcolliderset_coHalfExtents,dx=v.rawcolliderset_coSetHalfExtents,cx=v.rawcolliderset_coRadius,ux=v.rawcolliderset_coSetRadius,px=v.rawcolliderset_coHalfHeight,fx=v.rawcolliderset_coSetHalfHeight,hx=v.rawcolliderset_coRoundRadius,mx=v.rawcolliderset_coSetRoundRadius,yx=v.rawcolliderset_coVoxelData,bx=v.rawcolliderset_coVoxelSize,vx=v.rawcolliderset_coSetVoxel,gx=v.rawcolliderset_coPropagateVoxelChange,wx=v.rawcolliderset_coCombineVoxelStates,Tx=v.rawcolliderset_coVertices,xx=v.rawcolliderset_coIndices,Sx=v.rawcolliderset_coTriMeshFlags,Px=v.rawcolliderset_coHeightFieldFlags,Hx=v.rawcolliderset_coHeightfieldHeights,Rx=v.rawcolliderset_coHeightfieldScale,Nx=v.rawcolliderset_coHeightfieldNRows,Lx=v.rawcolliderset_coHeightfieldNCols,Mx=v.rawcolliderset_coParent,Ex=v.rawcolliderset_coSetEnabled,Ox=v.rawcolliderset_coIsEnabled,zx=v.rawcolliderset_coSetContactSkin,Ix=v.rawcolliderset_coContactSkin,Xx=v.rawcolliderset_coFriction,Ax=v.rawcolliderset_coRestitution,Cx=v.rawcolliderset_coDensity,Fx=v.rawcolliderset_coMass,Vx=v.rawcolliderset_coVolume,Dx=v.rawcolliderset_coCollisionGroups,jx=v.rawcolliderset_coSolverGroups,Wx=v.rawcolliderset_coActiveHooks,Ux=v.rawcolliderset_coActiveCollisionTypes,qx=v.rawcolliderset_coActiveEvents,Gx=v.rawcolliderset_coContactForceEventThreshold,Zx=v.rawcolliderset_coContainsPoint,Yx=v.rawcolliderset_coCastShape,kx=v.rawcolliderset_coCastCollider,Jx=v.rawcolliderset_coIntersectsShape,Kx=v.rawcolliderset_coContactShape,Bx=v.rawcolliderset_coContactCollider,Qx=v.rawcolliderset_coProjectPoint,_x=v.rawcolliderset_coIntersectsRay,$x=v.rawcolliderset_coCastRay,eS=v.rawcolliderset_coCastRayAndGetNormal,tS=v.rawcolliderset_coSetSensor,nS=v.rawcolliderset_coSetRestitution,iS=v.rawcolliderset_coSetFriction,sS=v.rawcolliderset_coFrictionCombineRule,rS=v.rawcolliderset_coSetFrictionCombineRule,aS=v.rawcolliderset_coRestitutionCombineRule,oS=v.rawcolliderset_coSetRestitutionCombineRule,lS=v.rawcolliderset_coSetCollisionGroups,dS=v.rawcolliderset_coSetSolverGroups,cS=v.rawcolliderset_coSetActiveHooks,uS=v.rawcolliderset_coSetActiveEvents,pS=v.rawcolliderset_coSetActiveCollisionTypes,fS=v.rawcolliderset_coSetShape,hS=v.rawcolliderset_coSetContactForceEventThreshold,mS=v.rawcolliderset_coSetDensity,yS=v.rawcolliderset_coSetMass,bS=v.rawcolliderset_coSetMassProperties,vS=v.__wbg_rawcolliderset_free,gS=v.rawcolliderset_new,wS=v.rawcolliderset_len,TS=v.rawcolliderset_contains,xS=v.rawcolliderset_createCollider,SS=v.rawcolliderset_remove,PS=v.rawcolliderset_forEachColliderHandle,HS=v.__wbg_rawshapecontact_free,RS=v.__wbg_rawnarrowphase_free,NS=v.rawnarrowphase_new,LS=v.rawnarrowphase_contact_pairs_with,MS=v.rawnarrowphase_contact_pair,ES=v.rawnarrowphase_intersection_pairs_with,OS=v.rawnarrowphase_intersection_pair,zS=v.__wbg_rawcontactmanifold_free,IS=v.rawcontactpair_collider1,XS=v.rawcontactpair_collider2,AS=v.rawcontactpair_numContactManifolds,CS=v.rawcontactpair_contactManifold,FS=v.rawcontactmanifold_normal,VS=v.rawcontactmanifold_local_n1,DS=v.rawcontactmanifold_local_n2,jS=v.rawcontactmanifold_subshape1,WS=v.rawcontactmanifold_subshape2,US=v.rawcontactmanifold_num_contacts,qS=v.rawcontactmanifold_contact_local_p1,GS=v.rawcontactmanifold_contact_local_p2,ZS=v.rawcontactmanifold_contact_dist,YS=v.rawcontactmanifold_contact_fid1,kS=v.rawcontactmanifold_contact_fid2,JS=v.rawcontactmanifold_contact_impulse,KS=v.rawcontactmanifold_contact_tangent_impulse_x,BS=v.rawcontactmanifold_contact_tangent_impulse_y,QS=v.rawcontactmanifold_num_solver_contacts,_S=v.rawcontactmanifold_solver_contact_point,$S=v.rawcontactmanifold_solver_contact_dist,eP=v.rawcontactmanifold_solver_contact_friction,tP=v.rawcontactmanifold_solver_contact_restitution,nP=v.rawcontactmanifold_solver_contact_tangent_velocity,iP=v.__wbg_rawpointprojection_free,sP=v.rawpointprojection_point,rP=v.rawpointprojection_isInside,aP=v.__wbg_rawpointcolliderprojection_free,oP=v.rawpointcolliderprojection_colliderHandle,lP=v.rawpointcolliderprojection_point,dP=v.rawpointcolliderprojection_isInside,cP=v.rawpointcolliderprojection_featureType,uP=v.rawpointcolliderprojection_featureId,pP=v.__wbg_rawrayintersection_free,fP=v.__wbg_rawraycolliderhit_free,hP=v.__wbg_rawshape_free,mP=v.rawshape_cuboid,yP=v.rawshape_roundCuboid,bP=v.rawshape_ball,vP=v.rawshape_halfspace,gP=v.rawshape_capsule,wP=v.rawshape_cylinder,TP=v.rawshape_roundCylinder,xP=v.rawshape_cone,SP=v.rawshape_roundCone,PP=v.rawshape_voxels,HP=v.rawshape_voxelsFromPoints,RP=v.rawshape_polyline,NP=v.rawshape_trimesh,LP=v.rawshape_heightfield,MP=v.rawshape_segment,EP=v.rawshape_triangle,OP=v.rawshape_roundTriangle,zP=v.rawshape_convexHull,IP=v.rawshape_roundConvexHull,XP=v.rawshape_convexMesh,AP=v.rawshape_roundConvexMesh,CP=v.rawshape_castShape,FP=v.rawshape_intersectsShape,VP=v.rawshape_contactShape,DP=v.rawshape_containsPoint,jP=v.rawshape_projectPoint,WP=v.rawshape_intersectsRay,UP=v.rawshape_castRay,qP=v.rawshape_castRayAndGetNormal,GP=v.__wbg_rawshapecasthit_free,ZP=v.rawshapecasthit_witness1,YP=v.rawshapecasthit_normal1,kP=v.rawshapecasthit_normal2,JP=v.__wbg_rawcollidershapecasthit_free,KP=v.rawcollidershapecasthit_time_of_impact,BP=v.rawcollidershapecasthit_witness1,QP=v.rawcollidershapecasthit_witness2,_P=v.rawrotation_new,$P=v.rawrotation_identity,eH=v.rawrotation_x,tH=v.rawrotation_w,nH=v.rawvector_zero,iH=v.rawvector_new,sH=v.rawvector_set_x,rH=v.rawvector_set_z,aH=v.rawvector_xyz,oH=v.rawvector_yxz,lH=v.rawvector_zxy,dH=v.rawvector_xzy,cH=v.rawvector_yzx,uH=v.rawvector_zyx,pH=v.rawsdpmatrix3_elements,fH=v.__wbg_rawdebugrenderpipeline_free,hH=v.rawdebugrenderpipeline_new,mH=v.rawdebugrenderpipeline_vertices,yH=v.rawdebugrenderpipeline_colors,bH=v.rawdebugrenderpipeline_render,vH=v.__wbg_raweventqueue_free,gH=v.__wbg_rawcontactforceevent_free,wH=v.rawcontactforceevent_collider2,TH=v.rawcontactforceevent_total_force,xH=v.rawcontactforceevent_total_force_magnitude,SH=v.rawcontactforceevent_max_force_direction,PH=v.rawcontactforceevent_max_force_magnitude,HH=v.raweventqueue_new,RH=v.raweventqueue_drainCollisionEvents,NH=v.raweventqueue_drainContactForceEvents,LH=v.raweventqueue_clear,MH=v.__wbg_rawphysicspipeline_free,EH=v.rawphysicspipeline_new,OH=v.rawphysicspipeline_step,zH=v.rawphysicspipeline_stepWithEvents,IH=v.rawquerypipeline_new,XH=v.rawquerypipeline_update,AH=v.rawquerypipeline_castRay,CH=v.rawquerypipeline_castRayAndGetNormal,FH=v.rawquerypipeline_intersectionsWithRay,VH=v.rawquerypipeline_intersectionWithShape,DH=v.rawquerypipeline_projectPoint,jH=v.rawquerypipeline_projectPointAndGetFeature,WH=v.rawquerypipeline_intersectionsWithPoint,UH=v.rawquerypipeline_castShape,qH=v.rawquerypipeline_intersectionsWithShape,GH=v.rawquerypipeline_collidersWithAabbIntersectingAabb,ZH=v.__wbg_rawdeserializedworld_free,YH=v.rawdeserializedworld_takeGravity,kH=v.rawdeserializedworld_takeIntegrationParameters,JH=v.rawdeserializedworld_takeIslandManager,KH=v.rawdeserializedworld_takeBroadPhase,BH=v.rawdeserializedworld_takeNarrowPhase,QH=v.rawdeserializedworld_takeBodies,_H=v.rawdeserializedworld_takeColliders,$H=v.rawdeserializedworld_takeImpulseJoints,eR=v.rawdeserializedworld_takeMultibodyJoints,tR=v.__wbg_rawserializationpipeline_free,nR=v.rawserializationpipeline_new,iR=v.rawserializationpipeline_serializeAll,sR=v.rawserializationpipeline_deserializeAll,rR=v.rawcolliderset_isHandleValid,aR=v.rawkinematiccharactercontroller_offset,oR=v.rawintegrationparameters_normalizedAllowedLinearError,lR=v.rawintegrationparameters_numAdditionalFrictionIterations,dR=v.rawintegrationparameters_numInternalPgsIterations,cR=v.rawrigidbodyset_len,uR=v.rawshapecontact_distance,pR=v.rawrayintersection_featureType,fR=v.rawraycolliderintersection_colliderHandle,hR=v.rawrayintersection_time_of_impact,mR=v.rawraycolliderintersection_featureType,yR=v.rawraycolliderhit_colliderHandle,bR=v.rawraycolliderintersection_time_of_impact,vR=v.rawcollidershapecasthit_colliderHandle,gR=v.rawraycolliderhit_timeOfImpact,wR=v.rawshapecasthit_time_of_impact,TR=v.rawrotation_y,xR=v.rawrotation_z,SR=v.rawvector_x,PR=v.rawvector_y,HR=v.rawvector_z,RR=v.rawcontactforceevent_collider1,NR=v.rawintegrationparameters_normalizedPredictionDistance,LR=v.reserve_memory,MR=v.__wbg_rawquerypipeline_free,ER=v.rawrayintersection_featureId,OR=v.rawraycolliderintersection_featureId,zR=v.rawkinematiccharactercontroller_up,IR=v.rawshapecontact_normal2,XR=v.rawshapecontact_point1,AR=v.rawshapecontact_point2,CR=v.rawrayintersection_normal,FR=v.rawraycolliderintersection_normal,VR=v.rawshapecontact_normal1,DR=v.rawcollidershapecasthit_normal1,jR=v.rawcollidershapecasthit_normal2,WR=v.rawshapecasthit_witness2,UR=v.rawintegrationparameters_set_numAdditionalFrictionIterations,qR=v.rawintegrationparameters_set_numInternalPgsIterations,GR=v.rawvector_set_y,ZR=v.__wbg_rawcontactpair_free,YR=v.__wbg_rawrotation_free,kR=v.__wbg_rawsdpmatrix3_free,JR=v.__wbg_rawvector_free,KR=v.__wbg_rawraycolliderintersection_free,BR=v.__wbindgen_export_0,QR=v.__wbindgen_add_to_stack_pointer,_R=v.__wbindgen_export_1,$R=v.__wbindgen_export_2,eN=Object.freeze(Object.defineProperty({__proto__:null,__wbg_rawbroadphase_free:QT,__wbg_rawccdsolver_free:og,__wbg_rawcharactercollision_free:qb,__wbg_rawcolliderset_free:vS,__wbg_rawcollidershapecasthit_free:JP,__wbg_rawcontactforceevent_free:gH,__wbg_rawcontactmanifold_free:zS,__wbg_rawcontactpair_free:ZR,__wbg_rawdebugrenderpipeline_free:fH,__wbg_rawdeserializedworld_free:ZH,__wbg_rawdynamicraycastvehiclecontroller_free:cv,__wbg_raweventqueue_free:vH,__wbg_rawgenericjoint_free:sw,__wbg_rawimpulsejointset_free:Lg,__wbg_rawintegrationparameters_free:Cg,__wbg_rawislandmanager_free:tw,__wbg_rawkinematiccharactercontroller_free:yb,__wbg_rawmultibodyjointset_free:xw,__wbg_rawnarrowphase_free:RS,__wbg_rawphysicspipeline_free:MH,__wbg_rawpidcontroller_free:$b,__wbg_rawpointcolliderprojection_free:aP,__wbg_rawpointprojection_free:iP,__wbg_rawquerypipeline_free:MR,__wbg_rawraycolliderhit_free:fP,__wbg_rawraycolliderintersection_free:KR,__wbg_rawrayintersection_free:pP,__wbg_rawrigidbodyset_free:GT,__wbg_rawrotation_free:YR,__wbg_rawsdpmatrix3_free:kR,__wbg_rawserializationpipeline_free:tR,__wbg_rawshape_free:hP,__wbg_rawshapecasthit_free:GP,__wbg_rawshapecontact_free:HS,__wbg_rawvector_free:JR,__wbindgen_add_to_stack_pointer:QR,__wbindgen_export_0:BR,__wbindgen_export_1:_R,__wbindgen_export_2:$R,memory:hb,rawbroadphase_new:_T,rawccdsolver_new:lg,rawcharactercollision_handle:Zb,rawcharactercollision_new:Gb,rawcharactercollision_toi:Jb,rawcharactercollision_translationDeltaApplied:Yb,rawcharactercollision_translationDeltaRemaining:kb,rawcharactercollision_worldNormal1:Qb,rawcharactercollision_worldNormal2:_b,rawcharactercollision_worldWitness1:Kb,rawcharactercollision_worldWitness2:Bb,rawcolliderset_coActiveCollisionTypes:Ux,rawcolliderset_coActiveEvents:qx,rawcolliderset_coActiveHooks:Wx,rawcolliderset_coCastCollider:kx,rawcolliderset_coCastRay:$x,rawcolliderset_coCastRayAndGetNormal:eS,rawcolliderset_coCastShape:Yx,rawcolliderset_coCollisionGroups:Dx,rawcolliderset_coCombineVoxelStates:wx,rawcolliderset_coContactCollider:Bx,rawcolliderset_coContactForceEventThreshold:Gx,rawcolliderset_coContactShape:Kx,rawcolliderset_coContactSkin:Ix,rawcolliderset_coContainsPoint:Zx,rawcolliderset_coDensity:Cx,rawcolliderset_coFriction:Xx,rawcolliderset_coFrictionCombineRule:sS,rawcolliderset_coHalfExtents:lx,rawcolliderset_coHalfHeight:px,rawcolliderset_coHalfspaceNormal:ox,rawcolliderset_coHeightFieldFlags:Px,rawcolliderset_coHeightfieldHeights:Hx,rawcolliderset_coHeightfieldNCols:Lx,rawcolliderset_coHeightfieldNRows:Nx,rawcolliderset_coHeightfieldScale:Rx,rawcolliderset_coIndices:xx,rawcolliderset_coIntersectsRay:_x,rawcolliderset_coIntersectsShape:Jx,rawcolliderset_coIsEnabled:Ox,rawcolliderset_coIsSensor:rx,rawcolliderset_coMass:Fx,rawcolliderset_coParent:Mx,rawcolliderset_coProjectPoint:Qx,rawcolliderset_coPropagateVoxelChange:gx,rawcolliderset_coRadius:cx,rawcolliderset_coRestitution:Ax,rawcolliderset_coRestitutionCombineRule:aS,rawcolliderset_coRotation:ex,rawcolliderset_coRoundRadius:hx,rawcolliderset_coSetActiveCollisionTypes:pS,rawcolliderset_coSetActiveEvents:uS,rawcolliderset_coSetActiveHooks:cS,rawcolliderset_coSetCollisionGroups:lS,rawcolliderset_coSetContactForceEventThreshold:hS,rawcolliderset_coSetContactSkin:zx,rawcolliderset_coSetDensity:mS,rawcolliderset_coSetEnabled:Ex,rawcolliderset_coSetFriction:iS,rawcolliderset_coSetFrictionCombineRule:rS,rawcolliderset_coSetHalfExtents:dx,rawcolliderset_coSetHalfHeight:fx,rawcolliderset_coSetMass:yS,rawcolliderset_coSetMassProperties:bS,rawcolliderset_coSetRadius:ux,rawcolliderset_coSetRestitution:nS,rawcolliderset_coSetRestitutionCombineRule:oS,rawcolliderset_coSetRotation:ix,rawcolliderset_coSetRotationWrtParent:sx,rawcolliderset_coSetRoundRadius:mx,rawcolliderset_coSetSensor:tS,rawcolliderset_coSetShape:fS,rawcolliderset_coSetSolverGroups:dS,rawcolliderset_coSetTranslation:tx,rawcolliderset_coSetTranslationWrtParent:nx,rawcolliderset_coSetVoxel:vx,rawcolliderset_coShapeType:ax,rawcolliderset_coSolverGroups:jx,rawcolliderset_coTranslation:$T,rawcolliderset_coTriMeshFlags:Sx,rawcolliderset_coVertices:Tx,rawcolliderset_coVolume:Vx,rawcolliderset_coVoxelData:yx,rawcolliderset_coVoxelSize:bx,rawcolliderset_contains:TS,rawcolliderset_createCollider:xS,rawcolliderset_forEachColliderHandle:PS,rawcolliderset_isHandleValid:rR,rawcolliderset_len:wS,rawcolliderset_new:gS,rawcolliderset_remove:SS,rawcollidershapecasthit_colliderHandle:vR,rawcollidershapecasthit_normal1:DR,rawcollidershapecasthit_normal2:jR,rawcollidershapecasthit_time_of_impact:KP,rawcollidershapecasthit_witness1:BP,rawcollidershapecasthit_witness2:QP,rawcontactforceevent_collider1:RR,rawcontactforceevent_collider2:wH,rawcontactforceevent_max_force_direction:SH,rawcontactforceevent_max_force_magnitude:PH,rawcontactforceevent_total_force:TH,rawcontactforceevent_total_force_magnitude:xH,rawcontactmanifold_contact_dist:ZS,rawcontactmanifold_contact_fid1:YS,rawcontactmanifold_contact_fid2:kS,rawcontactmanifold_contact_impulse:JS,rawcontactmanifold_contact_local_p1:qS,rawcontactmanifold_contact_local_p2:GS,rawcontactmanifold_contact_tangent_impulse_x:KS,rawcontactmanifold_contact_tangent_impulse_y:BS,rawcontactmanifold_local_n1:VS,rawcontactmanifold_local_n2:DS,rawcontactmanifold_normal:FS,rawcontactmanifold_num_contacts:US,rawcontactmanifold_num_solver_contacts:QS,rawcontactmanifold_solver_contact_dist:$S,rawcontactmanifold_solver_contact_friction:eP,rawcontactmanifold_solver_contact_point:_S,rawcontactmanifold_solver_contact_restitution:tP,rawcontactmanifold_solver_contact_tangent_velocity:nP,rawcontactmanifold_subshape1:jS,rawcontactmanifold_subshape2:WS,rawcontactpair_collider1:IS,rawcontactpair_collider2:XS,rawcontactpair_contactManifold:CS,rawcontactpair_numContactManifolds:AS,rawdebugrenderpipeline_colors:yH,rawdebugrenderpipeline_new:hH,rawdebugrenderpipeline_render:bH,rawdebugrenderpipeline_vertices:mH,rawdeserializedworld_takeBodies:QH,rawdeserializedworld_takeBroadPhase:KH,rawdeserializedworld_takeColliders:_H,rawdeserializedworld_takeGravity:YH,rawdeserializedworld_takeImpulseJoints:$H,rawdeserializedworld_takeIntegrationParameters:kH,rawdeserializedworld_takeIslandManager:JH,rawdeserializedworld_takeMultibodyJoints:eR,rawdeserializedworld_takeNarrowPhase:BH,rawdynamicraycastvehiclecontroller_add_wheel:vv,rawdynamicraycastvehiclecontroller_chassis:fv,rawdynamicraycastvehiclecontroller_current_vehicle_speed:pv,rawdynamicraycastvehiclecontroller_index_forward_axis:yv,rawdynamicraycastvehiclecontroller_index_up_axis:hv,rawdynamicraycastvehiclecontroller_new:uv,rawdynamicraycastvehiclecontroller_num_wheels:gv,rawdynamicraycastvehiclecontroller_set_index_forward_axis:bv,rawdynamicraycastvehiclecontroller_set_index_up_axis:mv,rawdynamicraycastvehiclecontroller_set_wheel_axle_cs:Yv,rawdynamicraycastvehiclecontroller_set_wheel_brake:Vv,rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs:xv,rawdynamicraycastvehiclecontroller_set_wheel_direction_cs:Gv,rawdynamicraycastvehiclecontroller_set_wheel_engine_force:Uv,rawdynamicraycastvehiclecontroller_set_wheel_friction_slip:Jv,rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force:Cv,rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel:Rv,rawdynamicraycastvehiclecontroller_set_wheel_radius:Lv,rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness:Bv,rawdynamicraycastvehiclecontroller_set_wheel_steering:jv,rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression:zv,rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation:Xv,rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length:Pv,rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness:Ev,rawdynamicraycastvehiclecontroller_update_vehicle:wv,rawdynamicraycastvehiclecontroller_wheel_axle_cs:Zv,rawdynamicraycastvehiclecontroller_wheel_brake:Fv,rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs:Tv,rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws:tg,rawdynamicraycastvehiclecontroller_wheel_contact_point_ws:ng,rawdynamicraycastvehiclecontroller_wheel_direction_cs:qv,rawdynamicraycastvehiclecontroller_wheel_engine_force:Wv,rawdynamicraycastvehiclecontroller_wheel_forward_impulse:_v,rawdynamicraycastvehiclecontroller_wheel_friction_slip:kv,rawdynamicraycastvehiclecontroller_wheel_ground_object:ag,rawdynamicraycastvehiclecontroller_wheel_hard_point_ws:sg,rawdynamicraycastvehiclecontroller_wheel_is_in_contact:rg,rawdynamicraycastvehiclecontroller_wheel_max_suspension_force:Av,rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel:Hv,rawdynamicraycastvehiclecontroller_wheel_radius:Nv,rawdynamicraycastvehiclecontroller_wheel_rotation:Qv,rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness:Kv,rawdynamicraycastvehiclecontroller_wheel_side_impulse:$v,rawdynamicraycastvehiclecontroller_wheel_steering:Dv,rawdynamicraycastvehiclecontroller_wheel_suspension_compression:Ov,rawdynamicraycastvehiclecontroller_wheel_suspension_force:eg,rawdynamicraycastvehiclecontroller_wheel_suspension_length:ig,rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation:Iv,rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length:Sv,rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness:Mv,raweventqueue_clear:LH,raweventqueue_drainCollisionEvents:RH,raweventqueue_drainContactForceEvents:NH,raweventqueue_new:HH,rawgenericjoint_fixed:cw,rawgenericjoint_generic:rw,rawgenericjoint_prismatic:dw,rawgenericjoint_revolute:uw,rawgenericjoint_rope:ow,rawgenericjoint_spherical:lw,rawgenericjoint_spring:aw,rawimpulsejointset_contains:Ig,rawimpulsejointset_createJoint:Eg,rawimpulsejointset_forEachJointAttachedToRigidBody:Ag,rawimpulsejointset_forEachJointHandle:Xg,rawimpulsejointset_jointAnchor1:hg,rawimpulsejointset_jointAnchor2:mg,rawimpulsejointset_jointBodyHandle1:cg,rawimpulsejointset_jointBodyHandle2:ug,rawimpulsejointset_jointConfigureMotor:Ng,rawimpulsejointset_jointConfigureMotorModel:Pg,rawimpulsejointset_jointConfigureMotorPosition:Rg,rawimpulsejointset_jointConfigureMotorVelocity:Hg,rawimpulsejointset_jointContactsEnabled:vg,rawimpulsejointset_jointFrameX1:pg,rawimpulsejointset_jointFrameX2:fg,rawimpulsejointset_jointLimitsEnabled:wg,rawimpulsejointset_jointLimitsMax:xg,rawimpulsejointset_jointLimitsMin:Tg,rawimpulsejointset_jointSetAnchor1:yg,rawimpulsejointset_jointSetAnchor2:bg,rawimpulsejointset_jointSetContactsEnabled:gg,rawimpulsejointset_jointSetLimits:Sg,rawimpulsejointset_jointType:dg,rawimpulsejointset_len:zg,rawimpulsejointset_new:Mg,rawimpulsejointset_remove:Og,rawintegrationparameters_contact_erp:Dg,rawintegrationparameters_dt:Vg,rawintegrationparameters_lengthUnit:qg,rawintegrationparameters_maxCcdSubsteps:Ug,rawintegrationparameters_minIslandSize:Wg,rawintegrationparameters_new:Fg,rawintegrationparameters_normalizedAllowedLinearError:oR,rawintegrationparameters_normalizedPredictionDistance:NR,rawintegrationparameters_numAdditionalFrictionIterations:lR,rawintegrationparameters_numInternalPgsIterations:dR,rawintegrationparameters_numSolverIterations:jg,rawintegrationparameters_set_contact_natural_frequency:Zg,rawintegrationparameters_set_dt:Gg,rawintegrationparameters_set_lengthUnit:Qg,rawintegrationparameters_set_maxCcdSubsteps:Bg,rawintegrationparameters_set_minIslandSize:Kg,rawintegrationparameters_set_normalizedAllowedLinearError:Yg,rawintegrationparameters_set_normalizedPredictionDistance:kg,rawintegrationparameters_set_numAdditionalFrictionIterations:UR,rawintegrationparameters_set_numInternalPgsIterations:qR,rawintegrationparameters_set_numSolverIterations:Jg,rawintegrationparameters_switchToSmallStepsPgsSolver:$g,rawintegrationparameters_switchToSmallStepsPgsSolverWithoutWarmstart:ew,rawintegrationparameters_switchToStandardPgsSolver:_g,rawislandmanager_forEachActiveRigidBodyHandle:iw,rawislandmanager_new:nw,rawkinematiccharactercontroller_autostepEnabled:Nb,rawkinematiccharactercontroller_autostepIncludesDynamicBodies:Rb,rawkinematiccharactercontroller_autostepMaxHeight:Pb,rawkinematiccharactercontroller_autostepMinWidth:Hb,rawkinematiccharactercontroller_computeColliderMovement:Vb,rawkinematiccharactercontroller_computedCollision:Ub,rawkinematiccharactercontroller_computedGrounded:jb,rawkinematiccharactercontroller_computedMovement:Db,rawkinematiccharactercontroller_disableAutostep:Mb,rawkinematiccharactercontroller_disableSnapToGround:Cb,rawkinematiccharactercontroller_enableAutostep:Lb,rawkinematiccharactercontroller_enableSnapToGround:Ab,rawkinematiccharactercontroller_maxSlopeClimbAngle:Eb,rawkinematiccharactercontroller_minSlopeSlideAngle:zb,rawkinematiccharactercontroller_new:bb,rawkinematiccharactercontroller_normalNudgeFactor:gb,rawkinematiccharactercontroller_numComputedCollisions:Wb,rawkinematiccharactercontroller_offset:aR,rawkinematiccharactercontroller_setMaxSlopeClimbAngle:Ob,rawkinematiccharactercontroller_setMinSlopeSlideAngle:Ib,rawkinematiccharactercontroller_setNormalNudgeFactor:wb,rawkinematiccharactercontroller_setOffset:Tb,rawkinematiccharactercontroller_setSlideEnabled:Sb,rawkinematiccharactercontroller_setUp:vb,rawkinematiccharactercontroller_slideEnabled:xb,rawkinematiccharactercontroller_snapToGroundDistance:Xb,rawkinematiccharactercontroller_snapToGroundEnabled:Fb,rawkinematiccharactercontroller_up:zR,rawmultibodyjointset_contains:Rw,rawmultibodyjointset_createJoint:Pw,rawmultibodyjointset_forEachJointAttachedToRigidBody:Lw,rawmultibodyjointset_forEachJointHandle:Nw,rawmultibodyjointset_jointAnchor1:mw,rawmultibodyjointset_jointAnchor2:yw,rawmultibodyjointset_jointContactsEnabled:bw,rawmultibodyjointset_jointFrameX1:fw,rawmultibodyjointset_jointFrameX2:hw,rawmultibodyjointset_jointLimitsEnabled:gw,rawmultibodyjointset_jointLimitsMax:Tw,rawmultibodyjointset_jointLimitsMin:ww,rawmultibodyjointset_jointSetContactsEnabled:vw,rawmultibodyjointset_jointType:pw,rawmultibodyjointset_new:Sw,rawmultibodyjointset_remove:Hw,rawnarrowphase_contact_pair:MS,rawnarrowphase_contact_pairs_with:LS,rawnarrowphase_intersection_pair:OS,rawnarrowphase_intersection_pairs_with:ES,rawnarrowphase_new:NS,rawphysicspipeline_new:EH,rawphysicspipeline_step:OH,rawphysicspipeline_stepWithEvents:zH,rawpidcontroller_angular_correction:dv,rawpidcontroller_apply_angular_correction:ov,rawpidcontroller_apply_linear_correction:av,rawpidcontroller_linear_correction:lv,rawpidcontroller_new:ev,rawpidcontroller_reset_integrals:rv,rawpidcontroller_set_axes_mask:sv,rawpidcontroller_set_kd:iv,rawpidcontroller_set_ki:nv,rawpidcontroller_set_kp:tv,rawpointcolliderprojection_colliderHandle:oP,rawpointcolliderprojection_featureId:uP,rawpointcolliderprojection_featureType:cP,rawpointcolliderprojection_isInside:dP,rawpointcolliderprojection_point:lP,rawpointprojection_isInside:rP,rawpointprojection_point:sP,rawquerypipeline_castRay:AH,rawquerypipeline_castRayAndGetNormal:CH,rawquerypipeline_castShape:UH,rawquerypipeline_collidersWithAabbIntersectingAabb:GH,rawquerypipeline_intersectionWithShape:VH,rawquerypipeline_intersectionsWithPoint:WH,rawquerypipeline_intersectionsWithRay:FH,rawquerypipeline_intersectionsWithShape:qH,rawquerypipeline_new:IH,rawquerypipeline_projectPoint:DH,rawquerypipeline_projectPointAndGetFeature:jH,rawquerypipeline_update:XH,rawraycolliderhit_colliderHandle:yR,rawraycolliderhit_timeOfImpact:gR,rawraycolliderintersection_colliderHandle:fR,rawraycolliderintersection_featureId:OR,rawraycolliderintersection_featureType:mR,rawraycolliderintersection_normal:FR,rawraycolliderintersection_time_of_impact:bR,rawrayintersection_featureId:ER,rawrayintersection_featureType:pR,rawrayintersection_normal:CR,rawrayintersection_time_of_impact:hR,rawrigidbodyset_contains:JT,rawrigidbodyset_createRigidBody:YT,rawrigidbodyset_forEachRigidBodyHandle:KT,rawrigidbodyset_len:cR,rawrigidbodyset_new:ZT,rawrigidbodyset_propagateModifiedBodyPositionsToColliders:BT,rawrigidbodyset_rbAddForce:zT,rawrigidbodyset_rbAddForceAtPoint:CT,rawrigidbodyset_rbAddTorque:XT,rawrigidbodyset_rbAdditionalSolverIterations:VT,rawrigidbodyset_rbAngularDamping:ST,rawrigidbodyset_rbAngvel:Yw,rawrigidbodyset_rbApplyImpulse:IT,rawrigidbodyset_rbApplyImpulseAtPoint:FT,rawrigidbodyset_rbApplyTorqueImpulse:AT,rawrigidbodyset_rbBodyType:bT,rawrigidbodyset_rbCollider:yT,rawrigidbodyset_rbDominanceGroup:_w,rawrigidbodyset_rbEffectiveAngularInertia:uT,rawrigidbodyset_rbEffectiveInvMass:sT,rawrigidbodyset_rbEffectiveWorldInvInertiaSqrt:cT,rawrigidbodyset_rbEnableCcd:eT,rawrigidbodyset_rbGravityScale:LT,rawrigidbodyset_rbInvMass:iT,rawrigidbodyset_rbInvPrincipalInertiaSqrt:oT,rawrigidbodyset_rbIsCcdEnabled:fT,rawrigidbodyset_rbIsDynamic:TT,rawrigidbodyset_rbIsEnabled:NT,rawrigidbodyset_rbIsFixed:gT,rawrigidbodyset_rbIsKinematic:wT,rawrigidbodyset_rbIsMoving:Iw,rawrigidbodyset_rbIsSleeping:zw,rawrigidbodyset_rbLinearDamping:xT,rawrigidbodyset_rbLinvel:Zw,rawrigidbodyset_rbLocalCom:rT,rawrigidbodyset_rbLockRotations:Bw,rawrigidbodyset_rbLockTranslations:Jw,rawrigidbodyset_rbMass:nT,rawrigidbodyset_rbNextRotation:Aw,rawrigidbodyset_rbNextTranslation:Xw,rawrigidbodyset_rbNumColliders:mT,rawrigidbodyset_rbPrincipalInertia:dT,rawrigidbodyset_rbPrincipalInertiaLocalFrame:lT,rawrigidbodyset_rbRecomputeMassPropertiesFromColliders:Uw,rawrigidbodyset_rbResetForces:ET,rawrigidbodyset_rbResetTorques:OT,rawrigidbodyset_rbRotation:Ew,rawrigidbodyset_rbSetAdditionalMass:qw,rawrigidbodyset_rbSetAdditionalMassProperties:Gw,rawrigidbodyset_rbSetAdditionalSolverIterations:DT,rawrigidbodyset_rbSetAngularDamping:HT,rawrigidbodyset_rbSetAngvel:Dw,rawrigidbodyset_rbSetBodyType:vT,rawrigidbodyset_rbSetDominanceGroup:$w,rawrigidbodyset_rbSetEnabled:RT,rawrigidbodyset_rbSetEnabledRotations:Qw,rawrigidbodyset_rbSetEnabledTranslations:Kw,rawrigidbodyset_rbSetGravityScale:MT,rawrigidbodyset_rbSetLinearDamping:PT,rawrigidbodyset_rbSetLinvel:Vw,rawrigidbodyset_rbSetNextKinematicRotation:Ww,rawrigidbodyset_rbSetNextKinematicTranslation:jw,rawrigidbodyset_rbSetRotation:Fw,rawrigidbodyset_rbSetSoftCcdPrediction:tT,rawrigidbodyset_rbSetTranslation:Cw,rawrigidbodyset_rbSetUserData:WT,rawrigidbodyset_rbSleep:Ow,rawrigidbodyset_rbSoftCcdPrediction:hT,rawrigidbodyset_rbTranslation:Mw,rawrigidbodyset_rbUserData:jT,rawrigidbodyset_rbUserForce:UT,rawrigidbodyset_rbUserTorque:qT,rawrigidbodyset_rbVelocityAtPoint:kw,rawrigidbodyset_rbWakeUp:pT,rawrigidbodyset_rbWorldCom:aT,rawrigidbodyset_remove:kT,rawrotation_identity:$P,rawrotation_new:_P,rawrotation_w:tH,rawrotation_x:eH,rawrotation_y:TR,rawrotation_z:xR,rawsdpmatrix3_elements:pH,rawserializationpipeline_deserializeAll:sR,rawserializationpipeline_new:nR,rawserializationpipeline_serializeAll:iR,rawshape_ball:bP,rawshape_capsule:gP,rawshape_castRay:UP,rawshape_castRayAndGetNormal:qP,rawshape_castShape:CP,rawshape_cone:xP,rawshape_contactShape:VP,rawshape_containsPoint:DP,rawshape_convexHull:zP,rawshape_convexMesh:XP,rawshape_cuboid:mP,rawshape_cylinder:wP,rawshape_halfspace:vP,rawshape_heightfield:LP,rawshape_intersectsRay:WP,rawshape_intersectsShape:FP,rawshape_polyline:RP,rawshape_projectPoint:jP,rawshape_roundCone:SP,rawshape_roundConvexHull:IP,rawshape_roundConvexMesh:AP,rawshape_roundCuboid:yP,rawshape_roundCylinder:TP,rawshape_roundTriangle:OP,rawshape_segment:MP,rawshape_triangle:EP,rawshape_trimesh:NP,rawshape_voxels:PP,rawshape_voxelsFromPoints:HP,rawshapecasthit_normal1:YP,rawshapecasthit_normal2:kP,rawshapecasthit_time_of_impact:wR,rawshapecasthit_witness1:ZP,rawshapecasthit_witness2:WR,rawshapecontact_distance:uR,rawshapecontact_normal1:VR,rawshapecontact_normal2:IR,rawshapecontact_point1:XR,rawshapecontact_point2:AR,rawvector_new:iH,rawvector_set_x:sH,rawvector_set_y:GR,rawvector_set_z:rH,rawvector_x:SR,rawvector_xyz:aH,rawvector_xzy:dH,rawvector_y:PR,rawvector_yxz:oH,rawvector_yzx:cH,rawvector_z:HR,rawvector_zero:nH,rawvector_zxy:lH,rawvector_zyx:uH,reserve_memory:LR,version:mb},Symbol.toStringTag,{value:"Module"}));Oy(eN);class tN{constructor(e,t,n){this.x=e,this.y=t,this.z=n}}class Y{static new(e,t,n){return new tN(e,t,n)}static intoRaw(e){return new U(e.x,e.y,e.z)}static zeros(){return Y.new(0,0,0)}static fromRaw(e){if(!e)return null;let t=Y.new(e.x,e.y,e.z);return e.free(),t}static copy(e,t){e.x=t.x,e.y=t.y,e.z=t.z}}class v5{constructor(e,t,n,s){this.x=e,this.y=t,this.z=n,this.w=s}}class ae{static identity(){return new v5(0,0,0,1)}static fromRaw(e){if(!e)return null;let t=new v5(e.x,e.y,e.z,e.w);return e.free(),t}static intoRaw(e){return new ce(e.x,e.y,e.z,e.w)}static copy(e,t){e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w}}class nN{get m11(){return this.elements[0]}get m12(){return this.elements[1]}get m21(){return this.m12}get m13(){return this.elements[2]}get m31(){return this.m13}get m22(){return this.elements[3]}get m23(){return this.elements[4]}get m32(){return this.m23}get m33(){return this.elements[5]}constructor(e){this.elements=e}}class g5{static fromRaw(e){const t=new nN(e.elements());return e.free(),t}}var vn;(function(i){i[i.Dynamic=0]="Dynamic",i[i.Fixed=1]="Fixed",i[i.KinematicPositionBased=2]="KinematicPositionBased",i[i.KinematicVelocityBased=3]="KinematicVelocityBased"})(vn||(vn={}));class w5{constructor(e,t,n){this.rawSet=e,this.colliderSet=t,this.handle=n}finalizeDeserialization(e){this.colliderSet=e}isValid(){return this.rawSet.contains(this.handle)}lockTranslations(e,t){return this.rawSet.rbLockTranslations(this.handle,e,t)}lockRotations(e,t){return this.rawSet.rbLockRotations(this.handle,e,t)}setEnabledTranslations(e,t,n,s){return this.rawSet.rbSetEnabledTranslations(this.handle,e,t,n,s)}restrictTranslations(e,t,n,s){this.setEnabledTranslations(e,t,n,s)}setEnabledRotations(e,t,n,s){return this.rawSet.rbSetEnabledRotations(this.handle,e,t,n,s)}restrictRotations(e,t,n,s){this.setEnabledRotations(e,t,n,s)}dominanceGroup(){return this.rawSet.rbDominanceGroup(this.handle)}setDominanceGroup(e){this.rawSet.rbSetDominanceGroup(this.handle,e)}additionalSolverIterations(){return this.rawSet.rbAdditionalSolverIterations(this.handle)}setAdditionalSolverIterations(e){this.rawSet.rbSetAdditionalSolverIterations(this.handle,e)}enableCcd(e){this.rawSet.rbEnableCcd(this.handle,e)}setSoftCcdPrediction(e){this.rawSet.rbSetSoftCcdPrediction(this.handle,e)}softCcdPrediction(){return this.rawSet.rbSoftCcdPrediction(this.handle)}translation(){let e=this.rawSet.rbTranslation(this.handle);return Y.fromRaw(e)}rotation(){let e=this.rawSet.rbRotation(this.handle);return ae.fromRaw(e)}nextTranslation(){let e=this.rawSet.rbNextTranslation(this.handle);return Y.fromRaw(e)}nextRotation(){let e=this.rawSet.rbNextRotation(this.handle);return ae.fromRaw(e)}setTranslation(e,t){this.rawSet.rbSetTranslation(this.handle,e.x,e.y,e.z,t)}setLinvel(e,t){let n=Y.intoRaw(e);this.rawSet.rbSetLinvel(this.handle,n,t),n.free()}gravityScale(){return this.rawSet.rbGravityScale(this.handle)}setGravityScale(e,t){this.rawSet.rbSetGravityScale(this.handle,e,t)}setRotation(e,t){this.rawSet.rbSetRotation(this.handle,e.x,e.y,e.z,e.w,t)}setAngvel(e,t){let n=Y.intoRaw(e);this.rawSet.rbSetAngvel(this.handle,n,t),n.free()}setNextKinematicTranslation(e){this.rawSet.rbSetNextKinematicTranslation(this.handle,e.x,e.y,e.z)}setNextKinematicRotation(e){this.rawSet.rbSetNextKinematicRotation(this.handle,e.x,e.y,e.z,e.w)}linvel(){return Y.fromRaw(this.rawSet.rbLinvel(this.handle))}velocityAtPoint(e){const t=Y.intoRaw(e);let n=Y.fromRaw(this.rawSet.rbVelocityAtPoint(this.handle,t));return t.free(),n}angvel(){return Y.fromRaw(this.rawSet.rbAngvel(this.handle))}mass(){return this.rawSet.rbMass(this.handle)}effectiveInvMass(){return Y.fromRaw(this.rawSet.rbEffectiveInvMass(this.handle))}invMass(){return this.rawSet.rbInvMass(this.handle)}localCom(){return Y.fromRaw(this.rawSet.rbLocalCom(this.handle))}worldCom(){return Y.fromRaw(this.rawSet.rbWorldCom(this.handle))}invPrincipalInertiaSqrt(){return Y.fromRaw(this.rawSet.rbInvPrincipalInertiaSqrt(this.handle))}principalInertia(){return Y.fromRaw(this.rawSet.rbPrincipalInertia(this.handle))}principalInertiaLocalFrame(){return ae.fromRaw(this.rawSet.rbPrincipalInertiaLocalFrame(this.handle))}effectiveWorldInvInertiaSqrt(){return g5.fromRaw(this.rawSet.rbEffectiveWorldInvInertiaSqrt(this.handle))}effectiveAngularInertia(){return g5.fromRaw(this.rawSet.rbEffectiveAngularInertia(this.handle))}sleep(){this.rawSet.rbSleep(this.handle)}wakeUp(){this.rawSet.rbWakeUp(this.handle)}isCcdEnabled(){return this.rawSet.rbIsCcdEnabled(this.handle)}numColliders(){return this.rawSet.rbNumColliders(this.handle)}collider(e){return this.colliderSet.get(this.rawSet.rbCollider(this.handle,e))}setEnabled(e){this.rawSet.rbSetEnabled(this.handle,e)}isEnabled(){return this.rawSet.rbIsEnabled(this.handle)}bodyType(){return this.rawSet.rbBodyType(this.handle)}setBodyType(e,t){return this.rawSet.rbSetBodyType(this.handle,e,t)}isSleeping(){return this.rawSet.rbIsSleeping(this.handle)}isMoving(){return this.rawSet.rbIsMoving(this.handle)}isFixed(){return this.rawSet.rbIsFixed(this.handle)}isKinematic(){return this.rawSet.rbIsKinematic(this.handle)}isDynamic(){return this.rawSet.rbIsDynamic(this.handle)}linearDamping(){return this.rawSet.rbLinearDamping(this.handle)}angularDamping(){return this.rawSet.rbAngularDamping(this.handle)}setLinearDamping(e){this.rawSet.rbSetLinearDamping(this.handle,e)}recomputeMassPropertiesFromColliders(){this.rawSet.rbRecomputeMassPropertiesFromColliders(this.handle,this.colliderSet.raw)}setAdditionalMass(e,t){this.rawSet.rbSetAdditionalMass(this.handle,e,t)}setAdditionalMassProperties(e,t,n,s,r){let a=Y.intoRaw(t),o=Y.intoRaw(n),l=ae.intoRaw(s);this.rawSet.rbSetAdditionalMassProperties(this.handle,e,a,o,l,r),a.free(),o.free(),l.free()}setAngularDamping(e){this.rawSet.rbSetAngularDamping(this.handle,e)}resetForces(e){this.rawSet.rbResetForces(this.handle,e)}resetTorques(e){this.rawSet.rbResetTorques(this.handle,e)}addForce(e,t){const n=Y.intoRaw(e);this.rawSet.rbAddForce(this.handle,n,t),n.free()}applyImpulse(e,t){const n=Y.intoRaw(e);this.rawSet.rbApplyImpulse(this.handle,n,t),n.free()}addTorque(e,t){const n=Y.intoRaw(e);this.rawSet.rbAddTorque(this.handle,n,t),n.free()}applyTorqueImpulse(e,t){const n=Y.intoRaw(e);this.rawSet.rbApplyTorqueImpulse(this.handle,n,t),n.free()}addForceAtPoint(e,t,n){const s=Y.intoRaw(e),r=Y.intoRaw(t);this.rawSet.rbAddForceAtPoint(this.handle,s,r,n),s.free(),r.free()}applyImpulseAtPoint(e,t,n){const s=Y.intoRaw(e),r=Y.intoRaw(t);this.rawSet.rbApplyImpulseAtPoint(this.handle,s,r,n),s.free(),r.free()}userForce(){return Y.fromRaw(this.rawSet.rbUserForce(this.handle))}userTorque(){return Y.fromRaw(this.rawSet.rbUserTorque(this.handle))}}class _t{constructor(e){this.enabled=!0,this.status=e,this.translation=Y.zeros(),this.rotation=ae.identity(),this.gravityScale=1,this.linvel=Y.zeros(),this.mass=0,this.massOnly=!1,this.centerOfMass=Y.zeros(),this.translationsEnabledX=!0,this.translationsEnabledY=!0,this.angvel=Y.zeros(),this.principalAngularInertia=Y.zeros(),this.angularInertiaLocalFrame=ae.identity(),this.translationsEnabledZ=!0,this.rotationsEnabledX=!0,this.rotationsEnabledY=!0,this.rotationsEnabledZ=!0,this.linearDamping=0,this.angularDamping=0,this.canSleep=!0,this.sleeping=!1,this.ccdEnabled=!1,this.softCcdPrediction=0,this.dominanceGroup=0,this.additionalSolverIterations=0}static dynamic(){return new _t(vn.Dynamic)}static kinematicPositionBased(){return new _t(vn.KinematicPositionBased)}static kinematicVelocityBased(){return new _t(vn.KinematicVelocityBased)}static fixed(){return new _t(vn.Fixed)}static newDynamic(){return new _t(vn.Dynamic)}static newKinematicPositionBased(){return new _t(vn.KinematicPositionBased)}static newKinematicVelocityBased(){return new _t(vn.KinematicVelocityBased)}static newStatic(){return new _t(vn.Fixed)}setDominanceGroup(e){return this.dominanceGroup=e,this}setAdditionalSolverIterations(e){return this.additionalSolverIterations=e,this}setEnabled(e){return this.enabled=e,this}setTranslation(e,t,n){if(typeof e!="number"||typeof t!="number"||typeof n!="number")throw TypeError("The translation components must be numbers.");return this.translation={x:e,y:t,z:n},this}setRotation(e){return ae.copy(this.rotation,e),this}setGravityScale(e){return this.gravityScale=e,this}setAdditionalMass(e){return this.mass=e,this.massOnly=!0,this}setLinvel(e,t,n){if(typeof e!="number"||typeof t!="number"||typeof n!="number")throw TypeError("The linvel components must be numbers.");return this.linvel={x:e,y:t,z:n},this}setAngvel(e){return Y.copy(this.angvel,e),this}setAdditionalMassProperties(e,t,n,s){return this.mass=e,Y.copy(this.centerOfMass,t),Y.copy(this.principalAngularInertia,n),ae.copy(this.angularInertiaLocalFrame,s),this.massOnly=!1,this}enabledTranslations(e,t,n){return this.translationsEnabledX=e,this.translationsEnabledY=t,this.translationsEnabledZ=n,this}restrictTranslations(e,t,n){return this.enabledTranslations(e,t,n)}lockTranslations(){return this.enabledTranslations(!1,!1,!1)}enabledRotations(e,t,n){return this.rotationsEnabledX=e,this.rotationsEnabledY=t,this.rotationsEnabledZ=n,this}restrictRotations(e,t,n){return this.enabledRotations(e,t,n)}lockRotations(){return this.restrictRotations(!1,!1,!1)}setLinearDamping(e){return this.linearDamping=e,this}setAngularDamping(e){return this.angularDamping=e,this}setCanSleep(e){return this.canSleep=e,this}setSleeping(e){return this.sleeping=e,this}setCcdEnabled(e){return this.ccdEnabled=e,this}setSoftCcdPrediction(e){return this.softCcdPrediction=e,this}setUserData(e){return this.userData=e,this}}class O2{constructor(){this.fconv=new Float64Array(1),this.uconv=new Uint32Array(this.fconv.buffer),this.data=new Array,this.size=0}set(e,t){let n=this.index(e);for(;this.data.length<=n;)this.data.push(null);this.data[n]==null&&(this.size+=1),this.data[n]=t}len(){return this.size}delete(e){let t=this.index(e);t<this.data.length&&(this.data[t]!=null&&(this.size-=1),this.data[t]=null)}clear(){this.data=new Array}get(e){let t=this.index(e);return t<this.data.length?this.data[t]:null}forEach(e){for(const t of this.data)t!=null&&e(t)}getAll(){return this.data.filter(e=>e!=null)}index(e){return this.fconv[0]=e,this.uconv[0]}}class iN{free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}constructor(e){this.raw=e||new qe,this.map=new O2,e&&e.forEachRigidBodyHandle(t=>{this.map.set(t,new w5(e,null,t))})}finalizeDeserialization(e){this.map.forEach(t=>t.finalizeDeserialization(e))}createRigidBody(e,t){let n=Y.intoRaw(t.translation),s=ae.intoRaw(t.rotation),r=Y.intoRaw(t.linvel),a=Y.intoRaw(t.centerOfMass),o=Y.intoRaw(t.angvel),l=Y.intoRaw(t.principalAngularInertia),d=ae.intoRaw(t.angularInertiaLocalFrame),c=this.raw.createRigidBody(t.enabled,n,s,t.gravityScale,t.mass,t.massOnly,a,r,o,l,d,t.translationsEnabledX,t.translationsEnabledY,t.translationsEnabledZ,t.rotationsEnabledX,t.rotationsEnabledY,t.rotationsEnabledZ,t.linearDamping,t.angularDamping,t.status,t.canSleep,t.sleeping,t.softCcdPrediction,t.ccdEnabled,t.dominanceGroup,t.additionalSolverIterations);n.free(),s.free(),r.free(),a.free(),o.free(),l.free(),d.free();const u=new w5(this.raw,e,c);return u.userData=t.userData,this.map.set(c,u),u}remove(e,t,n,s,r){for(let a=0;a<this.raw.rbNumColliders(e);a+=1)n.unmap(this.raw.rbCollider(e,a));s.forEachJointHandleAttachedToRigidBody(e,a=>s.unmap(a)),r.forEachJointHandleAttachedToRigidBody(e,a=>r.unmap(a)),this.raw.remove(e,t.raw,n.raw,s.raw,r.raw),this.map.delete(e)}len(){return this.map.len()}contains(e){return this.get(e)!=null}get(e){return this.map.get(e)}forEach(e){this.map.forEach(e)}forEachActiveRigidBody(e,t){e.forEachActiveRigidBodyHandle(n=>{t(this.get(n))})}getAll(){return this.map.getAll()}}class sN{constructor(e){this.raw=e||new zi}free(){this.raw&&this.raw.free(),this.raw=void 0}get dt(){return this.raw.dt}get contact_erp(){return this.raw.contact_erp}get lengthUnit(){return this.raw.lengthUnit}get normalizedAllowedLinearError(){return this.raw.normalizedAllowedLinearError}get normalizedPredictionDistance(){return this.raw.normalizedPredictionDistance}get numSolverIterations(){return this.raw.numSolverIterations}get numAdditionalFrictionIterations(){return this.raw.numAdditionalFrictionIterations}get numInternalPgsIterations(){return this.raw.numInternalPgsIterations}get minIslandSize(){return this.raw.minIslandSize}get maxCcdSubsteps(){return this.raw.maxCcdSubsteps}set dt(e){this.raw.dt=e}set contact_natural_frequency(e){this.raw.contact_natural_frequency=e}set lengthUnit(e){this.raw.lengthUnit=e}set normalizedAllowedLinearError(e){this.raw.normalizedAllowedLinearError=e}set normalizedPredictionDistance(e){this.raw.normalizedPredictionDistance=e}set numSolverIterations(e){this.raw.numSolverIterations=e}set numAdditionalFrictionIterations(e){this.raw.numAdditionalFrictionIterations=e}set numInternalPgsIterations(e){this.raw.numInternalPgsIterations=e}set minIslandSize(e){this.raw.minIslandSize=e}set maxCcdSubsteps(e){this.raw.maxCcdSubsteps=e}switchToStandardPgsSolver(){this.raw.switchToStandardPgsSolver()}switchToSmallStepsPgsSolver(){this.raw.switchToSmallStepsPgsSolver()}switchToSmallStepsPgsSolverWithoutWarmstart(){this.raw.switchToSmallStepsPgsSolverWithoutWarmstart()}}var Ht;(function(i){i[i.Revolute=0]="Revolute",i[i.Fixed=1]="Fixed",i[i.Prismatic=2]="Prismatic",i[i.Rope=3]="Rope",i[i.Spring=4]="Spring",i[i.Spherical=5]="Spherical",i[i.Generic=6]="Generic"})(Ht||(Ht={}));var T5;(function(i){i[i.AccelerationBased=0]="AccelerationBased",i[i.ForceBased=1]="ForceBased"})(T5||(T5={}));var x5;(function(i){i[i.LinX=1]="LinX",i[i.LinY=2]="LinY",i[i.LinZ=4]="LinZ",i[i.AngX=8]="AngX",i[i.AngY=16]="AngY",i[i.AngZ=32]="AngZ"})(x5||(x5={}));class Pn{constructor(e,t,n){this.rawSet=e,this.bodySet=t,this.handle=n}static newTyped(e,t,n){switch(e.jointType(n)){case dn.Revolute:return new dN(e,t,n);case dn.Prismatic:return new lN(e,t,n);case dn.Fixed:return new rN(e,t,n);case dn.Spring:return new oN(e,t,n);case dn.Rope:return new aN(e,t,n);case dn.Spherical:return new uN(e,t,n);case dn.Generic:return new cN(e,t,n);default:return new Pn(e,t,n)}}finalizeDeserialization(e){this.bodySet=e}isValid(){return this.rawSet.contains(this.handle)}body1(){return this.bodySet.get(this.rawSet.jointBodyHandle1(this.handle))}body2(){return this.bodySet.get(this.rawSet.jointBodyHandle2(this.handle))}type(){return this.rawSet.jointType(this.handle)}frameX1(){return ae.fromRaw(this.rawSet.jointFrameX1(this.handle))}frameX2(){return ae.fromRaw(this.rawSet.jointFrameX2(this.handle))}anchor1(){return Y.fromRaw(this.rawSet.jointAnchor1(this.handle))}anchor2(){return Y.fromRaw(this.rawSet.jointAnchor2(this.handle))}setAnchor1(e){const t=Y.intoRaw(e);this.rawSet.jointSetAnchor1(this.handle,t),t.free()}setAnchor2(e){const t=Y.intoRaw(e);this.rawSet.jointSetAnchor2(this.handle,t),t.free()}setContactsEnabled(e){this.rawSet.jointSetContactsEnabled(this.handle,e)}contactsEnabled(){return this.rawSet.jointContactsEnabled(this.handle)}}class f8 extends Pn{limitsEnabled(){return this.rawSet.jointLimitsEnabled(this.handle,this.rawAxis())}limitsMin(){return this.rawSet.jointLimitsMin(this.handle,this.rawAxis())}limitsMax(){return this.rawSet.jointLimitsMax(this.handle,this.rawAxis())}setLimits(e,t){this.rawSet.jointSetLimits(this.handle,this.rawAxis(),e,t)}configureMotorModel(e){this.rawSet.jointConfigureMotorModel(this.handle,this.rawAxis(),e)}configureMotorVelocity(e,t){this.rawSet.jointConfigureMotorVelocity(this.handle,this.rawAxis(),e,t)}configureMotorPosition(e,t,n){this.rawSet.jointConfigureMotorPosition(this.handle,this.rawAxis(),e,t,n)}configureMotor(e,t,n,s){this.rawSet.jointConfigureMotor(this.handle,this.rawAxis(),e,t,n,s)}}class rN extends Pn{}class aN extends Pn{}class oN extends Pn{}class lN extends f8{rawAxis(){return H2.LinX}}class dN extends f8{rawAxis(){return H2.AngX}}class cN extends Pn{}class uN extends Pn{}class cn{constructor(){}static fixed(e,t,n,s){let r=new cn;return r.anchor1=e,r.anchor2=n,r.frame1=t,r.frame2=s,r.jointType=Ht.Fixed,r}static spring(e,t,n,s,r){let a=new cn;return a.anchor1=s,a.anchor2=r,a.length=e,a.stiffness=t,a.damping=n,a.jointType=Ht.Spring,a}static rope(e,t,n){let s=new cn;return s.anchor1=t,s.anchor2=n,s.length=e,s.jointType=Ht.Rope,s}static generic(e,t,n,s){let r=new cn;return r.anchor1=e,r.anchor2=t,r.axis=n,r.axesMask=s,r.jointType=Ht.Generic,r}static spherical(e,t){let n=new cn;return n.anchor1=e,n.anchor2=t,n.jointType=Ht.Spherical,n}static prismatic(e,t,n){let s=new cn;return s.anchor1=e,s.anchor2=t,s.axis=n,s.jointType=Ht.Prismatic,s}static revolute(e,t,n){let s=new cn;return s.anchor1=e,s.anchor2=t,s.axis=n,s.jointType=Ht.Revolute,s}intoRaw(){let e=Y.intoRaw(this.anchor1),t=Y.intoRaw(this.anchor2),n,s,r=!1,a=0,o=0;switch(this.jointType){case Ht.Fixed:let l=ae.intoRaw(this.frame1),d=ae.intoRaw(this.frame2);s=yt.fixed(e,l,t,d),l.free(),d.free();break;case Ht.Spring:s=yt.spring(this.length,this.stiffness,this.damping,e,t);break;case Ht.Rope:s=yt.rope(this.length,e,t);break;case Ht.Prismatic:n=Y.intoRaw(this.axis),this.limitsEnabled&&(r=!0,a=this.limits[0],o=this.limits[1]),s=yt.prismatic(e,t,n,r,a,o),n.free();break;case Ht.Generic:n=Y.intoRaw(this.axis);let c=this.axesMask;s=yt.generic(e,t,n,c);break;case Ht.Spherical:s=yt.spherical(e,t);break;case Ht.Revolute:n=Y.intoRaw(this.axis),s=yt.revolute(e,t,n),n.free();break}return e.free(),t.free(),s}}class pN{free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}constructor(e){this.raw=e||new Yn,this.map=new O2,e&&e.forEachJointHandle(t=>{this.map.set(t,Pn.newTyped(e,null,t))})}finalizeDeserialization(e){this.map.forEach(t=>t.finalizeDeserialization(e))}createJoint(e,t,n,s,r){const a=t.intoRaw(),o=this.raw.createJoint(a,n,s,r);a.free();let l=Pn.newTyped(this.raw,e,o);return this.map.set(o,l),l}remove(e,t){this.raw.remove(e,t),this.unmap(e)}forEachJointHandleAttachedToRigidBody(e,t){this.raw.forEachJointAttachedToRigidBody(e,t)}unmap(e){this.map.delete(e)}len(){return this.map.len()}contains(e){return this.get(e)!=null}get(e){return this.map.get(e)}forEach(e){this.map.forEach(e)}getAll(){return this.map.getAll()}}class Ii{constructor(e,t){this.rawSet=e,this.handle=t}static newTyped(e,t){switch(e.jointType(t)){case dn.Revolute:return new mN(e,t);case dn.Prismatic:return new hN(e,t);case dn.Fixed:return new fN(e,t);case dn.Spherical:return new yN(e,t);default:return new Ii(e,t)}}isValid(){return this.rawSet.contains(this.handle)}setContactsEnabled(e){this.rawSet.jointSetContactsEnabled(this.handle,e)}contactsEnabled(){return this.rawSet.jointContactsEnabled(this.handle)}}class h8 extends Ii{}class fN extends Ii{}class hN extends h8{rawAxis(){return H2.LinX}}class mN extends h8{rawAxis(){return H2.AngX}}class yN extends Ii{}class bN{free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}constructor(e){this.raw=e||new Jn,this.map=new O2,e&&e.forEachJointHandle(t=>{this.map.set(t,Ii.newTyped(this.raw,t))})}createJoint(e,t,n,s){const r=e.intoRaw(),a=this.raw.createJoint(r,t,n,s);r.free();let o=Ii.newTyped(this.raw,a);return this.map.set(a,o),o}remove(e,t){this.raw.remove(e,t),this.map.delete(e)}unmap(e){this.map.delete(e)}len(){return this.map.len()}contains(e){return this.get(e)!=null}get(e){return this.map.get(e)}forEach(e){this.map.forEach(e)}forEachJointHandleAttachedToRigidBody(e,t){this.raw.forEachJointAttachedToRigidBody(e,t)}getAll(){return this.map.getAll()}}var Br;(function(i){i[i.Average=0]="Average",i[i.Min=1]="Min",i[i.Multiply=2]="Multiply",i[i.Max=3]="Max"})(Br||(Br={}));class vN{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new to}}class gN{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new kn}forEachActiveRigidBodyHandle(e){this.raw.forEachActiveRigidBodyHandle(e)}}class wN{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new Oi}}class TN{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new hi,this.tempManifold=new xN(null)}contactPairsWith(e,t){this.raw.contact_pairs_with(e,t)}intersectionPairsWith(e,t){this.raw.intersection_pairs_with(e,t)}contactPair(e,t,n){const s=this.raw.contact_pair(e,t);if(s){const r=s.collider1()!=e;let a;for(a=0;a<s.numContactManifolds();++a)this.tempManifold.raw=s.contactManifold(a),this.tempManifold.raw&&n(this.tempManifold,r),this.tempManifold.free();s.free()}}intersectionPair(e,t){return this.raw.intersection_pair(e,t)}}class xN{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e}normal(){return Y.fromRaw(this.raw.normal())}localNormal1(){return Y.fromRaw(this.raw.local_n1())}localNormal2(){return Y.fromRaw(this.raw.local_n2())}subshape1(){return this.raw.subshape1()}subshape2(){return this.raw.subshape2()}numContacts(){return this.raw.num_contacts()}localContactPoint1(e){return Y.fromRaw(this.raw.contact_local_p1(e))}localContactPoint2(e){return Y.fromRaw(this.raw.contact_local_p2(e))}contactDist(e){return this.raw.contact_dist(e)}contactFid1(e){return this.raw.contact_fid1(e)}contactFid2(e){return this.raw.contact_fid2(e)}contactImpulse(e){return this.raw.contact_impulse(e)}contactTangentImpulseX(e){return this.raw.contact_tangent_impulse_x(e)}contactTangentImpulseY(e){return this.raw.contact_tangent_impulse_y(e)}numSolverContacts(){return this.raw.num_solver_contacts()}solverContactPoint(e){return Y.fromRaw(this.raw.solver_contact_point(e))}solverContactDist(e){return this.raw.solver_contact_dist(e)}solverContactFriction(e){return this.raw.solver_contact_friction(e)}solverContactRestitution(e){return this.raw.solver_contact_restitution(e)}solverContactTangentVelocity(e){return Y.fromRaw(this.raw.solver_contact_tangent_velocity(e))}}class ws{constructor(e,t,n,s,r){this.distance=e,this.point1=t,this.point2=n,this.normal1=s,this.normal2=r}static fromRaw(e){if(!e)return null;const t=new ws(e.distance(),Y.fromRaw(e.point1()),Y.fromRaw(e.point2()),Y.fromRaw(e.normal1()),Y.fromRaw(e.normal2()));return e.free(),t}}var Ts;(function(i){i[i.Vertex=0]="Vertex",i[i.Edge=1]="Edge",i[i.Face=2]="Face",i[i.Unknown=3]="Unknown"})(Ts||(Ts={}));class z2{constructor(e,t){this.point=e,this.isInside=t}static fromRaw(e){if(!e)return null;const t=new z2(Y.fromRaw(e.point()),e.isInside());return e.free(),t}}class Qr{constructor(e,t,n,s,r){this.featureType=Ts.Unknown,this.featureId=void 0,this.collider=e,this.point=t,this.isInside=n,r!==void 0&&(this.featureId=r),s!==void 0&&(this.featureType=s)}static fromRaw(e,t){if(!t)return null;const n=new Qr(e.get(t.colliderHandle()),Y.fromRaw(t.point()),t.isInside(),t.featureType(),t.featureId());return t.free(),n}}class I2{constructor(e,t,n,s){this.featureType=Ts.Unknown,this.featureId=void 0,this.timeOfImpact=e,this.normal=t,s!==void 0&&(this.featureId=s),n!==void 0&&(this.featureType=n)}static fromRaw(e){if(!e)return null;const t=new I2(e.time_of_impact(),Y.fromRaw(e.normal()),e.featureType(),e.featureId());return e.free(),t}}class _r{constructor(e,t,n,s,r){this.featureType=Ts.Unknown,this.featureId=void 0,this.collider=e,this.timeOfImpact=t,this.normal=n,r!==void 0&&(this.featureId=r),s!==void 0&&(this.featureType=s)}static fromRaw(e,t){if(!t)return null;const n=new _r(e.get(t.colliderHandle()),t.time_of_impact(),Y.fromRaw(t.normal()),t.featureType(),t.featureId());return t.free(),n}}class f7{constructor(e,t){this.collider=e,this.timeOfImpact=t}static fromRaw(e,t){if(!t)return null;const n=new f7(e.get(t.colliderHandle()),t.timeOfImpact());return t.free(),n}}class Ls{constructor(e,t,n,s,r){this.time_of_impact=e,this.witness1=t,this.witness2=n,this.normal1=s,this.normal2=r}static fromRaw(e,t){if(!t)return null;const n=new Ls(t.time_of_impact(),Y.fromRaw(t.witness1()),Y.fromRaw(t.witness2()),Y.fromRaw(t.normal1()),Y.fromRaw(t.normal2()));return t.free(),n}}class X2 extends Ls{constructor(e,t,n,s,r,a){super(t,n,s,r,a),this.collider=e}static fromRaw(e,t){if(!t)return null;const n=new X2(e.get(t.colliderHandle()),t.time_of_impact(),Y.fromRaw(t.witness1()),Y.fromRaw(t.witness2()),Y.fromRaw(t.normal1()),Y.fromRaw(t.normal2()));return t.free(),n}}class lt{static fromRaw(e,t){const n=e.coShapeType(t);let s,r,a,o,l,d,c;switch(n){case pt.Ball:return new m8(e.coRadius(t));case pt.Cuboid:return s=e.coHalfExtents(t),new y8(s.x,s.y,s.z);case pt.RoundCuboid:return s=e.coHalfExtents(t),r=e.coRoundRadius(t),new b8(s.x,s.y,s.z,r);case pt.Capsule:return l=e.coHalfHeight(t),d=e.coRadius(t),new v8(l,d);case pt.Segment:return a=e.coVertices(t),new g8(Y.new(a[0],a[1],a[2]),Y.new(a[3],a[4],a[5]));case pt.Polyline:return a=e.coVertices(t),o=e.coIndices(t),new x8(a,o);case pt.Triangle:return a=e.coVertices(t),new w8(Y.new(a[0],a[1],a[2]),Y.new(a[3],a[4],a[5]),Y.new(a[6],a[7],a[8]));case pt.RoundTriangle:return a=e.coVertices(t),r=e.coRoundRadius(t),new T8(Y.new(a[0],a[1],a[2]),Y.new(a[3],a[4],a[5]),Y.new(a[6],a[7],a[8]),r);case pt.HalfSpace:return c=Y.fromRaw(e.coHalfspaceNormal(t)),new SN(c);case pt.Voxels:const u=e.coVoxelData(t),p=e.coVoxelSize(t);return new S8(u,p);case pt.TriMesh:a=e.coVertices(t),o=e.coIndices(t);const h=e.coTriMeshFlags(t);return new P8(a,o,h);case pt.HeightField:const b=e.coHeightfieldScale(t),T=e.coHeightfieldHeights(t),m=e.coHeightfieldNRows(t),f=e.coHeightfieldNCols(t),N=e.coHeightFieldFlags(t);return new H8(m,f,T,b,N);case pt.ConvexPolyhedron:return a=e.coVertices(t),o=e.coIndices(t),new no(a,o);case pt.RoundConvexPolyhedron:return a=e.coVertices(t),o=e.coIndices(t),r=e.coRoundRadius(t),new io(a,o,r);case pt.Cylinder:return l=e.coHalfHeight(t),d=e.coRadius(t),new R8(l,d);case pt.RoundCylinder:return l=e.coHalfHeight(t),d=e.coRadius(t),r=e.coRoundRadius(t),new N8(l,d,r);case pt.Cone:return l=e.coHalfHeight(t),d=e.coRadius(t),new L8(l,d);case pt.RoundCone:return l=e.coHalfHeight(t),d=e.coRadius(t),r=e.coRoundRadius(t),new M8(l,d,r);default:throw new Error("unknown shape type: "+n)}}castShape(e,t,n,s,r,a,o,l,d,c){let u=Y.intoRaw(e),p=ae.intoRaw(t),h=Y.intoRaw(n),b=Y.intoRaw(r),T=ae.intoRaw(a),m=Y.intoRaw(o),f=this.intoRaw(),N=s.intoRaw(),M=Ls.fromRaw(null,f.castShape(u,p,h,N,b,T,m,l,d,c));return u.free(),p.free(),h.free(),b.free(),T.free(),m.free(),f.free(),N.free(),M}intersectsShape(e,t,n,s,r){let a=Y.intoRaw(e),o=ae.intoRaw(t),l=Y.intoRaw(s),d=ae.intoRaw(r),c=this.intoRaw(),u=n.intoRaw(),p=c.intersectsShape(a,o,u,l,d);return a.free(),o.free(),l.free(),d.free(),c.free(),u.free(),p}contactShape(e,t,n,s,r,a){let o=Y.intoRaw(e),l=ae.intoRaw(t),d=Y.intoRaw(s),c=ae.intoRaw(r),u=this.intoRaw(),p=n.intoRaw(),h=ws.fromRaw(u.contactShape(o,l,p,d,c,a));return o.free(),l.free(),d.free(),c.free(),u.free(),p.free(),h}containsPoint(e,t,n){let s=Y.intoRaw(e),r=ae.intoRaw(t),a=Y.intoRaw(n),o=this.intoRaw(),l=o.containsPoint(s,r,a);return s.free(),r.free(),a.free(),o.free(),l}projectPoint(e,t,n,s){let r=Y.intoRaw(e),a=ae.intoRaw(t),o=Y.intoRaw(n),l=this.intoRaw(),d=z2.fromRaw(l.projectPoint(r,a,o,s));return r.free(),a.free(),o.free(),l.free(),d}intersectsRay(e,t,n,s){let r=Y.intoRaw(t),a=ae.intoRaw(n),o=Y.intoRaw(e.origin),l=Y.intoRaw(e.dir),d=this.intoRaw(),c=d.intersectsRay(r,a,o,l,s);return r.free(),a.free(),o.free(),l.free(),d.free(),c}castRay(e,t,n,s,r){let a=Y.intoRaw(t),o=ae.intoRaw(n),l=Y.intoRaw(e.origin),d=Y.intoRaw(e.dir),c=this.intoRaw(),u=c.castRay(a,o,l,d,s,r);return a.free(),o.free(),l.free(),d.free(),c.free(),u}castRayAndGetNormal(e,t,n,s,r){let a=Y.intoRaw(t),o=ae.intoRaw(n),l=Y.intoRaw(e.origin),d=Y.intoRaw(e.dir),c=this.intoRaw(),u=I2.fromRaw(c.castRayAndGetNormal(a,o,l,d,s,r));return a.free(),o.free(),l.free(),d.free(),c.free(),u}}var et;(function(i){i[i.Ball=0]="Ball",i[i.Cuboid=1]="Cuboid",i[i.Capsule=2]="Capsule",i[i.Segment=3]="Segment",i[i.Polyline=4]="Polyline",i[i.Triangle=5]="Triangle",i[i.TriMesh=6]="TriMesh",i[i.HeightField=7]="HeightField",i[i.ConvexPolyhedron=9]="ConvexPolyhedron",i[i.Cylinder=10]="Cylinder",i[i.Cone=11]="Cone",i[i.RoundCuboid=12]="RoundCuboid",i[i.RoundTriangle=13]="RoundTriangle",i[i.RoundCylinder=14]="RoundCylinder",i[i.RoundCone=15]="RoundCone",i[i.RoundConvexPolyhedron=16]="RoundConvexPolyhedron",i[i.HalfSpace=17]="HalfSpace",i[i.Voxels=18]="Voxels"})(et||(et={}));var S5;(function(i){i[i.FIX_INTERNAL_EDGES=1]="FIX_INTERNAL_EDGES"})(S5||(S5={}));var $r;(function(i){i[i.DELETE_BAD_TOPOLOGY_TRIANGLES=4]="DELETE_BAD_TOPOLOGY_TRIANGLES",i[i.ORIENTED=8]="ORIENTED",i[i.MERGE_DUPLICATE_VERTICES=16]="MERGE_DUPLICATE_VERTICES",i[i.DELETE_DEGENERATE_TRIANGLES=32]="DELETE_DEGENERATE_TRIANGLES",i[i.DELETE_DUPLICATE_TRIANGLES=64]="DELETE_DUPLICATE_TRIANGLES",i[i.FIX_INTERNAL_EDGES=144]="FIX_INTERNAL_EDGES"})($r||($r={}));class m8 extends lt{constructor(e){super(),this.type=et.Ball,this.radius=e}intoRaw(){return U0.ball(this.radius)}}class SN extends lt{constructor(e){super(),this.type=et.HalfSpace,this.normal=e}intoRaw(){let e=Y.intoRaw(this.normal),t=U0.halfspace(e);return e.free(),t}}class y8 extends lt{constructor(e,t,n){super(),this.type=et.Cuboid,this.halfExtents=Y.new(e,t,n)}intoRaw(){return U0.cuboid(this.halfExtents.x,this.halfExtents.y,this.halfExtents.z)}}class b8 extends lt{constructor(e,t,n,s){super(),this.type=et.RoundCuboid,this.halfExtents=Y.new(e,t,n),this.borderRadius=s}intoRaw(){return U0.roundCuboid(this.halfExtents.x,this.halfExtents.y,this.halfExtents.z,this.borderRadius)}}class v8 extends lt{constructor(e,t){super(),this.type=et.Capsule,this.halfHeight=e,this.radius=t}intoRaw(){return U0.capsule(this.halfHeight,this.radius)}}class g8 extends lt{constructor(e,t){super(),this.type=et.Segment,this.a=e,this.b=t}intoRaw(){let e=Y.intoRaw(this.a),t=Y.intoRaw(this.b),n=U0.segment(e,t);return e.free(),t.free(),n}}class w8 extends lt{constructor(e,t,n){super(),this.type=et.Triangle,this.a=e,this.b=t,this.c=n}intoRaw(){let e=Y.intoRaw(this.a),t=Y.intoRaw(this.b),n=Y.intoRaw(this.c),s=U0.triangle(e,t,n);return e.free(),t.free(),n.free(),s}}class T8 extends lt{constructor(e,t,n,s){super(),this.type=et.RoundTriangle,this.a=e,this.b=t,this.c=n,this.borderRadius=s}intoRaw(){let e=Y.intoRaw(this.a),t=Y.intoRaw(this.b),n=Y.intoRaw(this.c),s=U0.roundTriangle(e,t,n,this.borderRadius);return e.free(),t.free(),n.free(),s}}class x8 extends lt{constructor(e,t){super(),this.type=et.Polyline,this.vertices=e,this.indices=t??new Uint32Array(0)}intoRaw(){return U0.polyline(this.vertices,this.indices)}}class S8 extends lt{constructor(e,t){super(),this.type=et.Voxels,this.data=e,this.voxelSize=t}intoRaw(){let e=Y.intoRaw(this.voxelSize),t;return this.data instanceof Int32Array?t=U0.voxels(e,this.data):t=U0.voxelsFromPoints(e,this.data),e.free(),t}}class P8 extends lt{constructor(e,t,n){super(),this.type=et.TriMesh,this.vertices=e,this.indices=t,this.flags=n}intoRaw(){return U0.trimesh(this.vertices,this.indices,this.flags)}}class no extends lt{constructor(e,t){super(),this.type=et.ConvexPolyhedron,this.vertices=e,this.indices=t}intoRaw(){return this.indices?U0.convexMesh(this.vertices,this.indices):U0.convexHull(this.vertices)}}class io extends lt{constructor(e,t,n){super(),this.type=et.RoundConvexPolyhedron,this.vertices=e,this.indices=t,this.borderRadius=n}intoRaw(){return this.indices?U0.roundConvexMesh(this.vertices,this.indices,this.borderRadius):U0.roundConvexHull(this.vertices,this.borderRadius)}}class H8 extends lt{constructor(e,t,n,s,r){super(),this.type=et.HeightField,this.nrows=e,this.ncols=t,this.heights=n,this.scale=s,this.flags=r}intoRaw(){let e=Y.intoRaw(this.scale),t=U0.heightfield(this.nrows,this.ncols,this.heights,e,this.flags);return e.free(),t}}class R8 extends lt{constructor(e,t){super(),this.type=et.Cylinder,this.halfHeight=e,this.radius=t}intoRaw(){return U0.cylinder(this.halfHeight,this.radius)}}class N8 extends lt{constructor(e,t,n){super(),this.type=et.RoundCylinder,this.borderRadius=n,this.halfHeight=e,this.radius=t}intoRaw(){return U0.roundCylinder(this.halfHeight,this.radius,this.borderRadius)}}class L8 extends lt{constructor(e,t){super(),this.type=et.Cone,this.halfHeight=e,this.radius=t}intoRaw(){return U0.cone(this.halfHeight,this.radius)}}class M8 extends lt{constructor(e,t,n){super(),this.type=et.RoundCone,this.halfHeight=e,this.radius=t,this.borderRadius=n}intoRaw(){return U0.roundCone(this.halfHeight,this.radius,this.borderRadius)}}class PN{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new qy}step(e,t,n,s,r,a,o,l,d,c,u,p){let h=Y.intoRaw(e);u?this.raw.stepWithEvents(h,t.raw,n.raw,s.raw,r.raw,a.raw,o.raw,l.raw,d.raw,c.raw,u.raw,p,p?p.filterContactPair:null,p?p.filterIntersectionPair:null):this.raw.step(h,t.raw,n.raw,s.raw,r.raw,a.raw,o.raw,l.raw,d.raw,c.raw),h.free()}}var P5;(function(i){i[i.EXCLUDE_FIXED=1]="EXCLUDE_FIXED",i[i.EXCLUDE_KINEMATIC=2]="EXCLUDE_KINEMATIC",i[i.EXCLUDE_DYNAMIC=4]="EXCLUDE_DYNAMIC",i[i.EXCLUDE_SENSORS=8]="EXCLUDE_SENSORS",i[i.EXCLUDE_SOLIDS=16]="EXCLUDE_SOLIDS",i[i.ONLY_DYNAMIC=3]="ONLY_DYNAMIC",i[i.ONLY_KINEMATIC=5]="ONLY_KINEMATIC",i[i.ONLY_FIXED=6]="ONLY_FIXED"})(P5||(P5={}));class HN{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new u7}update(e){this.raw.update(e.raw)}castRay(e,t,n,s,r,a,o,l,d,c){let u=Y.intoRaw(n.origin),p=Y.intoRaw(n.dir),h=f7.fromRaw(t,this.raw.castRay(e.raw,t.raw,u,p,s,r,a,o,l,d,c));return u.free(),p.free(),h}castRayAndGetNormal(e,t,n,s,r,a,o,l,d,c){let u=Y.intoRaw(n.origin),p=Y.intoRaw(n.dir),h=_r.fromRaw(t,this.raw.castRayAndGetNormal(e.raw,t.raw,u,p,s,r,a,o,l,d,c));return u.free(),p.free(),h}intersectionsWithRay(e,t,n,s,r,a,o,l,d,c,u){let p=Y.intoRaw(n.origin),h=Y.intoRaw(n.dir),b=T=>a(_r.fromRaw(t,T));this.raw.intersectionsWithRay(e.raw,t.raw,p,h,s,r,b,o,l,d,c,u),p.free(),h.free()}intersectionWithShape(e,t,n,s,r,a,o,l,d,c){let u=Y.intoRaw(n),p=ae.intoRaw(s),h=r.intoRaw(),b=this.raw.intersectionWithShape(e.raw,t.raw,u,p,h,a,o,l,d,c);return u.free(),p.free(),h.free(),b}projectPoint(e,t,n,s,r,a,o,l,d){let c=Y.intoRaw(n),u=Qr.fromRaw(t,this.raw.projectPoint(e.raw,t.raw,c,s,r,a,o,l,d));return c.free(),u}projectPointAndGetFeature(e,t,n,s,r,a,o,l){let d=Y.intoRaw(n),c=Qr.fromRaw(t,this.raw.projectPointAndGetFeature(e.raw,t.raw,d,s,r,a,o,l));return d.free(),c}intersectionsWithPoint(e,t,n,s,r,a,o,l,d){let c=Y.intoRaw(n);this.raw.intersectionsWithPoint(e.raw,t.raw,c,s,r,a,o,l,d),c.free()}castShape(e,t,n,s,r,a,o,l,d,c,u,p,h,b){let T=Y.intoRaw(n),m=ae.intoRaw(s),f=Y.intoRaw(r),N=a.intoRaw(),M=X2.fromRaw(t,this.raw.castShape(e.raw,t.raw,T,m,f,N,o,l,d,c,u,p,h,b));return T.free(),m.free(),f.free(),N.free(),M}intersectionsWithShape(e,t,n,s,r,a,o,l,d,c,u){let p=Y.intoRaw(n),h=ae.intoRaw(s),b=r.intoRaw();this.raw.intersectionsWithShape(e.raw,t.raw,p,h,b,a,o,l,d,c,u),p.free(),h.free(),b.free()}collidersWithAabbIntersectingAabb(e,t,n){let s=Y.intoRaw(e),r=Y.intoRaw(t);this.raw.collidersWithAabbIntersectingAabb(s,r,n),s.free(),r.free()}}class H5{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new Zy}serializeAll(e,t,n,s,r,a,o,l,d){let c=Y.intoRaw(e);const u=this.raw.serializeAll(c,t.raw,n.raw,s.raw,r.raw,a.raw,o.raw,l.raw,d.raw);return c.free(),u}deserializeAll(e){return xs.fromRaw(this.raw.deserializeAll(e))}}class RN{constructor(e,t){this.vertices=e,this.colors=t}}class NN{free(){this.raw&&this.raw.free(),this.raw=void 0,this.vertices=void 0,this.colors=void 0}constructor(e){this.raw=e||new Dy}render(e,t,n,s,r,a,o){this.raw.render(e.raw,t.raw,n.raw,s.raw,r.raw,a,t.castClosure(o)),this.vertices=this.raw.vertices(),this.colors=this.raw.colors()}}class LN{}class MN{constructor(e,t,n,s,r){this.params=t,this.bodies=n,this.colliders=s,this.queries=r,this.raw=new Uy(e),this.rawCharacterCollision=new p8,this._applyImpulsesToDynamicBodies=!1,this._characterMass=null}free(){this.raw&&(this.raw.free(),this.rawCharacterCollision.free()),this.raw=void 0,this.rawCharacterCollision=void 0}up(){return this.raw.up()}setUp(e){let t=Y.intoRaw(e);return this.raw.setUp(t)}applyImpulsesToDynamicBodies(){return this._applyImpulsesToDynamicBodies}setApplyImpulsesToDynamicBodies(e){this._applyImpulsesToDynamicBodies=e}characterMass(){return this._characterMass}setCharacterMass(e){this._characterMass=e}offset(){return this.raw.offset()}setOffset(e){this.raw.setOffset(e)}normalNudgeFactor(){return this.raw.normalNudgeFactor()}setNormalNudgeFactor(e){this.raw.setNormalNudgeFactor(e)}slideEnabled(){return this.raw.slideEnabled()}setSlideEnabled(e){this.raw.setSlideEnabled(e)}autostepMaxHeight(){return this.raw.autostepMaxHeight()}autostepMinWidth(){return this.raw.autostepMinWidth()}autostepIncludesDynamicBodies(){return this.raw.autostepIncludesDynamicBodies()}autostepEnabled(){return this.raw.autostepEnabled()}enableAutostep(e,t,n){this.raw.enableAutostep(e,t,n)}disableAutostep(){return this.raw.disableAutostep()}maxSlopeClimbAngle(){return this.raw.maxSlopeClimbAngle()}setMaxSlopeClimbAngle(e){this.raw.setMaxSlopeClimbAngle(e)}minSlopeSlideAngle(){return this.raw.minSlopeSlideAngle()}setMinSlopeSlideAngle(e){this.raw.setMinSlopeSlideAngle(e)}snapToGroundDistance(){return this.raw.snapToGroundDistance()}enableSnapToGround(e){this.raw.enableSnapToGround(e)}disableSnapToGround(){this.raw.disableSnapToGround()}snapToGroundEnabled(){return this.raw.snapToGroundEnabled()}computeColliderMovement(e,t,n,s,r){let a=Y.intoRaw(t);this.raw.computeColliderMovement(this.params.dt,this.bodies.raw,this.colliders.raw,this.queries.raw,e.handle,a,this._applyImpulsesToDynamicBodies,this._characterMass,n,s,this.colliders.castClosure(r)),a.free()}computedMovement(){return Y.fromRaw(this.raw.computedMovement())}computedGrounded(){return this.raw.computedGrounded()}numComputedCollisions(){return this.raw.numComputedCollisions()}computedCollision(e,t){if(this.raw.computedCollision(e,this.rawCharacterCollision)){let n=this.rawCharacterCollision;return t=t??new LN,t.translationDeltaApplied=Y.fromRaw(n.translationDeltaApplied()),t.translationDeltaRemaining=Y.fromRaw(n.translationDeltaRemaining()),t.toi=n.toi(),t.witness1=Y.fromRaw(n.worldWitness1()),t.witness2=Y.fromRaw(n.worldWitness2()),t.normal1=Y.fromRaw(n.worldNormal1()),t.normal2=Y.fromRaw(n.worldNormal2()),t.collider=this.colliders.get(n.handle()),t}else return null}}var R5;(function(i){i[i.None=0]="None",i[i.LinX=1]="LinX",i[i.LinY=2]="LinY",i[i.LinZ=4]="LinZ",i[i.AngX=8]="AngX",i[i.AngY=16]="AngY",i[i.AngZ=32]="AngZ",i[i.AllLin=7]="AllLin",i[i.AllAng=56]="AllAng",i[i.All=63]="All"})(R5||(R5={}));class EN{constructor(e,t,n,s,r,a){this.params=e,this.bodies=t,this.raw=new Gy(n,s,r,a)}free(){this.raw&&this.raw.free(),this.raw=void 0}setKp(e,t){this.raw.set_kp(e,t)}setKi(e,t){this.raw.set_kp(e,t)}setKd(e,t){this.raw.set_kp(e,t)}setAxes(e){this.raw.set_axes_mask(e)}resetIntegrals(){this.raw.reset_integrals()}applyLinearCorrection(e,t,n){let s=Y.intoRaw(t),r=Y.intoRaw(n);this.raw.apply_linear_correction(this.params.dt,this.bodies.raw,e.handle,s,r),s.free(),r.free()}applyAngularCorrection(e,t,n){let s=ae.intoRaw(t),r=Y.intoRaw(n);this.raw.apply_angular_correction(this.params.dt,this.bodies.raw,e.handle,s,r),s.free(),r.free()}linearCorrection(e,t,n){let s=Y.intoRaw(t),r=Y.intoRaw(n),a=this.raw.linear_correction(this.params.dt,this.bodies.raw,e.handle,s,r);return s.free(),r.free(),Y.fromRaw(a)}angularCorrection(e,t,n){let s=ae.intoRaw(t),r=Y.intoRaw(n),a=this.raw.angular_correction(this.params.dt,this.bodies.raw,e.handle,s,r);return s.free(),r.free(),Y.fromRaw(a)}}class ON{constructor(e,t,n,s){this.raw=new jy(e.handle),this.bodies=t,this.colliders=n,this.queries=s,this._chassis=e}free(){this.raw&&this.raw.free(),this.raw=void 0}updateVehicle(e,t,n,s){this.raw.update_vehicle(e,this.bodies.raw,this.colliders.raw,this.queries.raw,t,n,this.colliders.castClosure(s))}currentVehicleSpeed(){return this.raw.current_vehicle_speed()}chassis(){return this._chassis}get indexUpAxis(){return this.raw.index_up_axis()}set indexUpAxis(e){this.raw.set_index_up_axis(e)}get indexForwardAxis(){return this.raw.index_forward_axis()}set setIndexForwardAxis(e){this.raw.set_index_forward_axis(e)}addWheel(e,t,n,s,r){let a=Y.intoRaw(e),o=Y.intoRaw(t),l=Y.intoRaw(n);this.raw.add_wheel(a,o,l,s,r),a.free(),o.free(),l.free()}numWheels(){return this.raw.num_wheels()}wheelChassisConnectionPointCs(e){return Y.fromRaw(this.raw.wheel_chassis_connection_point_cs(e))}setWheelChassisConnectionPointCs(e,t){let n=Y.intoRaw(t);this.raw.set_wheel_chassis_connection_point_cs(e,n),n.free()}wheelSuspensionRestLength(e){return this.raw.wheel_suspension_rest_length(e)}setWheelSuspensionRestLength(e,t){this.raw.set_wheel_suspension_rest_length(e,t)}wheelMaxSuspensionTravel(e){return this.raw.wheel_max_suspension_travel(e)}setWheelMaxSuspensionTravel(e,t){this.raw.set_wheel_max_suspension_travel(e,t)}wheelRadius(e){return this.raw.wheel_radius(e)}setWheelRadius(e,t){this.raw.set_wheel_radius(e,t)}wheelSuspensionStiffness(e){return this.raw.wheel_suspension_stiffness(e)}setWheelSuspensionStiffness(e,t){this.raw.set_wheel_suspension_stiffness(e,t)}wheelSuspensionCompression(e){return this.raw.wheel_suspension_compression(e)}setWheelSuspensionCompression(e,t){this.raw.set_wheel_suspension_compression(e,t)}wheelSuspensionRelaxation(e){return this.raw.wheel_suspension_relaxation(e)}setWheelSuspensionRelaxation(e,t){this.raw.set_wheel_suspension_relaxation(e,t)}wheelMaxSuspensionForce(e){return this.raw.wheel_max_suspension_force(e)}setWheelMaxSuspensionForce(e,t){this.raw.set_wheel_max_suspension_force(e,t)}wheelBrake(e){return this.raw.wheel_brake(e)}setWheelBrake(e,t){this.raw.set_wheel_brake(e,t)}wheelSteering(e){return this.raw.wheel_steering(e)}setWheelSteering(e,t){this.raw.set_wheel_steering(e,t)}wheelEngineForce(e){return this.raw.wheel_engine_force(e)}setWheelEngineForce(e,t){this.raw.set_wheel_engine_force(e,t)}wheelDirectionCs(e){return Y.fromRaw(this.raw.wheel_direction_cs(e))}setWheelDirectionCs(e,t){let n=Y.intoRaw(t);this.raw.set_wheel_direction_cs(e,n),n.free()}wheelAxleCs(e){return Y.fromRaw(this.raw.wheel_axle_cs(e))}setWheelAxleCs(e,t){let n=Y.intoRaw(t);this.raw.set_wheel_axle_cs(e,n),n.free()}wheelFrictionSlip(e){return this.raw.wheel_friction_slip(e)}setWheelFrictionSlip(e,t){this.raw.set_wheel_friction_slip(e,t)}wheelSideFrictionStiffness(e){return this.raw.wheel_side_friction_stiffness(e)}setWheelSideFrictionStiffness(e,t){this.raw.set_wheel_side_friction_stiffness(e,t)}wheelRotation(e){return this.raw.wheel_rotation(e)}wheelForwardImpulse(e){return this.raw.wheel_forward_impulse(e)}wheelSideImpulse(e){return this.raw.wheel_side_impulse(e)}wheelSuspensionForce(e){return this.raw.wheel_suspension_force(e)}wheelContactNormal(e){return Y.fromRaw(this.raw.wheel_contact_normal_ws(e))}wheelContactPoint(e){return Y.fromRaw(this.raw.wheel_contact_point_ws(e))}wheelSuspensionLength(e){return this.raw.wheel_suspension_length(e)}wheelHardPoint(e){return Y.fromRaw(this.raw.wheel_hard_point_ws(e))}wheelIsInContact(e){return this.raw.wheel_is_in_contact(e)}wheelGroundObject(e){return this.colliders.get(this.raw.wheel_ground_object(e))}}class xs{free(){this.integrationParameters.free(),this.islands.free(),this.broadPhase.free(),this.narrowPhase.free(),this.bodies.free(),this.colliders.free(),this.impulseJoints.free(),this.multibodyJoints.free(),this.ccdSolver.free(),this.queryPipeline.free(),this.physicsPipeline.free(),this.serializationPipeline.free(),this.debugRenderPipeline.free(),this.characterControllers.forEach(e=>e.free()),this.pidControllers.forEach(e=>e.free()),this.vehicleControllers.forEach(e=>e.free()),this.integrationParameters=void 0,this.islands=void 0,this.broadPhase=void 0,this.narrowPhase=void 0,this.bodies=void 0,this.colliders=void 0,this.ccdSolver=void 0,this.impulseJoints=void 0,this.multibodyJoints=void 0,this.queryPipeline=void 0,this.physicsPipeline=void 0,this.serializationPipeline=void 0,this.debugRenderPipeline=void 0,this.characterControllers=void 0,this.pidControllers=void 0,this.vehicleControllers=void 0}constructor(e,t,n,s,r,a,o,l,d,c,u,p,h,b){this.gravity=e,this.integrationParameters=new sN(t),this.islands=new gN(n),this.broadPhase=new wN(s),this.narrowPhase=new TN(r),this.bodies=new iN(a),this.colliders=new zN(o),this.impulseJoints=new pN(l),this.multibodyJoints=new bN(d),this.ccdSolver=new vN(c),this.queryPipeline=new HN(u),this.physicsPipeline=new PN(p),this.serializationPipeline=new H5(h),this.debugRenderPipeline=new NN(b),this.characterControllers=new Set,this.pidControllers=new Set,this.vehicleControllers=new Set,this.impulseJoints.finalizeDeserialization(this.bodies),this.bodies.finalizeDeserialization(this.colliders),this.colliders.finalizeDeserialization(this.bodies)}static fromRaw(e){return e?new xs(Y.fromRaw(e.takeGravity()),e.takeIntegrationParameters(),e.takeIslandManager(),e.takeBroadPhase(),e.takeNarrowPhase(),e.takeBodies(),e.takeColliders(),e.takeImpulseJoints(),e.takeMultibodyJoints()):null}takeSnapshot(){return this.serializationPipeline.serializeAll(this.gravity,this.integrationParameters,this.islands,this.broadPhase,this.narrowPhase,this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints)}static restoreSnapshot(e){return new H5().deserializeAll(e)}debugRender(e,t){return this.debugRenderPipeline.render(this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints,this.narrowPhase,e,t),new RN(this.debugRenderPipeline.vertices,this.debugRenderPipeline.colors)}step(e,t){this.physicsPipeline.step(this.gravity,this.integrationParameters,this.islands,this.broadPhase,this.narrowPhase,this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints,this.ccdSolver,e,t),this.queryPipeline.update(this.colliders)}propagateModifiedBodyPositionsToColliders(){this.bodies.raw.propagateModifiedBodyPositionsToColliders(this.colliders.raw)}updateSceneQueries(){this.propagateModifiedBodyPositionsToColliders(),this.queryPipeline.update(this.colliders)}get timestep(){return this.integrationParameters.dt}set timestep(e){this.integrationParameters.dt=e}get lengthUnit(){return this.integrationParameters.lengthUnit}set lengthUnit(e){this.integrationParameters.lengthUnit=e}get numSolverIterations(){return this.integrationParameters.numSolverIterations}set numSolverIterations(e){this.integrationParameters.numSolverIterations=e}get numAdditionalFrictionIterations(){return this.integrationParameters.numAdditionalFrictionIterations}set numAdditionalFrictionIterations(e){this.integrationParameters.numAdditionalFrictionIterations=e}get numInternalPgsIterations(){return this.integrationParameters.numInternalPgsIterations}set numInternalPgsIterations(e){this.integrationParameters.numInternalPgsIterations=e}switchToStandardPgsSolver(){this.integrationParameters.switchToStandardPgsSolver()}switchToSmallStepsPgsSolver(){this.integrationParameters.switchToSmallStepsPgsSolver()}switchToSmallStepsPgsSolverWithoutWarmstart(){this.integrationParameters.switchToSmallStepsPgsSolverWithoutWarmstart()}createRigidBody(e){return this.bodies.createRigidBody(this.colliders,e)}createCharacterController(e){let t=new MN(e,this.integrationParameters,this.bodies,this.colliders,this.queryPipeline);return this.characterControllers.add(t),t}removeCharacterController(e){this.characterControllers.delete(e),e.free()}createPidController(e,t,n,s){let r=new EN(this.integrationParameters,this.bodies,e,t,n,s);return this.pidControllers.add(r),r}removePidController(e){this.pidControllers.delete(e),e.free()}createVehicleController(e){let t=new ON(e,this.bodies,this.colliders,this.queryPipeline);return this.vehicleControllers.add(t),t}removeVehicleController(e){this.vehicleControllers.delete(e),e.free()}createCollider(e,t){let n=t?t.handle:void 0;return this.colliders.createCollider(this.bodies,e,n)}createImpulseJoint(e,t,n,s){return this.impulseJoints.createJoint(this.bodies,e,t.handle,n.handle,s)}createMultibodyJoint(e,t,n,s){return this.multibodyJoints.createJoint(e,t.handle,n.handle,s)}getRigidBody(e){return this.bodies.get(e)}getCollider(e){return this.colliders.get(e)}getImpulseJoint(e){return this.impulseJoints.get(e)}getMultibodyJoint(e){return this.multibodyJoints.get(e)}removeRigidBody(e){this.bodies&&this.bodies.remove(e.handle,this.islands,this.colliders,this.impulseJoints,this.multibodyJoints)}removeCollider(e,t){this.colliders&&this.colliders.remove(e.handle,this.islands,this.bodies,t)}removeImpulseJoint(e,t){this.impulseJoints&&this.impulseJoints.remove(e.handle,t)}removeMultibodyJoint(e,t){this.impulseJoints&&this.multibodyJoints.remove(e.handle,t)}forEachCollider(e){this.colliders.forEach(e)}forEachRigidBody(e){this.bodies.forEach(e)}forEachActiveRigidBody(e){this.bodies.forEachActiveRigidBody(this.islands,e)}castRay(e,t,n,s,r,a,o,l){return this.queryPipeline.castRay(this.bodies,this.colliders,e,t,n,s,r,a?a.handle:null,o?o.handle:null,this.colliders.castClosure(l))}castRayAndGetNormal(e,t,n,s,r,a,o,l){return this.queryPipeline.castRayAndGetNormal(this.bodies,this.colliders,e,t,n,s,r,a?a.handle:null,o?o.handle:null,this.colliders.castClosure(l))}intersectionsWithRay(e,t,n,s,r,a,o,l,d){this.queryPipeline.intersectionsWithRay(this.bodies,this.colliders,e,t,n,s,r,a,o?o.handle:null,l?l.handle:null,this.colliders.castClosure(d))}intersectionWithShape(e,t,n,s,r,a,o,l){let d=this.queryPipeline.intersectionWithShape(this.bodies,this.colliders,e,t,n,s,r,a?a.handle:null,o?o.handle:null,this.colliders.castClosure(l));return d!=null?this.colliders.get(d):null}projectPoint(e,t,n,s,r,a,o){return this.queryPipeline.projectPoint(this.bodies,this.colliders,e,t,n,s,r?r.handle:null,a?a.handle:null,this.colliders.castClosure(o))}projectPointAndGetFeature(e,t,n,s,r,a){return this.queryPipeline.projectPointAndGetFeature(this.bodies,this.colliders,e,t,n,s?s.handle:null,r?r.handle:null,this.colliders.castClosure(a))}intersectionsWithPoint(e,t,n,s,r,a,o){this.queryPipeline.intersectionsWithPoint(this.bodies,this.colliders,e,this.colliders.castClosure(t),n,s,r?r.handle:null,a?a.handle:null,this.colliders.castClosure(o))}castShape(e,t,n,s,r,a,o,l,d,c,u,p){return this.queryPipeline.castShape(this.bodies,this.colliders,e,t,n,s,r,a,o,l,d,c?c.handle:null,u?u.handle:null,this.colliders.castClosure(p))}intersectionsWithShape(e,t,n,s,r,a,o,l,d){this.queryPipeline.intersectionsWithShape(this.bodies,this.colliders,e,t,n,this.colliders.castClosure(s),r,a,o?o.handle:null,l?l.handle:null,this.colliders.castClosure(d))}collidersWithAabbIntersectingAabb(e,t,n){this.queryPipeline.collidersWithAabbIntersectingAabb(e,t,this.colliders.castClosure(n))}contactPairsWith(e,t){this.narrowPhase.contactPairsWith(e.handle,this.colliders.castClosure(t))}intersectionPairsWith(e,t){this.narrowPhase.intersectionPairsWith(e.handle,this.colliders.castClosure(t))}contactPair(e,t,n){this.narrowPhase.contactPair(e.handle,t.handle,n)}intersectionPair(e,t){return this.narrowPhase.intersectionPair(e.handle,t.handle)}}var so;(function(i){i[i.NONE=0]="NONE",i[i.COLLISION_EVENTS=1]="COLLISION_EVENTS",i[i.CONTACT_FORCE_EVENTS=2]="CONTACT_FORCE_EVENTS"})(so||(so={}));var ro;(function(i){i[i.NONE=0]="NONE",i[i.FILTER_CONTACT_PAIRS=1]="FILTER_CONTACT_PAIRS",i[i.FILTER_INTERSECTION_PAIRS=2]="FILTER_INTERSECTION_PAIRS"})(ro||(ro={}));var N5;(function(i){i[i.EMPTY=0]="EMPTY",i[i.COMPUTE_IMPULSE=1]="COMPUTE_IMPULSE"})(N5||(N5={}));var ao;(function(i){i[i.DYNAMIC_DYNAMIC=1]="DYNAMIC_DYNAMIC",i[i.DYNAMIC_KINEMATIC=12]="DYNAMIC_KINEMATIC",i[i.DYNAMIC_FIXED=2]="DYNAMIC_FIXED",i[i.KINEMATIC_KINEMATIC=52224]="KINEMATIC_KINEMATIC",i[i.KINEMATIC_FIXED=8704]="KINEMATIC_FIXED",i[i.FIXED_FIXED=32]="FIXED_FIXED",i[i.DEFAULT=15]="DEFAULT",i[i.ALL=60943]="ALL"})(ao||(ao={}));class L5{constructor(e,t,n,s){this.colliderSet=e,this.handle=t,this._parent=n,this._shape=s}finalizeDeserialization(e){this.handle!=null&&(this._parent=e.get(this.colliderSet.raw.coParent(this.handle)))}ensureShapeIsCached(){this._shape||(this._shape=lt.fromRaw(this.colliderSet.raw,this.handle))}get shape(){return this.ensureShapeIsCached(),this._shape}clearShapeCache(){this._shape=null}isValid(){return this.colliderSet.raw.contains(this.handle)}translation(){return Y.fromRaw(this.colliderSet.raw.coTranslation(this.handle))}rotation(){return ae.fromRaw(this.colliderSet.raw.coRotation(this.handle))}isSensor(){return this.colliderSet.raw.coIsSensor(this.handle)}setSensor(e){this.colliderSet.raw.coSetSensor(this.handle,e)}setShape(e){let t=e.intoRaw();this.colliderSet.raw.coSetShape(this.handle,t),t.free(),this._shape=e}setEnabled(e){this.colliderSet.raw.coSetEnabled(this.handle,e)}isEnabled(){return this.colliderSet.raw.coIsEnabled(this.handle)}setRestitution(e){this.colliderSet.raw.coSetRestitution(this.handle,e)}setFriction(e){this.colliderSet.raw.coSetFriction(this.handle,e)}frictionCombineRule(){return this.colliderSet.raw.coFrictionCombineRule(this.handle)}setFrictionCombineRule(e){this.colliderSet.raw.coSetFrictionCombineRule(this.handle,e)}restitutionCombineRule(){return this.colliderSet.raw.coRestitutionCombineRule(this.handle)}setRestitutionCombineRule(e){this.colliderSet.raw.coSetRestitutionCombineRule(this.handle,e)}setCollisionGroups(e){this.colliderSet.raw.coSetCollisionGroups(this.handle,e)}setSolverGroups(e){this.colliderSet.raw.coSetSolverGroups(this.handle,e)}contactSkin(){return this.colliderSet.raw.coContactSkin(this.handle)}setContactSkin(e){return this.colliderSet.raw.coSetContactSkin(this.handle,e)}activeHooks(){return this.colliderSet.raw.coActiveHooks(this.handle)}setActiveHooks(e){this.colliderSet.raw.coSetActiveHooks(this.handle,e)}activeEvents(){return this.colliderSet.raw.coActiveEvents(this.handle)}setActiveEvents(e){this.colliderSet.raw.coSetActiveEvents(this.handle,e)}activeCollisionTypes(){return this.colliderSet.raw.coActiveCollisionTypes(this.handle)}setContactForceEventThreshold(e){return this.colliderSet.raw.coSetContactForceEventThreshold(this.handle,e)}contactForceEventThreshold(){return this.colliderSet.raw.coContactForceEventThreshold(this.handle)}setActiveCollisionTypes(e){this.colliderSet.raw.coSetActiveCollisionTypes(this.handle,e)}setDensity(e){this.colliderSet.raw.coSetDensity(this.handle,e)}setMass(e){this.colliderSet.raw.coSetMass(this.handle,e)}setMassProperties(e,t,n,s){let r=Y.intoRaw(t),a=Y.intoRaw(n),o=ae.intoRaw(s);this.colliderSet.raw.coSetMassProperties(this.handle,e,r,a,o),r.free(),a.free(),o.free()}setTranslation(e){this.colliderSet.raw.coSetTranslation(this.handle,e.x,e.y,e.z)}setTranslationWrtParent(e){this.colliderSet.raw.coSetTranslationWrtParent(this.handle,e.x,e.y,e.z)}setRotation(e){this.colliderSet.raw.coSetRotation(this.handle,e.x,e.y,e.z,e.w)}setRotationWrtParent(e){this.colliderSet.raw.coSetRotationWrtParent(this.handle,e.x,e.y,e.z,e.w)}shapeType(){return this.colliderSet.raw.coShapeType(this.handle)}halfExtents(){return Y.fromRaw(this.colliderSet.raw.coHalfExtents(this.handle))}setHalfExtents(e){const t=Y.intoRaw(e);this.colliderSet.raw.coSetHalfExtents(this.handle,t)}radius(){return this.colliderSet.raw.coRadius(this.handle)}setRadius(e){this.colliderSet.raw.coSetRadius(this.handle,e)}roundRadius(){return this.colliderSet.raw.coRoundRadius(this.handle)}setRoundRadius(e){this.colliderSet.raw.coSetRoundRadius(this.handle,e)}halfHeight(){return this.colliderSet.raw.coHalfHeight(this.handle)}setHalfHeight(e){this.colliderSet.raw.coSetHalfHeight(this.handle,e)}setVoxel(e,t,n,s){this.colliderSet.raw.coSetVoxel(this.handle,e,t,n,s),this._shape=null}propagateVoxelChange(e,t,n,s,r,a,o){this.colliderSet.raw.coPropagateVoxelChange(this.handle,e.handle,t,n,s,r,a,o),this._shape=null}combineVoxelStates(e,t,n,s){this.colliderSet.raw.coCombineVoxelStates(this.handle,e.handle,t,n,s),this._shape=null}vertices(){return this.colliderSet.raw.coVertices(this.handle)}indices(){return this.colliderSet.raw.coIndices(this.handle)}heightfieldHeights(){return this.colliderSet.raw.coHeightfieldHeights(this.handle)}heightfieldScale(){let e=this.colliderSet.raw.coHeightfieldScale(this.handle);return Y.fromRaw(e)}heightfieldNRows(){return this.colliderSet.raw.coHeightfieldNRows(this.handle)}heightfieldNCols(){return this.colliderSet.raw.coHeightfieldNCols(this.handle)}parent(){return this._parent}friction(){return this.colliderSet.raw.coFriction(this.handle)}restitution(){return this.colliderSet.raw.coRestitution(this.handle)}density(){return this.colliderSet.raw.coDensity(this.handle)}mass(){return this.colliderSet.raw.coMass(this.handle)}volume(){return this.colliderSet.raw.coVolume(this.handle)}collisionGroups(){return this.colliderSet.raw.coCollisionGroups(this.handle)}solverGroups(){return this.colliderSet.raw.coSolverGroups(this.handle)}containsPoint(e){let t=Y.intoRaw(e),n=this.colliderSet.raw.coContainsPoint(this.handle,t);return t.free(),n}projectPoint(e,t){let n=Y.intoRaw(e),s=z2.fromRaw(this.colliderSet.raw.coProjectPoint(this.handle,n,t));return n.free(),s}intersectsRay(e,t){let n=Y.intoRaw(e.origin),s=Y.intoRaw(e.dir),r=this.colliderSet.raw.coIntersectsRay(this.handle,n,s,t);return n.free(),s.free(),r}castShape(e,t,n,s,r,a,o,l){let d=Y.intoRaw(e),c=Y.intoRaw(n),u=ae.intoRaw(s),p=Y.intoRaw(r),h=t.intoRaw(),b=Ls.fromRaw(this.colliderSet,this.colliderSet.raw.coCastShape(this.handle,d,h,c,u,p,a,o,l));return d.free(),c.free(),u.free(),p.free(),h.free(),b}castCollider(e,t,n,s,r,a){let o=Y.intoRaw(e),l=Y.intoRaw(n),d=X2.fromRaw(this.colliderSet,this.colliderSet.raw.coCastCollider(this.handle,o,t.handle,l,s,r,a));return o.free(),l.free(),d}intersectsShape(e,t,n){let s=Y.intoRaw(t),r=ae.intoRaw(n),a=e.intoRaw(),o=this.colliderSet.raw.coIntersectsShape(this.handle,a,s,r);return s.free(),r.free(),a.free(),o}contactShape(e,t,n,s){let r=Y.intoRaw(t),a=ae.intoRaw(n),o=e.intoRaw(),l=ws.fromRaw(this.colliderSet.raw.coContactShape(this.handle,o,r,a,s));return r.free(),a.free(),o.free(),l}contactCollider(e,t){return ws.fromRaw(this.colliderSet.raw.coContactCollider(this.handle,e.handle,t))}castRay(e,t,n){let s=Y.intoRaw(e.origin),r=Y.intoRaw(e.dir),a=this.colliderSet.raw.coCastRay(this.handle,s,r,t,n);return s.free(),r.free(),a}castRayAndGetNormal(e,t,n){let s=Y.intoRaw(e.origin),r=Y.intoRaw(e.dir),a=I2.fromRaw(this.colliderSet.raw.coCastRayAndGetNormal(this.handle,s,r,t,n));return s.free(),r.free(),a}}var f1;(function(i){i[i.Density=0]="Density",i[i.Mass=1]="Mass",i[i.MassProps=2]="MassProps"})(f1||(f1={}));class Ze{constructor(e){this.enabled=!0,this.shape=e,this.massPropsMode=f1.Density,this.density=1,this.friction=.5,this.restitution=0,this.rotation=ae.identity(),this.translation=Y.zeros(),this.isSensor=!1,this.collisionGroups=4294967295,this.solverGroups=4294967295,this.frictionCombineRule=Br.Average,this.restitutionCombineRule=Br.Average,this.activeCollisionTypes=ao.DEFAULT,this.activeEvents=so.NONE,this.activeHooks=ro.NONE,this.mass=0,this.centerOfMass=Y.zeros(),this.contactForceEventThreshold=0,this.contactSkin=0,this.principalAngularInertia=Y.zeros(),this.angularInertiaLocalFrame=ae.identity()}static ball(e){const t=new m8(e);return new Ze(t)}static capsule(e,t){const n=new v8(e,t);return new Ze(n)}static segment(e,t){const n=new g8(e,t);return new Ze(n)}static triangle(e,t,n){const s=new w8(e,t,n);return new Ze(s)}static roundTriangle(e,t,n,s){const r=new T8(e,t,n,s);return new Ze(r)}static polyline(e,t){const n=new x8(e,t);return new Ze(n)}static voxels(e,t){const n=new S8(e,t);return new Ze(n)}static trimesh(e,t,n){const s=new P8(e,t,n);return new Ze(s)}static cuboid(e,t,n){const s=new y8(e,t,n);return new Ze(s)}static roundCuboid(e,t,n,s){const r=new b8(e,t,n,s);return new Ze(r)}static heightfield(e,t,n,s,r){const a=new H8(e,t,n,s,r);return new Ze(a)}static cylinder(e,t){const n=new R8(e,t);return new Ze(n)}static roundCylinder(e,t,n){const s=new N8(e,t,n);return new Ze(s)}static cone(e,t){const n=new L8(e,t);return new Ze(n)}static roundCone(e,t,n){const s=new M8(e,t,n);return new Ze(s)}static convexHull(e){const t=new no(e,null);return new Ze(t)}static convexMesh(e,t){const n=new no(e,t);return new Ze(n)}static roundConvexHull(e,t){const n=new io(e,null,t);return new Ze(n)}static roundConvexMesh(e,t,n){const s=new io(e,t,n);return new Ze(s)}setTranslation(e,t,n){if(typeof e!="number"||typeof t!="number"||typeof n!="number")throw TypeError("The translation components must be numbers.");return this.translation={x:e,y:t,z:n},this}setRotation(e){return ae.copy(this.rotation,e),this}setSensor(e){return this.isSensor=e,this}setEnabled(e){return this.enabled=e,this}setContactSkin(e){return this.contactSkin=e,this}setDensity(e){return this.massPropsMode=f1.Density,this.density=e,this}setMass(e){return this.massPropsMode=f1.Mass,this.mass=e,this}setMassProperties(e,t,n,s){return this.massPropsMode=f1.MassProps,this.mass=e,Y.copy(this.centerOfMass,t),Y.copy(this.principalAngularInertia,n),ae.copy(this.angularInertiaLocalFrame,s),this}setRestitution(e){return this.restitution=e,this}setFriction(e){return this.friction=e,this}setFrictionCombineRule(e){return this.frictionCombineRule=e,this}setRestitutionCombineRule(e){return this.restitutionCombineRule=e,this}setCollisionGroups(e){return this.collisionGroups=e,this}setSolverGroups(e){return this.solverGroups=e,this}setActiveHooks(e){return this.activeHooks=e,this}setActiveEvents(e){return this.activeEvents=e,this}setActiveCollisionTypes(e){return this.activeCollisionTypes=e,this}setContactForceEventThreshold(e){return this.contactForceEventThreshold=e,this}}class zN{free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}constructor(e){this.raw=e||new ke,this.map=new O2,e&&e.forEachColliderHandle(t=>{this.map.set(t,new L5(this,t,null))})}castClosure(e){return t=>{if(e)return e(this.get(t))}}finalizeDeserialization(e){this.map.forEach(t=>t.finalizeDeserialization(e))}createCollider(e,t,n){let s=n!=null&&n!=null;if(s&&isNaN(n))throw Error("Cannot create a collider with a parent rigid-body handle that is not a number.");let r=t.shape.intoRaw(),a=Y.intoRaw(t.translation),o=ae.intoRaw(t.rotation),l=Y.intoRaw(t.centerOfMass),d=Y.intoRaw(t.principalAngularInertia),c=ae.intoRaw(t.angularInertiaLocalFrame),u=this.raw.createCollider(t.enabled,r,a,o,t.massPropsMode,t.mass,l,d,c,t.density,t.friction,t.restitution,t.frictionCombineRule,t.restitutionCombineRule,t.isSensor,t.collisionGroups,t.solverGroups,t.activeCollisionTypes,t.activeHooks,t.activeEvents,t.contactForceEventThreshold,t.contactSkin,s,s?n:0,e.raw);r.free(),a.free(),o.free(),l.free(),d.free(),c.free();let p=s?e.get(n):null,h=new L5(this,u,p,t.shape);return this.map.set(u,h),h}remove(e,t,n,s){this.raw.remove(e,t.raw,n.raw,s),this.unmap(e)}unmap(e){this.map.delete(e)}get(e){return this.map.get(e)}len(){return this.map.len()}contains(e){return this.get(e)!=null}forEach(e){this.map.forEach(e)}getAll(){return this.map.getAll()}}const IN=2236962,XN=2,AN=1,CN=3,M5=1/60,FN=!0,VN="high-performance",DN=bn,jN=new x(0,-9.81,0),WN="assets/sunset.exr",UN=.35,qN=1,GN=16777215,ZN=.5,YN=16777215,kN=1.5,JN=[-1,2.5,1],KN=!0,BN=-.001,QN=.5,_N=50,$N=-5,eL=5,tL=5,nL=-5,E5=1024;class E8{static TIMESTEP=M5;constructor({containerElement:e,camera:t}){this.#e=e,this.#r=t,this.#a.integrationParameters.numSolverIterations=XN,this.#a.integrationParameters.numAdditionalFrictionIterations=AN,this.#a.integrationParameters.numInternalPgsIterations=CN,this.#a.timestep=M5,this.#t.add(new fc(GN,ZN));const n=new J4(YN,kN);n.shadow.mapSize.set(E5,E5),n.position.set(...JN),n.castShadow=KN,n.shadow.bias=BN,n.shadow.camera.near=QN,n.shadow.camera.far=_N,n.shadow.camera.left=$N,n.shadow.camera.right=eL,n.shadow.camera.top=tL,n.shadow.camera.bottom=nL,this.#t.add(n),e.appendChild(this.#o.domElement)}#e;#t=new Y7;#n=new Y7;#o=new cm({antialias:FN,powerPreference:VN});#a=new xs(jN);#r=null;async initialize(e,t,n){const s=new Ba(this.#o);s.compileEquirectangularShader(),this.#t.environment=await new Promise((r,a)=>new Ly().load(WN,o=>r(s.fromEquirectangular(o).texture),void 0,a)),this.#t.background=new te(IN),this.#t.environmentIntensity=UN,this.#o.toneMapping=g4,this.#o.toneMappingExposure=qN,this.#o.outputColorSpace=bt,this.#o.setSize(e,t),this.#o.setPixelRatio(n),this.#o.shadowMap.enabled=!0,this.#o.shadowMap.type=DN,this.#e.appendChild(this.#o.domElement)}createFixedBody(){const e=_t.fixed();return this.#a.createRigidBody(e)}createKinematicBody(){const e=_t.kinematicPositionBased();return this.#a.createRigidBody(e)}createDynamicBody(){const e=_t.dynamic();return this.#a.createRigidBody(e)}createCuboidCollider({width:e,height:t,depth:n,userData:s,position:r,rotation:a,sensor:o,friction:l,restitution:d,density:c},u=this.createFixedBody()){const p=Ze.cuboid(e/2,t/2,n/2);r!==void 0&&p.setTranslation(...r),a!==void 0&&p.setRotation(new _0().setFromEuler(new Ne(...a))),o!==void 0&&p.setSensor(o);const h=this.#a.createCollider(p,u);return l!==void 0&&h.setFriction(l),d!==void 0&&h.setRestitution(d),c!==void 0&&h.setDensity(c),s!==void 0&&(h.userData=s),h}createCuboidColliderFromBoundingBox({mesh:e,height:t,userData:n,rotation:s,sensor:r},a){e.geometry.computeBoundingBox();const o=e.geometry.boundingBox;e.matrixWorld.decompose(e.position,e.quaternion,e.scale);const d=o.max.x-o.min.x,c=o.max.z-o.min.z,u=o.min.x,p=o.min.y,h=o.min.z;return this.createCuboidCollider({width:d,height:t,depth:c,rotation:s,sensor:r,position:[u+d/2,p-t/2,h+c/2],userData:n},a)}createTrimeshCollider({vertices:e,indices:t,userData:n,position:s,rotation:r,sensor:a,friction:o,restitution:l,density:d},c=this.createFixedBody()){const u=Ze.trimesh(e,t,$r.ORIENTED|$r.FIX_INTERNAL_EDGES);s!==void 0&&u.setTranslation(...s),r!==void 0&&u.setRotation(new _0().setFromEuler(new Ne(...r))),a!==void 0&&u.setSensor(a);const p=this.#a.createCollider(u,c);return o!==void 0&&p.setFriction(o),l!==void 0&&p.setRestitution(l),d!==void 0&&p.setDensity(d),n!==void 0&&(p.userData=n),p}createCylinderCollider({radius:e,height:t,userData:n,position:s,rotation:r,sensor:a,friction:o,restitution:l,density:d},c=this.createFixedBody()){const u=Ze.cylinder(t/2,e);s!==void 0&&u.setTranslation(...s),r!==void 0&&u.setRotation(new _0().setFromEuler(new Ne(...r))),a!==void 0&&u.setSensor(a);const p=this.#a.createCollider(u,c);return o!==void 0&&p.setFriction(o),l!==void 0&&p.setRestitution(l),d!==void 0&&p.setDensity(d),n!==void 0&&(p.userData=n),p}createConvexHullCollider({vertices:e,indices:t,userData:n,position:s,rotation:r,sensor:a,friction:o,restitution:l,density:d},c=this.createFixedBody()){const u=Ze.convexHull(e,t);s!==void 0&&u.setTranslation(...s),r!==void 0&&u.setRotation(new _0().setFromEuler(new Ne(...r))),a!==void 0&&u.setSensor(a);const p=this.#a.createCollider(u,c);return o!==void 0&&p.setFriction(o),l!==void 0&&p.setRestitution(l),d!==void 0&&p.setDensity(d),n!==void 0&&(p.userData=n),p}connectBodiesWithSphericalJoint({body1:e,body2:t,anchor1:n,anchor2:s}){const r=cn.spherical(n,s);return this.#a.createImpulseJoint(r,e,t)}connectBodiesWithRevoluteJoint({body1:e,body2:t,anchor1:n,anchor2:s,axis:r}){const a=cn.revolute(n,s,r);return this.#a.createImpulseJoint(a,e,t)}connectBodiesWithFixedJoint({body1:e,body2:t,anchor1:n,anchor2:s,frame1:r,frame2:a}){const o=cn.fixed(n,r,s,a);return this.#a.createImpulseJoint(o,e,t)}addObject(e){e.traverse(t=>{t.isMesh&&(t.castShadow=!0,t.receiveShadow=!0)}),this.#t.add(e)}render(){this.#o.render(this.#t,this.#r)}step(){this.#a.step()}resize(e,t,n){this.#o.setSize(e,t),this.#o.setPixelRatio(n),this.#r.isPerspectiveCamera&&(this.#r.aspect=e/t,this.#r.updateProjectionMatrix())}set timestep(e){this.#a.timestep=e}get timestep(){return this.#a.timestep}get triangles(){return this.#o.info.render.triangles}get children(){return this.#t.children}forEachCollision(e){this.#a.forEachCollider(t=>this.#a.intersectionPairsWith(t,n=>{t.userData.objectType!==void 0&&n.userData.objectType!==void 0&&e(t.userData,n.userData)}))}forEachCollider(e){this.#a.forEachCollider(t=>{t.isEnabled()&&e(t)})}loadModel(e){return new zm().loadAsync(e)}async save(){return{world:await iL(this.#a.takeSnapshot())}}async load(e){this.#a=xs.restoreSnapshot(await sL(e.world))}get worldBodies(){return this.#a.bodies}get worldColliders(){return this.#a.colliders}get worldJoints(){return this.#a.impulseJoints}get camera(){return this.#r}get containerElement(){return this.#e}get css3DScene(){return this.#n}removeWorldBody(e){this.#a.removeRigidBody(e)}removeWorldCollider(e){this.#a.removeCollider(e)}}async function iL(i){const e=new Blob([i]).stream(),t=new CompressionStream("gzip"),n=await new Response(e.pipeThrough(t)).blob();return await new Promise((r,a)=>{const o=new FileReader;o.onloadend=()=>r(o.result.split(",")[1]),o.onerror=()=>a(o.error),o.readAsDataURL(n)})}async function sL(i){const t=(await(await fetch(`data:application/gzip;base64,${i}`)).blob()).stream().pipeThrough(new DecompressionStream("gzip")),n=await new Response(t).arrayBuffer();return new Uint8Array(n)}const rL=[0,.535,-.3725],on=[0,.6425,-.3],mr=.6,O5=.7,aL=.9,_1=.7,z5=.0065,yr=.1,$1=0,es=0,oL=.1,I5=-.31,C3=.4525,F3=.005,X5=.05,ai=.075,lL=6,ts=7,dL=0,cL=0,A5=.75,C5=0,uL="#555";class pL{constructor({scene:e}){this.#e=e}#e;initialize(){const e=new en(mr,_1,z5),t=new O1({transparent:!0,opacity:oL}),n=new Be(e,t);n.position.set(...on),this.#e.addObject(n);const s=this.#e.createFixedBody();this.#e.createCuboidCollider({width:O5,height:aL,depth:yr,friction:$1,restitution:es,position:rL},s),this.#e.createCuboidCollider({width:mr,height:_1,depth:z5,friction:$1,restitution:es,position:on},s),this.#e.createCuboidCollider({width:.05,height:_1,depth:yr,friction:$1,restitution:es,position:[on[0]-mr/2-.025,on[1],on[2]]},s),this.#e.createCuboidCollider({width:.05,height:_1,depth:yr,friction:$1,restitution:es,position:[on[0]+mr/2+.025,on[1],on[2]]},s),this.#e.createCuboidCollider({width:O5,height:.05,depth:yr,friction:$1,restitution:es,position:[on[0],on[1]+_1/2+.025,on[2]]},s),fL({scene:this.#e,wallBody:s})}}function fL({scene:i,wallBody:e}){const n=-ts*ai/2+ai/2;for(let r=0;r<ts;r++)s(n-ai/2,C3-ai,r,-1,F3/2,A5,C5);for(let r=0;r<ts;r++)s(n-.075/2,C3-ai/2,r,-1,F3/2,A5,C5);for(let r=0;r<lL;r++)for(let a=0;a<(r%2===0?ts:ts-1);a++)s(n,C3,a,r,F3,dL,cL);function s(r,a,o,l,d,c,u){const p=r+o*ai+(l%2===0?0:ai/2),h=a+l*ai,b=new T2(d,d,X5,8),T=new O1({color:uL}),m=new Be(b,T);m.position.set(p,h,I5),m.rotation.set(Math.PI/2,Math.PI/4,0),i.addObject(m),i.createCuboidCollider({width:d/8,height:X5,depth:d/8,friction:c,restitution:u,position:[p,h,I5],rotation:[Math.PI/2,Math.PI/4,0]},e)}}const e2=3,oo=new x(0,0,0),F5=new x(1,1,1),hL=-.005,V5=10,mL=50,lo=35,V3=1,yL=16755200,bL=.03,vL=.1,gL=.00725,wL="./assets/buttons.glb",t2=3,l1=[{color:16777215,background:16711680}],Ss=l1.length;class Tt{static MAX_INSTANCES=e2;static TYPES=t2;static COLORS=Ss;static#e;static#t;static#n=[];static#o=[];static async initialize({scene:e}){const{materials:t,geometries:n}=await TL({scene:e});this.#e=xL({scene:e,interactiveObjects:this.#o,materials:t,geometries:n,onClick:({color:s,type:r,instanceId:a})=>{const o=this.#t[s][r].find(l=>l.index===a);o.isPressing||(o.isPressing=!0),o.enabled&&this.onPress(o)}}),this.#t=[],SL({scene:e,instances:this.#t,bulbLights:this.#n})}static update(){const e=new K0,t=new x,n=new _0,s=new x;this.#o.forEach(r=>{const{color:a,type:o}=r.userData,l=this.#t[a][o];for(const d of l){if(d.isPressing)if(d.framePressStart===-1)d.framePressStart=0,r.getMatrixAt(d.index,e),e.decompose(t,n,s);else{const c=this.#n[a][o][d.index];if(d.framePressStart++,d.framePressStart<V5){const u=new x(0,hL,0),p=d.framePressStart/V5,h=u.multiplyScalar(p);h.applyQuaternion(d.initialRotation);const b=d.initialPosition.clone().add(h);d.buttonPosition.copy(b),d.enabled&&(c.intensity=p*lo)}else c.intensity=V3,d.isPressing=!1,d.framePressStart=-1,d.buttonPosition.copy(d.initialPosition)}if(d.isBlinking){if(d.frameBlinkStart===-1)d.frameBlinkStart=0;else if(d.frameBlinkStart++,d.frameBlinkStart>=mL){const c=this.#n[a][o][d.index];d.frameBlinkStart=0,d.blinkingOn=!d.blinkingOn,d.blinkingOn?c.intensity=lo:c.intensity=V3}!d.blinkingOn&&!d.enabled&&(d.isBlinking=!1,d.frameBlinkStart=void 0)}}});for(let r=0;r<Ss;r++)for(let a=0;a<t2;a++){for(const o of this.#t[r][a])o.used&&RL({instance:o,meshes:this.#e[r][a]});this.#e[r][a].forEach(o=>o.instanceMatrix.needsUpdate=!0)}}static load(e){e.forEach((t,n)=>{t.forEach((s,r)=>{s.forEach((a,o)=>{const l=this.#t[n][r][o];l.used=!0,l.enabled=a.enabled,l.isPressing=a.isPressing,l.isBlinking=a.isBlinking,l.frameBlinkStart=a.frameBlinkStart,l.blinkingOn=a.blinkingOn,l.framePressStart=a.framePressStart,l.buttonPosition.fromArray(a.position)})})})}static save(){return this.#t.map(e=>e.map(t=>t.map(n=>({enabled:n.enabled,isPressing:n.isPressing,isBlinking:n.isBlinking,frameBlinkStart:n.frameBlinkStart,blinkingOn:n.blinkingOn,framePressStart:n.framePressStart,position:n.buttonPosition.toArray()}))))}static addButton({type:e,color:t,position:n,rotation:s}){const r=this.#t[t][e].find(o=>!o.used);r.used=!0,r.enabled=!0;const a=this.#n[t][e][r.index];return a.visible=!0,a.intensity=V3,HL({instance:r,position:n,rotation:s,bulbLight:a}),r}static enable({type:e,color:t,index:n},s){const r=this.#t[t][e].find(a=>a.index===n);r.enabled=s}static blink({type:e,color:t,index:n},s){const r=this.#t[t][e].find(a=>a.index===n);r.isBlinking=s}static get interactiveObjects(){return this.#o}}async function TL({scene:i}){const t=(await i.loadModel(wL)).scene.children,n=[],s=[];for(let r=0;r<Ss;r++){const a=t[0],o=a.children[1].material.clone();o.color.setHex(l1[r].color);const l=a.children[2].material.clone();l.color.setHex(l1[r].background);const d=t[2],c=d.children[0].material.clone();c.color.setHex(l1[r].color);const u=d.children[1].material.clone();u.color.setHex(l1[r].background);const p=t[1],h=p.children[1].material.clone();h.color.setHex(l1[r].background),n.push([[a.children[0].material,o,l],[d.children[0].material,c,u],[p.children[0].material,h]]),s.push([[a.children[0].geometry,a.children[1].geometry,a.children[2].geometry],[d.children[0].geometry,d.children[1].geometry,d.children[2].geometry],[p.children[0].geometry,p.children[1].geometry]])}return{materials:n,geometries:s}}function xL({scene:i,materials:e,geometries:t,interactiveObjects:n,onClick:s}){const r=[];for(let a=0;a<Ss;a++){const o=[];for(let l=0;l<t2;l++){const d=[];for(let c=0;c<e[a][l].length;c++){const u=new Ai(t[a][l][c],e[a][l][c],e2);for(let p=0;p<e2;p++)u.setMatrixAt(p,oo);u.active=c>0,u.userData={color:a,type:l,onClick:p=>s({color:a,type:l,instanceId:p})},i.addObject(u),d.push(u),n.push(u)}o.push(d)}r.push(o)}return r}function SL({scene:i,instances:e,bulbLights:t}){for(let n=0;n<Ss;n++){e[n]=[],t[n]=[];for(let s=0;s<t2;s++){e[n][s]=[],t[n][s]=[];for(let r=e[n][s].length;r<e2;r++){PL({type:s,color:n,instances:e});const a=new k4(yL,lo,bL,vL);a.castShadow=!1,t[n][s][r]=a,a.visible=!1,i.addObject(a)}}}}function PL({type:i,color:e,instances:t}){const s={index:t[e][i].length,type:i,color:e,position:new x,buttonPosition:new x,rotation:new _0,initialPosition:new x,initialRotation:new _0,matrix:new K0,used:!1,enabled:!1,isPressing:!1,isBlinking:!1,frameBlinkStart:-1,blinkingOn:!1,framePressStart:-1};return t[e][i].push(s),s}function HL({instance:i,position:e,rotation:t,bulbLight:n}){i.position.fromArray([e.x,e.y,e.z]),i.rotation.setFromEuler(new Ne(t.x,t.y,t.z)),i.initialPosition.fromArray([e.x,e.y,e.z]),i.initialRotation.setFromEuler(new Ne(t.x,t.y,t.z)),i.buttonPosition.fromArray([e.x,e.y,e.z]),n.position.fromArray([e.x,e.y+gL,e.z]),n.rotation.set(t.x,t.y,t.z)}function RL({instance:i,meshes:e}){i.matrix.compose(i.position,i.rotation,i.used?F5:oo),e[0].setMatrixAt(i.index,i.matrix),i.matrix.compose(i.buttonPosition,i.rotation,i.used?F5:oo);for(let t=1;t<e.length;t++)e[t].setMatrixAt(i.index,i.matrix)}const s1=[0,.16125,1.25],D3=[2*Math.PI+Math.PI/10,0,0],D5=[-.2,0,.2],j5=[-.4,.4];class NL{#e=[];#t;#n;#o;#a;#r;constructor({onPressDropButton:e,onPressActionButton:t,onPressStartButton:n}){this.#o=e,this.#a=t,this.#r=n}async initialize(){for(let e=0;e<D5.length;e++)this.#e[e]=Tt.addButton({type:0,color:0,position:new x(D5[e],s1[1],s1[2]),rotation:new x().fromArray(D3)}),Tt.enable(this.#e[e],!1);this.#n=Tt.addButton({type:2,color:0,position:new x(j5[0],s1[1],s1[2]),rotation:new x().fromArray(D3)}),Tt.enable(this.#n,!1),this.#t=Tt.addButton({type:1,color:0,position:new x(j5[1],s1[1],s1[2]),rotation:new x().fromArray(D3)}),Tt.onPress=e=>{if(e===this.#t)this.#r();else if(this.#e.includes(e)){const t=this.#e.indexOf(e);this.#o(t)}else e===this.#n&&this.#a()},Tt.blink(this.#t,!0)}update(){}setDropButtonsOn(){for(const e of this.#e)Tt.on(e)}disableStartButton(){Tt.enable(this.#t,!1);for(const e of this.#e)Tt.enable(e,!0)}enableActionButton(){Tt.enable(this.#n,!0)}disableActionButton(){Tt.enable(this.#n,!1)}get interactiveObjects(){return Tt.interactiveObjects}}const W5=Math.PI/60,LL=.1,O8=.001,ML=1e-4,U5=.003,EL=.3,OL="./assets/pusher.glb",zL="door",IL="platform",XL="delivery-position",AL=5460902,Ps=0,co=1.5,z8=10,Nt={MOVING:Symbol.for("pusher-moving"),PREPARING_DELIVERY:Symbol.for("pusher-preparing-delivery"),OPENING_DOOR:Symbol.for("pusher-opening-door"),DELIVERING_BONUS:Symbol.for("pusher-delivering-bonus"),CLOSING_DOOR:Symbol.for("pusher-closing-door")},un={IDLE:Symbol.for("pusher-lights-idle"),ACTIVATING:Symbol.for("pusher-lights-activating"),ROTATING:Symbol.for("pusher-lights-rotating"),DELIVERING:Symbol.for("pusher-lights-delivering")};class CL{constructor({scene:e,depositBonus:t}){this.#e=e,this.#r=t}#e;#t;#n;#o;#a;#r;#c;#i=new x;#s=new x;#d={state:Nt.MOVING,nextState:null,rewards:[],phase:0,platform:{},door:{position:0},lights:{state:un.IDLE,nextState:null,frameLastRefresh:-1,headIndex:0,bulbs:[]}};async initialize(){const{parts:e,deliveryPosition:t,lightBulbsMaterials:n}=await WL({scene:this.#e});this.#t=e,this.#a=t,this.#c=n,UL({scene:this.#e,parts:e}),qL({lightBulbsMaterials:this.#c,lights:this.#d.lights}),this.#n=e.get(zL),this.#o=e.get(IL),e.forEach(({body:s,meshes:r})=>{r.forEach(({data:a})=>this.#e.addObject(a)),s.setEnabled(!0)})}update(){if(FL({pusher:this.#d}),VL({pusher:this.#d}),this.#d.state===Nt.DELIVERING_BONUS){const e=this.#d.rewards.shift();this.#r({reward:e,position:this.#a})}this.#i.setZ(Math.sin(this.#d.phase)*LL),this.#s.setZ(this.#d.door.position),this.#o.body.setNextKinematicTranslation(this.#i),this.#n.body.setNextKinematicTranslation(this.#i.sub(this.#s)),this.#t.forEach(({meshes:e,body:t})=>{e.forEach(({data:n})=>{n.position.copy(t.translation()),n.quaternion.copy(t.rotation())})}),this.#d.lights.state!==un.IDLE&&this.#d.lights.bulbs.forEach((e,t)=>{this.#c[t].emissiveIntensity=e.intensity}),this.#d.nextState&&(this.#d.state=this.#d.nextState),this.#d.lights.nextState&&(this.#d.lights.state=this.#d.lights.nextState)}deliverBonus(e){this.#d.rewards.push(e),this.#d.state===Nt.MOVING&&(this.#d.state=Nt.PREPARING_DELIVERY)}get phase(){return this.#d.phase}save(){return{state:this.#d.state.description,nextState:this.#d.nextState?this.#d.nextState.description:null,phase:this.#d.phase,rewards:[...this.#d.rewards],platformBodyHandle:this.#o.body.handle,doorBodyHandle:this.#n.body.handle,door:{position:this.#d.door.position},lights:{state:this.#d.lights.state.description,nextState:this.#d.lights.nextState?this.#d.lights.nextState.description:null,frameLastRefresh:this.#d.lights.frameLastRefresh,headIndex:this.#d.lights.headIndex,bulbs:this.#d.lights.bulbs.map(e=>({intensity:e.intensity}))}}}load(e){this.#d.state=Symbol.for(e.state),this.#d.nextState=e.nextState?Symbol.for(e.nextState):null,this.#d.rewards=e.rewards,this.#d.phase=e.phase,this.#o.body=this.#e.worldBodies.get(e.platformBodyHandle),this.#n.body=this.#e.worldBodies.get(e.doorBodyHandle),this.#d.door.position=e.door.position,this.#d.lights.state=Symbol.for(e.lights.state),this.#d.lights.nextState=e.lights.nextState?Symbol.for(e.lights.nextState):null,this.#d.lights.frameLastRefresh=e.lights.frameLastRefresh,this.#d.lights.headIndex=e.lights.headIndex,this.#d.lights.bulbs=e.lights.bulbs.map(t=>({intensity:t.intensity}))}}function FL({pusher:i}){switch(i.nextState=null,i.state){case Nt.MOVING:i.phase=(i.phase+W5)%(Math.PI*2);break;case Nt.PREPARING_DELIVERY:i.phase=(i.phase+W5)%(Math.PI*2),i.lights.state===un.IDLE&&(i.lights.state=un.ACTIVATING),i.phase>Math.PI*1.5&&i.phase<Math.PI*1.5+O8&&(i.nextState=Nt.OPENING_DOOR);break;case Nt.OPENING_DOOR:i.door.position=i.door.position+U5,i.door.position>EL&&(i.nextState=Nt.DELIVERING_BONUS);break;case Nt.DELIVERING_BONUS:i.nextState=Nt.CLOSING_DOOR;break;case Nt.CLOSING_DOOR:i.door.position>ML?i.door.position=i.door.position-U5:(i.door.position=0,i.rewards.length>1?i.nextState=Nt.PREPARING_DELIVERY:i.nextState=Nt.MOVING);break}}function VL({pusher:i}){switch(i.lights.nextState=null,i.lights.state){case un.IDLE:break;case un.ACTIVATING:i.lights.frameLastRefresh=0,i.lights.nextState=un.ROTATING;break;case un.ROTATING:DL(i),i.state===Nt.DELIVERING_BONUS&&(i.lights.nextState=un.DELIVERING);break;case un.DELIVERING:jL(i),i.state===Nt.MOVING&&i.phase<Math.PI&&i.phase>.5*Math.PI-O8&&(i.lights.bulbs.forEach(e=>{e.intensity=Ps}),i.lights.headIndex=0,i.lights.frameLastRefresh=-1,i.lights.nextState=un.IDLE);break}}function DL(i){i.lights.frameLastRefresh++,i.lights.frameLastRefresh>z8&&(i.lights.frameLastRefresh=0,i.lights.bulbs.forEach((e,t)=>{e.intensity=t>=i.lights.headIndex*9&&t<(i.lights.headIndex+1)*9?co:Ps}),i.lights.headIndex=(i.lights.headIndex+2)%3)}function jL(i){if(i.lights.frameLastRefresh++,i.lights.frameLastRefresh>z8){const e=i.lights.bulbs[0].intensity;i.lights.frameLastRefresh=0,i.lights.bulbs.forEach(t=>{t.intensity=e==co?Ps:co})}}async function WL({scene:i}){const t=(await i.loadModel(OL)).scene,n=new Map,s=new x,r=[];return t.traverse(a=>{if(a.isMesh){const{material:o}=a,l=o.userData,d=l.name;if(l.collider){const c=br(n,d);c.kinematic=c.kinematic||l.kinematic,c.meshes.push({friction:l.friction,restitution:l.restitution,kinematic:l.kinematic,cuboid:l.cuboid,rotation:l.rotation?new x().fromArray(l.rotation):void 0,size:l.size?new x().fromArray(l.size):void 0,data:a})}l.light?(r[a.material.userData.index]=a.material,br(n,d).meshes.push({data:a})):br(n,d).meshes.push({data:a})}else a.userData.collider?br(n,a.userData.name).colliders.push({friction:a.userData.friction,restitution:a.userData.restitution,kinematic:a.userData.kinematic,position:a.position,rotation:new x().fromArray(a.userData.rotation),size:new x().fromArray(a.userData.size)}):a.name===XL&&s.copy(a.position)}),{parts:n,lightBulbsMaterials:r,deliveryPosition:s}}function br(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[],colliders:[]},i.set(e,t)),t}function UL({scene:i,parts:e}){let t=0;e.forEach(n=>{const{meshes:s,kinematic:r,colliders:a}=n,o=n.body=r?i.createKinematicBody():i.createFixedBody();o.setEnabled(!1),s.forEach(({data:l,friction:d,restitution:c,cuboid:u})=>{if(u){const p=l.geometry.boundingBox,h=new x().addVectors(p.min,p.max).multiplyScalar(.5).toArray(),b=new x(p.max.x-p.min.x,p.max.y-p.min.y,p.max.z-p.min.z);i.createCuboidCollider({position:h,width:b.x,height:b.y,depth:b.z,friction:d,restitution:c},o).setCollisionGroups(1<<t%16<<16|1<<t%16),t++}}),a.forEach(({friction:l,restitution:d,position:c,rotation:u,size:p})=>{i.createCuboidCollider({position:c,width:p.x,height:p.y,depth:p.z,rotation:u,friction:l,restitution:d},o).setCollisionGroups(1<<t%16<<16|1<<t%16),t++})})}function qL({lightBulbsMaterials:i,lights:e}){i.forEach((t,n)=>{t.emissive.setHex(AL),t.emissiveIntensity=Ps,e.bulbs[n]={intensity:Ps}})}const n2="coin",i2=1280,Dr=.03,h7=.007,q5=.025,G5=.001,GL=[-.1125,0,.1125],Z5=[0,.9,-.32+h7/2],ZL=[0,0,0],YL=[0,0,0,1],kL=new x(0,0,0),JL=new x(0,0,0),I8=new x(0,0,0),KL=new x(1,1,1),BL=new Ne(Math.PI/2,0,0),QL=.1,_L=1,$L=.5,eM=.5,tM=0,nM="./assets/coin.glb",iM=8,sM=.001,rM=new Ne(0,0,0,"XYZ"),r1=Math.PI/4,aM=10,oM=6,uo=Math.PI/360,lM=2,dM=5;let po=.2,fo=1;class Xe{static TYPE=n2;static MAX_INSTANCES=i2;static RADIUS=Dr;static DEPTH=h7;static#e;static#t=[];static#n=[];static#o=[];static#a=0;static#r;static async initialize({scene:e,onSpawnedCoin:t}){this.#e=e,this.#r=t;const{materials:n,geometries:s}=await cM({scene:e});this.#t=uM({scene:e,materials:n,geometries:s}),this.#n=[],pM({scene:e,instances:this.#n})}static getCoin({index:e}){return this.#n[e]}static update(){if(this.#o.length&&(this.#a++,this.#a>=iM)){const{slot:e}=this.#o.shift(),t=this.#n.find(n=>!n.used);t.used=!0,vr({instance:t,slot:e}),t.body.setEnabled(!0),this.#r(t),this.#a=0}for(const e of this.#n)if(e.used){const t=e.body.linvel();e.linearSpeed=t.x*t.x+t.y*t.y+t.z*t.z;const n=e.body.isSleeping();if(e.angularVelocityHistory.length>aM&&e.angularVelocityHistory.shift(),e.pendingImpulse&&e.body.mass()>0)e.body.applyImpulse(e.pendingImpulse,!0),e.pendingImpulse=null;else if(n)e.sleepCandidateFrames=0;else if(!n){const s=e.body.angvel();e.angularVelocityHistory.push([s.x,s.z]);const r=Math.abs(s.x),a=Math.abs(s.z);e.linearSpeed&&e.linearSpeed<sM&&r<uo&&a<uo&&hM(e)&&mM(e.angularVelocityHistory)?(e.sleepCandidateFrames++,e.sleepCandidateFrames>dM&&(e.body.sleep(),e.sleepCandidateFrames=0)):e.sleepCandidateFrames=0}j3({instance:e,meshes:this.#t})}}static dropCoin({slot:e}){this.#o.push({slot:e})}static dropCoins({count:e}){let t;for(let n=0;n<e;n++){let s;do s=Math.floor(Math.random()*3);while(s===t);t=s,this.#o.push({slot:s})}}static depositCoin({position:e,rotation:t=new x(0,0,0),impulse:n}){const s=this.#n.find(r=>!r.used);return s.used=!0,vr({instance:s,position:e,rotation:t}),s.body.setEnabled(!0),n&&(s.pendingImpulse=n.clone()),s}static depositCoins({position:e,count:t}){e.x=-.3;for(let n=0;n<t;n++){const s=this.#n.find(a=>!a.used);s.used=!0,e.x+=Dr*2,e.x>.3&&(e.x=-.3,e.z-=Dr*2);const r=new x(0,0,0);vr({instance:s,position:e,rotation:r}),s.body.setEnabled(!0)}}static recycle(e){e.used=!1,e.linearSpeed=0,e.angularVelocityHistory=[],e.sleepCandidateFrames=0,e.body.setEnabled(!1),vr({instance:e,hidden:!0}),j3({instance:e,meshes:this.#t,forceRefresh:!0})}static get dynamicBodies(){return this.#n.filter(e=>e.used).map(e=>({object:e,objects:this,body:e.body}))}static get usedCoins(){return this.#n.filter(e=>e.used).length}static save(){return this.#n.map(e=>({position:e.position.toArray(),rotation:e.rotation.toArray(),used:e.used,bodyHandle:this.#n[e.index].body.handle,linearSpeed:e.linearSpeed,angularVelocityHistory:e.angularVelocityHistory,sleepCandidateFrames:e.sleepCandidateFrames,pendingImpulse:e.pendingImpulse?e.pendingImpulse.toArray():null}))}static load(e){e.forEach((t,n)=>{const s=this.#e.worldBodies.get(t.bodyHandle);this.#n[n]={...this.#n[n],position:new x().fromArray(t.position),rotation:new _0().fromArray(t.rotation),used:t.used,body:s,linearSpeed:t.linearSpeed,angularVelocityHistory:t.angularVelocityHistory,sleepCandidateFrames:t.sleepCandidateFrames,pendingImpulse:t.pendingImpulse?new x().fromArray(t.pendingImpulse):null};for(let r=0;r<s.numColliders();r++){const a=s.collider(r);a.userData={objectType:n2,index:n}}j3({instance:this.#n[n],meshes:this.#t,forceRefresh:!0})})}static enableCcd(e,t){e&&e.body&&e.body.enableCcd(t)}static get friction(){return po}static set friction(e){po=e,this.#n.forEach(t=>{t.body.collider(0).setFriction(e)})}static get density(){return fo}static set density(e){fo=e,this.#n.forEach(t=>{t.body.collider(0).setDensity(e)})}}async function cM({scene:i}){const e=await i.loadModel(nM);e.scene.traverse(o=>{o.isMesh&&(o.castShadow=!0,o.receiveShadow=!0)});const t=e.scene.children[0],n=t.children[0].material,s=t.children[1].material,r=t.children[0].geometry,a=t.children[1].geometry;return s.metalness=.35,n.metalness=.2,{materials:[n,s],geometries:[r,a]}}function uM({scene:i,materials:e,geometries:t}){const n=[];for(let s=0;s<e.length;s++){const r=new Ai(t[s],e[s],i2);for(let a=0;a<i2;a++)r.setMatrixAt(a,I8);r.castShadow=!0,r.receiveShadow=!0,i.addObject(r),n.push(r)}return n}function pM({scene:i,instances:e}){for(let t=e.length;t<i2;t++)fM({scene:i,instances:e})}function fM({scene:i,instances:e}){const t=i.createDynamicBody();t.setEnabled(!1),t.setSoftCcdPrediction(QL),t.setAngularDamping($L),t.setLinearDamping(eM),t.setAdditionalSolverIterations(_L);const n=e.length;i.createCylinderCollider({userData:{objectType:n2,index:n},radius:Dr,height:h7,friction:po,restitution:tM,density:fo},t);const s={objectType:n2,index:n,position:new x,rotation:new _0,body:t,matrix:new K0,used:!1,pendingImpulse:null,angularVelocityHistory:[],sleepCandidateFrames:0};return e.push(s),s}function vr({instance:i,hidden:e,position:t,rotation:n,slot:s=1}){if(e)i.position.fromArray(ZL),i.rotation.fromArray(YL),i.body.setLinvel(kL,!1),i.body.setAngvel(JL,!1);else{if(t)i.position.copy(t);else{const r=Math.random();i.position.fromArray([GL[s]+(r<.5?-q5:q5)*Math.random()+(r<.5?-G5:G5),Z5[1],Z5[2]])}if(n)i.rotation.setFromEuler(new Ne(n.x,n.y,n.z));else{const r=BL.clone();r.x+=Math.random()<=.5?Math.PI:0,i.rotation.setFromEuler(r)}}i.body.setTranslation(i.position),i.body.setRotation(i.rotation)}function j3({instance:i,meshes:e,forceRefresh:t}){i.position.copy(i.body.translation()),i.rotation.copy(i.body.rotation()),i.matrix.compose(i.position,i.rotation,i.used?KL:I8),(i.used||t)&&e.forEach(n=>{n.setMatrixAt(i.index,i.matrix),n.instanceMatrix.needsUpdate=!0})}function hM(i){const e=rM.setFromQuaternion(i.rotation);return(Math.abs(e.x)<r1||Math.abs(e.x-Math.PI)<r1||Math.abs(e.x+Math.PI)<r1)&&(Math.abs(e.z)<r1||Math.abs(e.z-Math.PI)<r1||Math.abs(e.z+Math.PI)<r1)}function mM(i){return i.length>oM&&(Y5(0,i)||Y5(1,i))}function Y5(i,e){let t=Math.sign(e[0][i]),n=0,s=e[0][i],r=e[0][i];for(let a=1;a<e.length;a++){const o=e[a][i],l=Math.sign(o);l!==0&&l!==t&&(n++,t=l),o<s&&(s=o),o>r&&(r=o)}return n>=lM&&r-s<uo}const s2="token",r2=16,yM=.0375,bM=.0075,W3=[0,.5,.55],a2=.6,k5=.1,vM=[0,0,0],gM=[0,0,0,1],wM=new x(0,0,0),TM=new x(0,0,0),X8=new x(0,0,0),xM=new x(1,1,1),U3=new Ne(0,0,0),SM=.1,PM=0,HM=0,RM=0,NM=.3,LM=.2,MM=.5,EM="./assets/token.glb",ho=[{color:255,background:16777215},{color:32768,background:16777215},{color:0,background:16777215},{color:16711935,background:16777215},{color:16711680,background:16777215},{color:16777215,background:16777215}],Li=ho.length;class Bt{static TYPE=s2;static MAX_INSTANCES=r2;static TYPES=Li;static#e;static#t;static#n;static async initialize({scene:e}){this.#e=e;const{materials:t,geometries:n}=await OM({scene:e});this.#t=zM({scene:e,materials:t,geometries:n}),this.#n=[],IM({scene:e,instances:this.#n})}static getToken({type:e,index:t}){return this.#n[e][t]}static update(){for(let e=0;e<Li;e++){for(const t of this.#n[e])t.used&&q3({instance:t,meshes:this.#t[e]});this.#t[e].forEach(t=>t.instanceMatrix.needsUpdate=!0)}}static dropToken({type:e}){const t=this.#n[e].find(n=>!n.used);t.used=!0,gr({instance:t}),t.body.setEnabled(!0)}static depositTokens({position:e,count:t}){for(let n=0;n<t;n++){const s=this.#n[Math.floor(Math.random()*(Li-1))].find(a=>!a.used);s.used=!0,e.x=Math.random()*a2-a2/2;const r=new x(0,0,0);gr({instance:s,position:e,rotation:r}),s.body.setEnabled(!0)}}static depositToken({position:e,rotation:t}){const n=this.#n[Math.floor(Math.random()*(Li-1))].find(s=>!s.used);return n.used=!0,gr({instance:n,position:e,rotation:t}),n.body.setEnabled(!0),n}static recycle(e){e.used=!1,e.body.setEnabled(!1),gr({instance:e,hidden:!0}),q3({instance:e,meshes:this.#t[e.type]})}static get dynamicBodies(){const e=[];for(let t=0;t<Li;t++)for(const n of this.#n[t])n.used&&e.push({object:n,objects:this,body:n.body});return e}static save(){return this.#n.map(e=>e.map(t=>({position:t.position.toArray(),rotation:t.rotation.toArray(),used:t.used,bodyHandle:this.#n[t.type][t.index].body.handle})))}static load(e){e.forEach((t,n)=>{t.forEach((s,r)=>{const a=this.#e.worldBodies.get(s.bodyHandle),o=this.#n[n][r];this.#n[n][r]={...o,position:new x().fromArray(s.position),rotation:new _0().fromArray(s.rotation),used:s.used,body:a};for(let l=0;l<a.numColliders();l++){const d=a.collider(l);d.userData={objectType:s2,type:n,index:r}}q3({instance:this.#n[n][r],meshes:this.#t[n]})})})}}async function OM({scene:i}){const t=(await i.loadModel(EM)).scene.children,n=[],s=[];for(let r=0;r<t.length;r++){const a=t[r],o=a.children[0].material.clone();o.color.setHex(ho[r].color);const l=a.children[1].material.clone();l.color.setHex(ho[r].background),n.push([o,l]),s.push([a.children[0].geometry,a.children[1].geometry])}return{materials:n,geometries:s}}function zM({scene:i,materials:e,geometries:t}){const n=[];for(let s=0;s<Li;s++){const r=[];for(let a=0;a<e[s].length;a++){const o=new Ai(t[s][a],e[s][a],r2);for(let l=0;l<r2;l++)o.setMatrixAt(l,X8);i.addObject(o),r.push(o)}n.push(r)}return n}function IM({scene:i,instances:e}){for(let t=0;t<Li;t++){e[t]=[];for(let n=e[t].length;n<r2;n++)XM({scene:i,type:t,instances:e})}}function XM({scene:i,type:e,instances:t}){const n=i.createDynamicBody();n.setEnabled(!1),n.setSoftCcdPrediction(SM),n.setAngularDamping(HM),n.setLinearDamping(RM),n.setAdditionalSolverIterations(PM);const s=t[e].length;i.createCylinderCollider({userData:{objectType:s2,type:e,index:s},radius:yM,height:bM,friction:NM,restitution:LM,density:MM},n);const r={objectType:s2,index:s,type:e,position:new x,rotation:new _0,body:n,matrix:new K0,used:!1};return t[e].push(r),r}function gr({instance:i,hidden:e,position:t,rotation:n}){e?(i.position.fromArray(vM),i.rotation.fromArray(gM),i.body.setLinvel(wM,!1),i.body.setAngvel(TM,!1)):(t?i.position.copy(t):i.position.fromArray([W3[0]+Math.random()*a2-a2/2,W3[1],W3[2]+Math.random()*k5-k5/2]),n?i.rotation.setFromEuler(new Ne(n.x,n.y,n.z)):i.rotation.setFromEuler(new Ne(U3.x+Math.random()*Math.PI*2,U3.y+Math.random()*Math.PI*2,U3.z+Math.random()*Math.PI*2))),i.body.setTranslation(i.position),i.body.setRotation(i.rotation)}function q3({instance:i,meshes:e}){i.position.copy(i.body.translation()),i.rotation.copy(i.body.rotation()),i.matrix.compose(i.position,i.rotation,i.used?xM:X8),e.forEach(t=>t.setMatrixAt(i.index,i.matrix))}const o2="card",l2=8,AM=.11,CM=.175,FM=.005,G3=[0,.6,.5],d2=.2,J5=.2,VM=[0,0,0],DM=[0,0,0,1],jM=new x(0,0,0),WM=new x(0,0,0),A8=new x(0,0,0),UM=new x(1,1,1),Z3=new Ne(0,0,0),qM=.1,GM=0,ZM=0,YM=0,kM=.1,JM=.1,KM=.8,BM="./assets/card.glb",mo=[{color:16777215,background:12775},{color:16777215,background:47106},{color:16777215,background:16761095},{color:16777215,background:12189716},{color:16777215,background:5505255},{color:16777215,background:15155712},{color:0,background:16777215}],h1=mo.length;class Zt{static TYPE=o2;static MAX_INSTANCES=l2;static TYPES=h1;static#e;static#t;static#n;static async initialize({scene:e}){this.#e=e;const{materials:t,geometries:n}=await QM({scene:e});this.#t=_M({scene:e,materials:t,geometries:n}),this.#n=[],$M({scene:e,instances:this.#n})}static getCard({type:e,index:t}){return this.#n[e][t]}static update(){for(let e=0;e<h1;e++){for(const t of this.#n[e])t.used&&Tr({instance:t,meshes:this.#t[e]});this.#t[e].forEach(t=>t.instanceMatrix.needsUpdate=!0)}}static depositCard({type:e,position:t,rotation:n}){const s=this.#n[e].find(r=>!r.used);return s.used=!0,wr({instance:s,position:t,rotation:n}),s.body.setEnabled(!0),Tr({instance:s,meshes:this.#t[e]}),s}static dropCard({type:e}){const t=this.#n[e].find(n=>!n.used);t.used=!0,wr({instance:t}),t.body.setEnabled(!0)}static depositCards({position:e,count:t}){for(let n=0;n<t;n++){const s=this.#n[Math.floor(Math.random()*(h1-1))].find(a=>!a.used);s.used=!0,e.x=Math.random()*d2-d2/2;const r=new x(0,0,0);wr({instance:s,position:e,rotation:r}),s.body.setEnabled(!0)}}static recycle(e){e.used=!1,e.body.setEnabled(!1),wr({instance:e,hidden:!0}),Tr({instance:e,meshes:this.#t[e.type]})}static get dynamicBodies(){const e=[];for(let t=0;t<h1;t++)for(const n of this.#n[t])n.used&&e.push({object:n,objects:this,body:n.body});return e}static save(){return this.#n.map(e=>e.map(t=>({position:t.position.toArray(),rotation:t.rotation.toArray(),used:t.used,bodyHandle:this.#n[t.type][t.index].body.handle})))}static load(e){e.forEach((t,n)=>{t.forEach((s,r)=>{const a=this.#e.worldBodies.get(s.bodyHandle),o=this.#n[n][r];this.#n[n][r]={...o,position:new x().fromArray(s.position),rotation:new _0().fromArray(s.rotation),used:s.used,body:a};for(let l=0;l<a.numColliders();l++){const d=a.collider(l);d.userData={objectType:o2,type:n,index:r}}Tr({instance:this.#n[n][r],meshes:this.#t[n]})})})}}async function QM({scene:i}){const t=(await i.loadModel(BM)).scene.children,n=[],s=[];for(let r=0;r<t.length;r++){const a=t[r],o=a.children[0].material.clone();o.color.setHex(mo[r].color);const l=a.children[1].material.clone();l.color.setHex(mo[r].background),n.push([o,l]),s.push([a.children[0].geometry,a.children[1].geometry])}return{materials:n,geometries:s}}function _M({scene:i,materials:e,geometries:t}){const n=[];for(let s=0;s<h1;s++){const r=[];for(let a=0;a<e[s].length;a++){const o=new Ai(t[s][a],e[s][a],l2);for(let l=0;l<l2;l++)o.setMatrixAt(l,A8);i.addObject(o),r.push(o)}n.push(r)}return n}function $M({scene:i,instances:e}){for(let t=0;t<h1;t++){e[t]=[];for(let n=e[t].length;n<l2;n++)eE({scene:i,type:t,instances:e})}}function eE({scene:i,type:e,instances:t}){const n=i.createDynamicBody();n.setEnabled(!1),n.setSoftCcdPrediction(qM),n.setAngularDamping(ZM),n.setLinearDamping(YM),n.setAdditionalSolverIterations(GM);const s=t[e].length;i.createCuboidCollider({userData:{objectType:o2,type:e,index:s},width:CM,height:FM,depth:AM,friction:kM,restitution:JM,density:KM},n);const r={objectType:o2,index:s,type:e,position:new x,rotation:new _0,body:n,matrix:new K0,used:!1};return t[e].push(r),r}function wr({instance:i,hidden:e,position:t,rotation:n}){e?(i.position.fromArray(VM),i.rotation.fromArray(DM),i.body.setLinvel(jM,!1),i.body.setAngvel(WM,!1)):(t?i.position.copy(t):i.position.fromArray([G3[0]+Math.random()*d2-d2/2,G3[1],G3[2]+Math.random()*J5-J5/2]),n?i.rotation.setFromEuler(new Ne(n.x,n.y,n.z)):i.rotation.setFromEuler(new Ne(Z3.x+Math.random()*Math.PI*2,Z3.y+Math.random()*Math.PI*2,Z3.z+Math.random()*Math.PI*2))),i.body.setTranslation(i.position),i.body.setRotation(i.rotation)}function Tr({instance:i,meshes:e}){i.position.copy(i.body.translation()),i.rotation.copy(i.body.rotation()),i.matrix.compose(i.position,i.rotation,i.used?UM:A8),e.forEach(t=>t.setMatrixAt(i.index,i.matrix))}const c2="ingot",u2=8,Y3=[0,.6,.5],p2=.2,K5=.2,tE=[0,0,0],nE=[0,0,0,1],iE=new x(0,0,0),sE=new x(0,0,0),C8=new x(0,0,0),rE=new x(1,1,1),k3=new Ne(0,0,0),aE=.1,oE=0,lE=0,dE=0,cE=.05,uE=0,pE=2,fE="./assets/ingot.glb";class Fn{static TYPE=c2;static MAX_INSTANCES=u2;static#e;static#t;static#n;static async initialize({scene:e}){this.#e=e;const{materials:t,geometries:n}=await hE({scene:e});this.#t=yE({scene:e,materials:t,geometries:n}),this.#n=[];const s=mE(this.#t[0].geometry);bE({scene:e,instances:this.#n,colliderData:s})}static getIngot({index:e}){return this.#n[e]}static update(){for(const e of this.#n)e.used&&K3({instance:e,meshes:this.#t});this.#t.forEach(e=>e.instanceMatrix.needsUpdate=!0)}static dropIngot(){const e=this.#n.find(t=>!t.used);e.used=!0,J3({instance:e}),e.body.setEnabled(!0)}static depositIngots({position:e,count:t}){for(let n=0;n<t;n++){const s=this.#n.find(a=>!a.used);s.used=!0,e.x=Math.random()*p2-p2/2;const r=new x(0,0,0);J3({instance:s,position:e,rotation:r}),s.body.setEnabled(!0)}}static recycle(e){e.used=!1,e.body.setEnabled(!1),J3({instance:e,hidden:!0}),K3({instance:e,meshes:this.#t})}static get dynamicBodies(){const e=[];for(const t of this.#n)t.used&&e.push({object:t,objects:this,body:t.body});return e}static save(){return this.#n.map(e=>({position:e.position.toArray(),rotation:e.rotation.toArray(),used:e.used,bodyHandle:this.#n[e.index].body.handle}))}static load(e){e.forEach((t,n)=>{const s=this.#e.worldBodies.get(t.bodyHandle),r=this.#n[n];this.#n[n]={...r,position:new x().fromArray(t.position),rotation:new _0().fromArray(t.rotation),used:t.used,body:s};for(let a=0;a<s.numColliders();a++){const o=s.collider(a);o.userData={objectType:c2,index:n}}K3({instance:this.#n[n],meshes:this.#t})})}}async function hE({scene:i}){const t=(await i.loadModel(fE)).scene.children[0].children,n=t[0].material,s=t[1].material;return{materials:[n,s],geometries:[t[0].geometry,t[1].geometry]}}function mE(i){const e=i.attributes.position,t=[],n=[],s=i.index;for(let r=0;r<e.count;r++)t.push(e.getX(r),e.getY(r),e.getZ(r));for(let r=0;r<s.count;r++)n.push(s.getX(r));return{vertices:t,indices:n}}function yE({scene:i,materials:e,geometries:t}){const n=[];for(let s=0;s<e.length;s++){const r=new Ai(t[s],e[s],u2);for(let a=0;a<u2;a++)r.setMatrixAt(a,C8);i.addObject(r),n.push(r)}return n}function bE({scene:i,instances:e,colliderData:t}){for(let n=e.length;n<u2;n++)vE({scene:i,instances:e,colliderData:t})}function vE({scene:i,instances:e,colliderData:{vertices:t,indices:n}}){const s=i.createDynamicBody();s.setEnabled(!1),s.setSoftCcdPrediction(aE),s.setAngularDamping(lE),s.setLinearDamping(dE),s.setAdditionalSolverIterations(oE);const r=e.length;i.createConvexHullCollider({userData:{objectType:c2,index:r},vertices:t,indices:n,friction:cE,restitution:uE,density:pE},s);const a={objectType:c2,index:r,position:new x,rotation:new _0,body:s,matrix:new K0,used:!1};return e.push(a),a}function J3({instance:i,hidden:e,position:t,rotation:n}){e?(i.position.fromArray(tE),i.rotation.fromArray(nE),i.body.setLinvel(iE,!1),i.body.setAngvel(sE,!1)):(t?i.position.copy(t):i.position.fromArray([Y3[0]+Math.random()*p2-p2/2,Y3[1],Y3[2]+Math.random()*K5-K5/2]),n?i.rotation.setFromEuler(new Ne(n.x,n.y,n.z)):i.rotation.setFromEuler(new Ne(k3.x+Math.random()*Math.PI*2,k3.y+Math.random()*Math.PI*2,k3.z+Math.random()*Math.PI*2))),i.body.setTranslation(i.position),i.body.setRotation(i.rotation)}function K3({instance:i,meshes:e}){i.position.copy(i.body.translation()),i.rotation.copy(i.body.rotation()),i.matrix.compose(i.position,i.rotation,i.used?rE:C8),e.forEach(t=>t.setMatrixAt(i.index,i.matrix))}const m7=24,gE=.04,wE=.055,TE=.002,xE=[0,0,0],SE=[0,0,0,1],F8=new x(0,0,0);new x(1,1,1);const PE="./assets/digit.glb",f2=11,ds=[{color:16777215,background:0},{color:0,background:16777215},{color:65280,background:0}],Hs=ds.length;class st{static MAX_INSTANCES=m7;static TYPES=f2;static COLORS=Hs;static WIDTH=gE;static HEIGHT=wE;static DEPTH=TE;static#e;static#t;static async initialize({scene:e}){const{materials:t,geometries:n}=await HE({scene:e});this.#e=RE({scene:e,materials:t,geometries:n}),this.#t=[],NE({instances:this.#t})}static update(){for(let e=0;e<Hs;e++)for(let t=0;t<f2;t++){for(const n of this.#t[e][t])n.used&&Q5({instance:n,meshes:this.#e[e][t]});this.#e[e][t].forEach(n=>n.instanceMatrix.needsUpdate=!0)}}static addDigit({type:e,color:t,position:n,rotation:s,scale:r}){const a=this.#t[t][e].find(o=>!o.used);return a.used=!0,a.initialPosition=n,a.initialRotation=s,a.initialScale=r,B5({instance:a,position:n,rotation:s,scale:r}),a}static setVisible(e,t){B5({instance:e,hidden:!t,position:e.initialPosition,rotation:e.initialRotation,scale:e.initialScale}),Q5({instance:e,meshes:this.#e[e.color][e.type]})}static getBackgroundColor(e){return ds[e].background}}async function HE({scene:i}){const t=(await i.loadModel(PE)).scene.children,n=[],s=[];for(let r=0;r<Hs;r++){const a=[],o=[];for(let c=0;c<t.length-1;c++){const u=t[c],p=u.children[0].material.clone();p.color.setHex(ds[r].color);const h=u.children[1].material.clone();h.color.setHex(ds[r].background),a.push([p,h]),o.push([u.children[0].geometry,u.children[1].geometry])}const l=t[t.length-1],d=l.material.clone();d.color.setHex(ds[r].background),a.push([d]),o.push([l.geometry]),n.push(a),s.push(o)}return{materials:n,geometries:s}}function RE({scene:i,materials:e,geometries:t}){const n=[];for(let s=0;s<Hs;s++){const r=[];for(let a=0;a<f2;a++){const o=[];for(let l=0;l<e[s][a].length;l++){const d=new Ai(t[s][a][l],e[s][a][l],m7);i.addObject(d),o.push(d)}r.push(o)}n.push(r)}return n}function NE({instances:i}){for(let e=0;e<Hs;e++){i[e]=[];for(let t=0;t<f2;t++){i[e][t]=[];for(let n=i[e][t].length;n<m7;n++)LE({type:t,color:e,instances:i})}}}function LE({type:i,color:e,instances:t}){const s={index:t[e][i].length,type:i,color:e,position:new x,rotation:new _0,scale:new x(1,1,1),matrix:new K0,used:!1};return t[e][i].push(s),s}function B5({instance:i,hidden:e,position:t,rotation:n,scale:s}){e?(i.position.fromArray(xE),i.rotation.fromArray(SE),i.scale.fromArray(F8)):(i.position.fromArray([t.x,t.y,t.z]),i.rotation.setFromEuler(new Ne(n.x,n.y,n.z)),i.scale.fromArray([s.x,s.y,s.z]))}function Q5({instance:i,meshes:e}){i.matrix.compose(i.position,i.rotation,i.used?i.scale:F8),e.forEach(t=>t.setMatrixAt(i.index,i.matrix))}class ME{constructor({scene:e}){this.#e=e,this.#t=new WeakMap}#e;#t;initialize(){}update(){const e=new WeakMap;this.#e.forEachCollision((t,n)=>{if(t.onIntersect!==void 0||n.onIntersect!==void 0){_5(e,t,n),_5(e,n,t);let s=!1;this.#t.has(t)&&this.#t.get(t).has(n)&&(s=!0),!s&&t.onIntersect!==void 0&&t.onIntersect(n)}}),this.#t=e}}function _5(i,e,t){i.has(e)||i.set(e,new WeakSet),i.get(e).add(t)}const EE=10,Kt=.015,OE=10;class xr{constructor({scene:e,position:t,rotation:n,scale:s,digitsCount:r,color:a}){this.#e=e,this.#t=r,this.#n=a,this.#o=t,this.#a=n,this.#r=s||[1,1,1]}#e;#t;#n;#o;#a;#r;#c=[];#i=0;async initialize(){for(let e=0;e<this.#t;e++){this.#c[e]=[];for(let t=0;t<OE;t++){const n=this.#o[0]+e*st.WIDTH*this.#r[0],s=this.#o[1],r=this.#o[2];this.#c[e][t]=st.addDigit({type:t,color:this.#n,position:new x(n,s,r),rotation:new x(Math.PI/2+this.#a[0],this.#a[1],this.#a[2]),scale:new x(this.#r[0],this.#r[2],this.#r[1])})}}this.#s()}#s(){const e=new ci,t=this.#t*st.WIDTH,n=new O1({color:st.getBackgroundColor(this.#n),roughness:.5,metalness:0}),s=new Be(new en((t+2*Kt)*this.#r[0],Kt*this.#r[1],st.DEPTH*this.#r[2]),n);s.position.set((t/2-st.WIDTH/2)*this.#r[0],(st.HEIGHT/2+Kt/2)*this.#r[1],0);const r=new Be(new en((t+2*Kt)*this.#r[0],Kt*this.#r[1],st.DEPTH*this.#r[2]),n);r.position.set((t/2-st.WIDTH/2)*this.#r[0],(-.055/2-Kt/2)*this.#r[1],0);const a=new Be(new en(Kt*this.#r[0],(st.HEIGHT+2*Kt)*this.#r[1],st.DEPTH*this.#r[2]),n);a.position.set((-Kt/2-st.WIDTH/2)*this.#r[0],0,0);const o=new Be(new en(Kt*this.#r[0],(st.HEIGHT+2*Kt)*this.#r[1],st.DEPTH*this.#r[2]),n);o.position.set((t+Kt/2-st.WIDTH/2)*this.#r[0],0,0),e.add(s),e.add(r),e.add(a),e.add(o),this.#e.addObject(e),e.position.fromArray(this.#o),e.rotation.fromArray([this.#a[0],this.#a[1],this.#a[2]])}set(e){const t=String(Math.max(0,e)).padStart(this.#t,"0").split("");for(let n=0;n<this.#t;n++)for(let s=0;s<10;s++){const r=this.#c[n][s];st.setVisible(r,s==t[n])}}update(){this.#i++,this.#i>EE&&(st.update(),this.#i=0)}}const zE=8,IE=0,XE=[-.35,1.115,-.33],AE=[0,0,0],CE=4,FE=0,VE=[.79,1.115,-.33],DE=[0,0,0],jE=6,WE=0,UE=[.15,1.115,-.33],qE=[0,0,0],GE=4,ZE=0,YE=[-.8275,.22,.77],kE=[0,0,0],JE=[.7,.7,1];class KE{constructor({scene:e,cabinet:t,state:n}){this.#e=e,this.#t=t,this.#n=n}#e;#t;#n;#o;#a;#r;#c;async initialize(){this.#o=new xr({scene:this.#e,position:XE,rotation:AE,digitsCount:zE,color:IE}),await this.#o.initialize(),this.#a=new xr({scene:this.#e,position:UE,rotation:qE,digitsCount:jE,color:WE}),await this.#a.initialize(),this.#r=new xr({scene:this.#e,position:VE,rotation:DE,digitsCount:CE,color:FE}),await this.#r.initialize(),this.#c=new xr({scene:this.#e,position:YE,rotation:kE,scale:JE,digitsCount:GE,color:ZE}),await this.#c.initialize()}update(){this.#o.set(this.#n.score),this.#a.set(this.#n.points),this.#r.set(this.#n.coins),this.#c.set(this.#t.coinsInPlay),this.#o.update(),this.#r.update(),this.#c.update(),this.#a.update()}}const V8=15198183,BE=16777215,D8=.1,QE=.25,_E=16777215,j8=0,$E=.25,h2=5,eO=6,B3=[0,.335,-.27],tO=.6,nO=.01,$5=.04,iO=-.22,e6=.22,sO=.075,rO=1/5,aO=5,oO=5,t6="sensor-gate",lO="./assets/sensor-gate.glb",Ke={OFF:Symbol.for("sensor-gate-off"),ACTIVATING:Symbol.for("sensor-gate-activating"),FLASHING_ON:Symbol.for("sensor-gate-flashing-on"),FLASHING_OFF:Symbol.for("sensor-gate-flashing-off"),LOCKED_ON:Symbol.for("sensor-gate-locked-on")},rt={IDLE:Symbol.for("sensor-letter-idle"),ACTIVATING:Symbol.for("sensor-letter-activating"),FLASHING_ON:Symbol.for("sensor-letter-flashing-on"),FLASHING_OFF:Symbol.for("sensor-letter-flashing-off"),AWAITING_BONUS_DELIVERY:Symbol.for("sensor-letter-awaiting-bonus-delivery"),AWAITING_BONUS_DELIVERED:Symbol.for("sensor-letter-awaiting-bonus-delivered")};class dO{constructor({scene:e,onBonusWon:t,onCoinFallen:n}){this.#e=e,this.#t=t,this.#n=n}#e;#t;#n;#o;#a;#r={state:rt.IDLE,nextState:null,frameFlashStart:-1,flashCount:0,letters:[{state:Ke.OFF,nextState:null,frameFlashStart:-1,flashCount:0},{state:Ke.OFF,nextState:null,frameFlashStart:-1,flashCount:0},{state:Ke.OFF,nextState:null,frameFlashStart:-1,flashCount:0},{state:Ke.OFF,nextState:null,frameFlashStart:-1,flashCount:0},{state:Ke.OFF,nextState:null,frameFlashStart:-1,flashCount:0},{state:Ke.OFF,nextState:null,frameFlashStart:-1,flashCount:0}]};async initialize(){this.#o=await pO({scene:this.#e}),this.#a=this.#e.createCuboidCollider({width:tO,height:nO,depth:$5,position:[B3[0],B3[1],B3[2]-$5],sensor:!0,userData:{objectType:t6,onIntersect:e=>n6({userData:e,sensor:this.#r,onCoinFallen:this.#n})}})}update(){this.#r.letters.forEach(e=>uO({letter:e})),this.#r.state===rt.IDLE&&this.#r.letters.every(e=>e.state===Ke.LOCKED_ON)&&(this.#r.state=rt.ACTIVATING),cO({sensor:this.#r}),this.#r.state===rt.AWAITING_BONUS_DELIVERED&&(this.#r.letters.forEach(e=>e.state=Ke.OFF),this.#t()),this.#r.letters.forEach((e,t)=>{const n=this.#o[t];e.state===Ke.FLASHING_ON||this.#r.state===rt.FLASHING_ON||this.#r.state===rt.AWAITING_BONUS_DELIVERY||this.#r.state===rt.IDLE&&e.state===Ke.LOCKED_ON?(n.color.setHex(BE),n.opacity=QE,n.emissiveIntensity=$E):(n.color.setHex(V8),n.opacity=D8,n.emissiveIntensity=j8)}),this.#r.nextState&&(this.#r.state=this.#r.nextState),this.#r.letters.forEach(e=>{e.nextState&&(e.state=e.nextState)})}save(){return{colliderHandle:this.#a.handle,sensor:{state:this.#r.state.description,nextState:this.#r.nextState?this.#r.nextState.description:null,frameFlashStart:this.#r.frameFlashStart,flashCount:this.#r.flashCount,letters:this.#r.letters.map(e=>({state:e.state.description,nextState:e.nextState?e.nextState.description:null,frameFlashStart:e.frameFlashStart,flashCount:e.flashCount}))}}}load(e){this.#a=this.#e.worldColliders.get(e.colliderHandle),this.#a.userData={objectType:t6,onIntersect:t=>n6({sensor:this.#r,userData:t,onCoinFallen:this.#n})},this.#r.state=Symbol.for(e.sensor.state),this.#r.nextState=e.sensor.nextState?Symbol.for(e.sensor.nextState):null,this.#r.frameFlashStart=e.sensor.frameFlashStart,this.#r.flashCount=e.sensor.flashCount,this.#r.letters.forEach((t,n)=>{t.state=Symbol.for(e.sensor.letters[n].state),t.nextState=e.sensor.letters[n].nextState?Symbol.for(e.sensor.letters[n].nextState):null,t.frameFlashStart=e.sensor.letters[n].frameFlashStart,t.flashCount=e.sensor.letters[n].flashCount})}}function n6({sensor:i,userData:e,onCoinFallen:t}){if(e.objectType===Xe.TYPE){const n=Xe.getCoin(e);if(n){t(n);const s=n.position.x;if(s>iO&&s<e6){const r=Math.floor((s+e6)/sO),a=i.letters[r];i.state===rt.IDLE&&a.state===Ke.OFF&&(a.state=Ke.ACTIVATING)}}}}function cO({sensor:i}){switch(i.nextState=null,i.state){case rt.ACTIVATING:i.frameFlashStart=0,i.nextState=rt.FLASHING_ON;break;case rt.FLASHING_ON:i.frameFlashStart++,i.frameFlashStart>h2&&(i.frameFlashStart=0,i.flashCount<aO?i.nextState=rt.FLASHING_OFF:i.nextState=rt.AWAITING_BONUS_DELIVERY);break;case rt.FLASHING_OFF:i.frameFlashStart++,i.frameFlashStart>h2&&(i.frameFlashStart=0,i.flashCount++,i.nextState=rt.FLASHING_ON);break;case rt.AWAITING_BONUS_DELIVERY:i.flashCount=0,i.frameFlashStart=-1,i.nextState=rt.AWAITING_BONUS_DELIVERED;break;case rt.AWAITING_BONUS_DELIVERED:i.nextState=rt.IDLE;break}}function uO({letter:i}){switch(i.nextState=null,i.state){case Ke.OFF:break;case Ke.ACTIVATING:Math.random()<rO?(i.nextState=Ke.FLASHING_ON,i.frameFlashStart=0):i.nextState=Ke.OFF;break;case Ke.FLASHING_ON:i.frameFlashStart++,i.frameFlashStart>h2&&(i.frameFlashStart=0,i.flashCount<oO?i.nextState=Ke.FLASHING_OFF:i.nextState=Ke.LOCKED_ON);break;case Ke.FLASHING_OFF:i.frameFlashStart++,i.frameFlashStart>h2&&(i.frameFlashStart=0,i.flashCount++,i.nextState=Ke.FLASHING_ON);break;case Ke.LOCKED_ON:i.flashCount=0,i.frameFlashStart=-1;break}}async function pO({scene:i}){const t=(await i.loadModel(lO)).scene.children[0],n=[];for(let s=0;s<eO;s++){const r=t.children[s].material;r.color.setHex(V8),r.transparent=!0,r.opacity=D8,r.emissiveIntensity=j8,r.emissive.setHex(_E),t.children[s].material=r,n.push(r)}return i.addObject(t),n}const Sr=8,i6=Math.PI/20,fO=Math.PI/10,hO=Math.PI/90,mO=Math.PI/60,yO=10,s6=3,bO=100,vO="./assets/reels-box.glb",y7=.2,gO=1,wO=16502858,TO=16502858,A2=0,xO=1.5,SO=5,PO=10,ht={IDLE:Symbol.for("reels-box-idle"),ACTIVATING:Symbol.for("reels-box-activating"),SPINNING_REELS:Symbol.for("reels-box-spinning-reels"),STOPPING:Symbol.for("reels-box-stopping"),PREPARING_BONUS_DELIVERY:Symbol.for("reels-box-preparing-bonus-delivery"),DELIVERING_BONUS:Symbol.for("reels-box-delivering-bonus")},Dt={IDLE:Symbol.for("reel-idle"),STARTING:Symbol.for("reel-starting"),ACCELERATING:Symbol.for("reel-accelerating"),SPINNING:Symbol.for("reel-spinning"),DECELERATING:Symbol.for("reel-decelerating")},Rt={IDLE:Symbol.for("reels-box-lights-idle"),ACTIVATING:Symbol.for("reels-box-lights-activating"),STARTING_ROTATING:Symbol.for("reels-box-lights-starting-rotating"),ROTATING:Symbol.for("reels-box-lights-rotating"),STARTING_BLINKING:Symbol.for("reels-box-lights-starting-blinking"),BLINKING:Symbol.for("reels-box-lights-blinking"),STOPPING_BLINKING:Symbol.for("reels-box-lights-stopping-blinking")};class HO{constructor({scene:e,onBonusWon:t}){this.#e=e,this.#o=t}#e;#t;#n;#o;#a={state:ht.IDLE,nextState:null,pendingSpins:0,frameActive:-1,reels:[{state:Dt.IDLE,nextState:null,index:0,rotation:0,previousRotation:0,currentSpeed:0,targetIndex:-1,targetRotation:-1},{state:Dt.IDLE,nextState:null,index:0,rotation:0,previousRotation:0,currentSpeed:0,targetIndex:-1,targetRotation:-1},{state:Dt.IDLE,nextState:null,index:0,rotation:0,previousRotation:0,currentSpeed:0,targetIndex:-1,targetRotation:-1}],lights:{state:Rt.IDLE,nextState:null,headIndex:0,frameLastRefresh:-1,bulbs:[]}};async initialize(){const e=this.#e,{reelsMeshes:t,lightBulbsMaterials:n}=await MO({scene:e});this.#n=t,this.#t=n,EO({lightBulbsMaterials:n,lights:this.#a.lights})}update(){const e=this.#a,{state:t,reels:n,lights:s}=e;t!==ht.IDLE&&(RO({reelsBox:e}),LO({reelsBox:e}),n.forEach(r=>NO({reel:r})),n.forEach((r,a)=>this.#n[a].rotation.x=r.rotation),t===ht.DELIVERING_BONUS&&this.#o(n.map(r=>r.index))),s.state!==Rt.IDLE&&s.bulbs.forEach((r,a)=>{this.#t[a].emissiveIntensity=r.intensity,this.#t[a].opacity=r.opacity}),e.nextState&&(e.state=e.nextState),n.forEach(r=>{r.nextState&&(r.state=r.nextState)}),s.nextState&&(s.state=s.nextState)}spinReels(){this.#a.state===ht.IDLE?this.#a.state=ht.ACTIVATING:this.#a.pendingSpins++}save(){return{state:this.#a.state.description,nextState:this.#a.nextState?this.#a.nextState.description:null,pendingSpins:this.#a.pendingSpins,frameActive:this.#a.frameActive,reels:this.#a.reels.map(e=>({state:e.state.description,nextState:e.nextState?e.nextState.description:null,index:e.index,rotation:e.rotation,previousRotation:e.previousRotation,currentSpeed:e.currentSpeed,targetIndex:e.targetIndex,targetRotation:e.targetRotation})),lights:{state:this.#a.lights.state.description,headIndex:this.#a.lights.headIndex,frameLastRefresh:this.#a.lights.frameLastRefresh,bulbs:this.#a.lights.bulbs.map(e=>({intensity:e.intensity}))}}}load(e){this.#a.state=Symbol.for(e.state),this.#a.nextState=e.nextState?Symbol.for(e.nextState):null,this.#a.pendingSpins=e.pendingSpins,this.#a.frameActive=e.frameActive,this.#a.reels.forEach((t,n)=>{t.state=Symbol.for(e.reels[n].state),t.nextState=e.reels[n].nextState?Symbol.for(e.reels[n].nextState):null,t.index=e.reels[n].index,t.rotation=e.reels[n].rotation,t.targetIndex=e.reels[n].targetIndex,t.targetRotation=e.reels[n].targetRotation,t.previousRotation=e.reels[n].previousRotation,t.currentSpeed=e.reels[n].currentSpeed,this.#n[n].rotation.x=t.rotation}),this.#a.lights.state=Symbol.for(e.lights.state),this.#a.lights.headIndex=e.lights.headIndex,this.#a.lights.frameLastRefresh=e.lights.frameLastRefresh,this.#a.lights.bulbs.forEach((t,n)=>{t.intensity=e.lights.bulbs[n].intensity})}}function RO({reelsBox:i}){switch(i.nextState=null,i.state){case ht.ACTIVATING:i.reels.forEach(e=>e.state=Dt.STARTING),i.nextState=ht.SPINNING_REELS,i.lights.state=Rt.ACTIVATING;break;case ht.SPINNING_REELS:i.reels.every(e=>e.state===Dt.IDLE)&&(i.frameActive=0,i.nextState=ht.STOPPING);break;case ht.STOPPING:i.frameActive++,i.frameActive>bO&&(i.frameActive=0,i.nextState=ht.PREPARING_BONUS_DELIVERY);break;case ht.PREPARING_BONUS_DELIVERY:i.nextState=ht.DELIVERING_BONUS;break;case ht.DELIVERING_BONUS:i.pendingSpins>0?(i.pendingSpins--,i.nextState=ht.ACTIVATING):i.nextState=ht.IDLE;break}}function NO({reel:i}){switch(i.nextState=null,i.state){case Dt.IDLE:break;case Dt.STARTING:i.targetIndex=Math.floor(Math.random()*Sr);const e=Math.floor(Math.random()*(yO-s6+1))+s6,t=i.targetIndex-i.index+(i.targetIndex<=i.index?Sr:0);i.targetRotation=i.rotation+e*Math.PI*2+t*(Math.PI*2/Sr),i.previousRotation=i.rotation,i.currentSpeed=0,i.nextState=Dt.ACCELERATING;break;case Dt.ACCELERATING:i.currentSpeed<fO&&(i.currentSpeed+=hO),(i.rotation-i.previousRotation>Math.PI||i.targetRotation-i.rotation<0)&&(i.nextState=Dt.SPINNING),i.rotation+=i.currentSpeed;break;case Dt.SPINNING:i.targetRotation-i.rotation<Math.PI&&(i.nextState=Dt.DECELERATING),i.rotation+=i.currentSpeed;break;case Dt.DECELERATING:i.currentSpeed>i6?i.currentSpeed-=mO:i.currentSpeed=i6,i.targetRotation-i.rotation<0?(i.index=i.targetIndex,i.rotation=i.index*(Math.PI*2/Sr),i.previousRotation=i.rotation,i.targetIndex=-1,i.targetRotation=-1,i.currentSpeed=0,i.nextState=Dt.IDLE):i.rotation+=i.currentSpeed;break}}function LO({reelsBox:i}){switch(i.lights.nextState=null,i.lights.state){case Rt.IDLE:break;case Rt.ACTIVATING:i.lights.nextState=Rt.STARTING_ROTATING;break;case Rt.STARTING_ROTATING:i.lights.frameLastRefresh=0,i.lights.nextState=Rt.ROTATING;break;case Rt.ROTATING:i.lights.frameLastRefresh++,i.lights.frameLastRefresh>PO&&(i.lights.headIndex=(i.lights.headIndex+1)%3,i.lights.bulbs.forEach((e,t)=>{Pr(e,t%3===i.lights.headIndex||(t+1)%3===i.lights.headIndex)}),i.lights.frameLastRefresh=0),i.state===ht.STOPPING&&(i.lights.nextState=Rt.STARTING_BLINKING);break;case Rt.STARTING_BLINKING:i.lights.bulbs.forEach((e,t)=>Pr(e,t%2===0)),i.lights.headIndex=0,i.lights.frameLastRefresh=0,i.lights.nextState=Rt.BLINKING;break;case Rt.BLINKING:i.lights.frameLastRefresh++,i.lights.frameLastRefresh>SO&&(i.lights.bulbs.forEach(e=>Pr(e,e.intensity===A2)),i.lights.frameLastRefresh=0),i.state===ht.PREPARING_BONUS_DELIVERY&&(i.lights.nextState=Rt.STOPPING_BLINKING);break;case Rt.STOPPING_BLINKING:i.lights.bulbs.forEach(e=>Pr(e,!1)),i.lights.frameLastRefresh=-1,i.lights.nextState=Rt.IDLE;break}}async function MO({scene:i}){const e=[],t=[],n=await i.loadModel(vO);return n.scene.traverse(s=>{s.isMesh&&(s.userData.reel?e[s.userData.index]=s:s.material.userData.light&&(t[s.material.userData.index]=s.material=new q4({color:wO,emissive:TO,emissiveIntensity:A2,opacity:y7,transparent:!0})))}),i.addObject(n.scene),{reelsMeshes:e,lightBulbsMaterials:t}}function EO({lightBulbsMaterials:i,lights:e}){i.forEach((t,n)=>{e.bulbs[n]={intensity:A2,opacity:y7,frameLastRefresh:-1}})}function Pr(i,e){e?(i.intensity=xO,i.opacity=gO):(i.intensity=A2,i.opacity=y7)}const OO="./assets/excavator.glb",zO=new x(0,1,0),IO="beacon-light-bulb",XO="beacon-light-mirror",yo="rotating-platform",AO="drop-position",CO="beacon-light-position",FO="joint-rotating-platform",VO="joint-arm-rotating-platform",DO="joint-arms",jO="joint-jaws",WO="joint-jaw-1",UO="joint-jaw-2",qO="joint-jaw-3",GO="joint-jaw-4",Se=5e4,Ie=2e4,ZO=.1,YO=Math.PI/3,kO=.2,JO=1.5,KO=16760737,BO=.5,QO=.1,Q3=0,_O=10,$O=.3,ez=1,r6=.06,tz=65537,se={IDLE:Symbol.for("excavator-idle"),ACTIVATING:Symbol.for("excavator-activating"),OPENING_JAWS:Symbol.for("excavator-opening-jaws"),MOVING_DOWN:Symbol.for("excavator-moving-down"),CLOSING_JAWS:Symbol.for("excavator-closing-jaws"),PICKING:Symbol.for("excavator-picking"),MOVING_UP:Symbol.for("excavator-moving-up"),MOVING_TO_DROP_ZONE:Symbol.for("excavator-moving-to-drop-zone"),EXTENDING_ARMS:Symbol.for("excavator-extending-arms"),DROPPING:Symbol.for("excavator-dropping"),CLOSING_JAWS_AFTER_DROPPING:Symbol.for("excavator-closing-jaws-after-dropping"),RETRACTING_ARMS:Symbol.for("excavator-retracting-arms"),MOVING_TO_BASE:Symbol.for("excavator-moving-to-base"),PREPARING_IDLE:Symbol.for("excavator-preparing-idle")};class nz{#e;#t;#n;#o;#a;#r;#c;#i;#s;#d={state:se.IDLE,pendingPicks:0,beaconLightAngle:0};constructor({scene:e,onPick:t,canActivate:n,onGetObject:s,onRecycleObject:r}){this.#e=e,this.#t=n,this.#n=t,this.#a=s,this.#o=r}async initialize(){const e=this.#e,{parts:t,joints:n,dropPosition:s,beaconLightPosition:r}=await sz({scene:e});this.#r=s,this.#i=r;const{trapSensor:a}=rz({scene:e,parts:t,joints:n,trapSensor:this.#s,onRecycleObject:o=>{this.#a(o)&&this.#o(o)}});this.#s=a,t.forEach(({body:o,meshes:l})=>{l.forEach(({data:d})=>this.#e.addObject(d)),o.setEnabled(!0)}),t.get(yo).body.setEnabledRotations(!1,!1,!1),Object.assign(this.#d,{parts:t,joints:n}),this.#l.joint.configureMotor(0,1,Se,Ie),this.#y.joint.configureMotor(0,3.7,Se,Ie),this.#w.joint.configureMotor(0,0,1,0),this.#c=new Y4(KO,Q3,kO,YO,BO,QO),this.#c.position.copy(this.#i),this.#e.addObject(this.#c),this.#e.addObject(this.#c.target)}update(){iz({excavator:this.#d,joints:{platformJoint:this.#p,platformArmJoint:this.#l,armsJoint:this.#y,jaw1Joint:this.#m,jaw2Joint:this.#h,jaw3Joint:this.#b,jaw4Joint:this.#v},canActivate:()=>this.#t(this)});const{state:e,parts:t}=this.#d,n=this.#S.meshes[0].data.material;if(e!==se.IDLE){e===se.PICKING&&this.#n(this.#r),e===se.MOVING_TO_DROP_ZONE&&this.#f.body.setEnabledRotations(!1,!0,!1),e===se.EXTENDING_ARMS&&this.#f.body.setEnabledRotations(!1,!1,!1),e===se.MOVING_TO_BASE&&this.#f.body.setEnabledRotations(!1,!0,!1),e===se.CLOSING_JAWS_AFTER_DROPPING&&this.#f.body.setEnabledRotations(!1,!1,!1),n.emissiveIntensity=_O,n.opacity=ez,this.#c.intensity=JO;const s=new _0().setFromAxisAngle(zO,this.#d.beaconLightAngle);this.#T.body.setNextKinematicTranslation(new x(0,0,0).sub(this.#i).applyQuaternion(s).add(this.#i)),this.#T.body.setNextKinematicRotation(s),this.#c.target.position.set(this.#c.position.x+Math.sin(this.#d.beaconLightAngle),this.#c.position.y,this.#c.position.z+Math.cos(this.#d.beaconLightAngle))}else n.emissiveIntensity=Q3,n.opacity=$O,this.#c.intensity=Q3;t.forEach(({meshes:s,body:r})=>s.forEach(({data:a})=>{a.position.copy(r.translation()),a.quaternion.copy(r.rotation())})),this.#d.nextState&&(this.#d.state=this.#d.nextState)}save(){const e={},t={};return this.#d.joints.forEach((n,s)=>{e[s]={jointHandle:n.joint.handle}}),this.#d.parts.forEach((n,s)=>{const{body:r}=n;t[s]={bodyHandle:r.handle}}),{state:this.#d.state.description,nextState:this.#d.nextState?this.#d.nextState.description:null,pendingPicks:this.#d.pendingPicks,beaconLightAngle:this.#d.beaconLightAngle,joints:e,parts:t,trapSensorHandle:this.#s.handle}}load(e){this.#d.parts.forEach(t=>{t.meshes.forEach(({data:n})=>{n.traverse(s=>{if(s.isMesh){const r=s.material.userData,a=s.material.name;if(r.sensor){const o=e.trapSensorHandle,l=this.#e.worldColliders.get(o);l.userData={objectType:a,onIntersect:this.#o},this.#s=l}}})})}),this.#d.state=Symbol.for(e.state),this.#d.nextState=e.nextState?Symbol.for(e.nextState):null,this.#d.pendingPicks=e.pendingPicks,this.#d.beaconLightAngle=e.beaconLightAngle,this.#d.joints.forEach((t,n)=>{const s=e.joints[n];s&&(t.joint=this.#e.worldJoints.get(s.jointHandle),t.params.body1=t.joint.body1(),t.params.body2=t.joint.body2())}),this.#d.parts.forEach((t,n)=>{const s=e.parts[n];s&&(t.body=this.#e.worldBodies.get(s.bodyHandle))})}get active(){return this.#d.state!==se.IDLE&&this.#d.state!==se.ACTIVATING}pick(){this.#d.state===se.IDLE?this.#d.state=se.ACTIVATING:this.#d.pendingPicks++}get joints(){const e=[];return this.#d.joints.forEach(t=>{const{joint:n,params:s}=t;e.push({joint:n,jointData:s})}),e}get#p(){return this.#d.joints.get(FO)}get#l(){return this.#d.joints.get(VO)}get#y(){return this.#d.joints.get(DO)}get#w(){return this.#d.joints.get(jO)}get#m(){return this.#d.joints.get(WO)}get#h(){return this.#d.joints.get(UO)}get#b(){return this.#d.joints.get(qO)}get#v(){return this.#d.joints.get(GO)}get#f(){return this.#d.parts.get(yo)}get#S(){return this.#d.parts.get(IO)}get#T(){return this.#d.parts.get(XO)}}function iz({excavator:i,joints:e,canActivate:t}){i.nextState=null;const{platformJoint:n,platformArmJoint:s,armsJoint:r,jaw1Joint:a,jaw2Joint:o,jaw3Joint:l,jaw4Joint:d}=e;switch(i.state){case se.IDLE:break;case se.ACTIVATING:t()&&(a.joint.configureMotor(-.5,-2.5,Se,Ie),o.joint.configureMotor(.5,2.5,Se,Ie),l.joint.configureMotor(-.5,-2.5,Se,Ie),d.joint.configureMotor(.5,2.5,Se,Ie),i.nextState=se.OPENING_JAWS);break;case se.OPENING_JAWS:je(a)<-.5&&je(o)>.5&&je(l)<-.5&&je(d)>.5&&(s.joint.configureMotor(-.7,1,Se,Ie),r.joint.configureMotor(.5,3,Se,Ie),i.nextState=se.MOVING_DOWN);break;case se.MOVING_DOWN:je(s)<-.7&&je(r)>.5&&(a.joint.configureMotor(0,2.5,Se,Ie),o.joint.configureMotor(0,-2.5,Se,Ie),l.joint.configureMotor(0,2.5,Se,Ie),d.joint.configureMotor(0,-2.5,Se,Ie),i.nextState=se.CLOSING_JAWS);break;case se.CLOSING_JAWS:je(a)>-.01&&je(o)<.01&&je(l)>-.01&&je(d)<.01&&(i.nextState=se.PICKING);break;case se.PICKING:s.joint.configureMotor(.5,1,Se,Ie),r.joint.configureMotor(-.2,4,Se,Ie),i.nextState=se.MOVING_UP;break;case se.MOVING_UP:je(s)>.5&&(n.joint.configureMotor(-2,-3,Se,Se),i.nextState=se.MOVING_TO_DROP_ZONE);break;case se.MOVING_TO_DROP_ZONE:je(n)<-2&&(s.joint.configureMotor(-.3,1,Se,Ie),r.joint.configureMotor(.9,8,Se,Ie),i.nextState=se.EXTENDING_ARMS);break;case se.EXTENDING_ARMS:je(r)>.8&&(a.joint.configureMotor(-.5,-2.5,Se,Ie),o.joint.configureMotor(.5,2.5,Se,Ie),l.joint.configureMotor(-.5,-2.5,Se,Ie),d.joint.configureMotor(.5,2.5,Se,Ie),i.nextState=se.DROPPING);break;case se.DROPPING:je(a)<-.5&&je(o)>.5&&je(l)<-.5&&je(d)>.5&&(s.joint.configureMotor(.5,.7,Se,Ie),r.joint.configureMotor(-.3,3.45,Se,Ie),i.nextState=se.RETRACTING_ARMS);break;case se.RETRACTING_ARMS:je(s)>.4&&je(r)<.5&&(n.joint.configureMotor(0,-.7,Se,Se),i.nextState=se.MOVING_TO_BASE);break;case se.MOVING_TO_BASE:je(n)>-.01&&(s.joint.configureMotor(0,1,Se,Ie),r.joint.configureMotor(0,3.7,Se,Ie),i.nextState=se.CLOSING_JAWS_AFTER_DROPPING);break;case se.CLOSING_JAWS_AFTER_DROPPING:je(s)<.1&&je(r)>-.1&&(i.pendingPicks>0?(i.pendingPicks--,i.nextState=se.ACTIVATING):i.beaconLightAngle>0&&i.beaconLightAngle<r6&&(i.beaconLightAngle=0,a.joint.configureMotor(0,2.5,Se,Ie),o.joint.configureMotor(0,-2.5,Se,Ie),l.joint.configureMotor(0,2.5,Se,Ie),d.joint.configureMotor(0,-2.5,Se,Ie),i.nextState=se.PREPARING_IDLE));break;case se.PREPARING_IDLE:je(a)>-.01&&je(o)<.01&&je(l)>-.01&&je(d)<.01&&(i.pendingPicks>0?(i.pendingPicks--,i.nextState=se.ACTIVATING):i.nextState=se.IDLE);break}i.state!==se.IDLE&&i.state!==se.PREPARING_IDLE&&(i.beaconLightAngle=(i.beaconLightAngle+r6)%(2*Math.PI))}function je(i){const e=i.params.axis,t=new _0().copy(i.params.body1.rotation()),n=new _0().copy(i.params.body2.rotation()),s=t.invert().multiply(n),r=e.clone().normalize();return 2*Math.atan2(r.x*s.x+r.y*s.y+r.z*s.z,s.w)}async function sz({scene:i}){const t=(await i.loadModel(OO)).scene,n=new Map,s=new Map,r=new x,a=new x;return t.traverse(o=>{if(o.isMesh){const{material:l,geometry:d}=o,c=l.userData,u=c.name;if(c.collider||c.sensor){const p=d.index,h=d.attributes.position,b=[],T=[];for(let f=0;f<h.count;f++)b.push(h.getX(f),h.getY(f),h.getZ(f));for(let f=0;f<p.count;f++)T.push(p.getX(f));const m=a6(n,u);m.sensor=c.sensor,m.friction=c.friction,m.restitution=c.restitution,m.fixed=c.fixed,m.kinematic=c.kinematic,m.contactSkin=c.contactSkin,m.meshes.push({data:o,vertices:b,indices:T})}else{const p=o.userData.name,h=a6(n,p);h.meshes.push({data:o}),h.light=c.light}}else if(o.userData.joint){const{userData:l,position:d}=o;s.set(o.name,{position:d,axis:l.axis===void 0?void 0:new x().fromArray(l.axis),pair:[l["name-1"],l["name-2"]],limits:l.limits})}else o.name==AO?r.copy(o.position):o.name===CO&&a.copy(o.position)}),{parts:n,joints:s,dropPosition:r,beaconLightPosition:a}}function a6(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[]},i.set(e,t)),t}function rz({scene:i,parts:e,joints:t,onRecycleObject:n}){let s,r=0;e.forEach((o,l)=>{const{meshes:d,sensor:c,friction:u,restitution:p,fixed:h,kinematic:b,light:T,contactSkin:m}=o,f=o.body=h?i.createFixedBody():b?i.createKinematicBody():i.createDynamicBody();f.setEnabled(!1);const N=[],M=[];let P=0;if(d.forEach(V=>{T||(c?s=i.createCuboidColliderFromBoundingBox({mesh:V.data,height:ZO,userData:{objectType:l,onIntersect:n},sensor:c},f):V.vertices&&(N.push(...V.vertices),M.push(...V.indices.map(C=>C+P)),P+=Math.max(...V.indices)+1))}),N.length>0){const V=i.createTrimeshCollider({vertices:N,indices:M,friction:u,restitution:p},f);V.setContactSkin(m),h?V.setCollisionGroups(tz):(V.setCollisionGroups(1<<r%16<<16|1<<r%16),r++)}});const a=e.get(yo);return a.body.setEnabledRotations(!1,!0,!1),a.body.setEnabledTranslations(!1,!1,!1),t.forEach(o=>{const{position:l,axis:d,pair:c,limits:u}=o;if(o.params={body1:e.get(c[0]).body,body2:e.get(c[1]).body,anchor1:l,anchor2:l,axis:d},d===void 0){const p=new _0;Object.assign(o.params,{frame1:p,frame2:p}),o.joint=i.connectBodiesWithFixedJoint(o.params)}else Object.assign(o.params,{axis:d}),o.joint=i.connectBodiesWithRevoluteJoint(o.params),o.joint.setLimits(...u)}),{trapSensor:s}}const az="./assets/tower.glb",oz="stand",lz="turret",dz="init-position",bo=.1,W8=0,cz=Math.PI/7,o6=.002,l6=.02,d6=10,uz=5e-5,pz=new x(0,0,-1),fz=new x(0,1,0),hz=65537,mz=65280,yz=0,bz=2,Lt={IDLE:Symbol.for("tower-idle"),ACTIVATING:Symbol.for("tower-activating"),SHOOTING_COINS:Symbol.for("tower-shooting-coins"),SHOOTING_COIN:Symbol.for("tower-shooting-coin"),MOVING_DOWN:Symbol.for("tower-moving-down")};class c6{#e;#t;#n;#o;#a;#r;#c;#i=new x;#s;#d=new x;#p;#l={state:Lt.IDLE,pendingShots:0,parts:null,position:W8,oscillationCount:0,phase:0,frameLastShot:-1,lightOn:!1};constructor({scene:e,canActivate:t,onShootCoin:n,offsetX:s=0,oscillationDirection:r=-1}){this.#e=e,this.#a=t,this.#r=n,this.#n=s,this.#o=r}async initialize(){const e=this.#e,{parts:t,initPosition:n,lightMaterial:s}=await gz({scene:e,offsetX:this.#n});wz({scene:e,parts:t}),this.#t=n,this.#p=s,t.forEach(({meshes:r})=>r.forEach(({data:a})=>this.#e.addObject(a))),Object.assign(this.#l,{parts:t}),this.#c=this.#l.parts.get(lz),this.#s=this.#l.parts.get(oz)}update(){vz({tower:this.#l,canActivate:()=>this.#a(this)});const{state:e,parts:t,phase:n,position:s,lightOn:r}=this.#l;if(e!==Lt.IDLE){const a=new _0().setFromAxisAngle(fz,Math.sin(n)*cz*this.#o);if(e===Lt.SHOOTING_COIN){const o=this.#t.clone().setY(this.#t.y+bo),l=pz.clone().applyQuaternion(a).normalize().multiplyScalar(uz);this.#r({position:o,impulse:l})}this.#c.body.setNextKinematicTranslation(this.#i.set(0,0,0).sub(this.#t).applyQuaternion(a).add(this.#t).setY(s)),this.#c.body.setNextKinematicRotation(a),this.#s.body.setNextKinematicTranslation(this.#d.setY(s)),this.#p.emissiveIntensity=r?bz:yz,t.forEach(({meshes:o,body:l})=>o.forEach(({data:d})=>{d.position.copy(l.translation()),d.quaternion.copy(l.rotation())})),this.#l.nextState&&(this.#l.state=this.#l.nextState)}}shootCoins(){this.#l.state===Lt.IDLE?this.#l.state=Lt.ACTIVATING:this.#l.pendingShots++}save(){const e={};return this.#l.parts.forEach(({body:t},n)=>{e[n]={bodyHandle:t.handle}}),{state:this.#l.state.description,nextState:this.#l.nextState?this.#l.nextState.description:null,parts:e,position:this.#l.position,oscillationCount:this.#l.oscillationCount,pendingShots:this.#l.pendingShots,phase:this.#l.phase,frameLastShot:this.#l.frameLastShot,lightOn:this.#l.lightOn}}load(e){this.#l.state=Symbol.for(e.state),this.#l.nextState=e.nextState?Symbol.for(e.nextState):null,this.#l.oscillationCount=e.oscillationCount,this.#l.pendingShots=e.pendingShots,this.#l.phase=e.phase,this.#l.frameLastShot=e.frameLastShot,this.#l.lightOn=e.lightOn,this.#l.position=e.position,this.#l.parts.forEach((t,n)=>{const s=e.parts[n];s&&(t.body=this.#e.worldBodies.get(s.bodyHandle))})}get active(){return this.#l.state!==Lt.IDLE&&this.#l.state!==Lt.ACTIVATING}}function vz({tower:i,canActivate:e}){switch(i.nextState=null,i.state){case Lt.ACTIVATING:e()&&(i.phase=0,i.position<bo?i.position+=o6:(i.frameLastShot=0,i.position=bo,i.nextState=Lt.SHOOTING_COINS));break;case Lt.SHOOTING_COINS:i.oscillationCount<1?(i.phase+=l6,i.oscillationCount=Math.floor(i.phase/(2*Math.PI)),i.frameLastShot++,i.frameLastShot>d6/5&&(i.lightOn=!1),i.frameLastShot>d6&&(i.nextState=Lt.SHOOTING_COIN)):i.pendingShots?(i.pendingShots--,i.phase+=l6,i.oscillationCount=0):(i.phase=0,i.oscillationCount=0,i.nextState=Lt.MOVING_DOWN);break;case Lt.SHOOTING_COIN:i.frameLastShot=0,i.lightOn=!0,i.nextState=Lt.SHOOTING_COINS;break;case Lt.MOVING_DOWN:i.position>0?i.position-=o6:(i.position=W8,i.frameLastShot=-1,i.nextState=Lt.IDLE);break}}async function gz({scene:i,offsetX:e}){const n=(await i.loadModel(az)).scene,s=new Map,r=new x;let a;return n.traverse(o=>{if(o.isMesh){const{material:l,geometry:d}=o;for(let u=0;u<d.index.count;u++){const p=d.attributes.position;p.setX(u,p.getX(u)+e)}const c=l.userData;if(c.collider){const u=c.name,p=d.index,h=d.attributes.position,b=[],T=[];for(let f=0;f<h.count;f++)b.push(h.getX(f),h.getY(f),h.getZ(f));for(let f=0;f<p.count;f++)T.push(p.getX(f));const m=u6(s,u);m.friction=c.friction,m.restitution=c.restitution,m.fixed=c.fixed,m.meshes.push({data:o,vertices:b,indices:T})}else{const u=o.userData.name;u6(s,u).meshes.push({data:o})}c.light&&(a=o.material,a.emissive.setHex(mz))}else if(o.name==dz){const l=o.position;l.x+=e,r.copy(o.position)}}),{parts:s,lightMaterial:a,initPosition:r}}function u6(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[]},i.set(e,t)),t}function wz({scene:i,parts:e}){let t=0;e.forEach((n,s)=>{const{meshes:r,friction:a,restitution:o,fixed:l}=n,d=n.body=l?i.createFixedBody():i.createKinematicBody(),c=[],u=[];let p=0;r.forEach(b=>{b.vertices&&(c.push(...b.vertices),u.push(...b.indices.map(T=>T+p)),p+=Math.max(...b.indices)+1)});const h=i.createTrimeshCollider({vertices:c,indices:u,friction:a,restitution:o},d);l?h.setCollisionGroups(hz):(h.setCollisionGroups(1<<t%16<<16|1<<t%16),t++)})}const Tz=.02,p6=.01,f6=.003,h6=.13,xz="./assets/coin-roller.glb",Sz="launcher",Pz="trap-door",Hz="doors",U8="trap",Rz="init-position",Nz=["slot-3","slot-2","slot-1"],Lz=3e-5,Mz=new x(0,0,-1).multiplyScalar(Lz),Ez=.09,Oz=new x(Math.PI/2,0,Math.PI/2),q8=0,zz=.25-q8,Iz=0,Xz=.03,Az=16777215,Cz=16711935,G8=0,Fz=1,Vz=2,Z8=30,Dz=8,jz=65537,pe={IDLE:Symbol.for("coin-roller-idle"),ACTIVATING:Symbol.for("coin-roller-activating"),INITIALIZING:Symbol.for("coin-roller-initializing"),INITIALIZING_COIN:Symbol.for("coin-roller-initializing-coin"),OPENING_DOORS:Symbol.for("coin-roller-opening-doors"),MOVING_LAUNCHER:Symbol.for("coin-roller-moving-launcher"),TRIGGERING_COIN:Symbol.for("coin-roller-triggering-coin"),DELIVERING_COIN:Symbol.for("coin-roller-delivering-coin"),MOVING_COIN:Symbol.for("coin-roller-moving-coin"),OPENING_TRAP:Symbol.for("coin-roller-opening-trap"),CLOSING_TRAP:Symbol.for("coin-roller-closing-trap"),MOVING_LAUNCHER_TO_BASE:Symbol.for("coin-roller-moving-launcher-to-base"),CLOSING_DOORS:Symbol.for("coin-roller-closing-doors")};class Wz{#e;#t;#n;#o;#a;#r;#c=new Map;#i=[];#s=new x;#d=new x;#p=new x;#l={state:pe.IDLE,nextState:null,pendingShots:0,launcherPhase:0,trapPosition:0,doorsPosition:0,lights:[],lightsHeadIndex:-1,lightsDirection:1,lightsRefreshes:-1};constructor({scene:e,onInitializeCoin:t,onRecycleCoin:n,onBonusWon:s,onGetCoin:r}){this.#e=e,this.#t=t,this.#n=(a,o)=>{const{state:l,coin:d}=this.#l;if(d&&a.objectType===d.objectType&&a.index===d.index&&l===pe.MOVING_COIN){const c=Nz.indexOf(o);n(d),this.#l.coin=null,s(c)}},this.#o=()=>{n(this.#l.coin),this.#l.coin=null},this.#a=r}async initialize(){const e=this.#e,{parts:t,lightsMaterials:n,initPosition:s}=await Gz({scene:e,sensorColliders:this.#c});this.#r=s,this.#i=n,Zz({scene:e,parts:t,sensorColliders:this.#c,onBonusWon:this.#n,onCoinLost:this.#o}),Yz({lightsMaterials:n,lights:this.#l.lights}),t.forEach(({body:r,meshes:a})=>{a.forEach(({data:o})=>this.#e.addObject(o)),r.setEnabled(!0)}),Object.assign(this.#l,{parts:t}),this.#l.launcher=this.#l.parts.get(Sz),this.#l.launcher.body.setEnabledRotations(!1,!1,!1),this.#l.launcher.body.setEnabledTranslations(!1,!1,!1),this.#l.trap=this.#l.parts.get(Pz),this.#l.doors=this.#l.parts.get(Hz)}update(){Uz({coinRoller:this.#l}),qz({coinRoller:this.#l});const{parts:e,state:t,launcher:n,trap:s,coin:r,doors:a,lights:o}=this.#l;t!==pe.IDLE&&(this.#s.setX(-Math.cos(this.#l.launcherPhase)*h6+h6),this.#d.z=this.#l.trapPosition,this.#p.x=this.#l.doorsPosition,n.body.setNextKinematicTranslation(this.#s),s.body.setNextKinematicTranslation(this.#d),a.body.setNextKinematicTranslation(this.#p),t===pe.INITIALIZING&&(this.#l.coin=this.#t({position:this.#r,rotation:Oz}),this.#l.coin.body.setEnabledTranslations(!1,!0,!0)),t===pe.MOVING_LAUNCHER&&(r.body.setEnabledTranslations(!0,!0,!0),r.body.setEnabledRotations(!1,!1,!1),r.body.sleep(),r.body.setNextKinematicTranslation(this.#s)),t===pe.DELIVERING_COIN&&(r.body.setEnabledRotations(!0,!0,!0),r.body.applyImpulse(Mz)),o.forEach((l,d)=>{const c=this.#i[d];l.on?c.emissiveIntensity=Math.max(G8,Fz*(1-l.refreshes/Z8)):c.emissiveIntensity=0}),e.forEach(({meshes:l,body:d})=>{l.forEach(({data:c})=>{c.position.copy(d.translation()),c.quaternion.copy(d.rotation())})}),this.#l.nextState&&(this.#l.state=this.#l.nextState))}shootCoin(){this.#l.state===pe.IDLE?this.#l.state=pe.ACTIVATING:this.#l.pendingShots++}triggerCoin(){this.#l.state===pe.MOVING_LAUNCHER&&(this.#l.state=pe.TRIGGERING_COIN)}save(){const e={};return this.#c.forEach((t,n)=>e[n]=t.handle),{state:this.#l.state.description,nextState:this.#l.nextState?this.#l.nextState.description:null,sensorCollidersHandles:e,coinIndex:this.#l.coin?this.#l.coin.index:null,launcherBodyHandle:this.#l.launcher.body.handle,trapBodyHandle:this.#l.trap.body.handle,doorsBodyHandle:this.#l.doors.body.handle,launcherPhase:this.#l.launcherPhase,trapPosition:this.#l.trapPosition,doorsPosition:this.#l.doorsPosition,pendingShots:this.#l.pendingShots,lights:this.#l.lights.map(t=>({on:t.on,refreshes:t.refreshes})),lightsHeadIndex:this.#l.lightsHeadIndex,lightsDirection:this.#l.lightsDirection,lightsRefreshes:this.#l.lightsRefreshes}}load(e){this.#l.parts.forEach((t,n)=>{t.meshes.forEach(({data:s})=>{s.traverse(r=>{if(r.isMesh){const a=r.material.userData,o=n;if(a.sensor){const l=e.sensorCollidersHandles[n],d=this.#e.worldColliders.get(l);d.userData={objectType:o,onIntersect:c=>{n===U8?this.#o():this.#n(c,o)}},this.#c.set(o,d)}}})})}),this.#l.state=Symbol.for(e.state),this.#l.nextState=e.nextState?Symbol.for(e.nextState):null,this.#l.launcherPhase=e.launcherPhase,this.#l.pendingShots=e.pendingShots,this.#l.launcher.body=this.#e.worldBodies.get(e.launcherBodyHandle),this.#l.trap.body=this.#e.worldBodies.get(e.trapBodyHandle),this.#l.doors.body=this.#e.worldBodies.get(e.doorsBodyHandle),this.#l.trapPosition=e.trapPosition,this.#l.doorsPosition=e.doorsPosition,e.coinIndex&&(this.#l.coin=this.#a({index:e.coinIndex})),this.#l.lights=e.lights.map(t=>({on:t.on,refreshes:t.refreshes})),this.#l.lightsHeadIndex=e.lightsHeadIndex,this.#l.lightsDirection=e.lightsDirection,this.#l.lightsRefreshes=e.lightsRefreshes}}function Uz({coinRoller:i}){switch(i.nextState=null,i.state){case pe.IDLE:break;case pe.ACTIVATING:i.lightsRefreshes=0,i.lightsHeadIndex=0,i.nextState=pe.OPENING_DOORS;break;case pe.OPENING_DOORS:i.doorsPosition+=f6,i.doorsPosition>Xz&&(i.nextState=pe.INITIALIZING);break;case pe.INITIALIZING:i.nextState=pe.INITIALIZING_COIN;break;case pe.INITIALIZING_COIN:i.coin.position.z<Ez&&(i.nextState=pe.MOVING_LAUNCHER);break;case pe.MOVING_LAUNCHER:Si({coinRoller:i});break;case pe.TRIGGERING_COIN:Si({coinRoller:i}),i.nextState=pe.DELIVERING_COIN;break;case pe.DELIVERING_COIN:Si({coinRoller:i}),i.nextState=pe.MOVING_COIN;break;case pe.MOVING_COIN:Si({coinRoller:i}),i.coin&&i.coin.linearSpeed<1e-4?i.nextState=pe.OPENING_TRAP:i.coin||(i.nextState=pe.MOVING_LAUNCHER_TO_BASE);break;case pe.OPENING_TRAP:i.launcherPhase>.05&&Si({coinRoller:i}),i.trapPosition+=p6,i.trapPosition>zz&&(i.nextState=pe.CLOSING_TRAP);break;case pe.CLOSING_TRAP:i.launcherPhase>.05&&Si({coinRoller:i}),i.trapPosition-=p6,i.trapPosition<q8&&(i.trapPosition=0,i.nextState=pe.MOVING_LAUNCHER_TO_BASE);break;case pe.MOVING_LAUNCHER_TO_BASE:i.launcherPhase>.05?Si({coinRoller:i}):(i.launcherPhase=0,i.pendingShots?(i.pendingShots--,i.nextState=pe.ACTIVATING):i.nextState=pe.CLOSING_DOORS);break;case pe.CLOSING_DOORS:i.doorsPosition-=f6,i.doorsPosition<Iz&&(i.doorsPosition=0,i.lightsRefreshes=-1,i.lightsHeadIndex=-1,i.lightsDirection=1,i.nextState=pe.IDLE);break}}function qz({coinRoller:i}){const{lights:e,lightsHeadIndex:t,lightsDirection:n}=i,s=e.length,r=Dz;i.state===pe.IDLE||i.state===pe.CLOSING_DOORS?e.forEach(a=>{a.on=!1,a.refreshes=-1}):i.lightsRefreshes!==-1&&(i.lightsRefreshes++,i.lightsRefreshes>Vz&&(i.lightsRefreshes=0,i.lightsHeadIndex+=n,i.lightsHeadIndex>s?(i.lightsDirection=-1,i.lightsHeadIndex=s-1):i.lightsHeadIndex<0&&(i.lightsDirection=1,i.lightsHeadIndex=0)),e.forEach((a,o)=>{const l=n>0?t-r:t,d=n>0?t:t+r;o>=l&&o<=d?(a.on=!0,a.refreshes=0):a.refreshes>-1&&a.refreshes<Z8?a.refreshes++:(a.on=!1,a.refreshes=-1)}))}function Si({coinRoller:i}){i.launcherPhase=(i.launcherPhase+Tz)%(Math.PI*2)}async function Gz({scene:i}){const t=(await i.loadModel(xz)).scene,n=new Map,s=[],r=new x;return t.traverse(a=>{if(a.isMesh){const{material:o,geometry:l}=a,d=o.userData;if(d.collider||d.sensor){const c=d.name,u=l.index,p=l.attributes.position,h=[],b=[];for(let m=0;m<p.count;m++)h.push(p.getX(m),p.getY(m),p.getZ(m));for(let m=0;m<u.count;m++)b.push(u.getX(m));const T=m6(n,c);T.sensor=d.sensor,T.friction=d.friction,T.restitution=d.restitution,T.kinematic=d.kinematic,T.meshes.push({data:a,vertices:h,indices:b})}else{const c=a.userData.name;m6(n,c).meshes.push({data:a}),a.material.userData.light&&(s[a.material.userData.index]=a.material=new q4({color:Az,emissive:Cz,emissiveIntensity:G8}))}}else a.name==Rz&&r.copy(a.position)}),{parts:n,lightsMaterials:s,initPosition:r}}function m6(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[]},i.set(e,t)),t}function Zz({scene:i,parts:e,sensorColliders:t,onBonusWon:n,onCoinLost:s}){let r=0;e.forEach((a,o)=>{const{meshes:l,friction:d,restitution:c,sensor:u,kinematic:p}=a;let h;p?(h=a.body=i.createKinematicBody(),a.position=0):h=a.body=i.createFixedBody(),h.setEnabled(!1);const b=[],T=[];let m=0;if(l.forEach(f=>{f.vertices&&(b.push(...f.vertices),T.push(...f.indices.map(N=>N+m)),m+=Math.max(...f.indices)+1)}),b.length>0){const f=i.createTrimeshCollider({vertices:b,indices:T,friction:d,restitution:c,sensor:u,userData:{objectType:o,onIntersect:N=>{o===U8?s():n(N,o)}}},h);p?(f.setCollisionGroups(1<<r%16<<16|1<<r%16),r++):f.setCollisionGroups(jz),h.setSoftCcdPrediction(.01),u&&t.set(o,f)}})}function Yz({lightsMaterials:i,lights:e}){i.forEach((t,n)=>{e[n]={on:!1,refreshes:-1}})}const kz="./assets/stacker.glb",Jz="drop-position",Kz="pivot-position",Bz="arm-protection-lid-pivot-position",Qz=new x(0,0,0),_z=.006,$z=new x(1,0,0),eI=new x(0,1,0),Hr=.02,y6=5e-4,_3=5e-4,b6=.003,v6=.001,$3=Math.PI/18,g6=Math.PI/9,w6=.1,T6=4,x6=.135,tI=new x(0,0,1e-5),vo=0,d1=.08,S6=.15,go=0,P6=-.025,ea=6,Hi=0,jr=0,Y8=0,H6=.005,R6=-.03,k8=0,N6=-.01,wo=0,L6=.15,M6=.225,Rr=Math.PI*2,To=0,E6=-Math.PI/3,J8=0,ta=1,nI=7,na=5,iI=80,sI="base",rI="support",aI="arm",oI="arm-protection",lI="arm-protection-lid",dI="arm-door",m2=0,ns=5,cI=16711935,uI=35,pI=10,m0={IDLE:Symbol.for("stacker-idle"),ACTIVATING:Symbol.for("stacker-activating"),RAISING_STACKER_TO_CLEANUP_POSITION:Symbol.for("stacker-raising-stacker-to-cleanup-position"),RAISING_BASE_TO_CLEANUP_POSITION:Symbol.for("stacker-raising-base-to-cleanup-position"),CLOSING_ARM_DOOR:Symbol.for("stacker-closing-arm-door"),RAISING_ARM_PROTECTION_LID:Symbol.for("stacker-raising-arm-protection-lid"),LOWERING_ARM_PROTECTION_LID:Symbol.for("stacker-lowering-arm-protection-lid"),LOWERING_SUPPORT_TO_READY_POSITION:Symbol.for("stacker-lowering-support-to-ready-position"),LOWERING_BASE_TO_READY_POSITION:Symbol.for("stacker-lowering-base-to-ready-position"),CLEANING_UP_BASE_LEFT:Symbol.for("stacker-cleaning-up-base-left"),CLEANING_UP_BASE_RIGHT:Symbol.for("stacker-cleaning-up-base-right"),RAISING_STACKER:Symbol.for("stacker-raising-stacker"),OPENING_ARM_DOOR:Symbol.for("stacker-opening-arm-door"),MOVING_ARM_TO_CIRCUMFERENCE_POSITION:Symbol.for("stacker-moving-arm-to-circumference-position"),INITIALIZING_COIN:Symbol.for("stacker-initializing-coin"),PUSHING_COIN:Symbol.for("stacker-pushing-coin"),ROTATING_BASE:Symbol.for("stacker-rotating-base"),MOVING_ARM_TO_CENTER_POSITION:Symbol.for("stacker-moving-arm-to-center-position"),LOWERING_BASE:Symbol.for("stacker-lowering-base"),MOVING_ARM_BACK_TO_CIRCUMFERENCE_POSITION:Symbol.for("stacker-retracting-arm"),FINISHING_LEVEL:Symbol.for("stacker-finishing-level"),MOVING_ARM_TO_INITIAL_POSITION:Symbol.for("stacker-moving-arm-to-initial-position"),ALIGNING_COINS:Symbol.for("stacker-aligning-coins"),LOWERING_STACKER:Symbol.for("stacker-lowering-stacker"),RESETTING_BASE_ROTATION:Symbol.for("stacker-resetting-base-rotation"),PREPARING_IDLE:Symbol.for("stacker-preparing-idle")},Ft={IDLE:Symbol.for("stacker-lights-idle"),ACTIVATING:Symbol.for("stacker-lights-activating"),BLINKING:Symbol.for("stacker-lights-blinking"),ROTATING:Symbol.for("stacker-lights-rotating"),DELIVERING:Symbol.for("stacker-lights-delivering"),PREPARING_IDLE:Symbol.for("stacker-lights-preparing-idle")};class fI{#e;#t;#n;#o;#a;#r;#c;#i={parts:null,level:J8,coin:null,coins:[],nextState:null,stacks:-1,levels:-1,pendingDeliveries:[],state:m0.IDLE,position:wo,supportPosition:k8,basePosition:Y8,armPosition:vo,armDoorPosition:go,armProtectionLidAngle:To,rotations:jr,rotationDirection:1,baseAngle:Hi,lights:{state:Ft.IDLE,frameLastRefresh:-1,bulbs:[],nextState:null}};constructor({scene:e,canActivate:t,onInitializeCoin:n}){this.#e=e,this.#n=t,this.#o=n}async initialize(){const e=this.#e,{parts:t,dropPosition:n,pivotPosition:s,armProtectionLidPivotPosition:r,lightBulbsMaterials:a}=await yI({scene:e});this.#a=n,this.#r=s,this.#c=r,this.#t=a,bI({scene:e,parts:t}),vI({lightBulbsMaterials:a,lights:this.#i.lights}),t.forEach(({body:o,meshes:l})=>{l.forEach(({data:d})=>this.#e.addObject(d)),o.setEnabled(!0)}),Object.assign(this.#i,{parts:t})}update(){hI({stacker:this.#i,canActivate:()=>this.#n(this)}),mI({stacker:this.#i});const{parts:e,state:t,lights:n}=this.#i;if(t!==m0.IDLE){const s=e.get(sI),r=e.get(rI),a=e.get(aI),o=e.get(oI),l=e.get(lI),d=e.get(dI);if(t===m0.RAISING_STACKER_TO_CLEANUP_POSITION||t===m0.RAISING_STACKER||t===m0.LOWERING_STACKER){const c=new x().copy(s.body.translation()),u=new x().copy(r.body.translation()),p=new x().copy(s.body.translation()),h=new x().copy(a.body.translation()),b=new x().copy(d.body.translation()),T=new x().copy(o.body.translation()),m=new x().copy(l.body.translation());c.setY(this.#i.position),this.#i.position+this.#i.supportPosition,u.setY(this.#i.position+this.#i.supportPosition);let f=this.#i.position+this.#i.supportPosition+this.#i.basePosition;f<0&&(f=0),p.setY(f),h.setY(this.#i.position+this.#i.armPosition),b.setY(this.#i.position+this.#i.armPosition+this.#i.armDoorPosition),T.setY(this.#i.position+this.#i.armPosition),m.setY(this.#i.position+this.#i.armPosition),r.body.setNextKinematicTranslation(u),s.body.setNextKinematicTranslation(p),a.body.setNextKinematicTranslation(h),o.body.setNextKinematicTranslation(T),l.body.setNextKinematicTranslation(m),d.body.setNextKinematicTranslation(b)}if(t===m0.LOWERING_SUPPORT_TO_READY_POSITION){const c=new x().copy(r.body.translation()),u=new x().copy(s.body.translation());c.setY(this.#i.position+this.#i.supportPosition),u.setY(this.#i.position+this.#i.supportPosition+this.#i.basePosition),s.body.setNextKinematicTranslation(u),r.body.setNextKinematicTranslation(c)}if((t===m0.LOWERING_STACKER||t===m0.RESETTING_BASE_ROTATION||t===m0.PREPARING_IDLE)&&this.#i.coins.forEach(c=>{c.body.setAngvel(new x(0,0,0),!1),c.body.setLinvel(new x(0,0,0),!1),c.body.sleep()}),t===m0.RAISING_BASE_TO_CLEANUP_POSITION||t===m0.RAISING_BASE||t===m0.LOWERING_BASE||t===m0.LOWERING_BASE_TO_READY_POSITION){const c=new x().copy(s.body.translation());c.setY(this.#i.position+this.#i.supportPosition+this.#i.basePosition),s.body.setNextKinematicTranslation(c)}if(t===m0.MOVING_ARM_TO_CIRCUMFERENCE_POSITION||t===m0.MOVING_ARM_TO_CENTER_POSITION||t===m0.MOVING_ARM_BACK_TO_CIRCUMFERENCE_POSITION||t===m0.MOVING_ARM_TO_INITIAL_POSITION){const c=new x().copy(a.body.translation());c.setZ(this.#i.armPosition),a.body.setNextKinematicTranslation(c)}if(t===m0.CLOSING_ARM_DOOR||t===m0.OPENING_ARM_DOOR){const c=new x().copy(d.body.translation());c.setY(this.#i.position+this.#i.armPosition+this.#i.armDoorPosition),d.body.setNextKinematicTranslation(c)}if(t===m0.CLEANING_UP_BASE_LEFT||t===m0.CLEANING_UP_BASE_RIGHT||t===m0.ROTATING_BASE||t===m0.ALIGNING_COINS||t===m0.RESETTING_BASE_ROTATION){const c=new _0().setFromAxisAngle(eI,this.#i.baseAngle),u=new x().sub(this.#r).applyQuaternion(c).add(this.#r);u.setY(this.#i.position+this.#i.supportPosition+this.#i.basePosition),s.body.setNextKinematicTranslation(u),s.body.setNextKinematicRotation(c);const p=new x().sub(this.#r).applyQuaternion(c).add(this.#r);p.setY(this.#i.position+this.#i.supportPosition),r.body.setNextKinematicTranslation(p),r.body.setNextKinematicRotation(c)}if(t===m0.RAISING_ARM_PROTECTION_LID||t===m0.LOWERING_ARM_PROTECTION_LID){let c=new x().setY(this.#i.position+this.#i.armPosition);const u=this.#c.clone().setY(this.#c.y+this.#i.position),p=new _0().setFromAxisAngle($z,this.#i.armProtectionLidAngle);c=c.sub(u).applyQuaternion(p).add(u),l.body.setNextKinematicTranslation(c),l.body.setNextKinematicRotation(p)}if(t===m0.INITIALIZING_COIN){const c=this.#a.clone();c.setZ(c.z+this.#i.armPosition-d1),c.setY(c.y+this.#i.position),this.#i.coin=this.#o({position:c,rotation:Qz}),this.#i.coins.push(this.#i.coin)}t===m0.PUSHING_COIN&&this.#i.coin.body.applyImpulse(tI,!0),e.forEach(({meshes:c,body:u})=>{c.forEach(({data:p})=>{p.position.copy(u.translation()),p.quaternion.copy(u.rotation())})})}n.state!==Ft.IDLE&&n.bulbs.forEach((s,r)=>{this.#t[r].emissiveIntensity=s.intensity}),this.#i.nextState&&(this.#i.state=this.#i.nextState),this.#i.lights.nextState&&(this.#i.lights.state=this.#i.lights.nextState)}deliver({stacks:e=ta,levels:t=na}={stacks:ta,levels:na}){t=Math.max(na,Math.min(iI,t)),e=Math.max(ta,Math.min(nI,e)),this.#i.state===m0.IDLE?(this.#i.stacks=e,this.#i.levels=t,this.#i.state=m0.ACTIVATING):this.#i.pendingDeliveries.push({stacks:e,levels:t})}save(){const e={};this.#i.parts.forEach(({body:n},s)=>{e[s]={bodyHandle:n.handle}});const t=this.#i.coins.map(n=>n.body.handle);return{state:this.#i.state.description,parts:e,position:this.#i.position,supportPosition:this.#i.supportPosition,basePosition:this.#i.basePosition,armPosition:this.#i.armPosition,armDoorPosition:this.#i.armDoorPosition,armProtectionLidAngle:this.#i.armProtectionLidAngle,rotations:this.#i.rotations,rotationDirection:this.#i.rotationDirection,baseAngle:this.#i.baseAngle,level:this.#i.level,stacks:this.#i.stacks,levels:this.#i.levels,pendingDeliveries:this.#i.pendingDeliveries.map(n=>({stacks:n.stacks,levels:n.levels})),nextState:this.#i.nextState?this.#i.nextState.description:null,coinHandle:this.#i.coin?this.#i.coin.handle:null,coinsHandles:t,lights:{state:this.#i.lights.state.description,nextState:this.#i.lights.nextState?this.#i.lights.nextState.description:null,frameLastRefresh:this.#i.lights.frameLastRefresh,bulbs:this.#i.lights.bulbs.map(n=>({intensity:n.intensity}))}}}load(e){this.#i.state=Symbol.for(e.state),this.#i.position=e.position,this.#i.supportPosition=e.supportPosition,this.#i.basePosition=e.basePosition,this.#i.armPosition=e.armPosition,this.#i.armDoorPosition=e.armDoorPosition,this.#i.armProtectionLidAngle=e.armProtectionLidAngle,this.#i.rotations=e.rotations,this.#i.rotationDirection=e.rotationDirection,this.#i.baseAngle=e.baseAngle,this.#i.level=e.level,this.#i.stacks=e.stacks,this.#i.levels=e.levels,this.#i.pendingDeliveries=e.pendingDeliveries.map(t=>({stacks:t.stacks,levels:t.levels})),this.#i.nextState=e.nextState?Symbol.for(e.nextState):null,e.coinHandle?this.#i.coin=this.#e.worldBodies.get(e.coinHandle):this.#i.coin=null,this.#i.coins=[],e.coinsHandles.forEach(t=>this.#i.coins.push(this.#e.worldBodies.get(t))),this.#i.parts.forEach((t,n)=>{const s=e.parts[n];s&&(t.body=this.#e.worldBodies.get(s.bodyHandle))}),this.#i.lights.state=Symbol.for(e.lights.state),this.#i.lights.nextState=e.lights.nextState?Symbol.for(e.lights.nextState):null,this.#i.lights.frameLastRefresh=e.lights.frameLastRefresh,this.#i.lights.bulbs=e.lights.bulbs.map(t=>({intensity:t.intensity}))}get active(){return this.#i.state!==m0.IDLE&&this.#i.state!==m0.ACTIVATING}}function hI({stacker:i,canActivate:e}){let t;switch(i.nextState=null,i.state){case m0.IDLE:break;case m0.ACTIVATING:e()&&(i.nextState=m0.RAISING_STACKER_TO_CLEANUP_POSITION,i.lights.state=Ft.ACTIVATING);break;case m0.RAISING_STACKER_TO_CLEANUP_POSITION:i.position+=b6,i.position>L6&&(i.position=L6,i.nextState=m0.RAISING_BASE_TO_CLEANUP_POSITION);break;case m0.RAISING_BASE_TO_CLEANUP_POSITION:i.basePosition+=_3,i.basePosition>H6&&(i.basePosition=H6,i.nextState=m0.CLEANING_UP_BASE_LEFT);break;case m0.CLEANING_UP_BASE_LEFT:i.baseAngle-=g6,i.baseAngle<-T6*Rr&&(i.baseAngle=Hi,i.nextState=m0.CLEANING_UP_BASE_RIGHT);break;case m0.CLEANING_UP_BASE_RIGHT:i.baseAngle+=g6,i.baseAngle>T6*Rr&&(i.baseAngle=Hi,i.nextState=m0.RAISING_STACKER);break;case m0.RAISING_STACKER:i.position+=b6,i.position>M6&&(i.position=M6,i.nextState=m0.RAISING_ARM_PROTECTION_LID);break;case m0.RAISING_ARM_PROTECTION_LID:i.armProtectionLidAngle-=w6,i.armProtectionLidAngle<E6&&(i.armProtectionLidAngle=E6,i.nextState=m0.LOWERING_ARM_PROTECTION_LID);break;case m0.LOWERING_ARM_PROTECTION_LID:i.armProtectionLidAngle+=w6,i.armProtectionLidAngle>To&&(i.armProtectionLidAngle=To,i.nextState=m0.LOWERING_SUPPORT_TO_READY_POSITION);break;case m0.LOWERING_SUPPORT_TO_READY_POSITION:i.supportPosition-=v6,i.supportPosition<N6&&(i.supportPosition=N6,i.nextState=m0.LOWERING_BASE_TO_READY_POSITION);break;case m0.LOWERING_BASE_TO_READY_POSITION:i.basePosition-=_3,i.basePosition<R6&&(i.basePosition=R6,i.nextState=m0.OPENING_ARM_DOOR);break;case m0.OPENING_ARM_DOOR:i.armDoorPosition-=y6,i.armDoorPosition<P6&&(i.armDoorPosition=P6,i.stacks==1?i.nextState=m0.MOVING_ARM_TO_CENTER_POSITION:i.nextState=m0.MOVING_ARM_TO_CIRCUMFERENCE_POSITION);break;case m0.MOVING_ARM_TO_CIRCUMFERENCE_POSITION:i.armPosition+=Hr,i.armPosition>d1&&(i.armPosition=d1,i.nextState=m0.INITIALIZING_COIN);break;case m0.INITIALIZING_COIN:i.nextState=m0.PUSHING_COIN;break;case m0.PUSHING_COIN:i.coin.position.y<x6+i.position&&(i.stacks==1?i.nextState=m0.LOWERING_BASE:i.armPosition===d1?(i.stacks==2||i.stacks==3?i.rotations+=3:i.stacks==4?i.rotations+=2:i.stacks==5?i.rotations%3==0?i.rotations+=i.rotationDirection==1?2:1:i.rotations+=i.rotationDirection==1?1:2:i.rotations++,i.nextState=m0.ROTATING_BASE):i.nextState=m0.LOWERING_BASE);break;case m0.ROTATING_BASE:i.baseAngle+=$3*i.rotationDirection,t=Rr/ea*i.rotations*i.rotationDirection,(i.rotationDirection==1&&i.baseAngle>t||i.rotationDirection==-1&&i.baseAngle<t)&&(i.baseAngle=t,i.rotations==ea?(i.rotations=jr,i.baseAngle=Hi,i.stacks==2||i.stacks==6?i.nextState=m0.LOWERING_BASE:i.nextState=m0.MOVING_ARM_TO_CENTER_POSITION):i.nextState=m0.INITIALIZING_COIN);break;case m0.MOVING_ARM_TO_CENTER_POSITION:i.armPosition+=Hr,i.armPosition>S6&&(i.armPosition=S6,i.nextState=m0.INITIALIZING_COIN);break;case m0.LOWERING_BASE:i.basePosition-=_3,x6+i.position-i.coin.position.y>_z&&(i.rotationDirection=-i.rotationDirection,i.stacks==1?i.nextState=m0.FINISHING_LEVEL:i.nextState=m0.MOVING_ARM_BACK_TO_CIRCUMFERENCE_POSITION);break;case m0.MOVING_ARM_BACK_TO_CIRCUMFERENCE_POSITION:i.armPosition-=Hr,i.armPosition<d1&&(i.armPosition=d1,i.nextState=m0.FINISHING_LEVEL);break;case m0.FINISHING_LEVEL:i.level++,i.level<i.levels?i.nextState=m0.INITIALIZING_COIN:(i.level=J8,i.levels=-1,i.nextState=m0.MOVING_ARM_TO_INITIAL_POSITION);break;case m0.MOVING_ARM_TO_INITIAL_POSITION:i.armPosition-=Hr,i.armPosition<vo&&(i.armPosition=vo,i.nextState=m0.CLOSING_ARM_DOOR);break;case m0.CLOSING_ARM_DOOR:i.armDoorPosition+=y6,i.armDoorPosition>go&&(i.armDoorPosition=go,i.stacks==2||i.stacks==3||i.stacks==5?i.nextState=m0.ALIGNING_COINS:i.nextState=m0.LOWERING_STACKER);break;case m0.ALIGNING_COINS:i.baseAngle-=$3,t=-Rr/ea*(i.stacks==5?2:1.5),i.baseAngle<t&&(i.baseAngle=t,i.nextState=m0.LOWERING_STACKER);break;case m0.LOWERING_STACKER:i.position-=v6,i.position<wo&&(i.position=wo,i.basePosition=Y8,i.supportPosition=k8,i.stacks==2||i.stacks==3||i.stacks==5?i.nextState=m0.RESETTING_BASE_ROTATION:(i.rotations=jr,i.baseAngle=Hi,i.nextState=m0.PREPARING_IDLE));break;case m0.RESETTING_BASE_ROTATION:i.baseAngle+=$3,i.baseAngle>Hi&&(i.baseAngle=Hi,i.rotations=jr,i.rotationDirection=1,i.nextState=m0.PREPARING_IDLE);break;case m0.PREPARING_IDLE:if(i.coin=null,i.coins=[],i.pendingDeliveries.length>0){const{stacks:n,levels:s}=i.pendingDeliveries.shift();i.stacks=n,i.levels=s,i.nextState=m0.ACTIVATING}else i.stacks=-1,i.nextState=m0.IDLE;break}}function mI({stacker:i}){switch(i.lights.nextState=null,i.lights.state){case Ft.IDLE:break;case Ft.ACTIVATING:i.lights.frameLastRefresh=0,i.lights.nextState=Ft.BLINKING;break;case Ft.BLINKING:i.lights.frameLastRefresh++,i.lights.frameLastRefresh>uI&&(i.lights.frameLastRefresh=0,i.lights.bulbs.forEach(e=>{e.intensity=e.intensity>m2?0:ns})),i.state===m0.INITIALIZING_COIN&&(i.lights.nextState=Ft.ROTATING);break;case Ft.ROTATING:i.lights.bulbs.forEach((e,t)=>{i.stacks===1?e.intensity=(t+i.level)%4<2?0:ns:e.intensity=t%4<2?0:ns}),i.state===m0.LOWERING_STACKER&&(i.lights.nextState=Ft.DELIVERING);break;case Ft.DELIVERING:i.lights.frameLastRefresh++,i.lights.frameLastRefresh>pI&&(i.lights.frameLastRefresh=0,i.lights.bulbs.forEach(e=>{e.intensity=e.intensity==ns?0:ns})),i.state===m0.PREPARING_IDLE&&(i.lights.nextState=Ft.PREPARING_IDLE);break;case Ft.PREPARING_IDLE:i.lights.bulbs.forEach(e=>{e.intensity=m2}),i.lights.frameLastRefresh=-1,i.lights.nextState=Ft.IDLE;break}}async function yI({scene:i}){const t=(await i.loadModel(kz)).scene,n=new Map,s=new x,r=new x,a=new x,o=[];return t.traverse(l=>{if(l.isMesh){const{material:d,geometry:c}=l,u=d.userData;if(u.collider){const p=u.name,h=c.index,b=c.attributes.position,T=[],m=[];for(let N=0;N<b.count;N++)T.push(b.getX(N),b.getY(N),b.getZ(N));for(let N=0;N<h.count;N++)m.push(h.getX(N));const f=ia(n,p);f.friction=u.friction,f.restitution=u.restitution,f.kinematic=u.kinematic,f.cuboid=u.cuboid,f.cylinder=u.cylinder,f.meshes.push({data:l,vertices:T,indices:m})}else{l.material.userData.light&&(o[l.material.userData.index]=l.material);const p=l.userData.name;ia(n,p).meshes.push({data:l})}}else if(l.userData.collider){const d=l.userData.name;ia(n,d).colliders.push({position:l.position,radius:l.userData.radius,height:l.userData.height})}else l.name==Jz?s.copy(l.position):l.name==Kz?r.copy(l.position):l.name==Bz&&a.copy(l.position)}),{parts:n,dropPosition:s,pivotPosition:r,armProtectionLidPivotPosition:a,lightBulbsMaterials:o}}function ia(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[],colliders:[]},i.set(e,t)),t}function bI({scene:i,parts:e}){let t=0;e.forEach(n=>{const{meshes:s,colliders:r,friction:a,restitution:o,kinematic:l,cuboid:d,cylinder:c}=n,u=n.body=l?i.createKinematicBody():i.createFixedBody();if(u.setEnabled(!1),d||c){const p=s[0].data.geometry.boundingBox,h=new x().addVectors(p.min,p.max).multiplyScalar(.5).toArray(),b=new x(p.max.x-p.min.x,p.max.y-p.min.y,p.max.z-p.min.z);let T;d?T=i.createCuboidCollider({position:h,width:b.x,height:b.y,depth:b.z,friction:a,restitution:o},u):T=i.createCylinderCollider({position:h,radius:b.x/2,height:b.y,friction:a,restitution:o},u),T.setCollisionGroups(1<<t%16<<16|1<<t%16),t++}else{const p=[],h=[];let b=0;s.forEach(T=>{T.vertices&&(p.push(...T.vertices),h.push(...T.indices.map(m=>m+b)),b+=Math.max(...T.indices)+1)}),p.length>0&&(i.createTrimeshCollider({vertices:p,indices:h,friction:a,restitution:o},u).setCollisionGroups(1<<t%16<<16|1<<t%16),t++)}r.forEach(p=>{const{radius:h,position:b,height:T}=p;i.createCylinderCollider({radius:h,height:T,position:b,friction:a,restitution:o},u).setCollisionGroups(1<<t%16<<16|1<<t%16),t++})})}function vI({lightBulbsMaterials:i,lights:e}){i.forEach((t,n)=>{t.emissive.setHex(cI),t.emissiveIntensity=m2,e.bulbs[n]={intensity:m2}})}const gI="./assets/mini-stacker.glb",wI="drop-position",TI="pivot-position",xI="arm-protection-lid-pivot-position",Nr=new x(0,0,0),SI=.006,PI=new x(1,0,0),HI=new x(0,1,0),O6=.02,z6=5e-4,sa=5e-4,I6=.003,X6=.001,A6=Math.PI/9,C6=.1,F6=3,V6=.14,RI=new x(0,0,1e-5),xo=0,D6=.08,So=0,j6=-.025,Wr=0,K8=0,W6=.005,U6=-.03,B8=0,q6=-.01,Po=0,G6=.15,Z6=.225,Y6=Math.PI*2,Ho=0,k6=-Math.PI/3,Q8=0,ra=5,NI=80,LI="base",MI="support",EI="arm",OI="arm-protection",zI="arm-protection-lid",II="arm-door",y2=0,Lr=5,XI=16711935,AI=35,CI=10,L0={IDLE:Symbol.for("stacker-idle"),ACTIVATING:Symbol.for("stacker-activating"),RAISING_STACKER_TO_CLEANUP_POSITION:Symbol.for("stacker-raising-stacker-to-cleanup-position"),RAISING_BASE_TO_CLEANUP_POSITION:Symbol.for("stacker-raising-base-to-cleanup-position"),CLOSING_ARM_DOOR:Symbol.for("stacker-closing-arm-door"),RAISING_ARM_PROTECTION_LID:Symbol.for("stacker-raising-arm-protection-lid"),LOWERING_ARM_PROTECTION_LID:Symbol.for("stacker-lowering-arm-protection-lid"),LOWERING_SUPPORT_TO_READY_POSITION:Symbol.for("stacker-lowering-support-to-ready-position"),LOWERING_BASE_TO_READY_POSITION:Symbol.for("stacker-lowering-base-to-ready-position"),CLEANING_UP_BASE_LEFT:Symbol.for("stacker-cleaning-up-base-left"),CLEANING_UP_BASE_RIGHT:Symbol.for("stacker-cleaning-up-base-right"),RAISING_STACKER:Symbol.for("stacker-raising-stacker"),OPENING_ARM_DOOR:Symbol.for("stacker-opening-arm-door"),MOVING_ARM_TO_DROP_POSITION:Symbol.for("stacker-moving-arm-to-drop-position"),INITIALIZING_COIN:Symbol.for("stacker-initializing-coin"),PUSHING_COIN:Symbol.for("stacker-pushing-coin"),LOWERING_BASE:Symbol.for("stacker-lowering-base"),FINISHING_LEVEL:Symbol.for("stacker-finishing-level"),MOVING_ARM_TO_INITIAL_POSITION:Symbol.for("stacker-moving-arm-to-initial-position"),LOWERING_STACKER:Symbol.for("stacker-lowering-stacker"),PREPARING_IDLE:Symbol.for("stacker-preparing-idle")},Vt={IDLE:Symbol.for("stacker-lights-idle"),ACTIVATING:Symbol.for("stacker-lights-activating"),BLINKING:Symbol.for("stacker-lights-blinking"),ROTATING:Symbol.for("stacker-lights-rotating"),DELIVERING:Symbol.for("stacker-lights-delivering"),PREPARING_IDLE:Symbol.for("stacker-lights-preparing-idle")};class J6{#e;#t;#n;#o;#a;#r;#c;#i;#s={parts:null,level:Q8,coin:null,coins:[],nextState:null,levels:-1,pendingDeliveries:[],state:L0.IDLE,position:Po,supportPosition:B8,basePosition:K8,armPosition:xo,armDoorPosition:So,armProtectionLidAngle:Ho,baseAngle:Wr,lights:{state:Vt.IDLE,frameLastRefresh:-1,bulbs:[],nextState:null}};constructor({scene:e,canActivate:t,onInitializeCoin:n,offsetX:s=0}){this.#e=e,this.#i=s,this.#n=t,this.#o=n}async initialize(){const e=this.#e,{parts:t,dropPosition:n,pivotPosition:s,armProtectionLidPivotPosition:r,lightBulbsMaterials:a}=await DI({scene:e,offsetX:this.#i});this.#a=n,this.#r=s,this.#c=r,this.#t=a,jI({scene:e,parts:t,offsetX:this.#i}),WI({lightBulbsMaterials:a,lights:this.#s.lights}),t.forEach(({body:o,meshes:l})=>{l.forEach(({data:d})=>this.#e.addObject(d)),o.setEnabled(!0)}),Object.assign(this.#s,{parts:t})}update(){FI({stacker:this.#s,canActivate:()=>this.#n(this)}),VI({stacker:this.#s});const{parts:e,state:t,lights:n}=this.#s;if(t!==L0.IDLE){const s=e.get(LI),r=e.get(MI),a=e.get(EI),o=e.get(OI),l=e.get(zI),d=e.get(II);if(t===L0.RAISING_STACKER_TO_CLEANUP_POSITION||t===L0.RAISING_STACKER||t===L0.LOWERING_STACKER){const c=new x().copy(s.body.translation()),u=new x().copy(r.body.translation()),p=new x().copy(s.body.translation()),h=new x().copy(a.body.translation()),b=new x().copy(d.body.translation()),T=new x().copy(o.body.translation()),m=new x().copy(l.body.translation());c.setY(this.#s.position),this.#s.position+this.#s.supportPosition,u.setY(this.#s.position+this.#s.supportPosition);let f=this.#s.position+this.#s.supportPosition+this.#s.basePosition;f<0&&(f=0),p.setY(f),h.setY(this.#s.position+this.#s.armPosition),b.setY(this.#s.position+this.#s.armPosition+this.#s.armDoorPosition),T.setY(this.#s.position+this.#s.armPosition),m.setY(this.#s.position+this.#s.armPosition),r.body.setNextKinematicTranslation(u),s.body.setNextKinematicTranslation(p),a.body.setNextKinematicTranslation(h),o.body.setNextKinematicTranslation(T),l.body.setNextKinematicTranslation(m),d.body.setNextKinematicTranslation(b)}if(t===L0.LOWERING_SUPPORT_TO_READY_POSITION){const c=new x().copy(r.body.translation()),u=new x().copy(s.body.translation());c.setY(this.#s.position+this.#s.supportPosition),u.setY(this.#s.position+this.#s.supportPosition+this.#s.basePosition),s.body.setNextKinematicTranslation(u),r.body.setNextKinematicTranslation(c)}if((t===L0.LOWERING_STACKER||t===L0.PREPARING_IDLE)&&this.#s.coins.forEach(c=>{c.body.setAngvel(new x(0,0,0),!1),c.body.setLinvel(new x(0,0,0),!1),c.body.sleep()}),t===L0.RAISING_BASE_TO_CLEANUP_POSITION||t===L0.RAISING_BASE||t===L0.LOWERING_BASE||t===L0.LOWERING_BASE_TO_READY_POSITION){const c=new x().copy(s.body.translation());c.setY(this.#s.position+this.#s.supportPosition+this.#s.basePosition),s.body.setNextKinematicTranslation(c)}if(t===L0.MOVING_ARM_TO_DROP_POSITION||t===L0.MOVING_ARM_TO_INITIAL_POSITION){const c=new x().copy(a.body.translation());c.setZ(this.#s.armPosition),a.body.setNextKinematicTranslation(c)}if(t===L0.CLOSING_ARM_DOOR||t===L0.OPENING_ARM_DOOR){const c=new x().copy(d.body.translation());c.setY(this.#s.position+this.#s.armPosition+this.#s.armDoorPosition),d.body.setNextKinematicTranslation(c)}if(t===L0.CLEANING_UP_BASE_LEFT||t===L0.CLEANING_UP_BASE_RIGHT){const c=new _0().setFromAxisAngle(HI,this.#s.baseAngle),u=new x().sub(this.#r).applyQuaternion(c).add(this.#r);u.setY(this.#s.position+this.#s.supportPosition+this.#s.basePosition),s.body.setNextKinematicTranslation(u),s.body.setNextKinematicRotation(c);const p=new x().sub(this.#r).applyQuaternion(c).add(this.#r);p.setY(this.#s.position+this.#s.supportPosition),r.body.setNextKinematicTranslation(p),r.body.setNextKinematicRotation(c)}if(t===L0.RAISING_ARM_PROTECTION_LID||t===L0.LOWERING_ARM_PROTECTION_LID){let c=new x().setY(this.#s.position+this.#s.armPosition);const u=this.#c.clone().setY(this.#c.y+this.#s.position),p=new _0().setFromAxisAngle(PI,this.#s.armProtectionLidAngle);c=c.sub(u).applyQuaternion(p).add(u),l.body.setNextKinematicTranslation(c),l.body.setNextKinematicRotation(p)}if(t===L0.INITIALIZING_COIN){const c=this.#a.clone();c.setZ(c.z+this.#s.armPosition),c.setY(c.y+this.#s.position),this.#s.coin=this.#o({position:c,rotation:Nr}),this.#s.coins.push(this.#s.coin)}if(t===L0.PUSHING_COIN&&this.#s.coin.body.applyImpulse(RI,!0),t===L0.LOWERING_BASE){this.#s.coin.body.setRotation(new _0(Nr.x,Nr.y,Nr.z,1),!1);const c=this.#s.coin.body.translation();this.#s.coin.body.setTranslation(new x(this.#i,c.y,this.#r.z),!1)}e.forEach(({meshes:c,body:u})=>{c.forEach(({data:p})=>{p.position.copy(u.translation()),p.quaternion.copy(u.rotation())})})}n.state!==Vt.IDLE&&n.bulbs.forEach((s,r)=>{this.#t[r].emissiveIntensity=s.intensity}),this.#s.nextState&&(this.#s.state=this.#s.nextState),this.#s.lights.nextState&&(this.#s.lights.state=this.#s.lights.nextState)}deliver({levels:e=ra}={levels:ra}){e=Math.max(ra,Math.min(NI,e)),this.#s.state===L0.IDLE?(this.#s.levels=e,this.#s.state=L0.ACTIVATING):this.#s.pendingDeliveries.push({levels:e})}save(){const e={};this.#s.parts.forEach(({body:n},s)=>{e[s]={bodyHandle:n.handle}});const t=this.#s.coins.map(n=>n.body.handle);return{state:this.#s.state.description,parts:e,position:this.#s.position,supportPosition:this.#s.supportPosition,basePosition:this.#s.basePosition,armPosition:this.#s.armPosition,armDoorPosition:this.#s.armDoorPosition,armProtectionLidAngle:this.#s.armProtectionLidAngle,baseAngle:this.#s.baseAngle,level:this.#s.level,levels:this.#s.levels,pendingDeliveries:this.#s.pendingDeliveries.map(n=>({levels:n.levels})),nextState:this.#s.nextState?this.#s.nextState.description:null,coinHandle:this.#s.coin?this.#s.coin.handle:null,coinsHandles:t,lights:{state:this.#s.lights.state.description,nextState:this.#s.lights.nextState?this.#s.lights.nextState.description:null,frameLastRefresh:this.#s.lights.frameLastRefresh,bulbs:this.#s.lights.bulbs.map(n=>({intensity:n.intensity}))}}}load(e){this.#s.state=Symbol.for(e.state),this.#s.position=e.position,this.#s.supportPosition=e.supportPosition,this.#s.basePosition=e.basePosition,this.#s.armPosition=e.armPosition,this.#s.armDoorPosition=e.armDoorPosition,this.#s.armProtectionLidAngle=e.armProtectionLidAngle,this.#s.baseAngle=e.baseAngle,this.#s.level=e.level,this.#s.levels=e.levels,this.#s.pendingDeliveries=e.pendingDeliveries.map(t=>({levels:t.levels})),this.#s.nextState=e.nextState?Symbol.for(e.nextState):null,e.coinHandle?this.#s.coin=this.#e.worldBodies.get(e.coinHandle):this.#s.coin=null,this.#s.coins=[],e.coinsHandles.forEach(t=>this.#s.coins.push(this.#e.worldBodies.get(t))),this.#s.parts.forEach((t,n)=>{const s=e.parts[n];s&&(t.body=this.#e.worldBodies.get(s.bodyHandle))}),this.#s.lights.state=Symbol.for(e.lights.state),this.#s.lights.nextState=e.lights.nextState?Symbol.for(e.lights.nextState):null,this.#s.lights.frameLastRefresh=e.lights.frameLastRefresh,this.#s.lights.bulbs=e.lights.bulbs.map(t=>({intensity:t.intensity}))}get active(){return this.#s.state!==L0.IDLE&&this.#s.state!==L0.ACTIVATING}}function FI({stacker:i,canActivate:e}){switch(i.nextState=null,i.state){case L0.IDLE:break;case L0.ACTIVATING:e()&&(i.nextState=L0.RAISING_STACKER_TO_CLEANUP_POSITION,i.lights.state=Vt.ACTIVATING);break;case L0.RAISING_STACKER_TO_CLEANUP_POSITION:i.position+=I6,i.position>G6&&(i.position=G6,i.nextState=L0.RAISING_BASE_TO_CLEANUP_POSITION);break;case L0.RAISING_BASE_TO_CLEANUP_POSITION:i.basePosition+=sa,i.basePosition>W6&&(i.basePosition=W6,i.nextState=L0.CLEANING_UP_BASE_LEFT);break;case L0.CLEANING_UP_BASE_LEFT:i.baseAngle-=A6,i.baseAngle<-F6*Y6&&(i.baseAngle=Wr,i.nextState=L0.CLEANING_UP_BASE_RIGHT);break;case L0.CLEANING_UP_BASE_RIGHT:i.baseAngle+=A6,i.baseAngle>F6*Y6&&(i.baseAngle=Wr,i.nextState=L0.RAISING_STACKER);break;case L0.RAISING_STACKER:i.position+=I6,i.position>Z6&&(i.position=Z6,i.nextState=L0.RAISING_ARM_PROTECTION_LID);break;case L0.RAISING_ARM_PROTECTION_LID:i.armProtectionLidAngle-=C6,i.armProtectionLidAngle<k6&&(i.armProtectionLidAngle=k6,i.nextState=L0.LOWERING_ARM_PROTECTION_LID);break;case L0.LOWERING_ARM_PROTECTION_LID:i.armProtectionLidAngle+=C6,i.armProtectionLidAngle>Ho&&(i.armProtectionLidAngle=Ho,i.nextState=L0.LOWERING_SUPPORT_TO_READY_POSITION);break;case L0.LOWERING_SUPPORT_TO_READY_POSITION:i.supportPosition-=X6,i.supportPosition<q6&&(i.supportPosition=q6,i.nextState=L0.LOWERING_BASE_TO_READY_POSITION);break;case L0.LOWERING_BASE_TO_READY_POSITION:i.basePosition-=sa,i.basePosition<U6&&(i.basePosition=U6,i.nextState=L0.OPENING_ARM_DOOR);break;case L0.OPENING_ARM_DOOR:i.armDoorPosition-=z6,i.armDoorPosition<j6&&(i.armDoorPosition=j6,i.nextState=L0.MOVING_ARM_TO_DROP_POSITION);break;case L0.MOVING_ARM_TO_DROP_POSITION:i.armPosition+=O6,i.armPosition>D6&&(i.armPosition=D6,i.nextState=L0.INITIALIZING_COIN);break;case L0.INITIALIZING_COIN:i.nextState=L0.PUSHING_COIN;break;case L0.PUSHING_COIN:i.coin.position.y<V6+i.position&&(i.nextState=L0.LOWERING_BASE);break;case L0.LOWERING_BASE:i.basePosition-=sa,V6+i.position-i.coin.position.y>SI&&(i.nextState=L0.FINISHING_LEVEL);break;case L0.FINISHING_LEVEL:i.level++,i.level<i.levels?i.nextState=L0.INITIALIZING_COIN:(i.level=Q8,i.levels=-1,i.nextState=L0.MOVING_ARM_TO_INITIAL_POSITION);break;case L0.MOVING_ARM_TO_INITIAL_POSITION:i.armPosition-=O6,i.armPosition<xo&&(i.armPosition=xo,i.nextState=L0.CLOSING_ARM_DOOR);break;case L0.CLOSING_ARM_DOOR:i.armDoorPosition+=z6,i.armDoorPosition>So&&(i.armDoorPosition=So,i.nextState=L0.LOWERING_STACKER);break;case L0.LOWERING_STACKER:i.position-=X6,i.position<Po&&(i.position=Po,i.basePosition=K8,i.supportPosition=B8,i.baseAngle=Wr,i.nextState=L0.PREPARING_IDLE);break;case L0.PREPARING_IDLE:if(i.coin=null,i.coins=[],i.pendingDeliveries.length>0){const{levels:t}=i.pendingDeliveries.shift();i.levels=t,i.nextState=L0.ACTIVATING}else i.nextState=L0.IDLE;break}}function VI({stacker:i}){switch(i.lights.nextState=null,i.lights.state){case Vt.IDLE:break;case Vt.ACTIVATING:i.lights.frameLastRefresh=0,i.lights.nextState=Vt.BLINKING;break;case Vt.BLINKING:i.lights.frameLastRefresh++,i.lights.frameLastRefresh>AI&&(i.lights.frameLastRefresh=0,i.lights.bulbs.forEach(e=>{e.intensity=e.intensity>y2?0:Lr})),i.state===L0.INITIALIZING_COIN&&(i.lights.nextState=Vt.ROTATING);break;case Vt.ROTATING:i.lights.bulbs.forEach((e,t)=>{e.intensity=(t+i.level)%2<1?0:Lr}),i.state===L0.LOWERING_STACKER&&(i.lights.nextState=Vt.DELIVERING);break;case Vt.DELIVERING:i.lights.frameLastRefresh++,i.lights.frameLastRefresh>CI&&(i.lights.frameLastRefresh=0,i.lights.bulbs.forEach(e=>{e.intensity=e.intensity==Lr?0:Lr})),i.state===L0.PREPARING_IDLE&&(i.lights.nextState=Vt.PREPARING_IDLE);break;case Vt.PREPARING_IDLE:i.lights.bulbs.forEach(e=>{e.intensity=y2}),i.lights.frameLastRefresh=-1,i.lights.nextState=Vt.IDLE;break}}async function DI({scene:i,offsetX:e}){const n=(await i.loadModel(gI)).scene,s=new Map,r=new x,a=new x,o=new x,l=[];return n.traverse(d=>{if(d.isMesh){const{material:c,geometry:u}=d;for(let h=0;h<u.index.count;h++){const b=u.attributes.position;b.setX(h,b.getX(h)+e)}const p=c.userData;if(p.collider){const h=p.name,b=u.index,T=u.attributes.position,m=[],f=[];for(let M=0;M<T.count;M++)m.push(T.getX(M),T.getY(M),T.getZ(M));for(let M=0;M<b.count;M++)f.push(b.getX(M));const N=aa(s,h);N.friction=p.friction,N.restitution=p.restitution,N.kinematic=p.kinematic,N.cuboid=p.cuboid,N.cylinder=p.cylinder,N.meshes.push({data:d,vertices:m,indices:f})}else{d.material.userData.light&&(l[d.material.userData.index]=d.material);const h=d.userData.name;aa(s,h).meshes.push({data:d})}}else if(d.userData.collider){const c=d.userData.name,u=aa(s,c),p=d.position.clone();p.x+=e,u.colliders.push({position:d.position,radius:d.userData.radius,height:d.userData.height})}else if(d.name==wI){const c=d.position.clone();c.x+=e,r.copy(c)}else if(d.name==TI){const c=d.position.clone();c.x+=e,a.copy(c)}else if(d.name==xI){const c=d.position.clone();c.x+=e,o.copy(c)}}),{parts:s,dropPosition:r,pivotPosition:a,armProtectionLidPivotPosition:o,lightBulbsMaterials:l}}function aa(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[],colliders:[]},i.set(e,t)),t}function jI({scene:i,parts:e,offsetX:t}){let n=0;e.forEach(s=>{const{meshes:r,colliders:a,friction:o,restitution:l,kinematic:d,cuboid:c,cylinder:u}=s,p=s.body=d?i.createKinematicBody():i.createFixedBody();if(p.setEnabled(!1),c||u){const h=r[0].data.geometry.boundingBox,b=new x().addVectors(h.min,h.max).multiplyScalar(.5);b.x+=t;const T=new x(h.max.x-h.min.x,h.max.y-h.min.y,h.max.z-h.min.z);let m;c?m=i.createCuboidCollider({position:b.toArray(),width:T.x,height:T.y,depth:T.z,friction:o,restitution:l},p):m=i.createCylinderCollider({position:b.toArray(),radius:T.x/2,height:T.y,friction:o,restitution:l},p),m.setCollisionGroups(1<<n%16<<16|1<<n%16),n++}else{const h=[],b=[];let T=0;r.forEach(m=>{m.vertices&&(h.push(...m.vertices),b.push(...m.indices.map(f=>f+T)),T+=Math.max(...m.indices)+1)}),h.length>0&&(i.createTrimeshCollider({vertices:h,indices:b,friction:o,restitution:l},p).setCollisionGroups(1<<n%16<<16|1<<n%16),n++)}a.forEach(h=>{const{radius:b,position:T,height:m}=h;T.x+=t,i.createCylinderCollider({radius:b,height:m,position:T,friction:o,restitution:l},p).setCollisionGroups(1<<n%16<<16|1<<n%16),n++})})}function WI({lightBulbsMaterials:i,lights:e}){i.forEach((t,n)=>{t.emissive.setHex(XI),t.emissiveIntensity=y2,e.bulbs[n]={intensity:y2}})}const UI="./assets/sweepers.glb",qI="left-base",GI="right-base",_8="left-sweeper",ZI="right-sweeper",YI="left-door",kI="right-door",JI="left-flap",KI="right-flap",BI="left-pivot-position",QI="right-pivot-position",_I="left-door-pivot-position",$I="right-door-pivot-position",li=new x(0,1,0),Mr=new x(0,0,1),b2=26.5*(Math.PI/180),eX=new _0().setFromAxisAngle(li,-b2),tX=new _0().setFromAxisAngle(li,b2),K6=.05,Er=.002,B6=.08,Q6=.07,_6=.01,$6=Math.PI/2,e4=.01,t4=.001,n4=Math.PI,i4=Math.PI/2,nX=.0075,iX=.03,s4=.05,Ro=0,No=0,Lo=0,sX=0,Mo=0,Eo=0,Oo=0,rX=16711680,zo=0,r4=2,aX=20,de={IDLE:Symbol.for("sweepers-idle"),ACTIVATING:Symbol.for("sweepers-activating"),OPENING_DOORS:Symbol.for("sweepers-opening-doors"),MOVING_BASE:Symbol.for("sweepers-moving-base"),ROTATING_BASE:Symbol.for("sweepers-rotating-base"),TRANSLATING_BASE:Symbol.for("sweepers-translating-base"),ROTATING_SWEEPERS:Symbol.for("sweepers-rotating-sweepers"),DEPLOYING_FLAPS:Symbol.for("sweepers-deploying-flaps"),SWEEPING:Symbol.for("sweepers-sweeping"),SWEEPING_BACK:Symbol.for("sweepers-sweeping-back"),RETRACTING_FLAPS:Symbol.for("sweepers-retracting-flaps"),ROTATING_SWEEPERS_BACK:Symbol.for("sweepers-rotating-sweepers-back"),TRANSLATING_BASE_BACK:Symbol.for("sweepers-translating-base-back"),ROTATING_BASE_BACK:Symbol.for("sweepers-rotating-base-back"),MOVING_BASE_BACK:Symbol.for("sweepers-moving-base-back"),CLOSING_DOORS:Symbol.for("sweepers-closing-doors")},di={IDLE:Symbol.for("sweepers-lights-idle"),ACTIVATING:Symbol.for("sweepers-lights-activating"),BLINKING:Symbol.for("sweepers-lights-blinking")};class oX{#e;#t;#n;#o;#a;#r;#c;#i;#s;#d;#p;#l;#y;#w;#m=new x;#h=new x;#b=new _0;#v=new _0;#f=new x;#S=new x;#T=new x;#P=new x;#g=new _0;#R=new _0;#H=new _0;#x=new _0;#N=new _0;#E=new _0;#O=new x;#z=new x;#I=new x;#X=new x;#A=new x;#C=new x;#L=new _0;#M=new _0;#F=new x;#V=new x;#D;#j;#u={parts:null,state:de.IDLE,position:Ro,rotation:No,translation:Lo,sweepersRotationZ:sX,sweepersRotationY:Mo,doorsRotation:Eo,flapsPosition:Oo,level:0,pendingSweeps:[],nextState:null,lights:{state:di.IDLE,leftOn:!1,rightOn:!1,frameLastRefresh:-1}};constructor({scene:e,canActivate:t}){this.#e=e,this.#t=t}async initialize(){const e=this.#e,{parts:t,leftPivotPosition:n,rightPivotPosition:s,leftDoorPivotPosition:r,rightDoorPivotPosition:a,leftLightMaterial:o,rightLightMaterial:l}=await cX({scene:e});this.#n=n,this.#o=s,this.#a=r,this.#r=a,this.#D=o,this.#j=l,uX({scene:e,parts:t}),t.forEach(({body:d,meshes:c})=>{c.forEach(({data:u})=>this.#e.addObject(u)),d.setEnabled(!0)}),Object.assign(this.#u,{parts:t}),this.#c=t.get(qI),this.#i=t.get(GI),this.#p=t.get(_8),this.#l=t.get(ZI),this.#s=t.get(YI),this.#d=t.get(kI),this.#y=t.get(JI),this.#w=t.get(KI)}update(){lX({sweepers:this.#u,canActivate:()=>this.#t(this)}),dX({sweepers:this.#u,lights:this.#u.lights});const{parts:e,state:t}=this.#u;t!==de.IDLE&&(this.#m.set(this.#u.position,0,0),this.#h.set(-this.#u.position,0,0),this.#b.setFromAxisAngle(li,-this.#u.rotation),this.#v.setFromAxisAngle(li,this.#u.rotation),this.#R.setFromAxisAngle(li,-this.#u.sweepersRotationY),this.#H.setFromAxisAngle(Mr,this.#u.sweepersRotationZ),this.#N.setFromAxisAngle(li,this.#u.sweepersRotationY),this.#E.setFromAxisAngle(Mr,-this.#u.sweepersRotationZ),this.#g.setFromAxisAngle(li,-this.#u.rotation).multiply(this.#R).multiply(this.#H),this.#x.setFromAxisAngle(li,this.#u.rotation).multiply(this.#N).multiply(this.#E),this.#f.set(this.#u.translation,0,0).applyQuaternion(this.#b),this.#S.set(-this.#u.translation,0,0).applyQuaternion(this.#v),this.#z.set(-this.#u.flapsPosition,0,0),this.#F.set(this.#u.flapsPosition,0,0),this.#T.copy(this.#m).sub(this.#n).applyQuaternion(this.#g).add(this.#n).add(this.#f),this.#P.copy(this.#h).sub(this.#o).applyQuaternion(this.#x).add(this.#o).add(this.#S),this.#I.copy(this.#m).sub(this.#n).add(this.#z).applyQuaternion(this.#g).add(this.#n).add(this.#f),this.#V.copy(this.#h).sub(this.#o).add(this.#F).applyQuaternion(this.#x).add(this.#o).add(this.#S),this.#m.sub(this.#n).applyQuaternion(this.#b).add(this.#n).add(this.#f),this.#h.sub(this.#o).applyQuaternion(this.#v).add(this.#o).add(this.#S),this.#O.copy(Mr).applyQuaternion(eX),this.#L.setFromAxisAngle(this.#O,this.#u.doorsRotation),this.#A.set(0,0,0).sub(this.#a).applyQuaternion(this.#L).add(this.#a),this.#X.copy(Mr).applyQuaternion(tX),this.#M.setFromAxisAngle(this.#X,-this.#u.doorsRotation),this.#C.set(0,0,0).sub(this.#r).applyQuaternion(this.#M).add(this.#r),this.#c.body.setNextKinematicTranslation(this.#m),this.#i.body.setNextKinematicTranslation(this.#h),this.#p.body.setNextKinematicTranslation(this.#T),this.#l.body.setNextKinematicTranslation(this.#P),this.#y.body.setNextKinematicTranslation(this.#I),this.#w.body.setNextKinematicTranslation(this.#V),this.#y.body.setNextKinematicRotation(this.#g),this.#w.body.setNextKinematicRotation(this.#x),this.#s.body.setNextKinematicTranslation(this.#A),this.#d.body.setNextKinematicTranslation(this.#C),this.#c.body.setNextKinematicRotation(this.#b),this.#i.body.setNextKinematicRotation(this.#v),this.#p.body.setNextKinematicRotation(this.#g),this.#l.body.setNextKinematicRotation(this.#x),this.#s.body.setNextKinematicRotation(this.#L),this.#d.body.setNextKinematicRotation(this.#M),e.forEach(({meshes:n,body:s})=>{n.forEach(({data:r})=>{r.position.copy(s.translation()),r.quaternion.copy(s.rotation())})}),this.#u.lights.state===di.BLINKING&&(this.#D.emissiveIntensity=this.#u.lights.leftOn?r4:zo,this.#j.emissiveIntensity=this.#u.lights.rightOn?r4:zo)),this.#u.nextState&&(this.#u.state=this.#u.nextState),this.#u.lights.nextState&&(this.#u.lights.state=this.#u.lights.nextState)}sweepFloor({level:e}={level:0}){e=Math.max(0,Math.min(10,e))/10,this.#u.state===de.IDLE?(this.#u.level=e,this.#u.state=de.ACTIVATING):this.#u.pendingSweeps.push({level:e})}save(){const e={};return this.#u.parts.forEach(({body:t},n)=>{e[n]={bodyHandle:t.handle}}),{state:this.#u.state.description,nextState:this.#u.nextState?this.#u.nextState.description:null,parts:e,position:this.#u.position,rotation:this.#u.rotation,translation:this.#u.translation,sweepersRotationZ:this.#u.sweepersRotationZ,sweepersRotationY:this.#u.sweepersRotationY,doorsRotation:this.#u.doorsRotation,pendingSweeps:this.#u.pendingSweeps.map(t=>({level:t.level})),lights:{state:this.#u.lights.state.description,nextState:this.#u.lights.nextState?this.#u.lights.nextState.description:null,leftOn:this.#u.lights.leftOn,rightOn:this.#u.lights.rightOn,frameLastRefresh:this.#u.lights.frameLastRefresh}}}load(e){this.#u.state=Symbol.for(e.state),this.#u.nextState=e.nextState?Symbol.for(e.nextState):null,this.#u.position=e.position,this.#u.rotation=e.rotation,this.#u.translation=e.translation,this.#u.sweepersRotationZ=e.sweepersRotationZ,this.#u.sweepersRotationY=e.sweepersRotationY,this.#u.doorsRotation=e.doorsRotation,this.#u.pendingSweeps=e.pendingSweeps.map(t=>({level:t.level})),this.#u.lights.state=Symbol.for(e.lights.state),this.#u.lights.nextState=e.lights.nextState?Symbol.for(e.lights.nextState):null,this.#u.lights.leftOn=e.lights.leftOn,this.#u.lights.rightOn=e.lights.rightOn,this.#u.lights.frameLastRefresh=e.lights.frameLastRefresh,this.#u.parts.forEach((t,n)=>{const s=e.parts[n];s&&(t.body=this.#e.worldBodies.get(s.bodyHandle))})}get active(){return this.#u.state!==de.IDLE&&this.#u.state!==de.ACTIVATING}}function lX({sweepers:i,canActivate:e}){switch(i.nextState=null,i.state){case de.IDLE:break;case de.ACTIVATING:e()&&(i.nextState=de.OPENING_DOORS);break;case de.OPENING_DOORS:i.doorsRotation+=K6,i.doorsRotation>$6&&(i.doorsRotation=$6,i.nextState=de.MOVING_BASE);break;case de.MOVING_BASE:i.position+=Er,i.position>B6&&(i.position=B6,i.nextState=de.ROTATING_BASE);break;case de.ROTATING_BASE:i.rotation+=_6,i.rotation>b2&&(i.rotation=b2,i.nextState=de.TRANSLATING_BASE);break;case de.TRANSLATING_BASE:i.translation+=Er,i.translation>Q6&&(i.translation=Q6,i.nextState=de.ROTATING_SWEEPERS);break;case de.ROTATING_SWEEPERS:i.sweepersRotationZ+=s4,i.sweepersRotationZ>i4&&(i.sweepersRotationZ=i4,i.nextState=de.DEPLOYING_FLAPS);break;case de.DEPLOYING_FLAPS:i.flapsPosition+=t4,i.flapsPosition>e4*i.level&&(i.flapsPosition=e4*i.level,i.nextState=de.SWEEPING,i.lights.state=di.ACTIVATING);break;case de.SWEEPING:i.sweepersRotationY+=nX,i.sweepersRotationY>n4&&(i.sweepersRotationY=n4,i.nextState=de.RETRACTING_FLAPS);break;case de.RETRACTING_FLAPS:i.flapsPosition-=t4,i.flapsPosition<Oo&&(i.flapsPosition=Oo,i.nextState=de.ROTATING_SWEEPERS_BACK);break;case de.ROTATING_SWEEPERS_BACK:i.sweepersRotationZ-=s4,i.sweepersRotationZ<0&&(i.sweepersRotationZ=0,i.nextState=de.SWEEPING_BACK);break;case de.SWEEPING_BACK:if(i.sweepersRotationY-=iX,i.sweepersRotationY<Mo)if(i.sweepersRotationY=Mo,i.pendingSweeps.length){const{level:t}=i.pendingSweeps.shift();i.level=t,i.nextState=de.OPENING_DOORS}else i.nextState=de.TRANSLATING_BASE_BACK;break;case de.TRANSLATING_BASE_BACK:i.translation-=Er,i.translation<Lo&&(i.translation=Lo,i.nextState=de.ROTATING_BASE_BACK);break;case de.ROTATING_BASE_BACK:i.rotation-=_6,i.rotation<No&&(i.rotation=No,i.nextState=de.MOVING_BASE_BACK);break;case de.MOVING_BASE_BACK:i.position-=Er,i.position<Ro&&(i.position=Ro,i.nextState=de.CLOSING_DOORS);break;case de.CLOSING_DOORS:i.doorsRotation-=K6,i.doorsRotation<Eo&&(i.doorsRotation=Eo,i.nextState=de.IDLE);break}}function dX({sweepers:i,lights:e}){switch(e.nextState=null,e.state){case di.IDLE:break;case di.ACTIVATING:e.frameLastRefresh=0,e.leftOn=!0,e.rightOn=!1,e.nextState=di.BLINKING;break;case di.BLINKING:e.frameLastRefresh++,e.frameLastRefresh>aX&&(e.frameLastRefresh=0,e.leftOn=!e.leftOn,e.rightOn=!e.rightOn),i.state==de.TRANSLATING_BASE_BACK&&(e.leftOn=!1,e.rightOn=!1,e.frameLastRefresh=-1,e.nextState=di.IDLE);break}}async function cX({scene:i}){const t=(await i.loadModel(UI)).scene,n=new Map,s=new x,r=new x,a=new x,o=new x;let l,d;return t.traverse(c=>{if(c.isMesh){const{material:u,geometry:p}=c,h=u.userData;if(h.collider){const b=h.name,T=p.index,m=p.attributes.position,f=[],N=[];for(let P=0;P<m.count;P++)f.push(m.getX(P),m.getY(P),m.getZ(P));for(let P=0;P<T.count;P++)N.push(T.getX(P));const M=a4(n,b);M.friction=h.friction,M.restitution=h.restitution,M.kinematic=h.kinematic,M.cuboid=h.cuboid,M.meshes.push({data:c,vertices:f,indices:N})}else a4(n,c.userData.name).meshes.push({data:c}),h.light&&(h.name==_8?l=u:d=u,u.emissive.setHex(rX),u.emissiveIntensity=zo)}else c.name==BI?s.copy(c.position):c.name==QI?r.copy(c.position):c.name==_I?a.copy(c.position):c.name==$I&&o.copy(c.position)}),{parts:n,leftPivotPosition:s,rightPivotPosition:r,leftDoorPivotPosition:a,rightDoorPivotPosition:o,leftLightMaterial:l,rightLightMaterial:d}}function a4(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[],colliders:[]},i.set(e,t)),t}function uX({scene:i,parts:e}){let t=0;e.forEach(n=>{const{meshes:s,friction:r,restitution:a,kinematic:o,cuboid:l}=n,d=n.body=o?i.createKinematicBody():i.createFixedBody();if(d.setEnabled(!1),l){const c=s[0].data.geometry.boundingBox,u=new x().addVectors(c.min,c.max).multiplyScalar(.5).toArray(),p=new x(c.max.x-c.min.x,c.max.y-c.min.y,c.max.z-c.min.z);let h;l&&(h=i.createCuboidCollider({position:u,width:p.x,height:p.y,depth:p.z,friction:r,restitution:a},d)),h.setCollisionGroups(1<<t%16<<16|1<<t%16),t++}else{const c=[],u=[];let p=0;s.forEach(h=>{h.vertices&&(c.push(...h.vertices),u.push(...h.indices.map(b=>b+p)),p+=Math.max(...h.indices)+1)}),c.length>0&&(i.createTrimeshCollider({vertices:c,indices:u,friction:r,restitution:a},d).setCollisionGroups(1<<t%16<<16|1<<t%16),t++)}})}const o4=new x,pX=new _0,l4=new x;class fX extends Ye{constructor(e=document.createElement("div")){super(),this.isCSS3DObject=!0,this.element=e,this.element.style.position="absolute",this.element.style.pointerEvents="auto",this.element.style.userSelect="none",this.element.setAttribute("draggable",!1),this.addEventListener("removed",function(){this.traverse(function(t){t.element instanceof t.element.ownerDocument.defaultView.Element&&t.element.parentNode!==null&&t.element.remove()})})}copy(e,t){return super.copy(e,t),this.element=e.element.cloneNode(!0),this}}const yn=new K0,hX=new K0;class mX{constructor(e={}){const t=this;let n,s,r,a;const o={camera:{style:""},objects:new WeakMap},l=e.element!==void 0?e.element:document.createElement("div");l.style.overflow="hidden",this.domElement=l;const d=document.createElement("div");d.style.transformOrigin="0 0",d.style.pointerEvents="none",l.appendChild(d);const c=document.createElement("div");c.style.transformStyle="preserve-3d",d.appendChild(c),this.getSize=function(){return{width:n,height:s}},this.render=function(m,f){const N=f.projectionMatrix.elements[5]*a;f.view&&f.view.enabled?(d.style.transform=`translate( ${-f.view.offsetX*(n/f.view.width)}px, ${-f.view.offsetY*(s/f.view.height)}px )`,d.style.transform+=`scale( ${f.view.fullWidth/f.view.width}, ${f.view.fullHeight/f.view.height} )`):d.style.transform="",m.matrixWorldAutoUpdate===!0&&m.updateMatrixWorld(),f.parent===null&&f.matrixWorldAutoUpdate===!0&&f.updateMatrixWorld();let M,P;f.isOrthographicCamera&&(M=-(f.right+f.left)/2,P=(f.top+f.bottom)/2);const V=f.view&&f.view.enabled?f.view.height/f.view.fullHeight:1,C=f.isOrthographicCamera?`scale( ${V} )scale(`+N+")translate("+u(M)+"px,"+u(P)+"px)"+p(f.matrixWorldInverse):`scale( ${V} )translateZ(`+N+"px)"+p(f.matrixWorldInverse),G=(f.isPerspectiveCamera?"perspective("+N+"px) ":"")+C+"translate("+r+"px,"+a+"px)";o.camera.style!==G&&(c.style.transform=G,o.camera.style=G),T(m,m,f)},this.setSize=function(m,f){n=m,s=f,r=n/2,a=s/2,l.style.width=m+"px",l.style.height=f+"px",d.style.width=m+"px",d.style.height=f+"px",c.style.width=m+"px",c.style.height=f+"px"};function u(m){return Math.abs(m)<1e-10?0:m}function p(m){const f=m.elements;return"matrix3d("+u(f[0])+","+u(-f[1])+","+u(f[2])+","+u(f[3])+","+u(f[4])+","+u(-f[5])+","+u(f[6])+","+u(f[7])+","+u(f[8])+","+u(-f[9])+","+u(f[10])+","+u(f[11])+","+u(f[12])+","+u(-f[13])+","+u(f[14])+","+u(f[15])+")"}function h(m){const f=m.elements;return"translate(-50%,-50%)"+("matrix3d("+u(f[0])+","+u(f[1])+","+u(f[2])+","+u(f[3])+","+u(-f[4])+","+u(-f[5])+","+u(-f[6])+","+u(-f[7])+","+u(f[8])+","+u(f[9])+","+u(f[10])+","+u(f[11])+","+u(f[12])+","+u(f[13])+","+u(f[14])+","+u(f[15])+")")}function b(m){m.isCSS3DObject&&(m.element.style.display="none");for(let f=0,N=m.children.length;f<N;f++)b(m.children[f])}function T(m,f,N,M){if(m.visible===!1){b(m);return}if(m.isCSS3DObject){const P=m.layers.test(N.layers)===!0,V=m.element;if(V.style.display=P===!0?"":"none",P===!0){m.onBeforeRender(t,f,N);let C;m.isCSS3DSprite?(yn.copy(N.matrixWorldInverse),yn.transpose(),m.rotation2D!==0&&yn.multiply(hX.makeRotationZ(m.rotation2D)),m.matrixWorld.decompose(o4,pX,l4),yn.setPosition(o4),yn.scale(l4),yn.elements[3]=0,yn.elements[7]=0,yn.elements[11]=0,yn.elements[15]=1,C=h(yn)):C=h(m.matrixWorld);const D=o.objects.get(m);if(D===void 0||D.style!==C){V.style.transform=C;const G={style:C};o.objects.set(m,G)}V.parentNode!==c&&c.appendChild(V),m.onAfterRender(t,f,N)}}for(let P=0,V=m.children.length;P<V;P++)T(m.children[P],f,N)}}}const yX="./assets/screen.glb",bX="display",vX=.442,gX=.319;class wX{#e;#t;#n;#o;constructor({scene:e}){this.#e=e,this.#t=document.createElement("iframe"),this.#t.style.width=`${vX*1e3}px`,this.#t.style.height=`${gX*1e3}px`,this.#t.style.border="none",this.#n=new mX,this.#n.setSize(window.innerWidth,window.innerHeight),this.#n.domElement.style.position="absolute",this.#n.domElement.style.top=0,e.containerElement.appendChild(this.#n.domElement)}async initialize(){const{screenPosition:e,screenRotation:t}=await TX({scene:this.#e});return this.#o=new fX(this.#t),this.#o.position.copy(e),this.#o.rotation.copy(t),this.#o.scale.set(.001,.001,.001),this.#e.css3DScene.add(this.#o),new Promise(n=>{addEventListener("message",()=>n(),{once:!0}),this.#t.src="views/index.html",this.update()})}update(){const e=this.#e.camera.position.clone(),t=this.#o.position.clone(),n=new x(0,0,1);n.applyQuaternion(this.#o.quaternion);const r=e.sub(t).normalize().dot(n);this.#o.visible=r>0,this.#n.render(this.#e.css3DScene,this.#e.camera)}resize(e,t){this.#n&&this.#n.setSize(e,t)}showDemoMode(){this.#t.contentWindow.postMessage({type:"showDemoMode"},"*")}showRunStart(e){this.#t.contentWindow.postMessage({type:"showRunStart",...e},"*")}showRunComplete(e){this.#t.contentWindow.postMessage({type:"showRunComplete",...e},"*")}}async function TX({scene:i}){const t=(await i.loadModel(yX)).scene;let n,s;return t.traverse(r=>{r.name===bX&&(n=r.position,s=r.rotation)}),i.addObject(t),{screenPosition:n,screenRotation:s}}const xX="./assets/card-reader.glb",SX="init-position",Io=0,d4=.05,c4=.175,u4=.125,Xo=-.01,p4=0,f4=.001,h4=.0025,m4=5,PX=15198183,HX=65314,RX=14540253,NX=.05,$8=0,We={IDLE:Symbol.for("card-reader-idle"),ACTIVATING:Symbol.for("card-reader-activating"),RETRIEVING_CARD:Symbol.for("card-reader-retrieving-card"),READING_CARD:Symbol.for("card-reader-reading-card"),RAISING_CARD:Symbol.for("card-reader-raising-card"),PUSHING_CARD:Symbol.for("card-reader-pushing-card"),RETRACTING_CARD:Symbol.for("card-reader-retracting-card"),LOWERING_CARD:Symbol.for("card-reader-lowering-card"),PREPARING_IDLE:Symbol.for("card-reader-preparing-idle")};class LX{#e;#t;#n;#o;#a;#r;#c;#i=new x;#s=new _0;#d;#p={state:We.IDLE,cardPositionY:Xo,cardPositionZ:Io,cardValidated:!1,pendingCardTypes:[],nextState:null,lights:{on:!1,frameLastRefresh:-1}};constructor({scene:e,onRetrieveCard:t,onRecycleCard:n,onReadCard:s}){this.#e=e,this.#n=t,this.#o=n,this.#a=s}async initialize(){const e=this.#e,{parts:t,initPosition:n,lightsMaterials:s}=await EX({scene:e});this.#t=n,this.#d=s,t.forEach(({meshes:r})=>r.forEach(({data:a})=>this.#e.addObject(a))),Object.assign(this.#p,{parts:t})}update(){MX({cardReader:this.#p});const{parts:e,state:t}=this.#p;t!==We.IDLE&&(t===We.RETRIEVING_CARD&&(this.#s.setFromAxisAngle(new x(0,1,0),Math.PI/2),this.#r=this.#n({type:this.#c,position:this.#i,rotation:this.#s})),t===We.PREPARING_IDLE&&(this.#r.body.collider(0).setEnabled(!0),this.#o(this.#r),this.#r=null),t===We.READING_CARD&&this.#a(this.#r),this.#d.forEach(n=>{this.#p.lights.on?(n.color.setHex(HX),n.emissiveIntensity=NX):(n.color.setHex(PX),n.emissiveIntensity=$8)}),this.#r&&(this.#i.copy(this.#t),this.#i.z+=this.#p.cardPositionZ,this.#i.y+=this.#p.cardPositionY,this.#r.body.setTranslation(this.#i),this.#r.body.setRotation(this.#s),this.#r.body.collider(0).setEnabled(!1))),this.#p.nextState&&(this.#p.state=this.#p.nextState)}readCard(e){this.#p.state===We.IDLE?(this.#c=e.type,this.#p.state=We.ACTIVATING):this.#p.pendingCardTypes.push(e.type)}save(){}load(e){}}function MX({cardReader:i}){switch(i.nextState=null,i.state){case We.IDLE:break;case We.ACTIVATING:i.nextState=We.RETRIEVING_CARD;break;case We.RETRIEVING_CARD:i.nextState=We.RAISING_CARD;break;case We.RAISING_CARD:i.cardPositionY+=f4,i.cardPositionY>=p4&&(i.cardPositionY=p4,i.nextState=We.PUSHING_CARD);break;case We.PUSHING_CARD:i.cardPositionZ+=h4,i.cardValidated&&i.cardPositionZ>=u4?(i.cardPositionZ=u4,i.nextState=We.RETRACTING_CARD):!i.cardValidated&&i.cardPositionZ>=c4&&(i.cardPositionZ=c4,i.nextState=We.RETRACTING_CARD),i.cardValidated&&(i.lights.frameLastRefresh++,i.lights.frameLastRefresh>m4&&(i.lights.frameLastRefresh=0,i.lights.on=!i.lights.on));break;case We.RETRACTING_CARD:i.cardPositionZ-=h4,i.cardValidated&&i.cardPositionZ<=Io?(i.cardPositionZ=Io,i.lights.on=!1,i.lights.frameLastRefresh=-1,i.nextState=We.READING_CARD):!i.cardValidated&&i.cardPositionZ<=d4&&(i.cardPositionZ=d4,i.cardValidated=!0,i.nextState=We.PUSHING_CARD),i.cardValidated?(i.lights.frameLastRefresh++,i.lights.frameLastRefresh>m4&&(i.lights.frameLastRefresh=0,i.lights.on=!i.lights.on)):i.lights.on=!0;break;case We.READING_CARD:i.nextState=We.LOWERING_CARD;break;case We.LOWERING_CARD:i.cardPositionY-=f4,i.cardPositionY<=Xo&&(i.cardPositionY=Xo,i.nextState=We.PREPARING_IDLE);break;case We.PREPARING_IDLE:i.cardValidated=!1,i.nextState=We.IDLE}}async function EX({scene:i}){const t=(await i.loadModel(xX)).scene,n=new Map,s=new x,r=[];return t.traverse(a=>{if(a.isMesh){OX(n,a.userData.name).meshes.push({data:a});const{material:l}=a;l.userData.light&&(l.emissive.setHex(RX),l.emissiveIntensity=$8,r[l.userData.index]=l)}else a.name==SX&&s.copy(a.position)}),{parts:n,initPosition:s,lightsMaterials:r}}function OX(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[]},i.set(e,t)),t}const zX="./assets/token-slot.glb",IX="insert-position",XX=0,oa={IDLE:Symbol.for("token-slot-idle"),ACTIVATING:Symbol.for("token-slot-activating")};class AX{#e;#t;#n;#o={state:oa.IDLE,cardPosition:XX,pendingTokens:[],nextState:null};constructor({scene:e,onTokenInserted:t}){this.#e=e,this.#n=t}async initialize(){const e=this.#e,{parts:t,insertPosition:n}=await FX({scene:e});this.#t=n,t.forEach(({meshes:s})=>s.forEach(({data:r})=>this.#e.addObject(r))),Object.assign(this.#o,{parts:t})}update(){CX({tokenSlot:this.#o});const{parts:e,state:t}=this.#o;this.#o.nextState&&(this.#o.state=this.#o.nextState)}insertToken(e){this.#o.state===oa.IDLE?this.#o.state=oa.ACTIVATING:this.#o.pendingTokens.push(e)}save(){}load(e){}}function CX({tokenSlot:i}){i.nextState=null,i.state}async function FX({scene:i}){const t=(await i.loadModel(zX)).scene,n=new Map,s=new x;return t.traverse(r=>{r.isMesh?VX(n,r.name).meshes.push({data:r}):r.name==IX&&s.copy(r.position)}),{parts:n,insertPosition:s}}function VX(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[]},i.set(e,t)),t}const DX=5e3,el=[{description:"Win 150 points",passed:(i,e)=>i.score-e.scoreStart>=150,message:(i,e)=>"Remaining points: "+(150-(i.score-e.scoreStart))},{description:"Win 200 points",passed:(i,e)=>i.score-e.scoreStart>=200,message:(i,e)=>"Remaining points: "+(200-(i.score-e.scoreStart))},{description:"Win 250 points",passed:(i,e)=>i.score-e.scoreStart>=250,message:(i,e)=>"Remaining points: "+(250-(i.score-e.scoreStart))}],mt={IDLE:Symbol.for("runs-idle"),STARTING_RUNS:Symbol.for("runs-starting-runs"),STARTING_RUN:Symbol.for("runs-starting-run"),RUNNING:Symbol.for("runs-running"),COMPLETED_RUN:Symbol.for("runs-completed-run")};class jX{#e;#t;#n={state:mt.IDLE,step:-1,timeRunCompleted:-1};constructor({state:e,screen:t}){this.#e=e,this.#t=t}initialize(){}load(e){this.#n.state=Symbol.for(e.state),this.#n.data=e.data,this.#n.step=e.step,this.#n.timeRunCompleted=e.timeRunCompleted}save(){return{state:this.#n.state.description,data:this.#n.data,step:this.#n.step,timeRunCompleted:this.#n.timeRunCompleted}}start(){this.#n.state===mt.IDLE&&(this.#n.state=mt.STARTING_RUNS)}update(e){const t=el[this.#n.step];WX({run:this.#n,state:this.#e,currentRun:t,time:e}),this.#n.state===mt.IDLE?this.#t.showDemoMode():(this.#n.data&&(this.#n.state===mt.STARTING_RUN||this.#n.state===mt.RUNNING)&&this.#t.showRunStart({description:t.description,content:t.message(this.#e,this.#n.data)}),this.#n.state===mt.COMPLETED_RUN&&this.#t.showRunComplete())}get started(){return this.#n.state!==mt.IDLE&&this.#n.state!==mt.STARTING_RUNS}}function WX({run:i,state:e,currentRun:t,time:n}){switch(i.state){case mt.STARTING_RUNS:i.step=0,e.coins=100,i.state=mt.STARTING_RUN;break;case mt.STARTING_RUN:i.data={scoreStart:e.score},i.state=mt.RUNNING;break;case mt.RUNNING:t.passed(e,i.data)&&(i.timeRunCompleted=n,i.state=mt.COMPLETED_RUN);break;case mt.COMPLETED_RUN:n-i.timeRunCompleted>DX&&(i.step++,i.timeRunCompleted=-1,i.step<el.length?i.state=mt.STARTING_RUN:i.state=mt.IDLE);break}}const UX=-1,qX="./assets/cabinet.glb",GX=.2,ZX=65537;class YX{DEBUG_AUTOPLAY=!1;DEBUG_HIDE_CABINET=!1;constructor({scene:e}){this.#e=e}#e;#t={state:{score:0,points:0,coins:0}};#n;#o={"left-trap":e=>{const t=this.#H(e);t&&Or(t)},"right-trap":e=>{const t=this.#H(e);t&&Or(t)},gutter:e=>{const t=this.#H(e);t&&(Or(t),this.#g.started&&(t.objectType===Xe.TYPE&&(this.#t.state.score++,this.#t.state.points++,this.#t.state.coins++),t.objectType===Bt.TYPE&&(this.#t.state.score+=5,this.#t.state.points+=5),t.objectType===Zt.TYPE&&this.#T.readCard(t)))}};#a=new Map;#r;#c;#i;#s;#d;#p;#l;#y;#w;#m;#h;#b;#v;#f;#S;#T;#P;#g;#R;async initialize(){const e=this.#e,{parts:t}=await kX({scene:e,DEBUG_HIDE_CABINET:this.DEBUG_HIDE_CABINET});this.#R=t;const{sensorColliders:n}=JX({scene:e,sensorListeners:this.#o,parts:t});this.#n=n;const s=new pL({scene:e});this.#r=new NL({onPressDropButton:r=>{this.#t.state.coins&&(Xe.dropCoin({slot:r}),this.#t.state.coins--)},onPressActionButton:()=>{this.#m.triggerCoin()},onPressStartButton:()=>{this.#r.disableStartButton(),this.#g.start()}}),this.#c=new CL({scene:e,depositBonus:({reward:r,position:a})=>{Xe.depositCoins({position:a,count:r.coinCount}),Bt.depositTokens({position:a,count:r.tokenCount}),Zt.depositCards({position:a,count:r.cardCount}),Fn.depositIngots({position:a,count:r.ingotCount})}}),this.#i=new KE({scene:e,cabinet:this,state:this.#t.state}),this.#d=new ME({scene:e}),this.#s=new dO({scene:e,onCoinFallen:r=>{Xe.enableCcd(r,!1)},onBonusWon:()=>{const r=Math.random();this.DEBUG_AUTOPLAY?this.#c.deliverBonus({coinCount:10,cardCount:Math.random()<.5?1:0,tokenCount:Math.random()<.5?1:0,ingotCount:Math.random()<.5?1:0}):r<.14?this.#p.spinReels():r<.28?this.#l.pick():r<.43?(this.#r.enableActionButton(),this.#m.shootCoin()):r<.57?(this.#y.shootCoins(),this.#w.shootCoins()):r<.71?(this.#b.deliver({levels:30}),this.#v.deliver({levels:30})):r<.86?this.#f.sweepFloor({level:5}):this.#h.deliver({stacks:7,levels:15})}}),this.#p=new HO({scene:e,onBonusWon:r=>{this.#c.deliverBonus({coinCount:Math.floor(5*Math.random())+10,cardCount:Math.random()<.5?1:0,tokenCount:Math.random()<.5?1:0,ingotCount:Math.random()<.25?1:0})}}),this.#l=new nz({scene:e,canActivate:r=>this.#x(r),onPick:r=>{const a=[];for(let o=0;o<30+Math.floor(Math.random()*10);o++){const l={x:(Math.random()-.5)*Math.PI/4,y:(Math.random()-.5)*Math.PI/4,z:(Math.random()-.5)*Math.PI/4},d={x:r.x+(Math.random()-.5)*.02,y:r.y,z:r.z+(Math.random()-.5)*.02};a.push(Xe.depositCoin({position:d,rotation:l}))}return Math.random()<.25&&a.push(Bt.depositToken({position:{x:r.x+(Math.random()-.5)*.02,y:r.y,z:r.z+(Math.random()-.5)*.02},rotation:{x:(Math.random()-.5)*Math.PI/4,y:(Math.random()-.5)*Math.PI/4,z:(Math.random()-.5)*Math.PI/4}})),a},onGetObject:r=>this.#H(r),onRecycleObject:r=>{const a=this.#H(r);a&&Or(a)}}),this.#y=new c6({scene:e,offsetX:-.25,oscillationDirection:1,canActivate:r=>this.#x(r),onShootCoin:({position:r,impulse:a})=>{Xe.depositCoin({position:r,impulse:a})}}),this.#w=new c6({scene:e,offsetX:.25,oscillationDirection:-1,canActivate:r=>this.#x(r),onShootCoin:({position:r,impulse:a})=>{Xe.depositCoin({position:r,impulse:a})}}),this.#m=new Wz({scene:e,onInitializeCoin:({position:r,rotation:a})=>Xe.depositCoin({position:r,rotation:a}),onGetCoin:r=>Xe.getCoin(r),onRecycleCoin:r=>{Xe.recycle(r),this.#r.disableActionButton()},onBonusWon:r=>{Xe.dropCoins({count:Math.pow(r+1,2)*5}),this.#r.disableActionButton()}}),this.#h=new fI({scene:e,canActivate:r=>this.#x(r),onInitializeCoin:({position:r,rotation:a,impulse:o})=>Xe.depositCoin({position:r,rotation:a,impulse:o})}),this.#b=new J6({scene:e,canActivate:r=>this.#x(r),onInitializeCoin:({position:r,rotation:a,impulse:o})=>Xe.depositCoin({position:r,rotation:a,impulse:o}),offsetX:-.4}),this.#v=new J6({scene:e,canActivate:r=>this.#x(r),onInitializeCoin:({position:r,rotation:a,impulse:o})=>Xe.depositCoin({position:r,rotation:a,impulse:o}),offsetX:.4}),this.#f=new oX({scene:e,canActivate:r=>this.#x(r)}),this.#S=new wX({scene:e}),this.#T=new LX({scene:e,onRetrieveCard:({type:r,position:a,rotation:o})=>Zt.depositCard({type:r,position:a,rotation:o}),onRecycleCard:r=>{Zt.recycle(r)},onReadCard:r=>{this.#g.started&&(this.#t.state.score+=50,this.#t.state.points+=50)}}),this.#P=new AX({scene:e,onTokenInserted:r=>{}}),this.#g=new jX({state:this.#t.state,screen:this.#S}),this.#a.set(this.#b,new Set([this.#f])),this.#a.set(this.#v,new Set([this.#f])),this.#a.set(this.#h,new Set([this.#f,this.#l])),this.#a.set(this.#f,null),this.#a.set(this.#l,new Set([this.#f,this.#h])),this.#a.set(this.#y,new Set([this.#f])),this.#a.set(this.#w,new Set([this.#f])),await Promise.all([Zt.initialize({scene:e}),Xe.initialize({scene:e,onSpawnedCoin:r=>{Xe.enableCcd(r,!0)}}),Bt.initialize({scene:e}),Tt.initialize({scene:e}),st.initialize({scene:e}),Fn.initialize({scene:e})]),await Promise.all([s.initialize(),this.#d.initialize(),this.#r.initialize(),this.#c.initialize(),this.#i.initialize(),this.#s.initialize(),this.#p.initialize(),this.#l.initialize(),this.#y.initialize(),this.#w.initialize(),this.#m.initialize(),this.#h.initialize(),this.#b.initialize(),this.#v.initialize(),this.#f.initialize(),this.#S.initialize(),this.#T.initialize(),this.#P.initialize(),this.#g.initialize()]),setTimeout(()=>{this.#T.readCard({type:1}),setTimeout(()=>{},105e3)},500)}update(e){Zt.update(),Xe.update(),Bt.update(),Tt.update(),st.update(),Fn.update(),this.#c.update(),this.#d.update(),this.#i.update(),this.#r.update(),this.#s.update(),this.#p.update(),this.#f.update(),this.#l.update(),this.#y.update(),this.#w.update(),this.#m.update(),this.#h.update(),this.#b.update(),this.#v.update(),this.#S.update(),this.#T.update(),this.#P.update(),this.#g.update(e),this.dynamicBodies.forEach(({object:t,objects:n})=>{t.position.y<UX&&(console.warn("object recycled",t,structuredClone(t.position),structuredClone(t.rotation)),n.recycle(t))}),this.DEBUG_AUTOPLAY&&this.#N()}resize(e,t){this.#S.resize(e,t)}get interactiveObjects(){return this.#r.interactiveObjects}get joints(){return this.#l.joints}get coinsInPlay(){return Xe.usedCoins}get dynamicBodies(){return[...Xe.dynamicBodies,...Bt.dynamicBodies,...Zt.dynamicBodies]}async save(){const e={};this.#n.forEach((n,s)=>e[s]=n.handle);const t={};return t.cards=Zt.save(),t.coins=Xe.save(),t.tokens=Bt.save(),t.buttons=Tt.save(),t.ingots=Fn.save(),Object.assign(t,{state:this.#t.state,sensorCollidersHandles:e,pusher:this.#c.save(),sensorGate:this.#s.save(),reelsBox:this.#p.save(),excavator:this.#l.save(),leftTower:this.#y.save(),rightTower:this.#w.save(),coinRoller:this.#m.save(),stacker:this.#h.save(),leftStacker:this.#b.save(),rightStacker:this.#v.save(),sweepers:this.#f.save(),cardReader:this.#T.save(),tokenSlot:this.#P.save(),runs:this.#g.save(),scene:await this.#e.save()}),t}async load(e){await this.#e.load(e.scene),Zt.load(e.cards),Xe.load(e.coins),Bt.load(e.tokens),Tt.load(e.buttons),Fn.load(e.ingots),this.#n=new Map,this.#R.forEach(t=>{t.meshes.forEach(({data:n})=>{n.traverse(s=>{if(s.isMesh){const r=s.material.userData,a=s.material.name;if(r.sensor){const o=e.sensorCollidersHandles[a],l=this.#e.worldColliders.get(o);l.userData={objectType:a,onIntersect:this.#o[a]},this.#n.set(a,l)}}})})}),this.#t.state.score=e.state.score,this.#t.state.points=e.state.points,this.#t.state.coins=e.state.coins,this.#c.load(e.pusher),this.#s.load(e.sensorGate),this.#p.load(e.reelsBox),this.#l.load(e.excavator),this.#y.load(e.leftTower),this.#w.load(e.rightTower),this.#m.load(e.coinRoller),this.#h.load(e.stacker),this.#b.load(e.leftStacker),this.#v.load(e.rightStacker),this.#f.load(e.sweepers),this.#T.load(e.cardReader),this.#P.load(e.tokenSlot),this.#g.load(e.runs)}#H(e){if(e.objectType===Xe.TYPE)return Xe.getCoin(e);if(e.objectType===Bt.TYPE)return Bt.getToken(e);if(e.objectType===Zt.TYPE)return Zt.getCard(e);if(e.objectType===Fn.TYPE)return Fn.getIngot(e)}#x(e){const t=this.#a.get(e);return t?!Array.from(t).filter(s=>s!==e).find(s=>s.active):!Array.from(this.#a.keys()).filter(s=>s!==e).find(s=>s.active)}#N(){this.#c.phase>2&&this.#c.phase<2.05&&this.#c.phase>this.lastPhase&&Xe.dropCoins({count:30}),this.lastPhase=this.#c.phase}}function Or(i){i.objectType===Xe.TYPE&&Xe.recycle(i),i.objectType===Bt.TYPE&&Bt.recycle(i),i.objectType===Zt.TYPE&&Zt.recycle(i),i.objectType===Fn.TYPE&&Fn.recycle(i)}async function kX({scene:i,DEBUG_HIDE_CABINET:e}){const n=(await i.loadModel(qX)).scene,s=new Map;return n.traverse(r=>{if(r.isMesh){const{material:a,geometry:o}=r,l=a.userData,d=l.name;if(l.collider||l.sensor){const c=o.index,u=o.attributes.position,p=[],h=[];for(let T=0;T<u.count;T++)p.push(u.getX(T),u.getY(T),u.getZ(T));for(let T=0;T<c.count;T++)h.push(c.getX(T));const b=y4(s,d);b.sensor=l.sensor,b.friction=l.friction,b.restitution=l.restitution,b.meshes.push({data:r,vertices:p,indices:h})}else{const c=r.userData.name;y4(s,c).meshes.push({data:r})}}}),e||i.addObject(n),{parts:s}}function JX({scene:i,parts:e,sensorListeners:t}){const n=new Map;return e.forEach((s,r)=>{const{meshes:a,sensor:o,friction:l,restitution:d}=s,c=i.createFixedBody(),u=[],p=[];let h=0;a.forEach(b=>{if(o){const T=i.createCuboidColliderFromBoundingBox({mesh:b.data,height:GX,userData:{objectType:r,onIntersect:t[r]},sensor:o},c);n.set(r,T)}else b.vertices&&(u.push(...b.vertices),p.push(...b.indices.map(T=>T+h)),h+=Math.max(...b.indices)+1)}),u.length>0&&i.createTrimeshCollider({vertices:u,indices:p,friction:l,restitution:d},c).setCollisionGroups(ZX)}),{sensorColliders:n}}function y4(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[]},i.set(e,t)),t}class KX{constructor({scene:e,camera:t,interactiveObjects:n}){this.#e=e,this.#t=t,this.#n=n}#e;#t;#n;#o;#a;#r=new ee;#c=new Hc;initialize(e,t){this.#o=e,this.#a=t,addEventListener("mousemove",n=>{this.#r.x=n.clientX/this.#o*2-1,this.#r.y=-(n.clientY/this.#a)*2+1,this.#c.setFromCamera(this.#r,this.#t);const s=this.#c.intersectObjects(this.#e.children);s.length&&this.#n.includes(s[0].object)?document.body.style.cursor="pointer":document.body.style.cursor="default"}),addEventListener("click",n=>{this.#c.setFromCamera(this.#r,this.#t);const s=this.#c.intersectObjects(this.#e.children);s.length&&this.#n.includes(s[0].object)&&(n.defaultPrevented||(s[0].object.userData.onClick(s[0].instanceId),n.preventDefault()))})}update(){}resize(e,t){this.#o=e,this.#a=t,this.#t.aspect=this.#o/this.#a,this.#t.updateProjectionMatrix(),this.#c.setFromCamera(this.#r,this.#t)}}const BX=[0,2,4.95],QX=20,_X=.01,$X=100,eA=[0,.5,0];class tA{constructor(e){const t=new It(QX,e,_X,$X);return t.position.set(...BX),t.lookAt(...eA),t}}const nA=345983.3333333699,iA=JSON.parse('{"cards":[[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.88e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.887e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.89e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.897e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.9e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.907e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.91e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.917e-321}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.92e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.927e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.93e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.937e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.94e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.947e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.95e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.956e-321}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.96e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.966e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.97e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.976e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.98e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.986e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.99e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.996e-321}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.006e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.01e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.016e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.02e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.026e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.03e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.035e-321}],[{"position":[0.20786631107330322,0.17205123603343964,0.6641845703125],"rotation":[0.003565618535503745,0.08757418394088745,-0.0018689167918637395,0.9961498975753784],"used":true,"bodyHandle":7.04e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.045e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.05e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.055e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.06e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.065e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.07e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.075e-321}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.08e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.085e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.09e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.095e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.1e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.105e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.11e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.115e-321}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.12e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.124e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.13e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.134e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.14e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.144e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.15e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.154e-321}]],"coins":[{"position":[0.15300250053405762,0.18273940682411194,0.23269528150558472],"rotation":[0.00019686116138473153,-0.9951320886611938,-0.003643099684268236,0.09848237782716751],"used":true,"bodyHandle":5.2e-322,"linearSpeed":6.542080521919931e-12,"angularVelocityHistory":[[0.00019112399604637176,-0.00008508361497661099],[-0.000014179167919792235,0.00001693584090389777],[-0.00008186716149793938,-0.00001571589928062167],[0.0001731850643409416,-0.00006078393562347628],[0.000006231440693227341,0.000035926430427934974],[-0.0000998497343971394,-0.00004148848165641539],[0.00011764728697016835,-0.0000876841731951572],[0.00009253112511942163,-0.00003253769682487473],[-0.00005883515041205101,0.000027048978154198267],[0.00021417575771920383,-0.00012821413110941648],[0.00011575785174500197,-0.00006956637662369758]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[0.11235947161912918,0.25253427028656006,-0.033368878066539764],"rotation":[0.801974892616272,0.0010065187234431505,-0.5973322987556458,-0.005413033999502659],"used":true,"bodyHandle":5.24e-322,"linearSpeed":0.08274902412276063,"angularVelocityHistory":[[-0.010024309158325195,-0.0009553887066431344],[-0.005285115912556648,0.0003903719480149448],[0.011158824898302555,0.03378458321094513],[-0.011985291726887226,-0.0051923636347055435],[-0.003254752606153488,-0.006786783691495657],[0.0029727129731327295,-0.0013038556789979339],[-0.0003917510621249676,-0.0020866207778453827],[0.0019973621238023043,-0.0032493616454303265],[0.0004860522458329797,-0.0022036894224584103],[-0.00027158556622453034,-0.0020088152959942818],[0.0012527863727882504,-0.000799379195086658]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.00014640996232628822,0.17044726014137268,0.5987303256988525],"rotation":[0.0010013412684202194,-0.9129899740219116,-0.0036333517637103796,0.40796443819999695],"used":true,"bodyHandle":5.3e-322,"linearSpeed":0,"angularVelocityHistory":[[0.012857466004788876,-0.020668450742959976],[0.010089016519486904,-0.009086791425943375],[-0.04413433372974396,0.020864734426140785],[-0.015461097471415997,-0.002318905433639884],[0.05686044320464134,-0.00002792947634588927],[0.01766061969101429,-0.007821250706911087],[0.024326134473085403,0.03387026861310005],[0.06483504921197891,0.032690975815057755],[0.07749246805906296,-0.04372643679380417],[-0.14374332129955292,-0.20216622948646545]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06050878390669823,0.17055338621139526,0.6339245438575745],"rotation":[-0.0022868330124765635,-0.13862328231334686,-0.0016118251951411366,0.9903411865234375],"used":true,"bodyHandle":5.34e-322,"linearSpeed":0,"angularVelocityHistory":[[0.023351319134235382,-0.0008024334092624485],[0.007055435795336962,-0.009804106317460537],[0.025382453575730324,-0.00859031081199646],[0.00505025452002883,-0.01721912808716297],[0.0034869504161179066,-0.03308137506246567],[0.035917017608881,0.003801254555583],[-0.012946387752890587,-0.0057157003320753574],[-0.010372339747846127,-0.01199183240532875],[0.016583526507019997,0.006232807412743568],[-0.019556336104869843,0.05829093977808952]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5558133125305176,0.17419233918190002,0.5310178995132446],"rotation":[-0.2973793148994446,-0.002883466426283121,0.9547550678253174,-0.00011658540461212397],"used":true,"bodyHandle":5.4e-322,"linearSpeed":1.2042964789708139e-8,"angularVelocityHistory":[[-0.00041540537495166063,0.005132585298269987],[-0.0014323940267786384,-0.0023406606633216143],[-0.001675904612056911,-0.010710296221077442],[0.00111072463914752,0.0069542089477181435],[-0.003129176562651992,0.0003116995212621987],[-0.001526980777271092,0.00008455535862594843],[-0.0029168848413974047,0.008661936968564987],[-0.01245107501745224,-0.0119335250928998],[-0.00547415018081665,-0.0013192803598940372],[-0.001020253635942936,-0.002302403561770916],[0.00018521296442486346,-0.000496012857183814]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.08835411071777344,0.2532401382923126,-0.23573169112205505],"rotation":[0.0002926597371697426,0.7766962647438049,-0.001478690654039383,-0.629873514175415],"used":true,"bodyHandle":5.43e-322,"linearSpeed":0.08336172807643849,"angularVelocityHistory":[[-0.01677583158016205,-0.005692656151950359],[-0.015103389509022236,-0.005085254553705454],[-0.012827862054109573,-0.012513582594692707],[-0.007839672267436981,-0.004038527607917786],[-0.007363777607679367,-0.006366360932588577],[-0.005635145585983992,-0.002450400497764349],[0.05967460945248604,-0.04758927598595619],[0.05724134296178818,0.03968719393014908],[-0.2235134392976761,-0.12520873546600342],[0.03368931636214256,0.02292540855705738],[0.033644553273916245,0.021882854402065277]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.061264604330062866,0.16997845470905304,0.7045958638191223],"rotation":[0.004214329179376364,-0.6291971802711487,-0.00007467452087439597,0.7772342562675476],"used":true,"bodyHandle":5.5e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.008280714973807335,0.0006423445884138346],[0.0001308694336330518,0.02205171249806881],[-0.011797436513006687,0.006993973162025213],[0.0029661767184734344,-0.04323592036962509],[0.0006986139924265444,-0.0030353551264852285],[-0.058509089052677155,0.0975731834769249],[0.10156992077827454,-0.033469054847955704],[0.11059705168008804,0.03010566718876362],[-0.03430236876010895,0.06309335678815842],[0.04081912711262703,0.004231852944940329]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.00000794396510173101,0.17213405668735504,0.7402570843696594],"rotation":[-0.002036245074123144,-0.9177560806274414,0.0011505482252687216,0.3971376121044159],"used":true,"bodyHandle":5.53e-322,"linearSpeed":0,"angularVelocityHistory":[[0.021936578676104546,-0.016845084726810455],[0.03017822653055191,-0.016830770298838615],[0.007737219799309969,-0.009478970430791378],[0.0143892178311944,0.011999898590147495],[-0.02383037656545639,0.0022512481082230806],[-0.07273150235414505,0.0323123075067997],[0.0058915517292916775,0.011528868228197098],[-0.009177468717098236,-0.010303625836968422],[-0.010463028214871883,0.012618263252079487],[-0.028140438720583916,0.012333991006016731]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.060546405613422394,0.17026418447494507,0.7059081792831421],"rotation":[-0.0014616857515648007,-0.9940256476402283,-0.0005620796582661569,-0.10913572460412979],"used":true,"bodyHandle":5.6e-322,"linearSpeed":0,"angularVelocityHistory":[[0.009676999412477016,0.014705177396535873],[0.006709469016641378,0.005498463287949562],[0.016430135816335678,0.027204254642128944],[0.04641559347510338,-0.01263793371617794],[0.0030698541086167097,0.005840477999299765],[-0.025159062817692757,0.007848603650927544],[0.022913286462426186,-0.0000382653706765268],[0.01357140950858593,-0.002284666756168008],[0.0007048193947412074,0.02763298898935318],[0.005933316890150309,0.019627904519438744]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.1267283856868744,0.17672468721866608,0.20993857085704803],"rotation":[0.0008353501325473189,0.9004428386688232,0.002716781571507454,-0.43496495485305786],"used":true,"bodyHandle":5.63e-322,"linearSpeed":2.8549523266715157e-11,"angularVelocityHistory":[[0.00008263980271294713,-0.0006866341573186219],[-0.00011733188875950873,0.000033179876481881365],[0.00009742179827298969,-0.00021660917263943702],[-0.000059652953495969996,-0.00006734803173458204],[-0.000017718713934300467,-0.0001326345227425918],[0.00012142676132498309,-0.000027686322937370278],[-0.000035131342883687466,0.00001054406584444223],[0.00014753773575648665,-0.00009967001096811146],[-0.000028546528483275324,0.000014785630810365546],[-0.0000072306988840864506,0.00010592773469397798],[0.000026433190214447677,-0.00008717202581465244]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[-0.06156087666749954,0.17072582244873047,0.6353318691253662],"rotation":[-0.003190592397004366,-0.8675239682197571,0.005436530336737633,-0.49735531210899353],"used":true,"bodyHandle":5.7e-322,"linearSpeed":0,"angularVelocityHistory":[[0.012278219684958458,-0.04909445345401764],[0.03670809417963028,-0.08559460937976837],[0.027854595333337784,-0.004805389326065779],[-0.031531140208244324,0.005293484777212143],[0.03109603002667427,-0.034010592848062515],[-0.03333914652466774,0.0125046968460083],[-0.02087702602148056,-0.014851708896458149],[-0.036857716739177704,-0.009282678365707397],[0.012893342413008213,0.024515744298696518],[-0.002032693475484848,0.02175496704876423]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0014761880738660693,0.16969245672225952,0.6676235198974609],"rotation":[0.000023002874513622373,-0.2261076122522354,0.00045043675345368683,-0.9741021990776062],"used":true,"bodyHandle":5.73e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.011950074695050716,0.020632917061448097],[0.0005001941462978721,0.019065992906689644],[-0.013722924515604973,0.026303937658667564],[-0.003713478334248066,0.013689653016626835],[-0.0036322528030723333,0.005886212456971407],[-0.0016556901391595602,0.015692800283432007],[-0.01728091761469841,0.02323475480079651],[-0.0048180329613387585,0.018529517576098442],[-0.02434096671640873,0.009043791331350803],[0.06551633775234222,0.013729728758335114]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.27014800906181335,0.25320932269096375,-0.23467391729354858],"rotation":[0.0038935127668082714,-0.8816644549369812,0.0006076290155760944,0.47186043858528137],"used":true,"bodyHandle":5.8e-322,"linearSpeed":0.08349605326315873,"angularVelocityHistory":[[0.027357101440429688,0.002102469326928258],[0.0008116314420476556,-0.0006209580460563302],[0.00024455777020193636,-0.0006191387656144798],[-0.0029367043171077967,-0.0005034265341237187],[-0.00035316034336574376,-0.0004208320751786232],[0.00013123854296281934,-0.00019673927454277873],[-0.00010171884059673175,-0.0002683844941202551],[0.0006298355292528868,0.00023400264035444707],[-0.0011918990639969707,-0.0002905314031522721],[0.0011514804791659117,0.0003148278046865016],[0.0006792460335418582,-0.00020185401081107557]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.00011402368545532227,0.17222000658512115,0.5998145937919617],"rotation":[0.0003838994016405195,0.8967226147651672,0.0036010027397423983,-0.44257816672325134],"used":true,"bodyHandle":5.83e-322,"linearSpeed":0,"angularVelocityHistory":[[0.027994822710752487,-0.04152392968535423],[-0.004844263661652803,0.003357173642143607],[-0.04824964702129364,0.018761046230793],[0.00522618368268013,0.013329160399734974],[0.005532578099519014,0.00805811956524849],[0.019540181383490562,0.003875805763527751],[0.05327882245182991,0.04298827797174454],[0.06486594676971436,0.005727559328079224],[0.048470042645931244,-0.05745379626750946],[-0.028596552088856697,-0.038544707000255585]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.18018420040607452,0.24768128991127014,-0.1856488138437271],"rotation":[0.000800376117695123,-0.6237665414810181,-0.0002938970865216106,0.7816101908683777],"used":true,"bodyHandle":5.9e-322,"linearSpeed":0.082834070260773,"angularVelocityHistory":[[-0.012325949035584927,0.019251370802521706],[0.000243598798988387,-0.0035097093787044287],[-0.00031921593472361565,-0.0044697923585772514],[0.004488031379878521,0.00036399828968569636],[-0.0009279142250306904,-0.00003168912007822655],[-0.00019643487758003175,-0.0035956159699708223],[-0.0032865952234715223,0.03291419893503189],[0.03890922665596008,-0.02634902484714985],[0.03624216839671135,-0.002801526105031371],[0.00022718713444191962,-0.00655742222443223],[0.00032909782021306455,-0.00012444103776942939]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5864187479019165,0.17976360023021698,0.5171122550964355],"rotation":[-0.9109386801719666,0.008843219839036465,-0.4124389588832855,0.002556734485551715],"used":true,"bodyHandle":5.93e-322,"linearSpeed":1.0995766267706589e-9,"angularVelocityHistory":[[-0.0008544107549823821,-0.0006859946879558265],[0.0014343250077217817,-0.00004934103708365001],[-0.0006156045710667968,0.00021387659944593906],[0.000710168678779155,-0.0031001116149127483],[-0.0018138574669137597,0.003002085955813527],[-0.0008660066523589194,0.0006935708224773407],[-0.0007518627098761499,-0.0023026783019304276],[-0.002644637133926153,-0.00005294760558172129],[-0.00018098998407367617,0.003928598947823048],[-0.00013538819621317089,0.0007556616910733283],[0.0004676497192122042,0.0004960366059094667]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6e-322,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5032966732978821,0.17440879344940186,0.7823164463043213],"rotation":[0.002826804993674159,0.5308150053024292,0.0025753912050276995,0.8474791646003723],"used":true,"bodyHandle":6.03e-322,"linearSpeed":2.103156115057226e-9,"angularVelocityHistory":[[9.616748002372333e-7,-0.00011997621913906187],[0.0002293666184414178,-0.0020278478041291237],[-0.0002353651070734486,-0.0007662452408112586],[0.00012827890168409795,-0.002028107177466154],[0.0002428232110105455,-0.0013339484576135874],[-0.0002698117168620229,0.0024462866131216288],[-0.000777632521931082,0.0016383285401389003],[0.0009953625267371535,-0.002726782113313675],[-0.0001201393679366447,0.0005517743993550539],[-0.0003984447102993727,-0.000734242144972086],[-0.00040220870869234204,-0.0003477575955912471]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.06079404056072235,0.1720108538866043,0.635860800743103],"rotation":[0.003837601048871875,-0.8839485049247742,0.004692597780376673,-0.4675447642803192],"used":true,"bodyHandle":6.1e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.0076801045797765255,0.002315061865374446],[-0.014183943159878254,-0.040739379823207855],[0.0018072270322591066,0.0332365408539772],[-0.0037603022065013647,-0.022819748148322105],[0.023645170032978058,-0.05240986868739128],[-0.0448421835899353,0.034021805971860886],[-0.023407278582453728,-0.006474059075117111],[0.024537289515137672,0.006748168263584375],[0.019270846620202065,0.022632306441664696],[-0.023904435336589813,0.02201816998422146]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.1512800008058548,0.25250235199928284,-0.23419314622879028],"rotation":[0.8990733623504639,0.004759188741445541,-0.4377482533454895,0.004569509532302618],"used":true,"bodyHandle":6.13e-322,"linearSpeed":0.08283141060791516,"angularVelocityHistory":[[-0.06673876941204071,0.035984814167022705],[-0.0283680260181427,0.023981643840670586],[-0.0399390272796154,0.032351303845644],[-0.025635085999965668,0.03144806623458862],[-0.01663918048143387,0.02969612181186676],[-0.010297974571585655,0.030398782342672348],[-0.052561309188604355,0.00365274166688323],[-0.07107777148485184,-0.042450305074453354],[-0.015007639303803444,0.001944890827871859],[-0.005644346121698618,0.012816770933568478],[-0.01354237925261259,-0.02020171843469143]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.27014708518981934,0.2532722055912018,0.010400350205600262],"rotation":[0.814546525478363,0.0003953326086048037,-0.580091655254364,-0.002734358189627528],"used":true,"bodyHandle":6.2e-322,"linearSpeed":0.083342830321858,"angularVelocityHistory":[[0.0007444768561981618,-0.00018873187946155667],[0.0017495197243988514,0.00007180785178206861],[0.003252257825806737,0.00027889461489394307],[-0.002667725784704089,-0.000789351761341095],[-0.0004518575151450932,-0.00013431141269393265],[-0.0026580230332911015,-0.0007024387014098465],[-0.00038470220169983804,-0.000091653382696677],[0.0007120343507267535,0.0002822590759024024],[-0.05390893667936325,-0.0008211192907765508],[-0.0039046606980264187,-0.002107257256284356],[0.011101791635155678,0.00020308082457631826]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06080731749534607,0.1716119647026062,0.7041504383087158],"rotation":[-0.00048533439985476434,-0.7763152718544006,-0.004051660653203726,-0.6303315758705139],"used":true,"bodyHandle":6.23e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.01107089314609766,-0.012887588702142239],[0.006623536814004183,0.020176855847239494],[0.005059083923697472,0.022329356521368027],[0.049280475825071335,-0.004722918383777142],[0.04798247292637825,-0.003838301170617342],[-0.026405077427625656,-0.0008978104451671243],[0.01135996449738741,-0.005436593666672707],[0.01755327545106411,-0.010559359565377235],[0.021513227373361588,0.0315975546836853],[-0.018486734479665756,0.029052438214421272]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.2428324967622757,0.2532402276992798,-0.1819913685321808],"rotation":[-0.002024810528382659,0.7417116165161133,-0.0005753246368840337,0.6707155108451843],"used":true,"bodyHandle":6.27e-322,"linearSpeed":0.08337312944450537,"angularVelocityHistory":[[-0.002085916930809617,-0.015736939385533333],[-0.030487535521388054,-0.06012715771794319],[-0.013707105070352554,0.005144910421222448],[-0.005992763210088015,0.004198143724352121],[-0.009825095534324646,0.0008954827790148556],[-0.013548320159316063,0.003355184104293585],[-0.005277611315250397,-0.0003504161722958088],[-0.005064247641712427,0.00031290974584408104],[-0.0218517929315567,0.01846429519355297],[-0.0009173115831799805,0.0026386675890535116],[-0.0015321337850764394,0.002653970615938306]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.000801087764557451,0.17059330642223358,0.7403275370597839],"rotation":[-0.001197710633277893,-0.864705502986908,-0.0020668127108365297,0.502273440361023],"used":true,"bodyHandle":6.3e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.00739603815600276,0.007880842313170433],[-0.004381141159683466,0.006500758230686188],[0.0036911533679813147,-0.0006707109860144556],[0.0010593339102342725,-0.004145401529967785],[0.0038111605681478977,-0.009439489804208279],[-0.0013302956940606236,-0.01444986555725336],[0.003089474979788065,-0.0099518783390522],[-0.01523785013705492,-0.016619587317109108],[-0.01981780305504799,-0.0024311859160661697],[-0.014583196491003036,0.009728625416755676]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06029113009572029,0.17188133299350739,0.7056687474250793],"rotation":[0.002284417627379298,-0.8600990772247314,-0.0006649828283116221,0.5101214647293091],"used":true,"bodyHandle":6.37e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.01592128351330757,-0.003043190110474825],[0.005093264859169722,0.04994761571288109],[-0.018719356507062912,-0.00003740906686289236],[-0.014754221774637699,-0.07277771830558777],[-0.022395743057131767,-0.010550965555012226],[-0.10623709857463837,0.06806161999702454],[-0.06778644770383835,-0.03960997983813286],[-0.09854406863451004,0.3245169222354889],[-0.01712615415453911,0.029898758977651596],[0.0347684882581234,0.002937529468908906]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.2700057029724121,0.2508974075317383,-0.10537245869636536],"rotation":[-0.016022542491555214,0.9863119721412659,-0.05134052783250809,0.15587183833122253],"used":true,"bodyHandle":6.4e-322,"linearSpeed":0.0829158778689183,"angularVelocityHistory":[[-0.00646264897659421,0.3337750732898712],[-0.013887682929635048,0.8877601623535156],[-0.015356741845607758,1.3106013536453247],[-0.11260514706373215,-1.4300833940505981],[-0.24263423681259155,-1.0434521436691284],[0.03962269052863121,1.5815163850784302],[0.04371945187449455,1.4777623414993286],[2.5640761852264404,-2.023927927017212],[-0.1849198341369629,-0.26767176389694214],[-0.1741262674331665,-0.13405637443065643],[-0.17735981941223145,0.7605749368667603]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.47e-322,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5906848907470703,0.18542470037937164,0.5152879357337952],"rotation":[-0.7010216116905212,0.0019948550034314394,0.7130725979804993,0.009599613957107067],"used":true,"bodyHandle":6.5e-322,"linearSpeed":7.726206992101827e-9,"angularVelocityHistory":[[-0.0013893833383917809,-0.001781971426680684],[0.0011223475448787212,-0.0017633175011724234],[0.0013008236419409513,0.0039457702077925205],[0.0005764577072113752,-0.0025009941309690475],[-0.003495674580335617,-0.0013005970977246761],[-0.0010697952238842845,-0.0009408726473338902],[-0.000503813149407506,-0.002771106082946062],[-0.0006136092124506831,0.0013145761331543326],[-0.000023214441171148792,0.001512036775238812],[0.00018047189223580062,0.0001216731034219265],[-0.0008037445368245244,-0.0012117066653445363]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.061018820852041245,0.17175057530403137,0.6352832913398743],"rotation":[0.0016769177746027708,-0.18418735265731812,0.002184745157137513,0.9828872680664062],"used":true,"bodyHandle":6.57e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.0010829293169081211,-0.01936022937297821],[-0.0016513358568772674,0.018135877326130867],[0.00624639680609107,-0.014207407832145691],[-0.044507257640361786,-0.05806567519903183],[-0.105608269572258,-0.11387632042169571],[-0.023496372625231743,-0.00540841044858098],[0.0386044941842556,0.014198911376297474],[0.011661315336823463,0.03604451194405556],[0.019232874736189842,-0.01267282385379076],[-0.02606157585978508,0.09031173586845398]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5157788395881653,0.1797216385602951,0.8251599669456482],"rotation":[0.0022127048578113317,-0.46957671642303467,-0.0093276621773839,0.882839560508728],"used":true,"bodyHandle":6.6e-322,"linearSpeed":8.329046452775967e-11,"angularVelocityHistory":[[-0.00014578878472093493,0.00318474555388093],[-0.005487103946506977,-0.0030955278780311346],[-0.0008709546527825296,-0.0013484805822372437],[-0.0006224876851774752,-0.0005865509738214314],[0.0006923642358742654,-0.0007573614711873233],[-0.00110270781442523,0.001809956505894661],[-0.00443636067211628,-0.0019310421776026487],[0.028689216822385788,0.012487323023378849],[0.02103615179657936,0.009027429856359959],[0.0002888541202992201,0.0023423631209880114],[0.007032864261418581,0.009412432089447975]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[0.509608268737793,0.1741664707660675,0.8083117604255676],"rotation":[0.3924555480480194,-0.002415918279439211,-0.9197531342506409,-0.005185662768781185],"used":true,"bodyHandle":6.67e-322,"linearSpeed":8.904881540524346e-11,"angularVelocityHistory":[[0.002672023605555296,0.0021042008884251118],[0.00102833507116884,0.00037049411912448704],[0.0007756914710626006,0.0007081102812662721],[-0.00022138433996587992,0.0009184404043480754],[0.0012795878574252129,-0.00026256716228090227],[-0.00019703380530700088,0.0008122636354528368],[0.0025508906692266464,-0.0014361025532707572],[-0.0021590557880699635,-0.0014161611907184124],[-0.0014059687964618206,-0.002053668489679694],[-0.004314542282372713,-0.0009449778590351343],[-0.0016934466548264027,0.0004151413158979267]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.7e-322,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.002464229939505458,0.17143046855926514,0.6718289852142334],"rotation":[0.001831623027101159,-0.7218759059906006,0.005503972992300987,0.6919981241226196],"used":true,"bodyHandle":6.77e-322,"linearSpeed":0,"angularVelocityHistory":[[0.01267818734049797,0.0400661937892437],[0.027745412662625313,0.021200332790613174],[-0.0030037073884159327,0.03996226191520691],[-0.01227779034525156,-0.00116103480104357],[-0.01746750995516777,0.004938506055623293],[-0.01094721257686615,0.00836575124412775],[-0.007110166363418102,-0.006965900305658579],[0.005078581161797047,0.0726998969912529],[0.06156594678759575,0.07957924157381058],[0.08182880282402039,0.0019466789672151208]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0005104934680275619,0.17299290001392365,0.6027997732162476],"rotation":[-0.015156121924519539,-0.9246793985366821,0.002161891432479024,0.3804386556148529],"used":true,"bodyHandle":6.8e-322,"linearSpeed":0,"angularVelocityHistory":[[0.04010624811053276,-0.03744575008749962],[-0.01870342157781124,0.000218783417949453],[-0.021564144641160965,0.005978747736662626],[-0.007643182296305895,0.005187327042222023],[0.009666510857641697,-0.022196467965841293],[0.007253320422023535,-0.00393971661105752],[0.040256306529045105,0.035364408046007156],[-0.1526864618062973,-0.23138025403022766],[-0.009349641390144825,-0.03607446327805519],[-0.06311453133821487,-0.031847380101680756]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.058041855692863464,0.17367705702781677,0.6366523504257202],"rotation":[0.009973148815333843,0.11606734246015549,0.01625317707657814,0.9930582642555237],"used":true,"bodyHandle":6.87e-322,"linearSpeed":0,"angularVelocityHistory":[[0.017504021525382996,-0.05232337862253189],[0.033451247960329056,-0.01725797727704048],[-0.04611188918352127,-0.023922700434923172],[-0.09611041843891144,-0.1429097056388855],[-0.038624078035354614,-0.07272997498512268],[-0.00024371317704208195,0.032771531492471695],[0.05799611657857895,0.011145765893161297],[0.038512129336595535,0.04315439611673355],[-0.0061587924137711525,0.009032237343490124],[-0.0096873315051198,0.12730461359024048]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.058207444846630096,0.17343825101852417,0.704171895980835],"rotation":[0.00041986966971307993,-0.7920894026756287,0.00024260104692075402,0.6104047894477844],"used":true,"bodyHandle":6.9e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.03851045295596123,-0.02092512510716915],[-0.016202988103032112,0.04682103544473648],[-0.022050891071558,0.032876867800951004],[-0.0011053745402023196,-0.0909246951341629],[-0.07348150759935379,0.015795527026057243],[0.02498854696750641,0.2945021092891693],[-0.1049625426530838,0.020837971940636635],[0.011492973193526268,0.004559562541544437],[-0.04761836305260658,0.0550469234585762],[0.04846698045730591,0.009503456763923168]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.26972153782844543,0.24755136668682098,-0.17414602637290955],"rotation":[0.002109173685312271,-0.7610699534416199,0.0012231675209477544,0.648665189743042],"used":true,"bodyHandle":6.97e-322,"linearSpeed":0.08284447688399839,"angularVelocityHistory":[[0.026207268238067627,-0.00038776840665377676],[-0.05677181854844093,-0.009881515055894852],[-0.019138995558023453,-0.023516807705163956],[-0.011699606664478779,0.00021325351553969085],[-0.00011780833301600069,0.002418952062726021],[-0.0006511462852358818,-0.00010496120376046747],[-0.0008083286229521036,0.0018425871385261416],[0.0013707373291254044,0.005313006229698658],[-0.002326049143448472,-0.003531479276716709],[-0.0029218033887445927,-0.0012466325424611568],[-0.0006193750305101275,-0.0006281466339714825]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0595150962471962,0.2473282366991043,-0.12424145638942719],"rotation":[-0.003924568183720112,-0.6432765126228333,-0.001225436688400805,-0.7656229138374329],"used":true,"bodyHandle":7e-322,"linearSpeed":0.08286146178895118,"angularVelocityHistory":[[0.009879582561552525,-0.017070764675736427],[0.005779668688774109,-0.00042808768921531737],[0.01512505766004324,-0.004305789712816477],[0.004679043311625719,-0.0065267919562757015],[-0.0021960255689918995,-0.003851550631225109],[0.0021549290977418423,0.0029432254377752542],[0.005002974532544613,0.0005751778953708708],[-0.0025093082804232836,-0.004471641965210438],[-0.005639117676764727,-0.007802682463079691],[0.0026252646930515766,0.017429543659090996],[0.00351364491507411,0.004675171338021755]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.1534527838230133,0.25825467705726624,-0.2342206835746765],"rotation":[0.8910549283027649,0.004504914861172438,-0.4538551867008209,0.004037870094180107],"used":true,"bodyHandle":7.07e-322,"linearSpeed":0.0827064191376047,"angularVelocityHistory":[[-0.06771007180213928,0.020558468997478485],[-0.04313134402036667,0.06471278518438339],[-0.03361707925796509,0.03155907243490219],[-0.026628976687788963,0.027811365202069283],[-0.007455748505890369,0.0359337218105793],[-0.006736190058290958,0.029662447050213814],[-0.026469850912690163,0.013472577556967735],[0.08999262750148773,0.08272477239370346],[-0.013685831800103188,0.0035767657682299614],[-0.00379282608628273,0.013077701441943645],[-0.011558445170521736,-0.0115617411211133]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.12257077544927597,0.24741774797439575,-0.1800975352525711],"rotation":[0.003154781414195895,-0.2116769254207611,0.0010923545341938734,0.9773340225219727],"used":true,"bodyHandle":7.1e-322,"linearSpeed":0.0828420342874477,"angularVelocityHistory":[[0.018095234408974648,-0.006669602356851101],[-0.13303272426128387,-0.0353240892291069],[0.004724233876913786,0.0034154304303228855],[0.0018447786569595337,-0.004366800654679537],[0.000696848495863378,0.0008029810851439834],[-0.0004923034575767815,-0.0006074581760913134],[0.00022151050507090986,-0.00017387034313287586],[0.00028070347616449,0.00027361465618014336],[0.0004242589930072427,0.003044300014153123],[-0.0006206461112014949,0.00000284169345832197],[0.0018473704112693667,-0.018670951947569847]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.02797362208366394,0.24749399721622467,-0.23678244650363922],"rotation":[-0.002269919728860259,-0.04156491905450821,0.0018681687070056796,-0.999131441116333],"used":true,"bodyHandle":7.16e-322,"linearSpeed":0.08282872146672648,"angularVelocityHistory":[[0.025006236508488655,-0.002502790652215481],[0.00004953117240802385,-0.0033440799452364445],[0.012654130347073078,0.007854786701500416],[0.002342854393646121,-0.006007098592817783],[0.0008513849461451173,0.0024132465478032827],[0.001099343178793788,0.0004627196758519858],[0.0009742141701281071,-0.0012508524814620614],[0.007784388493746519,-0.0016447448870167136],[-0.00009989047975977883,-0.007945253513753414],[-0.004233326762914658,-0.00006323779234662652],[0.02794044092297554,-0.007672341074794531]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0005018687224946916,0.17305323481559753,0.7379522323608398],"rotation":[0.0018317463109269738,-0.9989812970161438,-0.005548212211579084,-0.04474570229649544],"used":true,"bodyHandle":7.2e-322,"linearSpeed":0,"angularVelocityHistory":[[0.020146267488598824,0.008717353455722332],[0.01229942124336958,0.04121341556310654],[0.016237566247582436,0.003922529984265566],[-0.020940933376550674,-0.0038677144329994917],[-0.009937159717082977,0.0238882414996624],[-0.002323536667972803,0.005085149314254522],[0.015845946967601776,0.0036504019517451525],[-0.018329745158553123,-0.030549807474017143],[-0.02191190794110298,0.01488608680665493],[-0.08627007901668549,0.0038011528085917234]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.061424192041158676,0.1732821762561798,0.7044299244880676],"rotation":[-0.0023803208023309708,-0.6033132672309875,-0.002576124155893922,-0.7974965572357178],"used":true,"bodyHandle":7.26e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.09962872415781021,-0.008578358218073845],[-0.03575945645570755,0.025989972054958344],[0.03594505041837692,0.04436627775430679],[0.08926727622747421,-0.002560337772592902],[0.06740786135196686,-0.02316995896399021],[-0.08038266748189926,-0.011982258409261703],[0.010460805147886276,0.013302549719810486],[0.03325340151786804,-0.00407620333135128],[0.015177995897829533,0.03727227821946144],[0.009080243296921253,0.012797248549759388]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5705337524414062,0.1745118349790573,0.7910887598991394],"rotation":[-0.00022968347184360027,-0.5776492357254028,0.0075737773440778255,0.8162498474121094],"used":true,"bodyHandle":7.3e-322,"linearSpeed":7.068839849162297e-11,"angularVelocityHistory":[[0.005398658569902182,-0.003242935985326767],[-0.00047492835437878966,-0.00023482191318180412],[0.0007893959991633892,-0.000841762637719512],[-0.0004368259687907994,0.0004479211929719895],[0.0019363375613465905,-0.0017518845852464437],[0.0007746556075289845,-0.0012007510522380471],[0.0001413850113749504,-0.00044168185559101403],[0.002507799305021763,-0.0019522188231348991],[0.003360361559316516,-0.003182713408023119],[-0.0018391207559034228,-0.0003676771593745798],[0.0018597528105601668,-0.00024637149181216955]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[-0.058179229497909546,0.17475539445877075,0.6367318034172058],"rotation":[0.0012357591185718775,-0.7445648908615112,-0.0022797156125307083,-0.6675450205802917],"used":true,"bodyHandle":7.36e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.14829972386360168,0.15858550369739532],[0.2149307131767273,0.03216997906565666],[0.05794142186641693,-0.004896404687315226],[0.04554899409413338,-0.05122794583439827],[-0.008876623585820198,0.004755998030304909],[-0.09683480113744736,0.03774203732609749],[-0.025519371032714844,0.11394264549016953],[-0.038738615810871124,-0.19766691327095032],[-0.0048164441250264645,0.05403474345803261],[-0.0347420908510685,-0.0018520313315093517]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0926150530576706,0.25661948323249817,-0.11773104220628738],"rotation":[0.37407997250556946,0.001510897185653448,-0.9257816076278687,-0.0546841062605381],"used":true,"bodyHandle":7.4e-322,"linearSpeed":0.08276417794330339,"angularVelocityHistory":[[-0.03950022533535957,-0.022297387942671776],[0.11595740169286728,0.03216777741909027],[0.13998287916183472,0.017939221113920212],[-0.12118840962648392,-0.045305196195840836],[-0.24935969710350037,-0.05842217430472374],[0.049613337963819504,0.01710081659257412],[0.29523706436157227,0.021581880748271942],[-1.2619705200195312,-0.1283627152442932],[0.29264500737190247,-0.017742903903126717],[-1.0392650365829468,-0.1218627542257309],[0.39066141843795776,-0.036375485360622406]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0027193701826035976,0.17399482429027557,0.6700335144996643],"rotation":[0.002737338189035654,-0.13138170540332794,-0.004202360287308693,-0.9913191199302673],"used":true,"bodyHandle":7.46e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.07329162955284119,0.10967876762151718],[0.30471187829971313,0.05425922945141792],[-0.00486964313313365,0.0443919338285923],[0.030795160681009293,-0.0458841510117054],[0.005912345368415117,0.050600577145814896],[0.01115220133215189,-0.015770047903060913],[0.008678141050040722,0.00976351834833622],[0.0055885533802211285,0.0651952475309372],[-0.0031853930559009314,0.004734544083476067],[0.0426412895321846,-0.045661523938179016]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0009468579664826393,0.17396187782287598,0.6015413999557495],"rotation":[-0.015044739469885826,0.9994145035743713,0.0033565720077604055,-0.03054363839328289],"used":true,"bodyHandle":7.5e-322,"linearSpeed":0,"angularVelocityHistory":[[0.057124797254800797,-0.05717301368713379],[-0.038722924888134,-0.024356909096240997],[-0.13795658946037292,0.0014216280542314053],[-0.00036810224992223084,-0.0018487039487808943],[-0.001884246477857232,-0.00014800651115365326],[-0.009393620304763317,-0.05812330171465874],[0.06858476251363754,0.03320294991135597],[0.4753001928329468,0.16141080856323242],[0.10533712804317474,-0.0832611471414566],[0.021471969783306122,0.35868948698043823]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.18215231597423553,0.252776563167572,-0.1785905361175537],"rotation":[0.5280492305755615,0.0001747436326695606,0.8492128849029541,-0.0011947519378736615],"used":true,"bodyHandle":7.56e-322,"linearSpeed":0.08292837749325394,"angularVelocityHistory":[[0.057297900319099426,0.030585315078496933],[0.17910005152225494,-0.054571330547332764],[0.04026391729712486,0.015685074031352997],[0.043934859335422516,0.013787182979285717],[0.012802536599338055,0.03893641382455826],[0.038767896592617035,0.007420269772410393],[0.09737852960824966,0.030944984406232834],[-0.2605978846549988,-0.10179087519645691],[0.045420803129673004,-0.0008215188863687217],[0.1428462117910385,0.10649188607931137],[-0.005199783947318792,-0.005500499624758959]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5489109754562378,0.17431548237800598,0.747506320476532],"rotation":[-0.012627844698727131,0.0012449127389118075,0.9999133944511414,-0.0034820507280528545],"used":true,"bodyHandle":7.6e-322,"linearSpeed":6.15220993813947e-13,"angularVelocityHistory":[[-0.00019035737204831094,-0.00040767734753899276],[-0.0013506568502634764,-0.0010765953920781612],[0.00027716500335372984,0.0003771096235141158],[-0.0002762430813163519,-0.00021719215146731585],[0.00011177222040714696,0.00006657397170783952],[0.00038835627492517233,-0.00006776499503757805],[-0.00016018365568015724,-0.000047582187107764184],[-0.00008042621630011126,-0.00004376961805974133],[-0.00010071584983961657,-0.00005769926792709157],[-0.00009594437869964167,-0.0000822036454337649],[-0.0000244351049332181,-0.00004788266232935712]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.05925159901380539,0.17311763763427734,0.634313702583313],"rotation":[0.003038776805624366,-0.7782418131828308,0.0016207771841436625,-0.6279552578926086],"used":true,"bodyHandle":7.66e-322,"linearSpeed":0,"angularVelocityHistory":[[0.21826541423797607,-0.10901825875043869],[-0.20477738976478577,-0.036983516067266464],[-0.5790361166000366,-0.3162987232208252],[-0.024049852043390274,0.04000711441040039],[0.07406125217676163,-0.011249116621911526],[-0.10809926688671112,0.07663892954587936],[-0.05194824934005737,0.013811605982482433],[0.008346653543412685,0.028710786253213882],[0.023865938186645508,0.05790260434150696],[-0.006584928836673498,0.022492151707410812]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5617732405662537,0.1800151914358139,0.7706095576286316],"rotation":[-0.9747992157936096,-0.00396698946133256,-0.22303535044193268,-0.002450348809361458],"used":true,"bodyHandle":7.7e-322,"linearSpeed":3.252654668167835e-11,"angularVelocityHistory":[[0.00020122816204093397,-0.00018786972214002162],[-0.00036078342236578465,-0.000015731331586721353],[0.00003068503428949043,0.00016441232583019882],[-0.00004809731035493314,0.0003373892977833748],[-0.00012571553816087544,0.00010714917880250141],[0.0002457888622302562,0.0002547634649090469],[-0.000011274170901742764,0.00007751473458483815],[-0.00003115535946562886,0.00013268872862681746],[-0.00014295586152002215,0.0001405617076670751],[-0.0001895130262710154,0.0002196476998506114],[-0.00006168372055981308,0.00009042182500706986]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[-0.24202249944210052,0.24741685390472412,-0.18403476476669312],"rotation":[0.001687070238403976,0.9985354542732239,-0.0024453969672322273,0.05401897430419922],"used":true,"bodyHandle":7.76e-322,"linearSpeed":0.08284660548148579,"angularVelocityHistory":[[0.057751789689064026,-0.022267622873187065],[0.015202558599412441,0.0006145521765574813],[0.00375669589266181,0.005959810223430395],[0.0009496639249846339,0.0005674291169270873],[0.0017662526806816459,-0.012936296872794628],[0.0006612707511521876,0.0005746652605012059],[0.0002990253851749003,0.0003155019076075405],[0.00017809185374062508,0.00012124422937631607],[0.008046802133321762,0.004395152907818556],[0.016572831198573112,-0.06796051561832428],[0.021449800580739975,-0.015944167971611023]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05787051096558571,0.17466017603874207,0.7034618258476257],"rotation":[0.0034620468504726887,-0.049987681210041046,-0.0027415617369115353,-0.998740017414093],"used":true,"bodyHandle":7.8e-322,"linearSpeed":0,"angularVelocityHistory":[[0.025748834013938904,0.08909440785646439],[0.002905160654336214,0.0616932213306427],[-0.02214837819337845,0.023203101009130478],[0.052828654646873474,-0.08560118824243546],[0.03951380029320717,-0.018177147954702377],[-0.0669936090707779,-0.03251681104302406],[0.036455895751714706,-0.022931411862373352],[0.0792485922574997,-0.0027309602592140436],[0.05807371810078621,0.09582377225160599],[-0.0038400727789849043,0.04348853603005409]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.2700311243534088,0.25324568152427673,-0.2370055764913559],"rotation":[0.002827630378305912,-0.17521855235099792,0.00023209690698422492,-0.9845254421234131],"used":true,"bodyHandle":7.86e-322,"linearSpeed":0.08331435285046875,"angularVelocityHistory":[[0.030017035081982613,0.0030450886115431786],[-0.0032333696726709604,0.005790658760815859],[-0.0026353243738412857,0.0007674226653762162],[-0.001620431779883802,0.0017374613089486957],[-0.0012918933061882854,0.0000586932037549559],[-0.0007364913471974432,0.0010738832643255591],[0.000531949452124536,0.0005763314547948539],[-0.000648261746391654,0.000267878727754578],[-0.0002418560179648921,0.0003044041513931006],[0.00009300296369474381,0.0006920532905496657],[0.0006262474926188588,0.0014943741261959076]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5254653096199036,0.17442958056926727,0.6970066428184509],"rotation":[-0.24702560901641846,0.0019789659418165684,0.9690009355545044,-0.0033909480553120375],"used":true,"bodyHandle":7.9e-322,"linearSpeed":3.583804563394961e-11,"angularVelocityHistory":[[0.0013667003950104117,0.0011699108872562647],[0.00024564802879467607,0.0005110935308039188],[0.0016994992038235068,0.0012109994422644377],[0.0016365988412871957,0.0006381161510944366],[-0.0011869798181578517,-0.0005059655522927642],[-0.0007404285715892911,-0.00021641426428686827],[-0.000554775760974735,-0.00013716208923142403],[-0.0008137873373925686,-0.0005416571511887014],[-0.0008207973442040384,-0.000525085546541959],[-0.00020073085033800453,-0.0002006619906751439],[-0.00022502141655422747,-0.000231206402531825]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.00026488775620236993,0.17420466244220734,0.7365868091583252],"rotation":[0.0012233896413818002,-0.7908728718757629,-0.00422991719096899,0.6119645833969116],"used":true,"bodyHandle":7.95e-322,"linearSpeed":0,"angularVelocityHistory":[[0.08607948571443558,-0.054708514362573624],[-0.037553589791059494,-0.0004187208542134613],[0.05134810879826546,-0.04229804873466492],[-0.035044386982917786,0.018130077049136162],[-0.057617172598838806,0.02098829858005047],[-0.03383225202560425,0.009241577237844467],[0.00971453171223402,0.009268823079764843],[0.007772129029035568,0.00751694617792964],[0.027019837871193886,0.04584737494587898],[-0.08003520965576172,-0.0062260255217552185]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.1492481231689453,0.24741806089878082,-0.2382693588733673],"rotation":[-0.5383692979812622,-0.0013264177832752466,-0.8427029848098755,0.0029005014803260565],"used":true,"bodyHandle":8e-322,"linearSpeed":0.08284107119093426,"angularVelocityHistory":[[-0.05246405676007271,-0.03475749120116234],[-0.05458049103617668,0.20224088430404663],[0.0008000209927558899,-0.009899967350065708],[0.0004388752859085798,-0.001185331610031426],[0.00032159980037249625,-0.000740555115044117],[0.0002904738357756287,-0.00021951558301225305],[0.00014199683209881186,-0.00041852943832054734],[0.00019744932069443166,-0.0003218512574676424],[0.0001336763089057058,-0.00023270968813449144],[0.00010968645801767707,-0.0001786503562470898],[0.000027177866286365315,-0.0001532902824692428]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05604530870914459,0.1750660091638565,0.7044819593429565],"rotation":[0.012527940794825554,-0.8882686495780945,-0.0016912812134250998,0.4591502547264099],"used":true,"bodyHandle":8.05e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.049344222992658615,-0.01026239339262247],[-0.01643059030175209,0.03749983385205269],[-0.010735739953815937,0.006675845943391323],[0.03160100430250168,-0.08121656626462936],[-0.03513003885746002,-0.008100626990199089],[0.4188747704029083,2.0401439666748047],[0.0036380435340106487,-0.0035289113875478506],[-0.017989302054047585,0.0646878182888031],[-0.15339550375938416,-0.02471323311328888],[-0.044034916907548904,0.09132310003042221]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5906619429588318,0.17451882362365723,0.48129990696907043],"rotation":[0.9769778251647949,-0.0027981013990938663,-0.21327313780784607,-0.0045916191302239895],"used":true,"bodyHandle":8.1e-322,"linearSpeed":4.8300296673056696e-11,"angularVelocityHistory":[[0.000671825953759253,0.0004929692368023098],[-0.000018432529031997547,-0.00012882209557574242],[-0.0009411293431185186,-0.0012074565747752786],[0.00022747543698642403,0.00012437906116247177],[0.000011279554200882558,-0.0008385585970245302],[-0.00011856630590045825,-0.0007760133594274521],[0.0009316318319179118,0.0004980819649063051],[-0.00139010907150805,-0.002090388210490346],[0.00034534683800302446,0.0001008152321446687],[-0.0001816202129703015,-0.00006950618990231305],[0.0009058176074177027,0.0006730541936121881]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5022475719451904,0.18016774952411652,0.7847318649291992],"rotation":[0.9531736969947815,-0.0009645585087127984,0.30240654945373535,-0.003047482343390584],"used":true,"bodyHandle":8.15e-322,"linearSpeed":3.757154982095333e-9,"angularVelocityHistory":[[-0.000007487576567655196,-0.002163455355912447],[-0.0005607670173048973,-0.005369788501411676],[-0.0011637586867436767,-0.00155476457439363],[0.00035359454341232777,-0.0006327247247099876],[0.00012448214692994952,-0.005288357846438885],[-0.0007207762100733817,-0.0009690315928310156],[-0.000653793103992939,0.0003873527457471937],[0.0005715743754990399,-0.004630219656974077],[-0.0012354610953480005,0.0006116070435382426],[-0.0013381189201027155,-0.0005635893903672695],[-0.0003880774602293968,0.00120748789049685]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0017798589542508125,0.2609577476978302,0.7413163781166077],"rotation":[-0.008497059345245361,-0.5229820013046265,-0.007007298059761524,-0.8522725105285645],"used":true,"bodyHandle":8.2e-322,"linearSpeed":0,"angularVelocityHistory":[[0.027463631704449654,-0.2694224417209625],[0.03705589845776558,0.07796360552310944],[-0.09234704077243805,0.16427044570446014],[0.2825239896774292,-0.1598159223794937],[0.0416908897459507,0.0180668942630291],[-0.13239982724189758,0.019307801499962807],[-0.18946868181228638,0.043476201593875885],[-0.14031155407428741,-0.06004997715353966],[-0.29548248648643494,0.10024004429578781],[-0.2863564193248749,-0.6068758368492126]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5406997799873352,0.17433089017868042,0.40857255458831787],"rotation":[0.0019051312701776624,0.32566916942596436,0.0028823227621614933,-0.9454774260520935],"used":true,"bodyHandle":8.25e-322,"linearSpeed":5.735653307910213e-13,"angularVelocityHistory":[[0.000078033292084001,-0.00009108444646699354],[0.000022407186406780966,-0.00003751318217837252],[0.000019659102690638974,-0.0000046100913095870055],[0.000010516411748540122,-0.000005631610292766709],[0.000029882699891459197,-0.00000820415880298242],[0.000044515963963931426,-0.00004433429057826288],[0.000022147078198031522,-0.000005544707164517604],[0.00002931910057668574,0.00002430540007480886],[-3.154974592689541e-7,-0.00001578376213728916],[0.000019016009900951758,-0.000050630555051611736],[0.00004835363870370202,-0.00004110064037377015]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[0.05926869809627533,0.17497166991233826,0.6378350257873535],"rotation":[-0.011136706918478012,-0.5259060263633728,0.001716341939754784,0.8504679799079895],"used":true,"bodyHandle":8.3e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.01003962755203247,-0.028218386694788933],[0.00835670530796051,-0.003123117843642831],[-0.24615779519081116,-0.11265773326158524],[-0.44267773628234863,-0.1778269112110138],[0.04008964076638222,-0.2559187114238739],[-0.01444038562476635,0.006072572432458401],[0.03557834401726723,0.013438237830996513],[-0.2695331275463104,-0.02186650037765503],[0.02965450845658779,-0.0465233288705349],[-0.10640411078929901,0.09500514715909958]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5582200288772583,0.18574464321136475,0.7632303237915039],"rotation":[0.0012109626550227404,-0.6596297025680542,0.0024735815823078156,0.7515856623649597],"used":true,"bodyHandle":8.35e-322,"linearSpeed":6.766857039293134e-11,"angularVelocityHistory":[[0.000504338531754911,0.00025652468320913613],[0.00006640303763560951,0.000293881690595299],[0.00001233079001394799,0.00031968922121450305],[-0.00011456258653197438,0.0001662786235101521],[-0.00006065509660402313,0.00010573780309641734],[0.000009799278814170975,0.00010162364924326539],[0.00008343886293005198,0.000217585897189565],[-0.000012801780940208118,0.00010085590474773198],[-0.00013526227849069983,0.0000135369373310823],[-0.00017210756777785718,0.0001733805547701195],[-0.00008488421008223668,0.00007680631097173318]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.0007288659107871354,0.17500416934490204,0.6670229434967041],"rotation":[0.0021009345073252916,-0.280025839805603,0.008179603144526482,0.9599552750587463],"used":true,"bodyHandle":8.4e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.06520649790763855,0.023609977215528488],[-0.04528013616800308,0.08539383113384247],[-0.017615292221307755,0.01626618206501007],[0.06918212026357651,-0.011992455460131168],[0.0016345641342923045,0.008210080675780773],[-0.03301974758505821,0.003133769379928708],[-0.025506915524601936,-0.023520058020949364],[0.009991837665438652,0.03115800954401493],[0.048325829207897186,0.04643397405743599],[0.16575370728969574,-0.05541925132274628]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.26997390389442444,0.24741850793361664,-0.23465970158576965],"rotation":[0.0024933123495429754,-0.9625616669654846,-0.0020007805433124304,-0.27104392647743225],"used":true,"bodyHandle":8.45e-322,"linearSpeed":0.08282393458430191,"angularVelocityHistory":[[0.034605421125888824,-0.008439451456069946],[-0.018734220415353775,0.0008949260227382183],[-0.007451589684933424,0.00021357348305173218],[-0.00951865129172802,0.0011145655298605561],[-0.0004999281372874975,-0.00010345812916057184],[-0.0005822348175570369,-0.00020290419342927635],[-0.0015556321013718843,0.00019751206855289638],[-0.0008376395562663674,0.000021859481421415694],[-0.0015923171304166317,-0.00004822582923225127],[0.001536073861643672,0.00007426275260513648],[0.00014341602218337357,-0.0006554403225891292]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.00040766302845440805,0.17948327958583832,0.5993344187736511],"rotation":[0.0018348770681768656,-0.9949713945388794,-0.010202028788626194,0.09962166845798492],"used":true,"bodyHandle":8.5e-322,"linearSpeed":0,"angularVelocityHistory":[[0.003466652939096093,-0.028550028800964355],[-0.008203066885471344,-0.007946970872581005],[-0.051695190370082855,0.012555934488773346],[-0.0605190135538578,-0.014741890132427216],[-0.02884376235306263,-0.0689629390835762],[0.019120575860142708,-0.035001013427972794],[0.14591258764266968,0.06335829943418503],[0.6482962965965271,-0.09027132391929626],[0.5760162472724915,0.5204804539680481],[0.11066406220197678,0.06591515988111496]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.08827587217092514,0.24749673902988434,-0.2356475591659546],"rotation":[-0.299629271030426,0.0004462172801140696,-0.9540541172027588,0.001672908547334373],"used":true,"bodyHandle":8.55e-322,"linearSpeed":0.08285674343225521,"angularVelocityHistory":[[0.009939612820744514,-0.0015704216202721],[-0.0014438488287851214,-0.004279530141502619],[0.00015862990403547883,0.0026348272804170847],[0.0006066519417800009,-0.0006543388590216637],[0.002384983701631427,0.0006934606353752315],[-0.0001679918495938182,-0.0014861036324873567],[0.05756542086601257,0.08207237720489502],[0.003106324467808008,0.00744632538408041],[-0.309970498085022,-0.11549880355596542],[0.0012091611279174685,0.0025539041962474585],[0.0008777620969340205,0.0026577047538012266]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.2102084755897522,0.24746958911418915,-0.23643192648887634],"rotation":[-0.8806778788566589,0.002462779637426138,-0.473708838224411,0.0005283866194076836],"used":true,"bodyHandle":8.6e-322,"linearSpeed":0.08285383627326859,"angularVelocityHistory":[[0.01086343452334404,-0.0037784669548273087],[0.024238936603069305,0.0804297924041748],[-0.00027558088186196983,-0.0015407672617584467],[0.000056824843341019005,-0.001263928017579019],[-4.62289193592369e-7,-0.0008554847445338964],[0.0000178499540197663,-0.0006075857090763748],[0.0000026935899768432137,-0.0004726741462945938],[0.00007842091872589663,-0.00032854097662493587],[-0.00003296292561572045,-0.00026101263938471675],[-0.000024658900656504557,-0.00023153926304075867],[0.000003812226168520283,-0.00018054887186735868]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5779873728752136,0.17477960884571075,0.35712364315986633],"rotation":[-0.0019295010715723038,0.4828173816204071,0.0005691134138032794,0.8757187128067017],"used":true,"bodyHandle":8.65e-322,"linearSpeed":0,"angularVelocityHistory":[[-9.499752877673018e-7,0.000009205894457409158],[0.06161149591207504,0.018339915201067924],[0.06092020869255066,0.027592627331614494],[-0.005146763287484646,-0.0018420403357595205],[-0.000008545172931917477,0.0000383147707907483],[0.06897108256816864,0.030059676617383957],[-0.010496851988136768,-0.004482807591557503],[0.1341230869293213,0.050474151968955994],[-0.0019148561405017972,-0.0010642732959240675],[0.002831406658515334,0.0008932511555030942]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.059379324316978455,0.17720025777816772,0.6345335245132446],"rotation":[-0.019007069990038872,-0.7585484981536865,0.0051149167120456696,0.651319146156311],"used":true,"bodyHandle":8.7e-322,"linearSpeed":0,"angularVelocityHistory":[[0.04453781619668007,-0.16156105697155],[0.028647519648075104,0.032002028077840805],[-0.1546509861946106,-0.125118687748909],[-0.2667015492916107,-0.20036983489990234],[0.052898380905389786,0.015265666879713535],[0.27838629484176636,0.09793587774038315],[-0.03790319338440895,-0.12523822486400604],[-0.04684868082404137,-0.0046880110166966915],[-0.4206380248069763,0.02285682037472725],[-0.20527426898479462,-0.007298577111214399]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.061098720878362656,0.17733898758888245,0.7043284773826599],"rotation":[0.006944298278540373,-0.6070240139961243,-0.00862934160977602,0.7946062684059143],"used":true,"bodyHandle":8.74e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.03904490917921066,-0.08815909177064896],[-0.018765512853860855,0.13095702230930328],[-0.09321349859237671,0.08661974221467972],[-0.24056126177310944,0.06715074926614761],[-0.05016883462667465,0.09690023213624954],[0.12982261180877686,0.044166259467601776],[0.2097037434577942,0.040772393345832825],[0.08181589841842651,-0.03550617769360542],[0.1485808938741684,-0.09392888844013214],[-0.02488456852734089,-0.09410326927900314]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.4720102548599243,0.17435602843761444,0.7227275371551514],"rotation":[0.949474573135376,0.0006966977380216122,-0.31382834911346436,0.0030542509630322456],"used":true,"bodyHandle":8.8e-322,"linearSpeed":2.1997358453143425e-11,"angularVelocityHistory":[[-0.00017677436699159443,-0.0007583585102111101],[0.00041890988359227777,-0.0008045887807384133],[0.0004594456113409251,0.000028355079848552123],[-0.00006652368028881028,-0.00041486011468805373],[0.0001695410319371149,0.00011701109178829938],[-0.00008571041689720005,-0.00011925454600714147],[-0.00003140377521049231,-0.00004854146027355455],[-0.00006635411409661174,0.0001189858085126616],[-0.00009982119081541896,0.00010928122355835512],[-0.0001364406489301473,-0.0000186299039341975],[-0.00009786219743546098,0.00006046952330507338]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.00053369504166767,0.17717255651950836,0.7397316694259644],"rotation":[0.0034140117932111025,-0.7839725613594055,-0.014883681200444698,0.6206076145172119],"used":true,"bodyHandle":8.84e-322,"linearSpeed":0,"angularVelocityHistory":[[0.1404993236064911,-0.2979514002799988],[0.06523684412240982,0.059527311474084854],[0.11584342271089554,0.04810074344277382],[0.0966227799654007,-0.053408704698085785],[0.03192446753382683,-0.0383521132171154],[0.30564606189727783,-0.12515601515769958],[0.12768694758415222,-0.049667827785015106],[0.14513565599918365,-0.08803151547908783],[0.06729239970445633,-0.19862115383148193],[0.11640947312116623,-0.030713878571987152]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.000527448020875454,0.26237258315086365,0.6718218922615051],"rotation":[0.01804044470191002,-0.47182491421699524,-0.01328347809612751,0.881407618522644],"used":true,"bodyHandle":8.9e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.22443383932113647,0.14744457602500916],[-0.39025261998176575,0.29965445399284363],[-0.10303080081939697,0.20152287185192108],[-0.0870189517736435,-0.00520461006090045],[-0.14041362702846527,0.022684920579195023],[0.1624906212091446,0.017737355083227158],[0.14786389470100403,-0.11339893192052841],[0.10099080204963684,0.02330019511282444],[0.04090854898095131,0.002024718327447772],[0.09294120222330093,0.14858365058898926]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.058065176010131836,0.17599613964557648,0.7033707499504089],"rotation":[0.0016543333185836673,-0.16376258432865143,-0.006892431061714888,-0.9864742755889893],"used":true,"bodyHandle":8.94e-322,"linearSpeed":0,"angularVelocityHistory":[[0.026687147095799446,0.14136682450771332],[-0.0463225431740284,0.10621511936187744],[0.016763072460889816,0.09486956149339676],[0.05492793396115303,0.0004856196464970708],[0.05785181000828743,0.009627075865864754],[-0.06772707402706146,-0.03725966811180115],[-0.012840795330703259,-0.012364902533590794],[0.026200173422694206,-0.03821795806288719],[0.023970521986484528,-0.00578670296818018],[0.00406668009236455,0.05210021138191223]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05908764898777008,0.17630843818187714,0.6350606679916382],"rotation":[0.005736926104873419,-0.9994814395904541,-0.00008539504779037088,-0.031683798879384995],"used":true,"bodyHandle":9e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.32186728715896606,0.02999160811305046],[-0.02406507544219494,-0.29911166429519653],[-0.0446723997592926,-0.14931720495224],[0.13903267681598663,-0.03538044914603233],[-0.038837749511003494,-0.00806491356343031],[-0.1001393049955368,0.047012194991111755],[-0.04960446432232857,0.03215207904577255],[-0.06815611571073532,0.09875202924013138],[-0.012245413847267628,0.04400476813316345],[-0.11279084533452988,0.10041756927967072]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0001460978528484702,0.17684756219387054,0.6730458736419678],"rotation":[0.0025163411628454924,-0.8298737406730652,0.004245939664542675,-0.5579293966293335],"used":true,"bodyHandle":9.04e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.05205760896205902,0.0332026407122612],[-0.023803042247891426,0.05858662724494934],[-0.032069023698568344,0.04265793785452843],[-0.13594135642051697,0.001964282477274537],[0.11386416852474213,0.10207600891590118],[-0.0675182193517685,-0.06577811390161514],[-0.2147786170244217,0.12485527247190475],[-0.10484473407268524,-0.046502262353897095],[-0.012583124451339245,-0.06344540417194366],[0.05172969400882721,-0.229973703622818]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.49956274032592773,0.17410029470920563,0.6464181542396545],"rotation":[-0.002256625099107623,0.8714860081672668,-0.0015176236629486084,-0.4904128611087799],"used":true,"bodyHandle":9.1e-322,"linearSpeed":8.197062024506316e-10,"angularVelocityHistory":[[-0.00040424749022349715,0.0008277851738967001],[-0.004764781799167395,0.0032213430386036634],[-0.00755434250459075,-0.0029659909196197987],[-0.010980009101331234,0.001015968038700521],[0.0007698492845520377,0.0013320152647793293],[-0.0016015868168324232,-0.005322959274053574],[-0.01187257282435894,0.011039326898753643],[-0.00435525830835104,-0.009177380241453648],[-0.019372878596186638,-0.007590950466692448],[-0.01264417078346014,-0.002264278708025813],[-0.0006392895011231303,-0.0005819923244416714]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.00016614209744147956,0.17606870830059052,0.6030232310295105],"rotation":[-0.0003428623895160854,0.9951196908950806,-0.005549552384763956,-0.09851814806461334],"used":true,"bodyHandle":9.14e-322,"linearSpeed":0,"angularVelocityHistory":[[0.054070428013801575,-0.02652316354215145],[0.04805397242307663,-0.013835277408361435],[-0.08487479388713837,-0.02674892731010914],[-0.08941569179296494,-0.04241165518760681],[-0.05424017459154129,-0.099863201379776],[-0.000836634892039001,-0.06047070026397705],[0.04031753167510033,-0.006585448980331421],[0.3662269115447998,-0.08772747218608856],[0.18984262645244598,0.23376920819282532],[-0.3060561716556549,0.14429700374603271]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4748125374317169,0.1743321418762207,0.3941951394081116],"rotation":[-0.0017162124859169126,-0.7726262807846069,-0.00293340184725821,-0.6348520517349243],"used":true,"bodyHandle":9.2e-322,"linearSpeed":4.166049767377881e-10,"angularVelocityHistory":[[-0.005227701272815466,0.002108998131006956],[-0.0010240303818136454,0.0022060712799429893],[0.02636774256825447,-0.021344898268580437],[0.0050038225017488,0.009122224524617195],[-0.0027900447603315115,0.0032060539815574884],[0.004545288626104593,0.007423137780278921],[-0.0042031025514006615,0.0030139980372041464],[0.010077228769659996,0.0026875007897615433],[-0.004870748613029718,0.0024335109628736973],[-0.001453107688575983,0.008644571527838707],[-0.0026824173983186483,0.0030072559602558613]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.031011873856186867,0.24753239750862122,-0.23652109503746033],"rotation":[0.0003168148105032742,-0.6786386370658875,0.0014096158556640148,-0.7344709038734436],"used":true,"bodyHandle":9.24e-322,"linearSpeed":0.08285345091656166,"angularVelocityHistory":[[0.02671601064503193,0.00021235691383481026],[-0.0012565198121592402,-0.0014206977793946862],[-0.1467670351266861,0.013610352762043476],[-0.005453058052808046,-0.008602294139564037],[-0.005579065531492233,-0.003127410775050521],[-0.005718712694942951,-0.009798344224691391],[-0.0011189429787918925,-0.0018533836118876934],[0.0002710195258259773,0.004287994001060724],[0.0015384844737127423,-0.001028042403049767],[-0.002737392671406269,0.001064683892764151],[-0.0014447629218921065,0.0027467594482004642]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.09083651751279831,0.2532373368740082,-0.23635204136371613],"rotation":[0.9941043853759766,0.001751381321810186,0.10839899629354477,-0.001757550984621048],"used":true,"bodyHandle":9.3e-322,"linearSpeed":0.0833401579206519,"angularVelocityHistory":[[-0.01066406350582838,0.01395705621689558],[-0.009353728033602238,0.004212628584355116],[-0.009034533053636551,0.01203179731965065],[-0.007315164897590876,0.008032208308577538],[-0.0028516692109405994,0.002984668593853712],[-0.00292274565435946,-0.008964166976511478],[-0.006371032912284136,-0.005977173335850239],[-0.003021195298060775,-0.0006211116560734808],[-0.0008405949920415878,0.002991675864905119],[-0.0012721633538603783,0.0017706112703308463],[-0.001159532112069428,-0.010004175826907158]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06129652261734009,0.17859037220478058,0.6346136331558228],"rotation":[-0.0002448585582897067,-0.9999899864196777,0.0021582290064543486,-0.003909505438059568],"used":true,"bodyHandle":9.34e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.20934157073497772,-0.046324778348207474],[-0.21384911239147186,-0.2670847773551941],[0.14924488961696625,-0.0057048373855650425],[0.25718092918395996,-0.02875899337232113],[0.07713984698057175,0.007074177265167236],[-0.10755053907632828,0.024600982666015625],[-0.06271000951528549,0.022062139585614204],[-0.13298626244068146,-0.21920467913150787],[-0.02826635167002678,-0.01949368789792061],[-0.11460994929075241,0.11658412963151932]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.060961171984672546,0.17848920822143555,0.7060109376907349],"rotation":[-0.005942627787590027,-0.38890111446380615,-0.0033867184538394213,-0.9212540984153748],"used":true,"bodyHandle":9.4e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.006286032497882843,0.058873068541288376],[-0.053849123418331146,0.07718419283628464],[0.03509392589330673,-0.01227190438657999],[0.027313334867358208,-0.010913924314081669],[0.07193771004676819,0.002505798591300845],[-0.08055417984724045,0.01711871661245823],[0.06465207785367966,0.06290307641029358],[0.14403082430362701,0.06595850735902786],[0.11297076940536499,0.1545904278755188],[-0.012821630574762821,0.034631602466106415]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0002288135583512485,0.18025833368301392,0.736815333366394],"rotation":[-0.00817671325057745,-0.9424333572387695,0.013781172223389149,0.33400991559028625],"used":true,"bodyHandle":9.44e-322,"linearSpeed":0,"angularVelocityHistory":[[0.169052392244339,-0.16516423225402832],[0.02890780009329319,0.08386652916669846],[0.16673341393470764,0.08728877454996109],[0.07212591171264648,-0.039058927446603775],[-0.05158207193017006,0.066600002348423],[0.4203120470046997,-0.10175510495901108],[0.20325317978858948,-0.036649189889431],[0.13864590227603912,-0.08747155219316483],[0.08596039563417435,-0.16654573380947113],[-0.010372007265686989,-0.013723787851631641]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.09081446379423141,0.24741651117801666,-0.23627245426177979],"rotation":[0.0004943366511724889,0.5572863221168518,0.00324536906555295,0.8303138613700867],"used":true,"bodyHandle":9.5e-322,"linearSpeed":0.08283960393351092,"angularVelocityHistory":[[0.03149350732564926,-0.010264335200190544],[0.0011097731767222285,0.004123840946704149],[-0.0004563834227155894,-0.005622364114969969],[-0.00007624753925483674,-0.0035804230719804764],[-0.0001641401759115979,-0.0008381501538679004],[-0.0005804758984595537,0.0027820866089314222],[-0.004317258484661579,-0.008811910636723042],[-0.00013991763989906758,-0.008035141043365002],[0.000331696355715394,-0.0023024037946015596],[0.00006405829481082037,-0.003946106880903244],[-0.0025796133559197187,-0.006700273137539625]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5710523128509521,0.17441560328006744,0.5237060785293579],"rotation":[-0.5873902440071106,-0.003910766448825598,0.8092922568321228,-0.0018583348719403148],"used":true,"bodyHandle":9.54e-322,"linearSpeed":1.1727025846188056e-11,"angularVelocityHistory":[[0.000017429832951165736,-0.00010864332580240443],[0.000039842288970248774,0.000017949923858395778],[0.000004352404630481033,-0.0000034409647469146876],[0.00000809563061920926,-0.000021245623429422267],[0.0000047481385081482586,-0.000007048433872114401],[-0.0000679347213008441,0.0000875173500389792],[0.00004877783067058772,-0.00003135582301183604],[-0.00004914990859106183,0.00021430921333376318],[0.00002655684329511132,-0.00005483886707224883],[-0.0000267362247541314,-0.000012291030543565284],[0.00001060847171174828,-0.000025741503122844733]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06046900898218155,0.1790943741798401,0.7053596377372742],"rotation":[-0.018925320357084274,-0.8675306439399719,0.020142273977398872,0.49661511182785034],"used":true,"bodyHandle":9.6e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.11232760548591614,-0.11008589714765549],[-0.1510159969329834,-0.15533356368541718],[-0.06908302754163742,0.06240696460008621],[-0.16251875460147858,0.07458236813545227],[-0.060083989053964615,0.11438819020986557],[-0.19319361448287964,0.15444082021713257],[-0.34024742245674133,0.10578445345163345],[-0.04550689458847046,-0.06758823245763779],[0.13580425083637238,-0.10044911503791809],[0.036882366985082626,-0.10752791166305542]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.45510971546173096,0.17479375004768372,0.8329504728317261],"rotation":[-0.7668054103851318,0.0009347534505650401,-0.6418787837028503,-0.00027864304138347507],"used":true,"bodyHandle":9.63e-322,"linearSpeed":2.1627497374913165e-17,"angularVelocityHistory":[[-8.8896956640383e-7,9.287865623264224e-7],[-8.401897275689407e-7,8.808323741504864e-7],[-8.488764819958305e-7,8.508275755048089e-7],[-8.866215921443654e-7,8.985145996120991e-7],[-8.729689398023766e-7,9.33292824356613e-7],[-9.063127777153568e-7,8.901774322112033e-7],[-8.36536628412432e-7,8.686497494636569e-7],[-9.290822049479175e-7,8.905644790502265e-7],[-8.609088126831921e-7,9.147207151727343e-7],[-8.578091410527122e-7,8.96658150395524e-7],[-8.343588433490368e-7,9.039870860760857e-7]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06104641407728195,0.18204142153263092,0.634808361530304],"rotation":[-0.014989565126597881,-0.9407639503479004,-0.0018943422473967075,0.33872532844543457],"used":true,"bodyHandle":9.7e-322,"linearSpeed":0,"angularVelocityHistory":[[0.028507383540272713,-0.14024536311626434],[-0.0027412783820182085,-0.024664217606186867],[-0.19894924759864807,-0.10038241744041443],[-0.3971579372882843,-0.11621119827032089],[-0.06922806054353714,0.11618481576442719],[0.09725399315357208,0.040802277624607086],[-0.0305374376475811,-0.20871898531913757],[-0.09687447547912598,-0.1519966870546341],[-0.4241581857204437,0.04353617876768112],[-0.18538619577884674,0.06001342460513115]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.002695221221074462,0.17789287865161896,0.6685146689414978],"rotation":[-0.002082821913063526,0.008546149358153343,0.0049458094872534275,0.999949038028717],"used":true,"bodyHandle":9.73e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.08134223520755768,0.07576797902584076],[0.07643923163414001,0.0948113426566124],[0.015672782436013222,0.04121999442577362],[0.01783381775021553,0.08909387141466141],[0.08738794922828674,0.11116322875022888],[-0.0029896050691604614,-0.05821012333035469],[-0.17991364002227783,0.040286581963300705],[-0.06994719803333282,-0.09255064278841019],[0.06400984525680542,-0.14635838568210602],[-0.03948405385017395,-0.07265163958072662]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5298562049865723,0.17817960679531097,0.49596211314201355],"rotation":[0.042121659964323044,-0.9832860827445984,0.04313652217388153,-0.17179477214813232],"used":true,"bodyHandle":9.8e-322,"linearSpeed":0.0000034979042960182327,"angularVelocityHistory":[[-0.012581336311995983,-0.020208463072776794],[-0.015257690101861954,-0.01750754751265049],[0.003662434173747897,0.040866922587156296],[-0.03393372893333435,-0.013764646835625172],[-0.02677922695875168,-0.02325771190226078],[-0.040492549538612366,-0.03837333247065544],[-0.04352154955267906,-0.049955252557992935],[-0.038760241121053696,-0.035668034106492996],[-0.04411753639578819,-0.04131874069571495],[-0.008813917636871338,-0.01043554488569498],[-0.03532364219427109,-0.034499071538448334]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5765557289123535,0.18007679283618927,0.5221609473228455],"rotation":[-0.9987841844558716,-0.006099296268075705,0.04889935627579689,0.0013411439722403884],"used":true,"bodyHandle":9.83e-322,"linearSpeed":3.811398033106951e-11,"angularVelocityHistory":[[0.00014083317364566028,-0.000042393501644255593],[0.00005475911166286096,0.0000412529734603595],[0.000012637348845601082,0.000003915090928785503],[0.000005256953045318369,0.000002379950046815793],[0.000008946555681177415,0.000003644571279437514],[-0.000044203279685461894,0.00004655470183934085],[0.000023857963242335245,-0.00004046782123623416],[-0.00011299440666334704,0.00008146084292093292],[-0.000004639719918486662,-0.00002195335582655389],[0.0000016722866575946682,0.0000020657735149143264],[0.000008506004633090924,-0.0000057845186347549316]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[-0.00012278513167984784,0.18092159926891327,0.6031038165092468],"rotation":[0.0007088989950716496,-0.9792150259017944,0.001180195831693709,-0.202820286154747],"used":true,"bodyHandle":9.9e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.0035897905472666025,0.011996171437203884],[0.05394976586103439,-0.04719289764761925],[-0.07841908931732178,-0.09830303490161896],[-0.06694341450929642,0.0027593113481998444],[-0.06177525594830513,-0.15405911207199097],[-0.004300159867852926,-0.05334429070353508],[0.06508523970842361,0.020278053358197212],[1.3980003595352173,-0.19084498286247253],[-0.22326026856899261,0.7575036883354187],[-0.08245834708213806,0.06663737446069717]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.057768870145082474,0.17871512472629547,0.6368898749351501],"rotation":[-0.0012733902549371123,-0.9312815070152283,0.0008189371437765658,0.36429715156555176],"used":true,"bodyHandle":9.93e-322,"linearSpeed":0,"angularVelocityHistory":[[-0.03715219348669052,-0.13824932277202606],[0.004058217164129019,-0.035323936492204666],[-0.0815611407160759,0.09903407096862793],[-0.2923620045185089,-0.21225881576538086],[-0.044737525284290314,0.08532492816448212],[0.08551868796348572,0.0241031926125288],[-0.009159200824797153,0.02409536950290203],[-0.15578562021255493,-0.06208963692188263],[-0.21711456775665283,0.050503432750701904],[-0.07882757484912872,0.15643566846847534]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.058462563902139664,0.1804492324590683,0.703411877155304],"rotation":[0.002213808475062251,-0.5576959252357483,-0.0021961561869829893,0.830039381980896],"used":true,"bodyHandle":1e-321,"linearSpeed":0,"angularVelocityHistory":[[0.0023386962711811066,-0.09426762163639069],[0.012058692052960396,0.07167959958314896],[-0.06428539752960205,0.10390924662351608],[-0.15528513491153717,0.1422305852174759],[-0.010116666555404663,0.164043590426445],[-0.07953856885433197,0.19109760224819183],[-0.026317954063415527,0.07511930167675018],[-0.17833605408668518,-0.10897698998451233],[0.11545930057764053,-0.046487536281347275],[-0.20703785121440887,0.05064304918050766]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.001141936401836574,0.17845503985881805,0.7404070496559143],"rotation":[0.0005556427640840411,-0.8484688997268677,-0.005065943580120802,0.5292207598686218],"used":true,"bodyHandle":1.003e-321,"linearSpeed":0,"angularVelocityHistory":[[0.1636904627084732,-0.21408452093601227],[0.08334643393754959,0.036767154932022095],[0.08952190726995468,0.03339839726686478],[0.11307378858327866,-0.08203394711017609],[-0.04447067156434059,-0.02479247935116291],[0.16464091837406158,-0.06239240616559982],[0.08882147818803787,-0.01068663876503706],[0.12259192764759064,-0.0886170044541359],[-0.010353009216487408,-0.08939854055643082],[0.04929357022047043,0.03297099098563194]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06063076853752136,0.17948351800441742,0.7046328783035278],"rotation":[-0.019055601209402084,0.15035662055015564,-0.00919900182634592,-0.9884054064750671],"used":true,"bodyHandle":1.01e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.08218817412853241,0.16280324757099152],[-0.10937632620334625,0.055242687463760376],[0.00851057842373848,-0.044427890330553055],[0.09759648144245148,0.0567132942378521],[0.07665269821882248,-0.00766519270837307],[-0.04252338409423828,-0.002889564260840416],[-0.03349073976278305,0.07168643921613693],[0.12035106122493744,0.10095769166946411],[0.1763000637292862,0.2150665670633316],[-0.05831175670027733,0.08594787865877151]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5532618761062622,0.17863605916500092,0.4163982570171356],"rotation":[-0.7745410203933716,0.022164463996887207,-0.6293229460716248,-0.05956113338470459],"used":true,"bodyHandle":1.013e-321,"linearSpeed":4.992496424008574e-8,"angularVelocityHistory":[[0.016949329525232315,-0.010406711138784885],[0.017044784501194954,-0.010464975610375404],[0.017156023532152176,-0.010528543032705784],[0.017267679795622826,-0.010596917942166328],[0.017374008893966675,-0.010668935254216194],[0.017467617988586426,-0.010779939591884613],[0.01753387227654457,-0.010840872302651405],[-0.10867108404636383,0.033778801560401917],[-0.0992174819111824,0.03358437865972519],[-0.08011285960674286,0.02814984694123268],[-0.07686025649309158,0.027551842853426933]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.2701120972633362,0.24741588532924652,-0.23685480654239655],"rotation":[-0.0021841591224074364,0.6971001029014587,-0.00233540334738791,0.7169666290283203],"used":true,"bodyHandle":1.02e-321,"linearSpeed":0.08285420415267403,"angularVelocityHistory":[[0.012325753457844257,-0.001938085537403822],[0.0018326088320463896,0.0031565045937895775],[0.00019260075350757688,0.00007540138904005289],[0.000480073009384796,-0.0015331720933318138],[0.0003305977734271437,-0.000615795433986932],[0.00004497803092817776,0.0002896950754802674],[0.001702351844869554,0.00038738586590625346],[0.00005715418956242502,0.000048411082389065996],[0.000024348048100364394,-0.00006300411041593179],[-0.00008511202031513676,0.000032218285923590884],[-0.00027513178065419197,-0.00002051486626442056]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.057981569319963455,0.18052338063716888,0.636539876461029],"rotation":[-0.002496028319001198,-0.7401634454727173,0.012384319677948952,-0.6723082661628723],"used":true,"bodyHandle":1.023e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.1946411281824112,-0.10597634315490723],[0.20064975321292877,-0.018197836354374886],[0.15096962451934814,-0.0532609298825264],[0.2576957046985626,0.09523708373308182],[0.09848523885011673,0.020251909270882607],[-0.15026342868804932,0.10737716406583786],[0.11187773942947388,-0.07006464898586273],[-0.177967831492424,-0.2301073670387268],[-0.053437575697898865,-0.0005107691395096481],[-0.10849618911743164,0.14157019555568695]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0026793417055159807,0.18127590417861938,0.6689593195915222],"rotation":[-0.01336699165403843,-0.41548147797584534,-0.005939706694334745,-0.9094839692115784],"used":true,"bodyHandle":1.03e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.09533809870481491,-0.02443018928170204],[0.3166968524456024,0.3207409679889679],[-0.02206186018884182,-0.0323856920003891],[-0.11365390568971634,0.26100286841392517],[0.07598374783992767,0.10061517357826233],[0.02913779392838478,-0.13541775941848755],[-0.184952050447464,0.06375992298126221],[-0.05113154277205467,-0.12403248250484467],[0.061708714812994,-0.2290673702955246],[-0.013657244853675365,-0.2687947452068329]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0002120613062288612,0.18361951410770416,0.6013591885566711],"rotation":[-0.01811704970896244,0.9961545467376709,0.025371545925736427,0.08187960833311081],"used":true,"bodyHandle":1.033e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.0752604752779007,0.12342201918363571],[-0.15859371423721313,-0.14501279592514038],[-0.05181974917650223,-0.03465212881565094],[-0.11436901241540909,-0.06223632022738457],[-0.06163254752755165,-0.17335055768489838],[-0.04807043448090553,-0.05154102295637131],[0.038919996470212936,-0.07454302161931992],[0.7698002457618713,-0.06772737205028534],[0.18776564300060272,0.547356903553009],[0.1311815083026886,0.1433657556772232]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05958790332078934,0.18214057385921478,0.6346822381019592],"rotation":[0.016063019633293152,-0.9426785111427307,0.003650394733995199,-0.3332955837249756],"used":true,"bodyHandle":1.04e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.04379897937178612,-0.336777001619339],[0.07359291613101959,-0.06893526762723923],[-0.006848386954516172,-0.135948047041893],[0.22351902723312378,-0.01672409288585186],[0.23212845623493195,0.09351693838834763],[-0.1651768684387207,0.06873322278261185],[-0.07140729576349258,0.029606537893414497],[-0.05584417283535004,-0.10426042973995209],[-0.049839574843645096,0.000983388745225966],[-0.09490996599197388,0.18158815801143646]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05806471034884453,0.18187491595745087,0.7039061188697815],"rotation":[0.0007406964432448149,0.19873367249965668,-0.0014826020924374461,-0.98005211353302],"used":true,"bodyHandle":1.042e-321,"linearSpeed":0,"angularVelocityHistory":[[0.003991787321865559,0.0919681265950203],[-0.04679630696773529,0.1683608591556549],[0.022274013608694077,0.0292509812861681],[-0.17912741005420685,-0.003342017764225602],[0.05750498175621033,0.031761206686496735],[-0.01334335096180439,-0.012731517665088177],[0.012387409806251526,0.1102871298789978],[0.10404418408870697,0.14571548998355865],[0.0069100805558264256,0.407656192779541],[-0.06638430804014206,0.11359083652496338]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.00010176443902309984,0.18228401243686676,0.7377061247825623],"rotation":[0.0001255642418982461,-0.978344738483429,-0.01570507138967514,0.20638537406921387],"used":true,"bodyHandle":1.047e-321,"linearSpeed":0,"angularVelocityHistory":[[0.289440780878067,-0.25480034947395325],[0.0019567629788070917,0.12924081087112427],[0.14041797816753387,0.08267106860876083],[0.1322798877954483,-0.03340506926178932],[-0.04901031032204628,0.03390698879957199],[0.26114630699157715,-0.07336953282356262],[0.195231094956398,-0.015780875459313393],[0.1836250126361847,-0.06032783165574074],[0.18826518952846527,-0.1974208503961563],[0.16876596212387085,-0.021311121061444283]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5422956943511963,0.17984159290790558,0.42379364371299744],"rotation":[-0.6685823798179626,0.0013709708582609892,-0.7436341047286987,-0.002017291495576501],"used":true,"bodyHandle":1.05e-321,"linearSpeed":4.799302002202449e-11,"angularVelocityHistory":[[-0.000041391940612811595,-0.000006453761216107523],[0.00002637823490658775,-0.00007910016574896872],[0.0000011705366205205792,-0.00005790481372969225],[-0.0000025659492166596465,-0.0000128539422803442],[-0.000006996613592491485,-0.00003758811726584099],[-0.00013746727199759334,0.00023349707771558315],[-0.0001717387931421399,0.00011623583122855052],[0.000025823112082434818,0.000005057344424130861],[0.000021938327336101793,-0.000003179769919370301],[0.000027224365112488158,-0.000058341884141555056],[-0.00006601517816307023,0.000060065452998969704]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.5763020515441895,0.17447462677955627,0.8004721999168396],"rotation":[-0.00024944174219854176,-0.8815486431121826,0.0036307640839368105,0.47207918763160706],"used":true,"bodyHandle":1.057e-321,"linearSpeed":1.5801785008914687e-13,"angularVelocityHistory":[[-0.0001273160014534369,-0.000048659476306056604],[-0.00016745980246923864,-0.0002564615570008755],[0.00007170833123382181,0.000009577205673849676],[-0.00014969434414524585,-0.00008132957736961544],[0.000035044769902015105,-0.000017067066437448375],[-0.000034693541238084435,-0.000010638475941959769],[-0.00004154643102083355,-0.00004480817005969584],[-0.00003434306927374564,-0.000022755943064112216],[-0.000026473884645383805,-0.00002542558104323689],[-0.000023992653950699605,-0.00002175060217268765],[-0.000015227980838972144,-0.000011781307875935454]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.061267539858818054,0.18444590270519257,0.7043769359588623],"rotation":[-0.0033498031552881002,-0.9933282732963562,-0.008549242280423641,0.11495436728000641],"used":true,"bodyHandle":1.06e-321,"linearSpeed":0,"angularVelocityHistory":[[0.0262953732162714,-0.1437138319015503],[0.008753763511776924,0.1862286478281021],[-0.061478301882743835,0.1211143434047699],[-0.12956386804580688,0.21430058777332306],[0.0234046783298254,0.189810648560524],[0.2548835873603821,0.12556761503219604],[0.3069634437561035,-0.05119500681757927],[0.053811825811862946,-0.12748484313488007],[0.18499283492565155,-0.1301565170288086],[-0.029983708634972572,-0.0074859196320176125]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.060675524175167084,0.1811332404613495,0.6342085003852844],"rotation":[-0.018168358132243156,-0.6582334637641907,0.002548746531829238,0.7525901794433594],"used":true,"bodyHandle":1.067e-321,"linearSpeed":0,"angularVelocityHistory":[[0.0287534948438406,-0.13695648312568665],[-0.015439355745911598,-0.06421899795532227],[-0.19021661579608917,-0.11146188527345657],[-0.29931309819221497,-0.13056376576423645],[-0.056406278163194656,0.12410582602024078],[0.05402858555316925,0.03093278780579567],[-0.13345380127429962,-0.10324349999427795],[-0.044308219105005264,0.03068101406097412],[-0.27644288539886475,-0.04888144135475159],[-0.150334432721138,0.052412744611501694]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.002242435934022069,0.18174827098846436,0.6717301607131958],"rotation":[0.001161503721959889,-0.05816846340894699,-0.005934562999755144,0.9982884526252747],"used":true,"bodyHandle":1.07e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.002778317080810666,0.039936769753694534],[0.10435608774423599,0.04860297590494156],[0.0020807634573429823,0.07331191748380661],[-0.3966235816478729,0.5557676553726196],[0.10980578511953354,0.08295390009880066],[-0.005846490617841482,-0.04800306260585785],[-0.18108457326889038,0.05944545567035675],[-0.023282984271645546,-0.063133105635643],[0.010149912908673286,-0.18084479868412018],[0.02959476411342621,-0.2399953007698059]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.16960489749908447,0.2559354603290558,-0.06005733832716942],"rotation":[-0.9194872379302979,0.004578449297696352,0.3863171935081482,0.072673000395298],"used":true,"bodyHandle":1.077e-321,"linearSpeed":0.08307021775122848,"angularVelocityHistory":[[0.4795337915420532,0.8307214379310608],[0.386209100484848,0.7491202354431152],[-0.25201335549354553,-0.7597715854644775],[-0.003719448344781995,-0.2921178936958313],[-0.020392173901200294,-0.08783771842718124],[0.12371597439050674,0.2812649607658386],[0.040037207305431366,0.10724183171987534],[0.04969269782304764,0.01590896211564541],[0.030900120735168457,-0.29216817021369934],[0.047113340348005295,-0.05212007090449333],[-0.039284370839595795,0.006718261633068323]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.1871909499168396,0.2602069079875946,-0.04035742208361626],"rotation":[-0.4615207314491272,-0.019549336284399033,0.8865068554878235,0.02687210589647293],"used":true,"bodyHandle":1.08e-321,"linearSpeed":0.08321591062279372,"angularVelocityHistory":[[0.49815189838409424,0.6261980533599854],[0.5469678640365601,0.8554331064224243],[-0.35683968663215637,-0.3702915608882904],[-0.3270304799079895,-1.2391157150268555],[-0.15044783055782318,-0.33143430948257446],[0.24974362552165985,0.779458224773407],[0.28073006868362427,1.4167231321334839],[-0.008401167578995228,-0.20980937778949738],[-0.24206769466400146,-0.8521607518196106],[-0.12179762125015259,-0.4356558322906494],[0.42478498816490173,1.8445396423339844]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.2218882143497467,0.24755217134952545,-0.052050650119781494],"rotation":[0.0006066738860681653,0.88728266954422,-0.0028743119910359383,-0.4612165689468384],"used":true,"bodyHandle":1.087e-321,"linearSpeed":0.08284626199136726,"angularVelocityHistory":[[0.02394488826394081,-0.005543443374335766],[0.012068374082446098,-0.003733967198058963],[0.0004565611307043582,0.005142994690686464],[0.0019288607873022556,0.0019977050833404064],[0.000632926297839731,-0.018908414989709854],[0.00533006526529789,-0.0010426619555801153],[-0.004588765557855368,-0.024001754820346832],[0.00021952252427581698,-0.003595327492803335],[-0.004623171873390675,0.001322882599197328],[0.0015358016826212406,0.0028377478010952473],[-0.004955787677317858,0.009126798249781132]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0001893156731966883,0.18175213038921356,0.5990448594093323],"rotation":[-0.009388978593051434,-0.9998592138290405,-0.00663088820874691,0.012223088182508945],"used":true,"bodyHandle":1.09e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.004651919007301331,-0.012326712720096111],[0.07895783334970474,0.008000168949365616],[-0.089176706969738,-0.04792886972427368],[-0.07707555592060089,-0.10840479284524918],[-0.0464349128305912,-0.17496494948863983],[-0.132022425532341,-0.1342773288488388],[-0.07088202238082886,-0.15665236115455627],[0.44808778166770935,-0.0953141450881958],[-0.20793499052524567,0.24994555115699768],[0.13393394649028778,0.07175196707248688]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.059023112058639526,0.18387171626091003,0.6365805864334106],"rotation":[-0.02181348018348217,0.044542573392391205,-0.0032565374858677387,0.9987639784812927],"used":true,"bodyHandle":1.097e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.010937587358057499,-0.1324290782213211],[-0.029150009155273438,-0.005824078805744648],[-0.20662090182304382,-0.19563905894756317],[-0.3079570531845093,-0.1897171437740326],[-0.09944620728492737,0.07883895188570023],[0.06927339732646942,0.09307397156953812],[-0.16345015168190002,-0.02818811871111393],[-0.38868090510368347,0.08256355673074722],[-0.3270118832588196,-0.007709812372922897],[-0.16973835229873657,0.09421436488628387]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.058146700263023376,0.26008209586143494,0.7027419209480286],"rotation":[-0.017328718677163124,-0.9325318336486816,0.013982066884636879,0.36040061712265015],"used":true,"bodyHandle":1.1e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.046271733939647675,-0.2181115597486496],[-0.01409805566072464,-0.20518122613430023],[0.060099586844444275,-0.13100890815258026],[-0.28538891673088074,0.036698613315820694],[-0.13152851164340973,-0.11500559747219086],[0.05263901129364967,-0.01690700463950634],[-0.04529712721705437,-0.11894749850034714],[-0.007782998960465193,-0.2545391321182251],[0.05226070061326027,-0.1924002319574356],[0.035475339740514755,-0.1463548094034195]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.057473670691251755,0.18225078284740448,0.7036670446395874],"rotation":[-0.0027480495627969503,-0.9987116456031799,-0.002959617180749774,-0.05058335140347481],"used":true,"bodyHandle":1.107e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.010183954611420631,-0.11704694479703903],[0.006653316784650087,0.1095147579908371],[-0.0611371174454689,0.08540859818458557],[-0.23764446377754211,0.12094967067241669],[-0.04396664351224899,0.11157011240720749],[0.20937544107437134,0.18400120735168457],[0.2798931300640106,0.056822266429662704],[0.030172543600201607,-0.029262635856866837],[0.10224739462137222,0.019405199214816093],[-0.11559576541185379,-0.22250685095787048]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0009222961380146444,0.18430890142917633,0.7405863404273987],"rotation":[0.004681286867707968,-0.6841719150543213,-0.004293030593544245,0.7292931079864502],"used":true,"bodyHandle":1.11e-321,"linearSpeed":0,"angularVelocityHistory":[[0.17507056891918182,-0.24533773958683014],[0.009971119463443756,0.09646830707788467],[0.17253358662128448,-0.011866745539009571],[0.09278261661529541,-0.14678724110126495],[-0.12436297535896301,-0.04187297821044922],[0.2724618911743164,-0.10931973159313202],[0.1811184287071228,-0.025572819635272026],[0.1496472805738449,-0.06205116957426071],[0.10027182102203369,-0.1677522510290146],[0.41077378392219543,0.1115606278181076]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.059605058282613754,0.18378682434558868,0.7033461928367615],"rotation":[-0.008035803213715553,-0.6639953255653381,-0.0166187547147274,-0.7475088238716125],"used":true,"bodyHandle":1.117e-321,"linearSpeed":0,"angularVelocityHistory":[[0.04027445614337921,0.11273815482854843],[-0.05364653840661049,0.11967579275369644],[-0.020663011819124222,0.031277094036340714],[-0.02975871041417122,0.028972307220101357],[0.07571199536323547,-0.031324103474617004],[0.013531557284295559,-0.013233854435384274],[0.01622369885444641,0.046470094472169876],[0.03402736037969589,0.0897311121225357],[0.1457033008337021,0.21157881617546082],[-0.02947339043021202,0.10444945842027664]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4770105183124542,0.1801561415195465,0.3863924741744995],"rotation":[-0.0027689882554113865,0.3411424458026886,0.0013658885145559907,-0.9400065541267395],"used":true,"bodyHandle":1.12e-321,"linearSpeed":4.820390504875163e-8,"angularVelocityHistory":[[-0.0028689242899417877,0.00042293634032830596],[0.004318326711654663,0.0016076203901320696],[-0.0159161314368248,0.0035870608408004045],[-0.0014606944750994444,-0.004306522198021412],[0.00235158228315413,0.00012351394980214536],[-0.001785431755706668,-0.0031887958757579327],[-0.00425933301448822,0.0024533020332455635],[0.005482060369104147,-0.0041986797004938126],[0.008128389716148376,0.0036472021602094173],[-0.01272642519325018,-0.0034962312784045935],[-0.002327394438907504,0.0001790027745300904]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05768384039402008,0.18613167107105255,0.6362316012382507],"rotation":[-0.003599995281547308,-0.5995813608169556,0.0025397720746695995,-0.8003016114234924],"used":true,"bodyHandle":1.126e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.11670063436031342,-0.3542722761631012],[0.11432544142007828,-0.053263433277606964],[0.002533736638724804,-0.0970214381814003],[0.25025674700737,0.09179666638374329],[0.19297027587890625,0.007449215743690729],[0.020920660346746445,-0.1598348766565323],[-0.09285281598567963,0.08723793923854828],[-0.16000103950500488,-0.30109232664108276],[0.012271310202777386,0.11697818338871002],[-0.062394846230745316,0.18442663550376892]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.00020199106074869633,0.1834646612405777,0.6666276454925537],"rotation":[-0.004092078190296888,-0.5873677134513855,0.0017718509770929813,-0.8093078136444092],"used":true,"bodyHandle":1.13e-321,"linearSpeed":0,"angularVelocityHistory":[[0.20880922675132751,0.0810571238398552],[0.06902677565813065,0.043867308646440506],[0.04144759848713875,0.17178431153297424],[0.03347277268767357,0.09365539252758026],[0.1336895227432251,0.1193910464644432],[0.013219187036156654,-0.04094405844807625],[-0.05891776084899902,0.008650695905089378],[-0.0586945116519928,-0.10318470746278763],[0.01276612002402544,-0.20983631908893585],[-0.019024815410375595,-0.2805447280406952]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.061616335064172745,0.26223593950271606,0.7040207386016846],"rotation":[-0.015611532144248486,-0.9312093257904053,0.015639465302228928,0.36381441354751587],"used":true,"bodyHandle":1.136e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.04629252851009369,-0.03460170701146126],[-0.07248006016016006,-0.10021484643220901],[0.0783730000257492,-0.13833147287368774],[0.032951731234788895,-0.25068047642707825],[-0.14695695042610168,-0.07455172389745712],[-0.25355035066604614,-0.06622879952192307],[-0.0912882536649704,-0.20750978589057922],[0.41651517152786255,-0.23236221075057983],[-0.043273959308862686,-0.1139562577009201],[0.2419898360967636,-0.11504169553518295]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4696566164493561,0.1828347146511078,0.6872492432594299],"rotation":[-0.02003549039363861,-0.16527608036994934,-0.044028181582689285,-0.9850603342056274],"used":true,"bodyHandle":1.14e-321,"linearSpeed":1.717467797271384e-7,"angularVelocityHistory":[[-0.018402161076664925,0.017905455082654953],[-0.01671106554567814,0.012134413234889507],[-0.0132010318338871,-0.02791871689260006],[0.02515094168484211,0.0398084856569767],[0.015211982652544975,0.00806930847465992],[0.01802036352455616,-0.008101322688162327],[0.00534415990114212,0.010943867266178131],[0.009382079355418682,-0.003701562061905861],[0.009268837049603462,-0.0167589969933033],[0.03761657327413559,0.03853997960686684],[0.01856164075434208,0.01000788901001215]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5401826500892639,0.18564577400684357,0.42459234595298767],"rotation":[0.0001180418039439246,0.3048494756221771,-0.0035683573223650455,0.9523938298225403],"used":true,"bodyHandle":1.146e-321,"linearSpeed":6.563133058235972e-11,"angularVelocityHistory":[[-0.00002553383819758892,-0.000015695863112341613],[0.000019046043234993704,-0.00006365469744196162],[0.000005905703346797964,-0.000047089306463021785],[0.000008118137884594034,-0.00000667058520775754],[0.0000015679941043345025,-0.000028246213332749903],[-0.00008357816841453314,0.00016693452198524028],[-0.00004711285146186128,0.000057169640058418736],[0.00003401004505576566,0.00002032650627370458],[0.000006488870440080063,0.000006357858637784375],[0.000014792015463171992,-0.00001841557059378829],[-0.00006474365363828838,0.000035879071219824255]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[0.00037233580951578915,0.18570588529109955,0.6025799512863159],"rotation":[-0.007494904100894928,0.793566882610321,0.009892433881759644,-0.6083564162254333],"used":true,"bodyHandle":1.15e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.02540433779358864,0.040212616324424744],[0.09882907569408417,0.031409211456775665],[-0.016992533579468727,-0.051718249917030334],[-0.12081696093082428,-0.06966478377580643],[-0.07107324153184891,-0.16997592151165009],[-0.015610206872224808,-0.049088094383478165],[0.05778829753398895,-0.03525962308049202],[0.6563910245895386,-0.05942274630069733],[-0.040251780301332474,0.2438403069972992],[0.20419491827487946,0.1530754119157791]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06175209954380989,0.1839911937713623,0.6354658007621765],"rotation":[-0.00018155633006244898,-0.9312154054641724,0.0025969608686864376,-0.36445990204811096],"used":true,"bodyHandle":1.156e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.2609020173549652,-0.24087515473365784],[-0.04897201061248779,0.06992411613464355],[0.23892059922218323,0.008480961434543133],[0.273708701133728,-0.07355839759111404],[0.06495194882154465,0.002544030547142029],[-0.11120019853115082,0.022578973323106766],[-0.06433365494012833,-0.017066283151507378],[-0.11141274869441986,-0.2556878626346588],[-0.027444614097476006,-0.0022204280830919743],[-0.06221619248390198,0.19653655588626862]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.000984031124971807,0.2530743479728699,0.6006509065628052],"rotation":[0.009867067448794842,0.7352688312530518,0.007187654264271259,-0.6776655912399292],"used":true,"bodyHandle":1.16e-321,"linearSpeed":0,"angularVelocityHistory":[[0.07835910469293594,-0.05650347098708153],[-0.08275109529495239,-0.032162707298994064],[0.07712779939174652,-0.030474523082375526],[0.11028911918401718,-0.032405443489551544],[0.016145048663020134,0.38750267028808594],[-0.01240987703204155,0.046359945088624954],[0.10877028107643127,0.2184235155582428],[-0.09647946059703827,0.14423128962516785],[-0.16047373414039612,0.018975047394633293],[-0.24564599990844727,-0.3276534974575043]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06106172874569893,0.26175013184547424,0.6337089538574219],"rotation":[0.003200216218829155,-0.51863694190979,0.005140676628798246,-0.8549731969833374],"used":true,"bodyHandle":1.166e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.2629326581954956,0.10342980176210403],[-0.23255981504917145,0.24425914883613586],[-0.23087939620018005,0.0767168402671814],[-0.1419251561164856,0.04737376421689987],[0.1366126537322998,-0.002411112654954195],[-0.23175154626369476,0.11047335714101791],[0.22671610116958618,-0.11430060863494873],[-0.039499394595623016,0.3076607286930084],[-0.16745880246162415,0.1819133162498474],[0.19786286354064941,-0.3415273427963257]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06164070963859558,0.18546105921268463,0.7055560946464539],"rotation":[0.0005165755865164101,-0.22170504927635193,0.0045739999040961266,-0.9751029014587402],"used":true,"bodyHandle":1.17e-321,"linearSpeed":0,"angularVelocityHistory":[[0.024012168869376183,0.09943442046642303],[-0.09981448948383331,0.12861469388008118],[0.01989860087633133,-0.005865836516022682],[-0.024240996688604355,0.007882287725806236],[0.06885324418544769,0.03650793805718422],[0.02613682486116886,-0.01699811965227127],[0.08134392648935318,0.10973995923995972],[0.08663448691368103,0.14373192191123962],[0.10763003677129745,0.19578443467617035],[-0.10246768593788147,0.05233701691031456]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.00006082557956688106,0.18578355014324188,0.7374898195266724],"rotation":[0.014918909408152103,0.06692814826965332,-0.004843852948397398,0.9976344704627991],"used":true,"bodyHandle":1.176e-321,"linearSpeed":0,"angularVelocityHistory":[[0.24522610008716583,-0.38848406076431274],[0.01690092869102955,0.10691777616739273],[0.20651866495609283,0.037238918244838715],[0.1272805631160736,-0.0865815132856369],[-0.0898694097995758,0.08008334040641785],[0.39756712317466736,-0.08295513689517975],[0.1653059720993042,-0.006246212869882584],[0.16478672623634338,-0.08673401176929474],[0.001513258321210742,-0.03411519527435303],[0.1051376461982727,0.05021325871348381]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.059649981558322906,0.18770557641983032,0.7042967677116394],"rotation":[-0.006192177999764681,-0.9577547907829285,-0.0026893948670476675,0.2875068783760071],"used":true,"bodyHandle":1.18e-321,"linearSpeed":0,"angularVelocityHistory":[[0.05794385075569153,-0.16200490295886993],[0.05200924724340439,0.16705501079559326],[-0.1110348254442215,0.09896962344646454],[-0.21657060086727142,0.15999376773834229],[0.025404058396816254,0.20596788823604584],[0.21332231163978577,0.19983230531215668],[0.21608802676200867,0.11641986668109894],[-0.007654082030057907,-0.11702000349760056],[0.20597241818904877,-0.15623202919960022],[-0.09646760672330856,0.03023906610906124]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05890389531850815,0.18649686872959137,0.6365581750869751],"rotation":[-0.001208050292916596,0.15682873129844666,0.0017288218950852752,0.9876235723495483],"used":true,"bodyHandle":1.186e-321,"linearSpeed":0,"angularVelocityHistory":[[0.017801636829972267,-0.15166543424129486],[-0.04626017436385155,-0.09248628467321396],[-0.1390724629163742,-0.21140074729919434],[-0.39064115285873413,-0.1383683979511261],[-0.025128941982984543,0.04689570516347885],[0.06070226430892944,0.03546744957566261],[-0.08105571568012238,-0.19516730308532715],[-0.3301546573638916,-0.005377579480409622],[-0.3402487635612488,0.011499392800033092],[-0.23863805830478668,0.09053636342287064]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.32469266653060913,0.17441099882125854,0.7237603068351746],"rotation":[0.0007310970104299486,-0.15660178661346436,-0.0007393241976387799,-0.9876612424850464],"used":true,"bodyHandle":1.19e-321,"linearSpeed":9.465973339194462e-11,"angularVelocityHistory":[[0.0004211849009152502,0.0003075965796597302],[-0.0002973863738588989,-0.000019681136109284125],[0.0011005993001163006,0.0007288034539669752],[-0.000025394445401616395,-0.00023411988513544202],[0.000288389710476622,0.00032993280910886824],[-0.0001506614644313231,0.00004204861033940688],[0.0005493734497576952,0.00019745448662433773],[-0.0005739057087339461,-0.0005032751942053437],[-0.0001416864397469908,0.00004140458986512385],[-0.000011457589607744012,-0.00011226886999793351],[0.0006726374849677086,0.0005842918180860579]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.00012101215543225408,0.18571864068508148,0.6729620695114136],"rotation":[0.006595658604055643,-0.5499263405799866,-0.007117969915270805,0.8351567983627319],"used":true,"bodyHandle":1.196e-321,"linearSpeed":0,"angularVelocityHistory":[[0.2038475126028061,0.19011490046977997],[0.16295552253723145,0.08657952398061752],[0.05354709550738335,0.14506393671035767],[0.007852613925933838,-0.02748195268213749],[0.13547657430171967,0.1346501111984253],[-0.02523180842399597,-0.027790816500782967],[-0.04790905490517616,0.10299228876829147],[-0.04713838919997215,-0.10836274176836014],[-0.000017747219317243434,-0.2203768938779831],[-0.03701987490057945,-0.2694784998893738]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0004591956967487931,0.18747329711914062,0.6028019785881042],"rotation":[0.0009939249139279127,-0.5790361762046814,-0.01266027893871069,0.8152028918266296],"used":true,"bodyHandle":1.2e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.13646835088729858,0.14802049100399017],[-0.02711351215839386,-0.03163934499025345],[0.06614181399345398,-0.11221747100353241],[-0.06774510443210602,-0.1261473447084427],[-0.06886975467205048,-0.13179096579551697],[-0.03366613760590553,-0.008140022866427898],[0.021263400092720985,-0.0765266939997673],[0.5280937552452087,-0.09779521077871323],[0.02934161387383938,0.274882435798645],[0.18004916608333588,0.08717354387044907]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06058358773589134,0.19077709317207336,0.6338881850242615],"rotation":[0.009206252172589302,0.9855953454971313,-0.01789606176316738,0.16791872680187225],"used":true,"bodyHandle":1.206e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.0022773973178118467,-0.1724744439125061],[-0.027581648901104927,-0.08560673892498016],[-0.10573722422122955,-0.2157450020313263],[-0.2131774127483368,-0.09031765162944794],[-0.17180562019348145,0.012871082872152328],[0.11268620938062668,-0.02849949337542057],[-0.4044661223888397,-0.07584917545318604],[-0.12453813850879669,-0.11517120152711868],[-0.5462086200714111,0.14623615145683289],[-0.24794797599315643,-0.013344569131731987]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.4254530370235443,0.1781524419784546,0.6489317417144775],"rotation":[-0.014215421862900257,0.02311181090772152,-0.05520887300372124,0.998106062412262],"used":true,"bodyHandle":1.21e-321,"linearSpeed":5.2366614050259134e-8,"angularVelocityHistory":[[-0.29910117387771606,0.04038410261273384],[-0.282642126083374,0.037067413330078125],[-0.23177620768547058,0.03282058984041214],[-0.22437235713005066,0.032362066209316254],[0.07855881750583649,-0.017152346670627594],[0.02926880121231079,-0.0038450623396784067],[0.050432417541742325,-0.010069671086966991],[0.06927981972694397,-0.015118035487830639],[0.07468864321708679,-0.01795475371181965],[0.0776616632938385,-0.02424815483391285],[0.08585900813341141,-0.027674956247210503]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05835965275764465,0.2605799734592438,0.6350752711296082],"rotation":[0.004531815182417631,-0.020989442244172096,0.029278984293341637,0.9993405938148499],"used":true,"bodyHandle":1.215e-321,"linearSpeed":0,"angularVelocityHistory":[[0.06902561336755753,0.13386209309101105],[0.24248172342777252,0.12573575973510742],[0.024187857285141945,0.3037196397781372],[-0.07927875965833664,0.07104010879993439],[-0.06684250384569168,0.09809429943561554],[0.1344950944185257,-0.101016104221344],[0.37827202677726746,-0.004222588613629341],[0.06044745445251465,0.21254189312458038],[-0.07586194574832916,-0.06720489263534546],[-0.03245878219604492,0.018274370580911636]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5357797145843506,0.18017837405204773,0.7176783680915833],"rotation":[0.968522846698761,0.003513369243592024,0.24890005588531494,-0.0001203773936140351],"used":true,"bodyHandle":1.22e-321,"linearSpeed":9.27591179616809e-12,"angularVelocityHistory":[[-0.00025772093795239925,0.0001423460489604622],[-0.0020830705761909485,-0.0008171798544935882],[0.0006547856028191745,0.001095126150175929],[-0.000256906176218763,-0.00004527525743469596],[0.000139200798003003,-0.000013416089132078923],[-0.0005069267936050892,5.042417683398526e-7],[0.00004637801612261683,0.00039319638744927943],[-0.00003611576175899245,0.00024702365044504404],[-0.00009016182593768463,0.0001991406752495095],[-0.00014152681978885084,0.00006349288742057979],[-0.00014342974463943392,-0.000010361577551520895]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[0.05903178080916405,0.18978814780712128,0.7033930420875549],"rotation":[-0.012612459249794483,-0.987907350063324,-0.005959405098110437,-0.15441682934761047],"used":true,"bodyHandle":1.225e-321,"linearSpeed":0,"angularVelocityHistory":[[0.03986618295311928,-0.1571032553911209],[0.1468784511089325,0.0706382691860199],[-0.05239986255764961,0.12124432623386383],[-0.09649354964494705,0.2724561393260956],[0.034373797476291656,0.2019444853067398],[0.2865354120731354,0.12319819629192352],[0.3333244025707245,0.11744845658540726],[-0.028174353763461113,-0.10716690123081207],[0.15801605582237244,-0.12552163004875183],[-0.08827479928731918,0.021044503897428513]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.46720126271247864,0.17372937500476837,0.6598483324050903],"rotation":[-0.2756422162055969,-0.005467570852488279,-0.9612115621566772,0.007985598407685757],"used":true,"bodyHandle":1.23e-321,"linearSpeed":6.697897943867998e-12,"angularVelocityHistory":[[0.00019579441868700087,0.0002983017184305936],[-0.002240146044641733,0.0007677566609345376],[0.00016222332487814128,0.0004282169684302062],[-0.0003975754079874605,0.00011979306873399764],[-0.00024999064044095576,0.0014955694787204266],[0.0002757611218839884,0.0015815314836800098],[0.0004937213379889727,-0.0006477228016592562],[0.000035287594073452055,-0.00027762935496866703],[0.00013093629968352616,-0.0004184709396213293],[0.00013163141557015479,-0.0003555893781594932],[-0.000023623035303899087,-0.00012164100917289034]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5194442868232727,0.17454545199871063,0.4327114224433899],"rotation":[0.20734097063541412,-0.005195727106183767,-0.9782516956329346,-0.002517635701224208],"used":true,"bodyHandle":1.235e-321,"linearSpeed":1.6362331886784141e-10,"angularVelocityHistory":[[-0.000019246879674028605,0.0002157679555239156],[-0.00002053793468803633,0.0002199874579673633],[-0.00001916243309096899,0.00022400474699679762],[-0.000020213659809087403,0.00022597452334593982],[-0.00002533400765969418,0.00022829778026789427],[-0.000041419523768126965,0.00019126778352074325],[-0.000050371520046610385,0.00017151034262496978],[0.0004667876346502453,-0.00048751087160781026],[-0.00015534252452198416,-0.00022134130995254964],[0.0003211559378542006,-0.00023143358703237027],[0.0002608537906780839,-0.00017510386533103883]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.47559109330177307,0.18370646238327026,0.5958611965179443],"rotation":[0.07705728709697723,-0.3744625449180603,0.00839561689645052,0.9239965081214905],"used":true,"bodyHandle":1.24e-321,"linearSpeed":2.1686386766365894e-8,"angularVelocityHistory":[[-0.002719115000218153,0.009405974298715591],[-0.0017175525426864624,0.006213176529854536],[-0.0023373730946332216,0.007823518477380276],[-0.0024255714379251003,0.008245890960097313],[-0.0035888159181922674,0.008985239081084728],[0.0004529142170213163,0.003119619330391288],[-0.0024480598513036966,0.007254268508404493],[-0.00302109750919044,0.009948213584721088],[-0.002654283307492733,0.00817562360316515],[-0.002560295630246401,0.007804661989212036],[-0.0024433303624391556,0.008018000982701778]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.1736520677804947,0.17437203228473663,0.800764799118042],"rotation":[0.37012779712677,0.0038448688574135303,-0.9289546608924866,-0.005815026815980673],"used":true,"bodyHandle":1.245e-321,"linearSpeed":3.20781317602677e-12,"angularVelocityHistory":[[0.00016620897804386914,0.0000032053969789558323],[0.00001264065667783143,-0.00016752450028434396],[-0.00005870192762813531,-0.0006607950199395418],[-5.385902568377787e-7,-0.00029562311829067767],[0.00013534807658288628,0.00002742377546383068],[0.000029551492843893357,0.00008718381286598742],[0.00009549761307425797,-0.0006039293948560953],[0.000008784534657024778,-0.0001673212245805189],[-0.000037109708500793204,0.000011994641681667417],[-0.00000847261162562063,0.00005112231883686036],[0.00014922127593308687,-0.0006275690975598991]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.38620540499687195,0.19525881111621857,0.4567393958568573],"rotation":[-0.8501431941986084,-0.023573370650410652,-0.5260146260261536,0.0030666061211377382],"used":true,"bodyHandle":1.25e-321,"linearSpeed":8.520078079820819e-8,"angularVelocityHistory":[[-0.011032676324248314,0.02577322907745838],[0.03168182447552681,-0.016447797417640686],[0.017816836014389992,-0.00624657329171896],[0.02005755342543125,0.04832499846816063],[-0.011175290681421757,0.04515700414776802],[-0.005680643022060394,-0.041298702359199524],[0.01101432554423809,0.027714338153600693],[-0.01745850034058094,0.013407004997134209],[-0.0013488115509971976,0.01875946670770645],[0.02174115553498268,0.009379520080983639],[-0.020213060081005096,-0.0041250488720834255]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3351115882396698,0.1746538281440735,0.8211268782615662],"rotation":[-0.9803727865219116,-0.0027654082514345646,-0.19713306427001953,0.00016609093290753663],"used":true,"bodyHandle":1.255e-321,"linearSpeed":5.095659306275036e-15,"angularVelocityHistory":[[0.000026839816200663336,-0.000028702057534246705],[0.0003604069061111659,-0.0002564059104770422],[-0.0012822601711377501,-0.0005563554586842656],[0.0006391232018359005,0.00008023854024941102],[-0.00008012878242880106,0.0000023582770154462196],[0.0001771565730450675,0.0002183506148867309],[-0.00008153459202731028,0.00006113332347013056],[0.000008385674846067559,0.000054278232710203156],[-0.000022743783119949512,0.00007856656156945974],[-0.000020928815501974896,0.00006897228013258427],[-0.00017312628915533423,0.00016079697525128722]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[0.30067190527915955,0.19039438664913177,0.6816216707229614],"rotation":[0.04996958002448082,-0.4915509521961212,0.040402695536613464,-0.8684747219085693],"used":true,"bodyHandle":1.26e-321,"linearSpeed":5.220050078121102e-10,"angularVelocityHistory":[[-0.0005053579225204885,-0.0015880175633355975],[-0.00004802709008799866,0.0017186527838930488],[0.0009115906432271004,-0.0015894502867013216],[0.00004102040475117974,-0.0012269164435565472],[-0.001199581427499652,-0.0013472393620759249],[-0.0014050976606085896,-0.000821843626908958],[-0.0005010183085687459,-0.00012467120541259646],[-0.00047733032261021435,0.00010875932639464736],[0.0003049580263905227,-0.000347283435985446],[-0.00001603491728019435,0.00003377294706297107],[-0.00007837727753212675,0.00045724742813035846]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[0.0011325280647724867,0.18901212513446808,0.7401145100593567],"rotation":[0.0047007594257593155,-0.25026842951774597,-0.00984214711934328,0.9681150317192078],"used":true,"bodyHandle":1.265e-321,"linearSpeed":0,"angularVelocityHistory":[[0.21838320791721344,-0.13996507227420807],[0.013265032321214676,0.11803356558084488],[0.15632523596286774,0.1764499843120575],[0.07813161611557007,-0.07746738940477371],[-0.08785184472799301,0.06144871935248375],[0.33864790201187134,-0.018054796382784843],[0.1607690304517746,-0.1976599246263504],[0.2435705065727234,-0.054036304354667664],[0.20941396057605743,-0.2009001523256302],[0.24588246643543243,0.06512472033500671]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.058695826679468155,0.18894752860069275,0.7040942907333374],"rotation":[-0.001976524479687214,-0.1893313080072403,-0.0029682519380003214,-0.9819067716598511],"used":true,"bodyHandle":1.27e-321,"linearSpeed":0,"angularVelocityHistory":[[0.03430682420730591,0.12276717275381088],[-0.05580679699778557,0.07172676175832748],[0.12319369614124298,-0.12020335346460342],[-0.05271464213728905,0.03764719516038895],[0.047472648322582245,0.01586972549557686],[0.037264108657836914,0.013675883412361145],[0.10410135984420776,0.11862384527921677],[0.08893238753080368,0.1491159200668335],[0.15231961011886597,0.15966711938381195],[-0.10013153403997421,0.0650797188282013]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05884639173746109,0.18936856091022491,0.6366267204284668],"rotation":[0.02053387649357319,-0.6220391392707825,-0.002849539741873741,-0.7827116847038269],"used":true,"bodyHandle":1.275e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.32446762919425964,-0.3208722174167633],[0.4158504903316498,0.005493442993611097],[0.16307485103607178,-0.016897043213248253],[0.15359219908714294,0.09513010829687119],[0.10853499919176102,0.027048658579587936],[-0.13581989705562592,0.06848005950450897],[-0.11716051399707794,0.057225633412599564],[-0.23734398186206818,-0.20188134908676147],[-0.02910456247627735,-0.022480767220258713],[-0.056541863828897476,0.16321632266044617]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0009803811553865671,0.18729591369628906,0.6675460338592529],"rotation":[-0.002282621804624796,0.10630262643098831,0.003537464886903763,-0.9943249225616455],"used":true,"bodyHandle":1.28e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.13560199737548828,0.054551344364881516],[0.2453586906194687,0.2611483037471771],[0.009497338905930519,0.08027732372283936],[-0.011373995803296566,0.12751856446266174],[0.13557837903499603,0.1170094907283783],[-0.0009880054276436567,-0.009137882851064205],[-0.15821342170238495,0.08974014967679977],[-0.044719383120536804,-0.1657753735780716],[0.018719587475061417,-0.20933420956134796],[-0.0866600051522255,-0.27365389466285706]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0006675879121758044,0.18906328082084656,0.5992442965507507],"rotation":[-0.018546873703598976,0.02507169358432293,-0.011015744879841805,-0.9994528889656067],"used":true,"bodyHandle":1.285e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.09319624304771423,0.044145308434963226],[0.029285259544849396,-0.013982749544084072],[-0.00006839677371317521,-0.15644586086273193],[-0.13797436654567719,-0.06546495109796524],[-0.07123404741287231,-0.1582382768392563],[-0.037945494055747986,0.003048049286007881],[0.03103790432214737,-0.04817599058151245],[0.5517973303794861,0.017551273107528687],[0.037761274725198746,0.3979739248752594],[0.18006321787834167,0.10622964054346085]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.480050653219223,0.17439815402030945,0.3994126617908478],"rotation":[0.002322901040315628,0.3721558153629303,-0.004336280282586813,-0.9281572103500366],"used":true,"bodyHandle":1.29e-321,"linearSpeed":1.0020243050943872e-11,"angularVelocityHistory":[[-0.0004617618687916547,0.00004019537300337106],[0.00004172188710072078,-0.000026636307666194625],[0.000002155310085072415,-0.000022329688363242894],[0.00010343807662138715,-0.0000036353669656818965],[-0.00012545626668725163,-0.000005983472419757163],[0.0004466068930923939,-0.0003741534019354731],[-0.0008631656528450549,0.00004900804560747929],[-0.00010387409565737471,0.00005104633601149544],[0.00021361245308071375,-0.00023105938453227282],[-0.00011410786100896075,-0.00008845023694448173],[0.00009671907173469663,-0.00023867552226874977]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.058390095829963684,0.18846957385540009,0.636177659034729],"rotation":[-0.006302326917648315,-0.9517498016357422,0.0031090874690562487,0.30679449439048767],"used":true,"bodyHandle":1.294e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.1996302455663681,-0.3989412188529968],[0.3042878210544586,0.29112184047698975],[0.22002992033958435,-0.09493234008550644],[0.22177256643772125,0.18421944975852966],[0.1078246533870697,0.03186287358403206],[-0.09453783929347992,0.01984872668981552],[-0.10638932138681412,0.10018748790025711],[-0.22476249933242798,-0.2240399569272995],[-0.04286268725991249,-0.10265626758337021],[-0.027774697169661522,0.19510415196418762]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.469940185546875,0.17433777451515198,0.5932026505470276],"rotation":[0.0010746147017925978,-0.3942330777645111,-0.0002461188123561442,0.919009804725647],"used":true,"bodyHandle":1.3e-321,"linearSpeed":1.1785315083342726e-10,"angularVelocityHistory":[[-0.00008442615217063576,-0.00023300288012251258],[-0.00014834734611213207,0.0001108324941014871],[-0.0001388638193020597,-0.00029196267132647336],[-0.0002753491571638733,-0.00022641544637735933],[-0.00013799642329104245,-0.00014404505782295018],[0.0002852711477316916,0.00025058595929294825],[-0.00034703899291343987,-0.0004937709891237319],[-0.00007729744538664818,-0.00030717774643562734],[0.0002103785373037681,-0.00017485338321421295],[-0.000023402631995850243,-0.00020697593572549522],[-0.0001454999583074823,-0.0002524761366657913]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06112917512655258,0.19244736433029175,0.7050336003303528],"rotation":[0.0004970593727193773,-0.9183975458145142,-0.003181408392265439,-0.39564570784568787],"used":true,"bodyHandle":1.304e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.06633838266134262,0.04299863427877426],[-0.03379390388727188,0.10818038880825043],[-0.035077400505542755,0.08660921454429626],[0.04682719334959984,0.24544446170330048],[-0.0023245520424097776,-0.08332066982984543],[-0.03349650651216507,-0.1599649041891098],[0.11126574873924255,0.09914741665124893],[0.08927014470100403,0.18752698600292206],[0.13580544292926788,0.04536519572138786],[-0.1475827395915985,-0.01710178703069687]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.50371915102005,0.18521147966384888,0.5581904053688049],"rotation":[0.006152041256427765,-0.9893388748168945,-0.0048508611507713795,-0.14542098343372345],"used":true,"bodyHandle":1.31e-321,"linearSpeed":0.000012459999900359055,"angularVelocityHistory":[[-0.00039855344220995903,0.008124841377139091],[0.0033152438700199127,-0.004768460988998413],[0.005117963068187237,-0.005132865160703659],[0.006708911154419184,-0.002090606838464737],[0.0049837310798466206,-0.003836376126855612],[0.0021145972423255444,-0.002813463332131505],[0.017114028334617615,0.0022569308057427406],[-0.003003061283379793,-0.008529073558747768],[-0.01347949355840683,0.014464950188994408],[0.00041184830479323864,-0.004843034781515598],[0.003521050326526165,0.0010766376508399844]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.00023601233260706067,0.1883937269449234,0.7370339035987854],"rotation":[0.008483960293233395,0.45234227180480957,0.0005547234322875738,0.8918038606643677],"used":true,"bodyHandle":1.314e-321,"linearSpeed":0,"angularVelocityHistory":[[0.16739216446876526,-0.22308135032653809],[-0.02903752215206623,0.09988300502300262],[0.09294897317886353,0.15475493669509888],[0.09955552965402603,-0.0836431086063385],[-0.0676858201622963,0.09519878029823303],[0.4543495774269104,-0.12221015244722366],[0.19947384297847748,-0.03554367274045944],[0.22237902879714966,-0.08683700859546661],[0.14984653890132904,-0.15359051525592804],[0.3174755573272705,0.011140193790197372]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3149694502353668,0.17475542426109314,0.83060622215271],"rotation":[-0.9929549098014832,0.0008077153470367193,0.11849035322666168,-0.00017644355830270797],"used":true,"bodyHandle":1.32e-321,"linearSpeed":0,"angularVelocityHistory":[[0.004198648501187563,0.0014742903877049685],[0.0010459477780386806,0.0006227260455489159],[0.0015580049948766828,0.0009398598922416568],[-0.00046503051999025047,-0.00019585975678637624],[0.0011648416984826326,0.001102197216823697],[-0.0004154664056841284,-0.00020970311015844345],[0.0007552106399089098,0.0006430794601328671],[-0.000709805462975055,-0.00030502877780236304],[0.0010054438607767224,0.0004657916724681854],[-0.0006948444643057883,-0.00034266512375324965],[0.0009354710928164423,0.0004616490623448044]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06008365750312805,0.1867315173149109,0.7048219442367554],"rotation":[0.013775003142654896,-0.8538958430290222,0.009580133482813835,-0.5201733112335205],"used":true,"bodyHandle":1.324e-321,"linearSpeed":0,"angularVelocityHistory":[[0.006207647267729044,-0.1264655888080597],[0.062143243849277496,0.11207360774278641],[-0.07486417889595032,0.09171880036592484],[-0.1799905002117157,0.1725745052099228],[0.020308030769228935,0.12413081526756287],[0.2885189950466156,0.28128746151924133],[0.4032334089279175,0.14186517894268036],[-0.11325878649950027,-0.00017928042507264763],[0.192084401845932,-0.11700928211212158],[-0.1189238578081131,0.14094577729701996]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.32461658120155334,0.1851239949464798,0.43680539727211],"rotation":[-0.0003814225783571601,-0.5250537991523743,0.007258419878780842,-0.8510379791259766],"used":true,"bodyHandle":1.33e-321,"linearSpeed":3.5036321368742264e-7,"angularVelocityHistory":[[-0.0032292911782860756,-0.003643197938799858],[-0.0017765695229172707,-0.00154105166438967],[-0.002056979341432452,0.0002275746810482815],[-0.003069749101996422,0.0010304569732397795],[-0.00021361223480198532,0.00475121708586812],[0.00011702645133482292,-0.0018702346133068204],[-0.004231441766023636,0.00022023676137905568],[-0.001019704039208591,0.0015743504045531154],[-0.002417807700112462,-0.004294344689697027],[-0.002639132784679532,-0.005773663986474276],[-0.003791047027334571,0.005497732665389776]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05858493968844414,0.18832464516162872,0.6365348696708679],"rotation":[0.004246409051120281,0.9873389005661011,-0.012070480734109879,-0.15810778737068176],"used":true,"bodyHandle":1.334e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.017629442736506462,-0.20715396106243134],[0.0054939002729952335,-0.03799097612500191],[-0.20851822197437286,-0.14892560243606567],[-0.38211268186569214,-0.17187626659870148],[-0.12408982217311859,0.14268362522125244],[0.16103732585906982,0.08489006757736206],[-0.11317163705825806,-0.11529001593589783],[-0.17226557433605194,0.039430614560842514],[-0.4099120497703552,0.0065056513994932175],[-0.20685985684394836,0.12692362070083618]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.00020454954938031733,0.19313645362854004,0.6729195713996887],"rotation":[0.0025707781314849854,-0.2769292891025543,-0.008042323403060436,0.9608531594276428],"used":true,"bodyHandle":1.34e-321,"linearSpeed":0,"angularVelocityHistory":[[0.3075331747531891,0.2660910487174988],[0.10391855239868164,0.016745803877711296],[0.05873124673962593,0.08837966620922089],[0.0535222627222538,0.1434309184551239],[0.19787412881851196,0.07767106592655182],[-0.15792371332645416,-0.11095461249351501],[-0.02843674086034298,0.05489574372768402],[-0.053002383559942245,-0.1137925237417221],[-0.04935034364461899,-0.2510855197906494],[-0.019551657140254974,-0.24346986413002014]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.40219080448150635,0.1800990253686905,0.5935456156730652],"rotation":[0.5654659271240234,0.0021067848429083824,-0.824755072593689,0.004784168675541878],"used":true,"bodyHandle":1.344e-321,"linearSpeed":1.1703228359613275e-9,"angularVelocityHistory":[[0.00035954086342826486,-0.0026513542979955673],[0.0008640361484140158,-0.0009758842061273754],[0.009487450122833252,-0.014289755374193192],[0.005140785127878189,-0.0074376328848302364],[-0.008739050477743149,0.0068627470172941685],[-0.0033461388666182756,-0.00028604050748981535],[0.005545342341065407,-0.0067675248719751835],[-0.0007445305236615241,-0.00268864375539124],[-0.001872727763839066,0.00012142670311732218],[-0.00036008231109008193,-0.004091775044798851],[0.00003222481973352842,0.001072795013897121]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[0.37730881571769714,0.18924754858016968,0.4630051851272583],"rotation":[0.02124212495982647,-0.6478785276412964,-0.012754615396261215,-0.7613405585289001],"used":true,"bodyHandle":1.35e-321,"linearSpeed":2.479355379076296e-7,"angularVelocityHistory":[[-0.0099559361115098,0.02475086785852909],[0.030414024367928505,-0.016264840960502625],[0.018728921189904213,-0.008250053972005844],[0.0185391865670681,0.04705341160297394],[-0.010943426750600338,0.04309613257646561],[-0.007115088403224945,-0.04245113208889961],[0.01034474652260542,0.02633005566895008],[-0.01483458373695612,0.013269484043121338],[-0.0005786275723949075,0.016938181594014168],[0.02073126845061779,0.009626548737287521],[-0.019235247746109962,-0.005440570414066315]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.4827542304992676,0.18010540306568146,0.39353063702583313],"rotation":[0.9183552265167236,0.00026321812765672803,-0.3957141935825348,0.005815792363137007],"used":true,"bodyHandle":1.354e-321,"linearSpeed":2.5102585808314777e-10,"angularVelocityHistory":[[-0.00006735802162438631,-0.00003222972372896038],[0.00002063850661215838,-0.00009473988029640168],[-0.00004827786688110791,-0.000024462338842567988],[0.00006634806777583435,-0.00003500438469927758],[0.00006135338480817154,-0.000054019736126065254],[0.0007021353230811656,-0.00027768107247538865],[-0.0012024284806102514,0.0007273118244484067],[-0.00006631964060943574,-0.000052730054449057207],[0.00009948400111170486,-0.00028568878769874573],[-0.00007598086085636169,-0.0000449522995040752],[0.00022803977481089532,-0.00028375955298542976]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.00018554023699834943,0.1915225386619568,0.6027524471282959],"rotation":[0.0021545044146478176,0.3382303714752197,-0.004152820445597172,0.9410516619682312],"used":true,"bodyHandle":1.36e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.15480750799179077,0.14968350529670715],[0.02531672827899456,0.036696214228868484],[-0.031001141294836998,-0.2282441407442093],[-0.09540919959545135,-0.08420702069997787],[-0.06362101435661316,-0.1765545904636383],[-0.03279386833310127,-0.03359369561076164],[0.028627390041947365,-0.06569965183734894],[0.6450816988945007,-0.11679627001285553],[-0.567132830619812,-0.015892092138528824],[0.22495950758457184,0.2298625260591507]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.273444265127182,0.1743207424879074,0.7695044875144958],"rotation":[-0.0022170788142830133,0.7304925322532654,-0.0022415677085518837,-0.6829134225845337],"used":true,"bodyHandle":1.364e-321,"linearSpeed":1.2384436882262346e-10,"angularVelocityHistory":[[-0.00011650091619230807,0.00013147493882570416],[-0.0001645763113629073,-0.0001895616005640477],[0.0012358195381239057,-0.00006953016418265179],[-0.00271774479188025,-0.0010594070190563798],[-0.0001541176316095516,0.00013666582526639104],[0.0002718132745940238,-0.00007042138167889789],[0.0013269693590700626,-0.00008529196929885074],[-0.0021533321123570204,-0.0007087359554134309],[-0.000022196305508259684,0.00017579052655491978],[-0.0001997605722863227,-0.00032524109701626003],[0.0015129606472328305,-0.00006689626025035977]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[-0.21371285617351532,0.17424699664115906,0.7566706538200378],"rotation":[-0.18357878923416138,-0.001110500656068325,0.9830018281936646,0.0021995825227349997],"used":true,"bodyHandle":1.37e-321,"linearSpeed":6.91542107699497e-11,"angularVelocityHistory":[[-0.00015282895765267313,0.00008061042899498716],[0.00005701235568267293,-0.00008293515566037968],[-0.00002850438977475278,0.0002574498939793557],[-0.0010940630454570055,-0.001040071016177535],[-0.00011057968367822468,0.0001451944699510932],[0.00015781180991325527,0.00007419307803502306],[0.0001248232292709872,0.00024850794579833746],[-0.0005602313322015107,-0.0008316761814057827],[0.0000015513261359956232,0.0002591907687019557],[0.000054218027798924595,-0.0001868510153144598],[0.00011429224832681939,0.0004214852524455637]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[0.06095115467905998,0.19022893905639648,0.6341834664344788],"rotation":[0.007431982085108757,0.9972350597381592,-0.01939195953309536,-0.07135093212127686],"used":true,"bodyHandle":1.374e-321,"linearSpeed":0,"angularVelocityHistory":[[0.023835277184844017,-0.15176977217197418],[-0.013937190175056458,-0.071565642952919],[-0.08765516430139542,-0.227220818400383],[-0.24005179107189178,-0.036568380892276764],[-0.2507598400115967,-0.050821609795093536],[0.08277212828397751,0.05669040232896805],[-0.4586988389492035,0.06988172233104706],[-0.21497738361358643,-0.10341062396764755],[-0.26146435737609863,0.03729982301592827],[-0.23739498853683472,-0.0778469517827034]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.22188299894332886,0.18563836812973022,0.4628223478794098],"rotation":[-0.7649994492530823,-0.0034728560131043196,-0.6440214514732361,-0.00029165312298573554],"used":true,"bodyHandle":1.38e-321,"linearSpeed":8.387478446301985e-9,"angularVelocityHistory":[[-0.000034707089071162045,0.0002473076747264713],[-0.0006063629989512265,-0.00005329035411705263],[-0.00004926313704345375,0.0008899659151211381],[0.0005739329499192536,0.0005941396811977029],[-0.0001998134539462626,0.00029024918330833316],[-0.0007775823469273746,-0.0001896025351015851],[-0.0010634420905262232,0.0004776027344632894],[0.00010092589218402281,0.000508393335621804],[-0.00015663144586142153,0.00015636393800377846],[0.000020711708202725276,0.00014631553494837135],[0.00020877976203337312,0.0008361593936569989]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3285166025161743,0.1737699955701828,0.611894965171814],"rotation":[0.003641323419287801,0.5091877579689026,0.02161250077188015,0.8603762984275818],"used":true,"bodyHandle":1.383e-321,"linearSpeed":4.232775826925997e-9,"angularVelocityHistory":[[-0.0020632734522223473,-0.001605807337909937],[-0.0006161876954138279,-0.0011572664370760322],[0.00013193272752687335,-0.0034158460330218077],[-0.00019187996804248542,-0.0018922174349427223],[0.0007043418008834124,-0.000005158767635293771],[0.0005190782248973846,-0.0014102855930104852],[0.0010974410688504577,-0.00035118666710332036],[-0.0005239937454462051,-0.00003694987390190363],[-0.00017000648949760944,-0.0009625197271816432],[0.0008241981850005686,-0.0008452918846160173],[-0.0015573010314255953,-0.0016373841790482402]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.04133690893650055,0.17470860481262207,0.8150362968444824],"rotation":[0.7422244548797607,-0.00001776442331902217,-0.6701494455337524,0.0016215713694691658],"used":true,"bodyHandle":1.39e-321,"linearSpeed":0,"angularVelocityHistory":[[0.0000018420987544232048,0.000001911389972519828],[0.0000018618660533320508,0.0000019549934222595766],[0.0000018621110484673409,0.0000019062724732066272],[0.0000018458717931935098,0.000001943442157426034],[0.0000018370593579675187,0.0000018796034737533773],[0.000001835460466281802,0.000001964871216841857],[0.0000019107540083496133,0.0000019328342659719056],[0.0000017895299606607296,0.000001914385393320117],[0.0000018166938389185816,0.0000019043251313632936],[0.0000017786593389246264,0.000001908640797410044]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.09588076919317245,0.17419682443141937,0.7880496978759766],"rotation":[0.8461975455284119,0.005356309469789267,-0.5328413248062134,0.0010611411416903138],"used":true,"bodyHandle":1.393e-321,"linearSpeed":1.7727890974428186e-16,"angularVelocityHistory":[[-6.775740075681824e-7,8.543954095330264e-7],[-7.956661534080922e-7,9.089375225812546e-7],[-6.183569212225848e-7,0.0000011001573057001224],[-7.030070605651417e-7,8.827819328871556e-7],[-8.508195037393307e-7,0.000001127260929933982],[-5.866217520633654e-7,8.476645803057181e-7],[-6.592251224901702e-7,8.141876719491847e-7],[-7.526110721300938e-7,8.598257181802182e-7],[-7.238517696350755e-7,8.797978239272197e-7],[-6.637252454311238e-7,9.675577530288137e-7],[-6.619967507504043e-7,8.471669161735917e-7]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5260356664657593,0.17442376911640167,0.6990277767181396],"rotation":[0.7027765512466431,0.001916210982017219,-0.7113993167877197,0.0035178810358047485],"used":true,"bodyHandle":1.4e-321,"linearSpeed":2.4590799381536403e-11,"angularVelocityHistory":[[0.0018744213739410043,-0.002356255194172263],[0.001155727542936802,-0.0008707023807801306],[0.0059474920853972435,-0.0011540065752342343],[-0.000014837890375929419,0.002670664107427001],[0.00047760261804796755,0.0006583750364370644],[0.0007277978584170341,0.0038055998738855124],[-0.011105669662356377,0.0037823044694960117],[0.005856939125806093,-0.00021044410823378712],[0.006626401096582413,0.00013161898823454976],[0.003824134822934866,0.010356193408370018],[0.007267777342349291,0.0027160875033587217]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.2693593204021454,0.17406700551509857,0.6109676361083984],"rotation":[-0.0038885721005499363,-0.9999699592590332,0.002275255508720875,0.006306314375251532],"used":true,"bodyHandle":1.403e-321,"linearSpeed":3.854301493951569e-10,"angularVelocityHistory":[[0.0006562983035109937,0.0011261384934186935],[-0.000040716542571317405,0.000194845357327722],[0.0000618574267718941,0.0014374111779034138],[0.0002308906987309456,0.0007812315016053617],[0.0014996073441579938,0.0022883424535393715],[0.00009250271978089586,0.0005607989151030779],[-0.00035565433790907264,0.0007396162836812437],[-0.00026360765332356095,0.0006444778991863132],[-0.0003672283492051065,0.00044949608854949474],[0.00007691916107432917,0.0007452311692759395],[0.00045843006228096783,0.000858600193168968]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.24370312690734863,0.18019412457942963,0.8479809165000916],"rotation":[-0.0004736088158097118,-0.6914443969726562,-0.006202096119523048,-0.7224028706550598],"used":true,"bodyHandle":1.41e-321,"linearSpeed":9.742337832833733e-11,"angularVelocityHistory":[[0.0013661239063367248,-0.0027950045187026262],[-0.0016851375112310052,0.001070094178430736],[0.0011208191281184554,0.0027479876298457384],[0.0005371802253648639,0.0019578293431550264],[0.00014020678645465523,0.0013858971651643515],[-0.0002950558846350759,0.0018419239204376936],[-0.0007698992849327624,0.0017079453682526946],[-0.0013487745309248567,0.0016868456732481718],[-0.0019442038610577583,0.0018650644924491644],[-0.0022668137680739164,0.0017572209471836686],[-0.0022305469028651714,0.0017415891634300351]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.24915388226509094,0.17457666993141174,0.8350664377212524],"rotation":[-0.722988486289978,0.0008786714752204716,-0.6908593773841858,0.0003302879922557622],"used":true,"bodyHandle":1.413e-321,"linearSpeed":3.563213386046669e-14,"angularVelocityHistory":[[-0.000985391321592033,0.00032758412999100983],[0.0006626858375966549,-0.00214240700006485],[-0.0001331484381807968,0.0007288734777830541],[0.0015807755989953876,0.0002810190781019628],[0.00042009493336081505,-0.000012152609997428954],[0.001874118926934898,-0.0007460457854904234],[0.0007227493915706873,-0.0004758925933856517],[0.00044782375334762037,-0.00032483440008945763],[0.0003954813291784376,-0.000245782925048843],[0.0003736527869477868,-0.00021669265697710216],[0.00010097137419506907,-0.00008591350342612714]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06209977716207504,0.19511781632900238,0.7045516967773438],"rotation":[0.0009563835337758064,-0.9840102195739746,-0.0006280998350121081,-0.17810828983783722],"used":true,"bodyHandle":1.42e-321,"linearSpeed":0,"angularVelocityHistory":[[0.08002486079931259,-0.17222484946250916],[0.10701993852853775,0.08630658686161041],[-0.06022011861205101,0.12270750850439072],[-0.10452708601951599,0.33341723680496216],[0.06034757196903229,0.10361193865537643],[0.18839195370674133,0.05858508124947548],[0.4039410948753357,0.14298783242702484],[0.028526918962597847,-0.20239290595054626],[0.11400944739580154,-0.11233208328485489],[-0.16906817257404327,0.08554065227508545]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.00024249462876468897,0.19232356548309326,0.7405357360839844],"rotation":[0.007445354014635086,0.6827087998390198,-0.0008035245700739324,0.7306521534919739],"used":true,"bodyHandle":1.423e-321,"linearSpeed":0,"angularVelocityHistory":[[0.16558699309825897,-0.16763420403003693],[0.07620566338300705,0.04685032367706299],[0.24471595883369446,-0.15261882543563843],[-0.00961132999509573,-0.10652938485145569],[-0.016720345243811607,0.11575063318014145],[0.42212414741516113,-0.08422695100307465],[0.2033882588148117,-0.0045081740245223045],[0.19290891289710999,-0.024633608758449554],[0.15928369760513306,-0.16469572484493256],[0.2539118826389313,0.10759902745485306]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4691094756126404,0.18128541111946106,0.6209046244621277],"rotation":[0.037624292075634,-0.6831052303314209,0.10705921798944473,0.7214498519897461],"used":true,"bodyHandle":1.43e-321,"linearSpeed":0.000004829083109201518,"angularVelocityHistory":[[-1.3251038789749146,-0.8947147727012634],[0.9304322004318237,0.7417975664138794],[2.2578377723693848,1.8442182540893555],[0.18249545991420746,0.34308964014053345],[-1.4532363414764404,-0.9422879815101624],[-2.3451333045959473,-1.4922288656234741],[-0.19772766530513763,0.06915809214115143],[1.332908034324646,0.9787050485610962],[2.1891422271728516,1.686623454093933],[-0.4478200376033783,-0.048031218349933624],[-1.6486406326293945,-0.9546808004379272]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05889661982655525,0.1868969202041626,0.7036809921264648],"rotation":[-0.002514892490580678,-0.40244144201278687,0.0013566776178777218,-0.9154412746429443],"used":true,"bodyHandle":1.433e-321,"linearSpeed":0,"angularVelocityHistory":[[0.06604745239019394,0.12142687290906906],[-0.2100498527288437,0.1428489238023758],[-0.005319944117218256,0.0000100440902315313],[0.0004428694082889706,0.05913317948579788],[-0.0004964811378158629,0.02902841381728649],[0.04607817158102989,-0.055798206478357315],[-0.05298183858394623,0.08214963972568512],[0.05739539489150047,0.11804551631212234],[0.16759821772575378,0.20828849077224731],[-0.08964505046606064,0.0429813377559185]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.09771890193223953,0.17956846952438354,0.796944797039032],"rotation":[0.970356285572052,0.005578294396400452,0.2413640171289444,-0.010997261852025986],"used":true,"bodyHandle":1.44e-321,"linearSpeed":6.914608845348744e-13,"angularVelocityHistory":[[-0.00002355944161536172,0.00000958376858761767],[-0.00002369923640799243,0.000009406689059687778],[-0.00002386129017395433,0.000009485933333053254],[-0.000023620854335604236,0.00000952269238041481],[-0.00002360037251492031,0.000009505339221504983],[-0.000023658543796045706,0.00000961699061008403],[-0.000023634673198102973,0.000009333617526863236],[-0.00002372050039411988,0.000009502897228230722],[-0.000023611952201463282,0.000009325820428784937],[-0.00002355305514356587,0.000009534813216305338],[-0.000023711474568699487,0.000009465303264732938]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.4723615050315857,0.1801450550556183,0.7228245735168457],"rotation":[-0.9377194046974182,-0.003704770002514124,-0.34737348556518555,-0.000506734533701092],"used":true,"bodyHandle":1.443e-321,"linearSpeed":3.466298106675345e-9,"angularVelocityHistory":[[-0.0016594663029536605,-0.0019193344051018357],[-0.001500699669122696,-0.0012430341448634863],[-0.00021811531041748822,-0.0003242427483201027],[-0.0011697537265717983,-0.0011398892384022474],[-0.00003762874621315859,0.00024984925403259695],[-0.0010270733619108796,-0.00040719093522056937],[-0.00101524090860039,-0.00013502099318429828],[-0.0007660636329092085,0.00020762241911143064],[-0.0006681595696136355,0.00019086959946434945],[-0.0005127019248902798,0.00005412749669631012],[-0.0005527068860828876,0.00007468986586900428]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.2943549156188965,0.18017475306987762,0.6765507459640503],"rotation":[-0.8574665784835815,0.0020358983892947435,-0.514533519744873,0.0014678571606054902],"used":true,"bodyHandle":1.45e-321,"linearSpeed":2.82436104198226e-9,"angularVelocityHistory":[[0.0003248917928431183,0.0007121749804355204],[-0.00039462855784222484,-0.00022642417752649635],[-0.0005479061510413885,-0.0007318049902096391],[-0.0001718079874990508,-0.00023512047482654452],[0.0005291047273203731,-0.0002305201778654009],[-0.0005576395778916776,-0.0006333217024803162],[-0.000045630855311173946,-0.00009917691932059824],[-0.00021685948013328016,0.00009342692646896467],[-0.00004386125874589197,0.000028289130568737164],[0.00009070036321645603,0.0000097739493867266],[0.00019756674009840935,0.00008297443855553865]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.45707109570503235,0.17992492020130157,0.5601009130477905],"rotation":[-0.001989885699003935,-0.36152419447898865,0.00010019906767411157,-0.9323605895042419],"used":true,"bodyHandle":1.453e-321,"linearSpeed":3.077719523472734e-8,"angularVelocityHistory":[[-0.0007779155275784433,-0.00042540428694337606],[-0.0006073395488783717,-0.00019364364561624825],[-0.0008401570958085358,-0.00021544928313232958],[-0.000787676137406379,-0.0003135076258331537],[-0.0008109610644169152,-0.00017637219571042806],[-0.0006686800625175238,-0.0003136560262646526],[-0.0005163055611774325,0.000009182273970509414],[-0.000725822348613292,-0.0002761554787866771],[-0.0003506417269818485,-0.000039784707041690126],[-0.0005142164882272482,-0.0002463487326167524],[-0.00043398665729910135,-0.00025245631695725024]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[-0.06038153916597366,0.1913292109966278,0.6353166699409485],"rotation":[0.009454676881432533,-0.9892094731330872,0.011311059817671776,0.14576448500156403],"used":true,"bodyHandle":1.457e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.14698053896427155,-0.3170929253101349],[0.5425732135772705,0.2652173936367035],[0.14850398898124695,-0.0927838534116745],[0.08088274300098419,0.21040979027748108],[0.1639198511838913,0.03765726834535599],[-0.10149078816175461,-0.06231991946697235],[-0.12244348227977753,0.08985824137926102],[-0.21949458122253418,-0.32225775718688965],[-0.10466979444026947,-0.04700730741024017],[-0.0276598259806633,0.2088059037923813]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0012586024822667241,0.1890968680381775,0.6708326935768127],"rotation":[-0.0027705838438123465,-0.6852807998657227,-0.0007682015420868993,-0.7282732725143433],"used":true,"bodyHandle":1.46e-321,"linearSpeed":0,"angularVelocityHistory":[[0.19501328468322754,0.1486770063638687],[0.0936165302991867,0.031012779101729393],[0.006156779360026121,0.07363181561231613],[0.06641186028718948,0.1685830056667328],[0.18054337799549103,0.1124454140663147],[0.023442326113581657,-0.06693799793720245],[-0.057565510272979736,0.06246764212846756],[-0.07990472763776779,-0.12701226770877838],[0.0029393560253083706,-0.21142511069774628],[-0.0688614696264267,-0.30994439125061035]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.4015783369541168,0.17441542446613312,0.5934289693832397],"rotation":[-0.0014140652492642403,0.14195208251476288,0.0030911399517208338,0.989867627620697],"used":true,"bodyHandle":1.467e-321,"linearSpeed":2.4505410852845288e-11,"angularVelocityHistory":[[0.0006195242167450488,-0.003046794096007943],[-0.0007613301859237254,0.000721074000466615],[-0.00039605426718480885,-0.0016594299813732505],[-0.00020897568902000785,-0.0014929173048585653],[0.002911399584263563,-0.003267688909545541],[-0.0002592560194898397,-0.0011982807191088796],[-0.0003897302958648652,0.00019812359823845327],[-0.001511041889898479,0.0008427047287113965],[-0.0002347218687646091,0.0009865546599030495],[-0.0003001528384629637,-0.002114522736519575],[-0.00021564337657764554,0.0005268767126835883]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.14117759466171265,0.1742025464773178,0.7500764727592468],"rotation":[-0.949847400188446,0.00149108178447932,-0.31269586086273193,0.002994109643623233],"used":true,"bodyHandle":1.47e-321,"linearSpeed":6.232346978373239e-12,"angularVelocityHistory":[[0.00016812514513731003,0.00007376324356300756],[-0.000034978824260178953,-0.00014726621157024056],[-0.00007177669613156468,-0.00000784473741077818],[0.00012286518176551908,-0.00032377985189668834],[0.00007303539314307272,0.00021543084585573524],[-0.00001237349624716444,-0.0001452602300560102],[-0.000040198567148763686,0.000015463618183275685],[0.00016079601482488215,-0.0003521597245708108],[-0.00003031339838344138,0.00035716791171580553],[-0.000016264324585790746,-0.00023510411847382784],[-0.00003563874997780658,0.00009699595830170438]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.48825401067733765,0.1899717152118683,0.7060529589653015],"rotation":[0.94255530834198,-0.00797983631491661,0.32640960812568665,-0.0705869048833847],"used":true,"bodyHandle":1.477e-321,"linearSpeed":8.863011739281242e-8,"angularVelocityHistory":[[-0.0027243595104664564,-0.0021943822503089905],[-0.0034732865169644356,0.002502352697774768],[-0.0009937019785866141,-0.0026222008746117353],[-0.0011597825214266777,-0.0006423243321478367],[0.0011036753421649337,0.0029134030919522047],[-0.0031233944464474916,-0.003351334249600768],[-0.0007160857785493135,0.0008887091535143554],[-0.000404961290769279,-0.000011599910067161545],[-0.0005321752396412194,-0.00019711042114067823],[-0.00039481103885918856,-0.00014382506196852773],[-0.0004371230897959322,-0.00025992075097747147]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.00005973113002255559,0.19273564219474792,0.6013709902763367],"rotation":[-0.0010650213807821274,-0.652949333190918,0.006225827615708113,-0.757375180721283],"used":true,"bodyHandle":1.48e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.1685541719198227,0.1631641387939453],[0.03733237832784653,0.024997377768158913],[-0.05564549192786217,0.11896722763776779],[-0.12176716327667236,-0.1122450977563858],[-0.04206643998622894,-0.20895983278751373],[-0.06142785772681236,-0.01892663724720478],[0.005803409498184919,-0.07875417917966843],[0.4897386431694031,0.013326390646398067],[-0.38806161284446716,0.25153133273124695],[0.3257705271244049,0.1765575408935547]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5037843585014343,0.1819928139448166,0.6530100107192993],"rotation":[-0.9970270395278931,-0.03475498408079147,-0.06594832241535187,0.019493695348501205],"used":true,"bodyHandle":1.487e-321,"linearSpeed":1.4461359727514327e-8,"angularVelocityHistory":[[-0.006563189439475536,-0.004780771676450968],[-0.0038337446749210358,-0.00041661650175228715],[-0.001964511116966605,-0.002923908643424511],[-0.004503004252910614,-0.0030894079245626926],[0.0026833745650947094,0.004793060012161732],[-0.00032046297565102577,-0.003229066962376237],[0.0007904781377874315,-0.000708673382177949],[0.0009708840516395867,-0.000029844546588719822],[0.00021655636373907328,-0.00044634914956986904],[0.00011507947056088597,-0.00046567924437113106],[0.0001783395273378119,-0.000386979227187112]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5014719367027283,0.1780182123184204,0.7655778527259827],"rotation":[0.014685152098536491,-0.9406431913375854,0.05450097844004631,-0.33467045426368713],"used":true,"bodyHandle":1.49e-321,"linearSpeed":4.09513371289947e-8,"angularVelocityHistory":[[-0.017457090318202972,-0.07756782323122025],[-0.00085159094305709,-0.030747419223189354],[-0.008645969443023205,-0.04972279071807861],[-0.01220951322466135,-0.05014028027653694],[-0.00462299445644021,-0.04217825084924698],[-0.02092338353395462,-0.07692007720470428],[0.0003193134907633066,-0.024608589708805084],[0.016823841258883476,0.23141098022460938],[0.007673698011785746,0.2000933438539505],[0.005518807098269463,0.14791317284107208],[0.013187396340072155,0.12607543170452118]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5254296660423279,0.18126313388347626,0.7289113998413086],"rotation":[-0.6809542179107666,0.014164745807647705,0.731859028339386,-0.021977169439196587],"used":true,"bodyHandle":1.497e-321,"linearSpeed":3.0124905520001586e-8,"angularVelocityHistory":[[0.023670906201004982,0.02464384399354458],[0.003406452713534236,0.019521821290254593],[0.0020503613632172346,0.02752283401787281],[0.0062129623256623745,0.020880067721009254],[0.008736294694244862,0.01811441220343113],[0.01388239674270153,0.02313528023660183],[0.008643331937491894,0.02007739059627056],[-0.09177367389202118,-0.14498893916606903],[-0.08162124454975128,-0.10158654302358627],[-0.07054360210895538,-0.12094075977802277],[-0.035400472581386566,-0.0458105206489563]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.061934083700180054,0.19235524535179138,0.6351139545440674],"rotation":[0.01279457751661539,-0.9716385006904602,-0.0026378044858574867,0.23611004650592804],"used":true,"bodyHandle":1.5e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.052880533039569855,-0.2759317457675934],[0.5069375038146973,0.268873929977417],[0.2724684774875641,0.07080524414777756],[0.030422363430261612,0.20930100977420807],[0.10532299429178238,0.057102251797914505],[-0.11646530777215958,-0.08709540218114853],[0.04194139316678047,0.1396758109331131],[-0.3114966154098511,-0.20516258478164673],[-0.07323439419269562,-0.06427639722824097],[-0.0691908597946167,0.19272127747535706]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.059777673333883286,0.1901274472475052,0.7045038938522339],"rotation":[-0.005357697606086731,0.10201151669025421,-0.00225811917334795,-0.9947661757469177],"used":true,"bodyHandle":1.507e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.019702479243278503,0.12638269364833832],[-0.07317599654197693,0.13007520139217377],[0.016894500702619553,0.012492237612605095],[-0.11045093834400177,0.007891925051808357],[0.05911631137132645,-0.021060410887002945],[0.32076406478881836,-0.026742395013570786],[0.20123924314975739,0.10342095047235489],[0.09637995809316635,0.16203290224075317],[0.141987606883049,0.11261815577745438],[-0.13975799083709717,0.0517643578350544]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.00022573009482584894,0.19194746017456055,0.7370081543922424],"rotation":[0.008941348642110825,0.5531613230705261,0.006903927773237228,0.8329975008964539],"used":true,"bodyHandle":1.51e-321,"linearSpeed":0,"angularVelocityHistory":[[0.20036830008029938,-0.19914250075817108],[-0.012112426571547985,0.07937249541282654],[0.232828751206398,0.10878412425518036],[0.016236459836363792,-0.13448059558868408],[-0.05136794596910477,0.1796073615550995],[0.37841102480888367,-0.06527026742696762],[0.18098849058151245,-0.041788071393966675],[0.2303505688905716,-0.06121787056326866],[0.20180606842041016,-0.07710158079862595],[0.16594348847866058,0.0788276195526123]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0013222132110968232,0.2631332576274872,0.6002386212348938],"rotation":[-0.003882978344336152,-0.2025444507598877,-0.01113608293235302,0.9792020320892334],"used":true,"bodyHandle":1.517e-321,"linearSpeed":0,"angularVelocityHistory":[[0.07589616626501083,-0.10864701122045517],[-0.08776073902845383,-0.03738471493124962],[-0.02497689425945282,-0.04744254797697067],[-0.03394866734743118,0.02916414476931095],[0.11333880573511124,0.15438957512378693],[-0.07896671444177628,0.105954609811306],[0.11741434037685394,0.09105000644922256],[-0.023663362488150597,0.2244797945022583],[-0.03570891171693802,-0.03303316608071327],[-0.2628556787967682,-0.25556737184524536]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3958171606063843,0.17955052852630615,0.5328248739242554],"rotation":[0.0024896294344216585,0.5781975388526917,0.002806001342833042,-0.8158881664276123],"used":true,"bodyHandle":1.52e-321,"linearSpeed":4.487747282685226e-8,"angularVelocityHistory":[[-0.0004752588283736259,0.0004771706589963287],[-0.00029100471874698997,-0.000019678438547998667],[-0.0006252984749153256,-0.00017099123215302825],[-0.00048119621351361275,-0.00022379224537871778],[-0.0002936098608188331,-0.00009248679998563603],[-0.0009072791435755789,0.00002882820444938261],[-0.0006976470467634499,-0.00044495760812424123],[0.00040935107972472906,0.00009373682405566797],[-0.00039814048795960844,0.00028872271650470793],[-0.00018851865024771541,0.00009299684461439028],[0.00015219280612654984,0.00010352275421610102]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[-0.5148698091506958,0.18968424201011658,0.5046558976173401],"rotation":[-0.11208295822143555,0.031031325459480286,0.9931840896606445,-0.007739092689007521],"used":true,"bodyHandle":1.527e-321,"linearSpeed":1.0139378836511864e-9,"angularVelocityHistory":[[-0.000057593144447309896,0.00013753745588473976],[-0.0002605890913400799,-0.0001708446507109329],[-0.00010147831926587969,-0.0000508839548274409],[-0.00010846069199033082,0.0000021660939637513366],[-0.000057097990065813065,-0.00005378962669055909],[0.00013211842451710254,-0.00021801052207592875],[0.0011050428729504347,0.00013178317749407142],[-0.00029442732920870185,-0.0006544310599565506],[-0.0005266121006570756,0.00014176730473991483],[0.0002695592411328107,0.000036812718462897465],[0.000047395766159752384,0.00009273129398934543]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.3955424129962921,0.17413970828056335,0.53019779920578],"rotation":[0.8702077865600586,-0.001747734728269279,0.49266982078552246,0.0034424264449626207],"used":true,"bodyHandle":1.53e-321,"linearSpeed":1.479442995211435e-9,"angularVelocityHistory":[[-0.0006036440609022975,0.00010870898404391482],[0.00016208249144256115,-0.00008132030779961497],[0.0006342739798128605,0.00019992963643744588],[0.0002544409071560949,-0.0001279201969737187],[0.0001179125247290358,0.00010241044947179034],[-0.0005180850275792181,-0.000010075133104692213],[-0.00011355912283761427,0.00046412309166043997],[0.000008025395800359547,0.00019412934489082545],[-0.0001313301909249276,0.00016101526853162795],[0.00025411794194951653,0.00011089505278505385],[0.00019278383115306497,-0.00011191573139512911]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.058211397379636765,0.19069668650627136,0.7036498188972473],"rotation":[-0.00736627820879221,-0.997346818447113,-0.008167289197444916,-0.07196115702390671],"used":true,"bodyHandle":1.537e-321,"linearSpeed":0,"angularVelocityHistory":[[0.06707687675952911,-0.1717374324798584],[0.08703798055648804,0.13693027198314667],[-0.09821085631847382,0.12281922250986099],[-0.13066580891609192,0.27357926964759827],[-0.019391372799873352,0.283405065536499],[0.419628381729126,-0.029290582984685898],[0.3409802317619324,0.11741840094327927],[-0.016697971150279045,-0.15058274567127228],[0.1793961226940155,-0.1340630054473877],[-0.045291267335414886,0.028206869959831238]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.4514795243740082,0.18183280527591705,0.5132739543914795],"rotation":[-0.9486161470413208,0.0004886453389190137,-0.29419177770614624,-0.11652578413486481],"used":true,"bodyHandle":1.54e-321,"linearSpeed":5.733991958870404e-8,"angularVelocityHistory":[[0.0005826467531733215,0.00004811512553715147],[0.0005297758616507053,-0.00023093950585462153],[-0.000011799292224168312,0.00003892927634296939],[0.00005573930684477091,-0.000002868250930987415],[0.00029503763653337955,-0.00012270531442482024],[0.0038945144042372704,-0.0004213018692098558],[-0.001368836616165936,0.00027110904920846224],[-0.0009067364153452218,0.00016953813610598445],[0.0005201308522373438,-0.00016514759045094252],[-0.00041242106817662716,-0.0001721712906146422],[0.00045701704220846295,-0.000020157938706688583]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.22083832323551178,0.179828479886055,0.7935965061187744],"rotation":[0.00411255331709981,-0.9649548530578613,-0.00018516258569434285,-0.26238352060317993],"used":true,"bodyHandle":1.546e-321,"linearSpeed":6.617022199710229e-10,"angularVelocityHistory":[[-0.002310267649590969,-0.006153896916657686],[0.004906897898763418,-0.0006213361048139632],[0.0017176332185044885,0.0004691728681791574],[0.003243648214265704,0.0009693374158814549],[0.001119226566515863,0.000515434832777828],[0.0031848896760493517,0.0007519338396377861],[0.0018523054895922542,-0.0003156091261189431],[0.0018834214424714446,-0.0003323831770103425],[0.002250820863991976,-0.0010968005517497659],[0.002673431998118758,-0.001799900783225894],[0.0027270617429167032,-0.002420472213998437]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.33835843205451965,0.18021667003631592,0.5515834093093872],"rotation":[-0.0008011655882000923,0.7218173742294312,-0.002007365459576249,-0.6920801997184753],"used":true,"bodyHandle":1.55e-321,"linearSpeed":8.679568609596696e-8,"angularVelocityHistory":[[-0.000522264395840466,0.00043450653902255],[-0.001878477050922811,0.00008763785444898531],[0.00046702983672730625,0.0008946883608587086],[-0.000588936498388648,0.0018115626880899072],[0.005866963416337967,-0.00027825782308354974],[0.0000035268776628072374,-0.00025336872204206884],[-0.004659146070480347,0.000051319217163836583],[-0.0017278718296438456,-0.0007533227326348424],[-0.0013342255260795355,-0.0011833594180643559],[0.0007018169853836298,-0.000861678272485733],[-0.0019575010519474745,-0.0001428740652045235]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05885206162929535,0.1928175538778305,0.6358063817024231],"rotation":[-0.009048095904290676,0.6776424050331116,-0.008744857273995876,0.7352838516235352],"used":true,"bodyHandle":1.556e-321,"linearSpeed":0,"angularVelocityHistory":[[0.03521540015935898,-0.172604039311409],[0.01855667121708393,-0.01449564378708601],[-0.20173035562038422,-0.20343002676963806],[-0.2780984044075012,-0.14747688174247742],[-0.26084333658218384,-0.10942491888999939],[0.0639720931649208,0.009745725430548191],[-0.37100231647491455,-0.02040601521730423],[-0.14720402657985687,-0.018588289618492126],[-0.27903085947036743,0.08975322544574738],[-0.2376306653022766,-0.08731021732091904]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.2759712040424347,0.18439629673957825,0.5936459898948669],"rotation":[0.17382964491844177,-0.010367077775299549,-0.9847108721733093,-0.004504166077822447],"used":true,"bodyHandle":1.56e-321,"linearSpeed":2.7640089647168267e-7,"angularVelocityHistory":[[-0.0004091363225597888,-0.005053843837231398],[0.0008778616902418435,0.001982850721105933],[0.0012191373389214277,-0.0008362954831682146],[-0.0012212536530569196,-0.0008092952775768936],[0.00043113023275509477,-0.0018648126861080527],[0.00081224599853158,0.0021848788019269705],[0.0014312664279714227,-0.0001238443364854902],[0.0012171424459666014,0.0006712554604746401],[0.001519319019280374,0.00005518724719877355],[0.0008605560869909823,0.0003930942330043763],[0.00010118921636603773,-0.0023416371550410986]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5528386831283569,0.1778237372636795,0.7526636123657227],"rotation":[0.9402598738670349,0.04010329395532608,0.33597156405448914,0.03776540607213974],"used":true,"bodyHandle":1.566e-321,"linearSpeed":7.829754403130393e-10,"angularVelocityHistory":[[0.012041820213198662,0.003186226589605212],[-0.0018474266398698092,0.00045402030809782445],[0.00215937034226954,0.0006373058422468603],[0.00216597318649292,0.0014937396626919508],[0.0033663930371403694,-0.0003995687875431031],[0.0074437945149838924,0.0055962176993489265],[0.00011395543697290123,0.000186752004083246],[0.00046934865531511605,-0.02466963417828083],[-0.0012327560689300299,-0.013835461810231209],[-0.0018891970394179225,-0.01823400892317295],[-0.00029259338043630123,-0.005328062921762466]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.2653616666793823,0.17997634410858154,0.7294892072677612],"rotation":[-0.02498183585703373,-0.003079883521422744,-0.999676525592804,0.0036332050804048777],"used":true,"bodyHandle":1.57e-321,"linearSpeed":1.4431439843257462e-9,"angularVelocityHistory":[[0.0003625086392275989,-0.0001925480319187045],[0.00010308925266144797,0.00013365967606659979],[0.00006158266478450969,-0.00010639114043442532],[-0.0008992282091639936,0.0003484669723547995],[-0.000525381532497704,0.000059821501054102555],[0.00017781087080948055,0.0002089745394187048],[0.0003030255902558565,-0.00007270659261848778],[-0.00043854452087543905,0.00032484583789482713],[-0.00011010914022335783,0.00029899351648055017],[-0.0001544801634736359,-0.000002041345169345732],[0.00010292058141203597,-0.00043721828842535615]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.23325350880622864,0.17447145283222198,0.8210891485214233],"rotation":[0.9823330044746399,-0.0004325801273807883,-0.1871371567249298,-0.0011530437041074038],"used":true,"bodyHandle":1.576e-321,"linearSpeed":3.113343237630127e-13,"angularVelocityHistory":[[-0.00000799270401330432,0.000033834174246294424],[-0.00004321078085922636,-0.00004872079080087133],[0.0003461004816927016,-0.000025424029445275664],[-0.0008056935621425509,0.000015330550013459288],[-0.000010208301318925805,0.00004128036380279809],[0.00007437983731506392,-0.00005838784636580385],[0.00032096978975459933,-0.00004121350502828136],[-0.0006331547629088163,0.000014393716810445767],[0.000014796373761782888,0.00006179659249028191],[-0.000006357743586704601,-0.000055786396842449903],[0.0004423779610078782,-0.000011514019206515513]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[0.00003625790122896433,0.19453342258930206,0.6666519045829773],"rotation":[-0.00220950273796916,0.12734460830688477,-0.00868792925029993,0.9918180108070374],"used":true,"bodyHandle":1.58e-321,"linearSpeed":0,"angularVelocityHistory":[[0.43305376172065735,0.10066299140453339],[0.1424819976091385,-0.0013871650444343686],[0.03821069374680519,-0.009359699673950672],[0.06280004233121872,0.12557952105998993],[0.13659898936748505,0.1147184893488884],[0.02297818660736084,-0.05274233594536781],[-0.21813923120498657,-0.04395931959152222],[-0.05845321714878082,-0.1422969400882721],[-0.08146506547927856,-0.20352977514266968],[-0.32116302847862244,-0.42852815985679626]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.33279553055763245,0.17922130227088928,0.7054546475410461],"rotation":[-0.551289975643158,-0.06830409914255142,0.8306198716163635,0.03852810338139534],"used":true,"bodyHandle":1.586e-321,"linearSpeed":1.5385203494912623e-10,"angularVelocityHistory":[[-0.003624705830588937,-0.0038242400623857975],[-0.0003188095288351178,0.0009851343929767609],[0.00023209958453662694,-0.0018562296172603965],[0.0035544419661164284,-0.000057938781537814066],[-0.000017048818335752003,0.0010986514389514923],[-0.00018842596909962595,-0.00012698037608060986],[-0.00006309618038358167,0.0021838536486029625],[0.0006275674095377326,0.0033695027232170105],[0.00004185295620118268,0.0023699430748820305],[-0.00019509418052621186,0.002552606165409088],[-0.00010383091284893453,0.0004031960852444172]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.00005895912181586027,0.19451715052127838,0.6013584733009338],"rotation":[-0.0016918000765144825,0.7975708842277527,-0.00492664473131299,0.6032028198242188],"used":true,"bodyHandle":1.59e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.16971896588802338,0.17268291115760803],[-0.056570034474134445,-0.05578175187110901],[-0.03984057530760765,0.14908607304096222],[-0.046675704419612885,-0.0477151945233345],[-0.0363641157746315,-0.26021385192871094],[-0.07523184269666672,-0.04213682562112808],[-0.05505235493183136,-0.16976946592330933],[0.41549912095069885,-0.05480222776532173],[-0.3638302981853485,0.09973278641700745],[0.3516043424606323,0.2151370644569397]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.060921184718608856,0.19556470215320587,0.6360679864883423],"rotation":[0.014244573190808296,0.9902309775352478,-0.009482476860284805,0.13838225603103638],"used":true,"bodyHandle":1.596e-321,"linearSpeed":0,"angularVelocityHistory":[[0.0047088684514164925,-0.16458575427532196],[-0.0016201597172766924,-0.06330852955579758],[-0.09273459017276764,-0.21737338602542877],[-0.18956495821475983,-0.10104165971279144],[-0.24584369361400604,-0.1789974719285965],[-0.0003782645217142999,0.061229635030031204],[-0.4381560981273651,-0.13009579479694366],[-0.21634048223495483,-0.0253179669380188],[-0.19435882568359375,0.10534178465604782],[-0.13087159395217896,-0.18660153448581696]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5125598311424255,0.18519611656665802,0.530061662197113],"rotation":[-0.0124183539301157,0.9443941116333008,-0.015503628179430962,0.32821500301361084],"used":true,"bodyHandle":1.6e-321,"linearSpeed":6.866711095011779e-10,"angularVelocityHistory":[[-0.00013024796498939395,0.00006140750338090584],[-0.00011308295506751165,-0.00007066137186484411],[-0.00012493728718254715,0.000011027941582142375],[-0.000056656259403098375,0.00004224680378683843],[-0.0000203115887416061,-0.0000071153272074298],[0.00021017136168666184,-0.00008797209738986567],[0.0005507329478859901,0.0000789571859058924],[-0.00010090537398355082,-0.00036773941246792674],[-0.00020360361668281257,0.0000982729543466121],[0.00011946620361413807,-0.000035115834180032834],[0.000057023662520805374,0.0000700969249010086]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[0.05985577404499054,0.19390614330768585,0.7039803266525269],"rotation":[0.0008002418326213956,-0.9893285632133484,0.0023834065068513155,0.1456797569990158],"used":true,"bodyHandle":1.606e-321,"linearSpeed":0,"angularVelocityHistory":[[0.03582066670060158,-0.17889419198036194],[0.08678341656923294,0.08654983341693878],[0.004152256064116955,0.07620161026716232],[0.01254958938807249,0.4181963801383972],[0.05080568790435791,0.1409837305545807],[0.1835896521806717,0.02154938131570816],[0.37281545996665955,0.12015977501869202],[0.0049244072288274765,-0.13827070593833923],[0.09987269341945648,-0.072459876537323],[-0.10922723263502121,0.12981148064136505]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3409743905067444,0.17440614104270935,0.5542017221450806],"rotation":[-0.7240357995033264,-0.0005656512803398073,0.6897578239440918,-0.0024246738757938147],"used":true,"bodyHandle":1.61e-321,"linearSpeed":7.899014506425795e-10,"angularVelocityHistory":[[-0.00043525893124751747,0.00027659517945721745],[-0.0003920100280083716,-0.00002885309913835954],[-0.00047421225463040173,-0.0010399395832791924],[0.00030902467551641166,-0.0005482372944243252],[-0.0006558080203831196,-0.0004525710828602314],[-0.00005345154568203725,0.000104885759355966],[-0.00003472633397905156,-0.00033633934799581766],[-0.0005586070474237204,-0.0004855210427194834],[0.0004065500688739121,-0.0005173095851205289],[-0.0002379903889959678,-0.00024572265101596713],[-0.000013925516213930678,0.000006630040843447205]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[0.0010542032541707158,0.19530142843723297,0.7398352026939392],"rotation":[0.01180077251046896,0.20236751437187195,-0.002387474523857236,0.9792356491088867],"used":true,"bodyHandle":1.616e-321,"linearSpeed":0,"angularVelocityHistory":[[0.20125830173492432,-0.1290387362241745],[0.07465173304080963,0.07471604645252228],[0.22710487246513367,-0.048045601695775986],[0.013567117042839527,-0.10483253747224808],[0.03240770474076271,0.038061514496803284],[0.3081650733947754,0.013506356626749039],[0.23396874964237213,0.13044719398021698],[0.21216879785060883,-0.06550563871860504],[0.26901382207870483,-0.18696589767932892],[0.3506215512752533,0.26080819964408875]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5133990049362183,0.17975103855133057,0.5358972549438477],"rotation":[0.000513529172167182,-0.9378795027732849,0.009480888955295086,0.3468310236930847],"used":true,"bodyHandle":1.62e-321,"linearSpeed":7.520361589307176e-10,"angularVelocityHistory":[[-0.00017908708832692355,-0.00006674543692497537],[-0.000005251371476333588,-0.000012982350199308712],[-0.00003222801387892105,0.00003287547224317677],[-0.00004915470344712958,0.00004900483327219263],[-0.0000017243901311303489,0.000015930778317851946],[0.00009093456901609898,-0.00003962868868256919],[0.000514365965500474,0.00009296362259192392],[-0.000169332604855299,-0.000250963494181633],[-0.00015926554624456912,0.00007605046994285658],[0.000027300777219352312,0.0000040617392187414225],[0.00006389844929799438,0.00004884655572823249]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06317141652107239,0.19424983859062195,0.7053689360618591],"rotation":[-0.0017357519827783108,-0.4829026162624359,-0.013964786194264889,-0.875560998916626],"used":true,"bodyHandle":1.625e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.010536961257457733,0.03064604476094246],[-0.04957754909992218,0.13173910975456238],[0.013872220180928707,0.014738822355866432],[-0.010539321228861809,0.07503184676170349],[0.02773997187614441,-0.06120772287249565],[0.120301254093647,-0.09770168364048004],[0.0853995829820633,0.1006029024720192],[0.1026974767446518,0.13612963259220123],[0.15053102374076843,0.10975877195596695],[-0.10810104757547379,0.029079705476760864]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.4810173213481903,0.1798902302980423,0.4609012007713318],"rotation":[-0.00201798346824944,-0.016436567530035973,0.0004038174811284989,0.999862790107727],"used":true,"bodyHandle":1.63e-321,"linearSpeed":1.266195484299819e-9,"angularVelocityHistory":[[-0.0007689737831242383,0.00041765341302379966],[-0.00016909146506804973,0.0002831959573086351],[-0.0003396996471565217,0.00032178606488741934],[-0.00026027578860521317,0.00018468237249180675],[-0.0002752179279923439,0.0001839132746681571],[0.000260032742517069,0.003053197404369712],[0.0018152280244976282,0.0012811284977942705],[0.000999934272840619,0.0006692782044410706],[-0.0002875202044378966,0.0004327321075834334],[-0.00011119180999230593,0.0007077736663632095],[-0.00017533470236230642,0.0004306472255848348]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.05874287709593773,0.19488537311553955,0.6365404725074768],"rotation":[-0.003214160678908229,-0.7883398532867432,-0.010400096885859966,-0.6151437163352966],"used":true,"bodyHandle":1.635e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.14602188766002655,-0.4062795042991638],[0.3301146626472473,0.017644541338086128],[0.30260446667671204,-0.04941493645310402],[-0.09342771768569946,0.2768966555595398],[0.10529348999261856,0.08020858466625214],[-0.032591767609119415,-0.061129096895456314],[-0.0005585878971032798,0.1377001255750656],[-0.21694722771644592,-0.32865166664123535],[-0.10616029053926468,0.121126189827919],[-0.01366865262389183,0.19934938848018646]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.10428684204816818,0.1850518137216568,0.8031949996948242],"rotation":[0.010045966133475304,-0.9957361221313477,-0.010966094210743904,0.09104045480489731],"used":true,"bodyHandle":1.64e-321,"linearSpeed":9.246616167467923e-13,"angularVelocityHistory":[[-0.00002590344774944242,0.00001170844552689232],[-0.00002590954682091251,0.000011524103683768772],[-0.000026046544007840566,0.0000115644907054957],[-0.00002592386408650782,0.000011580568752833642],[-0.000025886212824843824,0.000011528466529853176],[-0.000025935711164493114,0.000011672477739921305],[-0.000025942899810615927,0.000011495906619529705],[-0.000025938215912901796,0.00001153687662736047],[-0.00002585129186627455,0.000011435814485594165],[-0.000025874969651340507,0.000011547350368346088],[-0.00002595015030237846,0.000011569093658181373]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.21331413090229034,0.17426036298274994,0.7879000306129456],"rotation":[-0.30770108103752136,0.0023002484813332558,-0.9514784812927246,-0.0018761863466352224],"used":true,"bodyHandle":1.645e-321,"linearSpeed":1.552392286780455e-11,"angularVelocityHistory":[[0.0010892904829233885,-0.001380979549139738],[0.0014598822453990579,0.0014336870517581701],[0.00024759708321653306,-0.0009146807715296745],[0.0008618771680630744,0.00022798725694883615],[-0.0003317894588690251,0.00006181633216328919],[0.0010653289500623941,0.0004908543196506798],[0.00007747671770630404,-0.00019607675494626164],[0.000008006676580407657,0.00015547963266726583],[-0.00011383939272491261,0.00040603691013529897],[0.000023068059817887843,0.00046045807539485395],[-0.00006315245991572738,0.0006173848523758352]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[0.5019906163215637,0.17962372303009033,0.6490612030029297],"rotation":[-0.000390009576221928,-0.0780394896864891,0.015229396522045135,0.9968338012695312],"used":true,"bodyHandle":1.65e-321,"linearSpeed":4.5348640162986195e-8,"angularVelocityHistory":[[0.01472065132111311,-0.014716613106429577],[0.02410152181982994,-0.0260386373847723],[0.10478069633245468,-0.08373484015464783],[0.04467101767659187,-0.046293940395116806],[0.08096049726009369,-0.1012808084487915],[0.019569620490074158,-0.02182844653725624],[0.01294619869440794,-0.04816849157214165],[0.05740530043840408,-0.07800441235303879],[0.08791624009609222,-0.08735562115907669],[0.05255739763379097,-0.05285993218421936],[0.032757557928562164,-0.033686328679323196]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3825976252555847,0.17440208792686462,0.5402703285217285],"rotation":[0.000853616395033896,-0.3686412274837494,-0.002823413349688053,0.9295670986175537],"used":true,"bodyHandle":1.655e-321,"linearSpeed":1.2252343073455679e-12,"angularVelocityHistory":[[0.0001936141779879108,-0.00002452786429785192],[0.00028655375353991985,0.00018688476120587438],[0.0024287435226142406,-0.028508728370070457],[-0.0009566498920321465,-0.0007113289902918041],[0.00020205654436722398,0.0004524450341705233],[0.000250789278652519,0.00013999606017023325],[0.0001324705663137138,0.0000602252985117957],[0.00018174626166000962,0.000405636994400993],[0.001766182598657906,0.0028150412254035473],[-0.00028483712230809033,-0.0002116300311172381],[0.000006128520908532664,0.00010979572107316926]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.33485981822013855,0.17457546293735504,0.5778310298919678],"rotation":[0.0008690704707987607,0.04372212290763855,0.0006935219862498343,0.9990431070327759],"used":true,"bodyHandle":1.66e-321,"linearSpeed":2.19044491412494e-11,"angularVelocityHistory":[[-0.0002513953950256109,-0.00022320443531498313],[-0.00019315960526000708,-0.0000255390095844632],[0.00003663514507934451,0.0002909046597778797],[-0.00003009867577929981,-0.00029243261087685823],[-0.00008532461652066559,-0.00010458402539370582],[0.0000396760951844044,-0.00030048529151827097],[0.00014894013293087482,-0.00016648680320940912],[-0.00009409036283614114,0.00019187683938071132],[-0.00021787283185403794,-0.00028329037013463676],[-0.00016490269626956433,0.00011858917423523962],[-0.0003210832073818892,0.000250846438575536]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.2525227963924408,0.17428751289844513,0.7121848464012146],"rotation":[-0.9517737627029419,-0.0031043794006109238,0.3067649304866791,-0.0035055221524089575],"used":true,"bodyHandle":1.665e-321,"linearSpeed":4.520840397762643e-12,"angularVelocityHistory":[[-0.00006433248199755326,0.0000727469741832465],[0.00041096811764873564,0.000036182322219247],[0.00014975591329857707,0.0004469342529773712],[-0.0006689173169434071,-0.0004905477399006486],[0.00009919758304022253,-0.000004628141141438391],[0.00024315854534506798,0.00005034460991737433],[0.00002009667514357716,0.0001934068714035675],[-0.0005312631838023663,-0.0008617673302069306],[-0.00000642910026726895,0.00015088211512193084],[0.0001663475122768432,-0.00009448441414861009],[-0.00007030494452919811,0.0004069260903634131]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[-0.0002280978369526565,0.19142864644527435,0.6668392419815063],"rotation":[-0.005269287154078484,-0.9106141328811646,-0.009941810742020607,-0.41310450434684753],"used":true,"bodyHandle":1.67e-321,"linearSpeed":0,"angularVelocityHistory":[[0.11264772713184357,0.15433570742607117],[0.16744482517242432,0.01888132654130459],[0.05784359201788902,0.06321913748979568],[0.050428248941898346,-0.029004860669374466],[0.15110892057418823,0.09858251363039017],[0.011375397443771362,-0.02971787564456463],[-0.08168921619653702,0.08779921382665634],[-0.05870184302330017,-0.15622131526470184],[-0.03039138950407505,-0.2243739366531372],[-0.13194985687732697,-0.18299579620361328]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5572407245635986,0.17456306517124176,0.46517863869667053],"rotation":[-0.0011958274990320206,-0.7196630835533142,0.002118947682902217,-0.6943191289901733],"used":true,"bodyHandle":1.675e-321,"linearSpeed":1.134500045713447e-10,"angularVelocityHistory":[[-0.00004657785393646918,0.00009413350926479325],[-0.00004485460522118956,0.000059739042626461014],[-0.00003187435504514724,0.000029211096261860803],[-0.0000435815891250968,0.000051779235946014524],[-0.00001931329825310968,0.000023879492800915614],[-0.0000228174430958461,0.00004631814590538852],[-0.00007363599434029311,-0.00006179526826599613],[0.000008501576303387992,-0.00003558023672667332],[0.00005328571569407359,-0.00007986021955730394],[0.00002351631519559305,-0.00008531117782695219],[-0.000005860539204149973,0.000042214869608869776]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.0010445015504956245,0.19666826725006104,0.5992575883865356],"rotation":[-0.00519865145906806,-0.035508040338754654,-0.0002580001892056316,-0.9993558526039124],"used":true,"bodyHandle":1.68e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.13897016644477844,0.1531676948070526],[0.017406098544597626,-0.010839272290468216],[-0.034730214625597,0.011228981427848339],[-0.1918802559375763,-0.04888365417718887],[-0.02577286586165428,-0.23921987414360046],[-0.12136001139879227,-0.06853217631578445],[-0.1189679354429245,-0.24584566056728363],[0.4627511501312256,-0.08792083710432053],[-0.49616289138793945,-0.06525439769029617],[0.3569856286048889,0.180952250957489]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06056118756532669,0.19866856932640076,0.6348574161529541],"rotation":[0.010402495972812176,-0.9933286905288696,0.0073541603051126,0.11461104452610016],"used":true,"bodyHandle":1.685e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.00003270432716817595,-0.2919137179851532],[0.5079099535942078,0.1698579639196396],[0.30706334114074707,0.05546233430504799],[-0.16611038148403168,0.3455018103122711],[0.04486299306154251,0.14784696698188782],[-0.03721269592642784,-0.15991000831127167],[-0.0787578672170639,0.1543717235326767],[-0.3509814739227295,-0.2909560799598694],[-0.07072900980710983,-0.1541004180908203],[0.001949088298715651,0.17649389803409576]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05922223627567291,0.1963423639535904,0.7050361037254333],"rotation":[0.00146205083001405,0.5737711191177368,-0.0036480380222201347,-0.8190063238143921],"used":true,"bodyHandle":1.69e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.06671253591775894,0.011210900731384754],[-0.0810040831565857,0.15823480486869812],[-0.0577290840446949,0.15190988779067993],[0.18326842784881592,0.16309954226016998],[-0.015505236573517323,-0.10401754826307297],[0.12844660878181458,-0.15808172523975372],[0.15149009227752686,0.10123663395643234],[0.047849010676145554,0.17500491440296173],[0.08191287517547607,-0.06714071333408356],[-0.11135009676218033,0.014824159443378448]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.000009976094588637352,0.19774524867534637,0.7373390197753906],"rotation":[0.011546076275408268,-0.16510960459709167,-0.00015613879077136517,0.9862076044082642],"used":true,"bodyHandle":1.695e-321,"linearSpeed":0,"angularVelocityHistory":[[0.06547106802463531,0.169179305434227],[0.10953126102685928,0.09766995906829834],[0.24113225936889648,-0.20024055242538452],[-0.2079439014196396,-0.22754673659801483],[0.054697465151548386,0.08833646029233932],[0.4291911721229553,0.00043352044303901494],[0.21244660019874573,-0.02968817949295044],[0.14713460206985474,-0.031289488077163696],[0.2817663252353668,-0.16573993861675262],[0.2025977522134781,0.06150251254439354]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05862927436828613,0.19875004887580872,0.7040327787399292],"rotation":[0.00540213193744421,-0.3026398718357086,0.008009429089725018,0.9530560374259949],"used":true,"bodyHandle":1.7e-321,"linearSpeed":0,"angularVelocityHistory":[[0.08226951956748962,-0.1666126549243927],[0.1327284425497055,0.07405062764883041],[-0.10516180098056793,0.12843750417232513],[0.06441424787044525,0.33591097593307495],[0.0322101004421711,0.1071983054280281],[0.1763807237148285,-0.009654504247009754],[0.3551844358444214,0.15407177805900574],[0.03435427322983742,-0.18827563524246216],[0.11276472359895706,-0.09241417795419693],[-0.06718047708272934,0.12336637079715729]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0626261830329895,0.1968703716993332,0.6349408030509949],"rotation":[0.0008594838436692953,0.9993178248405457,-0.019637789577245712,-0.03126484528183937],"used":true,"bodyHandle":1.705e-321,"linearSpeed":0,"angularVelocityHistory":[[0.0018054988468065858,-0.15424078702926636],[0.03441958874464035,-0.04274029657244682],[-0.08317654579877853,-0.21447879076004028],[-0.34198129177093506,-0.06093239784240723],[-0.3058566153049469,-0.05806503817439079],[0.036010127514600754,0.03008330799639225],[-0.32803159952163696,-0.022238217294216156],[-0.13276678323745728,-0.07312609255313873],[-0.1722300499677658,0.13714875280857086],[-0.20657742023468018,-0.09505841881036758]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0005121575086377561,0.19676563143730164,0.6727919578552246],"rotation":[-0.0041819545440375805,0.10752163827419281,-0.0022282549180090427,0.9941914081573486],"used":true,"bodyHandle":1.71e-321,"linearSpeed":0,"angularVelocityHistory":[[0.46873489022254944,-0.10323649644851685],[0.16126836836338043,-0.07528924196958542],[0.019576149061322212,0.002563757123425603],[0.07524038106203079,0.15803182125091553],[0.17520450055599213,0.0916522964835167],[0.011414797976613045,0.0143510727211833],[-0.48291173577308655,0.004803204443305731],[0.017492057755589485,-0.13419930636882782],[-0.08572620898485184,-0.20978540182113647],[0.0032768177334219217,-0.25012102723121643]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5030997395515442,0.17421072721481323,0.557386040687561],"rotation":[-0.004287153482437134,0.8341744542121887,0.0026418836787343025,0.5514776110649109],"used":true,"bodyHandle":1.714e-321,"linearSpeed":4.1977482639463865e-8,"angularVelocityHistory":[[0.004264804534614086,0.0020031353924423456],[-0.0006184851517900825,-0.0017738183960318565],[0.0011626433115452528,-0.004397240467369556],[0.0043275607749819756,-0.0009082657052204013],[0.00044895842438563704,-0.00023407161643262953],[-0.000020069037418579683,-0.00033364069531671703],[0.00405281875282526,0.0013231198536232114],[-0.0027063314337283373,-0.005588401108980179],[0.0011499729007482529,0.0008166249608621001],[-0.0006601067143492401,-0.0013093090383335948],[0.000035689819924300537,-0.0017238154541701078]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5111009478569031,0.1795521378517151,0.5542775392532349],"rotation":[-0.00548755144700408,0.976847231388092,0.00482045067474246,0.2138131856918335],"used":true,"bodyHandle":1.72e-321,"linearSpeed":0.000013878832531393534,"angularVelocityHistory":[[0.001934397965669632,0.009432660415768623],[0.0008954345248639584,-0.006388453301042318],[0.0007139933295547962,-0.003093033330515027],[0.0031961866188794374,0.0013706892495974898],[0.002069830894470215,-0.0012857286492362618],[0.001594945089891553,-0.0023172497749328613],[0.021709518507122993,0.007346707861870527],[-0.010406916961073875,-0.013686785474419594],[-0.010854425840079784,0.0073114195838570595],[-0.0007295093382708728,-0.005983001086860895],[0.002873587654903531,-0.002481909701600671]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3296273350715637,0.17973558604717255,0.7367627620697021],"rotation":[0.02008153684437275,-0.992588460445404,-0.08132297545671463,0.08804167807102203],"used":true,"bodyHandle":1.724e-321,"linearSpeed":8.169420680100734e-11,"angularVelocityHistory":[[-0.003684178926050663,-0.006164681166410446],[-0.0004605957365129143,-0.00023064567358233035],[-0.0015933556715026498,-0.00048016165965236723],[0.0053819515742361546,-0.003442023880779743],[0.0009560236358083785,0.0014876615023240447],[0.0007425873191095889,-0.00028818135615438223],[-0.000003998217835032847,0.0027528738137334585],[0.0006035788101144135,0.003370586782693863],[0.000015626041204086505,0.0026536129880696535],[-0.0001699002750683576,0.0025462042540311813],[-0.0006606295355595648,0.0011004798579961061]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.00016020925249904394,0.1986919641494751,0.6028352975845337],"rotation":[0.004744093399494886,0.3215249478816986,0.007009853608906269,0.9468632936477661],"used":true,"bodyHandle":1.73e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.160027414560318,0.20533664524555206],[0.06549712270498276,0.01047216821461916],[-0.02516448311507702,0.12293865531682968],[-0.1631767451763153,-0.024912141263484955],[-0.03780168294906616,-0.18678735196590424],[-0.05860503762960434,-0.053990498185157776],[-0.08368998020887375,-0.14189277589321136],[0.413316547870636,0.023579521104693413],[-0.12171901017427444,0.18878495693206787],[0.3834150731563568,0.25529712438583374]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.44250208139419556,0.17868512868881226,0.564196765422821],"rotation":[-0.7373406887054443,0.03594105318188667,-0.672194242477417,0.05649562180042267],"used":true,"bodyHandle":1.734e-321,"linearSpeed":0.00008647045146245358,"angularVelocityHistory":[[0.0698879286646843,0.8983204960823059],[0.08403429388999939,1.4710527658462524],[0.11765652894973755,-0.7831558585166931],[0.6169800162315369,-0.8403950333595276],[0.05360002815723419,0.45886555314064026],[-0.15818625688552856,-1.0917432308197021],[-0.000710044230800122,1.9705885648727417],[0.04397515952587128,0.6432409882545471],[0.5461416840553284,-1.8982722759246826],[0.12865939736366272,0.06154858320951462],[-0.12335733324289322,0.014127056114375591]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05960698798298836,0.1988951861858368,0.6351104974746704],"rotation":[0.002252410165965557,0.9581567049026489,-0.008866861462593079,0.28609785437583923],"used":true,"bodyHandle":1.74e-321,"linearSpeed":0,"angularVelocityHistory":[[0.052248358726501465,-0.02929914928972721],[-0.014033429324626923,-0.13303819298744202],[-0.06261774897575378,-0.20747768878936768],[-0.20189422369003296,-0.19510900974273682],[-0.3171580135822296,-0.009015237912535667],[0.08328867703676224,0.030450336635112762],[-0.35457196831703186,-0.06419657170772552],[-0.17682711780071259,-0.04217959940433502],[-0.19241441786289215,0.07180828601121902],[-0.23377183079719543,-0.12302237749099731]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.008741619065403938,0.18799620866775513,0.2586214542388916],"rotation":[-0.0023915106430649757,-0.7079450488090515,0.003678049659356475,-0.7062538862228394],"used":true,"bodyHandle":1.744e-321,"linearSpeed":2.1541158076216891e-13,"angularVelocityHistory":[[0.000011591187103476841,-0.00002857572144421283],[-8.781447036199097e-7,-0.00004133311449550092],[0.000015353238268289715,-0.00002556272920628544],[0.000031297044188249856,-0.000024330125597771257],[-0.000012981968211533967,-0.000001984694108614349],[0.0000025842202830972383,-0.00003849681525025517],[0.0000029438199362630257,-0.0000477148023492191],[0.000010477046089363284,-0.00003175015081069432],[0.000005326148311723955,-0.0000328977512253914],[0.00000910252765606856,-0.00003809265763266012],[0.000013866934750694782,-0.00003811888745985925]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.24487732350826263,0.18514497578144073,0.6438566446304321],"rotation":[-0.005610354244709015,-0.5663450360298157,0.007951108738780022,0.8241108059883118],"used":true,"bodyHandle":1.75e-321,"linearSpeed":3.253993654452645e-8,"angularVelocityHistory":[[-0.0025020125322043896,-0.0006819326081313193],[0.000047721900045871735,-0.0008779920754022896],[-0.0019379955483600497,-0.0004261276335455477],[-0.0016336831031367183,0.0008066885056905448],[-0.000906147004570812,0.000019929695554310456],[-0.00001313366556132678,-0.0006049529765732586],[-0.0007907950785011053,0.0015396233648061752],[-0.0006950667593628168,0.0011985769961029291],[-0.0009868829511106014,0.0014778980985283852],[-0.0003730448370333761,0.001069249352440238],[-0.0010288598714396358,0.0006090606329962611]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.060423947870731354,0.20208033919334412,0.7054221630096436],"rotation":[0.010022296570241451,-0.260567307472229,-0.013232573866844177,0.9653129577636719],"used":true,"bodyHandle":1.754e-321,"linearSpeed":0,"angularVelocityHistory":[[0.07124903798103333,-0.1368606835603714],[0.10350944846868515,-0.004723361227661371],[0.06964996457099915,-0.15831635892391205],[0.05999118089675903,0.2719447612762451],[0.050929468125104904,-0.09250861406326294],[-0.07011034339666367,-0.11210302263498306],[0.2603394389152527,0.20580121874809265],[-0.005680498201400042,-0.1985377073287964],[-0.13284701108932495,-0.07021989673376083],[-0.16815246641635895,0.15096139907836914]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.280392050743103,0.18369944393634796,0.7771472930908203],"rotation":[-0.09057799726724625,0.9561223983764648,0.022088738158345222,-0.2777365446090698],"used":true,"bodyHandle":1.76e-321,"linearSpeed":8.645266679075219e-9,"angularVelocityHistory":[[0.0010394612327218056,-0.000011191561497980729],[-0.0015538660809397697,-0.0009519821614958346],[0.0004066868859808892,-0.0006532571278512478],[-0.0029208234045654535,0.0008674791315570474],[0.0006056156707927585,0.00000846998500492191],[-0.0007363414042629302,-0.00043754014768637717],[-0.000034532477002358064,-0.00044945356785319746],[-0.0022161449305713177,0.0014660953311249614],[0.0010177165968343616,0.0002485656295903027],[-0.0009555904543958604,-0.0004610380274243653],[0.00009081770986085758,-0.0006897772545926273]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.4708523154258728,0.17403735220432281,0.48305660486221313],"rotation":[-0.0002916157536674291,0.459043949842453,0.0039976839907467365,0.8884044885635376],"used":true,"bodyHandle":1.764e-321,"linearSpeed":2.035291998278927e-8,"angularVelocityHistory":[[-0.00593169778585434,0.009738356806337833],[-0.00019549384887795895,0.004658091813325882],[0.03291620314121246,-0.01327761821448803],[-0.020609650760889053,0.025203628465533257],[-0.024137768894433975,0.006532181054353714],[0.004793483763933182,-0.010283081792294979],[-0.015652921050786972,0.003414364065974951],[-0.008591256104409695,0.015041234903037548],[0.013595830649137497,-0.015731584280729294],[-0.010663611814379692,0.003957660868763924],[0.006745942402631044,0.001145590329542756]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.455080509185791,0.17426954209804535,0.5353551506996155],"rotation":[-0.0013011121191084385,-0.9316599369049072,-0.0012317401124164462,0.3633269965648651],"used":true,"bodyHandle":1.77e-321,"linearSpeed":5.370786950474076e-10,"angularVelocityHistory":[[-0.0003461071755737066,-0.00010843860218301415],[0.00017377773474436253,-0.00002038865932263434],[0.000060622627643169835,-0.000029853490559617057],[-0.00008009674638742581,-0.00020619237329810858],[0.000029680499210371636,0.00011366978287696838],[-0.0001890244020614773,0.000007601510787935695],[-0.00022436289873439819,0.00011017396172974259],[-0.00011900917161256075,0.00005299135227687657],[0.0002717956085689366,0.00021745012782048434],[-0.00006772568303858861,0.000027709484129445627],[-0.0003506234788801521,-0.0001899707713164389]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[-0.5059914588928223,0.1740906983613968,0.49431443214416504],"rotation":[0.35853150486946106,0.003104155883193016,-0.9335082769393921,0.0027952156960964203],"used":true,"bodyHandle":1.774e-321,"linearSpeed":6.444027177573335e-10,"angularVelocityHistory":[[-0.0001776801364030689,0.000004258499302522978],[0.00006154933362267911,-0.00037026143399998546],[-0.00005408083598013036,-0.00016000056348275393],[-0.00003754902718355879,-0.0003203795349691063],[-0.000059591271565295756,-0.000015586490917485207],[0.0005985069437883794,0.0014469175366684794],[0.0007741437293589115,0.0016684094443917274],[0.00030382079421542585,0.00023036760103423148],[-0.0004066204419359565,-0.00031839331495575607],[-0.00017609790666028857,0.0001426052622264251],[0.000010447241038491484,9.175299169328355e-7]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.14269936084747314,0.17979764938354492,0.7505016326904297],"rotation":[-0.005537285935133696,0.7770047783851624,0.0009018564596772194,-0.6294696927070618],"used":true,"bodyHandle":1.78e-321,"linearSpeed":1.12403824202939e-9,"angularVelocityHistory":[[-0.000128760832012631,0.00023461008095182478],[-0.00019581062952056527,-0.00016564608085900545],[-0.0003464668116066605,8.612138344687992e-7],[0.0004327386850491166,-0.00014329067198559642],[-0.00029467849526554346,0.00015616639575455338],[-0.000026071833417518064,-0.000010307640877726953],[-0.0002732694265432656,-0.000008802576303423848],[0.00027300152578391135,-0.00029728570370934904],[-0.0001561189565109089,0.0002893357304856181],[-0.00005468738527270034,-0.00024857904645614326],[-0.0001076787812053226,0.00012792187044396996]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[-0.2822757661342621,0.17451131343841553,0.5477556586265564],"rotation":[-0.001023485790938139,-0.8365704417228699,0.0021938220597803593,0.5478540062904358],"used":true,"bodyHandle":1.784e-321,"linearSpeed":1.0267839639332929e-10,"angularVelocityHistory":[[0.0008784587262198329,0.0017399957869201899],[8.399685498261533e-7,-0.0004989957669749856],[0.00009848109039012343,0.0008978612022474408],[0.00013372425746638328,0.00001785487256711349],[0.0005589600768871605,0.0007668507169000804],[0.0007174125057645142,0.0002110705681843683],[0.00007042289507808164,-0.0008096658275462687],[0.0002420017699478194,0.00008775540482020006],[0.0001537223142804578,-0.0010914178565144539],[0.00023897472419776022,0.0006089912494644523],[0.00044024563976563513,-0.0004053614102303982]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[0.27143773436546326,0.17431960999965668,0.7683775424957275],"rotation":[0.7017109990119934,0.00044569908641278744,-0.7124562859535217,0.0027398753445595503],"used":true,"bodyHandle":1.79e-321,"linearSpeed":6.459523099811232e-14,"angularVelocityHistory":[[-0.0007765675545670092,-0.00028791610384359956],[0.0006595906452275813,-0.0007367809885181487],[-0.0009978956077247858,0.0004477179900277406],[0.0017132466891780496,-0.0008645417983643711],[-0.00011786194227170199,0.00005080808841739781],[0.00048559464630670846,-0.00028175199986435473],[-0.00015211256686598063,0.00028647397994063795],[0.0002589037176221609,0.000021598389139398932],[-0.00007638343231519684,0.00005832418901263736],[0.000030218989195418544,0.000026376512323622592],[-0.00015487807104364038,0.00012576099834404886]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.1618061363697052,0.17460854351520538,0.759061336517334],"rotation":[0.0019141914090141654,-0.3839176297187805,0.0018266660626977682,0.9233636260032654],"used":true,"bodyHandle":1.793e-321,"linearSpeed":8.582658586869214e-11,"angularVelocityHistory":[[0.007670956663787365,-0.0014933055499568582],[0.001834382303059101,-0.00104218116030097],[0.00012113617412978783,-0.001169200404547155],[-0.0004100594378542155,-0.001139952102676034],[0.00025492755230516195,0.00011620609438978136],[0.0008988300687633455,-0.0007054161978885531],[0.001199006219394505,-0.0005459888488985598],[-0.0001495696051279083,-0.00021662606741301715],[0.00006788485188735649,0.00032062464742921293],[0.0004771937965415418,0.0001486338587710634],[0.0004608232411555946,0.00014002488751430064]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.0004934430471621454,0.19801120460033417,0.740429162979126],"rotation":[-0.010231944732367992,-0.995170533657074,-0.01763886958360672,-0.0960199162364006],"used":true,"bodyHandle":1.8e-321,"linearSpeed":0,"angularVelocityHistory":[[0.12293747067451477,0.12668049335479736],[0.08975343406200409,0.04802320525050163],[0.1546311378479004,-0.19762861728668213],[0.0026364424265921116,-0.17881855368614197],[0.12590748071670532,-0.06360889971256256],[0.49778541922569275,0.041879355907440186],[0.20588502287864685,0.005554194562137127],[0.14908137917518616,0.010211724787950516],[0.29202017188072205,-0.17258784174919128],[0.2010854184627533,0.06311249732971191]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.1369808167219162,0.17431913316249847,0.6869664192199707],"rotation":[0.0008732842397876084,0.9916787147521973,0.00009207499533658847,-0.12873409688472748],"used":true,"bodyHandle":1.803e-321,"linearSpeed":2.535540813617221e-10,"angularVelocityHistory":[[0.00042239163303747773,0.0007181943510659039],[0.0004668423789553344,0.0005367877311073244],[-0.0008341348730027676,-0.0001410932163707912],[-0.0005711691337637603,0.001972987549379468],[-0.0002396415948169306,0.0005360248032957315],[0.0005153996753506362,0.0015439175767824054],[-0.0010112100280821323,0.0005931108025833964],[0.000526973744854331,0.0007358406437560916],[-0.000391273177228868,0.00020990276243537664],[-0.00010345876216888428,0.000035891229344997555],[-0.00024841289268806577,0.00020806686370633543]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.382276713848114,0.1801796555519104,0.5418828725814819],"rotation":[0.5832405686378479,-0.003735939972102642,0.8122905492782593,0.0007338571012951434],"used":true,"bodyHandle":1.81e-321,"linearSpeed":1.354723004988456e-10,"angularVelocityHistory":[[-0.00043166818795725703,0.0004569916345644742],[-0.00010578339424682781,0.0002717866445891559],[-0.012863384559750557,0.013997632078826427],[-0.0001134654667112045,0.0010332929668948054],[-0.00046626036055386066,0.001042933203279972],[-0.00026262697065249085,0.0003275754861533642],[-0.00020027230493724346,0.00022346105834003538],[-0.0002025753492489457,0.0005393428145907819],[-0.003406028961762786,-0.002801052527502179],[-0.0006611204007640481,-0.00024164171190932393],[-0.00026227248599752784,0.00018352906045038253]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[-0.20615869760513306,0.17985939979553223,0.7320071458816528],"rotation":[0.00212846789509058,-0.5078751444816589,-0.004154358059167862,0.8614180088043213],"used":true,"bodyHandle":1.813e-321,"linearSpeed":1.754371868491217e-9,"angularVelocityHistory":[[-0.00032130046747624874,-0.0004100370570085943],[0.00013731214858125895,-0.00013905750529374927],[-0.0006860218709334731,0.00003418095730012283],[-0.0006406459142453969,-0.00022207385336514562],[-0.00009912818495649844,0.0001730909280013293],[0.000016488516848767176,-0.00012560051982291043],[-0.0003375300148036331,0.00012253517343197018],[-0.00010970557923428714,-0.0002729478292167187],[0.00024335060152225196,0.0003468622744549066],[0.0001551315508550033,-0.00013454149302560836],[-0.00039731524884700775,0.000039979535358725116]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.22963286936283112,0.18584302067756653,0.7011328339576721],"rotation":[0.0004946631961502135,0.9979310631752014,-0.0030213550198823214,0.06422029435634613],"used":true,"bodyHandle":1.82e-321,"linearSpeed":2.5245500031269933e-9,"angularVelocityHistory":[[-0.0010101493680849671,-0.002777091460302472],[-0.0004714179376605898,-0.0008733886643312871],[-0.0013367427745833993,-0.00042828908772207797],[-0.001171489479020238,-0.0013622927945107222],[-0.0009148558019660413,-0.0004828099044971168],[-0.00037349367630667984,-0.00010926983668468893],[-0.000944384140893817,0.00015243235975503922],[-0.00043721022666431963,-0.00032929182634688914],[0.0002280667395098135,-0.0001254028466064483],[-0.00047118388465605676,0.0007224452565424144],[-0.0003858236304949969,0.0006841289578005672]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4437597393989563,0.17655473947525024,0.5233686566352844],"rotation":[-0.033636871725320816,-0.03566441312432289,-0.017376402392983437,-0.9986463785171509],"used":true,"bodyHandle":1.823e-321,"linearSpeed":0.000008921250825024308,"angularVelocityHistory":[[-0.370737224817276,0.6349195837974548],[-0.7096047401428223,1.0021121501922607],[0.2937988340854645,-0.15725910663604736],[-0.5294539332389832,1.0873602628707886],[0.16775621473789215,0.31808480620384216],[0.9895078539848328,-1.1493905782699585],[-1.3403087854385376,1.4789918661117554],[0.044289328157901764,0.21761828660964966],[0.5328697562217712,-0.17294719815254211],[-1.037245750427246,0.863579273223877],[-0.07063127309083939,-0.2699887752532959]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05993993207812309,0.19804883003234863,0.7042638063430786],"rotation":[0.0007835034048184752,0.20039653778076172,0.0016914665466174483,-0.9797130823135376],"used":true,"bodyHandle":1.83e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.03721386566758156,0.020516356453299522],[-0.03376314789056778,0.11006365716457367],[-0.02719110995531082,0.09358280897140503],[0.2661910951137543,0.09855804592370987],[-0.028506126254796982,-0.07824741303920746],[0.03513757511973381,-0.2196200042963028],[0.1132098063826561,0.10263892263174057],[-0.014341207221150398,0.15882042050361633],[0.0082466471940279,-0.024225329980254173],[-0.15211221575737,0.06392645835876465]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.5424769520759583,0.1872822493314743,0.7328052520751953],"rotation":[0.0002116590621881187,0.9848939776420593,-0.02308356575667858,-0.17161257565021515],"used":true,"bodyHandle":1.833e-321,"linearSpeed":1.0132899704463004e-7,"angularVelocityHistory":[[0.01429359894245863,0.031146826222538948],[0.005061984062194824,0.026812881231307983],[0.008597581647336483,0.029593264684081078],[0.004383910913020372,0.019768452271819115],[0.005960473325103521,0.023533016443252563],[0.01197607722133398,0.02697128988802433],[0.005879182834178209,0.021591002121567726],[-0.0654093474149704,-0.20213280618190765],[-0.05887741222977638,-0.1517610102891922],[-0.06573055684566498,-0.1217697337269783],[-0.021742014214396477,-0.06269935518503189]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05883428081870079,0.1970909982919693,0.6364924311637878],"rotation":[0.006993345450609922,-0.7394212484359741,-0.0024507343769073486,-0.6732022762298584],"used":true,"bodyHandle":1.84e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.10734938085079193,-0.3060796856880188],[0.5743474960327148,0.31031182408332825],[0.23935523629188538,0.0571136400103569],[0.07618734985589981,0.22500444948673248],[0.11842509359121323,0.02276841178536415],[-0.10877502709627151,-0.05362755432724953],[0.058835528790950775,0.18706831336021423],[-0.20301130414009094,-0.24464714527130127],[-0.05614398792386055,-0.015504928305745125],[-0.017239078879356384,0.21932926774024963]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.22250699996948242,0.17420056462287903,0.5556490421295166],"rotation":[-0.004360630176961422,-0.7348874807357788,0.002212322084233165,-0.6781713366508484],"used":true,"bodyHandle":1.843e-321,"linearSpeed":1.1235482956625584e-7,"angularVelocityHistory":[[-0.0003622369549702853,-0.0007682678406126797],[0.0005946137825958431,-0.00044757770956493914],[0.0007959665381349623,-0.00009250318544218317],[-0.0011754828738048673,0.0011848693247884512],[-0.00018717936472967267,-0.0011651926906779408],[-0.0016973847523331642,0.00009340595715912059],[-0.0016841643955558538,-0.0017113490030169487],[-0.0005624478799290955,0.0006783634889870882],[0.0002623290929477662,-0.0014548461185768247],[0.0005515181110240519,0.00012254199828021228],[0.0011869315057992935,0.00021772191394120455]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.001113014412112534,0.19812968373298645,0.6671605706214905],"rotation":[-0.008686542510986328,-0.8940907716751099,-0.01523829810321331,-0.4475420415401459],"used":true,"bodyHandle":1.85e-321,"linearSpeed":0,"angularVelocityHistory":[[0.423202782869339,-0.13818500936031342],[0.1979091316461563,-0.07515442371368408],[0.0690930038690567,-0.07332516461610794],[0.13895787298679352,0.15171386301517487],[0.18689537048339844,0.07110292464494705],[0.010896006599068642,0.08833128213882446],[-0.12382165342569351,-0.12093503773212433],[0.017896389588713646,0.055158600211143494],[-0.1853451281785965,-0.10991513729095459],[0.09610134363174438,-0.03244655951857567]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.46907979249954224,0.18560150265693665,0.4624260365962982],"rotation":[-0.00301579711958766,-0.9846593141555786,0.00034325761953368783,0.17446164786815643],"used":true,"bodyHandle":1.853e-321,"linearSpeed":3.868543888937302e-10,"angularVelocityHistory":[[-0.0006372513598762453,0.0009638097835704684],[-0.00026450675795786083,0.0006167298415675759],[-0.0003346997546032071,0.00048610547673888505],[-0.0002768311824183911,0.0004104195686522871],[-0.00028897722950205207,0.00042989026405848563],[-0.0009715143823996186,0.0026275091804564],[0.0010163382394239306,0.0002642959589138627],[0.00043666205601766706,0.0007104577380232513],[-0.00004160641401540488,0.0004604334244504571],[0.000016666765077388845,0.00047325549530796707],[-0.00033912010258063674,0.0008309077238664031]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[0.21666507422924042,0.17625905573368073,0.6682747602462769],"rotation":[-0.00404624966904521,-0.8213196396827698,0.003989992663264275,-0.5704400539398193],"used":true,"bodyHandle":1.86e-321,"linearSpeed":3.414060774038884e-9,"angularVelocityHistory":[[-0.00030303545645438135,-0.001976226456463337],[0.000610177987255156,-0.00031016196589916945],[-0.0008091956842690706,-0.0004362924082670361],[0.000399619631934911,-0.0012695204932242632],[0.001058304449543357,0.001243571750819683],[0.0004588851588778198,0.00042338939965702593],[0.0000530790894117672,0.00003190063580404967],[0.00006900796142872423,0.00014789873966947198],[0.0006308341398835182,0.0004123109392821789],[0.0009346868610009551,0.000054666274081682786],[0.0006917897262610495,0.0017540344269946218]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.4036761522293091,0.17918220162391663,0.4679803252220154],"rotation":[-0.36257126927375793,-0.0022377949208021164,-0.9319510459899902,0.002074334304779768],"used":true,"bodyHandle":1.863e-321,"linearSpeed":2.072083077029088e-7,"angularVelocityHistory":[[0.0560760498046875,0.005109633319079876],[0.06803212314844131,0.007305418606847525],[0.04242744669318199,0.0049470639787614346],[0.03423507511615753,0.0034797347616404295],[0.03129104897379875,0.005200175568461418],[-0.12149155139923096,0.01080668717622757],[-0.0953553169965744,-0.04465174674987793],[-0.07080592215061188,-0.03458939120173454],[-0.050744421780109406,-0.01294938288629055],[-0.05868403613567352,-0.02429201640188694],[-0.03509336709976196,-0.009713991545140743]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.23617637157440186,0.17426858842372894,0.5133798122406006],"rotation":[0.0015888044144958258,-0.2070694863796234,-0.005756815895438194,0.9783080816268921],"used":true,"bodyHandle":1.87e-321,"linearSpeed":4.892518699619902e-10,"angularVelocityHistory":[[0.00006184200901770964,0.000017247304640477523],[-0.0016609479207545519,0.001961673842743039],[-0.0016283346340060234,-0.0008830817532725632],[-0.00009625304664950818,0.0012572570703923702],[0.0006863411981612444,-0.00034318084362894297],[-0.0003327081794850528,0.00019802618771791458],[-0.0023643008898943663,-0.0008469767053611577],[0.000586915120948106,0.0014050346799194813],[0.0008091512718237936,-0.0031190149020403624],[-0.001065172371454537,0.00168170768301934],[-0.00685518141835928,0.0019043361535295844]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[0.09833743423223495,0.17982694506645203,0.7920837998390198],"rotation":[-0.3218708634376526,-0.0045903753489255905,-0.9466988444328308,-0.011805257759988308],"used":true,"bodyHandle":1.873e-321,"linearSpeed":7.598969332963104e-9,"angularVelocityHistory":[[0.053192831575870514,0.04481568560004234],[0.000324495806125924,-0.021080439910292625],[-0.007135015446692705,0.00353031512349844],[-0.0029487241990864277,-0.0006036211852915585],[-0.0012198124313727021,-0.0007105573895387352],[-0.0026936414651572704,-0.00011345056555001065],[-0.0023163272999227047,-0.000509792473167181],[-0.0026111805345863104,-0.0008942899294197559],[-0.0027112262323498726,-0.00026986305601894855],[-0.0023654550313949585,0.00043140799971297383],[-0.002298420760780573,0.0012241583317518234]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.28484731912612915,0.1743718981742859,0.487601101398468],"rotation":[-0.0004975402844138443,0.9978322386741638,-0.0023937481455504894,-0.06576290726661682],"used":true,"bodyHandle":1.877e-321,"linearSpeed":3.4776921842816324e-10,"angularVelocityHistory":[[0.00036389718297868967,-0.0011686412617564201],[-0.0000887190763023682,-0.00023859133943915367],[0.000037238223740132526,0.0008069581817835569],[0.00007795647252351046,-0.0011004755506291986],[3.0314858179281146e-8,-0.0005403206450864673],[0.000576551363337785,-0.0004918804042972624],[-0.0011840274091809988,-0.004520876798778772],[0.00023454921029042453,0.00019453259301371872],[-0.0002646045759320259,-0.001848079962655902],[0.000380865327315405,0.0007944777607917786],[-0.0001522154052508995,-0.0016313031082972884]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[0.300460547208786,0.17995786666870117,0.8264017701148987],"rotation":[-0.006738326512277126,0.4661884605884552,0.004025749862194061,0.8846505880355835],"used":true,"bodyHandle":1.88e-321,"linearSpeed":8.013245817752953e-12,"angularVelocityHistory":[[-0.00014841103984508663,0.0008813366293907166],[-0.000021406767700682394,-0.00026096851797774434],[-0.001125937094911933,-0.0005319398478604853],[0.0017622994491830468,-0.0006561975460499525],[0.0001855375594459474,-0.0003363295691087842],[0.0009524188353680074,-0.0003783656866289675],[-0.0002133037050953135,-0.00012903079914394766],[0.0001394475984852761,-0.00013672414934262633],[-0.000037949073885101825,0.000006681131253571948],[0.00007055701280478388,0.00005676648288499564],[-0.0001539034565212205,0.0002717393508646637]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[-0.15219716727733612,0.17409077286720276,0.5796934962272644],"rotation":[-0.5220339298248291,-0.003674299456179142,0.8529083728790283,0.0037823948077857494],"used":true,"bodyHandle":1.887e-321,"linearSpeed":5.608650952666972e-10,"angularVelocityHistory":[[0.0014548961771652102,0.000023587313989992253],[0.0004412923299241811,-0.0007602552650496364],[-0.000982189318165183,0.0007615600479766726],[-0.004319317173212767,0.00231534824706614],[-0.002224560594186187,0.006234792526811361],[-0.019587047398090363,0.007983961142599583],[0.006356826052069664,0.007997936569154263],[-0.011882690712809563,-0.0030921504367142916],[0.001896743313409388,0.004212915897369385],[-0.007208721246570349,0.0010442134225741029],[0.0017699619056656957,0.00425491388887167]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.2806980311870575,0.1803234964609146,0.5348236560821533],"rotation":[-0.0004970176378265023,0.9257157444953918,0.000189884114661254,-0.37821948528289795],"used":true,"bodyHandle":1.89e-321,"linearSpeed":2.3077149709444952e-8,"angularVelocityHistory":[[0.000984004931524396,0.0027842281851917505],[-0.000010882657988986466,0.00008455273928120732],[0.0004979715449735522,0.0008637593709863722],[-0.0012747577857226133,0.0004076824989169836],[-0.00015956518473103642,0.0011592620285227895],[0.0006782614509575069,-0.00028580627986229956],[-0.0007033288711681962,-0.0007980018854141235],[0.0004807337245438248,0.001730472082272172],[-0.0006696558557450771,-0.001143751316703856],[0.001718122628517449,0.002056304132565856],[-0.001235661213286221,-0.00037174776662141085]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3438890874385834,0.1832236498594284,0.49276870489120483],"rotation":[-0.9942834973335266,-0.0036297456827014685,-0.08994005620479584,0.057428110390901566],"used":true,"bodyHandle":1.897e-321,"linearSpeed":2.8645163035544214e-7,"angularVelocityHistory":[[-0.0006795111112296581,0.01472510863095522],[0.0008929620962589979,0.004754387307912111],[-0.0010888451943174005,0.014908977784216404],[-0.0018579771276563406,0.028993766754865646],[-0.001009424333460629,0.030614089220762253],[-0.00014106348680797964,-0.00012132498522987589],[0.0029520655516535044,0.006357890088111162],[0.0028106742538511753,-0.022545775398612022],[0.0025768715422600508,-0.008658253587782383],[0.0010225889272987843,0.00508617889136076],[0.001852598274126649,0.004328968469053507]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.30946800112724304,0.18029962480068207,0.5632110834121704],"rotation":[-0.999943196773529,-0.0014369230484589934,0.010551334358751774,-0.00044548491132445633],"used":true,"bodyHandle":1.9e-321,"linearSpeed":2.1207091704003612e-9,"angularVelocityHistory":[[-0.00008365364919882268,0.00039227717206813395],[0.00011834217730211094,0.00022972851002123207],[-0.00020553788635879755,-0.0005959540721960366],[0.00005838004653924145,0.00017996548558585346],[0.00019519712077453732,-0.00008973533113021404],[0.000049522484914632514,-0.00013724007294513285],[0.00024248077534139156,-0.0004079699865542352],[0.00015228740812744945,0.000205416843527928],[-0.00011211887613171712,-0.0005549246561713517],[-0.00009159278852166608,-0.00014534984074998647],[-0.00030618126038461924,0.0010078897466883063]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.0005559788551181555,0.2029525339603424,0.6025225520133972],"rotation":[0.00029918141080997884,0.9670560359954834,-0.005781473126262426,-0.2544976770877838],"used":true,"bodyHandle":1.907e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.1524781882762909,0.1945381909608841],[0.09031015634536743,-0.008610561490058899],[-0.05235271155834198,0.18324004113674164],[-0.12260007113218307,0.024273058399558067],[-0.014463118277490139,-0.21819539368152618],[-0.11335097253322601,-0.12752583622932434],[-0.04259391874074936,-0.24198029935359955],[0.3489672541618347,0.029698017984628677],[-0.14971470832824707,0.1326417624950409],[0.35995158553123474,0.24903549253940582]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.23946154117584229,0.17442719638347626,0.5730835795402527],"rotation":[-0.004217913839966059,0.7568868398666382,0.002108954358845949,-0.6535289883613586],"used":true,"bodyHandle":1.91e-321,"linearSpeed":1.321425185543235e-10,"angularVelocityHistory":[[-0.00006811923230998218,0.00019933351723011583],[-0.0024377163499593735,0.0014241873286664486],[-0.00023358818725682795,0.00004823877679882571],[-0.0004504824464675039,0.0008251148974522948],[0.0005635727429762483,0.0006704095867462456],[0.0006579802138730884,0.0004023438668809831],[0.00042198534356430173,-0.0003962002519983798],[-0.0004877210594713688,0.0014207144267857075],[0.00015015907410997897,-0.002151479944586754],[0.0005090865888632834,-0.0002949060872197151],[-0.004023294430226088,0.0028168298304080963]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.22128036618232727,0.18566974997520447,0.5233086943626404],"rotation":[-0.30513375997543335,0.0003585565718822181,0.9523077011108398,0.0018274955218657851],"used":true,"bodyHandle":1.917e-321,"linearSpeed":3.1485120678229464e-8,"angularVelocityHistory":[[0.0004341323219705373,0.00015101867029443383],[-0.00026016923948191106,-0.00013749682693742216],[0.0013065815437585115,0.0001932824816321954],[0.00064042245503515,-0.0004471188585739583],[-0.0002944071311503649,-0.0017674033297225833],[-0.0013761058216914535,0.0012912246165797114],[-0.0011095397640019655,-0.0015574297867715359],[0.00034403291647322476,-0.0006435700925067067],[-0.00046285943244583905,-0.0011745913652703166],[-0.00029153074137866497,0.0010335032129660249],[-0.0013573338510468602,0.0005266803782433271]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.18314354121685028,0.19058804214000702,0.7557823657989502],"rotation":[0.4972166419029236,-0.004830917343497276,0.8675335049629211,-0.011740361340343952],"used":true,"bodyHandle":1.92e-321,"linearSpeed":1.0008981096389869e-8,"angularVelocityHistory":[[-0.0008500979747623205,0.0000846289040055126],[-0.0008877789368852973,-0.000277794839348644],[-0.0006795005756430328,-0.0004111268208362162],[0.0007389290840364993,0.00016536623297724873],[-0.0009356343653053045,-0.00013837068399880081],[-0.00032694413675926626,-0.00005343837256077677],[-0.0004900848143734038,-0.000305122637655586],[0.00021305965492501855,0.0003146445960737765],[-0.00022970758436713368,-0.00008243830234277993],[-0.000047188565076794475,-0.00016826375212986022],[-0.000025414705305593088,-0.0002179472940042615]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.12376377731561661,0.17412620782852173,0.5522471070289612],"rotation":[0.130445659160614,0.006907281000167131,-0.9914286732673645,-0.002325809793546796],"used":true,"bodyHandle":1.927e-321,"linearSpeed":2.250222435376064e-10,"angularVelocityHistory":[[-0.00013764647883363068,0.0007620725664310157],[0.0001706048205960542,-0.0015488393837586045],[-0.0010596283245831728,0.0005748079274781048],[0.0014072032645344734,-0.0003827508189715445],[0.0005450196331366897,-0.0012910467339679599],[0.0014888792065903544,-0.00014803398516960442],[0.0006959832971915603,-0.00002438753108435776],[0.0011725586373358965,-0.00021682748047169298],[-0.001286140875890851,-0.00024475681129842997],[0.0015703708631917834,0.00021091880626045167],[0.005516585428267717,-0.0028199402149766684]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.23432022333145142,0.17985671758651733,0.6771073341369629],"rotation":[-0.031352631747722626,-0.0037319143302738667,-0.9995013475418091,0.00018946221098303795],"used":true,"bodyHandle":1.93e-321,"linearSpeed":1.1920060346799445e-8,"angularVelocityHistory":[[-0.0014124097069725394,-0.0021641466300934553],[-0.0003838085976894945,-0.0013115627225488424],[-0.0008264776552096009,0.00007031869608908892],[-0.0011755957966670394,-0.001277510542422533],[-0.0014915185747668147,0.000011934513167943805],[0.00028183558606542647,-0.0009533094125799835],[0.00012635138409677893,0.0005446739378385246],[-0.00040614636964164674,-0.0007614212809130549],[-0.00015844570589251816,-0.000010396201105322689],[-0.00022741177235729992,0.0004044535744469613],[-0.0005040468531660736,0.0013891988201066852]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.2888382375240326,0.1743987798690796,0.5398423671722412],"rotation":[-0.2326807826757431,-0.00044697843259200454,0.972542405128479,-0.004555783700197935],"used":true,"bodyHandle":1.937e-321,"linearSpeed":9.496268076621864e-11,"angularVelocityHistory":[[-0.0002405151753919199,-0.00026026705745607615],[-0.00025826337514445186,0.0005847206339240074],[-0.00044496601913124323,-0.0007797038997523487],[-0.0003417949774302542,-0.0003113467828370631],[0.0001873037836048752,-0.00022996387269813567],[0.00007022929639788345,-0.0005013066693209112],[0.00010410698450868949,-0.0003913012333214283],[-0.000010355739505030215,0.000645392865408212],[-0.0010534229222685099,-0.0012917148414999247],[-0.0003701244422700256,0.0003830757923424244],[-0.0018422058783471584,0.00032924386323429644]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.42288681864738464,0.17921359837055206,0.40673375129699707],"rotation":[-0.0010610315948724747,0.6077892780303955,0.001801062491722405,-0.7940956950187683],"used":true,"bodyHandle":1.94e-321,"linearSpeed":7.382349311478278e-11,"angularVelocityHistory":[[0.0002492542553227395,-0.00010637874220265076],[-0.0002543378504924476,0.0003053339314647019],[0.000022001811885274947,-0.000059063066146336496],[-0.00003093490158789791,0.00014418645878322423],[0.000017920368918566965,-0.0000061562604969367385],[-0.000002346479050174821,-0.0000663753307890147],[0.0003143001231364906,-0.00023413990857079625],[-0.00022815607371740043,0.0003054377739317715],[-0.0003120305191259831,-0.0000987836901913397],[-0.00007358152652159333,-0.0001659967820160091],[0.00003341252522659488,0.000015996445654309355]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.2694663107395172,0.17883354425430298,0.610317587852478],"rotation":[0.0040159947238862514,-0.10762938112020493,0.007632770109921694,-0.9941536784172058],"used":true,"bodyHandle":1.947e-321,"linearSpeed":1.6745030358093016e-7,"angularVelocityHistory":[[-0.001262539066374302,-0.0027105435729026794],[0.00016055717424023896,0.0006603178335353732],[0.0016751580405980349,-0.0005259144818410277],[0.0009684436372481287,0.000743980286642909],[0.0006423360900953412,0.0004671348724514246],[0.0009786796290427446,0.0010565373813733459],[0.0009929422521963716,-0.0008858214714564383],[0.00031231739558279514,-0.00008012689795577899],[0.0006454906542785466,-0.0007949591381475329],[0.00005369788050302304,-0.0000783269788371399],[0.0008105923770926893,-0.0012311985483393073]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.06209825351834297,0.20126770436763763,0.6356915235519409],"rotation":[0.0023117733653634787,-0.5170686841011047,-0.020422156900167465,-0.8556970357894897],"used":true,"bodyHandle":1.95e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.08109838515520096,-0.5051955580711365],[0.3286517560482025,0.08416756987571716],[0.35517972707748413,0.0686333030462265],[-0.11595680564641953,0.36745887994766235],[0.09543745219707489,0.0768018439412117],[-0.046615567058324814,-0.14671623706817627],[-0.03310684487223625,0.15266618132591248],[-0.28640395402908325,-0.263571172952652],[-0.07820814102888107,-0.11322371661663055],[0.016226230189204216,0.12468434125185013]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.32396450638771057,0.18010157346725464,0.7360509634017944],"rotation":[0.0005599557189270854,0.840471088886261,0.0017943800194188952,0.5418530702590942],"used":true,"bodyHandle":1.956e-321,"linearSpeed":6.234196961422581e-9,"angularVelocityHistory":[[0.00008702177728991956,0.00034024982596747577],[-0.0004847912641707808,-0.00012707577843684703],[0.0010243495926260948,0.00011999492562608793],[-0.0008393301395699382,-0.0004618806706275791],[-0.00007600047683808953,-0.00007219034887384623],[0.000042542593291727826,0.000008725522093300242],[0.0008547506877221167,-0.00025006805662997067],[-0.0004400976176839322,-0.0002927152963820845],[0.00026639283169060946,0.00008613985846750438],[0.00011539115075720474,-0.0001146074355347082],[0.0007361285970546305,-0.000013575568118540104]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.06066599860787392,0.2581324577331543,0.6340028047561646],"rotation":[0.0022484464570879936,-0.6666567325592041,0.02855163812637329,-0.7448143362998962],"used":true,"bodyHandle":1.96e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.2971325218677521,0.1274397075176239],[-0.2433595210313797,0.3984203338623047],[-0.21890628337860107,0.18922142684459686],[-0.1554872840642929,0.08270719647407532],[-0.16294462978839874,-0.007876629941165447],[-0.20101962983608246,0.14378046989440918],[0.15778855979442596,-0.06402092427015305],[0.0499073788523674,0.25806280970573425],[-0.13688242435455322,0.13949339091777802],[0.23184847831726074,-0.2099188268184662]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4702509045600891,0.1834595650434494,0.5046247839927673],"rotation":[0.035894911736249924,0.8148555755615234,-0.03142867982387543,0.5776972770690918],"used":true,"bodyHandle":1.966e-321,"linearSpeed":0.000040962959956684366,"angularVelocityHistory":[[-1.155465006828308,0.26617541909217834],[-2.1243271827697754,0.6859331727027893],[-0.18696177005767822,-0.22295472025871277],[2.3782129287719727,-0.2960638999938965],[0.6052480936050415,-1.2986751794815063],[-0.6544703245162964,0.7341687679290771],[0.15191790461540222,0.5332527756690979],[-0.1717485934495926,-0.2322361171245575],[-0.09917182475328445,-0.37029340863227844],[0.6029621362686157,0.20537106692790985],[-0.36530694365501404,0.5678961277008057]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.17600691318511963,0.17411093413829803,0.5169237852096558],"rotation":[0.00006125308573246002,-0.5780912041664124,-0.0037847356870770454,-0.8159633874893188],"used":true,"bodyHandle":1.97e-321,"linearSpeed":3.845752520501302e-10,"angularVelocityHistory":[[0.0010041831992566586,0.001106260227970779],[-0.001187167945317924,-0.0007583961705677211],[-0.0005136635736562312,0.001509766560047865],[-0.00024919837596826255,0.00012497427815105766],[-0.001038158661685884,0.0001705102768028155],[-0.001503409119322896,-0.0000615092649240978],[0.002411323832347989,0.00038361153565347195],[-0.0006114078569225967,-0.0006985569489188492],[-0.00367721077054739,0.00006798507820349187],[-0.0010670670308172703,0.00005973779479973018],[-0.0038075074553489685,0.0024349247105419636]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.062311090528964996,0.2008395791053772,0.704645574092865],"rotation":[0.0023132821079343557,0.8848670125007629,-0.0016640870599076152,-0.4658348858356476],"used":true,"bodyHandle":1.976e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.06340216100215912,0.015983300283551216],[0.030934583395719528,0.15061746537685394],[-0.06250806897878647,0.16768966615200043],[0.1299683302640915,0.23751267790794373],[0.007937557995319366,-0.12730839848518372],[0.109093576669693,-0.0611158050596714],[0.11877579987049103,0.11188052594661713],[0.08481144160032272,0.12730783224105835],[0.11425013095140457,-0.07406879961490631],[-0.09231218695640564,-0.19828097522258759]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.1659894734621048,0.17975454032421112,0.812101423740387],"rotation":[-0.0019128011772409081,0.8399824500083923,0.01293132547289133,-0.5424560904502869],"used":true,"bodyHandle":1.98e-321,"linearSpeed":2.0087743165163645e-10,"angularVelocityHistory":[[0.00004343108230386861,0.000587858201470226],[-0.000052671137382276356,0.00004572027683025226],[-0.0001513469178462401,0.0004148484149482101],[-0.00009773422789294273,0.00020329636754468083],[-0.000015004479791969061,0.0001749769871821627],[-0.00010494009620742872,-0.0000028910969831486],[-0.00012578698806464672,0.00021107560314703733],[-0.00012716975470539182,0.00007365147030213848],[0.00002562546796980314,0.00011658985749818385],[-0.00009395025699632242,-0.00004891731805400923],[-0.00004405051004141569,0.00009692853200249374]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.4612846076488495,0.1743406355381012,0.4553772211074829],"rotation":[-0.00020677485736086965,-0.9646806120872498,-0.002464128891006112,-0.263410747051239],"used":true,"bodyHandle":1.986e-321,"linearSpeed":1.0400449105612609e-9,"angularVelocityHistory":[[0.0003032832173630595,-0.0000011511131106090033],[0.00017850421136245131,0.0012965056812390685],[0.0000017544014099257765,0.000931355229113251],[0.000006412687071133405,0.0009512280812487006],[0.00017286199727095664,0.00040260356036014855],[-0.0001950225851032883,0.016397980973124504],[-0.00018943841860163957,0.00003425071554374881],[-0.00014570467465091497,-0.0040915347635746],[-0.0003241628292016685,-0.00028148607816547155],[-0.0003382852009963244,-0.002299138344824314],[0.0001873613946372643,0.000785855227150023]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.22812557220458984,0.1741594672203064,0.6546894907951355],"rotation":[-0.0034261438995599747,-0.08266512304544449,0.0011631979141384363,-0.9965707659721375],"used":true,"bodyHandle":1.99e-321,"linearSpeed":1.3238873801788284e-9,"angularVelocityHistory":[[-0.0016354359686374664,0.001896064030006528],[0.0009094225242733955,0.00006752353510819376],[-0.0000957367301452905,0.0007112734019756317],[-0.0010620512766763568,0.0021502666641026735],[-0.0004964927793480456,0.0010009650141000748],[-0.0004823044000659138,0.0007983819814398885],[-0.0002093573857564479,0.0003047222562599927],[-0.0010075318859890103,0.0006182514480315149],[-0.0001378266460960731,0.00012976402649655938],[0.000056628552556503564,0.00037434743717312813],[0.00004685852400143631,0.0005006121355108917]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.5153906345367432,0.17436671257019043,0.5526089072227478],"rotation":[0.0025780503638088703,-0.9954801201820374,0.0028926548548042774,0.0948907658457756],"used":true,"bodyHandle":1.996e-321,"linearSpeed":1.0897216244819865e-11,"angularVelocityHistory":[[-0.000017691550965537317,0.00002276811392221134],[-7.601030347359483e-7,-0.000013664744983543642],[-0.000002426625997031806,-0.000017364258383167908],[-0.000008198338036891073,-0.000027823791242553852],[4.268341768920436e-8,-0.00001028789938573027],[2.0726065486087464e-7,0.00007933657616376877],[0.00001540045559522696,0.0000017883456848721835],[-0.000002140106062142877,0.00005583763413596898],[-0.00001554449954710435,0.000036296460166340694],[2.728954768826952e-7,-0.000012704620530712418],[0.000010405150533188134,0.000018224835002911277]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.3975219130516052,0.19056567549705505,0.4699805676937103],"rotation":[-0.9244900345802307,0.0005698144668713212,-0.38120561838150024,-0.00013465095253195614],"used":true,"bodyHandle":2e-321,"linearSpeed":0.0000022964933567098924,"angularVelocityHistory":[[0.09558849036693573,-0.004733603447675705],[0.13433267176151276,0.010336608625948429],[0.08109375089406967,0.0041498164646327496],[0.06486009061336517,0.0025335829704999924],[0.06547203660011292,0.0062614865601062775],[-0.18621553480625153,0.01985854096710682],[-0.14191916584968567,-0.11583167314529419],[-0.1257738322019577,-0.07131323963403702],[-0.08551661670207977,-0.02326909266412258],[-0.11870621889829636,-0.04986363276839256],[-0.06158902868628502,-0.027486220002174377]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0003430702490732074,0.2008138746023178,0.7371760606765747],"rotation":[-0.013375743292272091,-0.9991892576217651,-0.006692144554108381,-0.0373774953186512],"used":true,"bodyHandle":2.006e-321,"linearSpeed":0,"angularVelocityHistory":[[0.06656333059072495,0.21479369699954987],[0.08720922470092773,0.06570781767368317],[0.15118137001991272,-0.14030872285366058],[-0.20952291786670685,-0.15407586097717285],[0.0770362839102745,-0.0033812238834798336],[0.45397379994392395,0.03003230132162571],[0.22360895574092865,-0.029827909544110298],[0.12150333821773529,-0.007331210654228926],[0.27514711022377014,-0.1942274570465088],[0.21913503110408783,0.06758937984704971]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.058339815586805344,0.19812089204788208,0.7033627033233643],"rotation":[-0.004216575995087624,-0.9374226331710815,-0.0007290079374797642,0.3481673002243042],"used":true,"bodyHandle":2.01e-321,"linearSpeed":0,"angularVelocityHistory":[[0.10872354358434677,-0.13076026737689972],[0.10255057364702225,0.12158738076686859],[0.05272865295410156,0.09895157814025879],[-0.04950330778956413,0.38302046060562134],[0.03465189039707184,0.1098562702536583],[0.2040967494249344,-0.03199002891778946],[0.3950876295566559,0.08781398087739944],[-0.04412689059972763,-0.1806730479001999],[0.1312919557094574,-0.08601969480514526],[-0.09604635834693909,0.11958286166191101]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.058300044387578964,0.2006683498620987,0.63760906457901],"rotation":[-0.0022916803136467934,0.7036327123641968,-0.009638466872274876,0.7104946970939636],"used":true,"bodyHandle":2.016e-321,"linearSpeed":0,"angularVelocityHistory":[[0.02903210185468197,0.007548305671662092],[0.004860435146838427,-0.09777410328388214],[-0.04577355831861496,-0.16750752925872803],[-0.206299290060997,0.08872201293706894],[-0.27176305651664734,-0.07144377380609512],[0.018092241138219833,0.04986356198787689],[-0.3156470060348511,0.04676578938961029],[-0.045964449644088745,0.007516043726354837],[-0.16604003310203552,0.11774437874555588],[-0.1105089858174324,-0.15369296073913574]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0027521459851413965,0.2014031857252121,0.6701854467391968],"rotation":[0.01247287169098854,-0.3450835645198822,-0.0050795371644198895,0.9384753704071045],"used":true,"bodyHandle":2.02e-321,"linearSpeed":0,"angularVelocityHistory":[[0.49228033423423767,-0.16286304593086243],[0.18018729984760284,-0.05549278110265732],[0.040986109524965286,-0.12939682602882385],[0.09509333968162537,0.13919252157211304],[0.0773070827126503,0.15380547940731049],[0.2320934683084488,0.1091146469116211],[-0.13169750571250916,-0.07105524092912674],[-0.05450155586004257,-0.05411749705672264],[-0.21020562946796417,0.029071388766169548],[0.16037259995937347,-0.1498183310031891]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.001035703462548554,0.20010805130004883,0.599142849445343],"rotation":[-0.009546724148094654,-0.8340646028518677,0.00109286408405751,0.5515829920768738],"used":true,"bodyHandle":2.026e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.14482446014881134,0.19740143418312073],[0.017266694456338882,0.17420978844165802],[-0.026672430336475372,0.16044527292251587],[-0.1098908931016922,-0.05773400142788887],[-0.02929754927754402,-0.22544005513191223],[-0.08341123908758163,-0.07675527781248093],[-0.06920497119426727,-0.2436714768409729],[0.45917317271232605,-0.0652204155921936],[-0.14907962083816528,0.08917654305696487],[0.3096097707748413,0.10584045946598053]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06202596426010132,0.20541737973690033,0.6330634951591492],"rotation":[-0.017347492277622223,-0.016729295253753662,-0.013440832495689392,0.99961918592453],"used":true,"bodyHandle":2.03e-321,"linearSpeed":0,"angularVelocityHistory":[[0.03945108503103256,0.002805329393595457],[-0.00795469805598259,-0.07865817099809647],[-0.07483337074518204,-0.24282243847846985],[-0.06580767780542374,0.1699429750442505],[-0.23026500642299652,-0.045927464962005615],[0.04106919839978218,0.11136141419410706],[-0.4191336929798126,0.018471650779247284],[-0.041661474853754044,-0.1746784746646881],[0.2279665768146515,-0.07807677984237671],[-0.12163067609071732,-0.3112623989582062]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4364102780818939,0.18091894686222076,0.6237926483154297],"rotation":[0.7717686891555786,0.0460527241230011,-0.6270817518234253,0.09497789293527603],"used":true,"bodyHandle":2.036e-321,"linearSpeed":0.000004075491683155146,"angularVelocityHistory":[[-1.33083975315094,-0.23609429597854614],[0.938965916633606,0.04526601731777191],[2.188439130783081,0.052664611488580704],[1.4174911975860596,0.5402455925941467],[-1.462754249572754,-0.1363459676504135],[-2.958901882171631,-0.1605711132287979],[-0.2726517617702484,0.006000207271426916],[1.3264106512069702,0.02086014859378338],[2.02274489402771,0.052992239594459534],[1.1031396389007568,0.4898710250854492],[-1.6427119970321655,-0.023427823558449745]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.46660736203193665,0.17457276582717896,0.7038754820823669],"rotation":[-0.004264865070581436,0.981437623500824,0.0001678523694863543,0.19173374772071838],"used":true,"bodyHandle":2.04e-321,"linearSpeed":1.0289858603157906e-9,"angularVelocityHistory":[[0.000028383741664583795,0.0004391256079543382],[-0.0005692457198165357,-0.0001321368181379512],[0.0019066680688410997,0.0018157580634579062],[-0.0019472100539132953,-0.0028198142535984516],[0.00028954586014151573,-0.00011762878420995548],[-0.001229225774295628,-0.0007182533154264092],[-0.0031917220912873745,-0.004843587055802345],[0.00010262314754072577,0.0014584099408239126],[-0.00020141713321208954,0.0009905647020787],[-0.002264477778226137,-0.0012152338167652488],[-0.004652122966945171,-0.004245679825544357]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4578188359737396,0.1795400083065033,0.44567105174064636],"rotation":[-0.840611457824707,-0.0023918882943689823,-0.5416289567947388,-0.0021821665577590466],"used":true,"bodyHandle":2.045e-321,"linearSpeed":4.7490312512352843e-7,"angularVelocityHistory":[[0.010000871494412422,-0.014085503295063972],[0.024488477036356926,-0.046430908143520355],[-0.27470025420188904,0.06569632142782211],[0.0194863211363554,-0.0265467781573534],[-0.002537625143304467,-0.005636658053845167],[0.0018122120527550578,0.030506186187267303],[-0.012019905261695385,0.02190074324607849],[0.01381402276456356,0.01380244828760624],[-0.01927328109741211,-0.0054829781875014305],[-0.012946199625730515,0.07913314551115036],[-0.02438916265964508,0.04281794652342796]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.1242654025554657,0.1836506873369217,0.6058070063591003],"rotation":[0.04785478487610817,0.32127845287323,-0.0190003402531147,0.9455839395523071],"used":true,"bodyHandle":2.05e-321,"linearSpeed":7.452666825011525e-7,"angularVelocityHistory":[[-0.03382453694939613,-0.03769499436020851],[-0.026400191709399223,-0.029354015365242958],[0.0001664840820012614,-0.0018832049099728465],[-0.02880534529685974,-0.023910867050290108],[0.1394353210926056,0.13212750852108002],[0.09097158163785934,0.0995187908411026],[0.03428075462579727,0.04330413416028023],[0.08099216222763062,0.0832400843501091],[0.02972186543047428,0.045092787593603134],[0.04692121595144272,0.050783731043338776],[0.018904568627476692,0.026303278282284737]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.27842023968696594,0.18553206324577332,0.7838466763496399],"rotation":[0.4987129271030426,-0.000005506075922312448,-0.8667670488357544,0.0005201074527576566],"used":true,"bodyHandle":2.055e-321,"linearSpeed":1.837747883833659e-11,"angularVelocityHistory":[[0.0013539355713874102,0.0006836212705820799],[0.00010626222501741722,-0.0012351038167253137],[-0.0004775409179273993,0.0006155021255835891],[-0.00007291296060429886,-0.0001566837017890066],[-0.00044673486263491213,-0.00037870893720537424],[-0.00022137250925879925,-0.00044516363414004445],[-0.0003075614513363689,0.00019833505211863667],[-0.0003388756886124611,-0.000050742626626743004],[-0.00026737104053609073,0.00015926900960039347],[-0.0001460909697925672,0.00024140739697031677],[-0.00012699642684310675,0.00041814957512542605]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.22592642903327942,0.17424947023391724,0.497700959444046],"rotation":[0.0009912148816511035,0.2122659832239151,-0.002791894134134054,0.9772074222564697],"used":true,"bodyHandle":2.06e-321,"linearSpeed":1.3709839299041362e-10,"angularVelocityHistory":[[0.000943255377933383,0.00003812436989392154],[-0.00020529169705696404,-0.0001977942738449201],[-0.0005291773122735322,0.00007048082625260577],[-0.0004608198651112616,0.000916732067707926],[-0.0008184873149730265,0.00030968600185588],[-0.001764019951224327,0.0012134149437770247],[-0.002022288041189313,0.0009428709163330495],[0.00025048694806173444,-0.00004659481055568904],[-0.0011552292853593826,0.00030070464708842337],[0.0001490626746090129,0.00036281932261772454],[-0.0011540595442056656,-0.00029323407215997577]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[-0.07138586789369583,0.18878918886184692,0.4607331156730652],"rotation":[-0.7088431715965271,-0.026917042210698128,-0.7044205665588379,-0.024665238335728645],"used":true,"bodyHandle":2.065e-321,"linearSpeed":1.3480125296371894e-8,"angularVelocityHistory":[[0.0001356612629024312,0.0008146960753947496],[-0.000016260200936812907,-0.001262590871192515],[-0.0004523076640907675,0.0010174536146223545],[0.0022321692667901516,0.03746978938579559],[0.0019516111351549625,0.008380629122257233],[-0.0009091256652027369,-0.013865629211068153],[0.0011862359242513776,0.005490678828209639],[0.0002018656232394278,0.005365801975131035],[0.0004253698280081153,0.003808189881965518],[0.000693247769959271,0.0005087237223051488],[-0.0021933342795819044,0.0015549244126304984]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4303297698497772,0.1740351766347885,0.44035786390304565],"rotation":[-0.8857191801071167,-0.0020039977971464396,0.4642046093940735,-0.003417177591472864],"used":true,"bodyHandle":2.07e-321,"linearSpeed":6.832286844226009e-9,"angularVelocityHistory":[[-0.003741790307685733,0.0022196087520569563],[-0.003606768324971199,0.004674260970205069],[0.013986371457576752,0.006036477629095316],[0.002529734978452325,-0.0005956671084277332],[-0.008440741337835789,0.005634110886603594],[-0.004201209172606468,0.007240351755172014],[-0.0016440952895209193,-0.002730016130954027],[0.008261987008154392,0.007319089025259018],[-0.008727661333978176,-0.0015107489889487624],[0.0038703405298292637,0.0013234695652499795],[0.0028816680423915386,-0.002305831992998719]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.15880657732486725,0.1745912730693817,0.829086422920227],"rotation":[-0.696925938129425,-0.0018903914606198668,0.7171406149864197,0.0002086750464513898],"used":true,"bodyHandle":2.075e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.00008814997272565961,-0.000011524663932505064],[0.00024127730284817517,-0.0001556051429361105],[0.000009628852239984553,-0.00006989052781136706],[0.000024123173716361634,-0.000012121371582907159],[0.00029026324045844376,-0.00016677445091772825],[0.00002381516787863802,-0.000002732396296778461],[0.000018403672584099695,-0.00003288594234618358],[0.0007023236830718815,-0.00033508596243336797],[0.0000343503343174234,0.0000017236033045264776],[0.000011257977348577697,-0.000013665043297805823],[0.00000396622408516123,0.00002936641249107197]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06127232313156128,0.20357082784175873,0.7057908177375793],"rotation":[0.008064703084528446,-0.7582984566688538,-0.010878249071538448,0.651766836643219],"used":true,"bodyHandle":2.08e-321,"linearSpeed":0,"angularVelocityHistory":[[0.073182612657547,-0.095120370388031],[-0.0032373324502259493,-0.08955612778663635],[-0.038504015654325485,0.6133355498313904],[0.2638295590877533,0.2661705017089844],[0.03598346188664436,0.054596737027168274],[0.09001576900482178,0.20247872173786163],[0.1883930265903473,0.1405429095029831],[-0.003970219753682613,-0.17086230218410492],[-0.08088928461074829,-0.08723421394824982],[-0.24805565178394318,0.22079412639141083]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0004932831507176161,0.20456859469413757,0.7374628782272339],"rotation":[-0.015468068420886993,-0.9439467191696167,-0.010122651234269142,-0.3295797109603882],"used":true,"bodyHandle":2.085e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.021439505741000175,0.24262134730815887],[0.09553954005241394,0.04564344510436058],[0.04292163997888565,-0.10597532242536545],[-0.5303058624267578,-0.04942679777741432],[0.19873453676700592,-0.13211748003959656],[0.45884689688682556,-0.011068333871662617],[0.23369860649108887,-0.046441297978162766],[0.10303836315870285,-0.09123106300830841],[0.36026281118392944,-0.10116676986217499],[0.20357179641723633,0.05565616115927696]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.059923455119132996,0.2015293836593628,0.7058815956115723],"rotation":[0.008039580658078194,0.8695626258850098,-0.001644928241148591,-0.49375444650650024],"used":true,"bodyHandle":2.09e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.16272883117198944,-0.03810560330748558],[0.12910096347332,0.14353805780410767],[-0.09537488967180252,0.16154634952545166],[0.33474019169807434,0.1878456026315689],[-0.11413368582725525,-0.13907074928283691],[-0.023145146667957306,-0.03371535986661911],[0.10262519121170044,0.10319436341524124],[0.07694956660270691,0.17405278980731964],[0.04883745685219765,-0.0012044275645166636],[-0.06923207640647888,-0.10421881824731827]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.34327754378318787,0.17410287261009216,0.43649545311927795],"rotation":[-0.8095073699951172,-0.002348919166252017,-0.5871014595031738,-0.002024031011387706],"used":true,"bodyHandle":2.095e-321,"linearSpeed":4.2438038121369107e-10,"angularVelocityHistory":[[0.0002066088345600292,-0.00011276698933215812],[0.0008430004236288369,-0.00026913065812550485],[-0.00010975723125739023,-0.00016294755914714187],[0.0008152748923748732,-0.0002214242413174361],[0.000639323319774121,-0.00040378025732934475],[0.000367445289157331,0.00008957846876000986],[0.0018814023351296782,0.000012388827599352226],[0.0004910411662422121,-0.0022120631765574217],[0.00014643243048340082,0.0017005059635266662],[0.0005623869365081191,0.0019376641139388084],[0.0011744654038920999,-0.002714530099183321]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[0.3324977457523346,0.1744769811630249,0.6372956037521362],"rotation":[-0.003868557047098875,0.9999208450317383,0.006681722588837147,0.009932950139045715],"used":true,"bodyHandle":2.1e-321,"linearSpeed":1.3315842023964768e-12,"angularVelocityHistory":[[-0.00190088024828583,0.0005435567582026124],[-0.00022342006559483707,0.000387144333217293],[-0.00012429803609848022,0.00021399365505203605],[0.0016933334991335869,-0.00012137126759625971],[0.0003385521122254431,-0.0003622195799835026],[0.000028450105673982762,-0.000552292272914201],[-0.00008317831088788807,-0.00010311864025425166],[0.00011952692875638604,-0.000007032255325611914],[-0.00006201607175171375,-0.000019968098058598116],[-0.00011620541044976562,-0.00008195704140234739],[-0.00005474846693687141,-0.00017145251331385225]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.4213937222957611,0.17387734353542328,0.4087665379047394],"rotation":[0.0003735022328328341,0.8197818994522095,0.0028227802831679583,-0.5726687908172607],"used":true,"bodyHandle":2.105e-321,"linearSpeed":5.021996534598808e-12,"angularVelocityHistory":[[-0.000051332535804249346,0.00015569642710033804],[0.0000769718099036254,0.00011492037447169423],[-0.00003248880966566503,-0.00006579032924491912],[0.00001996003084059339,0.000022218457161216065],[0.000004102940238226438,-0.000051580416766228154],[0.00006851451325928792,-0.0001369811943732202],[-0.00014195482071954757,0.000006686186225124402],[0.00006234238389879465,0.00034146395046263933],[-0.000008318061190948356,-0.00016978592611849308],[0.0000051786823860311415,0.00005771756332251243],[-0.00008022676774999127,-0.000018127646399079822]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.23502148687839508,0.1798119992017746,0.8477060794830322],"rotation":[-0.15244705975055695,0.013545963913202286,-0.9882177114486694,0.00144518306478858],"used":true,"bodyHandle":2.11e-321,"linearSpeed":6.273156304857257e-12,"angularVelocityHistory":[[-0.000009842828148975968,0.00006863933231215924],[-0.000056611112086102366,-0.000011710827493516263],[-0.00084819330368191,0.00041575252544134855],[0.0002844851987902075,-0.000011160198482684791],[0.000004061741037730826,0.00007686683238716796],[-0.0000037467843867489137,-0.00007825565990060568],[-0.000869346724357456,0.0003730622411239892],[0.0004421049088705331,-0.00007975060725584626],[0.00008581089787185192,0.000018690789147512987],[0.00003127163654426113,-0.000039393475162796676],[-0.0007175709470175207,0.00045388503349386156]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[0.1660146266222,0.1803242713212967,0.8374454975128174],"rotation":[0.09818822145462036,0.0019820460584014654,-0.995165228843689,0.0011365929385647178],"used":true,"bodyHandle":2.115e-321,"linearSpeed":0,"angularVelocityHistory":[[0.00009158001921605319,-0.00016772636445239186],[0.0003844401508104056,-0.00023820545175112784],[0.00004053645534440875,-0.00003998864849563688],[0.00009155957377515733,-0.00003568673855625093],[0.0003069717495236546,-0.0002598339051473886],[0.00007846033986425027,-0.000016551974113099277],[0.00008005997369764373,-0.00002471828702255152],[0.00015719060320407152,0.00004398371675051749],[0.00007071012805681676,-0.00005037059963797219],[0.000037500551115954295,-0.000014330305020848755],[0.000023522994524682872,-0.000025254948923247866]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.27264824509620667,0.1813773810863495,0.6884719729423523],"rotation":[-0.008286717347800732,-0.8461018204689026,-0.010954095050692558,-0.5328442454338074],"used":true,"bodyHandle":2.12e-321,"linearSpeed":1.857389334426789e-10,"angularVelocityHistory":[[-0.002082024933770299,0.0016408993396908045],[0.0006878578569740057,-0.0002739579067565501],[-0.002976612886413932,0.0015512382378801703],[0.004199461545795202,0.0011028333101421595],[0.0002271423436468467,-0.0010546986013650894],[-0.00046348728938028216,-0.0015613469295203686],[-0.00007222306885523722,-0.00015549626550637186],[0.00017623590247239918,-0.00027883026632480323],[0.0003501966712065041,-0.0001475944445701316],[0.00032243752502836287,-0.00027752708410844207],[-0.00014779939374420792,-0.0015837420942261815]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.29232078790664673,0.18015815317630768,0.46639102697372437],"rotation":[-0.0035637926775962114,-0.9005736708641052,0.0037563596852123737,0.4346725046634674],"used":true,"bodyHandle":2.124e-321,"linearSpeed":1.9065296809399612e-10,"angularVelocityHistory":[[-0.0000834128659334965,-0.00027486117323860526],[0.00010416105214972049,0.00007688332698307931],[-0.0006529145175591111,0.000760636234190315],[0.0004501863440964371,-0.00034989058622159064],[-0.000024073233362287283,0.000023565933588542975],[0.00006536026921821758,0.00008509158942615613],[-0.00010302702139597386,-0.00012102579057682306],[0.000010700617167458404,0.0001735310215735808],[-0.0001881421048892662,0.00047859508777037263],[-0.000033666252420516685,0.00005345101089915261],[0.00009763272100826725,0.00012653038720600307]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.337996244430542,0.17965686321258545,0.4460129737854004],"rotation":[0.004377619829028845,0.9866897463798523,-0.001134642749093473,-0.16255100071430206],"used":true,"bodyHandle":2.13e-321,"linearSpeed":1.279198128767276e-7,"angularVelocityHistory":[[-0.0026046358980238438,-0.0018028818303719163],[0.000001647203589527635,-0.00034264574060216546],[-0.0003615899186115712,0.0004432021814864129],[0.00028249286697246134,0.001172035001218319],[0.0008237057481892407,0.0018664769595488906],[0.0005495257209986448,-0.0007543872925452888],[-0.00021969580848235637,0.0036015950608998537],[-0.001913701999001205,-0.0035981154069304466],[-0.00046202627709135413,-0.003509694477543235],[-0.0007328863139264286,0.001163711422123015],[-0.0008196568232960999,0.0009415661916136742]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.1267460286617279,0.1884254813194275,0.5045557618141174],"rotation":[-0.007637559901922941,0.03604822978377342,0.060486920177936554,-0.9974886178970337],"used":true,"bodyHandle":2.134e-321,"linearSpeed":0.0000024262409344871488,"angularVelocityHistory":[[-0.0843779519200325,0.024909505620598793],[-0.0549883134663105,0.014531164430081844],[-0.09350019693374634,0.014111393131315708],[-0.10655909031629562,0.017614884302020073],[-0.10732872039079666,0.015444228425621986],[-0.11555502563714981,-0.0040592714212834835],[0.7464691400527954,-0.05263109877705574],[0.502892017364502,-0.14622905850410461],[-0.09530647844076157,0.014148777350783348],[-0.469196081161499,0.022623781114816666],[-0.5472211837768555,0.052502959966659546]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.28859058022499084,0.1744205206632614,0.46880075335502625],"rotation":[0.5496850609779358,-0.004119811579585075,-0.8353617191314697,-0.0002126045583281666],"used":true,"bodyHandle":2.14e-321,"linearSpeed":3.498577542129999e-12,"angularVelocityHistory":[[0.00019837319268845022,-0.0004111556045245379],[-0.00001355477979814168,0.00022022395569365472],[0.0012200433993712068,-0.0014096252853050828],[0.0007985804695636034,-0.0004862795176450163],[0.00020163689623586833,-8.356583407476137e-7],[0.000031480201869271696,0.00013313988165464252],[0.000029674505640286952,0.00026609524502418935],[0.00003724277121364139,0.00014086952432990074],[-0.0004417497548274696,0.0005569801433011889],[-0.0001241901481989771,0.00006597098399652168],[-0.00007682498835492879,-0.00007412709237542003]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[-0.07163933664560318,0.18314537405967712,0.46294939517974854],"rotation":[-0.7649050951004028,0.02129991352558136,0.643142580986023,-0.028879625722765923],"used":true,"bodyHandle":2.144e-321,"linearSpeed":1.7657548251790814e-8,"angularVelocityHistory":[[-0.0006027395138517022,0.0009079041774384677],[-0.00010740514699136838,-0.001134905032813549],[-0.001288107712753117,-0.002885285532101989],[-0.00029398873448371887,0.03448576480150223],[0.0011175884865224361,0.008251293562352657],[-0.00013290849165059626,-0.01229172758758068],[0.001959253568202257,0.0058968751691281796],[0.0006245510885491967,0.005039204843342304],[0.0007960291113704443,0.004253930877894163],[0.000504088297020644,0.0007620528340339661],[0.0033197966404259205,0.0026858006604015827]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.23646794259548187,0.1888609528541565,0.5576964616775513],"rotation":[-0.9936842322349548,0.00486016646027565,0.09991800040006638,0.050836700946092606],"used":true,"bodyHandle":2.15e-321,"linearSpeed":1.1765310174517022e-7,"angularVelocityHistory":[[-0.00019465670629870147,-0.00566249992698431],[-0.002598332241177559,0.00003059937080251984],[0.0015078408177942038,0.00009453813981963322],[-0.004470708314329386,-0.0024255025200545788],[0.0007076769834384322,0.0030515503603965044],[-0.0013733543455600739,-0.0006412906805053353],[0.0025440205354243517,0.0005027720471844077],[0.0011172000085934997,-0.0012297127395868301],[-0.0014734918950125575,-0.001732093864120543],[-0.004232444800436497,-0.0019152421737089753],[-0.008950118906795979,-0.013564945198595524]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.11651946604251862,0.17453445494174957,0.42780038714408875],"rotation":[-0.00325951911509037,-0.8949663043022156,-0.0016950129065662622,0.4461185932159424],"used":true,"bodyHandle":2.154e-321,"linearSpeed":1.926655826341859e-11,"angularVelocityHistory":[[-0.000013714561646338552,0.0009383894503116608],[-0.00021493331587407738,0.0002832715690601617],[-0.011181162670254707,0.0009910846129059792],[0.00005384894029702991,0.0001773434632923454],[-0.00012599697220139205,0.0004141775716561824],[-0.009723269380629063,0.0008162457379512489],[0.00007914276648079976,0.00024425581796094775],[-0.00014660359011031687,-0.0002521954302210361],[-0.0028674122877418995,0.0024674248415976763],[0.0001626781013328582,0.0002795365289784968],[0.00019250315381214023,0.00008171347144525498]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0021516967099159956,0.2585555911064148,0.6724008321762085],"rotation":[-0.02813604846596718,-0.35518789291381836,-0.007221350912004709,-0.9343435168266296],"used":true,"bodyHandle":2.16e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.22279563546180725,0.11189080029726028],[-0.3827671706676483,0.30574360489845276],[-0.10671450197696686,0.21699194610118866],[-0.12303846329450607,-0.02549103833734989],[-0.3003138601779938,-0.022694258019328117],[0.03304654359817505,-0.08012344688177109],[0.1427200883626938,-0.11472532153129578],[0.12356528639793396,0.030415397137403488],[0.028393058106303215,0.072994165122509],[0.11328063160181046,0.23866723477840424]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.14764276146888733,0.17724156379699707,0.6327334046363831],"rotation":[-0.9562925696372986,0.0011107386089861393,0.2923744022846222,0.004523165058344603],"used":true,"bodyHandle":2.164e-321,"linearSpeed":9.823470728943338e-9,"angularVelocityHistory":[[-0.00019331133808009326,0.0003515703429002315],[-0.00027240189956501126,0.00009931954991770908],[-0.000505032658111304,0.00024702149676159024],[0.00002368862806179095,0.00006954844866413623],[-0.00011229013034608215,0.000031054445571498945],[0.0004249613266438246,0.0003693272592499852],[-0.000014540170013788156,0.00026680907467380166],[-0.0011747744865715504,-0.00017557197134010494],[-0.0009296161006204784,-0.00029409644776023924],[0.0008398043573834002,0.0016347459750249982],[-0.002265195595100522,0.00031017334549687803]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[0.3863484859466553,0.1742965281009674,0.40118834376335144],"rotation":[-0.005755695980042219,-0.895421028137207,0.00016277257236652076,-0.44518306851387024],"used":true,"bodyHandle":2.17e-321,"linearSpeed":7.219620548471457e-11,"angularVelocityHistory":[[0.00040354515658691525,0.0017854635370895267],[0.00020675960695371032,0.0005012430483475327],[-0.000553466088604182,0.00005675073043676093],[0.002354398602619767,0.003545124316588044],[0.0012486058985814452,-0.0003221960214432329],[0.001063745585270226,0.001401205314323306],[0.0037268190644681454,-0.0022166951093822718],[0.0014839458744972944,0.0008766919490881264],[0.0009737738291732967,0.0013848240487277508],[-0.0017793005099520087,0.0038899872452020645],[-0.00020709871023427695,0.0007210953044705093]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.2507619559764862,0.17788344621658325,0.42439940571784973],"rotation":[0.05863310396671295,-0.5709483623504639,-0.006393962539732456,0.8188645839691162],"used":true,"bodyHandle":2.174e-321,"linearSpeed":1.5408999575530949e-10,"angularVelocityHistory":[[-0.0005472409538924694,0.0003242259845137596],[-0.002337300917133689,0.0029114075005054474],[0.00249876850284636,-0.005787537898868322],[-0.001680283690802753,0.002299331594258547],[0.00018087451462633908,-0.00009973821579478681],[-0.0010624261340126395,0.002769751474261284],[0.005797696299850941,-0.010116358287632465],[-0.0016533605521544814,0.0020447582937777042],[0.00021984841441735625,0.0010142860701307654],[0.0002381067315582186,-0.00045362545643001795],[0.005087341647595167,-0.01033587846904993]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.4844232201576233,0.17802125215530396,0.6546496748924255],"rotation":[-0.2117931991815567,-0.0016912012360990047,-0.9767283797264099,0.033799562603235245],"used":true,"bodyHandle":2.18e-321,"linearSpeed":2.0383469467138095e-9,"angularVelocityHistory":[[-0.010053612291812897,0.0037951702252030373],[-0.007388207595795393,0.00368775543756783],[-0.006982530001550913,0.0017814660677686334],[-0.006678306497633457,0.000446866120910272],[0.007983323186635971,0.0013587756548076868],[-0.00011878945952048525,-0.00006863810995128006],[-0.000284079258562997,0.0009026288171298802],[0.0003976847801823169,0.0030370510648936033],[0.00032101766555570066,0.003062009811401367],[0.0005495025543496013,-0.0007566168205812573],[0.0009354664944112301,-0.0007881609490141273]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[0.37301987409591675,0.17399649322032928,0.45863422751426697],"rotation":[0.0021695257164537907,0.013859677128493786,-0.0011852879542857409,0.9999008774757385],"used":true,"bodyHandle":2.184e-321,"linearSpeed":1.3352637411389674e-11,"angularVelocityHistory":[[0.0017893521580845118,-0.001539638382382691],[-0.0012273151660338044,0.002089013811200857],[0.0033867398742586374,0.00315787922590971],[0.001494806376285851,0.00029996244120411575],[0.0025797372218221426,-0.0026483696419745684],[-0.0008347248076461256,0.004661461804062128],[-0.0010922813089564443,-0.004730109125375748],[0.0035401436034590006,0.000625514832790941],[0.0008044026326388121,-0.002619993407279253],[-0.0013821205357089639,0.0015456454129889607],[0.002407054416835308,-0.0016861367039382458]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.39589110016822815,0.1852400302886963,0.533331036567688],"rotation":[0.850455641746521,-0.003105410374701023,0.526036262512207,0.0011239707237109542],"used":true,"bodyHandle":2.19e-321,"linearSpeed":1.8949653234991563e-7,"angularVelocityHistory":[[-0.0004759033035952598,0.0003889747313223779],[-0.00047218482359312475,-0.00023565588344354182],[-0.0011103703873232007,-0.0012067758943885565],[-0.0008859632071107626,-0.0010972641175612807],[-0.00016273286018986255,-0.00029733884730376303],[-0.0005568302003666759,0.0005701255286112428],[-0.0010557664791122079,-0.0005729732802137733],[0.0004522722156252712,0.0000876537524163723],[-0.0011094610672444105,0.0008037101360969245],[-0.0008384247194044292,0.00038643984589725733],[0.00005210539166000672,-0.0000841860455693677]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.45946797728538513,0.18521857261657715,0.4437219202518463],"rotation":[0.9883045554161072,0.0004823401104658842,0.15243689715862274,0.004111496265977621],"used":true,"bodyHandle":2.194e-321,"linearSpeed":2.3850123486839994e-7,"angularVelocityHistory":[[0.013791091740131378,-0.019368061795830727],[0.02389218658208847,-0.051362354308366776],[-0.03186479210853577,-0.020494867116212845],[0.015065034851431847,-0.03396816551685333],[0.0005876694340258837,-0.00898053403943777],[0.004893734119832516,0.019372306764125824],[-0.01669316552579403,0.0207261573523283],[0.011017803102731705,0.009846873581409454],[-0.005905665922909975,-0.00958358496427536],[-0.017792263999581337,0.07209861278533936],[-0.018654435873031616,0.04082004725933075]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.17534297704696655,0.17447617650032043,0.42652711272239685],"rotation":[-0.7333858609199524,-0.0010705766035243869,0.6798115968704224,0.0004414038558024913],"used":true,"bodyHandle":2.2e-321,"linearSpeed":7.025529852173415e-10,"angularVelocityHistory":[[-0.00022237752273213118,0.0006054418627172709],[-0.00029371888376772404,0.0002706815430428833],[0.003862647106871009,0.009411133825778961],[-0.0002736160531640053,0.00021758911316283047],[-0.0002900086692534387,0.00044372319825924933],[0.002591528929769993,0.00915028527379036],[-0.000036960613215342164,-0.00008338950283359736],[-0.00009151260746875778,0.0001486632536398247],[0.001040220377035439,0.005799581296741962],[-0.00045705976663157344,0.00023558879911433905],[-0.00006537929584737867,-0.00008651406824355945]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.12968771159648895,0.17962689697742462,0.6856439113616943],"rotation":[0.004165735095739365,-0.7236207723617554,0.0002578320272732526,-0.6901851296424866],"used":true,"bodyHandle":2.204e-321,"linearSpeed":5.3247717829244574e-8,"angularVelocityHistory":[[-0.0017609372735023499,0.0024781159590929747],[-0.0011819959618151188,0.0017417041817680001],[-0.0017652519745752215,0.0017536720260977745],[-0.0008198238792829216,0.003973498474806547],[-0.0006646385882049799,0.0011860295198857784],[-0.0002445991849526763,0.0022368698846548796],[-0.000603085441980511,0.001210560672916472],[0.00021788108278997242,0.0005391131271608174],[-0.0006836192333139479,0.0009402753785252571],[-0.000940854602959007,0.00043567089596763253],[-0.0008720754412934184,0.0006515717250294983]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.27424371242523193,0.1821378469467163,0.6277283430099487],"rotation":[-0.33934351801872253,0.0013929686974734068,0.9406587481498718,0.0022557456977665424],"used":true,"bodyHandle":2.21e-321,"linearSpeed":1.8402846847423385e-9,"angularVelocityHistory":[[0.00040300560067407787,-0.00009032976959133521],[-0.00044700043508782983,0.00019469211110845208],[0.0005816627526655793,0.00017182572628371418],[-0.0004291875520721078,-0.0001676538959145546],[-0.0006074637058191001,0.00016768997011240572],[-0.00035860840580426157,-0.0003444007015787065],[-0.00005710811819881201,-0.0001236435491591692],[-0.0002139346906915307,-0.00040837848791852593],[-0.0004357120196800679,0.0006225986289791763],[-0.000021959644072921947,-0.0000806898606242612],[-0.0007730746292509139,-0.0008090792689472437]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[0.10494046658277512,0.18479683995246887,0.5671617388725281],"rotation":[0.006140592973679304,0.7466008067131042,0.016463058069348335,0.6650402545928955],"used":true,"bodyHandle":2.213e-321,"linearSpeed":1.221640677254731e-7,"angularVelocityHistory":[[-0.0016642557457089424,0.0005476854275912046],[-0.008515988476574421,-0.0009145985241048038],[0.0009848619811236858,0.0004563632537610829],[-0.004595109261572361,-0.0022362913005053997],[-0.0023013947065919638,0.0024687936529517174],[-0.006750038359314203,-0.004070367198437452],[0.001251806621439755,0.0009868628112599254],[-0.0040842462331056595,0.001582677592523396],[0.007111148908734322,0.0015309585724025965],[0.023263750597834587,-0.010467246174812317],[-0.005833144765347242,-0.003352508880198002]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.24699342250823975,0.1830410659313202,0.5557549595832825],"rotation":[0.04772095009684563,0.5489991903305054,0.021707631647586823,0.8341770172119141],"used":true,"bodyHandle":2.22e-321,"linearSpeed":9.268563760227337e-8,"angularVelocityHistory":[[0.0001171458134194836,-0.004894680343568325],[-0.0056953816674649715,0.00038142933044582605],[0.002480320865288377,0.00013743348245043308],[-0.005249362904578447,-0.0019138597417622805],[0.0006651218282058835,0.0027594452258199453],[-0.0010419472819194198,0.0002318200859008357],[0.0032115476205945015,0.0008939880644902587],[-0.00047479328350163996,-0.0005829755682498217],[0.0025648772716522217,-0.001982400892302394],[-0.006170649081468582,-0.0009124110220000148],[-0.011580895632505417,-0.010891950689256191]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.12283559143543243,0.18434885144233704,0.7752101421356201],"rotation":[0.054086606949567795,0.9381723403930664,-0.011935453861951828,-0.3417087495326996],"used":true,"bodyHandle":2.223e-321,"linearSpeed":6.990204783493125e-8,"angularVelocityHistory":[[0.1700206696987152,-0.3155306279659271],[-0.026299327611923218,0.10015633702278137],[-0.0171737652271986,0.0014210366643965244],[-0.007493418175727129,0.006827169097959995],[-0.005871890112757683,0.006888677831739187],[-0.006100622937083244,0.0064713978208601475],[-0.005927220452576876,0.006736726500093937],[-0.005266230553388596,0.006904846057295799],[-0.006010772660374641,0.007124240975826979],[-0.011931645683944225,0.00824976060539484],[-0.018253684043884277,0.0092963557690382]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.17183561623096466,0.17419607937335968,0.5222008228302002],"rotation":[-0.000814529659692198,0.7885086536407471,-0.0024906438775360584,-0.6150180697441101],"used":true,"bodyHandle":2.23e-321,"linearSpeed":1.9960398158403627e-9,"angularVelocityHistory":[[0.00020869282889179885,0.00008220221934607252],[0.00006950356328161433,0.000254883780144155],[0.0015335448551923037,0.0015030551003292203],[-0.003640583949163556,-0.009042644873261452],[-0.0010677656391635537,-0.0021447043400257826],[-0.0019122883677482605,-0.0027502994053065777],[-0.0010768232168629766,-0.0010829610982909799],[-0.00010482277139090002,0.0009391774656251073],[-0.0016228148015215993,-0.002284119138494134],[-0.000019131861336063594,0.0016096894396468997],[-0.0026553759817034006,-0.006655415054410696]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.2736605703830719,0.1859547644853592,0.7223132252693176],"rotation":[0.010026750154793262,0.12337762862443924,0.011923993937671185,0.9922375082969666],"used":true,"bodyHandle":2.233e-321,"linearSpeed":5.57086495748038e-10,"angularVelocityHistory":[[-0.0028484708163887262,0.0008794910390861332],[-0.00016391818644478917,-0.001545952633023262],[-0.005265089683234692,0.0020178311970084906],[0.005640562158077955,-0.0022421609610319138],[0.00045293220318853855,-0.0006851992220617831],[0.0003164535155519843,-0.0011916699586436152],[-0.00020744620996993035,0.00009902032616082579],[0.00046679985825903714,-0.0006328094168566167],[0.00006453620153479278,-0.0002480203111190349],[-0.00024312720051966608,-0.0006539640598930418],[-0.0006150319240987301,-0.0006800869014114141]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.21031852066516876,0.18669016659259796,0.6258472204208374],"rotation":[-0.3135998547077179,0.020949164405465126,0.9493194222450256,0.002961824182420969],"used":true,"bodyHandle":2.24e-321,"linearSpeed":8.500712022449502e-9,"angularVelocityHistory":[[-0.00010234217916149646,-0.002954268828034401],[-0.0009217034094035625,-0.002206338569521904],[-0.00042674897122196853,-0.0006952453404664993],[-0.00016690895427018404,-0.0022782094310969114],[0.000006995556304900674,-0.0028880289755761623],[-0.0007737657288089395,-0.002183707198128104],[-0.00010823746561072767,-0.0006118676392361522],[0.0005589972715824842,-0.0010752844391390681],[0.00007551489397883415,0.00047445748350583017],[0.0014447103021666408,0.0005046474980190396],[-0.00019419137970544398,-0.004705030936747789]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[0.182088240981102,0.18420040607452393,0.5443392992019653],"rotation":[-0.9815248847007751,-0.00033988477662205696,-0.1905062198638916,0.017776435241103172],"used":true,"bodyHandle":2.243e-321,"linearSpeed":4.994210528911686e-8,"angularVelocityHistory":[[0.008213905617594719,0.004783695563673973],[0.00400112010538578,0.003623022697865963],[0.007246729917824268,0.0023986739106476307],[0.007251974195241928,0.003553796326741576],[0.00981435552239418,0.0035146591253578663],[0.008524345234036446,0.0029454976320266724],[0.0017530737677589059,-0.003081764094531536],[0.02867300994694233,0.003240270307287574],[0.04043326899409294,0.013414072804152966],[0.0006154228467494249,0.02771034650504589],[0.02805289626121521,0.013449392281472683]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.21104328334331512,0.17460843920707703,0.3728380799293518],"rotation":[-0.8184932470321655,0.0004675530653912574,0.5745158195495605,0.00018884442397393286],"used":true,"bodyHandle":2.25e-321,"linearSpeed":9.15789863632908e-12,"angularVelocityHistory":[[0.00012642702495213598,0.00046435685362666845],[0.00012966383656021208,0.000012399649676808622],[-0.000023582897483720444,0.0008126138127408922],[0.000043431311496533453,0.000056332377425860614],[-0.00006453376408899203,0.00010305628529749811],[0.00032049239962361753,0.0014028154546394944],[0.00022764505411032587,0.00004011114651802927],[0.0002744346857070923,-0.00004536149208433926],[0.0012681097723543644,0.0015380062395706773],[-0.00018427408940624446,0.00020172765653114766],[-0.00022731118951924145,0.00008999916462926194]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[0.27434492111206055,0.17970511317253113,0.7605000138282776],"rotation":[-0.0007714746170677245,0.3080306351184845,-0.004122601356357336,-0.9513671398162842],"used":true,"bodyHandle":2.253e-321,"linearSpeed":4.535481330933982e-11,"angularVelocityHistory":[[0.0002214893465861678,-0.00015073773101903498],[0.0006969994283281267,-0.0017610134091228247],[-0.0011297205928713083,0.0013363425387069583],[0.0017281788168475032,-0.001426619477570057],[-0.0007717900443822145,-0.0004227333702147007],[-0.00013532476441469043,-0.0010514614405110478],[-0.0003010491782333702,0.0002468556631356478],[-0.0001552813919261098,-0.00006066195055609569],[-0.00018137074948754162,0.00010385990026406944],[-0.00006411263893824071,0.00017740472685545683],[-0.0005934751825407147,0.0005334976594895124]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.16531139612197876,0.1798696517944336,0.5470660328865051],"rotation":[-0.0005855737836100161,0.7683568000793457,0.0005115980166010559,-0.6400212049484253],"used":true,"bodyHandle":2.26e-321,"linearSpeed":1.2127987585640977e-7,"angularVelocityHistory":[[-0.0001451161951990798,-0.001682265312410891],[-0.00019475915178190917,-0.0012461859732866287],[0.005968273151665926,0.003787235589697957],[0.0025223083794116974,-0.001215893542394042],[0.004432303830981255,0.009409336373209953],[0.000009536761353956535,0.0020725447684526443],[0.005405819974839687,0.0018148511881008744],[0.0035876764450222254,0.0003759526589419693],[0.0048965392634272575,-0.004628280643373728],[0.0012930366210639477,0.0006642377120442688],[0.0006951712421141565,-0.0020053896587342024]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.09770997613668442,0.19080159068107605,0.22546806931495667],"rotation":[0.0773119106888771,0.018493471667170525,0.9959145188331604,-0.042837709188461304],"used":true,"bodyHandle":2.263e-321,"linearSpeed":1.443929610516342e-9,"angularVelocityHistory":[[0.0008147225016728044,0.0020173611119389534],[0.0012978584272786975,0.0015630944399163127],[-2.1753690759851452e-7,0.0007896267925389111],[-0.00004900600833934732,0.0004982317914254963],[0.00035361520713195205,0.0006352629861794412],[-0.000039650862163398415,0.00018513343820814043],[0.0006507051875814795,0.0004103178798686713],[0.00014072364137973636,-0.00016701534332241863],[0.0004454546142369509,0.000488550984300673],[0.00020578103431034833,0.00035801820922642946],[0.00035009998828172684,-0.00022381044982466847]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.1804533749818802,0.17409425973892212,0.5771223902702332],"rotation":[-0.8696044087409973,-0.002166302176192403,-0.49373576045036316,-0.002897427650168538],"used":true,"bodyHandle":2.27e-321,"linearSpeed":6.384797787057634e-11,"angularVelocityHistory":[[0.0013999254442751408,0.00034673314075917006],[-0.000680068857036531,0.0009553268318995833],[0.0015342709375545382,0.0009374873479828238],[0.0002546502510085702,0.000987686449661851],[-0.0009053372777998447,0.0006990023539401591],[-0.0010132271563634276,0.0006940521416254342],[0.0010791728273034096,0.00010459683835506439],[-0.0015516980784013867,0.00047990522580221295],[-0.0020820642821490765,-0.000814950093626976],[0.0014714461285620928,-0.0005869368906132877],[-0.006224622949957848,0.003819327102974057]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[-0.222783163189888,0.17997467517852783,0.523560643196106],"rotation":[-0.4065420627593994,0.0011072300840169191,-0.9136305451393127,-0.0012102966429665685],"used":true,"bodyHandle":2.273e-321,"linearSpeed":2.2671371359123045e-8,"angularVelocityHistory":[[0.0008497178205288947,-0.0005532947252504528],[-0.00023501503164879978,-0.00024948149803094566],[0.0004720870638266206,-0.0009302406688220799],[0.0008317005122080445,-0.0009243366657756269],[-0.001283835619688034,-0.0026730357203632593],[-0.0018215328454971313,-0.002133887493982911],[-0.0007301441510207951,-0.0021152659319341183],[0.00011024903506040573,-0.001375913736410439],[0.00006522090552607551,-0.0021628718823194504],[-0.0011292787967249751,0.0006112277624197304],[-0.0016881966730579734,-0.0012079761363565922]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.1624201089143753,0.19187073409557343,0.5185502767562866],"rotation":[-0.019945219159126282,-0.4975413382053375,0.011635767295956612,-0.867132842540741],"used":true,"bodyHandle":2.28e-321,"linearSpeed":4.029600464234091e-7,"angularVelocityHistory":[[-0.09910061955451965,0.005792252253741026],[-0.1362311840057373,-0.0010943114757537842],[-0.17722028493881226,-0.011227566748857498],[-0.20141585171222687,-0.010948101058602333],[-0.2037096917629242,-0.011255195364356041],[-0.1970994621515274,-0.018143199384212494],[0.5757610201835632,0.15449529886245728],[0.9723377823829651,0.15911731123924255],[0.6978756189346313,0.04369156435132027],[-1.3610376119613647,-0.429401695728302],[-0.7863723039627075,-0.06520961970090866]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.1231573224067688,0.1795211285352707,0.5581945180892944],"rotation":[0.014482855796813965,-0.30147185921669006,-0.0039548808708786964,0.953356921672821],"used":true,"bodyHandle":2.283e-321,"linearSpeed":3.510339824007338e-9,"angularVelocityHistory":[[-0.0009609045227989554,0.0003329657774884254],[-0.0037800006102770567,-0.0009067928185686469],[0.0005084728472866118,-0.00007507788541261107],[-0.0018920722650364041,-0.0010057619074359536],[-0.0007314299582503736,0.0006123835337348282],[-0.0024293549358844757,-0.0025404319167137146],[0.0004586431314237416,0.0008695216965861619],[-0.0011604927713051438,0.0006406311294995248],[0.0033866900485008955,-0.00013982954260427505],[0.011921490542590618,-0.004278545267879963],[-0.0004623476415872574,-0.0035080660600215197]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.4217737913131714,0.18461765348911285,0.4058127999305725],"rotation":[0.0003254145849496126,-0.2366030514240265,-0.004095548763871193,-0.9715976715087891],"used":true,"bodyHandle":2.288e-321,"linearSpeed":6.195884099033053e-11,"angularVelocityHistory":[[0.0006236188928596675,0.00010051543358713388],[-0.0007421407499350607,-0.00001851769229688216],[0.00020178956037852913,0.0001259489799849689],[-0.00026452011661604047,-0.00026451938902027905],[-0.000017962463971343823,0.0000017931994307218702],[-0.00013345148181542754,-0.0004508374258875847],[0.0008097884710878134,-0.0002276122831972316],[-0.0005746606620959938,-0.00028560764621943235],[0.00018713001918513328,0.0015553378034383059],[-0.00033487880136817694,-0.0007535009062848985],[0.00040076966979540884,0.0005348670529201627]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[0.06663793325424194,0.17431232333183289,0.503543496131897],"rotation":[0.0002644701162353158,0.9953670501708984,0.0017108044121414423,0.09613221138715744],"used":true,"bodyHandle":2.29e-321,"linearSpeed":8.864869020806493e-11,"angularVelocityHistory":[[0.0022344104945659637,0.0024750158190727234],[-0.0003198415506631136,0.00027572514954954386],[0.0010955033358186483,0.0013366352068260312],[0.0020088835153728724,0.0008970077615231276],[0.0014257029397413135,0.0012368315365165472],[0.0008294901344925165,0.0006929791998118162],[-0.00017487733566667885,-0.0033392193727195263],[-0.00201878952793777,-0.0014479262754321098],[-0.000010062303772429004,0.0021626849193125963],[0.001651419443078339,0.0011638789437711239],[0.0041076429188251495,0.006661536637693644]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.1660996973514557,0.18731361627578735,0.577488362789154],"rotation":[-0.04290106147527695,0.971163809299469,0.11878050863742828,-0.2022165060043335],"used":true,"bodyHandle":2.297e-321,"linearSpeed":9.556274969492712e-8,"angularVelocityHistory":[[0.004172284621745348,-0.000459789065644145],[0.004438541829586029,-0.007950859144330025],[0.004427807871252298,-0.0006690663867630064],[0.0032229148782789707,-0.004168969113379717],[-0.00457252562046051,-0.005428684875369072],[-0.0013361361343413591,-0.007490416057407856],[0.004150709602981806,0.001703486661426723],[0.0050444514490664005,-0.0009501821477897465],[-0.007772115990519524,-0.005373258143663406],[-0.06187022477388382,0.001994735561311245],[0.02532176859676838,-0.004219456575810909]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06046636402606964,0.202727273106575,0.6367128491401672],"rotation":[0.016102273017168045,-0.6809631586074829,-0.0009867572225630283,-0.7321399450302124],"used":true,"bodyHandle":2.3e-321,"linearSpeed":0,"angularVelocityHistory":[[0.007607213221490383,-0.31469208002090454],[0.5866691470146179,0.1337878704071045],[0.30113717913627625,0.06683234870433807],[0.008895663544535637,-0.11000984907150269],[0.033771056681871414,0.056587956845760345],[0.015862325206398964,-0.21168220043182373],[-0.05620090663433075,0.16797766089439392],[-0.3084228038787842,-0.29109078645706177],[-0.06463159620761871,-0.11593720316886902],[-0.011535410769283772,0.21659258008003235]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3955468237400055,0.17916081845760345,0.46783506870269775],"rotation":[0.0029727215878665447,0.3044368028640747,0.008531692437827587,0.9524896740913391],"used":true,"bodyHandle":2.307e-321,"linearSpeed":2.678272897325247e-7,"angularVelocityHistory":[[-0.0005989495548419654,0.012308185920119286],[0.02361489087343216,-0.0145547641441226],[0.009736280888319016,-0.014263993129134178],[0.006293040234595537,0.032559145241975784],[0.00032014650059863925,0.027757486328482628],[-0.008002777583897114,-0.03465332090854645],[-0.0011688107624650002,0.019940657541155815],[-0.002280451124534011,0.009051589295268059],[-0.002386665903031826,0.010138792917132378],[0.009960218332707882,0.008170096203684807],[-0.011233998462557793,-0.00460833590477705]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.08319347351789474,0.18560485541820526,0.5040283799171448],"rotation":[-0.098275326192379,-0.0021976418793201447,0.995072066783905,0.01298863161355257],"used":true,"bodyHandle":2.31e-321,"linearSpeed":1.203631003631437e-7,"angularVelocityHistory":[[-0.023834114894270897,-0.011864934116601944],[0.0011793008306995034,-0.0044974335469305515],[-0.004541037604212761,-0.0017766450764611363],[-0.01459798589348793,-0.006086602341383696],[-0.012248292565345764,-0.004365065600723028],[-0.010179177857935429,0.004439485725015402],[0.006822000257670879,0.0042185247875750065],[0.03618346527218819,0.028285225853323936],[-0.017613882198929787,-0.0025771213695406914],[-0.028963373973965645,0.01844245195388794],[-0.05854673311114311,-0.007725394796580076]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.15110540390014648,0.1744093894958496,0.37259945273399353],"rotation":[0.8960878849029541,0.0032276716083288193,-0.44386184215545654,-0.0016704254085198045],"used":true,"bodyHandle":2.317e-321,"linearSpeed":2.678126429602515e-9,"angularVelocityHistory":[[-0.0005020789103582501,0.0002840108936652541],[-0.00012871413491666317,-0.0004704104794654995],[-0.0037718999665230513,0.0019160639494657516],[0.000005785891062259907,-0.00013907924585510045],[-0.00010974048200296238,-0.0002217975415987894],[-0.0033292716834694147,0.001915321801789105],[0.00041695183608680964,-0.0005509487236849964],[0.000685824838001281,-0.0006847579497843981],[-0.002233173931017518,0.002092078560963273],[0.00013683224096894264,-0.000011323222679493483],[-0.00023844825045671314,0.000009822128959058318]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[0.3244868814945221,0.1741458624601364,0.41569066047668457],"rotation":[0.6901723742485046,-0.007928907871246338,-0.7235968112945557,-0.0026147321332246065],"used":true,"bodyHandle":2.32e-321,"linearSpeed":1.788883751010111e-10,"angularVelocityHistory":[[-0.0001094088947866112,0.000012187843822175637],[-0.00020473678887356073,0.000014726261724717915],[0.00001223993967869319,0.00007819438906153664],[-0.00003403554728720337,0.00008263572817668319],[0.000016165722627192736,0.000022143412934383377],[0.00000849164916871814,-0.00002881680120481178],[-0.00003635045504779555,0.0000018542477846494876],[-0.000043822416046168655,0.00008772253204369918],[0.00007479330815840513,0.00002638973091961816],[-0.0001018419861793518,0.00008980974234873429],[0.00018162194464821368,0.000001302666078117909]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.09912367165088654,0.17436276376247406,0.3447723388671875],"rotation":[-0.9361196160316467,-0.0016708410112187266,-0.35164108872413635,0.005078165326267481],"used":true,"bodyHandle":2.327e-321,"linearSpeed":2.6771439623385385e-8,"angularVelocityHistory":[[-0.018145659938454628,0.005272174719721079],[-0.003623264841735363,-0.008294276893138885],[0.0019428401719778776,-0.011971722356975079],[-0.012475349009037018,0.0066566127352416515],[-0.004919991362839937,-0.008730405010282993],[0.0012918467400595546,-0.012029713951051235],[-0.006289251614362001,0.003874855348840356],[-0.0077818999998271465,-0.00823077280074358],[-0.001742349355481565,-0.01445457898080349],[-0.0060013155452907085,0.0023097044322639704],[-0.009888571687042713,-0.012225222773849964]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.39891910552978516,0.1796984076499939,0.40482640266418457],"rotation":[0.9106927514076233,-0.006301497109234333,-0.413027822971344,-0.002640114864334464],"used":true,"bodyHandle":2.33e-321,"linearSpeed":4.2645081534447176e-8,"angularVelocityHistory":[[-0.0019224577117711306,0.0029983704444020987],[0.000023631715521332808,0.003710418241098523],[0.00027975908596999943,-0.0006399375852197409],[-0.004588472191244364,0.0063582672737538815],[-0.0005007118452340364,0.003529610577970743],[-0.0026977984234690666,0.007768356241285801],[0.0016491839196532965,0.003790882183238864],[0.0011639415752142668,0.0005617549759335816],[-0.0007116281776688993,0.0014789022970944643],[0.0009927967330440879,0.003068688791245222],[-0.00025085717788897455,0.002683919621631503]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.21475139260292053,0.1814706027507782,0.7253379225730896],"rotation":[0.012938098050653934,-0.43686044216156006,-0.008990970440208912,0.8993912935256958],"used":true,"bodyHandle":2.337e-321,"linearSpeed":2.4575174357078754e-9,"angularVelocityHistory":[[-0.0032933501061052084,0.0009039232973009348],[0.001355467364192009,-0.0012130149407312274],[-0.003917390946298838,-0.0007104240939952433],[0.0011554630473256111,-0.0005472888587974012],[0.00034444750053808093,0.00047342877951450646],[0.0009551257826387882,0.00023491887259297073],[-0.0004119268269278109,0.00015281686501111835],[0.00011789102427428588,0.00011628671200014651],[-0.00023778932518325746,0.00010748879140010104],[-0.0002885711146518588,-0.0001149313902715221],[0.0005483790882863104,-0.00048326680553145707]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.4028993844985962,0.184848815202713,0.46842125058174133],"rotation":[0.000751991115976125,-0.9770719408988953,0.0004544756084214896,-0.21290743350982666],"used":true,"bodyHandle":2.34e-321,"linearSpeed":9.121767214480443e-7,"angularVelocityHistory":[[0.10995052009820938,0.008708739653229713],[0.13257083296775818,0.016920728608965874],[0.08317416161298752,0.01063899602741003],[0.06598403304815292,0.007165674585849047],[0.06261616200208664,0.008560559712350368],[-0.21430733799934387,-0.004774684086441994],[-0.16317202150821686,-0.10161902755498886],[-0.1367134153842926,-0.06210736185312271],[-0.09565490484237671,-0.02471705712378025],[-0.11505389958620071,-0.04206743836402893],[-0.06507110595703125,-0.024660365656018257]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.10626775771379471,0.1739511787891388,0.5364693999290466],"rotation":[0.092608742415905,-0.00027155125280842185,-0.9956981539726257,-0.0029543284326791763],"used":true,"bodyHandle":2.347e-321,"linearSpeed":9.784335213450292e-9,"angularVelocityHistory":[[0.0025633987970650196,0.003389693796634674],[0.0017924488056451082,0.0020304410718381405],[-0.009645259939134121,0.00033310000435449183],[-0.012322389520704746,-0.010279636830091476],[-0.00012709267321042717,-0.001137953600846231],[-0.003210428636521101,0.0024796449579298496],[0.00010330565419280902,-0.006609725765883923],[-0.0010449518449604511,0.0035667119082063437],[-0.0020846230909228325,-0.009176705963909626],[0.0010511473519727588,0.005763472989201546],[-0.005158922169357538,-0.0047645773738622665]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3960004150867462,0.18454515933990479,0.47255900502204895],"rotation":[0.005686083342880011,-0.42535099387168884,-0.01250511221587658,-0.9049241542816162],"used":true,"bodyHandle":2.35e-321,"linearSpeed":3.754334337652344e-7,"angularVelocityHistory":[[-0.0022834674455225468,0.011275751516222954],[0.02394160069525242,-0.013907996006309986],[0.013127857819199562,-0.010908601805567741],[-0.00025001069298014045,0.0264491755515337],[-0.002975078299641609,0.025637025013566017],[-0.00125969504006207,-0.029112452641129494],[-0.0036693220026791096,0.01641790010035038],[-0.00520500959828496,0.007897421717643738],[-0.0026057411450892687,0.009499908424913883],[0.007864144630730152,0.005066534038633108],[-0.010253744199872017,-0.0024690323043614626]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.09621724486351013,0.17421303689479828,0.7900111079216003],"rotation":[0.004622369538992643,0.9306291341781616,-0.004185511730611324,-0.36591047048568726],"used":true,"bodyHandle":2.357e-321,"linearSpeed":3.0530662509974724e-10,"angularVelocityHistory":[[-0.0048910509794950485,0.0007491029682569206],[0.0005416254862211645,-0.00025330440257675946],[-0.0005277334712445736,-0.002081385813653469],[0.0006397151737473905,-0.0007764751790091395],[0.001642361981794238,-0.0008150661597028375],[0.0008198092691600323,-0.00007982416718732566],[0.0011600872967392206,-0.00032629372435621917],[0.0003999397449661046,-0.000019567904018913396],[0.000499865913297981,-0.00004973390241502784],[0.0005885825958102942,-0.00009019037679536268],[0.0004520010552369058,-0.00009781426342669874]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[0.024117277935147285,0.1859949380159378,0.34418144822120667],"rotation":[-0.7869960069656372,0.013446112163364887,-0.60776287317276,0.10526513308286667],"used":true,"bodyHandle":2.36e-321,"linearSpeed":0.0000025484407541055067,"angularVelocityHistory":[[0.0023797021713107824,0.005855381488800049],[-0.032285142689943314,0.03323686122894287],[-0.011303459294140339,0.013267646543681622],[0.008449878543615341,0.05369790270924568],[-0.020822051912546158,0.028282564133405685],[0.01212237123399973,-0.0367969274520874],[0.03304464742541313,-0.016187600791454315],[-0.01608886383473873,0.02540750615298748],[0.00013104797108098865,0.011820841580629349],[0.0024837986566126347,0.019915297627449036],[0.011831158772110939,-0.018232204020023346]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.23088040947914124,0.18017616868019104,0.785984218120575],"rotation":[0.4754660129547119,-0.001811724971048534,0.879729151725769,0.0022984787356108427],"used":true,"bodyHandle":2.367e-321,"linearSpeed":5.908695022287357e-10,"angularVelocityHistory":[[0.00011875822383444756,0.00022427458316087723],[-0.00025628943694755435,-0.00041026450344361365],[0.0016236224910244346,0.0013636351795867085],[-0.0031933921854943037,-0.003991556819528341],[0.00029589427867904305,0.0002838207292370498],[-0.0001050951614161022,-0.00033097094274125993],[0.0014624047325924039,0.001177490339614451],[-0.0024879102129489183,-0.0028943780343979597],[0.00024312529421877116,0.00025793525855988264],[-0.0002257311571156606,-0.0003617497277446091],[0.0014789035776630044,0.0012627647956833243]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.050500981509685516,0.18110552430152893,0.316630095243454],"rotation":[0.06666938215494156,-0.7623127698898315,-0.044599827378988266,0.6422189474105835],"used":true,"bodyHandle":2.37e-321,"linearSpeed":0.0000019995310679391294,"angularVelocityHistory":[[-0.0036490061320364475,-0.0024610827676951885],[-0.007940426468849182,0.019914660602808],[0.014396932907402515,0.01139517966657877],[0.015614859759807587,-0.025034001097083092],[-0.0005951538332737982,0.010193875059485435],[0.006904313340783119,-0.016494525596499443],[0.0174119770526886,-0.04711088910698891],[-0.0038587902672588825,0.021674999967217445],[-0.009051132015883923,0.017577780410647392],[0.0077609955333173275,-0.011200186796486378],[0.010017399676144123,-0.009033678099513054]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.142422616481781,0.18017537891864777,0.3664802014827728],"rotation":[-0.0015419198898598552,-0.1924956738948822,-0.002747716847807169,-0.981292724609375],"used":true,"bodyHandle":2.376e-321,"linearSpeed":5.0453682401094045e-9,"angularVelocityHistory":[[0.0001500778744230047,0.0008281233604066074],[0.00022094286396168172,-0.00047511528828181326],[-0.0021180182229727507,-0.0002580131113063544],[0.000020342560674180277,0.0009017068077810109],[0.0002290611737407744,0.000056750850490061566],[-0.0011537133250385523,-0.00018694093159865588],[-0.0003267710853833705,0.0006120349280536175],[0.0003689235309138894,-0.0004915575846098363],[0.0002330396237084642,-0.0011260866886004806],[-0.00012516007700469345,-0.0007667375612072647],[-0.0000783826326369308,-0.000020806111933779903]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[0.3323364853858948,0.17786936461925507,0.6767122149467468],"rotation":[-0.9568549394607544,-0.021512214094400406,0.2827851176261902,0.0632326602935791],"used":true,"bodyHandle":2.38e-321,"linearSpeed":1.1193269071682214e-10,"angularVelocityHistory":[[-0.004576848354190588,-0.0036269293632358313],[-0.00027309637516736984,0.001660774345509708],[0.00008692162373336032,-0.001990255666896701],[0.0023945998400449753,0.0000621966173639521],[-0.0001448024995625019,0.0009267954737879336],[-0.0007027313113212585,-0.0001713298261165619],[0.00030542194144800305,0.0021427073515951633],[0.000534640799742192,0.003536627860739827],[0.000018730688680079766,0.0024495264515280724],[0.00018179327889811248,0.0023203708697110415],[-0.00015594087017234415,0.00045242285705171525]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.12453582137823105,0.17766469717025757,0.6082947850227356],"rotation":[0.9947130680084229,-0.036035213619470596,0.08933036029338837,-0.03560066968202591],"used":true,"bodyHandle":2.386e-321,"linearSpeed":4.4341500877381635e-7,"angularVelocityHistory":[[-0.03191828355193138,-0.039144955575466156],[-0.0256362147629261,-0.030928097665309906],[0.0014653420075774193,-0.001499550649896264],[-0.034986887127161026,-0.02062031999230385],[0.14491401612758636,0.13694238662719727],[0.07878755033016205,0.11528908461332321],[0.040568504482507706,0.04703567177057266],[0.07973221689462662,0.08507763594388962],[0.03452572226524353,0.04654240980744362],[0.04565676301717758,0.053144969046115875],[0.022023804485797882,0.02906041406095028]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3277026116847992,0.17970553040504456,0.41635069251060486],"rotation":[-0.0007151202880777419,-0.7689051628112793,0.023963946849107742,-0.6389132142066956],"used":true,"bodyHandle":2.39e-321,"linearSpeed":2.1767879130078742e-8,"angularVelocityHistory":[[-0.00003667893906822428,-0.0001050141072482802],[0.0003613444569054991,0.0007430327823385596],[0.00011573026131372899,-0.00012685063120443374],[0.00019442207121755928,-0.00024869077606126666],[0.000025059949621208943,0.00035064498661085963],[0.00009088428487302735,-0.0005069797043688595],[-0.000050626167649170384,0.00021348554582800716],[0.0005119298584759235,0.001172661897726357],[0.00010651125921867788,-0.00029778099269606173],[-0.00005737808169214986,-0.00018250386347062886],[0.00008086029993137345,0.0002859083760995418]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.4307159185409546,0.19009149074554443,0.40602144598960876],"rotation":[-0.0043677594512701035,0.9992324113845825,-0.001113660866394639,-0.03891457989811897],"used":true,"bodyHandle":2.396e-321,"linearSpeed":8.436260678914204e-11,"angularVelocityHistory":[[0.0006210228311829269,0.00010609196760924533],[-0.0007418541936203837,-0.000007403293693641899],[0.00023446741397492588,0.00015759284724481404],[-0.00024159313761629164,-0.00025414067204110324],[-0.00000903307955013588,0.00004254356463206932],[-0.0001501877122791484,-0.00045549514470621943],[0.0008753444999456406,-0.0002480453113093972],[-0.000539882224984467,-0.0002991750661749393],[0.0002707939129322767,0.0016915914602577686],[-0.0003241220547351986,-0.0008016605279408395],[0.00051173783140257,0.0006317408406175673]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.2694193720817566,0.17442847788333893,0.3846375048160553],"rotation":[-0.9906403422355652,-0.002600578824058175,0.1364392340183258,0.0030461351852864027],"used":true,"bodyHandle":2.4e-321,"linearSpeed":3.3454432930385253e-12,"angularVelocityHistory":[[-0.0005099357222206891,0.0005781830404885113],[0.00013148659490980208,-0.0005193380056880414],[-0.0005456974031403661,0.0017469320446252823],[0.00012186907406430691,-0.000551228818949312],[-0.00009797627717489377,0.00016478396719321609],[0.00012228071864228696,0.00018304788682144135],[-0.0004228482430335134,0.0010202944977208972],[0.0005414642510004342,-0.0007902596844360232],[0.00017289622337557375,0.00021733816538471729],[-0.00009923595644067973,0.000021645493688993156],[-0.0005747650866396725,0.0010629292810335755]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.28036436438560486,0.1742742955684662,0.4268682301044464],"rotation":[0.0009535387507639825,0.2383711338043213,-0.0027204174548387527,-0.9711698293685913],"used":true,"bodyHandle":2.406e-321,"linearSpeed":1.2231629825784576e-10,"angularVelocityHistory":[[0.0008521017152816057,-0.00026535673532634974],[-0.0001484228268964216,-0.0002456748625263572],[0.00024252462026197463,0.0005681893089786172],[0.0006069987430237234,-0.00015271882875822484],[0.00002712120840442367,0.00011318348697386682],[0.00024789091548882425,0.00004293972597224638],[-0.00019012443954125047,-0.00015273834287654608],[0.00025426465435884893,0.00021546820062212646],[0.00021956361888442189,-0.0003241078811697662],[0.000036360230296850204,-0.0000492843973916024],[0.00006075785859138705,-0.00011720324982888997]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.005184296518564224,0.18227596580982208,0.26852479577064514],"rotation":[-0.46281129121780396,0.0037297061644494534,-0.8864464163780212,-0.0021232475992292166],"used":true,"bodyHandle":2.41e-321,"linearSpeed":1.6817031380763003e-13,"angularVelocityHistory":[[0.000011207301213289611,-0.000016877469533937983],[-0.0000069858979259151965,-0.00001994860213017091],[0.000006184005997056374,-0.000013254939403850585],[0.000019665854779304937,-0.000023790473278495483],[-0.000006822636350989342,-0.000004031716798635898],[-0.000006349865088850493,-0.000015991645341273397],[-0.00000141837153933011,-0.000019098475604550913],[0.000004035870006191544,-0.00002016484722844325],[0.00000411452992921113,-0.000012881176189694088],[-5.884646725462517e-7,-0.00002511048842279706],[0.0000089682989710127,-0.000015509680451941676]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.0143263665959239,0.1741706281900406,0.3728540241718292],"rotation":[0.9974797368049622,0.008750791661441326,0.0702613890171051,-0.004568280652165413],"used":true,"bodyHandle":2.416e-321,"linearSpeed":3.773488470847285e-9,"angularVelocityHistory":[[-0.0070831081829965115,0.0017966862069442868],[-0.01088814064860344,-0.002699333243072033],[0.004042415879666805,-0.003502889070659876],[-0.005155667196959257,0.0026229675859212875],[-0.0042910268530249596,-0.0023393433075398207],[-0.005412260536104441,-0.005042366683483124],[-0.0007843972998671234,0.004285583738237619],[-0.0034235757775604725,-0.000022736108803655952],[-0.0004038087499793619,-0.0011130761122331023],[-0.004362364765256643,-0.00018981643370352685],[-0.0039421571418643,0.0031703426502645016]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.16358648240566254,0.1846887469291687,0.6585975289344788],"rotation":[0.016069307923316956,-0.7265552282333374,0.016296112909913063,-0.6867267489433289],"used":true,"bodyHandle":2.42e-321,"linearSpeed":0.0000020353303669010076,"angularVelocityHistory":[[-0.009483235888183117,0.002373787574470043],[-0.0062669082544744015,0.0012357528321444988],[0.0007566201384179294,0.0011289076646789908],[-0.004105007741600275,0.0033150366507470608],[-0.0010389134986326098,0.00045678907190449536],[-0.0052680522203445435,0.002141198143362999],[0.003333802567794919,0.001962637063115835],[-0.004129250068217516,0.0010408851085230708],[0.0014289526734501123,0.0008274770225398242],[-0.0028248948510736227,-0.0019377574790269136],[-0.0016114352038130164,-0.0028701326809823513]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.16170832514762878,0.17667052149772644,0.6900106072425842],"rotation":[-0.3454325497150421,0.0014657636638730764,-0.9384421706199646,-0.0006569994729943573],"used":true,"bodyHandle":2.426e-321,"linearSpeed":4.743037053261931e-9,"angularVelocityHistory":[[0.0004717717529274523,-0.00004119047298445366],[-0.00010954707977361977,0.00005727025563828647],[0.0005410900339484215,0.0000069129732764849905],[0.0007741334848105907,-0.0005426314892247319],[-0.00004339032238931395,0.0006381574203260243],[-0.000008349496965820435,0.00028159539215266705],[0.000008550747224944644,0.000009294422852690332],[-0.00023296114522963762,0.00006956153811188415],[0.000029355895094340667,-0.00015203369548544288],[0.0013209372991696,0.0006345728761516511],[0.0015167646342888474,0.00009364272409584373]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.08571936190128326,0.18446670472621918,0.5511839985847473],"rotation":[-0.9591102004051208,0.0068488954566419125,0.2828325629234314,0.008143802173435688],"used":true,"bodyHandle":2.43e-321,"linearSpeed":0.000012486391190129486,"angularVelocityHistory":[[0.029559757560491562,0.0374768003821373],[0.02408088929951191,0.033091772347688675],[-0.03480660542845726,-0.12577073276042938],[-0.039629016071558,0.03759324178099632],[-0.066539466381073,-0.045119475573301315],[-0.047518160194158554,-0.05663527175784111],[-0.03219274431467056,0.0007863189675845206],[-0.03745194897055626,-0.038638174533843994],[-0.014510678127408028,0.004486274439841509],[-0.02912219427525997,-0.03172381594777107],[-0.008657261729240417,-0.0010715322569012642]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.29576799273490906,0.1744578629732132,0.6710614562034607],"rotation":[-0.9590707421302795,-0.002039653481915593,0.2831514775753021,0.0021173679269850254],"used":true,"bodyHandle":2.436e-321,"linearSpeed":1.4708791590571e-11,"angularVelocityHistory":[[0.0003884006291627884,0.0004149357264395803],[-0.00013999069051351398,-0.00017473340267315507],[0.00030202497146092355,0.00038409658009186387],[0.00014685123460367322,0.0001630936749279499],[0.000642402854282409,0.00020335630688350648],[0.00001395742583554238,-0.000060668509831884876],[-0.00007012944115558639,0.00008678163430886343],[-0.00016808327927719802,-0.00011923445708816871],[-0.000034514276194386184,-0.000025149529392365366],[-0.000021158184608793817,-0.00007448568067047745],[0.00035038695205003023,0.0002461465774103999]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.10426482558250427,0.17926272749900818,0.5409979820251465],"rotation":[-0.9068230390548706,0.006087720859795809,-0.42146408557891846,0.0016781706362962723],"used":true,"bodyHandle":2.44e-321,"linearSpeed":6.413900441540086e-7,"angularVelocityHistory":[[0.014083259738981724,0.020161345601081848],[0.011774270795285702,0.01708829216659069],[-0.021504445001482964,-0.05651557445526123],[-0.025960108265280724,0.014570902101695538],[-0.03191174194216728,-0.015713846310973167],[-0.02658947929739952,-0.018878785893321037],[-0.013507084921002388,-0.004150599706918001],[-0.019204074516892433,-0.01165860053151846],[-0.006565263960510492,-0.004185512196272612],[-0.015254514291882515,-0.00751549331471324],[-0.005881272256374359,-0.003607952268794179]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.018413536250591278,0.1780150979757309,0.3851027488708496],"rotation":[-0.9977928996086121,-0.033640362322330475,-0.04902122914791107,0.029571199789643288],"used":true,"bodyHandle":2.446e-321,"linearSpeed":5.314036113231009e-7,"angularVelocityHistory":[[0.01761753484606743,-0.020893504843115807],[0.0019625702407211065,-0.010868794284760952],[-0.003262254875153303,0.01668713614344597],[0.01168622262775898,-0.034487076103687286],[0.02040177956223488,-0.04682023450732231],[0.003855931805446744,-0.005701406858861446],[0.01685350015759468,-0.023207321763038635],[0.026141399517655373,-0.026794439181685448],[0.016126008704304695,-0.0025934544391930103],[0.005779858212918043,-0.020388629287481308],[0.042491473257541656,-0.05191023275256157]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.11628025025129318,0.18515591323375702,0.5126241445541382],"rotation":[0.4446030557155609,0.15000829100608826,0.8830726146697998,-0.0028854766860604286],"used":true,"bodyHandle":2.45e-321,"linearSpeed":0.000003461307368671127,"angularVelocityHistory":[[-0.009367293678224087,0.005803817883133888],[-0.008470369502902031,0.005962309893220663],[0.043132372200489044,-0.02149084210395813],[-0.006708379369229078,0.0062530008144676685],[0.013154907152056694,-0.012648689560592175],[0.011308480054140091,-0.0033371273893862963],[0.0040337382815778255,-0.007523640524595976],[0.00805133581161499,-0.0014742326457053423],[-0.0015401601558551192,-0.006807186175137758],[0.007381471339613199,0.0028636418282985687],[-0.003868489759042859,-0.005684006027877331]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.14309370517730713,0.17681577801704407,0.30708974599838257],"rotation":[-0.7946950197219849,-0.017456481233239174,0.6061862707138062,0.026329368352890015],"used":true,"bodyHandle":2.456e-321,"linearSpeed":2.3672645371966193e-11,"angularVelocityHistory":[[-0.00006825183663750067,0.00033177700242958963],[-0.0005168870557099581,-0.0006332250777631998],[-0.0005173204117454588,0.00008858106593834236],[0.0003895437403116375,0.00009332656190963462],[-0.0005272479029372334,-0.00037648435682058334],[-0.0006169804255478084,0.0003920934395864606],[0.00002798072819132358,0.00015605484077241272],[0.0006369561888277531,-0.0003437731065787375],[-0.00031624891562387347,0.000018108974472852424],[0.0005234912969172001,0.00034534887527115643],[-0.00004159684613114223,0.0002968532789964229]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[0.09872189909219742,0.182442307472229,0.2556377053260803],"rotation":[-0.15388186275959015,-0.0028167907148599625,0.9880843758583069,-0.0013152342289686203],"used":true,"bodyHandle":2.46e-321,"linearSpeed":1.4693920990339353e-10,"angularVelocityHistory":[[0.00006663466774625704,-0.00012643830268643796],[-0.00008416744822170585,-0.000037854257243452594],[-0.000017341915736324154,-0.00008169586362782866],[0.0001911157596623525,-0.00010726053005782887],[-0.000008527587851858698,-0.000015841180356801488],[-0.000041365972720086575,-0.00007104667747626081],[0.00006523339834529907,-0.00006876963016111404],[-0.00006091597970225848,-0.00005077687819721177],[-0.00010299048153683543,-0.0000375207127945032],[0.00028855749405920506,-0.0002166395861422643],[-0.0002095745730912313,-0.00008913062629289925]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.17679423093795776,0.17437469959259033,0.46244221925735474],"rotation":[0.705284833908081,0.0013530206633731723,0.7089108228683472,-0.004108283668756485],"used":true,"bodyHandle":2.465e-321,"linearSpeed":2.4270628575594516e-11,"angularVelocityHistory":[[-0.0000858441781019792,0.000022355445253197104],[-0.00007977240602485836,-0.0001011830972856842],[0.0031104604713618755,-0.00048557986156083643],[-0.0018333022017031908,0.0001631977065699175],[-0.0021972095128148794,0.0006826362223364413],[-0.0007607390289194882,-0.00009761582623468712],[-0.0020939589012414217,-0.0008278052555397153],[-0.0003421881119720638,0.00019313767552375793],[-0.0027824167627841234,-0.0007250467897392809],[0.00020502482948359102,-0.0003320628893561661],[-0.002127466956153512,-0.00007661386916879565]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4084239900112152,0.1851603090763092,0.3991074860095978],"rotation":[-0.0055922879837453365,-0.04780195280909538,-0.011756714433431625,0.9987719655036926],"used":true,"bodyHandle":2.47e-321,"linearSpeed":4.382547262443616e-8,"angularVelocityHistory":[[0.0013724324526265264,0.0016936856554821134],[-0.0006524057826027274,0.003742651781067252],[-0.0007217983365990222,-0.00038170075276866555],[-0.0027154746931046247,0.003910835832357407],[0.00035358298919163644,0.0033696198370307684],[0.00028918482712469995,0.0068708425387740135],[0.0023703230544924736,0.005981855094432831],[-0.000734340981580317,0.003121927846223116],[0.0009809889597818255,0.001885467441752553],[-0.0020783869549632072,0.0049519664607942104],[-0.0005820007063448429,0.003428208641707897]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.1678178459405899,0.17435568571090698,0.38545992970466614],"rotation":[-0.7049205303192139,-0.0007141461246646941,-0.7092691659927368,0.004879984073340893],"used":true,"bodyHandle":2.475e-321,"linearSpeed":3.800520799687329e-10,"angularVelocityHistory":[[0.00046926186769269407,-2.742811204825557e-7],[-0.00008648425136925653,-0.00009812021744437516],[-0.0006337087834253907,0.0005778836202807724],[0.0004975979682058096,0.000036093388189328834],[0.0003068898804485798,-0.00037462625186890364],[0.0010724838357418776,-0.0005457421648316085],[0.00029905192786827683,0.0002751089632511139],[0.0003373298968654126,0.00004637055462808348],[0.0010079750791192055,-0.0013547861017286777],[-0.0021536860149353743,0.00016391093959100544],[0.0022198448423296213,-0.003236236050724983]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.07883954793214798,0.17792941629886627,0.3786764442920685],"rotation":[-0.00653101596981287,0.8805983066558838,0.058045778423547745,0.4702495336532593],"used":true,"bodyHandle":2.48e-321,"linearSpeed":0.000010251529120248644,"angularVelocityHistory":[[0.019298819825053215,-0.058398544788360596],[0.004244275391101837,-0.025404395535588264],[-0.04225778207182884,0.0701667070388794],[0.022977212443947792,-0.054315775632858276],[0.0034791056532412767,-0.027206897735595703],[-0.04255981370806694,0.06551683694124222],[0.022035611793398857,-0.04375077039003372],[0.004968263208866119,-0.037979669868946075],[-0.010276847518980503,0.010086788795888424],[0.017367392778396606,-0.04410652816295624],[-0.011480623856186867,-0.02511974610388279]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.003792516654357314,0.18459552526474,0.3933808505535126],"rotation":[-0.9930304288864136,-0.02638290822505951,0.11118708550930023,0.02884182706475258],"used":true,"bodyHandle":2.485e-321,"linearSpeed":0.0000026019834846322945,"angularVelocityHistory":[[0.020175540819764137,-0.03448278829455376],[0.013058288022875786,-0.0016992096789181232],[-0.033440832048654556,0.03987717255949974],[0.00961317028850317,-0.059981152415275574],[0.027309438213706017,-0.055617913603782654],[-0.017726074904203415,-0.004628078546375036],[0.03978453204035759,-0.04268492013216019],[0.03270919620990753,-0.047919224947690964],[-0.007097200490534306,0.004383652005344629],[0.013044724240899086,-0.037996869534254074],[0.03405710682272911,-0.07121405750513077]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.07484649866819382,0.1736162304878235,0.48460203409194946],"rotation":[0.01525033637881279,0.021901898086071014,0.0003708198491949588,-0.9996437430381775],"used":true,"bodyHandle":2.49e-321,"linearSpeed":7.129229453194208e-10,"angularVelocityHistory":[[0.00029154616640880704,-0.0005127184558659792],[0.00003571494380594231,-0.00008102460560621694],[0.00023766043887007982,0.0017944739665836096],[-0.002743283985182643,-0.007002654951065779],[0.00005525451706489548,-0.00010907217802014202],[0.0006387449102476239,0.008518492802977562],[-0.00006019183274474926,-0.0016419094754382968],[0.0000956989752012305,0.0014711773255839944],[-0.0016385739436373115,-0.0004477922630030662],[0.0009800582192838192,0.000989551655948162],[-0.002543835900723934,0.0006540065514855087]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.24298009276390076,0.17651845514774323,0.32296788692474365],"rotation":[0.02560310997068882,-0.4659667909145355,-0.014223301783204079,0.8843172788619995],"used":true,"bodyHandle":2.495e-321,"linearSpeed":5.073893233960908e-11,"angularVelocityHistory":[[0.000028878481316496618,0.0001239740231540054],[-0.00000722353706805734,0.00013044652587268502],[0.00005558536577154882,0.000038704256439814344],[-0.000043785352318082005,0.00026629489730112255],[0.000027483632948133163,0.00002791074621200096],[-7.677824100937869e-7,0.0000405990649596788],[0.00016963679809123278,0.00027262174990028143],[-0.00008869256998877972,0.0001265195751329884],[-0.00008537621761206537,-0.00013448443496599793],[0.00008621207962278277,0.000304798420984298],[0.00001561173667141702,-0.00005809003414469771]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[-0.22279442846775055,0.1742009073495865,0.4137665033340454],"rotation":[0.002203223528340459,-0.7039729356765747,-0.002245114417746663,-0.7102197408676147],"used":true,"bodyHandle":2.5e-321,"linearSpeed":7.143045668988478e-11,"angularVelocityHistory":[[0.0006056433194316924,-0.00041224859887734056],[-0.00020810330170206726,-0.00003575949085643515],[0.00015304154658224434,0.00048697032616473734],[0.0007453396683558822,-0.00019078172044828534],[-0.0010134171461686492,0.00047552952310070395],[0.00027295714244246483,-0.00043985751108266413],[0.00008034065103856847,0.000039809765439713374],[0.000051562365115387365,-0.00021156802540645003],[0.00039913426735438406,-0.0011603310704231262],[-0.0006454847753047943,0.0002124738530255854],[-0.00002257701999042183,-0.0009488434880040586]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.07433578372001648,0.1833997219800949,0.3783707320690155],"rotation":[-0.7099195718765259,0.00838382076472044,-0.7018090486526489,0.058377835899591446],"used":true,"bodyHandle":2.505e-321,"linearSpeed":0.00005434747223653628,"angularVelocityHistory":[[0.030124995857477188,-0.05577155575156212],[0.008742044679820538,-0.020630359649658203],[-0.05721915140748024,0.06953345239162445],[0.030452938750386238,-0.0554460808634758],[0.009778899140655994,-0.021837454289197922],[-0.05539571866393089,0.06732997298240662],[0.02528679184615612,-0.046958692371845245],[0.016882658004760742,-0.028754521161317825],[-0.016432978212833405,0.011285388842225075],[0.00940771959722042,-0.02700459025800228],[0.003816131968051195,-0.012377066537737846]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.22945639491081238,0.17896367609500885,0.45458611845970154],"rotation":[-0.02858469821512699,-0.5269037485122681,-0.06424838304519653,-0.8470108509063721],"used":true,"bodyHandle":2.51e-321,"linearSpeed":3.191822934525005e-10,"angularVelocityHistory":[[-0.00019245551084168255,-0.0006522535695694387],[-0.002162296324968338,0.0036011901684105396],[0.003319866955280304,-0.007114755921065807],[-0.0024649237748235464,0.004192526452243328],[-0.00010308727360097691,-0.00004569572047330439],[-0.004094383213669062,0.006451515015214682],[0.005739705637097359,-0.010667274706065655],[-0.0015796173829585314,0.003757879603654146],[-0.0008675683056935668,0.002035957993939519],[0.00009500796295469627,-0.0003308150335215032],[0.0069916448555886745,-0.012203481048345566]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.2854352295398712,0.18007773160934448,0.4760015904903412],"rotation":[0.00009926825441652909,0.8393688201904297,-0.002854496706277132,-0.5435547232627869],"used":true,"bodyHandle":2.515e-321,"linearSpeed":7.721710916091126e-9,"angularVelocityHistory":[[0.00004837676169699989,0.0006460528238676488],[-0.0002622570318635553,0.0004972555907443166],[0.000517294101882726,0.0004494274908211082],[-0.0008546817116439342,0.00035117953666485846],[0.00041798417805694044,-0.000024949873477453366],[0.00023027097631711513,-0.0006444878526963294],[-0.00040735231596045196,0.00039557990385219455],[0.00003144556103507057,0.0005678558954969049],[-0.00012279748625587672,-0.0006990450783632696],[0.0007320152362808585,9.011679935611028e-7],[-0.0011970462510362267,-0.0009873349918052554]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[0.0522812195122242,0.17647290229797363,0.21809376776218414],"rotation":[0.6517830491065979,-0.0010806473437696695,0.7584046125411987,-0.00019396837160456926],"used":true,"bodyHandle":2.52e-321,"linearSpeed":2.0096384172614683e-12,"angularVelocityHistory":[[0.00006841606227681041,-0.000019341099687153473],[-0.000035230979847256094,0.00003495403143460862],[0.00005142109876032919,-0.0000293803823296912],[0.000030151963073876686,-0.0000019713577330549015],[0.00001866246384452097,-0.000007236070814542472],[0.00004705112223746255,-0.000026241152227157727],[0.00003996379746240564,-0.00000831276884127874],[0.000016199071978917345,-0.00000939562960411422],[0.00003235132680856623,-0.00003039262446691282],[0.00006263628893066198,-0.00003549458415363915],[0.000034635137126315385,-0.000010130102964467369]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.18114379048347473,0.1775486022233963,0.6397265791893005],"rotation":[0.05087120458483696,0.991435170173645,0.006118932738900185,-0.12012885510921478],"used":true,"bodyHandle":2.525e-321,"linearSpeed":0.000004344866730431784,"angularVelocityHistory":[[0.023225044831633568,0.0026741723995655775],[0.010673021897673607,0.004397570621222258],[0.012535403482615948,0.0012330374447628856],[0.011242308653891087,0.004871373064815998],[0.002614945638924837,0.00246630166657269],[0.006160860415548086,0.003371660830453038],[0.003403445240110159,0.0012574753491207957],[0.0037184294778853655,0.0007234863005578518],[0.0032253337558358908,0.001111031393520534],[-0.012492271140217781,0.00514265475794673],[-0.018025320023298264,0.004750590305775404]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05500473082065582,0.1871015876531601,0.24588638544082642],"rotation":[-0.15900227427482605,-0.006127661094069481,0.9872523546218872,-0.0036881256382912397],"used":true,"bodyHandle":2.53e-321,"linearSpeed":6.553255763037152e-11,"angularVelocityHistory":[[0.0003613187000155449,-0.0001591982872923836],[-0.00017535364895593375,-0.0006754657370038331],[-0.00044552903273142874,-0.000821970053948462],[0.00008320355846080929,-0.0003136417653877288],[-0.00038906201370991766,-0.0008499491377733648],[-0.00016567802231293172,-0.0004043170192744583],[-0.00012986628280486912,-0.0003260205266997218],[-0.00008692360279383138,-0.00048379800864495337],[0.00012862049334216863,-0.00033580936724320054],[0.00021116257994435728,0.0006297394866123796],[-0.0000039748529161443,-0.0005963253788650036]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[0.3361666202545166,0.18401427567005157,0.393546998500824],"rotation":[-0.04088061675429344,-0.9852275252342224,0.049190323799848557,0.15885767340660095],"used":true,"bodyHandle":2.535e-321,"linearSpeed":2.117420204137415e-8,"angularVelocityHistory":[[0.00014472218754235655,-0.00009277313074562699],[-0.0008191097876988351,-0.004020053893327713],[0.00046983512584120035,-0.00009174816659651697],[0.0005827079294249415,-0.0009304584236815572],[-2.1988378762216598e-7,0.0006591836572624743],[0.00041892510489560664,-0.0008463533595204353],[-0.00020808739645872265,0.00013346261403057724],[-0.0014033482875674963,-0.004706019069999456],[0.00040212468593381345,-0.00024063841556198895],[0.00015203005750663579,-0.0007209320901893079],[-0.00009869943460216746,0.000633601623121649]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.046900127083063126,0.19311141967773438,0.20996257662773132],"rotation":[0.004716943949460983,-0.6960406303405762,-0.0022566590923815966,-0.7179833650588989],"used":true,"bodyHandle":2.54e-321,"linearSpeed":3.172915332775129e-11,"angularVelocityHistory":[[-0.00036617834120988846,0.00012911490921396762],[0.00046006066258996725,-0.00023903549299575388],[-0.00021678990742657334,0.00007973489118739963],[-0.00011508561146911234,0.00007294803071999922],[0.0002790216531138867,-0.0001594596542418003],[-0.00013498326006811112,0.00012018781126243994],[-0.00015620150952599943,0.00004004759102826938],[0.00025692052440717816,-0.00009696119377622381],[-0.00008448195876553655,0.000043674634071066976],[-0.00019369059009477496,0.00007672511856071651],[0.0002885208814404905,-0.00015901363804005086]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.35500669479370117,0.1796468198299408,0.38625475764274597],"rotation":[-0.005336045287549496,0.16843780875205994,0.011514340527355671,0.9856305718421936],"used":true,"bodyHandle":2.544e-321,"linearSpeed":4.936221847613875e-10,"angularVelocityHistory":[[-0.000641242484562099,-0.00026764042559079826],[0.00011958467803196982,0.00013561081141233444],[-0.0004917383193969727,-0.00004170428655925207],[0.0008244109340012074,-0.00016308912017848343],[-0.0005307731917127967,-0.00004156722570769489],[0.0006090175593271852,-0.000049928039516089484],[0.0010135109769180417,-0.0012222299119457603],[0.00021956297860015184,0.00040216202614828944],[-0.000001452644937671721,0.0013883360661566257],[0.002565787173807621,-0.001352147664874792],[0.0015132240951061249,-0.0008751954883337021]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.06607051193714142,0.17885640263557434,0.4823034405708313],"rotation":[-0.8406122922897339,0.015203515999019146,0.5410833954811096,-0.019197747111320496],"used":true,"bodyHandle":2.55e-321,"linearSpeed":3.2835912234138272e-9,"angularVelocityHistory":[[0.00008164814789779484,-0.0006720650708302855],[-0.00022186676505953074,-0.0007753917016088963],[0.002960235346108675,-0.004825520794838667],[0.0030363393016159534,0.007210303097963333],[0.00011998940317425877,0.006529248785227537],[0.0012049940414726734,-0.0019003471825271845],[0.00011604096653172746,0.0036829540040344],[0.0006661043735221028,0.0028442824259400368],[0.0010497893672436476,0.003554241731762886],[0.00013198189844843,0.001832648180425167],[0.002998383017256856,0.002301121363416314]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.15898489952087402,0.18557141721248627,0.5519784688949585],"rotation":[-0.9233651757240295,-0.000686717452481389,0.3839198350906372,0.0013251483906060457],"used":true,"bodyHandle":2.554e-321,"linearSpeed":2.4925581731744224e-7,"angularVelocityHistory":[[-0.00005307338142301887,-0.0051119267009198666],[0.00013830025272909552,-0.004219982773065567],[0.012363833375275135,0.023232998326420784],[-0.00011212148820050061,0.00473362673074007],[0.004027652554214001,0.028868913650512695],[-0.0013907812535762787,0.02477341517806053],[0.004188057500869036,0.008155809715390205],[0.006151773035526276,0.014203136786818504],[0.004600129555910826,-0.0006508904043585062],[0.001702735899016261,0.008853225037455559],[0.002753406995907426,-0.0009458329295739532]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.14581221342086792,0.1796427071094513,0.48331770300865173],"rotation":[0.0026593978982418776,0.2491830587387085,0.006543898489326239,-0.9684305787086487],"used":true,"bodyHandle":2.56e-321,"linearSpeed":7.884556638865023e-9,"angularVelocityHistory":[[0.008526462130248547,0.004600037354975939],[0.0014684849884361029,0.0017456479836255312],[0.00039812136674299836,-0.0012420954881235957],[0.0006120356847532094,-0.0013729108031839132],[0.0017176952678710222,0.000691936700604856],[0.0011753113940358162,-0.002694715978577733],[0.015465080738067627,0.04929203540086746],[0.0017108413157984614,0.015512531623244286],[-0.006138708908110857,0.006947710644453764],[-0.0012184921652078629,0.015184838324785233],[0.019349027425050735,0.003654294181615114]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.13879036903381348,0.1802636981010437,0.4253526031970978],"rotation":[-0.6461889743804932,-0.0013899970799684525,0.7631752490997314,0.0011239791056141257],"used":true,"bodyHandle":2.564e-321,"linearSpeed":2.410118869879345e-9,"angularVelocityHistory":[[-0.0008141941507346928,0.00046600119094364345],[-0.0005463578854687512,0.0003800842387136072],[0.004829875193536282,-0.006139307748526335],[-0.0011501888511702418,0.000165318459039554],[-0.0005853737238794565,0.0004235974629409611],[0.0032816780731081963,-0.005106227472424507],[0.00003545760773704387,0.001059388741850853],[0.0003236886113882065,0.0004837586311623454],[0.001592222019098699,-0.00029182565049268305],[-0.0012939594453200698,-0.00001845835504354909],[-0.0005265837535262108,0.0008125065360218287]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.36763375997543335,0.18459638953208923,0.38022279739379883],"rotation":[-0.44599175453186035,-0.010831956751644611,-0.8948766589164734,0.013032350689172745],"used":true,"bodyHandle":2.57e-321,"linearSpeed":1.5543752966036726e-9,"angularVelocityHistory":[[-0.00007591665780637413,-0.00002596686317701824],[0.00006453293462982401,0.0000030514215723087545],[-0.00010040490451501682,0.00006076284989831038],[0.0002072065108222887,0.0000061084210756234825],[0.00005551675349124707,-0.00005684887582901865],[0.000423301913542673,0.00007287659536814317],[0.00010590407327981666,-0.000015297666323021986],[0.00041083956602960825,-0.00011565625754883513],[-0.000874859921168536,-0.00033634481951594353],[0.0004018099862150848,0.000027011134079657495],[0.00034320878330618143,-0.00026847192202694714]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[-0.1730339229106903,0.18511337041854858,0.7509150505065918],"rotation":[-0.011694665998220444,0.6496875882148743,0.0017093222122639418,-0.7601094245910645],"used":true,"bodyHandle":2.574e-321,"linearSpeed":8.591919104967131e-9,"angularVelocityHistory":[[-0.0006406023749150336,0.00022483759676106274],[-0.0009459666907787323,-0.0005095562082715333],[-0.0007259803242050111,-0.0005223609623499215],[0.0007368558435700834,0.00009381197742186487],[-0.0008137209806591272,0.00007731117511866614],[-0.0004288556519895792,-0.00022205879213288426],[-0.0005568550550378859,-0.00032298199948854744],[0.0002186218771385029,0.00014045766147319227],[-0.00023546056763734668,0.0003317674854770303],[-0.00003552736234269105,-0.00045952186337672174],[0.000003805188953265315,-0.00023899906955193728]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.17115049064159393,0.18005947768688202,0.48196858167648315],"rotation":[-0.5689101219177246,0.0006473164539784193,-0.8223941326141357,0.00293741375207901],"used":true,"bodyHandle":2.58e-321,"linearSpeed":5.093621679844748e-9,"angularVelocityHistory":[[0.0006523857591673732,-0.0008522482821717858],[0.0004586781142279506,-0.0007729885401204228],[0.001711708027869463,0.0053878286853432655],[-0.0015741819515824318,-0.0018314012559130788],[0.0001288920029764995,-0.0016512189758941531],[-0.0011449164012447,0.0004045094538014382],[-0.0003705536655616015,0.00002762095937214326],[-0.0006348056485876441,-0.0015010095667093992],[-0.0009545482462272048,0.0002865588176064193],[-0.00004954608084517531,-0.0005137290572747588],[-0.002207854762673378,-0.00004200302646495402]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.22753594815731049,0.17985984683036804,0.46480175852775574],"rotation":[-0.0026789740659296513,0.9541601538658142,-0.0002221045724581927,0.29928457736968994],"used":true,"bodyHandle":2.584e-321,"linearSpeed":7.461714649413651e-9,"angularVelocityHistory":[[0.00042168275103904307,0.0006095253047533333],[-0.0005360478535294533,-0.00004141116005484946],[-0.0005112685030326247,0.0004458767652977258],[0.0011360130738466978,0.0011991661740466952],[-0.0003383218718226999,0.0013364992337301373],[-0.0003057648427784443,0.0008671912946738303],[-0.00003244735125917941,0.000231722166063264],[0.00040343881119042635,0.00041111951577477157],[-0.00005471364056575112,0.0005478499224409461],[6.296064611888141e-7,-0.00030419373069889843],[-0.00009210423741023988,0.0011247132206335664]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.048154838383197784,0.1857692301273346,0.32212546467781067],"rotation":[-0.031677551567554474,-0.7455520033836365,-0.08032876253128052,-0.6608297824859619],"used":true,"bodyHandle":2.59e-321,"linearSpeed":0.000002941450520808418,"angularVelocityHistory":[[-0.003793751820921898,-0.004113870207220316],[-0.008037012070417404,0.017409130930900574],[0.005321492440998554,0.01274778600782156],[0.037529755383729935,-0.0198032446205616],[0.0010545530822128057,0.012315817177295685],[0.03245822712779045,-0.009246219880878925],[0.038631804287433624,-0.04319275543093681],[-0.004835731349885464,0.021521175280213356],[0.00943009089678526,0.011656324379146099],[0.014925409108400345,-0.005453105550259352],[0.023334819823503494,-0.005449044052511454]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.1272876113653183,0.1874653697013855,0.28492268919944763],"rotation":[-0.28077369928359985,-0.0123373344540596,0.9596882462501526,-0.003507135668769479],"used":true,"bodyHandle":2.594e-321,"linearSpeed":1.2417927566776937e-11,"angularVelocityHistory":[[0.00002121248508046847,0.000004526596057985444],[0.000006315556674962863,-0.000017754919099388644],[-0.000006646265774179483,0.000013436430890578777],[-4.023736721592286e-7,-0.000007688124242122285],[0.000006032682904333342,-0.000005263064849714283],[0.000007977716450113803,-0.000016618127119727433],[-1.6591453544378965e-8,0.000008402100320381578],[0.000004633917797036702,0.0000042633787415979896],[0.000006413416940631578,0.000001606561454536859],[0.000005818078989250353,0.0000058446744333195966],[0.000003931928858946776,3.8567790738852636e-7]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[-0.012663454748690128,0.19554710388183594,0.3432544469833374],"rotation":[-0.6764958500862122,0.05835055187344551,-0.7337234616279602,-0.02446378581225872],"used":true,"bodyHandle":2.6e-321,"linearSpeed":0.0000038603382922291975,"angularVelocityHistory":[[0.019715052098035812,0.013430592603981495],[-0.012165809981524944,0.0028235167264938354],[-0.013220302760601044,0.006701918784528971],[0.0334790013730526,0.0008592152735218406],[0.007062370888888836,-0.001430870033800602],[0.0002554364036768675,0.005785912740975618],[0.027584314346313477,0.019699059426784515],[0.011925576254725456,-0.0015442355070263147],[-0.006760450080037117,0.0034270433243364096],[0.03352040797472,0.016498299315571785],[0.03562496230006218,0.011488359421491623]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.10391870141029358,0.18824930489063263,0.24964605271816254],"rotation":[-0.003369431011378765,0.36709415912628174,-0.0019732394721359015,-0.9301755428314209],"used":true,"bodyHandle":2.604e-321,"linearSpeed":2.1042559183958153e-11,"angularVelocityHistory":[[0.000013576272976933978,-0.0001077582492143847],[-0.00025047664530575275,-0.00004269736018613912],[-0.0003317795926705003,0.00008828101272229105],[0.00026389688719063997,-0.00012651627184823155],[-0.00023174092348199338,0.000019489769329084083],[-0.00039871668559499085,0.00008721731865080073],[0.00020225027401465923,-0.00010123359243152663],[-0.00011667105718515813,-0.00009944214252755046],[-0.0002587921335361898,0.000051719391194637865],[0.0003491348179522902,-0.0002925668377429247],[-0.00028499148902483284,-0.00010713020310504362]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.30926740169525146,0.1745378077030182,0.3777002990245819],"rotation":[-0.0012391852214932442,0.9857009649276733,0.0008991428185254335,-0.16849705576896667],"used":true,"bodyHandle":2.61e-321,"linearSpeed":1.7116719178369426e-10,"angularVelocityHistory":[[0.00015987256483640522,0.0000011901123571078642],[0.0005798036581836641,-0.0004959709476679564],[0.0004251008795108646,-0.0005930944462306798],[0.0006080801249481738,-0.00019045303633902222],[-0.00017452964675612748,-0.00046715475036762655],[0.00077563535887748,-0.000551897450350225],[0.00023648048227187246,-0.000648165587335825],[0.0008590056677348912,-0.00019962061196565628],[0.001032444299198687,0.0012221254874020815],[0.00027975556440651417,-0.0003297058865427971],[0.00030692730797454715,-0.0007969203288666904]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.3994871973991394,0.17385265231132507,0.4689967632293701],"rotation":[-0.003344741417095065,-0.625620424747467,0.0021099671721458435,0.7801175117492676],"used":true,"bodyHandle":2.614e-321,"linearSpeed":8.383403110329996e-10,"angularVelocityHistory":[[0.00918747577816248,0.0010151320602744818],[0.010723957791924477,-0.001119402120821178],[0.006768525578081608,-0.00034426344791427255],[0.006106173153966665,-0.00025026718503795564],[0.0039579798467457294,-0.0005597099079750478],[-0.03346430882811546,-0.0058516766875982285],[-0.01792151667177677,-0.0029419385828077793],[-0.010562711395323277,0.002188943326473236],[-0.010068134404718876,-0.001707805204205215],[-0.007969523780047894,0.0007972081075422466],[-0.005429051350802183,0.00042544922325760126]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[-0.34420451521873474,0.17435841262340546,0.4953893721103668],"rotation":[-0.0027494023088365793,-0.16099917888641357,-0.0030335155315697193,0.9869460463523865],"used":true,"bodyHandle":2.62e-321,"linearSpeed":2.3576388447986455e-10,"angularVelocityHistory":[[-0.0017976053059101105,0.0022037490271031857],[0.0008441361715085804,-0.00018369159079156816],[0.00020620835130102932,-0.0002749738923739642],[0.0011940766125917435,0.00010756251867860556],[-0.0008192412205971777,0.0005896129878237844],[0.0005497976089827716,0.00013517886691261083],[-0.0019336945842951536,0.00852892640978098],[-0.001449181349016726,-0.003162075998261571],[0.00030038217664696276,-0.0014394308673217893],[0.0016049615805968642,0.0024520994629710913],[-0.00026407785480841994,-0.0005604560719802976]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.19450408220291138,0.17430098354816437,0.6999472975730896],"rotation":[0.00048622695612721145,-0.09868628531694412,0.004147013183683157,0.9951097965240479],"used":true,"bodyHandle":2.623e-321,"linearSpeed":9.62649297338004e-11,"angularVelocityHistory":[[-0.00014337300672195852,0.0001526164123788476],[0.00026588753098621964,-0.00017909494636114687],[-0.00025311773060820997,0.00045895003131590784],[-0.0012131286785006523,-0.00038576568476855755],[0.00012571417028084397,-0.00005636002970277332],[0.00027647920069284737,2.3205750210308906e-7],[-0.00003280460077803582,0.00004923456071992405],[-0.0003935891145374626,-0.000799738394562155],[0.0001117946594604291,0.0002337130281375721],[0.00008208241342799738,-0.0002396636555204168],[-0.00017566884343978018,0.0004668152250815183]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[0.22294741868972778,0.18921181559562683,0.7281580567359924],"rotation":[0.8999981880187988,0.027470650151371956,0.43412110209465027,-0.02806335873901844],"used":true,"bodyHandle":2.63e-321,"linearSpeed":1.9466473874882597e-9,"angularVelocityHistory":[[-0.006037152372300625,0.00023222713207360357],[-0.012989247217774391,-0.001261955825611949],[0.0051806047558784485,-0.002545880852267146],[0.002464371034875512,-0.000040942140913102776],[-0.0007549133733846247,0.0011913173366338015],[-0.0044101448729634285,0.0010314855026081204],[-0.000026507550501264632,0.0000571452037547715],[-0.001432021614164114,-0.00005927771780989133],[-0.002037545433267951,-0.00006602195207960904],[-0.0033303897362202406,-0.0002705767110455781],[-0.004090829752385616,-0.000697971205227077]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[0.001438557985238731,0.20250828564167023,0.6719277501106262],"rotation":[-0.0017128442414104939,-0.2194160521030426,-0.0039662946946918964,-0.9756218194961548],"used":true,"bodyHandle":2.633e-321,"linearSpeed":0,"angularVelocityHistory":[[0.5173116326332092,-0.3162930905818939],[0.23855671286582947,-0.046531446278095245],[-0.025524303317070007,-0.052038248628377914],[0.078635074198246,0.15448340773582458],[0.17487528920173645,-0.042139045894145966],[-0.002380599733442068,0.08925231546163559],[-0.15147574245929718,-0.16290384531021118],[-0.01811313070356846,-0.13928866386413574],[-0.17389467358589172,-0.0465300977230072],[0.10893863439559937,-0.06739255785942078]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.21729256212711334,0.17565760016441345,0.7289008498191833],"rotation":[0.01766299083828926,0.1704426258802414,-0.0013908485416322947,0.9852082133293152],"used":true,"bodyHandle":2.64e-321,"linearSpeed":2.592285921334612e-10,"angularVelocityHistory":[[-0.003023254917934537,0.00013161158130969852],[0.0013317217817530036,-0.0024482160806655884],[-0.0017144017620012164,0.0014088251627981663],[0.0013403687626123428,-0.0023212209343910217],[0.0007488240953534842,-0.00011052935587940738],[0.0009029450011439621,-0.0005220365128479898],[-0.0004004345100838691,0.000328458147123456],[0.0003493835683912039,0.00004626220470527187],[0.0004885386442765594,0.00019555418111849576],[0.0004270277568139136,0.0000343126266670879],[0.0008446728461422026,0.0004555631894618273]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.2727367877960205,0.175528883934021,0.7076215744018555],"rotation":[0.014067540876567364,0.4686393439769745,0.0008022392285056412,0.883277177810669],"used":true,"bodyHandle":2.643e-321,"linearSpeed":1.0883961940929504e-10,"angularVelocityHistory":[[-0.000832363439258188,0.0012439360143616796],[0.0008316888124682009,-0.0006382851279340684],[-0.002451901091262698,0.0013550090370699763],[0.004630787298083305,-0.0003636731125880033],[0.000213210194488056,-0.000674405659083277],[0.001225559040904045,-0.0003607177350204438],[-0.00045184552436694503,0.00013452736311592162],[0.0005093388026580215,-0.00013403005141299218],[-0.00008802981028566137,-0.000011981604984612204],[-0.00005726077142753638,0.00007869876571930945],[-0.001056091976352036,0.0002099488046951592]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[0.2729106843471527,0.1763438731431961,0.6452937126159668],"rotation":[0.0042614866979420185,0.6197667717933655,0.0009616719908080995,0.7847739458084106],"used":true,"bodyHandle":2.65e-321,"linearSpeed":8.184391362640222e-10,"angularVelocityHistory":[[-0.0001933712774189189,0.00003796871897066012],[0.00021404758444987237,0.000587744580116123],[-0.0007352744578383863,-0.0001321338932029903],[0.0019518013577908278,-0.0010108057176694274],[-0.0007726734620518982,0.00007325579645112157],[0.00005849838271387853,-0.000704183999914676],[-0.000230404592002742,-0.00033085382892750204],[-0.00014697042934130877,-0.0008574563544243574],[-0.0007334524998441339,0.0013178386725485325],[-0.000005039134066464612,-0.00026539131067693233],[-0.000543580565135926,-0.0008384123211726546]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.335811972618103,0.1744827926158905,0.5043269395828247],"rotation":[-0.00064982904586941,-0.09856213629245758,0.0022450995165854692,0.9951280951499939],"used":true,"bodyHandle":2.653e-321,"linearSpeed":4.9047981743084874e-11,"angularVelocityHistory":[[-0.0004979536170139909,-0.0006804318982176483],[0.0002121501456713304,0.0004914388991892338],[-0.010820098221302032,0.009992041625082493],[0.0004696313990280032,0.0001128320291172713],[-0.00001676336432865355,0.00019354611868038774],[-0.0002524342271499336,0.00004553953112917952],[0.0007145911804400384,0.00045713153667747974],[-0.00024993435363285244,0.00009168707765638828],[0.00003883125464199111,0.00022590806474909186],[-0.0000718278024578467,0.00012415052333381027],[-0.0002588008064776659,-0.00005858828444615938]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3365401327610016,0.18018868565559387,0.5041542649269104],"rotation":[-0.004393947776407003,0.24926458299160004,-0.00010436771117383614,0.968425452709198],"used":true,"bodyHandle":2.66e-321,"linearSpeed":1.2784558499059012e-9,"angularVelocityHistory":[[-0.0005968819023109972,-0.000971214089076966],[0.0006853577797301114,0.00009803179273148999],[0.003445032052695751,-0.0023052096366882324],[-0.0015715775080025196,-0.0008976522949524224],[-0.000485768512589857,-0.0006685528787784278],[-0.000024576489522587508,-0.000030043192964512855],[-0.0006299531669355929,-0.0005541045684367418],[-0.00020813336595892906,-0.0004949845024384558],[-0.0011825072579085827,-0.0006807249737903476],[0.00009634658636059612,-0.0001414606667822227],[-0.00017406287952326238,-0.0002779206552077085]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.27763715386390686,0.18349739909172058,0.3682330548763275],"rotation":[-0.881909966468811,-0.047685038298368454,0.46742677688598633,0.03838062658905983],"used":true,"bodyHandle":2.663e-321,"linearSpeed":3.28938417767935e-9,"angularVelocityHistory":[[0.00021775023196823895,-0.001004887162707746],[0.00021313592151273042,-0.0003262859536334872],[-0.00003574147922336124,-0.0001491361908847466],[0.00037682324182242155,-0.0011326672974973917],[-0.0001356601424049586,0.0011373772285878658],[0.00018692076264414936,-0.0005008001462556422],[-0.00010941218351945281,0.00032988362363539636],[0.00013078491610940546,0.00043307471787557006],[0.00005335002060746774,-0.00005196647907723673],[0.00021985714556649327,-0.000868980772793293],[-0.0003113496059086174,0.00036054052179679275]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.2874106168746948,0.18381458520889282,0.3914833962917328],"rotation":[-0.057357482612133026,0.6384867429733276,0.004240403417497873,0.7674807906150818],"used":true,"bodyHandle":2.67e-321,"linearSpeed":1.2503992993942812e-7,"angularVelocityHistory":[[0.004352189600467682,0.0016835406422615051],[0.003832926508039236,0.0018362647388130426],[0.004029702395200729,0.0011568221962079406],[0.004185439553111792,0.0013571574818342924],[0.0012075111735612154,0.0009773680940270424],[0.0033461872953921556,0.0007549634319730103],[0.0025642698165029287,0.0009478389983996749],[0.002781653543934226,0.0007672755164094269],[0.0027212435379624367,0.0005112360813654959],[0.0024274045135825872,0.0013699678238481283],[0.0023812828585505486,0.0010519757634028792]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.1648847460746765,0.17611582577228546,0.3225558400154114],"rotation":[-0.9783405065536499,-0.002099698642268777,0.20556789636611938,0.02423333190381527],"used":true,"bodyHandle":2.673e-321,"linearSpeed":9.992184115185472e-14,"angularVelocityHistory":[[0.000008394443284487352,0.00002905281144194305],[0.000004286384410079336,0.00002385351763223298],[-0.000006592626505153021,-0.000032325850042980164],[-8.886727869139577e-7,0.00000590337776884553],[-0.000013179159395804163,-0.00003098355227848515],[-0.0000019886192603735253,0.0000034302786389162065],[-0.000005099210284242872,-0.000007455901595676551],[-0.000005508653885044623,-0.0000033419123610656243],[-0.000010789154657686595,-0.00002363722160225734],[-0.000004909119525109418,-0.000004954115865984932],[-0.000004369151156424778,-0.000008407644600083586]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.12082589417695999,0.17637482285499573,0.42987728118896484],"rotation":[-0.06868059933185577,-0.14818499982357025,-0.020435648038983345,0.9863602519035339],"used":true,"bodyHandle":2.68e-321,"linearSpeed":1.3285759593636665e-8,"angularVelocityHistory":[[0.0012685409747064114,-0.0005231324466876686],[0.00036913639632984996,0.0002785561664495617],[-0.002391474787145853,0.001552998903207481],[-0.0009818164398893714,0.0003260185767430812],[0.0006081333267502487,0.0014274967834353447],[-0.00001046399302140344,-0.0008591376827098429],[0.00022158415231388062,-0.00007326401100726798],[0.0004375386342871934,0.00021274304890539497],[-0.0005091200582683086,-0.0016053543658927083],[-0.00012894826068077236,0.00030456340755335987],[0.000564348476473242,-0.0022719567641615868]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.0995476245880127,0.17686384916305542,0.2670513987541199],"rotation":[-0.9166463017463684,0.0005281141493469477,-0.39969876408576965,0.0003377319371793419],"used":true,"bodyHandle":2.683e-321,"linearSpeed":2.44439612415679e-11,"angularVelocityHistory":[[-0.0000525057730556,0.00004518879723036662],[-0.00015881567378528416,0.00010721223952714354],[-0.00013062106154393405,-0.00024282904632855207],[0.00009635780588723719,0.00006983475759625435],[-0.0002563612360972911,0.000023572491045342758],[-0.00013593015319202095,-0.00014100424596108496],[0.00003584152364055626,-0.000025565290343365632],[0.00018852835637517273,-0.00016359108849428594],[-0.00011991432984359562,-0.00029335322324186563],[0.0001845151127781719,-0.00007985562842804939],[2.677907673387381e-7,-0.00005237549339653924]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[-0.3657953143119812,0.19011501967906952,0.37840691208839417],"rotation":[-0.8096322417259216,-0.00748157175257802,0.5867186784744263,-0.014170234091579914],"used":true,"bodyHandle":2.69e-321,"linearSpeed":1.0858462739404013e-8,"angularVelocityHistory":[[0.00022555369650945067,0.00005323066216078587],[-0.00037694405182264745,-0.00017091381596401334],[0.00007744169124634936,0.000025184228434227407],[0.00005528124893316999,-0.00008631881792098284],[0.0003201040090061724,0.00009669651626609266],[0.00025238466332666576,0.00008705352956894785],[0.0009775978978723288,0.00021572431433014572],[0.0005862799007445574,0.000012509990483522415],[0.0007346123456954956,-0.00009821210551308468],[0.0014436413766816258,0.0003935150452889502],[0.0011937414528802037,-0.00036503036972135305]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.054401081055402756,0.18143893778324127,0.24513746798038483],"rotation":[-0.25814902782440186,0.007003342732787132,-0.9660769104957581,0.0023313702549785376],"used":true,"bodyHandle":2.693e-321,"linearSpeed":1.0628587363207734e-10,"angularVelocityHistory":[[-0.00018290244042873383,-0.00008604436879977584],[-0.0003190971037838608,-0.00047763375914655626],[0.0004015443555545062,-0.0010628579184412956],[0.0008516740635968745,-0.00018976959108840674],[0.00025573832681402564,-0.0009583111968822777],[0.00018213891598861665,-0.0007360416348092258],[-0.00015630923735443503,-0.00020900709205307066],[0.00008331548451678827,-0.0005034863133914769],[0.0006458602147176862,-0.0000929936722968705],[-0.00020501000108197331,0.0005694488645531237],[-0.00004087038178113289,-0.0007323813042603433]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[0.32712987065315247,0.17808976769447327,0.2995523512363434],"rotation":[-0.03245547413825989,-0.787466824054718,-0.045081403106451035,-0.6138486862182617],"used":true,"bodyHandle":2.7e-321,"linearSpeed":1.1365586964744101e-10,"angularVelocityHistory":[[-0.0001704586757114157,0.000006677154033241095],[0.00009309807501267642,-0.00008527353929821402],[-0.00033398446976207197,-0.00034244023845531046],[-0.00020336352463345975,0.0000890835071913898],[-0.00008322126814164221,0.00003855147588183172],[0.00001689125747361686,0.000016625002899672836],[0.0005127424374222755,-0.0005507300957106054],[-0.00005787040208815597,-0.0006069148657843471],[-0.00014587826444767416,-0.00007874819857534021],[-0.0010868693934753537,0.000021861073037143797],[-0.00043434221879579127,-0.00016684838919900358]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.36800482869148254,0.17415882647037506,0.38247546553611755],"rotation":[0.0722779780626297,-0.0012772827176377177,0.9973799586296082,-0.0027281770016998053],"used":true,"bodyHandle":2.703e-321,"linearSpeed":1.7510980017563678e-11,"angularVelocityHistory":[[-0.000242967318627052,-0.000025747167455847375],[0.000299055507639423,0.0001084201576304622],[-0.00008706723019713536,-0.00003473800461506471],[0.00020491161558311433,0.00005855975905433297],[-0.00010962424130411819,0.00002831439815054182],[0.00013952456356491894,0.000052876537665724754],[-0.0011892123147845268,0.00048220681492239237],[0.0003034498658962548,0.0007585319108329713],[-0.00020338193280622363,-0.0006682820385321975],[-0.000165369754540734,-0.000025904753783834167],[-0.00032297411235049367,-0.00009956397116184235]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.12354350090026855,0.18198135495185852,0.2843736410140991],"rotation":[0.7516048550605774,0.006002840586006641,-0.6595775485038757,-0.003379085101187229],"used":true,"bodyHandle":2.707e-321,"linearSpeed":1.3502629471340283e-11,"angularVelocityHistory":[[0.000022548591005033813,0.000002395789124420844],[0.000014356509382196236,-0.000019226601580157876],[-0.000005833897830598289,0.000007117277618817752],[0.000005248789875622606,9.188668741444417e-7],[0.000008944091860030312,-0.000008394700671487954],[0.000010119419130205642,-0.000008846500350045972],[4.7545265147164173e-7,0.000005652940672007389],[0.000003804013658736949,-6.080939556341036e-7],[0.000006994460363785038,-0.0000013309166888575419],[0.000004818682555196574,8.264425446213863e-7],[0.000004843500846618554,-0.0000021429277694551274]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[-0.21306324005126953,0.17884549498558044,0.5869858860969543],"rotation":[-0.061349280178546906,0.19671979546546936,0.02980448305606842,-0.9780845046043396],"used":true,"bodyHandle":2.71e-321,"linearSpeed":0.00004557924898409725,"angularVelocityHistory":[[0.021630708128213882,0.05162070319056511],[0.026378726586699486,0.055064406245946884],[0.01598406955599785,0.04102803394198418],[0.013707995414733887,0.0436457134783268],[0.023826105520129204,0.047469981014728546],[0.021245284005999565,0.04588296636939049],[0.018878787755966187,0.03981798514723778],[0.021213799715042114,0.04543640464544296],[0.02202649973332882,0.047112274914979935],[0.026693182066082954,0.057923540472984314],[0.03076900914311409,0.06544207781553268]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05495314672589302,0.187475323677063,0.21282249689102173],"rotation":[-0.9703065752983093,-0.00341220130212605,0.24183690547943115,-0.002891622483730316],"used":true,"bodyHandle":2.717e-321,"linearSpeed":1.1146729680662408e-11,"angularVelocityHistory":[[-0.00021610138355754316,0.000026978132154908963],[0.000327537942212075,-0.00015076823183335364],[-0.00014751859998796135,0.00004301042281440459],[-0.00005491159754456021,0.000043244737753411755],[0.0001929942227434367,-0.0001063009985955432],[-0.00008703876665094867,0.00005914544453844428],[-0.00007175913924584165,-0.000002716067911023856],[0.00018657294276636094,-0.00007934584573376924],[-0.000053916697652311996,0.00003162955545121804],[-0.00007950277358759195,0.000006919267889315961],[0.00020651411614380777,-0.00009032513480633497]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[-0.34076565504074097,0.18188771605491638,0.32755088806152344],"rotation":[-0.5373747944831848,0.02245345152914524,-0.8428917527198792,0.01605152152478695],"used":true,"bodyHandle":2.72e-321,"linearSpeed":2.200032074849604e-10,"angularVelocityHistory":[[-0.00019910912669729441,0.0001727989292703569],[0.00020541634876281023,0.0004337146528996527],[-0.0001515064504928887,0.0000047924177124514244],[-0.000012953069926879834,0.00042934133671224117],[-0.0002509499609004706,-0.00017068836314138025],[-0.000022735648599336855,0.0000423913515987806],[-0.00026700369198806584,-0.0003808586625382304],[0.000053293548262445256,0.000029258068025228567],[-0.0004394607967697084,-0.0003199231286998838],[-0.00027144013438373804,-0.0005292054265737534],[-0.00027189499814994633,-0.000873469456564635]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.12213223427534103,0.17657531797885895,0.27785593271255493],"rotation":[0.0002368958230363205,-0.4186534881591797,-0.003989977762103081,-0.9081372618675232],"used":true,"bodyHandle":2.727e-321,"linearSpeed":2.290099418337591e-14,"angularVelocityHistory":[[0.0000015711616470071021,-0.000003699673698065453],[-0.000003992247457063058,6.476240628217056e-7],[-0.000004117782737012021,-0.000021666150132659823],[-0.0000033916760457941564,0.00001120641354646068],[0.0000039310698412009515,-0.0000077458944360842],[-4.981146730642649e-7,-0.000005224717824603431],[-7.099383765307721e-7,-0.000002579758074716665],[-4.4694189682559227e-7,-0.0000023900781798147364],[-6.511426704491896e-7,-0.0000032503262445970904],[-3.9094268799999554e-7,-0.0000026289274046575883],[-3.585949741591321e-7,-0.0000030056007744860835]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.22968903183937073,0.17440880835056305,0.35131677985191345],"rotation":[-0.9426478147506714,0.003931339830160141,-0.3337656259536743,0.00014854833716526628],"used":true,"bodyHandle":2.73e-321,"linearSpeed":1.5446220911408136e-13,"angularVelocityHistory":[[0.000036277182516641915,6.290043188528216e-7],[-0.000014622733033320401,0.00001931160659296438],[0.000007292851933016209,-0.000008892972800822463],[-0.000004615847956301877,0.0000011208321666345],[0.000007903709956735838,-0.00000937145250645699],[-0.000009756192412169185,0.000006706823114654981],[-0.000002092344630000298,7.019312988632009e-7],[-0.000018409842596156523,-4.833066213905113e-8],[0.000011843181709991768,-0.000026117986635654233],[-0.000012106210306228604,0.00001255475672223838],[-0.00001165325284091523,0.0000012699601938948035]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.2983865737915039,0.1835310310125351,0.3327489197254181],"rotation":[-0.7330223321914673,-0.08375240862369537,0.673667848110199,0.042840130627155304],"used":true,"bodyHandle":2.737e-321,"linearSpeed":4.513327180607016e-9,"angularVelocityHistory":[[0.00015946589701343328,-0.0000032858235954336124],[0.0002968501939903945,0.000023003896785667166],[-0.0002217441942775622,0.00007207724411273375],[-0.00009807628521230072,0.0007109183934517205],[-0.0006403618026524782,0.0002516047388780862],[-0.00011021843965863809,0.00048645221977494657],[-0.00034235502243973315,0.00024964683689177036],[-0.00030467353644780815,0.00003530550384311937],[0.000013031872185820248,-0.00031802989542484283],[0.00023288653756026179,0.0000037550578326772666],[-0.0003678686043713242,-0.0002717571915127337]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.11912407726049423,0.17439618706703186,0.4543997049331665],"rotation":[0.3153804540634155,0.031462620943784714,0.948306679725647,0.016114380210638046],"used":true,"bodyHandle":2.74e-321,"linearSpeed":1.503301754724677e-9,"angularVelocityHistory":[[0.0013596308417618275,-0.00019964479724876583],[0.0010365659836679697,0.0001508100249338895],[-0.0025357643608003855,0.009192580357193947],[0.0011183501919731498,-0.0002393774047959596],[0.0004731852968689054,0.0015931723173707724],[0.0002544246963225305,0.002740771509706974],[-0.0001142217151937075,-0.00045971080544404685],[0.0008335296879522502,0.0007746904739178717],[-0.00006146427767816931,-0.000804063631221652],[0.0017666113562881947,0.0002941168495453894],[0.0004835918953176588,-0.001727466587908566]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.006592372432351112,0.17687390744686127,0.20991867780685425],"rotation":[-0.49666956067085266,-0.0015328758163377643,0.8679291009902954,0.004006410948932171],"used":true,"bodyHandle":2.747e-321,"linearSpeed":4.228430564488595e-14,"angularVelocityHistory":[[0.0000030481558042083634,-0.0000036792605442315107],[-0.000006001212568662595,0.000004522834387898911],[-0.000009272316674469039,0.00002609535658848472],[0.000010082614608108997,-0.00005408719880506396],[-0.0000043765894588432275,0.0000744595454307273],[-0.000002616460960780387,-0.000007203300810942892],[-0.000004519960839388659,-0.000014468945664702915],[7.907851085064976e-8,-0.000017307424059254117],[-0.0000051599377002276015,0.00000988877764029894],[-7.279874694177124e-7,-0.000008753269867156632],[-0.000006335767466225661,0.000021401947378762998]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[-0.13685868680477142,0.19266189634799957,0.2987126111984253],"rotation":[-0.8859033584594727,-0.014553923159837723,0.463535875082016,0.009891130030155182],"used":true,"bodyHandle":2.75e-321,"linearSpeed":2.8692132628367904e-11,"angularVelocityHistory":[[0.000024481980290147476,0.000022040425392333418],[0.000008783220437180717,-0.00003817207471001893],[-0.00000834633374324767,0.000015600100596202537],[2.5035774342541117e-7,-0.0000070912860792304855],[0.000012177625649201218,-0.000008978237929113675],[0.000011943018762394786,-0.00001145019086834509],[0.0000019783124116656836,0.000013939537893747911],[0.00000598740552959498,0.000006140793175291037],[0.000009436344043933786,0.000004882676876150072],[0.00000760281136535923,0.000008435207746515516],[0.000005653935659211129,0.000003327870217617601]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[0.12446355074644089,0.17413531243801117,0.4862217605113983],"rotation":[-0.9961972832679749,-0.0020180051214993,0.08709343522787094,0.0012432741932570934],"used":true,"bodyHandle":2.757e-321,"linearSpeed":1.6107883543145323e-11,"angularVelocityHistory":[[0.00027577331638894975,0.0009500402375124395],[-0.0018781214021146297,-0.0005689371610060334],[0.00577449519187212,0.0008299097535200417],[-0.0004684158484451473,0.0003135665610898286],[-0.00035978187224827707,0.0009908077772706747],[0.003706249175593257,0.00016635411884635687],[0.0014873659238219261,0.0011008778819814324],[-0.00028370702057145536,0.002160461386665702],[-0.0026944177225232124,-0.0006515372660942376],[0.0007248466718010604,0.0014863723190501332],[-0.002121526747941971,0.002684088656678796]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[0.21437250077724457,0.1772083044052124,0.2706208825111389],"rotation":[-0.00024322973331436515,-0.4738622009754181,0.0016010778490453959,-0.8805974721908569],"used":true,"bodyHandle":2.76e-321,"linearSpeed":1.77223780366008e-11,"angularVelocityHistory":[[0.000019526438336470164,-0.0000037995339425833663],[-0.000012997071280551609,0.000011102752068836708],[-0.000004920505034533562,0.000003373010713403346],[0.00005665077696903609,-0.000020838604541495442],[-0.000024766544811427593,0.000013171395039535128],[-0.000008684662134328391,0.000005494399829331087],[-0.000016222804333665408,0.000017332742572762072],[0.00008924458234105259,-0.00002294290425197687],[-0.000005302068984747166,0.0000037047125260869507],[0.00004529653597273864,-0.000023595019229105674],[-0.000003240908654333907,4.842923431169766e-7]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.005961188580840826,0.18262407183647156,0.20997926592826843],"rotation":[-0.012705844826996326,-0.005207607056945562,0.9999001026153564,0.0033483989536762238],"used":true,"bodyHandle":2.767e-321,"linearSpeed":9.867098818139936e-14,"angularVelocityHistory":[[0.000018109529264620505,-0.000008625929694972001],[2.565807619703264e-7,-0.0000017994557310885284],[0.000005099590453028213,-3.3908634122781223e-7],[0.000007295174782484537,-0.00009764212882146239],[0.000017395381291862577,0.00006545749783981591],[-0.000006417652457457734,-0.000002738009925451479],[0.000007355053185165161,0.00001537571006338112],[0.00000338480890604842,-0.000012984030945517588],[9.141680834545696e-7,0.000002902840378737892],[0.0000019038227492274018,-4.266496205218573e-7],[0.000006767558261344675,-0.00002808029603329487]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[-0.10273702442646027,0.182398721575737,0.20996208488941193],"rotation":[-0.7237454056739807,0.0007247504545375705,-0.6900657415390015,0.0011733160354197025],"used":true,"bodyHandle":2.77e-321,"linearSpeed":2.5226692459057282e-9,"angularVelocityHistory":[[-0.000564125191885978,0.00017311808187514544],[-0.00034656046773307025,-0.00012913192040286958],[-0.00024739332729950547,-0.0003548375971149653],[-0.00013520107313524932,-0.00011017281940439716],[-0.00011676268331939355,-0.0003243069804739207],[0.00028368414496071637,-0.0002592971140984446],[-0.00006513283733511344,-0.00012207275722175837],[0.000015817362509551458,-0.00028838732396252453],[0.00009945191413862631,0.00009173651051241904],[0.0001008234903565608,0.00014755020674783736],[0.0001010952255455777,-0.0003561466292012483]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[-0.1746838092803955,0.17687687277793884,0.24459438025951385],"rotation":[-0.618177592754364,0.0007755396072752774,0.7860372066497803,-0.0011689843377098441],"used":true,"bodyHandle":2.777e-321,"linearSpeed":7.404055039337038e-13,"angularVelocityHistory":[[0.0002311230928171426,0.00006853449303889647],[-0.00008916552178561687,0.00012860013521276414],[0.000017459713490097784,0.00005314543886925094],[-0.000024299632059410214,0.00003619536801124923],[0.0000015506565205214429,0.00000995838490780443],[-0.000010136037417396437,0.0000307811533275526],[0.000006719732027704595,0.00001904076816572342],[0.000011396846275602002,0.000012564320059027523],[0.000001650294166211097,-4.0887553609536553e-7],[0.000010373822078690864,-0.0000019904994132957654],[-0.000014026813005330041,0.000026564637664705515]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.228836327791214,0.17987728118896484,0.3544212579727173],"rotation":[-0.0004695685929618776,0.13592971861362457,-0.0039511085487902164,0.990710437297821],"used":true,"bodyHandle":2.78e-321,"linearSpeed":2.7036994646626447e-12,"angularVelocityHistory":[[-0.0000902722604223527,-0.00006828171899542212],[-0.000008676695870235562,0.000018818023818312213],[-0.000025965295208152384,-0.000006004676379234297],[-0.000025231678591808304,-0.000012677080121648032],[-0.00001144680572906509,-0.000017349335394101217],[-0.000003224252850486664,-0.000009035400580614805],[-0.000023967721062945202,-0.0000203348263312364],[0.0000052994428187957965,-0.000005294369202601956],[-0.00004432999776327051,-0.00002564349961176049],[-4.385276781704306e-7,-0.000004667296252591768],[-0.000015839295883779414,-0.000009302144462708384]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.11029284447431564,0.2482319474220276,0.030871551483869553],"rotation":[0.2622041702270508,0.010704154148697853,0.9649530053138733,0.0002143628807971254],"used":true,"bodyHandle":2.787e-321,"linearSpeed":0.08285633215296766,"angularVelocityHistory":[[0.032271888107061386,0.003620192175731063],[0.01974664255976677,0.0056327152997255325],[0.001223181840032339,0.0005085273878648877],[-0.0006698946817778051,-0.00041341609903611243],[0.0014664812479168177,0.0018949862569570541],[0.0032906443811953068,0.006635215133428574],[0.005103463772684336,0.007610638625919819],[0.0028818626888096333,0.003163436660543084],[0.0019917611498385668,0.0017023344989866018],[0.003093042876571417,0.0013302939478307962],[0.0032370686531066895,0.0028976278845220804]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3025042414665222,0.17998816072940826,0.322206050157547],"rotation":[-0.04696623980998993,0.9868234395980835,0.07851176708936691,-0.13345211744308472],"used":true,"bodyHandle":2.79e-321,"linearSpeed":2.625314564022014e-9,"angularVelocityHistory":[[-0.00014135461242403835,-0.00010390004172222689],[0.00030043043079786,-0.000044926062400918454],[-0.00013399070303421468,0.00010038556501967832],[-0.00027642014902085066,0.00031965781818144023],[-0.0002576640108600259,0.00032657821429893374],[-0.00018739010556600988,0.00018658488988876343],[-0.00005067092934041284,0.00014010118320584297],[0.000370674766600132,0.0001663487928453833],[0.000040840081055648625,-0.0001585358550073579],[-0.0003259795194026083,-0.00016030314145609736],[-0.00031492087873630226,-0.00003468564318609424]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.15787233412265778,0.1769704967737198,0.24734076857566833],"rotation":[0.6774818301200867,-0.00018508703215047717,-0.735537052154541,-0.0018882184522226453],"used":true,"bodyHandle":2.796e-321,"linearSpeed":1.6527351778521388e-14,"angularVelocityHistory":[[0.000018810596884577535,-0.00003482280226307921],[0.000016690466509317048,0.00001615285873413086],[-0.00001534927105240058,0.0000310627838189248],[0.00004016314051114023,-0.000041960462112911046],[0.000007923665179987438,0.000016971631339401938],[-0.00001899410563055426,0.000023714192138868384],[-0.00001859416443039663,-0.000030055613024160266],[-0.000004609593815985136,-0.00002998267882503569],[0.000011884864761668723,0.00001309764866164187],[0.000006037869752617553,-0.00013596276403404772],[-0.00001103046270145569,-0.00003634441600297578]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[0.18486325442790985,0.17945553362369537,0.5300197005271912],"rotation":[0.00610837759450078,-0.13305769860744476,0.0028401340823620558,0.991085410118103],"used":true,"bodyHandle":2.8e-321,"linearSpeed":6.577138109565111e-8,"angularVelocityHistory":[[0.003580356715247035,0.0036258900072425604],[0.0021637878380715847,0.0016477425815537572],[0.003644663840532303,0.0005756241152994335],[0.0030229093972593546,0.0016725864261388779],[0.0021582923363894224,0.0019734834786504507],[0.0023072140756994486,0.0018991065444424748],[0.0012025079922750592,0.0000727416409063153],[0.0025790012441575527,-0.005378319416195154],[0.005093870218843222,0.0052377814427018166],[0.012188604101538658,0.029984191060066223],[-0.0025365659967064857,0.0024216356687247753]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.3405679166316986,0.17620016634464264,0.3273507058620453],"rotation":[-0.9274620413780212,-0.011276612989604473,0.372846782207489,0.02592672035098076],"used":true,"bodyHandle":2.806e-321,"linearSpeed":8.592980599795455e-12,"angularVelocityHistory":[[-0.000057811765145743266,-0.0000020577740542648826],[0.00014777935575693846,0.00020961333939339966],[-0.00001935068030434195,0.00006095119169913232],[0.000018882918084273115,0.000318014994263649],[-0.00010302561713615432,-0.000028726035452564247],[0.00004252237340551801,0.000032165495213121176],[-0.00013617267541121691,-0.00007518559868913144],[0.00013028316607233137,-2.9950660973554477e-7],[-0.00047892285510897636,-0.00014718105376232415],[-0.0000215252202906413,-0.0002459568786434829],[-0.00016212194168474525,-0.0005234350683167577]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.05459374934434891,0.18190951645374298,0.21362616121768951],"rotation":[-0.0030233096331357956,0.9936569333076477,-0.00003480245504761115,-0.1124134361743927],"used":true,"bodyHandle":2.81e-321,"linearSpeed":1.0617627233057767e-11,"angularVelocityHistory":[[-0.00023391671129502356,-0.000004259016805008287],[0.00031463452614843845,-0.0001258042175322771],[-0.00014473769988399,0.000026848081688513048],[-0.000062007580709178,0.000041722527384990826],[0.00019108873675577343,-0.00010102608939632773],[-0.00010025942901847884,0.00005331418287823908],[-0.00007626355363754556,-0.000013830909665557556],[0.00020894953922834247,-0.00007841350452508777],[-0.00007064622332109138,0.000026329746106057428],[-0.00009795025107450783,0.000027542637326405384],[0.0002090396301355213,-0.00009340367250842974]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[0.009517044760286808,0.24823801219463348,0.02635103650391102],"rotation":[-0.01045184675604105,-0.10738682746887207,0.004483153577893972,0.9941522479057312],"used":true,"bodyHandle":2.816e-321,"linearSpeed":0.08285542267054002,"angularVelocityHistory":[[0.03266477584838867,0.004236393608152866],[0.013735665939748287,0.004413160495460033],[0.015810923650860786,0.01026985514909029],[-0.0010849385289475322,0.001915311673656106],[-0.0034789983183145523,0.001577418064698577],[-0.0008925803704187274,0.0008119287085719407],[-0.00027675394085235894,-0.0003191812720615417],[0.001869227271527052,0.002063089981675148],[0.002050065901130438,0.0016046585515141487],[-0.0008801395306363702,-0.0011187040945515037],[-0.0009646335383877158,-0.000498415669426322]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.21560600399971008,0.17897845804691315,0.6088562607765198],"rotation":[0.7191815972328186,-0.025435062125325203,0.6940727233886719,-0.019845562055706978],"used":true,"bodyHandle":2.82e-321,"linearSpeed":2.05074463952369e-9,"angularVelocityHistory":[[0.001098624081350863,-0.0006422484875656664],[-0.0015659041237086058,0.0021867051254957914],[0.00006862956070108339,-0.0000599975319346413],[-0.00034584099194034934,0.0010272274957969785],[0.0003610240819398314,0.0013184804702177644],[-0.0005807667039334774,0.0007115562330000103],[0.00016804573533590883,-0.001280144788324833],[0.0006695076008327305,-0.001184253953397274],[-0.00117474643047899,-0.0007542141829617321],[0.002792736515402794,-0.0011045105056837201],[-0.00551144964993,0.00677600409835577]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[0.010177739895880222,0.25379908084869385,0.014142968691885471],"rotation":[-0.3407406210899353,0.006379319820553064,0.9401087760925293,-0.007122228853404522],"used":true,"bodyHandle":2.826e-321,"linearSpeed":0.08331857158137083,"angularVelocityHistory":[[0.009120057336986065,0.0008083819411695004],[-0.0021024274174124002,-0.0006303333211690187],[0.00003223302701371722,-0.0003010576474480331],[-0.0002746111713349819,-0.0010589966550469398],[0.00216446234844625,0.0004766588390339166],[0.001454959507100284,-0.0007799356826581061],[0.0005640233866870403,-0.000947533524595201],[0.0008513664943166077,-0.00019856203289236873],[0.0007170776952989399,-0.0004802639887202531],[0.0009257974452339113,-0.00014333726721815765],[0.0015585607616230845,-0.0010893153958022594]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.11071769893169403,0.17693625390529633,0.2099827080965042],"rotation":[-0.18839174509048462,-0.0020441077649593353,0.982088029384613,-0.0027193166315555573],"used":true,"bodyHandle":2.83e-321,"linearSpeed":4.097361544000706e-12,"angularVelocityHistory":[[-0.00001701329711067956,-0.00010065134847536683],[0.000016119623978738673,0.000045921329729026183],[-0.00008321880886796862,0.000044456373871071264],[0.00007418364839395508,-0.00003214871321688406],[-0.00002558969754318241,0.00003180230487487279],[-0.0000666701453155838,0.000039056332752807066],[-0.00007719176937825978,-0.00008913802594179288],[0.00003204230233677663,-0.000030447092285612598],[-9.619250249670586e-7,0.00003757383456104435],[0.0001760243612807244,-0.00011370370339136571],[-0.00002399579534539953,-0.0000540703913429752]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[-0.20047995448112488,0.1799113154411316,0.40623947978019714],"rotation":[0.0027286491822451353,0.8489894270896912,0.003152979537844658,-0.5283932685852051],"used":true,"bodyHandle":2.836e-321,"linearSpeed":1.4067351907957988e-8,"angularVelocityHistory":[[-0.0002279049513163045,-0.0013287320034578443],[-0.00046945735812187195,-0.0009299311204813421],[-0.0012506325729191303,-0.0006242981180548668],[-0.0001018254115479067,-0.0010174133349210024],[-0.0011212951503694057,-0.0006772999768145382],[-0.0004370535898488015,-0.0004815904248971492],[0.00009052545647136867,-0.00005924724246142432],[-0.0007319286232814193,-0.0008039196254685521],[-0.0009902040474116802,-0.0009005116298794746],[-0.0006394749507308006,-0.0005287028034217656],[0.00040484071359969676,-0.0005324332742020488]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.17701055109500885,0.18167084455490112,0.32543686032295227],"rotation":[0.6607348918914795,-0.018916377797722816,0.7501188516616821,-0.019831454381346703],"used":true,"bodyHandle":2.84e-321,"linearSpeed":1.4987720711325948e-11,"angularVelocityHistory":[[-0.000022688505850965157,-0.00002970696732518263],[0.000013235949154477566,0.00001214394887938397],[-0.00000556621989744599,-0.000010104881766892504],[-0.00000962121703196317,-0.000010844604730664287],[-0.000003821674908977002,-0.00001838573007262312],[0.000004108794200874399,0.000009205708010995295],[-0.000004440386874193791,-0.000005282327038003132],[-0.000005543784936890006,-0.00000795246069174027],[-0.000007926551006676164,0.000010903048860200215],[-0.000004348214588389965,-0.00000826269661047263],[0.0000071668341661279555,-0.000006392723207682138]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.07037194073200226,0.17651714384555817,0.2284412682056427],"rotation":[-0.0030529999639838934,0.8941662907600403,0.002877487801015377,-0.44771531224250793],"used":true,"bodyHandle":2.846e-321,"linearSpeed":6.992707491016165e-12,"angularVelocityHistory":[[0.00045749646960757673,-0.0003771952469833195],[0.000023547281671199016,0.00004848970638704486],[-0.00025060432380996644,-0.00030716220499016345],[0.00011199124855920672,-0.000020652832972700708],[0.00011391549924155697,-0.000047245768655557185],[0.00041190304909832776,0.00005889512976864353],[0.00007687367178732529,0.000044519241782836616],[0.00026298503507860005,-0.000040749051549937576],[0.00005799865539302118,0.000038588048482779413],[-0.00013166898861527443,0.000028164093237137422],[0.0005386120174080133,0.00007607672887388617]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.2761940360069275,0.18232038617134094,0.29390716552734375],"rotation":[0.0069769807159900665,-0.2651176154613495,0.008608555421233177,0.9641523957252502],"used":true,"bodyHandle":2.85e-321,"linearSpeed":1.169543902628656e-9,"angularVelocityHistory":[[0.00006709949957439676,6.401914021125776e-8],[-0.0001639364054426551,-0.00004499158967519179],[-0.000004495951543503907,-0.00008207543578464538],[-0.0001223986764671281,-0.00004076977711520158],[0.00005962403156445362,-0.000005509710717888083],[-0.00013902151840738952,0.00009395733650308102],[0.00009803869761526585,-0.00008602473099017516],[-0.00015473359962925315,0.00004952556992066093],[0.00008915331272874027,-0.00005986255200696178],[-0.0001166101501439698,-0.000016546044207643718],[0.00005187340502743609,-0.0000771424820413813]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.12241791933774948,0.18237227201461792,0.3093585669994354],"rotation":[-0.9955363273620605,-0.005520314443856478,0.08889908343553543,0.03120756894350052],"used":true,"bodyHandle":2.856e-321,"linearSpeed":2.4620464632512265e-9,"angularVelocityHistory":[[0.001325090299360454,0.00013354889233596623],[-0.00037036967114545405,-0.00029423428350128233],[0.001482578576542437,0.0006769534666091204],[0.0010333299869671464,0.0004951344453729689],[-0.0005330067942850292,-0.00018727350106928498],[0.001939447014592588,0.00019770984363276511],[0.0008818286005407572,-0.000007351219664997188],[0.000024910445063142106,0.0000904323605936952],[0.00029108760645613074,-0.0009054507245309651],[0.001307613798417151,0.00027090933872386813],[0.000374548661056906,-0.00016516809409949929]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.16321298480033875,0.1823556274175644,0.23264488577842712],"rotation":[-0.0007932647713460028,-0.5546535849571228,0.0025497758761048317,0.8320770263671875],"used":true,"bodyHandle":2.86e-321,"linearSpeed":1.166284846138511e-9,"angularVelocityHistory":[[0.00036333021125756204,-0.0007482364308089018],[0.0002986945619340986,-0.0003960990288760513],[0.00010071124415844679,-0.0003316900983918458],[0.00017749590915627778,-0.00017337633471470326],[0.00006140262848930433,-0.00019026872178073972],[0.00010047297109849751,-0.00012301541573833674],[0.00007410627586068586,-0.00011160848225699738],[0.00008216842979891226,-0.0001123725960496813],[0.00002149289139197208,-0.00009707972640171647],[0.000039392449252773076,-0.000039122132875490934],[0.00003595079397200607,-0.00006398040568456054]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[-0.04201045259833336,0.24746695160865784,-0.0034128273837268353],"rotation":[-0.0026504306588321924,-0.8503796458244324,0.000510181940626353,-0.5261626243591309],"used":true,"bodyHandle":2.866e-321,"linearSpeed":0.08284898495033875,"angularVelocityHistory":[[0.017977671697735786,-0.004253778140991926],[0.005601533688604832,-0.0009391745552420616],[0.0022930472623556852,-0.0027057616971433163],[-0.000002046559757218347,-0.0032905193511396646],[-0.0003328132734168321,-0.0006050323718227446],[-0.000011923642887268215,-0.002902634209021926],[0.00015039344725664705,-0.0022036759182810783],[-0.0003875409602187574,-0.0008764937520027161],[-0.002367671811953187,-0.00002495582157280296],[0.0002968276967294514,-0.0010642348788678646],[0.00031903546187095344,-0.004360171966254711]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05835581198334694,0.17474262416362762,0.43956229090690613],"rotation":[-0.00029878548230044544,-0.9452933669090271,0.0018130146199837327,0.32621634006500244],"used":true,"bodyHandle":2.87e-321,"linearSpeed":6.204853924828617e-17,"angularVelocityHistory":[[0.00003186205503880046,0.00005890352258575149],[-0.000021951462258584797,0.00006100850805523805],[-0.015488081611692905,-0.00017710048996377736],[-0.00005702914859284647,0.00010276040848111734],[0.000019919918486266397,0.00008110162161756307],[-0.009788461960852146,0.0025562529917806387],[0.0000028484087124525104,0.00011545960296643898],[-0.000048542540753260255,0.0000995553782559],[-0.015172086656093597,0.010604560375213623],[-0.000028725418815156445,0.0000673733011353761],[-0.00007961774099385366,0.0000700851742294617]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.10329152643680573,0.25401583313941956,0.0357089526951313],"rotation":[0.8743177056312561,0.006606730632483959,0.4852900803089142,0.004283569287508726],"used":true,"bodyHandle":2.875e-321,"linearSpeed":0.08328118047886227,"angularVelocityHistory":[[0.0029638679698109627,-0.002887515816837549],[0.0003865117614623159,0.001022352953441441],[0.0017866104608401656,-0.001911745872348547],[0.003844562452286482,-0.001996488543227315],[0.003141974564641714,-0.004448374267667532],[0.0034697349183261395,-0.007011616602540016],[0.0036004402209073305,-0.004312795586884022],[0.003236078191548586,-0.003605374600738287],[0.0029481842648237944,-0.0006335894577205181],[0.0036714370362460613,-0.0054406593553721905],[0.003214531810954213,-0.0064686662517488]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.18238545954227448,0.1836179941892624,0.7754141688346863],"rotation":[0.03900487720966339,-0.39051827788352966,-0.04036594182252884,-0.9188823699951172],"used":true,"bodyHandle":2.88e-321,"linearSpeed":6.516690287726757e-8,"angularVelocityHistory":[[-0.05596534162759781,-0.015174434520304203],[0.04413975775241852,0.018752001225948334],[0.043041303753852844,0.01677844673395157],[0.032917656004428864,0.014510678127408028],[0.03372994437813759,0.016047116369009018],[0.0407620444893837,0.020216962322592735],[0.05346909910440445,0.03033028542995453],[0.07745234668254852,0.04860953986644745],[0.10154934227466583,0.064651720225811],[0.11957449465990067,0.07723385840654373],[0.13487248122692108,0.0883929431438446]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06132924184203148,0.24766923487186432,-0.0027030527126044035],"rotation":[0.001513369963504374,0.4353383779525757,0.0008119962294586003,-0.9002652168273926],"used":true,"bodyHandle":2.885e-321,"linearSpeed":0.08284910839893962,"angularVelocityHistory":[[0.016337785869836807,-0.0038786963559687138],[0.008165333420038223,0.0007191255572251976],[0.015299338847398758,0.00900264922529459],[0.001542070647701621,0.0028847462963312864],[0.00011863982945214957,0.0004587470612023026],[0.0012758936500176787,0.0019629846792668104],[0.0004610437317751348,0.0031306117307394743],[0.0013970669824630022,0.0029831533320248127],[-0.0011483983835205436,0.0019561226945370436],[0.0009575044387020171,0.0007500357460230589],[0.0016506201354786754,0.0031714974902570248]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.20951974391937256,0.1819162517786026,0.6676176190376282],"rotation":[0.004890053998678923,0.9629501700401306,-0.00427882419899106,-0.2696009576320648],"used":true,"bodyHandle":2.89e-321,"linearSpeed":4.73738962444596e-9,"angularVelocityHistory":[[-0.000030686205718666315,-0.0013105354737490416],[-0.00025130464928224683,0.0001997176732402295],[0.000031299161491915584,-0.0004463413788471371],[0.00006075190322007984,-0.0004691450158134103],[0.00045183891779743135,0.0006995689473114908],[-0.0001752882672008127,4.39269342678017e-7],[-0.00009147734817815945,-0.00036583462497219443],[0.0002472653577569872,-0.0001579829113325104],[0.0008744535152800381,0.00030385464197024703],[0.0001450786949135363,-0.0003976264561060816],[0.0013623010599985719,0.0016872369451448321]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[0.009661597199738026,0.24741320312023163,-0.0342869870364666],"rotation":[-0.0006545106880366802,-0.8507964611053467,-0.0019282643916085362,0.5254913568496704],"used":true,"bodyHandle":2.895e-321,"linearSpeed":0.08284185211477665,"angularVelocityHistory":[[0.02556050941348076,-0.014484290033578873],[0.01589135453104973,0.0008487874874845147],[0.011134513653814793,0.0005249111563898623],[0.0017688788939267397,0.002174815395846963],[-0.0014460732927545905,-0.00008229778177337721],[0.00018064919277094305,0.0008937038364820182],[-0.001863253302872181,0.0015525895869359374],[0.005377201363444328,0.00005713392238249071],[-0.0012657811166718602,-0.000667109212372452],[-0.00020672798564191908,-0.0005628771614283323],[-0.0017350035486742854,-0.001514353440143168]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.21803440153598785,0.17729707062244415,0.2861560881137848],"rotation":[-0.0004675304517149925,-0.0035013053566217422,0.0008965557790361345,0.9999933242797852],"used":true,"bodyHandle":2.9e-321,"linearSpeed":7.363453780670833e-17,"angularVelocityHistory":[[0.0000010918713542196201,-9.34514673645026e-7],[0.0000010813581639013137,-9.018340278998949e-7],[0.0000010927777793767746,-9.224783070749254e-7],[0.0000010346026328988955,-9.37716833959712e-7],[0.0000011168573337272392,-9.178174309454334e-7],[0.000001042080725710548,-9.722255072119879e-7],[0.0000010298791721652378,-9.56042072175478e-7],[0.0000010464199249327066,-9.615130238671554e-7],[0.0000010271212431689491,-9.321205425294465e-7],[0.0000010843968993867747,-9.382324606121983e-7],[0.0000011223232831980567,-9.234491358256491e-7]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.2910442650318146,0.18737392127513885,0.2954106032848358],"rotation":[0.0032189388293772936,0.20214049518108368,0.02054760791361332,0.9791356921195984],"used":true,"bodyHandle":2.905e-321,"linearSpeed":2.20726372055554e-9,"angularVelocityHistory":[[0.0001154773126472719,0.00005650451930705458],[-0.00026685744524002075,-0.00018319814989808947],[0.00009599010809324682,-0.00005159939973964356],[-0.00017738432507030666,-0.00009270125156035647],[0.0001429042313247919,0.00006562102498719469],[-0.00021554251725319773,0.000010416140867164358],[0.00019179725495632738,-0.00002958519871754106],[-0.00021381456463132054,-0.000019270801203674637],[0.00017233786638826132,-0.000005779286311735632],[-0.00015885448374319822,-0.00007293147791642696],[0.00009428254998056218,-0.00002063746433123015]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.2876144051551819,0.1932103931903839,0.295728862285614],"rotation":[-0.9048686027526855,-0.018744392320513725,0.42527705430984497,-0.0009340164833702147],"used":true,"bodyHandle":2.91e-321,"linearSpeed":1.8954692097625175e-9,"angularVelocityHistory":[[0.0003512338735163212,0.0001625237346161157],[-0.0005776018952019513,-0.00026821138453669846],[0.00025790068320930004,-0.00005373332169256173],[-0.00033497175900265574,-0.00018577769515104592],[0.0003482465981505811,0.00012030226207571104],[-0.00042634372948668897,-0.000050103852117899805],[0.0004432207497302443,0.00001032793261401821],[-0.000502006325405091,-0.00009274685726268217],[0.0004185534198768437,0.000028318721888354048],[-0.0003317785740364343,-0.00010878907778533176],[0.0003276274655945599,0.00003395868043298833]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[-0.1602681577205658,0.18799349665641785,0.2231483906507492],"rotation":[-0.5211186408996582,-0.006026675924658775,-0.8534579873085022,-0.0029088156297802925],"used":true,"bodyHandle":2.915e-321,"linearSpeed":2.869335219359225e-9,"angularVelocityHistory":[[0.00011487126175779849,-0.0006111865513958037],[0.0003589145781006664,-0.0003903709293808788],[0.00009899639553623274,-0.00030502406298182905],[0.0002209336234955117,-0.00018605160585138947],[0.00007785105117363855,-0.00016895218868739903],[0.00011549443297553807,-0.00011287126108072698],[0.00007509993884013966,-0.00011587136395974085],[0.00008316151070175692,-0.00009521025640424341],[0.00003421873043407686,-0.00007778662256896496],[0.00004602095214067958,-0.0000361607271770481],[0.000055138341849669814,-0.0000713329209247604]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[0.1812402755022049,0.179749995470047,0.3215801417827606],"rotation":[0.7419828176498413,-0.013196920976042747,-0.665317714214325,-0.08148393779993057],"used":true,"bodyHandle":2.92e-321,"linearSpeed":4.141756537029844e-10,"angularVelocityHistory":[[-0.0002469689934514463,0.00024123200273606926],[0.00006272806058404967,-0.0004894890007562935],[-0.00035937933716923,0.0013285542372614145],[0.00002273360951221548,-0.00009483172470936552],[-0.00006360339466482401,-0.00023485902056563646],[0.00001945440271811094,0.0008152140653692186],[-0.0002832387399394065,0.000268309231614694],[-0.000001897424567687267,-0.0004095094627700746],[0.00003037231908820104,0.0005798846832476556],[0.00009731190948514268,0.00020769973343703896],[0.0002914002980105579,0.00024715601466596127]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.2806520164012909,0.17605620622634888,0.32622024416923523],"rotation":[-0.1693134605884552,0.018474828451871872,-0.9853801727294922,0.004183218814432621],"used":true,"bodyHandle":2.925e-321,"linearSpeed":3.3765132855788174e-11,"angularVelocityHistory":[[-0.00008599933789810166,-0.000006852134447399294],[0.000025086173991439864,0.0000017439795101381605],[-0.00007406350050587207,-0.000020293788111303],[-0.000005335793503036257,-0.000006184201993164606],[-0.000005299859822116559,0.00010238704999210313],[0.000035207864129915833,0.000024503073291270994],[-0.000055638876801822335,0.00006434274109778926],[0.0000557446874154266,0.00002210285128967371],[-0.00006855028186691925,0.00001376276577502722],[0.0000047353737500088755,0.00002517236498533748],[-0.00002759882409009151,0.00007135032501537353]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.0525442399084568,0.2533207833766937,-0.0014843984972685575],"rotation":[0.004021391272544861,0.9596555233001709,0.0015529386000707746,-0.2811451852321625],"used":true,"bodyHandle":2.93e-321,"linearSpeed":0.0834849451675355,"angularVelocityHistory":[[-0.00136313505936414,-0.0009003726881928742],[0.0005705534713342786,-0.00016744840831961483],[0.0006253516767174006,-0.0007388436933979392],[0.0012062790337949991,-0.0001534473994979635],[-0.0004638181999325752,0.0007740288274362683],[0.0006329566822387278,-0.0005110258935019374],[0.0005615767440758646,-0.00033143372274935246],[0.0008034820202738047,-0.000015077538591867778],[0.0008871486061252654,0.0005491526098921895],[0.00025345038739033043,0.00019419357704464346],[0.001237879041582346,-0.0012948191724717617]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.16445794701576233,0.2531634569168091,0.014714084565639496],"rotation":[-0.0004220549890305847,-0.4879659414291382,-0.00857835914939642,0.8728204369544983],"used":true,"bodyHandle":2.935e-321,"linearSpeed":0.08315888506133862,"angularVelocityHistory":[[0.004547132179141045,-0.0046473341062664986],[-0.005009292159229517,0.0018856421811506152],[-0.0017334226286038756,0.0013653325149789453],[0.003655201056972146,-0.0012123860651627183],[0.008753235451877117,0.0012557323789224029],[-0.0005066739395260811,-0.004915165714919567],[-0.0004962574457749724,-0.008876489475369453],[0.05140910670161247,0.020290831103920937],[0.0036266944371163845,-0.004474248271435499],[0.007052228320389986,-0.0008526745950803161],[0.004019994754344225,-0.004023760091513395]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.21971435844898224,0.18273243308067322,0.21006403863430023],"rotation":[0.0032584599684923887,0.7815165519714355,-0.00036352017195895314,0.6238757967948914],"used":true,"bodyHandle":2.94e-321,"linearSpeed":7.419344605159883e-13,"angularVelocityHistory":[[-0.000013401074284047354,-0.00003690152880153619],[-0.000014907323020452168,0.00000625227266937145],[-0.000014110407391854096,-0.000006161460987641476],[-7.153388992264809e-7,-0.0000036807307424169267],[-0.000003812405793723883,0.0000023438208245352143],[-9.677303296484752e-7,0.000018268659914610907],[0.00000406652407036745,-0.00002303015389770735],[-0.0000020667287117248634,-0.0000033009198432409903],[-0.0000011253493994445307,-0.000018187904061051086],[-0.000008292151505884249,0.000002975974211949506],[-0.0000032683815334166866,-0.000006474449946836103]],"sleepCandidateFrames":4,"pendingImpulse":null},{"position":[0.2826940715312958,0.17675597965717316,0.2605665922164917],"rotation":[-0.4522579312324524,-0.00016346770280506462,0.8918651938438416,-0.0062590911984443665],"used":true,"bodyHandle":2.945e-321,"linearSpeed":3.046421076535618e-10,"angularVelocityHistory":[[0.00027143460465595126,-0.0004296976258046925],[0.0005478453240357339,-0.0005615734844468534],[0.00013645822764374316,0.000031829818908590823],[0.0003622923686634749,-0.0005117884720675647],[-0.000044127136789029464,-0.00005093174331705086],[0.0009075553389266133,-0.0006655554170720279],[0.0003973734856117517,-0.0004572946345433593],[0.00011476074723759666,0.00015341588004957885],[0.0002579837164375931,-0.0006812718347646296],[0.0005332177388481796,-0.00008778367919148877],[-0.00007242715946631506,0.00001929914469656069]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.11237803846597672,0.24713973701000214,-0.03302789479494095],"rotation":[0.9063236713409424,-0.003974669147282839,0.42256495356559753,0.0006748414598405361],"used":true,"bodyHandle":2.95e-321,"linearSpeed":0.08283126819932965,"angularVelocityHistory":[[0.04278440400958061,0.10003920644521713],[0.018054712563753128,0.0017339017940685153],[0.005836972035467625,0.007141958922147751],[0.0005822281818836927,-0.0016422008629888296],[-0.001039341208525002,-0.0017921378603205085],[0.0005171706434339285,-0.0015907466877251863],[0.00006376353121595457,-0.00244535761885345],[-0.00000618238254901371,-0.004255205392837524],[-0.000043807431211462244,-0.003998422529548407],[0.0007960811490193009,-0.002144880359992385],[0.00037473050178959966,-0.0025207994040101767]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.21101422607898712,0.18577557802200317,0.21136650443077087],"rotation":[0.017620613798499107,-0.3828982412815094,-0.04829142615199089,-0.9223591089248657],"used":true,"bodyHandle":2.955e-321,"linearSpeed":2.5590292374369945e-7,"angularVelocityHistory":[[0.002630118979141116,-0.0016150885494425893],[-0.012874334119260311,-0.003106113290414214],[0.005706276744604111,-0.0062452657148242],[0.002634856617078185,-0.003299834206700325],[0.006306410301476717,-0.0057088048197329044],[-0.010129950009286404,0.0006756309885531664],[0.0015618805773556232,-0.004223237279802561],[0.0012410073541104794,-0.005028274841606617],[0.0023678888101130724,-0.001677996595390141],[-0.011958777904510498,-0.003090073587372899],[0.005795299541205168,-0.006244701333343983]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.27186673879623413,0.17692025005817413,0.2680717408657074],"rotation":[-0.0037058372981846333,0.4623919129371643,-0.0026451556477695704,-0.8866640329360962],"used":true,"bodyHandle":2.96e-321,"linearSpeed":2.839677701815489e-12,"angularVelocityHistory":[[-0.00011955131049035117,-0.00011779178021242842],[0.0001037413312587887,0.0001511403388576582],[-0.00016083303489722311,-0.00009119872993323952],[0.00006666716217296198,0.00007397058652713895],[-0.00012457981938496232,-0.00011943512799916789],[0.00004130994057049975,0.00013133346510585397],[-0.00012519131996668875,-0.00012637447798624635],[0.00003932758409064263,0.00009261460218112916],[-0.00012854704982601106,-0.00010616369399940595],[0.0000555386213818565,0.00005406343188951723],[-0.00012945510388817638,-0.00010216381633654237]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[0.2745243012905121,0.18208234012126923,0.24326127767562866],"rotation":[-0.00011400748189771548,-0.4320618212223053,0.005777858197689056,0.901825487613678],"used":true,"bodyHandle":2.964e-321,"linearSpeed":6.556759140387118e-9,"angularVelocityHistory":[[0.0007931656436994672,0.0007391988183371723],[-0.00040601211367174983,-0.00015513559628743678],[-0.00021356699289754033,0.001619279501028359],[-0.0010050352429971099,0.0022140596993267536],[-0.00009528172085992992,0.002582607790827751],[-0.0021343801636248827,0.0003297508810646832],[-0.000042282819777028635,0.002145830076187849],[-0.0011634555412456393,0.0011722055496647954],[0.0009020303259603679,0.0004849548568017781],[-0.0005988336051814258,-0.00033947426709346473],[-0.0003279991797171533,0.0018082341412082314]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.10870222002267838,0.2582841217517853,-0.028319591656327248],"rotation":[0.684194028377533,-0.004813034553080797,0.7292816042900085,-0.0019431511173024774],"used":true,"bodyHandle":2.97e-321,"linearSpeed":0.08265783094901978,"angularVelocityHistory":[[-0.014563867822289467,-0.016868717968463898],[-0.0016607798170298338,-0.0011676843278110027],[0.007356493733823299,0.018176306039094925],[-0.011944402940571308,-0.005025146529078484],[-0.0025108358822762966,-0.00626051239669323],[0.003074136096984148,-0.0013255514204502106],[-0.00023815481108613312,-0.0018079107394441962],[0.002571862656623125,-0.0032326653599739075],[0.0008447928703390062,-0.002242487855255604],[-0.00046704820124432445,-0.0017840213840827346],[0.0012193794827908278,-0.0008630998199805617]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.22236764430999756,0.17694488167762756,0.2098943293094635],"rotation":[-0.0007156457286328077,0.3433823585510254,0.0026790951378643513,-0.9391915798187256],"used":true,"bodyHandle":2.974e-321,"linearSpeed":3.420608685035796e-14,"angularVelocityHistory":[[-0.000007455089416907867,0.00004729315696749836],[-0.000013502707588486373,0.00004737863127957098],[0.0000020671361653512577,0.000007481802640540991],[0.000023645647161174566,-0.000007483742592739873],[0.000006763898909412092,-0.0000017061275912055862],[0.000015962612451403402,0.000029899285436840728],[0.000010936884791590273,-0.000012706388588412665],[-9.300872534367954e-7,0.0000023829029487387743],[0.0000039600445234100334,-0.000007265950898727169],[-9.028003660205286e-7,-0.000001850239755185612],[0.00000383233918910264,-0.0000038662915358145256]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[-0.10045929998159409,0.24751630425453186,-0.011638680472970009],"rotation":[-0.0014265578938648105,0.28634244203567505,0.0024084397591650486,0.9581232070922852],"used":true,"bodyHandle":2.98e-321,"linearSpeed":0.08282992476316312,"angularVelocityHistory":[[0.010252483189105988,-0.003309102263301611],[0.005427102092653513,-0.0016535536851733923],[0.003740029176697135,-0.002139050280675292],[-0.0004796496650669724,-0.0018505941843613982],[-0.00017835134349297732,-0.0018754586344584823],[0.000021461746655404568,-0.0015565130161121488],[-0.0006714154733344913,-0.004397621378302574],[0.000025121236831182614,-0.0017654136754572392],[0.0014976834645494819,0.001913045416586101],[-0.000550617987755686,-0.0019575259648263454],[-0.0003317910304758698,-0.003746830392628908]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.1586102545261383,0.2472229301929474,-0.0016800160519778728],"rotation":[0.9960339665412903,0.0028905938379466534,-0.08886170387268066,-0.0033771698363125324],"used":true,"bodyHandle":2.984e-321,"linearSpeed":0.08281651004716492,"angularVelocityHistory":[[0.00725589320063591,0.004431257955729961],[0.005941823590546846,0.0018642020877450705],[0.004750355612486601,0.0009787026792764664],[-0.0002648188965395093,0.0025426929350942373],[0.00015263460227288306,-0.0017931282054632902],[0.00008287973469123244,-0.002672675997018814],[-0.00006605191447306424,0.00007274526433320716],[-0.0003522462211549282,-0.0008717195014469326],[-0.00045297067845240235,-0.0022686184383928776],[-0.0000884743858478032,-0.00227849162183702],[-0.0008027072763070464,-0.0003499262093100697]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.00731054088100791,0.25326383113861084,-0.04916533827781677],"rotation":[-0.0001668543991399929,0.9979992508888245,-0.0007876746240071952,0.06321969628334045],"used":true,"bodyHandle":2.99e-321,"linearSpeed":0.08335582144839544,"angularVelocityHistory":[[0.017238842323422432,0.001913136919029057],[0.002627413719892502,-0.00016619233065284789],[0.0005845304112881422,-0.0023958124220371246],[0.0008289155084639788,0.0002945077430922538],[0.0004528808640316129,-0.0015143852215260267],[0.0002667447552084923,0.0000024567793843743857],[-0.0003324676654301584,-0.000675809511449188],[0.0014705043286085129,0.0004104372637812048],[-0.0013810225063934922,-0.00096746941562742],[0.0007643706630915403,-0.0008850994636304677],[-0.00048450366011820734,-0.000794788880739361]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.270719051361084,0.25288525223731995,-0.0021772952750325203],"rotation":[-0.001309786457568407,0.7884488701820374,0.0005052353371866047,-0.615098774433136],"used":true,"bodyHandle":2.994e-321,"linearSpeed":0.08330032188681015,"angularVelocityHistory":[[-0.00013155140914022923,-0.00018662538786884397],[0.0017739455215632915,-0.00016934250015765429],[0.001206828746944666,0.000011297565833956469],[0.0003925253404304385,0.0002605741028673947],[0.0016875701257959008,-0.00013866028166376054],[0.0023665879853069782,0.0028613500762730837],[0.0009597903699614108,0.0006384621374309063],[0.0006374570075422525,0.00013878611207474023],[-0.0013331914087757468,0.0028073128778487444],[0.0004541236557997763,0.00008938813698478043],[0.0002895942307077348,0.00016619465895928442]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.27324992418289185,0.18743498623371124,0.23894591629505157],"rotation":[0.2959599196910858,0.007152961567044258,0.955173134803772,-0.0008705033687874675],"used":true,"bodyHandle":3e-321,"linearSpeed":1.3048749046584327e-8,"angularVelocityHistory":[[-8.594897735747509e-7,0.0033518297132104635],[-0.0004466063983272761,-0.0005004083504900336],[-0.00023137623793445528,0.0025055233854800463],[-0.001355901942588389,-0.0005401999806053936],[0.0002295364683959633,0.0052468362264335155],[-0.001174292410723865,-0.005088931415230036],[-0.0002789171994663775,0.006174757611006498],[0.001002599485218525,-0.0008414274780079722],[-0.00037092246930114925,0.0022696286905556917],[-0.00047416368033736944,-0.0023982746060937643],[0.0013022150378674269,0.002727275947108865]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.28136107325553894,0.1772138774394989,0.20983777940273285],"rotation":[0.0002448138839099556,-0.9997526407241821,-0.0014911387115716934,-0.022189771756529808],"used":true,"bodyHandle":3.004e-321,"linearSpeed":2.5530666334972024e-14,"angularVelocityHistory":[[-9.844700343819568e-7,-0.00002469458559062332],[-0.00001928513665916398,-0.00003260515950387344],[-0.000008527637874067295,-0.000010942629160126671],[0.00001868625622591935,-0.000025109935450018384],[-0.000002851692215699586,-0.000005240926384431077],[0.00002662775295902975,-0.000023458109353668988],[-0.000006942465461179381,-0.00001695181526883971],[0.000016752659576013684,-0.000009633247827878222],[-0.000005410096946434351,-0.000006487150585599011],[-0.0000011006256954715354,-0.000006773076165700331],[-0.00001955018706212286,-0.0000032752509468991775]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[-0.10079770535230637,0.253307580947876,-0.05847406014800072],"rotation":[0.4243142008781433,0.0024704530369490385,0.9055085182189941,-0.002385728294029832],"used":true,"bodyHandle":3.01e-321,"linearSpeed":0.08331904994831717,"angularVelocityHistory":[[-0.0008437298238277435,0.001457621925510466],[0.00020590604981407523,-0.0007294868701137602],[-0.00025605340488255024,-0.0008013578481040895],[-0.0006549085956066847,0.000631029368378222],[-0.00014303228817880154,-0.0007057798211462796],[-0.00039941631257534027,-0.00039896389353089035],[0.00003873150853905827,-0.0005812201998196542],[0.0009246677509509027,-0.0004673435469157994],[0.000331396353431046,-0.000721898686606437],[0.0004214985528960824,0.00022111435828264803],[0.0005287482053972781,0.00017790880519896746]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.21232517063617706,0.18009519577026367,0.2112206071615219],"rotation":[-0.2617758810520172,-0.01504658441990614,0.9638131856918335,-0.048073530197143555],"used":true,"bodyHandle":3.014e-321,"linearSpeed":9.448081845630669e-8,"angularVelocityHistory":[[0.0018784059211611748,-0.00045194156700745225],[-0.011712897568941116,-0.0010359769221395254],[0.00494410190731287,-0.0056784008629620075],[0.0030584041960537434,-0.011011723428964615],[0.004336871672421694,-0.0066299960017204285],[-0.009351639077067375,-0.0059405481442809105],[0.0010266239987686276,-0.005626563914120197],[0.0007212971686385572,-0.004753791261464357],[0.0016465005464851856,-0.00036220988840796053],[-0.010959810577332973,-0.001092393882572651],[0.004862912930548191,-0.005125656723976135]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.14822228252887726,0.2530191242694855,0.004283469170331955],"rotation":[-0.10525471717119217,0.003562860656529665,-0.9944257736206055,0.0051206075586378574],"used":true,"bodyHandle":3.02e-321,"linearSpeed":0.08335087239449891,"angularVelocityHistory":[[-0.000009586259693605825,0.0007909421692602336],[-0.0008335303282365203,0.0008539199479855597],[0.0009372154017910361,0.004991339519619942],[-0.0019585429690778255,0.0006973208510316908],[-0.0008724330691620708,-0.0006646564579568803],[0.0011251409305259585,-0.005708590615540743],[0.00010100218059960753,-0.0001442640059394762],[0.0002860490058083087,-0.00104094622656703],[-0.0033716748002916574,-0.011997729539871216],[0.00010420977196190506,-0.0017392936861142516],[-0.0010375053388997912,-0.00532938726246357]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.16557066142559052,0.2532810568809509,-0.059662122279405594],"rotation":[0.0019623422995209694,-0.6720552444458008,-0.00007858076423872262,-0.7404983639717102],"used":true,"bodyHandle":3.024e-321,"linearSpeed":0.08327469994016773,"angularVelocityHistory":[[0.0013730518985539675,0.001311836764216423],[0.0010130456648766994,0.0016318525886163116],[0.0013901065103709698,-0.0006276575732044876],[0.0010644139256328344,0.0013475845335051417],[0.000742340344004333,0.001540334546007216],[0.001741422456689179,0.00925790797919035],[0.000251478428253904,-0.006123517174273729],[-0.00017185315664391965,0.003351837396621704],[0.0011363767553120852,0.0021360423415899277],[0.0000867267299327068,0.0006583887152373791],[0.0010344961192458868,-0.00017368976841680706]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.27579307556152344,0.1931270956993103,0.23762571811676025],"rotation":[-0.005327187012881041,0.8307061195373535,-0.005146869458258152,0.5566619038581848],"used":true,"bodyHandle":3.03e-321,"linearSpeed":3.8766564897078035e-8,"angularVelocityHistory":[[-0.0010421259794384241,0.005302821286022663],[-0.0003909504448529333,-0.001306879916228354],[0.0004188418388366699,0.0027423629071563482],[-0.00006223697710083798,-0.005629726219922304],[0.0005584015743806958,0.007367084734141827],[0.000925157219171524,-0.011873829178512096],[-0.00035141254193149507,0.009232193231582642],[0.0037878714501857758,-0.003243490820750594],[-0.0016878144815564156,0.003280548844486475],[0.0003996336890850216,-0.005019800271838903],[0.0032946602441370487,0.002848249627277255]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.21202890574932098,0.24912549555301666,0.007050673943012953],"rotation":[-0.019494112581014633,0.3232012689113617,-0.021115941926836967,-0.9458938241004944],"used":true,"bodyHandle":3.034e-321,"linearSpeed":0.08270499330748234,"angularVelocityHistory":[[0.044241126626729965,-0.0022078496403992176],[0.0290793739259243,0.008356115780770779],[-0.19581691920757294,0.03785903379321098],[-0.00723289605230093,0.024851135909557343],[0.046402253210544586,0.004096262156963348],[0.06196900084614754,-0.0007248152396641672],[0.06036008894443512,0.0016211820766329765],[-0.20409373939037323,0.03963407129049301],[-0.011068783700466156,0.01841198094189167],[0.05161447450518608,0.0007216811063699424],[0.06179073452949524,0.00277208280749619]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.16287414729595184,0.2475252002477646,0.0016268584877252579],"rotation":[-0.059140272438526154,-0.0032887912821024656,0.9982385635375977,0.003366086632013321],"used":true,"bodyHandle":3.04e-321,"linearSpeed":0.08285333468458668,"angularVelocityHistory":[[0.07381085306406021,0.0023498034570366144],[0.07529418170452118,0.0045084101147949696],[-0.0003389495250303298,-0.0038999381940811872],[-0.002517727203667164,-0.005270376335829496],[0.0030328729189932346,-0.0012516805436462164],[0.002478269161656499,0.0035932299215346575],[0.004904946777969599,0.006813140586018562],[-0.004097502678632736,-0.001991580007597804],[0.007943885400891304,-0.0006294325576163828],[-0.008453705348074436,-0.00466657429933548],[0.000015885225366218947,0.0006449443753808737]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.060258567333221436,0.2474907636642456,-0.06292913109064102],"rotation":[-0.8221496939659119,-0.0027988532092422247,-0.5692629814147949,0.0012918127467855811],"used":true,"bodyHandle":3.043e-321,"linearSpeed":0.0828357168694168,"angularVelocityHistory":[[0.03207238391041756,-0.004424626938998699],[0.027618711814284325,0.0021094826515764],[0.020730383694171906,-0.008480098098516464],[0.005260116886347532,-0.006222103256732225],[-0.002230658195912838,0.0026676319539546967],[0.0030329155270010233,-0.001966651063412428],[0.002046105684712529,-0.0021412705536931753],[0.0005888143787160516,-0.0014287019148468971],[0.0006707129650749266,-0.005187483970075846],[0.0008017690852284431,-0.004093800205737352],[-0.0012411220232024789,-0.0025591144803911448]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.04555870592594147,0.24737676978111267,-0.07339122891426086],"rotation":[-0.6383020281791687,0.0029552029445767403,0.7697780132293701,0.0018573165871202946],"used":true,"bodyHandle":3.05e-321,"linearSpeed":0.08283408115088402,"angularVelocityHistory":[[0.03406378999352455,0.00974123366177082],[0.0028372344095259905,0.0003793800715357065],[0.00033055676613003016,-0.0013131038285791874],[0.0029298572335392237,-0.0010496391914784908],[-0.0009697169298306108,-0.0004680251586250961],[0.002258004853501916,0.0019223133567720652],[0.0013735437532886863,0.001107558375224471],[0.0008639087900519371,0.0004462550859898329],[0.0029671264346688986,0.0013850362738594413],[0.0008758303592912853,-0.0009771232726052403],[0.0004909874987788498,-0.0007507997797802091]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.20928743481636047,0.2547990679740906,0.014565015211701393],"rotation":[-0.027947474271059036,0.9512740969657898,0.005502094980329275,-0.3070280849933624],"used":true,"bodyHandle":3.053e-321,"linearSpeed":0.08278404595685264,"angularVelocityHistory":[[0.05946453660726547,-0.01228068396449089],[0.03466306999325752,-0.00455716997385025],[-0.19401736557483673,0.04055866226553917],[-0.02035863883793354,0.016666026785969734],[0.06300660967826843,-0.011752105318009853],[0.07665364444255829,-0.015325525775551796],[0.06979010999202728,-0.010315890423953533],[-0.20205152034759521,0.041649363934993744],[-0.022944288328289986,0.017819784581661224],[0.06806493550539017,-0.013460409827530384],[0.0785566046833992,-0.012498375028371811]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.1631457805633545,0.24746474623680115,-0.06132616847753525],"rotation":[0.6234955191612244,0.0030780897941440344,0.7818205952644348,-0.0005622667376883328],"used":true,"bodyHandle":3.06e-321,"linearSpeed":0.08283373565933068,"angularVelocityHistory":[[0.005863167345523834,0.006846033036708832],[0.005660694092512131,0.001634271233342588],[0.004860768094658852,0.005749999545514584],[-0.0005790405557490885,0.0005932184285484254],[0.00046186865074560046,0.0030609953682869673],[-0.0007831219700165093,0.0016545004909858108],[-0.003171564545482397,-0.016786251217126846],[-0.0007742579909972847,0.0014399928040802479],[0.0003739087551366538,0.004413957241922617],[0.0008095495286397636,0.001082941540516913],[-0.00010389375529484823,0.004870292730629444]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.08965132385492325,0.2531321942806244,-0.1259889155626297],"rotation":[-0.04294435307383537,-0.0031253541819751263,0.9990713000297546,-0.0016022606287151575],"used":true,"bodyHandle":3.063e-321,"linearSpeed":0.08336546593092974,"angularVelocityHistory":[[0.008588665165007114,0.0031643989495933056],[0.013517887331545353,-0.05825292691588402],[0.003997610881924629,0.0007246920722536743],[0.0016313998494297266,0.011417772620916367],[0.0013615881325677037,0.010415047407150269],[0.0009562429622747004,0.00956019852310419],[0.0010250980267301202,0.006017349660396576],[0.00016875786241143942,0.01181982085108757],[0.0013507725670933723,0.006521302741020918],[0.0012486913474276662,0.009993797168135643],[0.001228590845130384,0.0057228198274970055]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.11089177429676056,0.24754749238491058,-0.09412061423063278],"rotation":[0.5642761588096619,-0.00008651537063997239,0.8255815505981445,0.0027312939055263996],"used":true,"bodyHandle":3.07e-321,"linearSpeed":0.08284301117374261,"angularVelocityHistory":[[0.06600044667720795,-0.015323290601372719],[0.01970391348004341,0.008004723116755486],[0.0024305847473442554,-0.009239021688699722],[0.013432014733552933,-0.011087257415056229],[-0.00006952372496016324,-0.0009430941427126527],[-0.0037217282224446535,0.0006744189886376262],[0.0019409365486353636,0.010793029330670834],[-0.006852026097476482,-0.0014566591707989573],[0.019863082095980644,-0.013778354972600937],[-0.007372890133410692,-0.0021725259721279144],[0.0016841709148138762,-0.002621653489768505]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0540597140789032,0.2532934546470642,-0.0635082945227623],"rotation":[-0.000022538639314007014,-0.2965349853038788,0.0029825586825609207,0.9550173282623291],"used":true,"bodyHandle":3.073e-321,"linearSpeed":0.08335449622015194,"angularVelocityHistory":[[0.008147615008056164,0.0004494428576435894],[-0.0009731767931953073,0.0018877398688346148],[-0.0024500596337020397,0.0015830934280529618],[-0.0007059903000481427,0.00012458839046303183],[0.00030377990333363414,0.0007720767171122134],[-0.0016905049560591578,0.0005802142550237477],[-0.00033349546720273793,0.0000277928829746088],[0.0002575105463620275,-0.0005509021575562656],[0.0030046403408050537,-0.002072468400001526],[-0.00011042472760891542,0.0003203890228178352],[-0.0017933663912117481,0.004582599736750126]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.15027686953544617,0.2474190890789032,-0.1252867728471756],"rotation":[-0.00020337726164143533,-0.22162674367427826,0.002992331050336361,-0.9751269817352295],"used":true,"bodyHandle":3.08e-321,"linearSpeed":0.08282821398472769,"angularVelocityHistory":[[0.08191220462322235,-0.007242229301482439],[0.11581356823444366,-0.08998743444681168],[0.013473916798830032,0.009843220002949238],[0.002093692310154438,0.0075890119187533855],[-0.00006936739373486489,0.004401313606649637],[0.0008633496472612023,-0.00023086550936568528],[0.00004205891309538856,0.0036361978854984045],[0.00003697885767905973,0.004592891316860914],[-0.00021662948711309582,0.0032631573267281055],[-0.0000805690506240353,0.0019389830995351076],[-0.00014209542132448405,0.0005141297588124871]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.16385819017887115,0.24727997183799744,-0.06617558002471924],"rotation":[-0.0019485758384689689,0.12247328460216522,-0.0012932535028085113,-0.9924690127372742],"used":true,"bodyHandle":3.083e-321,"linearSpeed":0.08283371419795131,"angularVelocityHistory":[[0.03753466159105301,0.006090449169278145],[0.010139359161257744,0.0011750918347388506],[-0.007678213529288769,-0.004816214554011822],[-0.027001112699508667,-0.004921490326523781],[-0.001621799310669303,-0.013267339207231998],[-0.004607295151799917,-0.0071924831718206406],[0.006247742101550102,0.02389758825302124],[-0.007049927953630686,-0.00017737977032084018],[-0.018779510632157326,-0.036315616220235825],[-0.010692913085222244,-0.003280808450654149],[-0.00647777272388339,-0.0019128307467326522]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.10482225567102432,0.2475101351737976,-0.07064121216535568],"rotation":[-0.7278972268104553,-0.0017549647018313408,0.6856827735900879,-0.0012675859034061432],"used":true,"bodyHandle":3.09e-321,"linearSpeed":0.08282709370489674,"angularVelocityHistory":[[0.01187001820653677,-0.0030910249333828688],[0.0046827541664242744,-0.0017554109217599034],[0.004211331717669964,0.002265769522637129],[0.0009665395482443273,-0.00042090893839485943],[-0.0008273371495306492,-0.001010107109323144],[-0.0011163140879943967,0.0018592430278658867],[-0.00035773904528468847,-0.00021234224550426006],[-0.0006483544711954892,-0.0010769696673378348],[-0.00019452853302937,-0.00032419944182038307],[-0.0004198336391709745,0.0004196045338176191],[0.00024589855456724763,-0.000765556120313704]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.2699332535266876,0.2531156837940216,-0.12923084199428558],"rotation":[0.3302205801010132,-0.0024096204433590174,-0.9438961744308472,-0.002917466452345252],"used":true,"bodyHandle":3.093e-321,"linearSpeed":0.08340327237466437,"angularVelocityHistory":[[-0.003899588715285063,-0.004413679242134094],[-0.004519244655966759,-0.002554156119003892],[0.021542347967624664,-0.0007016377639956772],[-0.043578460812568665,0.1403338760137558],[-0.00906782504171133,0.0026815503370016813],[-0.005190052557736635,0.00575535511597991],[-0.0034035430289804935,0.006504252087324858],[-0.0023611905053257942,0.0054523819126188755],[-0.008156351745128632,-0.0005244886269792914],[1.2707257270812988,0.7005200982093811],[-0.16269665956497192,-0.06664083153009415]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.09256216138601303,0.2474275678396225,-0.12928463518619537],"rotation":[0.0023758707102388144,-0.9991629719734192,-0.0016781699378043413,-0.04080292955040932],"used":true,"bodyHandle":3.1e-321,"linearSpeed":0.08283332094557164,"angularVelocityHistory":[[0.03942044824361801,-0.003950465936213732],[0.05030196160078049,0.00747648673132062],[0.006591630633920431,-0.009975923225283623],[0.0018625467782840133,0.0009006891632452607],[0.0013341432204470038,0.0007346408674493432],[0.000583179178647697,-0.003612896427512169],[0.0005938363028690219,0.0032173029612749815],[0.0006806539604440331,0.0020724369678646326],[0.000636707991361618,0.00002401854726485908],[0.00021524247131310403,-0.0005820557125844061],[0.0002286905364599079,-0.0008108265465125442]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.21762079000473022,0.252861350774765,-0.024474920704960823],"rotation":[-0.01886991783976555,0.0028631763998419046,-0.9998100399971008,0.003945061005651951],"used":true,"bodyHandle":3.103e-321,"linearSpeed":0.08321170124305124,"angularVelocityHistory":[[-0.009801173582673073,-0.09529158473014832],[0.010784629732370377,-0.018149077892303467],[-0.008610520511865616,0.0154305724427104],[-0.026360629126429558,-0.06953489780426025],[-0.00970400869846344,-0.08851615339517593],[-0.017269575968384743,-0.03628503531217575],[-0.02109423093497753,-0.02861112728714943],[-0.023209962993860245,-0.05930570513010025],[-0.01575028896331787,-0.04724610596895218],[-0.018452651798725128,-0.06289263069629669],[0.004972631577402353,-0.02687862515449524]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.1491008847951889,0.25340256094932556,-0.09796981513500214],"rotation":[0.009783834218978882,0.07802987843751907,-0.004697315860539675,0.9968919157981873],"used":true,"bodyHandle":3.11e-321,"linearSpeed":0.08322688159619916,"angularVelocityHistory":[[0.005701202433556318,0.15703120827674866],[0.01589559018611908,0.13373613357543945],[-0.03621191158890724,-0.0844476968050003],[-0.032379135489463806,-0.05417676270008087],[-0.017506249248981476,-0.07838297635316849],[-0.02542993612587452,-0.020061278715729713],[-0.0045826067216694355,-0.00018335321510676295],[-0.022199293598532677,-0.03479530289769173],[-0.0382971353828907,0.04600902274250984],[-0.004970799200236797,-0.01323437038809061],[0.0030301494989544153,-0.012640120461583138]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.00985400378704071,0.24750587344169617,-0.09366556257009506],"rotation":[0.003361087990924716,0.9706830978393555,-0.0007043341756798327,0.24033842980861664],"used":true,"bodyHandle":3.113e-321,"linearSpeed":0.0828149371050288,"angularVelocityHistory":[[0.04092768207192421,0.021526362746953964],[0.007844280451536179,0.008007599040865898],[0.025740740820765495,-0.021506408229470253],[-0.0009983052732422948,-0.004964272491633892],[-0.005940145812928677,-0.001627597608603537],[0.0009970410028472543,-0.0030088145285844803],[0.003618180053308606,-0.0064124176278710365],[0.002725779078900814,-0.008681352250277996],[0.0024085429031401873,-0.00614304980263114],[0.0015231497818604112,0.0029346481896936893],[-0.0013935002498328686,-0.0006812635692767799]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.21306098997592926,0.25292298197746277,-0.10786205530166626],"rotation":[-0.06611266732215881,-0.00520184775814414,0.9977876543998718,0.004676495678722858],"used":true,"bodyHandle":3.12e-321,"linearSpeed":0.08339758783985066,"angularVelocityHistory":[[0.021582728251814842,-0.03241465613245964],[0.0009810385527089238,-0.004861136898398399],[0.0003198272897861898,-0.003478050697594881],[-0.08475018292665482,0.2914576828479767],[-0.002310964046046138,0.0017642331076785922],[-0.002671697875484824,0.03573141247034073],[-0.003994859289377928,0.007342330180108547],[-0.003001846605911851,0.005931058898568153],[-0.0024798072408884764,0.004831716418266296],[-0.0019410736858844757,0.0038508635479956865],[-0.0016117235645651817,0.003048264654353261]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.11436042934656143,0.2520526349544525,-0.15483619272708893],"rotation":[-0.39290857315063477,0.06033148616552353,-0.9167322516441345,0.039811890572309494],"used":true,"bodyHandle":3.122e-321,"linearSpeed":0.08272097421012053,"angularVelocityHistory":[[-0.22399437427520752,-1.3325188159942627],[0.0755523219704628,0.4379886984825134],[-0.27404943108558655,1.5635372400283813],[0.26819851994514465,-0.7943457365036011],[0.4646792411804199,-0.7995172739028931],[-0.35725560784339905,1.548453688621521],[0.17396745085716248,0.9797198176383972],[0.6284386515617371,-2.0665907859802246],[0.7361091375350952,-0.43678635358810425],[-0.8763132095336914,4.112401485443115],[0.23992574214935303,0.9504830241203308]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0044633373618125916,0.2586437463760376,-0.16410911083221436],"rotation":[-0.16666418313980103,-0.006532377563416958,0.9859606027603149,0.007871856912970543],"used":true,"bodyHandle":3.127e-321,"linearSpeed":0.0831907525673399,"angularVelocityHistory":[[-0.05404629558324814,0.00012323533883318305],[-0.04834234341979027,0.005417628679424524],[-0.004658586345613003,-0.03212268278002739],[-0.0304110087454319,-0.0038561015389859676],[-0.02412749081850052,0.00017862404638435692],[-0.010712098330259323,0.010189129039645195],[-0.0031625020783394575,0.013370804488658905],[-0.003124703885987401,0.014221718534827232],[0.0038119612727314234,0.0251205675303936],[-0.003486982546746731,0.010849551297724247],[-0.0019680606201291084,0.010151322931051254]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.21856699883937836,0.24730798602104187,-0.02603340335190296],"rotation":[-0.0010387100046500564,-0.9271146655082703,0.0005966729368083179,0.37477582693099976],"used":true,"bodyHandle":3.13e-321,"linearSpeed":0.08284234821706306,"angularVelocityHistory":[[0.0394165962934494,-0.010993017815053463],[0.00434977887198329,-0.009338274598121643],[0.00872897170484066,-0.007926739752292633],[0.005976219195872545,0.0024683496449142694],[-0.00011397562775528058,-0.00008038552914513275],[0.0017520032124593854,-0.00571836344897747],[0.0048855142667889595,-0.008208973333239555],[0.000009771532859303989,0.00491735152900219],[0.002186487428843975,0.0004832443955820054],[0.0015701809898018837,-0.0019131915178149939],[-0.0002814219333231449,-0.008859379217028618]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.21073788404464722,0.2533372640609741,-0.1311740130186081],"rotation":[0.002612948650494218,0.9384853839874268,-0.0008742067730054259,-0.34530797600746155],"used":true,"bodyHandle":3.137e-321,"linearSpeed":0.08341651236873635,"angularVelocityHistory":[[0.034271880984306335,-0.010941429063677788],[0.04012523964047432,0.0024511271622031927],[-0.3455665707588196,-0.2668718099594116],[0.010830661281943321,-0.006009113974869251],[0.057975880801677704,0.012679321691393852],[0.1608802080154419,0.04324083775281906],[-0.002419248456135392,0.003378655295819044],[0.07035213708877563,0.013002806343138218],[-0.07409222424030304,0.09291486442089081],[0.005406704265624285,0.0029010826256126165],[0.0029912611935287714,0.0016949704149737954]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0012471815571188927,0.25278371572494507,-0.15997448563575745],"rotation":[-0.14920495450496674,-0.005928792525082827,0.988765299320221,0.006772278342396021],"used":true,"bodyHandle":3.14e-321,"linearSpeed":0.08325270748491416,"angularVelocityHistory":[[-0.04239170253276825,-0.012418000027537346],[-0.04612039774656296,0.0073653026483953],[0.04927891865372658,-0.055694952607154846],[-0.03410165756940842,-0.012467339634895325],[-0.02446805126965046,-0.002266454277560115],[-0.010640712454915047,0.009402478113770485],[-0.005894308444112539,0.015219477005302906],[-0.0068554142490029335,0.01434734184294939],[0.025749446824193,0.07796531170606613],[-0.0034820069558918476,0.012767714448273182],[0.00043113637366332114,0.008843917399644852]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0032244264148175716,0.25329458713531494,-0.2366923838853836],"rotation":[0.5567204356193542,-0.0010624082060530782,-0.8306992053985596,-0.00023301209148485214],"used":true,"bodyHandle":3.147e-321,"linearSpeed":0.08337634350231804,"angularVelocityHistory":[[0.0010392862604930997,-0.004359886981546879],[-0.008316010236740112,0.0021317298524081707],[-0.04942407086491585,0.007790029980242252],[-0.019889861345291138,0.0024538866709917784],[-0.019610490649938583,0.003237280761823058],[-0.013485013507306576,0.006609265226870775],[-0.010646776296198368,0.0025887335650622845],[0.0017831992590799928,-0.0006113683921284974],[0.052085552364587784,-0.011678204871714115],[-0.0002265305520268157,0.002235008869320154],[-0.008516203612089157,0.005299966316670179]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.14946822822093964,0.25308775901794434,-0.23830744624137878],"rotation":[-0.9950214624404907,-0.0027820076793432236,0.09959062188863754,0.0024932734668254852],"used":true,"bodyHandle":3.15e-321,"linearSpeed":0.08342555465752383,"angularVelocityHistory":[[-0.07559368014335632,-0.13510483503341675],[0.011553684249520302,0.2501770555973053],[-0.013907376676797867,-0.015861529856920242],[-0.0129941301420331,-0.008737005293369293],[-0.010195844806730747,-0.005643087904900312],[-0.007802909705787897,-0.00489711994305253],[-0.006193649955093861,-0.003689805045723915],[-0.00476578576490283,-0.0028534799348562956],[-0.0037348601035773754,-0.0022126222029328346],[-0.002914426615461707,-0.0017159144626930356],[-0.0023254503030329943,-0.0013500709319487214]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0372626930475235,0.2528880536556244,-0.10302109271287918],"rotation":[0.0009466754854656756,-0.9297733306884766,0.0004609489697031677,0.36813095211982727],"used":true,"bodyHandle":3.157e-321,"linearSpeed":0.08311471009789394,"angularVelocityHistory":[[0.016777535900473595,0.01699325256049633],[0.0021875728853046894,0.010491307824850082],[-0.00023650677758269012,0.00230584479868412],[0.0050141699612140656,0.0030068857595324516],[-0.0008343939553014934,0.0006267189746722579],[-0.00011145722237415612,0.0014056117506697774],[-0.0010201517725363374,-0.00270674261264503],[0.0021947596687823534,0.00009662180673331022],[-0.0005169343785382807,-0.0017727280501276255],[-0.0001699758431641385,-0.0021646309178322554],[0.0019852889236062765,0.0009365417063236237]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.20982986688613892,0.253324419260025,-0.2364538162946701],"rotation":[0.001498325145803392,0.6727214455604553,-0.0012075279373675585,0.73989337682724],"used":true,"bodyHandle":3.16e-321,"linearSpeed":0.08336632245809325,"angularVelocityHistory":[[0.02644430659711361,-0.02900325506925583],[0.015520812943577766,0.2124911993741989],[-0.011732779443264008,-0.005846670363098383],[-0.012325852178037167,0.0012854631058871746],[-0.010123046115040779,0.002567372051998973],[-0.00787501223385334,0.002586925635114312],[-0.00611183512955904,0.002182076219469309],[-0.004693225026130676,0.0017716671572998166],[-0.0037275590002536774,0.00138607039116323],[-0.002905316185206175,0.0010507283732295036],[-0.0022515382152050734,0.0008173674577847123]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.2702891230583191,0.24741142988204956,-0.004001630935817957],"rotation":[-0.9834188222885132,-0.0016926570096984506,0.18130828440189362,0.0034435796551406384],"used":true,"bodyHandle":3.167e-321,"linearSpeed":0.08285416999902635,"angularVelocityHistory":[[0.0008438003133051097,-0.007109236903488636],[0.0014118774561211467,-0.005539400037378073],[-0.00015492919192183763,0.000601183797698468],[-0.0013334716204553843,0.009102498181164265],[0.0002715643204282969,0.0006752862827852368],[0.0006488609942607582,-0.002379692392423749],[0.0000208069832297042,0.00010968429705826566],[0.000020289777239668183,0.00005036972288507968],[0.00034076295560225844,-0.00023546535521745682],[0.00006064086119295098,0.00013842136831954122],[0.00025494780857115984,-0.00043059841846115887]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.21322445571422577,0.2476397305727005,-0.08893650770187378],"rotation":[0.04436752572655678,0.0006892975652590394,-0.9990148544311523,0.000564289279282093],"used":true,"bodyHandle":3.17e-321,"linearSpeed":0.08285210313019618,"angularVelocityHistory":[[-0.5212473273277283,-0.04930954426527023],[-0.6519971489906311,-0.029675498604774475],[1.0817139148712158,-0.18097351491451263],[0.01152642723172903,0.08308771252632141],[0.044514019042253494,0.1005510464310646],[-0.3791999816894531,0.16188271343708038],[-0.0626557320356369,-0.002978784264996648],[-0.14955474436283112,0.07249699532985687],[0.02709319442510605,0.04981933534145355],[0.005256826989352703,0.009463220834732056],[0.004802415147423744,0.007039744406938553]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.2523562014102936,0.17646273970603943,0.21000246703624725],"rotation":[0.8728151917457581,0.004781830590218306,0.48802450299263,-0.0016574758337810636],"used":true,"bodyHandle":3.177e-321,"linearSpeed":1.0945959004615604e-9,"angularVelocityHistory":[[0.00029684952460229397,-0.0012359906686469913],[0.002628135960549116,-0.0000568830146221444],[-0.0008103398722596467,-0.0011105503654107451],[0.00033449247712269425,-0.004587265197187662],[-0.0014180592261254787,-0.0023720907047390938],[0.0022738955449312925,-0.002713155932724476],[0.0007064808742143214,-0.0024004834704101086],[-0.0004865748924203217,-0.0010670589981600642],[0.0005339326453395188,-0.0008941073319874704],[0.0020546833984553814,-0.00012282788520678878],[-0.000989843043498695,-0.0009081021416932344]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.18221047520637512,0.2585642337799072,-0.18028633296489716],"rotation":[0.00018776740762405097,0.5265929698944092,0.00019424245692789555,0.8501174449920654],"used":true,"bodyHandle":3.18e-321,"linearSpeed":0.08247789215194211,"angularVelocityHistory":[[0.027314426377415657,0.030971646308898926],[0.05549480766057968,0.08055251091718674],[0.03874247893691063,0.01644587330520153],[0.03669359162449837,0.008934088051319122],[0.03649130463600159,-0.021639233455061913],[0.038708098232746124,0.006657446268945932],[0.054425135254859924,0.03084922768175602],[-0.1166403591632843,-0.03651566430926323],[0.044558193534612656,-0.0020836663898080587],[-0.0005811371956951916,-0.007194558158516884],[0.009373119100928307,0.025704441592097282]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.04855504259467125,0.25308600068092346,-0.12481041997671127],"rotation":[-0.005474128294736147,-0.31605568528175354,0.006594995968043804,-0.9487019181251526],"used":true,"bodyHandle":3.187e-321,"linearSpeed":0.08328285616301818,"angularVelocityHistory":[[0.0028976094909012318,0.002629584167152643],[0.014710072427988052,-0.01414091419428587],[0.0017577410908415914,0.0013522428926080465],[-0.0059150755405426025,0.00033349700970575213],[-0.011403596960008144,0.007802627049386501],[0.006201894488185644,-0.0013111813459545374],[0.004583428613841534,0.002555950079113245],[-0.04826262220740318,0.04420257732272148],[0.012314296327531338,0.005745996255427599],[-0.03403311222791672,0.053587134927511215],[0.02154490537941456,-0.007308881729841232]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.2642926871776581,0.17982107400894165,0.4186014235019684],"rotation":[-0.005204068962484598,-0.31411585211753845,0.0108125489205122,0.9493087530136108],"used":true,"bodyHandle":3.19e-321,"linearSpeed":2.110826182526714e-8,"angularVelocityHistory":[[-0.00047819866449572146,0.0009025246254168451],[-0.0007231057970784605,0.0003584505757316947],[-0.00025413982803002,-0.000003220619191779406],[-0.0007273457013070583,0.0010045523522421718],[-0.0002957747783511877,0.0003421042347326875],[-0.0002972123329527676,0.00014168703637551516],[-0.0006658749189227819,0.0007525784894824028],[-0.0005292569985613227,0.0008862416725605726],[-0.00039093566010706127,0.00050678028492257],[-0.00040088509558700025,0.0007071751751936972],[-0.00018806758453138173,0.0003005731268785894]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.16728395223617554,0.18401750922203064,0.38696420192718506],"rotation":[-0.028106456622481346,0.0038998618256300688,-0.06080567091703415,0.9977461695671082],"used":true,"bodyHandle":3.197e-321,"linearSpeed":1.6506232575435205e-8,"angularVelocityHistory":[[-0.0012956890277564526,-0.0004915904719382524],[-0.0012219070922583342,0.0005313442088663578],[-0.0015320382080972195,0.0003965930372942239],[-0.0000168443384609418,-0.00024993077386170626],[-0.001416933722794056,-0.000027516054615261964],[-0.0005403170944191515,-0.00029881554655730724],[-0.0005635949783027172,-0.00022129854187369347],[-0.001096884487196803,0.0007487632101401687],[-0.0016425445210188627,-0.00031711882911622524],[0.0029021494556218386,-0.005728934891521931],[0.002474543871358037,-0.003256187541410327]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.10739398002624512,0.1735227257013321,0.3391389548778534],"rotation":[0.007870620116591454,0.26139724254608154,-0.0009608735563233495,0.9651986956596375],"used":true,"bodyHandle":3.2e-321,"linearSpeed":3.085828659424406e-11,"angularVelocityHistory":[[0.0011338288895785809,-0.0004822488408535719],[0.00026264903135597706,-0.000036789700970984995],[-0.0011854571057483554,0.0004913760931231081],[0.0005955032538622618,-0.00036300471401773393],[0.00009805137233342975,0.00004411616828292608],[0.0005897768423892558,-0.0005054280045442283],[0.000480195798445493,-0.000005846299700351665],[0.00018367137818131596,0.000017315809600404464],[0.0004131421446800232,-0.0009379104594700038],[-0.00043631374137476087,0.00007546477718278766],[0.0015727796126157045,-0.0011931051267310977]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.061128079891204834,0.17515340447425842,0.2892996668815613],"rotation":[0.001706856768578291,-0.1292254477739334,-0.0025049203541129827,0.9916106462478638],"used":true,"bodyHandle":3.206e-321,"linearSpeed":6.598634101118336e-13,"angularVelocityHistory":[[0.0008539828704670072,-0.0000052620694077631924],[0.00016411485557910055,-0.00001285443522647256],[-0.0005080434493720531,-0.0004258083354216069],[0.0002022557455347851,0.00003428188574616797],[0.000016810437955427915,0.00019057864847127348],[0.000423495628638193,0.0002882083354052156],[0.0002678392338566482,0.0002366980043007061],[0.00027498879353515804,0.0003751514304894954],[-7.313083756343985e-7,-0.000025244095013476908],[-0.00004172362605459057,-0.00025913072749972343],[0.0009610148845240474,0.00012503624020610005]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.0031163659878075123,0.1766900271177292,0.2689577043056488],"rotation":[0.002686508698388934,0.10474534332752228,-0.0007936774636618793,0.994495153427124],"used":true,"bodyHandle":3.21e-321,"linearSpeed":5.452293607257393e-16,"angularVelocityHistory":[[0.000005255333235254511,-2.823314559918799e-7],[-0.000004107474524062127,-0.000001049426259669417],[-0.000004454124791664071,0.000002597405000415165],[0.000014918001397745684,-0.000018180469851358794],[-0.000010581707101664506,0.000004524176347331377],[-9.986521263272152e-7,-3.433650022088841e-7],[-6.332933253361261e-7,0.000004909115887130611],[-7.19490060419048e-7,-0.0000053128605941310525],[-1.0250997206640022e-7,0.000005471862550621154],[-2.8873179758193146e-7,-0.000003967411885241745],[0.000002397316848146147,0.0000021761602511105593]],"sleepCandidateFrames":3,"pendingImpulse":null},{"position":[0.054484929889440536,0.17727652192115784,0.3050387501716614],"rotation":[0.05299539864063263,0.1888192892074585,0.013288211077451706,0.9804907441139221],"used":true,"bodyHandle":3.216e-321,"linearSpeed":1.2429541763036808e-8,"angularVelocityHistory":[[-0.0025268655735999346,0.0017583778826519847],[-0.004478429909795523,-0.0004214350483380258],[0.008831676095724106,0.00007437962631229311],[0.023406868800520897,0.003675380488857627],[-0.003545205108821392,-0.0029027971904724836],[0.012747843749821186,0.004503767937421799],[0.014964942820370197,-0.005277618765830994],[-0.007321411278098822,-0.00022133901074994355],[-0.012204081751406193,0.015126988291740417],[0.015407368540763855,-0.003574300091713667],[0.012042621150612831,0.003808955429121852]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.1920212060213089,0.1803879588842392,0.3998001217842102],"rotation":[0.001482597435824573,-0.10800527781248093,0.0015398254618048668,0.9941479563713074],"used":true,"bodyHandle":3.22e-321,"linearSpeed":1.259960417027128e-9,"angularVelocityHistory":[[-0.00006122390186646953,0.0006199932540766895],[-0.00018728920258581638,0.0003100745670963079],[0.0022717106621712446,-0.004696724005043507],[-0.0001845339429564774,0.0003540739417076111],[-0.00038637177203781903,0.00024211320851463825],[0.0003612267319113016,-0.003633711254224181],[0.001835339586250484,-0.00044592301128432155],[0.00005349750426830724,0.00020923417469020933],[0.0009093541884794831,0.000060654136177618057],[-0.00040606691618449986,0.0004301124718040228],[0.0013044839724898338,-0.0009476098930463195]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[0.24286359548568726,0.17983148992061615,0.5136533379554749],"rotation":[0.008730465546250343,-0.04899942874908447,-0.008310726843774319,0.9987260699272156],"used":true,"bodyHandle":3.226e-321,"linearSpeed":2.057888510983411e-8,"angularVelocityHistory":[[-0.00011974676453974098,-0.001844711252488196],[-0.0035642441362142563,0.0026840665377676487],[-0.0009548753732815385,-0.001883813412860036],[0.0005673871492035687,0.0017514737555757165],[0.00036976428236812353,0.000046836186811560765],[0.0014309607213363051,-0.00016591914754826576],[-0.000753334432374686,-0.0014305547811090946],[0.0002717070747166872,0.003291643690317869],[0.000875420868396759,-0.004086650442332029],[0.00037858160794712603,0.003969948273152113],[-0.00701470160856843,-0.002384972758591175]],"sleepCandidateFrames":5,"pendingImpulse":null},{"position":[0.35286033153533936,0.17452779412269592,0.35269635915756226],"rotation":[0.0031739172991365194,0.4534483253955841,0.00016107298142742366,0.8912768959999084],"used":true,"bodyHandle":3.23e-321,"linearSpeed":8.683608744229436e-11,"angularVelocityHistory":[[-0.00016608960868325084,0.0000996214002952911],[-0.0005667330697178841,0.0003190103452652693],[0.00030721077928319573,-0.00004404304490890354],[-0.0005653645494021475,-0.0004069363931193948],[0.0000856518599903211,-0.00013887786190025508],[-0.0001497345947427675,-0.0000515937281306833],[0.000027772975954576395,0.00018270470900461078],[0.00015821089618839324,0.00010064667003462091],[0.0002972132642753422,-0.00003622856456786394],[-0.000495168031193316,-0.00023117497039493173],[0.0003168838156852871,-0.0002557595435064286]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.35656312108039856,0.18428675830364227,0.3583337962627411],"rotation":[-0.028468584641814232,0.6302244067192078,-0.0654788613319397,0.773123025894165],"used":true,"bodyHandle":3.236e-321,"linearSpeed":3.4707013296681967e-9,"angularVelocityHistory":[[0.00008607837662566453,-2.142144097661003e-7],[0.0013840136816725135,-0.0014022368704900146],[0.0004869969852734357,-0.00022151938173919916],[0.0007303431630134583,-0.0009477860294282436],[-0.0004444310034159571,-0.00045627690269611776],[0.0009854438249021769,-0.0001947802520589903],[0.000048528781917411834,-0.0004196443478576839],[0.0012993915006518364,-0.00233419518917799],[0.0006994956638664007,0.00009495361155131832],[0.0008147958433255553,0.00009001259604701772],[-0.0007212019409053028,0.00010965031833620742]],"sleepCandidateFrames":1,"pendingImpulse":null},{"position":[-0.037115395069122314,0.25866076350212097,-0.1068500205874443],"rotation":[-0.9250592589378357,0.000025690265829325654,-0.379822701215744,-0.0002521478454582393],"used":true,"bodyHandle":3.24e-321,"linearSpeed":0.08304820755230881,"angularVelocityHistory":[[0.006488347891718149,0.01234577875584364],[0.0012934162514284253,0.008707589469850063],[0.002072002971544862,0.001645609736442566],[0.0012568902457132936,0.0017746072262525558],[0.00024073029635474086,0.0013613109476864338],[-0.0003031938394997269,0.0019710464403033257],[0.0002320367784705013,-0.00034367581247352064],[0.0005797342746518552,0.000934136682190001],[-0.0011197851272299886,-0.0013601899845525622],[0.0006373127107508481,-0.0013883102219551802],[0.0010873739374801517,0.001175743993371725]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.21065296232700348,0.247427836060524,-0.11869566887617111],"rotation":[-0.9985222816467285,0.0024637491442263126,0.05413888394832611,0.004006736911833286],"used":true,"bodyHandle":3.246e-321,"linearSpeed":0.08283308322771213,"angularVelocityHistory":[[0.020317764952778816,-0.04750731587409973],[0.00005462670742417686,-0.0008164981263689697],[-0.0003974086430389434,0.001322768977843225],[0.03811468929052353,0.016471676528453827],[0.00020151228818576783,-0.00035033709718845785],[-0.003119736909866333,-0.004461907781660557],[-0.0003715906641446054,0.0006132427952252328],[-0.00028769439086318016,0.0006652934825979173],[-0.00021795029169879854,0.0005704869399778545],[-0.00017060285608749837,0.00047767418436706066],[-0.00017256676801480353,0.00037540830089710653]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.2702639102935791,0.24752067029476166,0.004197845235466957],"rotation":[-0.6876532435417175,-0.0005672737024724483,0.7260356545448303,0.002205741358920932],"used":true,"bodyHandle":3.25e-321,"linearSpeed":0.0828861457135474,"angularVelocityHistory":[[0.0032036651391535997,0.0001549738080939278],[-0.000288811803329736,-0.0001432053541066125],[-0.00016825937200337648,-0.00012636119208764285],[-0.0005275154253467917,0.000624794396571815],[-0.00018810662731993943,-0.00012318171502556652],[-0.00033627799712121487,0.00009043639875017107],[-0.00014075466606300324,-0.000014331532838696148],[-0.00016950859571807086,0.0006455457769334316],[-0.04015741124749184,-0.0028127969708293676],[0.022911421954631805,0.0010350884404033422],[0.014478386379778385,0.0006428436608985066]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.03367484733462334,0.24731744825839996,-0.1334596574306488],"rotation":[-0.7541099190711975,0.002609837334603071,-0.6567355990409851,0.0031079119071364403],"used":true,"bodyHandle":3.256e-321,"linearSpeed":0.08284046507648954,"angularVelocityHistory":[[0.022967953234910965,0.004996107425540686],[-0.0020565397571772337,0.012645740061998367],[0.009675544686615467,-0.011070504784584045],[-0.00693124532699585,0.015751725062727928],[-0.005937762092798948,0.014077018946409225],[0.0003864681348204613,0.008173267357051373],[-0.0017535866936668754,0.008340551517903805],[-0.005493916571140289,0.007341509684920311],[-0.002794080413877964,0.010781964287161827],[-0.0033691884018480778,0.008486244827508926],[-0.0036404142156243324,0.01088615320622921]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.2696664035320282,0.2506211996078491,-0.06582007557153702],"rotation":[-0.2962178885936737,-0.003978848922997713,0.9534438848495483,-0.05642607435584068],"used":true,"bodyHandle":3.26e-321,"linearSpeed":0.08457421853013941,"angularVelocityHistory":[[0.15999333560466766,0.2770897150039673],[-3.062288522720337,-0.9049551486968994],[-0.9877411127090454,-0.18058030307292938],[3.303115129470825,1.3985183238983154],[1.4953454732894897,0.8241849541664124],[-3.2534313201904297,-1.2557848691940308],[-0.3069753348827362,0.151943638920784],[1.6861329078674316,1.0975840091705322],[0.5803515911102295,0.4003995358943939],[-2.6758649349212646,-0.7760685086250305],[-0.047345660626888275,0.11956128478050232]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.15106438100337982,0.25313031673431396,-0.12519164383411407],"rotation":[0.002269901568070054,0.9856909513473511,0.0008756363531574607,-0.16854484379291534],"used":true,"bodyHandle":3.266e-321,"linearSpeed":0.08341117418354208,"angularVelocityHistory":[[0.08390701562166214,0.009531460702419281],[0.03415248915553093,-0.15341250598430634],[0.01103829126805067,-0.008721154183149338],[0.003910464700311422,-0.004329006653279066],[0.0024743645917624235,-0.004449338186532259],[0.0024430109187960625,0.012363815680146217],[0.0012624610681086779,-0.0024075049441307783],[0.0007187133305706084,-0.0026719768065959215],[0.0006799686816520989,-0.002232170896604657],[0.0005273291608318686,-0.0019256434170529246],[0.0005252412520349026,-0.0011546979658305645]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.04441385716199875,0.25334593653678894,-0.1989099681377411],"rotation":[0.00039949503843672574,-0.8570907115936279,-0.0023349965922534466,0.515160083770752],"used":true,"bodyHandle":3.27e-321,"linearSpeed":0.08332153071086887,"angularVelocityHistory":[[0.010354317724704742,0.003031226107850671],[0.011638551019132137,-0.0218085665255785],[0.051352616399526596,-0.018242614343762398],[0.009289901703596115,0.004421819467097521],[0.01337291020900011,-0.0027318603824824095],[0.001344529795460403,-0.0024399596732109785],[-0.0011176848784089088,0.0011686529032886028],[0.0017311127157881856,-0.0014296170556917787],[-0.00023417705961037427,-0.005099656991660595],[-0.0020772332791239023,-0.0011578156845644116],[-0.0010583873372524977,-0.003302798606455326]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.22334633767604828,0.24746498465538025,-0.14295843243598938],"rotation":[-0.9863458275794983,0.0002803673269227147,-0.16468490660190582,0.0008331917924806476],"used":true,"bodyHandle":3.276e-321,"linearSpeed":0.08286547009428895,"angularVelocityHistory":[[0.021102866157889366,0.0005131236393935978],[-0.05214697867631912,-0.049383532255887985],[0.004581371787935495,0.0010716243414208293],[0.005633581429719925,0.009720507077872753],[0.0047723534516990185,0.006865656469017267],[-0.0025751262437552214,0.006844682618975639],[-0.004162593279033899,0.030780818313360214],[-0.08983691036701202,0.11607075482606888],[0.037989694625139236,-0.07838127017021179],[0.0030504416208714247,-0.005040612071752548],[0.0007979513029567897,0.0008639664738439023]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.12065383791923523,0.253115713596344,-0.17862524092197418],"rotation":[0.004025627393275499,-0.3834298253059387,-0.000026992198399966583,0.9235612154006958],"used":true,"bodyHandle":3.28e-321,"linearSpeed":0.08338787772090911,"angularVelocityHistory":[[-0.00836456660181284,-0.006651573348790407],[-0.08858105540275574,0.035732775926589966],[-0.024722618982195854,-0.014906063675880432],[-0.016003606840968132,-0.002326799323782325],[-0.012131313793361187,-0.0018096056301146746],[-0.010359454900026321,-0.0022953117731958628],[-0.007578504737466574,-0.0008386982372030616],[-0.00575501611456275,-0.000949457345996052],[-0.004402289167046547,-0.0008021184476092458],[-0.0032961273100227118,-0.0013536395272240043],[-0.0008974394877441227,0.00048747024266049266]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.16670331358909607,0.24754060804843903,-0.12536250054836273],"rotation":[-0.0018199440091848373,0.9997474551200867,0.003130784025415778,-0.02217908948659897],"used":true,"bodyHandle":3.286e-321,"linearSpeed":0.08283643840791416,"angularVelocityHistory":[[0.045746732503175735,0.0055360314436256886],[0.017596479505300522,-0.0016278399853035808],[-0.0022848532535135746,-0.0021739033982157707],[0.0031037251465022564,-0.006269456818699837],[0.003981862682849169,-0.006596982013434172],[-0.005969618912786245,-0.0032053205650299788],[0.0025010439567267895,0.011294849216938019],[-0.013777747750282288,0.0173800066113472],[0.11646053194999695,-0.23750410974025726],[-0.007738427724689245,-0.008414250798523426],[0.0028851996175944805,0.004068058915436268]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.24317499995231628,0.25321540236473083,-0.18337033689022064],"rotation":[-0.9514186382293701,0.00134397076908499,-0.3078816533088684,-0.0031119012273848057],"used":true,"bodyHandle":3.29e-321,"linearSpeed":0.08329452719278226,"angularVelocityHistory":[[0.03531308099627495,0.009917045012116432],[0.014672930352389812,0.010868608951568604],[0.012583700008690357,0.012214500457048416],[0.008870597928762436,0.006870336830615997],[0.012424299493432045,-0.01922106184065342],[0.007847048342227936,0.003167347749695182],[0.00545792980119586,-0.00006126232619863003],[0.004006079863756895,-0.0006560306064784527],[0.005480355117470026,0.004149703308939934],[1.1903868913650513,0.27606600522994995],[0.3185856342315674,0.02636687085032463]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.1829722374677658,0.24713560938835144,-0.18052645027637482],"rotation":[-0.00009117342415265739,-0.4808200001716614,-0.003874982940033078,-0.8768107295036316],"used":true,"bodyHandle":3.295e-321,"linearSpeed":0.08283960529170131,"angularVelocityHistory":[[0.02332814410328865,-0.0063552334904670715],[0.039299312978982925,-0.002410916145890951],[0.0020333926659077406,0.00487905228510499],[0.0013380456948652864,0.003498379373922944],[-0.005011255387216806,0.0221164021641016],[-0.0005785544053651392,-0.00011408822319936007],[-0.02356705442070961,-0.027569787576794624],[0.04055267572402954,0.004588709678500891],[-0.0005513678188435733,-0.001755125937052071],[-0.026779666543006897,0.15320156514644623],[0.007507279980927706,-0.06622069329023361]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05470878630876541,0.2531636357307434,-0.18992400169372559],"rotation":[-0.0011855850461870432,0.6986805200576782,0.0007320743170566857,-0.7154324650764465],"used":true,"bodyHandle":3.3e-321,"linearSpeed":0.08330226182530506,"angularVelocityHistory":[[0.012315848842263222,-0.01505349762737751],[0.005983241833746433,-0.0042223152704536915],[0.012304067611694336,0.003125176066532731],[0.010284890420734882,-0.0016693499637767673],[0.0050360593013465405,0.0007281624712049961],[0.00494778249412775,-0.0018961126916110516],[0.005284727551043034,0.0039889998733997345],[-0.006186884827911854,-0.002829285804182291],[-0.1736593246459961,-0.05228886380791664],[-0.00212922808714211,-0.009671139530837536],[0.020780479535460472,-0.026405304670333862]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.2700071632862091,0.24759085476398468,-0.05609802156686783],"rotation":[0.0029092002660036087,0.002139492193236947,0.9999932646751404,0.0006840031710453331],"used":true,"bodyHandle":3.305e-321,"linearSpeed":0.0828555778480677,"angularVelocityHistory":[[0.05644504725933075,0.003268209286034107],[0.025458144024014473,0.00034536689054220915],[0.017812130972743034,0.007109594997018576],[0.01524075586348772,-0.0011105252197012305],[0.015343633480370045,0.011639116331934929],[0.0032324057538062334,-0.0009247834095731378],[0.005088402424007654,-0.004515740089118481],[0.001467149588279426,0.00025294884108006954],[-0.07109404355287552,0.04690931737422943],[0.005413184408098459,0.005011781118810177],[-0.01704244315624237,0.007050672080367804]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.2700249254703522,0.24741962552070618,-0.1298559010028839],"rotation":[-0.7674729824066162,0.0012462270678952336,-0.641074001789093,-0.0027754942420870066],"used":true,"bodyHandle":3.31e-321,"linearSpeed":0.0828502124051199,"angularVelocityHistory":[[0.00041174551006406546,-0.002830475801602006],[-0.0006377759273163974,0.0002612267853692174],[-0.02013084851205349,-0.008176131173968315],[-0.09183314442634583,0.0244626272469759],[0.00027033002697862685,-0.0003924820921383798],[0.0004567176220007241,-0.0016590956365689635],[0.00038563093403354287,-0.0005975028034299612],[0.0003245946718379855,-0.00034542250796221197],[-0.002114290138706565,0.004011856857687235],[-0.06322423368692398,-0.0691479742527008],[-0.0031615416519343853,-0.10372327268123627]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0004468860861379653,0.2473314106464386,-0.183755561709404],"rotation":[0.001995223807170987,0.7502517700195312,0.0017982629360631108,-0.661146879196167],"used":true,"bodyHandle":3.315e-321,"linearSpeed":0.0828524555856276,"angularVelocityHistory":[[0.0373360738158226,-0.007197875529527664],[0.004478747956454754,-0.004637161269783974],[-0.003394999308511615,0.00452373456209898],[0.0019602857064455748,0.00035116670187562704],[-0.0005284033832140267,0.0005983815062791109],[0.0017447168938815594,-0.0013271610951051116],[-0.0009452616795897484,-0.000986945116892457],[0.0010968587594106793,0.0009701147791929543],[0.0051791490986943245,0.0019752150401473045],[0.002183177275583148,0.0024392681661993265],[0.00356714753434062,-0.010813712142407894]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05999376252293587,0.2474319189786911,-0.18733249604701996],"rotation":[-0.5873836874961853,-0.0001576905488036573,0.8093004822731018,-0.003618018003180623],"used":true,"bodyHandle":3.32e-321,"linearSpeed":0.08283568790039875,"angularVelocityHistory":[[0.027839375659823418,-0.01632538065314293],[0.006894529331475496,-0.0031006380449980497],[0.004223792813718319,-0.012300623580813408],[0.001866620616056025,0.001967818709090352],[0.0038133205380290747,-0.00816972553730011],[0.001784082385711372,-0.005240922793745995],[-0.0017140854615718126,-0.008695131167769432],[0.008032932877540588,0.004413524176925421],[-0.17151136696338654,-0.10913185775279999],[-0.0021867731120437384,-0.0038565194699913263],[-0.019540421664714813,0.1243528351187706]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06179475784301758,0.24753138422966003,-0.18419745564460754],"rotation":[0.0007773953257128596,-0.9467574954032898,-0.00010611059406073764,-0.3219466209411621],"used":true,"bodyHandle":3.325e-321,"linearSpeed":0.08282275287665454,"angularVelocityHistory":[[0.03268972039222717,-0.013427242636680603],[-0.0014652102254331112,0.015343747101724148],[-0.007505722809582949,0.005640112794935703],[-0.0006306546274572611,-0.0002460802788846195],[0.0016402992187067866,0.0012856126995757222],[0.0006981043261475861,0.0018016834510490298],[-0.004068790469318628,0.0025192005559802055],[0.0014809976564720273,0.0001997018844122067],[-0.0012132137781009078,0.00554779265075922],[0.0018420409178361297,0.0022499917540699244],[-0.001587535603903234,-0.0064995563589036465]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.1207519993185997,0.2474978268146515,-0.18526194989681244],"rotation":[0.0036952816881239414,0.7465623617172241,0.0036358367651700974,0.6652951836585999],"used":true,"bodyHandle":3.33e-321,"linearSpeed":0.08284118966210909,"angularVelocityHistory":[[0.04541638866066933,-0.009018436074256897],[-0.00022706101299263537,-0.005773468408733606],[0.0011336159659549594,-0.011835695244371891],[0.0028573432937264442,0.005818187724798918],[-0.002595666330307722,-0.008969930000603199],[0.0013024891959503293,-0.010285976342856884],[0.17623575031757355,-0.0735011175274849],[-0.007920981384813786,0.019373005256056786],[0.19584335386753082,-0.012587937526404858],[-0.0008705905638635159,-0.005404989700764418],[0.014867217279970646,0.0007460842025466263]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.15134188532829285,0.2471233457326889,-0.23406706750392914],"rotation":[-0.004476905334740877,0.9997569918632507,0.0001047401747200638,0.021583879366517067],"used":true,"bodyHandle":3.335e-321,"linearSpeed":0.08284423654887087,"angularVelocityHistory":[[0.0010661297710612416,0.018309038132429123],[-0.0007840747130103409,-0.004820960573852062],[0.0003306849976070225,0.005331690423190594],[-0.002585712354630232,0.015222664922475815],[-0.00030483529553748667,0.005248398054391146],[-0.0012223836965858936,0.0026375504676252604],[0.03964869678020477,0.006946091540157795],[0.003282188205048442,0.005158205050975084],[-0.00047920955694280565,0.0010542068630456924],[-0.0004632136842701584,0.00043049990199506283],[-0.0037646424025297165,-0.010314268060028553]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.21111129224300385,0.24770909547805786,-0.23413605988025665],"rotation":[-0.9761087894439697,0.0014465129934251308,0.2172756791114807,-0.0008354433812201023],"used":true,"bodyHandle":3.34e-321,"linearSpeed":0.08285787700638987,"angularVelocityHistory":[[0.02896871790289879,0.010944982059299946],[0.00001835686998674646,0.012665602378547192],[0.02970830164849758,0.02364216558635235],[-0.00004114390685572289,0.009543266147375107],[-0.0004912322037853301,0.00026208863710053265],[0.00035970096359960735,0.0007080525392666459],[0.0006223336094990373,-0.009892795234918594],[-0.00005049758328823373,-0.000026727871954790317],[0.004347555339336395,0.002707032486796379],[0.0004813774721696973,0.001017980626784265],[0.12383284419775009,0.1302095204591751]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0002733396249823272,0.2040492594242096,0.6015139222145081],"rotation":[0.006892451550811529,0.9593832492828369,-0.006998513825237751,-0.281934916973114],"used":true,"bodyHandle":3.345e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.08678660541772842,0.15698514878749847],[0.014040779322385788,0.13372191786766052],[-0.07123111188411713,0.13679875433444977],[-0.16541193425655365,0.04138381779193878],[-0.057612426578998566,-0.21831907331943512],[-0.10878812521696091,-0.11926834285259247],[-0.12276269495487213,-0.2115665078163147],[0.23737433552742004,0.02941175363957882],[-0.1275956928730011,0.07658123224973679],[0.3665969669818878,0.21842339634895325]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06168501451611519,0.2048114836215973,0.6352891325950623],"rotation":[-0.0018085258780047297,-0.4950641393661499,-0.010804803110659122,-0.8687872886657715],"used":true,"bodyHandle":3.35e-321,"linearSpeed":0,"angularVelocityHistory":[[0.1753256618976593,-0.22567154467105865],[0.6095975637435913,0.27040648460388184],[0.32308828830718994,0.08677786588668823],[-0.20380105078220367,0.3351161479949951],[0.0007943004602566361,0.12120018899440765],[0.020319893956184387,-0.5327017903327942],[-0.15476642549037933,-0.05308898165822029],[-0.27158135175704956,-0.28928354382514954],[-0.1019120067358017,-0.11401741206645966],[0.05270080640912056,0.13448908925056458]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06042948365211487,0.20384889841079712,0.7051247954368591],"rotation":[0.004970815032720566,0.9306775331497192,-0.006249478552490473,-0.3657533526420593],"used":true,"bodyHandle":3.355e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.24763096868991852,-0.04177716001868248],[-0.015187970362603664,0.09580369293689728],[0.0910637304186821,0.14404428005218506],[0.13573314249515533,-0.0216594897210598],[-0.014900845475494862,-0.1886730045080185],[-0.13162590563297272,-0.048805031925439835],[0.07782015949487686,0.07396385818719864],[0.05302925407886505,0.2556360363960266],[0.07511965185403824,0.013429982587695122],[-0.05120079219341278,0.023471403867006302]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.00039714129525236785,0.20226997137069702,0.7413044571876526],"rotation":[0.0029769199900329113,-0.9832431674003601,-0.014639637432992458,0.18168610334396362],"used":true,"bodyHandle":3.36e-321,"linearSpeed":0,"angularVelocityHistory":[[0.05626951530575752,0.22266238927841187],[0.1257036179304123,0.09586413949728012],[0.20174607634544373,-0.23003745079040527],[-0.18576544523239136,-0.21047478914260864],[0.08954929560422897,0.05024038627743721],[0.4702173173427582,0.017860885709524155],[0.215043306350708,-0.048057444393634796],[0.12907639145851135,-0.030716534703969955],[0.2545059025287628,-0.15315791964530945],[0.18750524520874023,0.06431236863136292]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05862820893526077,0.20572488009929657,0.7033931016921997],"rotation":[-0.006978332065045834,-0.9816996455192566,-0.011308928951621056,0.18997161090373993],"used":true,"bodyHandle":3.365e-321,"linearSpeed":0,"angularVelocityHistory":[[0.032061126083135605,-0.11003012955188751],[-0.014785957522690296,-0.09251535683870316],[0.07098141312599182,-0.09634486585855484],[0.09737174212932587,0.27868542075157166],[0.054310545325279236,-0.004470522981137037],[-0.14938125014305115,-0.14451143145561218],[0.3199472725391388,0.15419168770313263],[0.007468628231436014,-0.20463944971561432],[-0.17085716128349304,-0.04629490524530411],[-0.21231971681118011,0.1477101743221283]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06067721173167229,0.2033204287290573,0.6351202130317688],"rotation":[0.007801460102200508,0.5549774765968323,-0.015565521083772182,0.8316831588745117],"used":true,"bodyHandle":3.37e-321,"linearSpeed":0,"angularVelocityHistory":[[0.04124854505062103,0.016800934448838234],[0.010751384310424328,-0.049801915884017944],[-0.005164060741662979,-0.18276150524616241],[-0.15813182294368744,0.05304916948080063],[-0.42164766788482666,-0.03324440121650696],[-0.011568242684006691,0.08114055544137955],[-0.41892892122268677,0.025274688377976418],[-0.012672726064920425,-0.016318809241056442],[0.0358269177377224,-0.031109053641557693],[-0.045183975249528885,-0.3065659999847412]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0024562838952988386,0.20490728318691254,0.6676980257034302],"rotation":[0.012831543572247028,-0.48898249864578247,-0.000639573554508388,0.8721989393234253],"used":true,"bodyHandle":3.374e-321,"linearSpeed":0,"angularVelocityHistory":[[0.5364974737167358,-0.26295509934425354],[0.2510434091091156,-0.041296325623989105],[0.10903235524892807,-0.1566159725189209],[0.3082601726055145,-0.26986727118492126],[0.16787689924240112,0.07592251896858215],[-0.02395142987370491,0.15628910064697266],[-0.15658104419708252,-0.01490842830389738],[-0.07249058037996292,-0.16773521900177002],[-0.2924876809120178,0.23356999456882477],[0.1873202919960022,-0.0031121689826250076]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.00034020189195871353,0.2067287266254425,0.6020966172218323],"rotation":[-0.011620694771409035,-0.2677386701107025,0.00909296702593565,0.9633784890174866],"used":true,"bodyHandle":3.38e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.14439815282821655,0.37679627537727356],[-0.02755950205028057,0.12136704474687576],[-0.06079934909939766,0.20326653122901917],[-0.15773926675319672,0.039718594402074814],[-0.008105305023491383,-0.24248471856117249],[-0.12694968283176422,-0.185541570186615],[-0.10258228331804276,-0.2615194320678711],[0.3145361840724945,-0.05313127860426903],[-0.14431431889533997,0.08046627044677734],[0.161661297082901,0.11454971134662628]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05885589122772217,0.20754332840442657,0.6353131532669067],"rotation":[-0.01165826991200447,0.12222059071063995,0.000988526619039476,0.992434024810791],"used":true,"bodyHandle":3.384e-321,"linearSpeed":0,"angularVelocityHistory":[[0.08392471820116043,0.04944334179162979],[0.006627608090639114,-0.13858723640441895],[-0.01958470046520233,-0.21294495463371277],[-0.06115978583693504,0.015702640637755394],[-0.3139830231666565,-0.09098747372627258],[0.01834840700030327,0.05843379721045494],[-0.37922075390815735,-0.0591706857085228],[0.0045257010497152805,-0.16254711151123047],[0.13049784302711487,0.04148160666227341],[0.08697225153446198,-0.3448294997215271]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05908893048763275,0.2075992226600647,0.7054599523544312],"rotation":[0.0002180800074711442,-0.9875287413597107,-0.012534418143332005,0.15693901479244232],"used":true,"bodyHandle":3.39e-321,"linearSpeed":0,"angularVelocityHistory":[[0.03005395643413067,-0.003842756850644946],[0.06389496475458145,-0.26080021262168884],[0.09883241355419159,0.05142081901431084],[0.21233199536800385,0.35548827052116394],[0.043732888996601105,-0.007648725528270006],[-0.312846302986145,-0.3475249409675598],[0.14534007012844086,0.17778995633125305],[-0.009785882197320461,-0.1121450811624527],[-0.1333165019750595,-0.04989100992679596],[-0.23410920798778534,0.13574883341789246]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0003858352138195187,0.20641882717609406,0.7382622361183167],"rotation":[-0.013454529456794262,-0.9996849894523621,-0.01338678877800703,0.016420723870396614],"used":true,"bodyHandle":3.394e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.023569971323013306,0.30616340041160583],[0.09579718112945557,0.06718519330024719],[0.16568486392498016,-0.19223308563232422],[-0.3187951445579529,-0.22484758496284485],[0.12569987773895264,-0.09415578097105026],[0.5106982588768005,0.035817950963974],[0.18871916830539703,-0.0464261919260025],[0.055865317583084106,-0.07145669311285019],[0.3133927583694458,-0.1939740628004074],[0.22093471884727478,0.0077809737995266914]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06033334508538246,0.2088182121515274,0.7046679258346558],"rotation":[0.010262963362038136,0.8295093774795532,-0.005722245201468468,-0.5583692193031311],"used":true,"bodyHandle":3.4e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.21615324914455414,-0.03446468710899353],[0.0494808703660965,0.09685195982456207],[-0.09301374107599258,0.1623341590166092],[0.08004086464643478,-0.059779684990644455],[-0.10857079178094864,-0.1307186484336853],[-0.0021518634166568518,0.042244553565979004],[0.07290621846914291,0.04082334786653519],[-0.05443180352449417,0.04968322068452835],[-0.06292188167572021,-0.047005996108055115],[0.04560636729001999,-0.20749041438102722]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05990572273731232,0.20945003628730774,0.6368947625160217],"rotation":[0.004632444120943546,-0.7236977815628052,-0.008336189202964306,-0.6900511384010315],"used":true,"bodyHandle":3.404e-321,"linearSpeed":0,"angularVelocityHistory":[[0.17871852219104767,-0.060387998819351196],[0.7088003158569336,0.0912361815571785],[0.30846235156059265,0.07234498113393784],[-0.3193500339984894,0.43286755681037903],[-0.0008055135258473456,0.30159714818000793],[0.022656448185443878,-0.2254035472869873],[-0.7112571001052856,-0.3566352427005768],[-0.2187715768814087,-0.31328341364860535],[-0.2389758825302124,0.024810608476400375],[0.0606159083545208,0.12106841802597046]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.002314995974302292,0.20662100613117218,0.6694884896278381],"rotation":[-0.0063406857661902905,-0.7208743095397949,-0.01220423262566328,-0.6929292678833008],"used":true,"bodyHandle":3.41e-321,"linearSpeed":0,"angularVelocityHistory":[[0.4971011281013489,-0.1596677154302597],[0.19647139310836792,-0.02895941026508808],[0.1223878338932991,-0.12270279973745346],[0.09113731980323792,0.1500706821680069],[-0.08148971945047379,0.011312414892017841],[0.052635569125413895,0.10183370113372803],[-0.19652585685253143,-0.07571554183959961],[-0.030073916539549828,-0.1025763601064682],[-0.16262276470661163,-0.04981286823749542],[0.19853374361991882,-0.00304128834977746]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0011412784224376082,0.2081872522830963,0.5991276502609253],"rotation":[0.002411460969597101,0.9958763122558594,-0.0020622469019144773,-0.09066524356603622],"used":true,"bodyHandle":3.414e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.06995713710784912,0.09908457100391388],[-0.01598365046083927,0.1830044388771057],[-0.20986168086528778,0.1631760597229004],[-0.08717851340770721,0.06172478571534157],[-0.032320380210876465,-0.2289304882287979],[-0.10199172049760818,-0.1272292137145996],[-0.08176299184560776,-0.2573707401752472],[0.28030744194984436,-0.07442104071378708],[-0.08341874927282333,0.0760716125369072],[0.30978643894195557,0.20496676862239838]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.061744287610054016,0.20710064470767975,0.6342270374298096],"rotation":[0.013353955931961536,-0.9224735498428345,0.007698900066316128,0.3857523500919342],"used":true,"bodyHandle":3.42e-321,"linearSpeed":0,"angularVelocityHistory":[[0.22963500022888184,-0.19937598705291748],[0.4509483575820923,0.3212825655937195],[0.313837468624115,0.06160109117627144],[-0.2888778746128082,0.4027602970600128],[-0.01943264901638031,0.22484059631824493],[-0.01295409444719553,0.020445222035050392],[-0.19717907905578613,0.014161498285830021],[-0.314267098903656,-0.2357054352760315],[-0.06861542165279388,-0.09149844944477081],[0.06272010505199432,0.1647762656211853]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.059920232743024826,0.20623600482940674,0.7044135928153992],"rotation":[-0.00818702019751072,0.47994521260261536,-0.0012492036912590265,-0.877259373664856],"used":true,"bodyHandle":3.424e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.20600144565105438,-0.04893902316689491],[0.04432297125458717,0.12070924043655396],[-0.08006973564624786,0.17515669763088226],[0.4930732250213623,0.22848966717720032],[-0.12708495557308197,-0.13741353154182434],[0.019079796969890594,-0.03870147466659546],[0.06369803100824356,0.06085459515452385],[-0.1150677353143692,0.10428166389465332],[0.039307087659835815,-0.02770240604877472],[-0.1329861581325531,-0.10482355952262878]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0005290140979923308,0.2086765021085739,0.739436149597168],"rotation":[0.004292952828109264,-0.671280562877655,-0.01607171632349491,0.741016685962677],"used":true,"bodyHandle":3.43e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.04988645389676094,0.2005133330821991],[0.10114121437072754,0.031415920704603195],[0.017835630103945732,-0.10071306675672531],[-0.33557403087615967,-0.040390267968177795],[0.20790886878967285,-0.09854745864868164],[0.4961031973361969,0.014305341988801956],[0.20456215739250183,-0.05900857597589493],[0.10324408859014511,-0.007257483899593353],[0.33336907625198364,-0.21605169773101807],[0.18975795805454254,-0.02001279965043068]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.059624023735523224,0.21074095368385315,0.7034444808959961],"rotation":[-0.006561309099197388,-0.9687736630439758,-0.013355170376598835,-0.2474997490644455],"used":true,"bodyHandle":3.434e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.008972154930233955,0.03835497796535492],[0.022037655115127563,-0.08838994801044464],[0.2179749608039856,-0.006720920093357563],[0.28022682666778564,0.12164890021085739],[0.09092441201210022,-0.07953094691038132],[-0.12586623430252075,-0.15152285993099213],[0.15427018702030182,0.20107875764369965],[-0.014823483303189278,-0.18962444365024567],[-0.10639655590057373,-0.058388374745845795],[-0.27196457982063293,0.1136162206530571]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05988012254238129,0.2089020013809204,0.6354033946990967],"rotation":[-0.01301293820142746,0.5235776901245117,-0.00029268264188431203,0.8518784642219543],"used":true,"bodyHandle":3.44e-321,"linearSpeed":0,"angularVelocityHistory":[[0.15813495218753815,0.1356009840965271],[-0.00849132426083088,-0.10979428887367249],[0.07864882797002792,-0.19713819026947021],[0.12591177225112915,0.16244731843471527],[-0.30371713638305664,-0.03226883336901665],[-0.06079038977622986,0.11623267829418182],[-0.4782447814941406,-0.01970325969159603],[-0.025599204003810883,-0.1216978058218956],[0.1190834641456604,-0.2148241102695465],[0.1878136247396469,-0.33289459347724915]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0014849979197606444,0.20835503935813904,0.6719857454299927],"rotation":[0.008718510158360004,-0.3399246335029602,-0.0017638475401327014,0.9404106736183167],"used":true,"bodyHandle":3.444e-321,"linearSpeed":0,"angularVelocityHistory":[[0.4761340618133545,-0.3390543460845947],[0.26464971899986267,-0.02136673778295517],[0.19679473340511322,-0.2334052175283432],[0.08665395528078079,0.10762728750705719],[0.05418706685304642,0.03028625063598156],[-0.00028957417816855013,0.11210285872220993],[-0.14407840371131897,-0.046375617384910583],[-0.08331464231014252,-0.11283070594072342],[-0.2535056471824646,-0.07679516822099686],[0.06773325055837631,-0.04413558170199394]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.00012428860645741224,0.2133471518754959,0.6020544171333313],"rotation":[-0.013742067851126194,-0.8374130129814148,0.009820944629609585,0.5463097095489502],"used":true,"bodyHandle":3.45e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.020482460036873817,-0.08574584871530533],[-0.015614468604326248,0.20779137313365936],[-0.00041428752592764795,0.13778923451900482],[-0.0838545709848404,0.0814889669418335],[0.017124833539128304,0.003937835805118084],[-0.11239202320575714,-0.2186594307422638],[-0.07273096591234207,-0.07945086807012558],[-0.038614723831415176,-0.12943755090236664],[-0.14324285089969635,0.1257910430431366],[0.009445663541555405,0.051869720220565796]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06263092160224915,0.21191632747650146,0.6338003873825073],"rotation":[0.011149981059134007,0.7237070202827454,-0.023688042536377907,0.689610481262207],"used":true,"bodyHandle":3.454e-321,"linearSpeed":0,"angularVelocityHistory":[[0.044675592333078384,0.11653342843055725],[-0.003718769643455744,-0.14566241204738617],[0.05312696844339371,-0.17478077113628387],[0.21573412418365479,0.1986599713563919],[-0.27252769470214844,-0.06532705575227737],[-0.0025310784112662077,0.0773812085390091],[-0.48527464270591736,-0.003890263382345438],[-0.04523221030831337,-0.13512839376926422],[0.1693343073129654,-0.22014333307743073],[0.008567651733756065,-0.35373634099960327]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.060878604650497437,0.21106228232383728,0.7063683271408081],"rotation":[0.002458066213876009,-0.8213156461715698,-0.018098032101988792,0.5701816082000732],"used":true,"bodyHandle":3.46e-321,"linearSpeed":0,"angularVelocityHistory":[[0.021624840795993805,0.007453015074133873],[0.03229382261633873,-0.3246590197086334],[0.23059016466140747,0.013735597021877766],[0.2949868142604828,0.07416371256113052],[0.09793931990861893,-0.04519874230027199],[-0.20924067497253418,-0.13301877677440643],[0.11173885315656662,0.14168716967105865],[0.021980497986078262,-0.22439126670360565],[-0.1428532749414444,0.07496405392885208],[-0.27347055077552795,0.09692740440368652]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0003227114793844521,0.21108314394950867,0.7376461029052734],"rotation":[-0.012255812995135784,-0.9866559505462646,-0.017327068373560905,0.16143012046813965],"used":true,"bodyHandle":3.463e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.12587261199951172,0.3226459324359894],[0.11543352156877518,0.045215290039777756],[0.007963811978697777,-0.08277236670255661],[-0.38517898321151733,-0.16418321430683136],[0.18327279388904572,-0.1509484350681305],[0.4844661056995392,-0.03325631842017174],[0.2240559607744217,-0.06476981937885284],[0.11492802947759628,-0.06027361378073692],[0.3254299461841583,-0.20162509381771088],[0.1978200227022171,0.09343964606523514]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05970755219459534,0.20994631946086884,0.7048777937889099],"rotation":[0.007157910615205765,0.15198884904384613,0.006370642688125372,-0.9883357286453247],"used":true,"bodyHandle":3.47e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.2071683704853058,-0.10082048922777176],[0.04450950026512146,0.10390323400497437],[-0.21407629549503326,0.21104246377944946],[0.047232769429683685,-0.3762131929397583],[-0.167658731341362,-0.11681830137968063],[0.0358642116189003,0.039873555302619934],[0.07646916806697845,0.02020222321152687],[0.08157623559236526,0.03431164100766182],[-0.09762744605541229,-0.18907436728477478],[-0.05601831525564194,-0.10440468788146973]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06222391128540039,0.21139995753765106,0.6347919702529907],"rotation":[0.0068110134452581406,-0.9679378867149353,0.00920324306935072,0.2509283721446991],"used":true,"bodyHandle":3.473e-321,"linearSpeed":0,"angularVelocityHistory":[[0.1743178814649582,-0.042470239102840424],[0.6375023126602173,0.14318813383579254],[0.25467056035995483,0.12176541984081268],[-0.25834324955940247,0.33190515637397766],[-0.0371694453060627,0.20737504959106445],[-0.01642671227455139,-0.3879019021987915],[-0.19711263477802277,0.02090306021273136],[-0.23790998756885529,-0.20881256461143494],[-0.07225149869918823,-0.2094545066356659],[0.03216808661818504,0.08558148890733719]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0010423592757433653,0.21043270826339722,0.6675973534584045],"rotation":[-0.009587803855538368,-0.3646928668022156,-0.004128735978156328,-0.9310693144798279],"used":true,"bodyHandle":3.48e-321,"linearSpeed":0,"angularVelocityHistory":[[0.5163357257843018,-0.26589933037757874],[0.300871878862381,-0.029550712555646896],[0.16317103803157806,-0.18990422785282135],[0.043169256299734116,0.035909201949834824],[0.23318417370319366,-0.06817310303449631],[-0.06789375096559525,0.16659319400787354],[0.008608884178102016,-0.07771430164575577],[-0.03747519105672836,-0.009742685593664646],[-0.17716123163700104,0.06475023925304413],[0.09732025116682053,0.042517587542533875]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0004013791913166642,0.21101053059101105,0.5991155505180359],"rotation":[0.0056846849620342255,0.7273852229118347,0.00582375843077898,-0.6861810684204102],"used":true,"bodyHandle":3.483e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.09615548700094223,0.1980457454919815],[-0.013606926426291466,0.10781365633010864],[-0.07034259289503098,0.14908306300640106],[-0.14269156754016876,-0.04925030469894409],[-0.032471589744091034,-0.18526627123355865],[-0.01869741640985012,-0.1228286474943161],[-0.12811040878295898,-0.12041813135147095],[0.1425797939300537,0.13158632814884186],[-0.07869967818260193,0.15804508328437805],[0.26171422004699707,0.10986441373825073]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05948483198881149,0.21337108314037323,0.6361585855484009],"rotation":[0.017294127494096756,-0.8869169354438782,0.0025965820532292128,-0.4615977704524994],"used":true,"bodyHandle":3.49e-321,"linearSpeed":0,"angularVelocityHistory":[[0.11055771261453629,-0.10102265328168869],[0.4829195439815521,0.2711196541786194],[0.10062028467655182,0.21802560985088348],[-0.19045962393283844,0.3251737654209137],[-0.01125384122133255,0.22773008048534393],[-0.03273848816752434,0.09697456657886505],[-0.2260247766971588,0.06943264603614807],[-0.1451767385005951,-0.23280642926692963],[-0.07918142527341843,-0.0916249081492424],[0.02714342623949051,0.01669449731707573]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0617513582110405,0.21242423355579376,0.705013632774353],"rotation":[0.0035043691750615835,-0.5286155343055725,0.017013339325785637,-0.8486835956573486],"used":true,"bodyHandle":3.493e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.27274420857429504,-0.030306069180369377],[0.0736156553030014,0.16644294559955597],[-0.10425912588834763,0.19768814742565155],[0.05672162026166916,-0.09435585886240005],[-0.1669246107339859,-0.11396986246109009],[-0.002030867850407958,0.08575483411550522],[0.06653556227684021,0.05103202536702156],[-0.12025748938322067,-0.0329463891685009],[-0.14556510746479034,-0.05004223808646202],[-0.04117618128657341,-0.1711210161447525]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.00011786152026616037,0.21236947178840637,0.7408162355422974],"rotation":[-0.0003355717926751822,-0.8022280931472778,-0.0178633164614439,0.5967503786087036],"used":true,"bodyHandle":3.5e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.03256408870220184,0.29576295614242554],[0.07771184295415878,0.039393238723278046],[-0.005456896033138037,-0.11518371105194092],[-0.31656360626220703,-0.1815783977508545],[0.200494647026062,-0.12649719417095184],[0.4974871873855591,0.014331020414829254],[0.23629310727119446,-0.049909960478544235],[0.1181856095790863,-0.05799083411693573],[0.31547269225120544,-0.1943265050649643],[0.19669021666049957,-0.02000514417886734]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05929558351635933,0.2144891619682312,0.7037988901138306],"rotation":[-0.002215752610936761,-0.9611155390739441,-0.011062956415116787,0.2759160101413727],"used":true,"bodyHandle":3.503e-321,"linearSpeed":0,"angularVelocityHistory":[[0.07503426820039749,-0.028282593935728073],[0.03190558776259422,-0.34980857372283936],[0.17087069153785706,0.03074994497001171],[0.24885088205337524,0.06168752536177635],[0.09526747465133667,0.03508914262056351],[-0.2936224043369293,-0.3383576273918152],[0.04901811107993126,0.19863592088222504],[-0.01640213467180729,-0.1304882913827896],[-0.18435440957546234,0.08567975461483002],[-0.2510071396827698,0.15712417662143707]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05949988588690758,0.21410007774829865,0.635503888130188],"rotation":[0.012137921527028084,0.17353543639183044,-0.007659906521439552,0.9847230315208435],"used":true,"bodyHandle":3.51e-321,"linearSpeed":0,"angularVelocityHistory":[[0.08235804736614227,0.21783612668514252],[-0.01531902700662613,-0.17845839262008667],[0.05965771526098251,-0.09300647675991058],[0.21673476696014404,0.06306735426187515],[-0.1551591008901596,0.034715767949819565],[-0.005627970211207867,0.17763222754001617],[-0.25234341621398926,0.0808972492814064],[-0.0906592607498169,-0.13380016386508942],[0.17779704928398132,-0.36799225211143494],[-0.044369228184223175,-0.3134009838104248]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.002699200063943863,0.21372929215431213,0.6682137846946716],"rotation":[0.012406446039676666,-0.3882993757724762,0.00511894142255187,0.921435534954071],"used":true,"bodyHandle":3.513e-321,"linearSpeed":0,"angularVelocityHistory":[[0.4833471179008484,-0.34481221437454224],[0.2451198697090149,-0.006185681093484163],[0.1608114242553711,-0.23071148991584778],[0.025708602741360664,0.048221439123153687],[0.192631334066391,0.008355407975614071],[-0.09064622968435287,0.13599242269992828],[-0.05677264556288719,0.10557371377944946],[0.009123110212385654,-0.03977074846625328],[-0.15142394602298737,0.10364902764558792],[0.08929342031478882,0.25189870595932007]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.00040016905404627323,0.21467842161655426,0.6015423536300659],"rotation":[-0.001548553234897554,0.5577443242073059,-0.009177633561193943,0.8299605846405029],"used":true,"bodyHandle":3.52e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.025548798963427544,0.06567182391881943],[-0.00279980362392962,0.1501602977514267],[-0.0846131294965744,0.29841211438179016],[-0.04039199650287628,0.08711489289999008],[0.020484188571572304,0.017650768160820007],[-0.09154239296913147,-0.19842645525932312],[-0.06393938511610031,-0.05481613427400589],[0.06667719036340714,-0.13947264850139618],[-0.09799233824014664,0.13518446683883667],[-0.0033322463277727365,0.03315100073814392]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06081764027476311,0.21591158211231232,0.6339542269706726],"rotation":[0.003933228086680174,-0.2177877426147461,0.0048154680989682674,0.975976288318634],"used":true,"bodyHandle":3.523e-321,"linearSpeed":0,"angularVelocityHistory":[[0.1119505912065506,0.24603720009326935],[-0.011278876103460789,-0.10406286269426346],[0.12496697902679443,-0.1822359710931778],[0.33402737975120544,0.07592324167490005],[-0.10853264480829239,-0.01818687468767166],[-0.031949762254953384,0.19946923851966858],[-0.21576304733753204,-0.05152358114719391],[-0.05460859090089798,-0.10625085234642029],[0.15002180635929108,-0.33489102125167847],[-0.012184110470116138,-0.26793980598449707]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06008853763341904,0.21622125804424286,0.7051128149032593],"rotation":[0.0003520720056258142,-0.8312915563583374,-0.010222653858363628,0.5557425022125244],"used":true,"bodyHandle":3.53e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.005545651540160179,0.019078396260738373],[0.03521859273314476,-0.374808669090271],[0.23756621778011322,-0.10885545611381531],[0.25554418563842773,0.04995158687233925],[0.12575680017471313,-0.034325383603572845],[-0.12981583178043365,-0.2084420621395111],[0.02925730310380459,0.16456949710845947],[0.08268319070339203,-0.25629356503486633],[-0.18019656836986542,0.05060211196541786],[-0.03538234904408455,0.15125925838947296]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0008615086553618312,0.2155815064907074,0.7377730011940002],"rotation":[0.00937702227383852,-0.35901474952697754,-0.018766053020954132,0.9330961108207703],"used":true,"bodyHandle":3.533e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.10518459975719452,0.3237999975681305],[0.09108827263116837,0.06062949076294899],[-0.034924786537885666,-0.06337539851665497],[-0.7617897987365723,-0.18126218020915985],[0.18023701012134552,-0.14566679298877716],[0.42812013626098633,0.05495312809944153],[0.11098659038543701,-0.02190561406314373],[0.09714961051940918,-0.09562893956899643],[0.35151350498199463,-0.17238427698612213],[0.1863585114479065,0.013163619674742222]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05924660712480545,0.21513469517230988,0.7040945887565613],"rotation":[-0.004766641650348902,-0.648138701915741,0.01609242707490921,-0.7613372802734375],"used":true,"bodyHandle":3.538e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.26139000058174133,-0.03430940955877304],[0.05863580107688904,0.1528296023607254],[-0.12973135709762573,0.17025621235370636],[-0.06435191631317139,-0.12097188830375671],[-0.19263850152492523,-0.06954590976238251],[0.02001677080988884,0.07201889157295227],[0.03395727276802063,-0.05046083405613899],[0.041809190064668655,-0.04525326192378998],[-0.00048809280269779265,-0.19180646538734436],[0.035616517066955566,-0.18822701275348663]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06318669021129608,0.21502149105072021,0.6353070139884949],"rotation":[0.017122212797403336,-0.9996432662010193,-0.00018415399244986475,-0.020496679469943047],"used":true,"bodyHandle":3.54e-321,"linearSpeed":0,"angularVelocityHistory":[[0.12687833607196808,-0.03365902602672577],[0.5322586894035339,0.20519670844078064],[0.24701236188411713,0.14785835146903992],[-0.21513661742210388,0.2646699547767639],[-0.13298630714416504,0.32391244173049927],[0.08958013355731964,0.023321719840168953],[-0.205705463886261,-0.021392270922660828],[-0.22185945510864258,-0.1733289510011673],[-0.041465092450380325,-0.20464813709259033],[0.038290347903966904,0.12194686383008957]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0020100323017686605,0.2155276983976364,0.671398937702179],"rotation":[-0.01545954030007124,-0.5462490320205688,-0.016238294541835785,-0.8373227119445801],"used":true,"bodyHandle":3.547e-321,"linearSpeed":0,"angularVelocityHistory":[[0.48660558462142944,-0.339640736579895],[0.2689684331417084,-0.013269157148897648],[0.19001853466033936,-0.2166072577238083],[0.06505101174116135,0.08737202733755112],[0.030890317633748055,-0.14711908996105194],[-0.020733721554279327,0.18579062819480896],[0.006016813684254885,0.023590227589011192],[-0.000052807510655838996,-0.022260714322328568],[-0.10189155489206314,0.12087231129407883],[0.09839069843292236,0.0984954833984375]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0004639411636162549,0.21752412617206573,0.5993995070457458],"rotation":[0.016771871596574783,0.23482069373130798,0.006094976328313351,-0.9718748927116394],"used":true,"bodyHandle":3.55e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.015115262940526009,-0.008935072459280491],[-0.004927588161081076,0.16906486451625824],[-0.02643357217311859,0.16747944056987762],[-0.07839196175336838,0.11335216462612152],[-0.04282727837562561,-0.033372532576322556],[-0.09421711415052414,-0.1969992071390152],[-0.10735715925693512,-0.036004722118377686],[0.0721067562699318,-0.09960495680570602],[-0.16262272000312805,0.12246882915496826],[0.03880118206143379,0.04387557506561279]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06050191819667816,0.21888454258441925,0.6364961862564087],"rotation":[0.013083416037261486,-0.9800539016723633,0.008742781355977058,-0.19810768961906433],"used":true,"bodyHandle":3.557e-321,"linearSpeed":0,"angularVelocityHistory":[[0.13179022073745728,0.022878248244524002],[0.38645821809768677,0.19456051290035248],[0.07528946548700333,0.18251670897006989],[-0.238091841340065,0.2663803994655609],[-0.107914499938488,0.3447270095348358],[0.02403220161795616,-0.08056101948022842],[-0.10194922238588333,-0.08418498933315277],[-0.1335170865058899,-0.12841543555259705],[-0.09487877786159515,-0.2129346877336502],[-0.00044557047658599913,0.09045207500457764]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.058796558529138565,0.21709713339805603,0.7056918740272522],"rotation":[0.011980640701949596,0.2613265812397003,0.014169423840939999,-0.9650720953941345],"used":true,"bodyHandle":3.56e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.264289528131485,-0.04068484902381897],[0.1205780953168869,0.13310258090496063],[-0.0627480149269104,0.15511290729045868],[0.007401260547339916,-0.14535844326019287],[-0.2746519446372986,0.08395424485206604],[-0.04436119273304939,0.2296510487794876],[0.0633443295955658,-0.04207594320178032],[-0.12831053137779236,-0.15512214601039886],[-0.12328147888183594,-0.21461907029151917],[0.030764827504754066,-0.1897951364517212]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0005113446968607605,0.2159450203180313,0.7406555414199829],"rotation":[-0.0021145439241081476,-0.7534056901931763,-0.018600624054670334,0.6572893857955933],"used":true,"bodyHandle":3.567e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.13310790061950684,0.3692982494831085],[0.00736233638599515,0.07345952838659286],[-0.13984309136867523,-0.11220177263021469],[0.09599713236093521,-0.06264068931341171],[0.16465984284877777,-0.17074225842952728],[0.145083948969841,-0.11158818006515503],[0.20329247415065765,-0.0516434945166111],[0.021596161648631096,-0.0229922104626894],[0.34231823682785034,-0.14839714765548706],[0.14724040031433105,0.07211393117904663]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.060663942247629166,0.21975679695606232,0.7044371366500854],"rotation":[-0.0061440421268343925,-0.9600325226783752,-0.006378092337399721,0.27974840998649597],"used":true,"bodyHandle":3.57e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.022440984845161438,-0.00979566015303135],[0.03806650638580322,-0.4180788993835449],[0.20755597949028015,-0.009807884693145752],[0.2698911130428314,0.06239531189203262],[0.17359836399555206,-0.011659795418381691],[-0.4427950382232666,-0.22299951314926147],[0.0216358695179224,0.09541037678718567],[0.031661320477724075,-0.4948907792568207],[-0.17884735763072968,0.06772549450397491],[-0.11290913075208664,0.13921591639518738]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06199389696121216,0.2182326465845108,0.6344860196113586],"rotation":[-0.0033817063085734844,-0.5247484445571899,-0.006699061021208763,0.8512242436408997],"used":true,"bodyHandle":3.577e-321,"linearSpeed":0,"angularVelocityHistory":[[0.09802158176898956,0.16812404990196228],[0.006210988853126764,-0.1792704463005066],[0.23010244965553284,-0.048959728330373764],[0.2561725676059723,0.067947156727314],[-0.10634088516235352,0.008124480955302715],[-0.024501031264662743,0.2010444849729538],[-0.16524076461791992,0.0913814902305603],[-0.028986454010009766,-0.04782471805810928],[0.15796516835689545,-0.35876989364624023],[0.09594869613647461,-0.25783219933509827]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0030115165282040834,0.21765956282615662,0.6697072386741638],"rotation":[0.01140000019222498,-0.40366074442863464,-0.009697533212602139,0.9147862792015076],"used":true,"bodyHandle":3.58e-321,"linearSpeed":0,"angularVelocityHistory":[[0.45342281460762024,-0.33804136514663696],[0.2872334420681,0.08349867165088654],[0.12714357674121857,-0.22354187071323395],[0.07114768028259277,-0.008075481280684471],[-0.09373291581869125,0.04631657525897026],[-0.01855519786477089,0.07523388415575027],[0.029338115826249123,0.01755305752158165],[-0.004787294194102287,0.06893423199653625],[-0.17276188731193542,0.10366634279489517],[0.14649705588817596,0.11039812862873077]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0008245493518188596,0.21961285173892975,0.5989609956741333],"rotation":[-0.011929289437830448,-0.37034958600997925,-0.012750684283673763,0.9287282824516296],"used":true,"bodyHandle":3.587e-321,"linearSpeed":0,"angularVelocityHistory":[[0.030545739457011223,-0.08697164803743362],[-0.010197854600846767,0.21478046476840973],[0.1780501902103424,-0.06697303056716919],[-0.024406135082244873,0.13054496049880981],[0.0751948431134224,0.026106666773557663],[-0.0790337473154068,-0.20756547152996063],[-0.08762203902006149,0.09151694178581238],[-0.024402499198913574,-0.14302459359169006],[-0.1919318288564682,0.14162254333496094],[-0.081902414560318,0.025421131402254105]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06013762950897217,0.22062142193317413,0.6347805857658386],"rotation":[0.0034371360670775175,-0.2263827919960022,-0.005745082627981901,0.9740154147148132],"used":true,"bodyHandle":3.59e-321,"linearSpeed":0,"angularVelocityHistory":[[0.038610219955444336,0.22045840322971344],[0.008331513963639736,-0.35368669033050537],[0.08642611652612686,-0.21558091044425964],[0.19368506968021393,0.02027387171983719],[-0.029097050428390503,0.02730638161301613],[0.014197152107954025,0.16668091714382172],[-0.3256661295890808,0.023351607844233513],[-0.03536560758948326,-0.08838599920272827],[0.19496457278728485,-0.22895656526088715],[0.16660365462303162,-0.28770625591278076]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06135796010494232,0.22158251702785492,0.7062324285507202],"rotation":[-0.011218508705496788,-0.3229184150695801,0.0039664446376264095,-0.9463520050048828],"used":true,"bodyHandle":3.597e-321,"linearSpeed":0,"angularVelocityHistory":[[0.03320223465561867,-0.030607648193836212],[0.1616240292787552,-0.5184715390205383],[0.11013288795948029,-0.14092279970645905],[0.2735324800014496,0.08636463433504105],[0.08007556945085526,-0.013451904989778996],[-0.24524928629398346,-0.22934721410274506],[0.12045213580131531,0.13741987943649292],[0.02620307169854641,-0.3824840188026428],[-0.1847527176141739,0.05204840376973152],[-0.050737109035253525,0.11421913653612137]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0009446771582588553,0.22013641893863678,0.739196240901947],"rotation":[-0.004518257919698954,-0.9135791063308716,-0.022459115833044052,0.40601515769958496],"used":true,"bodyHandle":3.6e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.14616617560386658,0.3687993586063385],[0.06334110349416733,0.06065509840846062],[-0.05238233506679535,-0.07703971862792969],[0.18088030815124512,0.17416495084762573],[0.1312677562236786,-0.18066608905792236],[0.0780579075217247,-0.12038643658161163],[0.19227668642997742,0.05209219083189964],[0.0726378932595253,-0.06823661178350449],[0.3933020830154419,-0.2088174819946289],[0.16801679134368896,0.05942917987704277]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06141083315014839,0.22006113827228546,0.7046530842781067],"rotation":[0.013458779081702232,0.18375255167484283,0.013468998484313488,-0.9827880263328552],"used":true,"bodyHandle":3.607e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.269713819026947,-0.03415827453136444],[0.19504833221435547,0.03043493628501892],[-0.04789760336279869,0.09110437333583832],[-0.13097821176052094,-0.14327649772167206],[-0.33010295033454895,-0.043993253260850906],[-0.032008279114961624,0.2332131564617157],[-0.05970195308327675,0.0249687060713768],[-0.15824775397777557,-0.13465726375579834],[-0.08780652284622192,-0.16840359568595886],[0.039133187383413315,-0.15190905332565308]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06092282012104988,0.2198609709739685,0.635435163974762],"rotation":[0.010001962073147297,-0.3164563775062561,-0.008676744997501373,-0.9485146403312683],"used":true,"bodyHandle":3.61e-321,"linearSpeed":0,"angularVelocityHistory":[[0.030848566442728043,0.055414535105228424],[0.23879767954349518,0.26031532883644104],[-0.011749480850994587,0.21337999403476715],[-0.1322474181652069,-0.049092892557382584],[-0.1055474579334259,0.19716957211494446],[0.1580955982208252,0.03988536447286606],[-0.09456513822078705,-0.14239756762981415],[-0.05340402200818062,-0.07974117249250412],[-0.19369281828403473,-0.24588927626609802],[0.01777864620089531,-0.05814199149608612]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0021068614441901445,0.21947643160820007,0.6688724756240845],"rotation":[-0.0020931046456098557,-0.8639754056930542,-0.0026539498940110207,-0.5035226345062256],"used":true,"bodyHandle":3.617e-321,"linearSpeed":0,"angularVelocityHistory":[[0.42104536294937134,-0.35337480902671814],[0.2986557185649872,0.05378507822751999],[0.17647646367549896,-0.2219337821006775],[0.07754659652709961,0.0023243799805641174],[-0.11869973689317703,-0.11089003831148148],[-0.12095000594854355,0.12947820127010345],[0.019294606521725655,-0.002067226218059659],[-0.021716266870498657,-0.03213874250650406],[-0.06514567136764526,0.12240546941757202],[0.12397777289152145,0.1251998096704483]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.00040295018698088825,0.2216784656047821,0.6011262536048889],"rotation":[0.011528434231877327,-0.10530583560466766,0.006713664159178734,-0.9943503141403198],"used":true,"bodyHandle":3.62e-321,"linearSpeed":0,"angularVelocityHistory":[[0.04035176336765289,-0.11731871217489243],[0.004702378064393997,0.12072104215621948],[0.03121337853372097,0.20088547468185425],[-0.018253503367304802,0.15402504801750183],[-0.08521953970193863,0.209609255194664],[-0.14313380420207977,-0.25508880615234375],[-0.0781843364238739,0.06658338755369186],[0.02617773227393627,-0.10477007180452347],[-0.23592901229858398,0.06469376385211945],[-0.06792408972978592,-0.09886789321899414]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0625433623790741,0.22174911201000214,0.6351795196533203],"rotation":[0.015291687101125717,0.15439753234386444,-0.015484979376196861,-0.9877691268920898],"used":true,"bodyHandle":3.626e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.04882364720106125,0.22330662608146667],[0.1588113158941269,0.2913956344127655],[-0.05501842498779297,0.20305706560611725],[-0.2747981548309326,0.14260809123516083],[-0.31850263476371765,0.2673124372959137],[0.08611179143190384,0.055832430720329285],[0.0903705507516861,-0.15214653313159943],[-0.05741358548402786,-0.033566009253263474],[-0.03318037837743759,-0.310095876455307],[0.00988516490906477,-0.148392915725708]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.058514244854450226,0.2214284986257553,0.7049565315246582],"rotation":[0.00774145545437932,0.3311331570148468,0.011172293685376644,-0.9434860944747925],"used":true,"bodyHandle":3.63e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.221365824341774,-0.03837037831544876],[0.17048588395118713,0.039911091327667236],[-0.056316569447517395,0.16126683354377747],[0.05791044607758522,-0.18857544660568237],[-0.28568151593208313,0.012280871160328388],[-0.018929369747638702,0.2616576850414276],[-0.04861298203468323,-0.028131337836384773],[-0.14038509130477905,-0.16121453046798706],[-0.033446572721004486,-0.1283523440361023],[0.009694303385913372,-0.1121724471449852]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0005558482953347266,0.22237201035022736,0.7417657375335693],"rotation":[-0.02197350561618805,-0.6660183072090149,-0.0007506831316277385,-0.7456112504005432],"used":true,"bodyHandle":3.636e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.20222778618335724,0.23757702112197876],[0.036320995539426804,0.08034680038690567],[-0.13025471568107605,-0.1274002343416214],[-0.27781903743743896,0.11413656175136566],[0.1361643522977829,-0.23653656244277954],[0.1314130574464798,-0.2007974535226822],[0.1321926712989807,-0.1581258922815323],[0.0753246545791626,-0.0615820586681366],[0.43619459867477417,-0.13328535854816437],[0.1513405293226242,0.0270327590405941]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05929373577237129,0.22418807446956635,0.7047197818756104],"rotation":[-0.006517926696687937,-0.3722415566444397,0.0033619545865803957,-0.928106963634491],"used":true,"bodyHandle":3.64e-321,"linearSpeed":0,"angularVelocityHistory":[[0.10445448756217957,-0.02689525857567787],[0.09975676983594894,-0.4040784239768982],[0.15853440761566162,-0.24274525046348572],[0.26352736353874207,0.03254160284996033],[0.09904032945632935,-0.018567824736237526],[-0.33056876063346863,-0.1412849724292755],[-0.051265448331832886,0.11495940387248993],[-0.004410024266690016,-0.15321363508701324],[-0.10603530704975128,0.08515417575836182],[0.12480264902114868,0.04293493553996086]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06028425693511963,0.2223869264125824,0.6354576945304871],"rotation":[0.0064543974585831165,0.5052608847618103,-0.001228687702678144,0.8629416823387146],"used":true,"bodyHandle":3.646e-321,"linearSpeed":0,"angularVelocityHistory":[[0.1118801161646843,0.21505354344844818],[0.00913004856556654,-0.06284607946872711],[0.18086430430412292,-0.0740133598446846],[0.21908317506313324,0.036760445684194565],[-0.24385453760623932,0.010089167393743992],[-0.053143251687288284,0.18855176866054535],[-0.2957548499107361,0.10041184723377228],[-0.03000079281628132,-0.051712557673454285],[0.15338249504566193,-0.31978681683540344],[0.060265421867370605,-0.2613292932510376]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0022272050846368074,0.2226812094449997,0.6682193875312805],"rotation":[0.03237554058432579,-0.30858418345451355,-0.016852188855409622,0.95049649477005],"used":true,"bodyHandle":3.65e-321,"linearSpeed":0,"angularVelocityHistory":[[0.43341538310050964,-0.35491490364074707],[0.2771458923816681,0.05889417231082916],[0.169836163520813,-0.24600332975387573],[0.1642303615808487,-0.15430967509746552],[-0.23512832820415497,-0.15232156217098236],[-0.05817091464996338,0.14658395946025848],[0.10922977328300476,-0.020776277408003807],[0.04583968222141266,-0.010664413683116436],[-0.06581577658653259,0.11893589794635773],[0.13887907564640045,0.12832292914390564]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.000721750024240464,0.2243526428937912,0.5983158946037292],"rotation":[-0.005716574378311634,-0.013454543426632881,0.0004015943268314004,0.999893069267273],"used":true,"bodyHandle":3.656e-321,"linearSpeed":0,"angularVelocityHistory":[[0.05060863867402077,-0.09261158108711243],[-0.018725626170635223,0.1308288723230362],[0.012380262836813927,0.16315694153308868],[-0.0148345697671175,0.20662806928157806],[0.04458954557776451,0.337937593460083],[-0.06993252038955688,-0.20971764624118805],[-0.0627543106675148,0.208470419049263],[-0.12360992282629013,-0.28704163432121277],[-0.21926109492778778,0.04206332564353943],[-0.1401907056570053,-0.2751655578613281]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.062178123742341995,0.22543852031230927,0.6334155201911926],"rotation":[0.004288255237042904,0.5453303456306458,-0.002001088811084628,0.8382078409194946],"used":true,"bodyHandle":3.66e-321,"linearSpeed":0,"angularVelocityHistory":[[0.011627359315752983,0.24056604504585266],[0.07398734986782074,-0.04339639097452164],[0.3407619893550873,-0.06535197049379349],[0.26620185375213623,0.04725080728530884],[0.01245769765228033,0.07719222456216812],[0.02477077580988407,0.18773187696933746],[-0.04359818994998932,0.1936822384595871],[-0.04198288172483444,0.0338849239051342],[0.13651631772518158,-0.28969213366508484],[0.28801506757736206,-0.14636898040771484]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06170845031738281,0.22605808079242706,0.7060864567756653],"rotation":[-0.009729636833071709,-0.09981611371040344,0.00441545806825161,-0.9949485659599304],"used":true,"bodyHandle":3.666e-321,"linearSpeed":0,"angularVelocityHistory":[[0.05268093943595886,-0.029169660061597824],[0.024502426385879517,-0.3884163200855255],[0.04004277288913727,-0.2352336049079895],[0.20646609365940094,-0.026196124032139778],[0.08826889842748642,-0.03446925804018974],[-0.32917627692222595,-0.20730672776699066],[0.00211944617331028,0.0602865070104599],[-0.007242597173899412,-0.2729479670524597],[-0.12156287580728531,0.06511205434799194],[0.03961582109332085,0.09632088989019394]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0008346234681084752,0.22340159118175507,0.7397653460502625],"rotation":[-0.017139198258519173,-0.4728187918663025,0.009780311957001686,-0.8809386491775513],"used":true,"bodyHandle":3.67e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.23136602342128754,0.3490845263004303],[0.0262665543705225,0.0856066346168518],[-0.08929222822189331,-0.13242435455322266],[0.1448054164648056,-0.08446759730577469],[0.05325623229146004,-0.17103037238121033],[0.03349722921848297,-0.09791421890258789],[-0.12441657483577728,-0.13949276506900787],[0.11409284919500351,-0.0685093030333519],[0.43609416484832764,-0.1710750013589859],[0.15465253591537476,0.16095255315303802]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05972328037023544,0.2242870181798935,0.7048617601394653],"rotation":[0.008262262679636478,0.11264517903327942,0.012258734554052353,-0.9935253262519836],"used":true,"bodyHandle":3.676e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.22776611149311066,-0.05760811269283295],[0.14215423166751862,-0.0005525249871425331],[-0.08117843419313431,0.0790732353925705],[0.05936770141124725,-0.1987038552761078],[-0.26180586218833923,0.016322201117873192],[-0.01632651314139366,0.293278306722641],[0.06588070839643478,-0.04161418601870537],[-0.07240910083055496,-0.14632119238376617],[-0.05085746571421623,-0.16373176872730255],[0.05964037775993347,-0.0837998017668724]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.061559632420539856,0.22557370364665985,0.635472297668457],"rotation":[0.003834569128230214,0.23239721357822418,-0.005775623954832554,-0.9725962281227112],"used":true,"bodyHandle":3.68e-321,"linearSpeed":0,"angularVelocityHistory":[[0.0468868687748909,0.040987640619277954],[0.33083969354629517,0.2330944985151291],[-0.01913568563759327,0.10953985154628754],[-0.24413737654685974,0.18647244572639465],[0.04929667338728905,0.15929776430130005],[0.258018434047699,0.02243567444384098],[-0.03970424085855484,-0.0879049152135849],[-0.17754629254341125,-0.13117530941963196],[-0.06326015293598175,-0.3235774636268616],[-0.12303759902715683,-0.03676483780145645]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.00042793090688064694,0.22428378462791443,0.672492265701294],"rotation":[0.0035731024108827114,-0.19696134328842163,0.0007820565369911492,-0.9804044365882874],"used":true,"bodyHandle":3.686e-321,"linearSpeed":0,"angularVelocityHistory":[[0.46693259477615356,-0.36765357851982117],[0.28880709409713745,0.044518981128931046],[0.17023251950740814,-0.2449258416891098],[0.017360979691147804,0.0263057854026556],[-0.28536030650138855,-0.21329718828201294],[-0.05998998507857323,0.11999794840812683],[0.06712207943201065,-0.12403228878974915],[-0.0027908228803426027,-0.0015360810793936253],[0.02408316731452942,0.0845976173877716],[0.215003103017807,0.1811726689338684]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.00004395277937874198,0.227473184466362,0.600734293460846],"rotation":[0.015470180660486221,0.974247932434082,-0.0026300984900444746,-0.22493286430835724],"used":true,"bodyHandle":3.69e-321,"linearSpeed":0,"angularVelocityHistory":[[0.020077208057045937,-0.06329207867383957],[-0.008782556280493736,0.14113298058509827],[-0.2155449092388153,0.43551015853881836],[0.009660966694355011,0.12095321714878082],[-0.02768995799124241,0.3042921721935272],[-0.11225324124097824,-0.19751882553100586],[-0.06703545898199081,0.22143489122390747],[-0.03333262354135513,-0.1732431948184967],[-0.3084031343460083,-0.04528975114226341],[-0.1941431760787964,-0.303162544965744]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06127573177218437,0.22677704691886902,0.6355648040771484],"rotation":[0.0016965653048828244,0.3774784803390503,-0.014938022010028362,-0.9258962869644165],"used":true,"bodyHandle":3.696e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.07760302722454071,0.05804891139268875],[0.000353794515831396,0.2675306797027588],[-0.1089855283498764,0.18035700917243958],[-0.2518903315067291,0.14992479979991913],[-0.14248302578926086,0.16994881629943848],[0.20609663426876068,0.00028904114151373506],[0.058508336544036865,-0.10473953187465668],[-0.0697484165430069,-0.12764717638492584],[0.054809559136629105,-0.19619615375995636],[0.04024425894021988,-0.1253412365913391]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0583634227514267,0.2266533076763153,0.7032554149627686],"rotation":[0.0013250355841591954,-0.2680761516094208,0.017725510522723198,-0.9632337093353271],"used":true,"bodyHandle":3.7e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.2684396207332611,-0.03208349272608757],[0.09549533575773239,0.05753858759999275],[-0.07815857231616974,0.08710239082574844],[0.04961754381656647,-0.19232934713363647],[-0.2820907235145569,0.02794346958398819],[-0.10399296134710312,0.25735920667648315],[0.028348589316010475,0.012888342142105103],[-0.1462850421667099,-0.1384207159280777],[-0.10880300402641296,-0.15431301295757294],[0.030434492975473404,-0.12621170282363892]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0029582728166133165,0.22694537043571472,0.7420384883880615],"rotation":[-0.017400987446308136,-0.7549222707748413,0.0021507740020751953,-0.6555798649787903],"used":true,"bodyHandle":3.705e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.20056146383285522,0.24938493967056274],[0.03544463962316513,0.10143885761499405],[-0.09229142218828201,-0.14547592401504517],[-0.026989446952939034,0.2352028638124466],[0.09086576849222183,-0.30297166109085083],[-0.07518690824508667,-0.3101006746292114],[-0.004197855480015278,-0.19908319413661957],[0.09011181443929672,-0.08129359036684036],[0.38425204157829285,-0.18341290950775146],[0.23661746084690094,0.07141410559415817]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.059731319546699524,0.22838647663593292,0.7053285241127014],"rotation":[-0.006061009131371975,0.09593912214040756,0.0030230486299842596,-0.9953641295433044],"used":true,"bodyHandle":3.71e-321,"linearSpeed":0,"angularVelocityHistory":[[0.15222401916980743,-0.061311762779951096],[0.07624124735593796,-0.2732023596763611],[0.43336766958236694,-0.38751882314682007],[0.0643000602722168,-0.21042943000793457],[0.08279638737440109,-0.0869545191526413],[-0.40224185585975647,-0.14097091555595398],[0.02778000570833683,0.06951084733009338],[0.030956078320741653,-0.19109179079532623],[-0.08846551179885864,0.08256535232067108],[0.18446975946426392,0.03626873344182968]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06019206345081329,0.22778116166591644,0.6349408030509949],"rotation":[0.0021451348438858986,0.15659546852111816,-0.0011577759869396687,0.9876598119735718],"used":true,"bodyHandle":3.715e-321,"linearSpeed":0,"angularVelocityHistory":[[0.012632337398827076,0.20481961965560913],[-0.04119395464658737,-0.1463102400302887],[0.42170289158821106,-0.018725402653217316],[0.1620686948299408,0.029615558683872223],[-0.008012534119188786,0.0695585384964943],[0.00009155251609627157,0.24469628930091858],[-0.2035556137561798,0.3137170374393463],[-0.06236701086163521,-0.046196695417165756],[0.19823193550109863,-0.22615750133991241],[0.34006062150001526,-0.13081905245780945]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.00149197515565902,0.22741959989070892,0.6676489114761353],"rotation":[0.007536312565207481,-0.7532303929328918,-0.013745685108006,0.6575698256492615],"used":true,"bodyHandle":3.72e-321,"linearSpeed":0,"angularVelocityHistory":[[0.2329711616039276,-0.3027993142604828],[0.23017403483390808,0.11645977944135666],[0.13684804737567902,-0.13236446678638458],[0.14072570204734802,-0.004071753937751055],[-0.3932347893714905,-0.08361153304576874],[-0.24757850170135498,0.15205435454845428],[0.16397003829479218,0.0675978809595108],[-0.08002696186304092,-0.03322945907711983],[0.0440518893301487,0.06288439780473709],[0.2045188844203949,0.18710599839687347]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.000042771935113705695,0.22899451851844788,0.6004644632339478],"rotation":[-0.0036088337656110525,-0.9398679137229919,0.0019591455347836018,0.3415135145187378],"used":true,"bodyHandle":3.725e-321,"linearSpeed":0,"angularVelocityHistory":[[0.011783930473029613,-0.10842642188072205],[-0.01321326196193695,0.1391979306936264],[0.01632099598646164,0.16227014362812042],[0.026355266571044922,0.17606467008590698],[-0.07458760589361191,0.577867329120636],[0.0010698388796299696,-0.16140803694725037],[-0.03357478603720665,0.3102721869945526],[-0.0985802561044693,-0.2583005726337433],[-0.20123708248138428,-0.059472959488630295],[-0.1510326862335205,-0.401559978723526]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06131371483206749,0.2297966331243515,0.6345148086547852],"rotation":[0.007513418793678284,-0.8015444278717041,-0.003972857259213924,0.5978748202323914],"used":true,"bodyHandle":3.73e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.04619484022259712,0.20709124207496643],[0.09667292982339859,-0.00039978945278562605],[0.4221862256526947,0.03854405879974365],[0.23190458118915558,-0.01585131324827671],[0.020338259637355804,0.06776386499404907],[-0.018049081787467003,0.26778921484947205],[-0.1655319184064865,0.1393062025308609],[-0.026655320078134537,0.024372374638915062],[0.1361064463853836,-0.23403164744377136],[0.3102226257324219,-0.05428255721926689]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06096474081277847,0.23011761903762817,0.7056142687797546],"rotation":[-0.0029107527807354927,0.2691121995449066,0.007591022178530693,-0.9630745053291321],"used":true,"bodyHandle":3.735e-321,"linearSpeed":0,"angularVelocityHistory":[[0.13453176617622375,-0.08197548240423203],[0.10758558660745621,-0.35031628608703613],[0.2753305435180664,-0.2359658181667328],[0.3293518126010895,0.2203298658132553],[-0.09349289536476135,0.23089225590229034],[-0.352081298828125,-0.1618378907442093],[0.015675663948059082,0.052569106221199036],[-0.035362254828214645,-0.19870486855506897],[-0.00650271400809288,-0.0109671326354146],[0.18459452688694,0.09598224610090256]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0017601980362087488,0.22853967547416687,0.7411368489265442],"rotation":[-0.011535556055605412,-0.046075012534856796,0.013425503857433796,-0.998781144618988],"used":true,"bodyHandle":3.74e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.19359737634658813,0.12261740863323212],[-0.026776211336255074,0.08100755512714386],[-0.1244535967707634,-0.1421835720539093],[0.2484360635280609,-0.041500166058540344],[0.07363201677799225,-0.16395699977874756],[-0.09503976255655289,-0.13549166917800903],[-0.10915488004684448,-0.11452925950288773],[0.07536502927541733,-0.0577506460249424],[0.39173588156700134,-0.17858199775218964],[0.12690888345241547,0.22568485140800476]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0605335459113121,0.22940649092197418,0.7046595811843872],"rotation":[-0.01685403846204281,-0.9472248554229736,0.009714680723845959,-0.31997910141944885],"used":true,"bodyHandle":3.745e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.1882752776145935,-0.12781468033790588],[0.17859147489070892,-0.16667889058589935],[-0.032608408480882645,0.019351137802004814],[-0.00950880628079176,-0.0843496173620224],[-0.2961640954017639,0.08781938254833221],[-0.04890036582946777,0.2501237392425537],[-0.12224686145782471,-0.03636707365512848],[-0.18852633237838745,-0.16787968575954437],[-0.08245009183883667,-0.15806783735752106],[0.024692315608263016,-0.10784965008497238]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06244807317852974,0.22961392998695374,0.6341456770896912],"rotation":[0.020709889009594917,-0.5042839050292969,0.0036037974059581757,-0.8632820248603821],"used":true,"bodyHandle":3.75e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.3315560221672058,0.2781022787094116],[-0.08102007210254669,0.3438827097415924],[-0.20522180199623108,0.17303842306137085],[-0.25333449244499207,0.05841930955648422],[-0.23660165071487427,0.10531699657440186],[0.02648015320301056,-0.058327674865722656],[0.2795490324497223,-0.08258414268493652],[-0.044319115579128265,0.10249527543783188],[-0.008919958025217056,-0.35369715094566345],[0.03388313949108124,-0.29871121048927307]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0005773214506916702,0.22885052859783173,0.6722570061683655],"rotation":[-0.021376311779022217,-0.2941626310348511,-0.0004527851415332407,-0.9555161595344543],"used":true,"bodyHandle":3.755e-321,"linearSpeed":0,"angularVelocityHistory":[[0.15149568021297455,-0.20113135874271393],[0.19774296879768372,0.1432187259197235],[0.3050076961517334,-0.2547605633735657],[0.17078062891960144,-0.005756784230470657],[-0.24125739932060242,-0.19228564202785492],[-0.31308791041374207,-0.03826260566711426],[0.20119406282901764,-0.046695999801158905],[0.10178056359291077,-0.45272019505500793],[0.11127740889787674,0.024503137916326523],[0.2426355630159378,0.2028495818376541]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.000057254008424934,0.23112663626670837,0.5994551181793213],"rotation":[0.004671776667237282,0.9993259310722351,-0.002544505288824439,-0.036321621388196945],"used":true,"bodyHandle":3.76e-321,"linearSpeed":0,"angularVelocityHistory":[[0.12848496437072754,-0.06106230616569519],[-0.040421921759843826,0.010474056005477905],[0.12196290493011475,-0.003538044635206461],[0.1333971470594406,-0.021689146757125854],[-0.2746449410915375,0.7153567671775818],[-0.04290109872817993,-0.023700598627328873],[-0.013050129637122154,0.4008210003376007],[-0.09005144983530045,0.023340098559856415],[-0.288284569978714,0.08774913847446442],[-0.09900367259979248,-0.2700020670890808]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06163392961025238,0.23254966735839844,0.6350577473640442],"rotation":[0.008625241927802563,-0.749509334564209,0.0005581620498560369,-0.6619373559951782],"used":true,"bodyHandle":3.765e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.1190386563539505,0.1599973440170288],[0.05238110199570656,0.2654375731945038],[-0.14288491010665894,0.18378636240959167],[-0.2332996279001236,0.029579687863588333],[-0.03022870235145092,0.10644529014825821],[0.1427159458398819,-0.19816091656684875],[0.24538809061050415,-0.05803976580500603],[-0.06643597036600113,0.045118071138858795],[-0.08966293185949326,-0.32151398062705994],[0.17039132118225098,-0.36201444268226624]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05898367613554001,0.23122991621494293,0.7039248943328857],"rotation":[-0.012013346888124943,-0.9479403495788574,0.010885563679039478,-0.3180350363254547],"used":true,"bodyHandle":3.77e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.11279626190662384,-0.1123049333691597],[0.15400059521198273,-0.2126094549894333],[-0.04551506042480469,-0.00513001112267375],[-0.126169353723526,-0.051648885011672974],[-0.3100367486476898,0.11818117648363113],[-0.10654281824827194,0.245157852768898],[-0.12917132675647736,-0.10649286955595016],[-0.1276487112045288,-0.2075190395116806],[-0.02353190816938877,-0.1956453025341034],[0.03953912481665611,-0.12900196015834808]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0021509674843400717,0.23131662607192993,0.7395721077919006],"rotation":[-0.013043168932199478,-0.13680891692638397,0.015439676120877266,-0.990391194820404],"used":true,"bodyHandle":3.775e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.24046707153320312,0.239232137799263],[-0.009752032347023487,0.08291067183017731],[-0.0063369921408593655,-0.22250039875507355],[0.12592659890651703,-0.11770712584257126],[0.09073957800865173,-0.07312589138746262],[-0.18041794002056122,-0.16432027518749237],[-0.15546180307865143,-0.02501099184155464],[0.03364713862538338,0.0178187508136034],[0.3422536551952362,-0.08527740836143494],[0.2218896895647049,0.12800689041614532]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06016751751303673,0.233609139919281,0.7046817541122437],"rotation":[-0.00022745724709238857,-0.4283708930015564,0.002073053503409028,-0.9036005735397339],"used":true,"bodyHandle":3.78e-321,"linearSpeed":0,"angularVelocityHistory":[[0.22444288432598114,-0.058082159608602524],[0.0662013590335846,-0.3374781310558319],[0.2242930829524994,-0.29890692234039307],[0.2254493087530136,0.12259438633918762],[-0.04550517350435257,0.09849786758422852],[-0.3361847400665283,-0.049066148698329926],[-0.0795431137084961,0.03654563054442406],[-0.1070212572813034,-0.10987214744091034],[-0.0549096018075943,0.04326476901769638],[0.2066899538040161,0.04587399959564209]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06040758267045021,0.2324402630329132,0.6354947686195374],"rotation":[0.008423839695751667,-0.662697434425354,0.0031803762540221214,0.7488331198692322],"used":true,"bodyHandle":3.785e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.017022477462887764,0.23287269473075867],[0.03715452924370766,0.029563982039690018],[0.32675451040267944,0.20263168215751648],[0.11427398025989532,-0.008205550722777843],[0.05244917795062065,0.10828249156475067],[-0.08301328867673874,0.16878341138362885],[0.1469242125749588,0.20593515038490295],[-0.11321301758289337,0.0371081717312336],[0.17919763922691345,-0.16809850931167603],[0.27780991792678833,-0.12805411219596863]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0006296031642705202,0.23182787001132965,0.6674435138702393],"rotation":[0.013740109279751778,-0.7960866093635559,-0.011882837861776352,0.6049100160598755],"used":true,"bodyHandle":3.79e-321,"linearSpeed":0,"angularVelocityHistory":[[0.23816822469234467,-0.3000270128250122],[0.3135550022125244,0.037824537605047226],[0.2681087851524353,-0.2599529027938843],[0.16269861161708832,-0.0018177469028159976],[-0.23770003020763397,-0.18354155123233795],[-0.3360908329486847,-0.1487768441438675],[0.2740963399410248,0.08929836750030518],[-0.03439553081989288,-0.158460333943367],[0.17191435396671295,0.05051950365304947],[0.21970534324645996,0.2443121075630188]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.00006590032717213035,0.23355132341384888,0.6001697778701782],"rotation":[-0.0034983158111572266,-0.8704587817192078,0.0029256867710500956,0.4922202527523041],"used":true,"bodyHandle":3.794e-321,"linearSpeed":0,"angularVelocityHistory":[[0.10968896001577377,-0.028953926637768745],[-0.05249515920877457,-0.01993643306195736],[0.13552425801753998,-0.005491952411830425],[0.14080126583576202,-0.0593317486345768],[-0.2131885141134262,0.5786007642745972],[-0.033670078963041306,-0.02630450762808323],[-0.024523185566067696,0.2771383821964264],[-0.14541709423065186,-0.11764338612556458],[-0.25733304023742676,0.02626265399158001],[-0.10294542461633682,-0.2698240876197815]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.061407409608364105,0.23424634337425232,0.6344613432884216],"rotation":[-0.0005798267084173858,-0.9481061100959778,-0.0022942498326301575,-0.3179451823234558],"used":true,"bodyHandle":3.8e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.09093046188354492,0.18486864864826202],[0.096882663667202,0.13321416079998016],[0.29018011689186096,0.12265142053365707],[0.13047777116298676,-0.020941754803061485],[0.10612738132476807,0.06422632187604904],[-0.001127730356529355,0.2872195839881897],[0.07094550132751465,0.2695399224758148],[-0.12058316916227341,0.05494579300284386],[0.13581258058547974,-0.07520923018455505],[0.4946584105491638,-0.17275170981884003]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.059937987476587296,0.23640194535255432,0.7055281400680542],"rotation":[-0.013938546180725098,-0.6590443849563599,0.010843461379408836,-0.7518967390060425],"used":true,"bodyHandle":3.804e-321,"linearSpeed":0,"angularVelocityHistory":[[0.2095068246126175,-0.0959402471780777],[0.0626649335026741,-0.29496246576309204],[0.3109744191169739,-0.2807696461677551],[0.2348928451538086,0.07153142243623734],[0.007736671715974808,0.08878425508737564],[-0.3391098976135254,-0.04917527735233307],[-0.07970351725816727,0.02950776182115078],[-0.15456697344779968,-0.08690421283245087],[0.03399786725640297,0.029778262600302696],[0.1369129717350006,0.0433068573474884]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0028658828232437372,0.2338258922100067,0.7414954900741577],"rotation":[-0.011760072782635689,-0.2595583200454712,0.00899710413068533,-0.9656139016151428],"used":true,"bodyHandle":3.81e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.16354595124721527,0.07061168551445007],[-0.0216398686170578,0.08549252152442932],[-0.1268012672662735,-0.10893793404102325],[0.22475071251392365,0.028308475390076637],[0.05531712621450424,-0.08927293121814728],[-0.10049304366111755,-0.13004550337791443],[-0.1376410722732544,-0.07535631954669952],[0.060273002833127975,-0.07675793766975403],[0.3678574860095978,-0.08084487169981003],[0.18009132146835327,0.15130852162837982]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05843924731016159,0.23455563187599182,0.7046950459480286],"rotation":[-0.013649921864271164,-0.36410170793533325,-0.009304484352469444,0.9312126040458679],"used":true,"bodyHandle":3.814e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.08716095238924026,-0.1665593385696411],[0.13592533767223358,-0.24104677140712738],[-0.04384295269846916,0.022916452959179878],[-0.07053735852241516,-0.09902328252792358],[-0.2771807312965393,0.14377352595329285],[-0.05039992183446884,0.2678090035915375],[-0.11849964410066605,-0.1320943832397461],[-0.13003124296665192,-0.18912088871002197],[-0.02018950879573822,-0.16616356372833252],[0.025873133912682533,-0.1308400183916092]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06204262003302574,0.23474864661693573,0.6347094774246216],"rotation":[0.021582307294011116,-0.7326252460479736,0.007334708236157894,-0.680250346660614],"used":true,"bodyHandle":3.82e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.35826799273490906,0.27127981185913086],[-0.06639552861452103,0.3746218979358673],[-0.25389304757118225,0.2004876732826233],[-0.23558424413204193,0.02165338397026062],[-0.20451417565345764,0.06572744995355606],[0.17285995185375214,-0.08727658540010452],[0.30700355768203735,-0.017750408500432968],[-0.030862849205732346,0.1521754264831543],[-0.06359211355447769,-0.277460515499115],[0.050960686057806015,-0.34641799330711365]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.00042657717131078243,0.23382030427455902,0.6721073389053345],"rotation":[-0.0209696926176548,0.041288092732429504,0.00945770088583231,-0.9988824129104614],"used":true,"bodyHandle":3.824e-321,"linearSpeed":0,"angularVelocityHistory":[[0.13791431486606598,-0.21101835370063782],[0.22365349531173706,0.1271492838859558],[0.34751009941101074,-0.26640769839286804],[0.16222380101680756,-0.003308434272184968],[-0.1748831421136856,-0.17882581055164337],[-0.31270459294319153,-0.10125309228897095],[0.1722412407398224,-0.03930506110191345],[0.06030532345175743,-0.36601653695106506],[0.1727009415626526,0.00408905791118741],[0.2512454688549042,0.23199766874313354]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0002780690265353769,0.2360944002866745,0.6005622148513794],"rotation":[0.0031521704513579607,0.7149221897125244,0.007006063591688871,-0.6991618275642395],"used":true,"bodyHandle":3.83e-321,"linearSpeed":0,"angularVelocityHistory":[[0.12982967495918274,-0.03182712942361832],[-0.027166957035660744,-0.0018563679186627269],[0.14842823147773743,-0.013615084812045097],[0.14823170006275177,-0.05676734447479248],[-0.20036233961582184,0.5731310844421387],[-0.07040908187627792,-0.013685828074812889],[-0.010073574259877205,0.3571716547012329],[-0.2181360125541687,-0.03116048127412796],[-0.3665250837802887,-0.06022194027900696],[-0.24243003129959106,-0.43809935450553894]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06259171664714813,0.23674754798412323,0.6340975165367126],"rotation":[0.018986748531460762,-0.27006471157073975,0.0002954029478132725,-0.9626548290252686],"used":true,"bodyHandle":3.834e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.35902804136276245,0.252675324678421],[-0.23798653483390808,0.4184805750846863],[-0.3233043849468231,0.23592399060726166],[-0.2941802144050598,0.033783022314310074],[-0.18342015147209167,0.0013799304142594337],[0.13332682847976685,-0.009548986330628395],[0.36064431071281433,-0.040219154208898544],[-0.033347539603710175,0.1614450067281723],[-0.0643390342593193,-0.32862719893455505],[0.03328796103596687,-0.27769383788108826]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.058807164430618286,0.23649822175502777,0.7040860652923584],"rotation":[-0.010506895370781422,-0.09050720185041428,-0.01726429909467697,0.9956907033920288],"used":true,"bodyHandle":3.84e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.11501584202051163,-0.1637115180492401],[0.14358992874622345,-0.29046908020973206],[0.019313860684633255,0.0024473899975419044],[-0.2403591275215149,0.05544441193342209],[-0.24783150851726532,0.06837619096040726],[-0.003135479986667633,0.18828891217708588],[-0.15538962185382843,-0.11961046606302261],[-0.12633554637432098,-0.2278212457895279],[-0.030764412134885788,-0.19292517006397247],[0.026793282479047775,-0.18639086186885834]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.00143392791505903,0.23609966039657593,0.7410829663276672],"rotation":[-0.015700995922088623,-0.9800152778625488,-0.005370293278247118,-0.19822880625724792],"used":true,"bodyHandle":3.844e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.10515797138214111,-0.024100443348288536],[-0.05859517678618431,0.06259822845458984],[0.09622623771429062,-0.05759640038013458],[0.09454230219125748,0.06238127127289772],[0.09058720618486404,-0.08622764050960541],[-0.1470661461353302,-0.26616957783699036],[-0.17448405921459198,-0.06541863828897476],[0.010575229302048683,0.04933236539363861],[0.16749700903892517,-0.0751803070306778],[0.18107961118221283,0.10536404699087143]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06102067232131958,0.23777590692043304,0.7058393359184265],"rotation":[-0.004852599930018187,-0.2619404196739197,0.012923618778586388,-0.9649853110313416],"used":true,"bodyHandle":3.85e-321,"linearSpeed":0,"angularVelocityHistory":[[0.49035632610321045,-0.11964999884366989],[0.01905924640595913,-0.39294537901878357],[0.3613744378089905,-0.35666245222091675],[0.17414699494838715,-0.07737038284540176],[-0.06258337199687958,0.07623255252838135],[-0.27232784032821655,-0.08265034854412079],[-0.018132222816348076,-0.1194671019911766],[-0.08591608703136444,-0.16601942479610443],[0.17243900895118713,-0.014544281177222729],[0.23841513693332672,-0.029930587857961655]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06058218330144882,0.23705388605594635,0.6350591778755188],"rotation":[0.00544573413208127,-0.9410038590431213,-0.01961578242480755,-0.3377828598022461],"used":true,"bodyHandle":3.854e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.08492261916399002,0.18625125288963318],[0.10932145267724991,0.3215283155441284],[0.2850086987018585,0.263113409280777],[0.18618853390216827,-0.027722926810383797],[0.17421147227287292,0.05052957311272621],[0.02884882502257824,0.13969258964061737],[0.3598652780056,0.037636443972587585],[-0.12945479154586792,0.12782584130764008],[0.05152846500277519,-0.030919108539819717],[0.200540691614151,-0.1646340936422348]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.001444779452867806,0.23729364573955536,0.6703108549118042],"rotation":[0.009550217539072037,-0.6514331102371216,-0.022756826132535934,0.7583045959472656],"used":true,"bodyHandle":3.86e-321,"linearSpeed":0,"angularVelocityHistory":[[0.03278328478336334,-0.17601819336414337],[0.06158996373414993,0.16246749460697174],[0.3140399754047394,-0.3305760622024536],[0.17191429436206818,-0.020197249948978424],[-0.17431087791919708,-0.17677418887615204],[-0.3586619794368744,-0.13779719173908234],[0.17163433134555817,-0.03499044105410576],[-0.025457102805376053,-0.13847042620182037],[0.24652835726737976,-0.07488149404525757],[0.3208477199077606,0.27014368772506714]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0003614845045376569,0.23882611095905304,0.6008820533752441],"rotation":[0.0024585805367678404,0.11676574498414993,-0.008762175217270851,0.9931177496910095],"used":true,"bodyHandle":3.864e-321,"linearSpeed":0,"angularVelocityHistory":[[0.0776636004447937,-0.04326177388429642],[-0.0683480054140091,-0.028376946225762367],[0.1163967102766037,-0.014607451856136322],[0.15811382234096527,-0.05181623622775078],[-0.2038988620042801,0.6643346548080444],[0.044546306133270264,0.012818925082683563],[0.021253949031233788,0.3051106333732605],[-0.09085408598184586,0.004659257363528013],[-0.23391705751419067,0.0008478954550810158],[-0.16963525116443634,-0.4269508123397827]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06225074455142021,0.24019385874271393,0.6344524025917053],"rotation":[0.011220349930226803,-0.7494331002235413,-0.0057249004021286964,-0.661960244178772],"used":true,"bodyHandle":3.87e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.014061219058930874,0.10819641500711441],[0.2893136441707611,0.2606319785118103],[0.18595263361930847,0.29606306552886963],[0.1071605384349823,0.035266004502773285],[0.12425753474235535,0.05761369690299034],[0.05670817941427231,-0.021707424893975258],[0.33552202582359314,0.02933642454445362],[-0.0711011290550232,0.1651773601770401],[-0.05817925184965134,-0.036916911602020264],[0.10514961183071136,-0.09938457608222961]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.061638232320547104,0.24175448715686798,0.7043339014053345],"rotation":[-0.006311456672847271,-0.6805374622344971,0.013377167284488678,-0.7325639128684998],"used":true,"bodyHandle":3.873e-321,"linearSpeed":0,"angularVelocityHistory":[[0.15011727809906006,-0.05153553560376167],[-0.07327966392040253,-0.3739282786846161],[0.3715357780456543,-0.3675324618816376],[0.18007589876651764,-0.05849536880850792],[0.04368257895112038,0.043393395841121674],[-0.31207534670829773,-0.032442495226860046],[-0.07541286945343018,-0.05147197097539902],[0.034868936985731125,-0.2196490317583084],[0.1551227867603302,0.015726063400506973],[0.2661876678466797,-0.07612716406583786]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0016910077538341284,0.23928388953208923,0.7399396896362305],"rotation":[-0.013732249848544598,-0.9681660532951355,-0.004150287248194218,-0.2498970776796341],"used":true,"bodyHandle":3.88e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.1371646672487259,-0.050485365092754364],[-0.10086959600448608,0.1139446496963501],[-0.11445192992687225,-0.08660601824522018],[0.26852118968963623,0.17069129645824432],[0.07572340220212936,-0.044233374297618866],[-0.09014524519443512,-0.27018871903419495],[-0.173228919506073,-0.05130157247185707],[-0.00568411685526371,0.0245978944003582],[0.19217512011528015,-0.10252953320741653],[0.054161541163921356,0.19158241152763367]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05846310779452324,0.2391168177127838,0.7049286961555481],"rotation":[-0.01027948223054409,-0.17684240639209747,-0.01618082821369171,0.9840524792671204],"used":true,"bodyHandle":3.883e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.08071622252464294,-0.1412849724292755],[0.07639452069997787,-0.20117712020874023],[0.010764474980533123,-0.03143501281738281],[-0.31076547503471375,0.13938941061496735],[-0.22905023396015167,0.11094295233488083],[-0.006433962378650904,0.2236197292804718],[-0.13103146851062775,-0.12206286191940308],[-0.10834173113107681,-0.20884409546852112],[0.0053128511644899845,-0.18270611763000488],[0.025237299501895905,-0.18805889785289764]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06280634552240372,0.24012711644172668,0.6335074305534363],"rotation":[0.010078446939587593,-0.8001183271408081,0.01008322648704052,-0.5996727347373962],"used":true,"bodyHandle":3.89e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.34593313932418823,0.2082105129957199],[-0.16617998480796814,0.3497781753540039],[-0.25038856267929077,0.15904587507247925],[-0.2592633068561554,0.031949352473020554],[-0.20770855247974396,0.07609809190034866],[0.20158037543296814,-0.043210797011852264],[0.2959587872028351,0.022022195160388947],[-0.032115254551172256,0.14916183054447174],[-0.03330542519688606,-0.27669140696525574],[0.04983528330922127,-0.35219886898994446]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.00018375692889094353,0.23996229469776154,0.6685172915458679],"rotation":[-0.025642717257142067,0.016583114862442017,0.009552010335028172,-0.9994879961013794],"used":true,"bodyHandle":3.893e-321,"linearSpeed":0,"angularVelocityHistory":[[0.01685645803809166,-0.132321298122406],[0.016662633046507835,0.14825181663036346],[0.3061875104904175,-0.27289873361587524],[0.2050798237323761,-0.011868943460285664],[-0.137193500995636,-0.0923755094408989],[-0.3809970021247864,-0.24945545196533203],[0.06449511647224426,-0.09166251122951508],[-0.009770113043487072,-0.13888341188430786],[0.30137336254119873,-0.051107876002788544],[0.32736334204673767,0.21952380239963531]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.000018506107153370976,0.24162612855434418,0.6007569432258606],"rotation":[0.004513293504714966,0.3506028652191162,0.008441917598247528,-0.9364752769470215],"used":true,"bodyHandle":3.9e-321,"linearSpeed":0,"angularVelocityHistory":[[0.07926741987466812,-0.026090320199728012],[-0.0703379437327385,-0.030663425102829933],[0.10206476598978043,-0.04131598398089409],[0.15749964118003845,-0.08299103379249573],[-0.12934823334217072,0.47230610251426697],[0.028331870213150978,0.0543515719473362],[0.06827652454376221,0.2845096290111542],[-0.09899213165044785,0.06642334908246994],[-0.20624051988124847,-0.05157037451863289],[-0.21198810636997223,-0.38594672083854675]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.061842214316129684,0.24344003200531006,0.6348688006401062],"rotation":[0.012416481971740723,-0.813801646232605,0.012935115955770016,-0.5808660387992859],"used":true,"bodyHandle":3.903e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.36566856503486633,0.21306121349334717],[-0.2188817411661148,0.3798221945762634],[-0.3388722836971283,0.1847068965435028],[-0.2881525754928589,0.03003537468612194],[-0.20275788009166718,0.03421642258763313],[0.16843880712985992,-0.06482639908790588],[0.3601553440093994,-0.007063785567879677],[-0.0490846186876297,0.1431369185447693],[-0.0661560446023941,-0.36946743726730347],[0.07284481078386307,-0.43218332529067993]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05604083836078644,0.2425575703382492,0.7054354548454285],"rotation":[-0.006434484384953976,-0.0812879428267479,-0.01633550599217415,0.9965360164642334],"used":true,"bodyHandle":3.91e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.07900223135948181,-0.15915141999721527],[0.12205411493778229,-0.21694864332675934],[-0.008323267102241516,-0.06944167613983154],[-0.3011569380760193,0.145583376288414],[-0.19533206522464752,0.10299988090991974],[0.0015205878298729658,0.22006063163280487],[-0.11173692345619202,-0.0970502570271492],[-0.09632725268602371,-0.21109990775585175],[0.025457317009568214,-0.18504244089126587],[0.028793422505259514,-0.1945631504058838]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0013813265832141042,0.24117138981819153,0.739939272403717],"rotation":[-0.0137567687779665,-0.5987958312034607,0.0002577218401711434,-0.8007835149765015],"used":true,"bodyHandle":3.913e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.08199074119329453,-0.14866909384727478],[-0.08620120584964752,0.06113923713564873],[0.05654925853013992,-0.06789751350879669],[0.2903478145599365,0.105601467192173],[0.08761830627918243,-0.06428754329681396],[-0.049228351563215256,-0.32767486572265625],[-0.1283286213874817,-0.046868499368429184],[-0.0005049124592915177,0.03967662528157234],[0.23676927387714386,-0.1632983684539795],[-0.1313636749982834,0.10987658053636551]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.060366299003362656,0.24323180317878723,0.7053319811820984],"rotation":[-0.009029154665768147,-0.8394643664360046,0.003517553675919771,-0.5433283448219299],"used":true,"bodyHandle":3.92e-321,"linearSpeed":0,"angularVelocityHistory":[[0.40799379348754883,-0.09180277585983276],[0.06629541516304016,-0.3913857340812683],[0.4065268933773041,-0.4177039563655853],[0.1676245480775833,-0.012575497850775719],[-0.08390185981988907,0.11858177930116653],[-0.32613876461982727,-0.038922205567359924],[-0.04396132752299309,-0.09860364347696304],[-0.031463176012039185,-0.16988077759742737],[0.19825878739356995,-0.005699695087969303],[0.25285181403160095,-0.11589733511209488]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06069357320666313,0.24233433604240417,0.6354203820228577],"rotation":[0.0067644440568983555,-0.8753392100334167,-0.025512797757983208,-0.4827883541584015],"used":true,"bodyHandle":3.923e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.04184621572494507,0.13404834270477295],[0.24843449890613556,0.4779161512851715],[0.17990262806415558,0.340899258852005],[0.14238734543323517,0.010439830832183361],[0.1356385052204132,0.08755556493997574],[0.11705666035413742,0.04911284148693085],[0.4252683222293854,0.11440184712409973],[-0.11681846529245377,0.21034981310367584],[-0.0014800794888287783,-0.06450064480304718],[0.1853058785200119,-0.1277850717306137]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0007289148634299636,0.24281589686870575,0.6704084277153015],"rotation":[0.01036884542554617,-0.766414225101471,-0.03209276869893074,0.6414607167243958],"used":true,"bodyHandle":3.93e-321,"linearSpeed":0,"angularVelocityHistory":[[0.004616113379597664,-0.12838026881217957],[0.011785603128373623,0.14311839640140533],[0.3192555904388428,-0.27717190980911255],[0.1597532331943512,-0.034048475325107574],[-0.14956407248973846,-0.09402318298816681],[-0.4715678095817566,-0.22304683923721313],[0.052317358553409576,-0.07138419151306152],[-0.017774216830730438,-0.13564527034759521],[0.2639720141887665,-0.04224521294236183],[0.3456527888774872,0.13515114784240723]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.000004501256626099348,0.24433299899101257,0.599974513053894],"rotation":[0.0031457028817385435,0.40852320194244385,-0.011804717592895031,0.9126661419868469],"used":true,"bodyHandle":3.933e-321,"linearSpeed":0,"angularVelocityHistory":[[0.09822776913642883,-0.02652210369706154],[-0.06877997517585754,-0.03885812312364578],[0.09826286882162094,-0.05125598609447479],[0.1563671976327896,-0.12461816519498825],[-0.07465540617704391,0.3840717673301697],[-0.0031003959011286497,0.07088005542755127],[0.06482411175966263,0.2509237825870514],[-0.12301287800073624,0.09028845280408859],[-0.2314298003911972,-0.0744319036602974],[-0.23902051150798798,-0.3657771348953247]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.060212425887584686,0.24516050517559052,0.6352472305297852],"rotation":[0.0037456792779266834,-0.4712105393409729,-0.01326078549027443,-0.8819130063056946],"used":true,"bodyHandle":3.94e-321,"linearSpeed":0,"angularVelocityHistory":[[0.00755718071013689,0.10989820957183838],[0.20691294968128204,0.2813793122768402],[0.16430474817752838,0.31939855217933655],[0.0325656421482563,0.07757003605365753],[0.08779069781303406,0.09491392970085144],[0.06158895045518875,0.008213370107114315],[0.3902817666530609,0.09173966199159622],[-0.1546775996685028,0.1930217295885086],[-0.008882066234946251,-0.06490979343652725],[0.15469227731227875,-0.14959457516670227]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06097177416086197,0.2468898892402649,0.7048413753509521],"rotation":[-0.010394890792667866,-0.9602490067481995,0.004032696131616831,-0.27892211079597473],"used":true,"bodyHandle":3.943e-321,"linearSpeed":0,"angularVelocityHistory":[[0.24188962578773499,-0.09349265694618225],[-0.005957788787782192,-0.33441704511642456],[0.3202092945575714,-0.3037113547325134],[0.1521560698747635,-0.11973182111978531],[-0.06297159194946289,0.0039504049345850945],[-0.33655285835266113,-0.04020858183503151],[-0.0641096904873848,-0.055555544793605804],[0.031297966837882996,-0.19541744887828827],[0.2026500254869461,0.0229338388890028],[0.19445382058620453,-0.0919966995716095]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0016807741485536098,0.24474084377288818,0.7409352660179138],"rotation":[-0.009295541793107986,-0.8314720392227173,-0.007773310877382755,-0.5554343461990356],"used":true,"bodyHandle":3.95e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.13878843188285828,-0.0415654182434082],[-0.1358698010444641,0.07922367751598358],[-0.36281484365463257,-0.08115781098604202],[0.29672494530677795,-0.006861784495413303],[0.06148235872387886,-0.05406716838479042],[-0.20745816826820374,-0.07403760403394699],[-0.23801983892917633,0.016386564821004868],[-0.010985953733325005,0.015931211411952972],[0.1854187250137329,-0.04884820058941841],[-0.1512327939271927,0.11073629558086395]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05900794640183449,0.24432606995105743,0.7035359740257263],"rotation":[-0.012933003716170788,-0.2901712954044342,-0.014039500616490841,0.9567843675613403],"used":true,"bodyHandle":3.953e-321,"linearSpeed":0,"angularVelocityHistory":[[0.026355886831879616,-0.14111468195915222],[0.10673128068447113,-0.17049729824066162],[0.004184798803180456,-0.040744226425886154],[-0.4270148277282715,0.20670641958713531],[-0.19317379593849182,0.063937708735466],[0.060076575726270676,0.12983649969100952],[-0.12614329159259796,-0.16943207383155823],[-0.06360971927642822,-0.27131909132003784],[0.05972801893949509,-0.24855095148086548],[0.05005096271634102,-0.2294505089521408]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.062305811792612076,0.2458292841911316,0.6348941326141357],"rotation":[0.013102022930979729,-0.5069786310195923,0.00947058666497469,-0.8618070483207703],"used":true,"bodyHandle":3.957e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.4071784019470215,0.212225541472435],[-0.2795054614543915,0.424326628446579],[-0.2846429646015167,0.17681680619716644],[-0.26557713747024536,0.03859364241361618],[-0.24675564467906952,0.02979741245508194],[0.057313766330480576,-0.05191615968942642],[0.28638890385627747,0.06894270330667496],[-0.052315790206193924,0.19946874678134918],[-0.11609584838151932,-0.20217354595661163],[0.12697283923625946,-0.37441328167915344]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0028797711711376905,0.2462530881166458,0.6708115935325623],"rotation":[-0.026199571788311005,-0.27226722240448,0.003908697050064802,-0.9618569612503052],"used":true,"bodyHandle":3.96e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.19425256550312042,-0.004418354481458664],[-0.08305766433477402,0.14938358962535858],[0.30599865317344666,-0.290612131357193],[0.046984899789094925,-0.02588137984275818],[-0.22134307026863098,-0.05543096736073494],[-0.384392112493515,-0.30342897772789],[0.046885859221220016,-0.13265904784202576],[-0.023549718782305717,-0.10145331174135208],[0.2607450783252716,-0.1296570599079132],[0.2889123260974884,0.11433176696300507]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.000947660650126636,0.24726244807243347,0.6012439727783203],"rotation":[0.0006527844816446304,-0.027325285598635674,0.012849899008870125,-0.9995438456535339],"used":true,"bodyHandle":3.967e-321,"linearSpeed":0,"angularVelocityHistory":[[0.08874379098415375,-0.017923103645443916],[-0.06888947635889053,-0.03659747540950775],[0.07566127181053162,-0.048275433480739594],[0.1556178331375122,-0.13325680792331696],[-0.06950544565916061,0.3428167402744293],[-0.026801524683833122,0.04476373642683029],[0.045247841626405716,0.19702547788619995],[-0.12777966260910034,0.10375328361988068],[-0.2384612113237381,-0.05954500287771225],[-0.22331978380680084,-0.3450614809989929]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.062046073377132416,0.2487911432981491,0.6354142427444458],"rotation":[0.013391798362135887,0.3913567066192627,0.0016479816986247897,-0.9201401472091675],"used":true,"bodyHandle":3.97e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.35213515162467957,0.1853339523077011],[-0.28002750873565674,0.37881016731262207],[-0.23984301090240479,0.13026008009910583],[-0.19086545705795288,0.07635215669870377],[-0.23927618563175201,0.002586851827800274],[-0.0390687994658947,0.03329579532146454],[0.36252114176750183,-0.022172842174768448],[0.01677670143544674,0.3059922754764557],[-0.11660711467266083,0.06971362978219986],[0.2009250968694687,-0.2592597007751465]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05697060003876686,0.2479209154844284,0.7053647637367249],"rotation":[-0.015124455094337463,-0.3269612789154053,-0.016435271129012108,0.9447736740112305],"used":true,"bodyHandle":3.977e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.05102803558111191,-0.2284191995859146],[0.05857452005147934,-0.17602908611297607],[-0.016550030559301376,-0.06239721551537514],[-0.3928108215332031,0.17786905169487],[-0.18657837808132172,0.013051426038146019],[0.0479276105761528,0.11167863011360168],[-0.10628022998571396,-0.15228185057640076],[-0.04589731991291046,-0.2597661018371582],[0.034408580511808395,-0.23032839596271515],[0.0541408471763134,-0.23097538948059082]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0024792621843516827,0.24797511100769043,0.7409616112709045],"rotation":[-0.015570297837257385,-0.7332150936126709,0.0003403073060326278,-0.679818332195282],"used":true,"bodyHandle":3.98e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.01387567725032568,-0.2525313198566437],[-0.025064894929528236,0.0335121713578701],[-0.22964538633823395,0.04013843089342117],[0.3648691773414612,0.04606962203979492],[0.08121966570615768,-0.030462268739938736],[-0.20087678730487823,-0.09532038867473602],[-0.22536061704158783,0.02817399427294731],[-0.10022100061178207,0.03673920780420303],[-0.13520663976669312,0.04684441164135933],[-0.1830117404460907,-0.12350928783416748]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06149642914533615,0.24966949224472046,0.704500138759613],"rotation":[-0.004468580707907677,-0.904822826385498,0.01904766820371151,-0.42533862590789795],"used":true,"bodyHandle":3.987e-321,"linearSpeed":0,"angularVelocityHistory":[[0.13090237975120544,-0.004845853894948959],[-0.06582313030958176,-0.22265739738941193],[0.2480776160955429,-0.27123263478279114],[0.11739448457956314,-0.23598352074623108],[-0.133226677775383,-0.0370248407125473],[-0.2616245746612549,-0.05540565401315689],[-0.040548939257860184,-0.17650938034057617],[0.1489877849817276,-0.23903538286685944],[0.11947720497846603,-0.021495839580893517],[0.23948511481285095,-0.14226599037647247]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06022535264492035,0.24776744842529297,0.6356188058853149],"rotation":[0.00454400759190321,-0.6087764501571655,-0.02288968488574028,-0.7929984331130981],"used":true,"bodyHandle":3.99e-321,"linearSpeed":0,"angularVelocityHistory":[[0.05511855334043503,0.08632387965917587],[0.30529460310935974,0.3686125874519348],[0.06278687715530396,0.3767833113670349],[-0.07173725962638855,-0.010343959555029869],[-0.0242930855602026,0.08423225581645966],[0.13473176956176758,-0.11323754489421844],[0.4432770609855652,0.050141993910074234],[-0.057703450322151184,0.0841594934463501],[-0.20033639669418335,-0.16192251443862915],[-0.08554341644048691,-0.05473630502820015]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.001155766542069614,0.24901807308197021,0.6702922582626343],"rotation":[0.03002363257110119,-0.5142067670822144,-0.01617194525897503,0.8569879531860352],"used":true,"bodyHandle":3.997e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.20455515384674072,-0.03016054257750511],[-0.12544964253902435,0.2535967230796814],[0.21901428699493408,0.04828028380870819],[0.023711994290351868,-0.012901346199214458],[0.021148284897208214,0.087228924036026],[-0.3811575770378113,-0.25173884630203247],[0.013676571659743786,-0.08834607154130936],[-0.05116689205169678,0.02051880955696106],[0.2656576931476593,-0.01375315897166729],[0.35743558406829834,0.18077458441257477]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0011396758491173387,0.2501380741596222,0.6007079482078552],"rotation":[0.004939467646181583,0.4445267617702484,-0.01118530798703432,0.8956820964813232],"used":true,"bodyHandle":4e-321,"linearSpeed":0,"angularVelocityHistory":[[0.08888333290815353,-0.012538917362689972],[-0.07908707112073898,-0.029043514281511307],[0.08733358979225159,-0.04889548197388649],[0.17002125084400177,-0.12251222133636475],[-0.07232128083705902,0.39889830350875854],[-0.019534248858690262,0.04576674476265907],[0.06324169039726257,0.23295310139656067],[-0.14021068811416626,0.11605487018823624],[-0.23629720509052277,-0.05928939953446388],[-0.26173052191734314,-0.3517102003097534]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05964721739292145,0.2514899671077728,0.6344518065452576],"rotation":[0.00891177263110876,-0.7298713326454163,-0.021963471546769142,-0.6831734776496887],"used":true,"bodyHandle":4.007e-321,"linearSpeed":0,"angularVelocityHistory":[[0.05038959160447121,0.1010107770562172],[0.36114639043807983,0.35294297337532043],[0.0668502151966095,0.3778969943523407],[-0.03847062587738037,0.01861751265823841],[0.012899158522486687,0.09834998100996017],[0.1577814668416977,-0.10593097656965256],[0.4497295022010803,0.006062316242605448],[0.0705946758389473,0.1905231922864914],[-0.19861985743045807,-0.16127550601959229],[-0.0823575109243393,-0.08172581344842911]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06132601946592331,0.2519945800304413,0.704476535320282],"rotation":[-0.009488062933087349,-0.5792105793952942,0.00680165970697999,-0.8150942921638489],"used":true,"bodyHandle":4.01e-321,"linearSpeed":0,"angularVelocityHistory":[[0.1364295929670334,0.009864173829555511],[-0.13053539395332336,-0.22091542184352875],[0.3218887150287628,-0.33640220761299133],[0.12694735825061798,-0.1511869728565216],[-0.09595926851034164,-0.011445200070738792],[-0.24092690646648407,-0.07788503915071487],[-0.13702498376369476,-0.17976072430610657],[0.29494979977607727,-0.20777560770511627],[0.07491068542003632,-0.0044475579634308815],[0.19986793398857117,-0.10780711472034454]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.002151994500309229,0.25081127882003784,0.7410559058189392],"rotation":[0.021334948018193245,-0.38619351387023926,-0.011089510284364223,-0.9221042990684509],"used":true,"bodyHandle":4.017e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.022416232153773308,-0.31259235739707947],[-0.13027401268482208,0.22342945635318756],[-0.30209189653396606,-0.0007600841927342117],[0.2689615488052368,-0.05410614609718323],[0.0579330213367939,-0.08348054438829422],[-0.14704760909080505,-0.2278284728527069],[-0.19814501702785492,0.02620874159038067],[-0.10763515532016754,-0.022455671802163124],[-0.18098275363445282,0.11436683684587479],[-0.1834537386894226,-0.20969991385936737]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05654461309313774,0.24970440566539764,0.7047312259674072],"rotation":[-0.014767204411327839,-0.9862425923347473,0.008059973828494549,0.16444605588912964],"used":true,"bodyHandle":4.02e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.013214883394539356,-0.1563471406698227],[0.06357172131538391,-0.1657121479511261],[-0.0022043141070753336,-0.05861187353730202],[-0.3606985807418823,0.10812029987573624],[-0.19507355988025665,-0.03789215907454491],[0.0467979721724987,0.06472937017679214],[-0.08314328640699387,-0.13028742372989655],[-0.04938910901546478,-0.2681087255477905],[0.08008149266242981,-0.22629788517951965],[0.03088410757482052,-0.24040739238262177]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.060680586844682693,0.2518772780895233,0.6329792737960815],"rotation":[0.02509484812617302,0.32235559821128845,0.003674773033708334,-0.9462788105010986],"used":true,"bodyHandle":4.027e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.3146342635154724,0.17313213646411896],[-0.23919503390789032,0.42119765281677246],[-0.19794833660125732,0.1914375275373459],[-0.2086082100868225,0.07032174617052078],[-0.2453538179397583,0.02449609339237213],[-0.22533784806728363,0.09006898105144501],[0.3501626253128052,0.045714471489191055],[0.012898111715912819,0.3047945201396942],[-0.1315160095691681,0.009262737818062305],[0.14639857411384583,-0.19809481501579285]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0020408376585692167,0.2518855333328247,0.6721251010894775],"rotation":[-0.03099198080599308,-0.3338278830051422,-0.006842498667538166,-0.9420995712280273],"used":true,"bodyHandle":4.03e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.1818232536315918,-0.03128305822610855],[-0.3710375428199768,0.38991180062294006],[-0.032522402703762054,0.1585640162229538],[0.042351964861154556,-0.049386028200387955],[0.18975669145584106,0.17795298993587494],[-0.2449006289243698,-0.23709091544151306],[0.03687300533056259,-0.0889916718006134],[0.03247962146997452,0.00597748439759016],[0.14868830144405365,-0.01841009594500065],[0.22644072771072388,0.21655061841011047]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06290537118911743,0.2548059821128845,0.6347276568412781],"rotation":[0.00614967243745923,0.32743123173713684,0.0013845567591488361,-0.9448539018630981],"used":true,"bodyHandle":4.037e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.25772687792778015,0.10811160504817963],[-0.25466737151145935,0.2606813609600067],[-0.20535962283611298,0.08247474581003189],[-0.1345507651567459,0.09041371196508408],[-0.2298724204301834,0.0015376792289316654],[-0.19435809552669525,0.190106600522995],[0.2207261621952057,0.06338314712047577],[-0.05297253280878067,0.19631250202655792],[-0.15931612253189087,0.20671337842941284],[0.17244182527065277,-0.22026997804641724]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05768776684999466,0.2535955607891083,0.7036310434341431],"rotation":[-0.01773442141711712,-0.8686610460281372,0.0008647226495668292,0.49508872628211975],"used":true,"bodyHandle":4.04e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.02563253417611122,-0.19420449435710907],[0.10213171690702438,-0.1609148532152176],[0.06688330322504044,-0.15707676112651825],[-0.410074383020401,0.19025635719299316],[-0.19561828672885895,0.005556393414735794],[0.052183378487825394,0.09826819598674774],[-0.11790566146373749,-0.1465211659669876],[-0.057841334491968155,-0.27430206537246704],[0.0473640114068985,-0.21773302555084229],[0.02737383358180523,-0.2414790242910385]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0019204471027478576,0.2544707655906677,0.7402856945991516],"rotation":[-0.014408032409846783,-0.9371649622917175,-0.004235937725752592,-0.3485632538795471],"used":true,"bodyHandle":4.046e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.041700538247823715,-0.23931187391281128],[-0.06553478538990021,0.12840351462364197],[-0.20475488901138306,0.09265877306461334],[0.2936365604400635,-0.1408490687608719],[0.09039987623691559,-0.07835503667593002],[-0.21153399348258972,0.10478240996599197],[-0.23033186793327332,0.028563523665070534],[-0.16750283539295197,-0.029009172692894936],[-0.18703168630599976,0.12254539877176285],[-0.23920825123786926,-0.2411244958639145]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06078007072210312,0.255446195602417,0.7061247825622559],"rotation":[0.004227351397275925,-0.8035630583763123,0.0208885557949543,-0.5948379039764404],"used":true,"bodyHandle":4.05e-321,"linearSpeed":0,"angularVelocityHistory":[[0.2413206845521927,-0.10016965866088867],[-0.058925870805978775,-0.11222245544195175],[0.08115958422422409,-0.14080798625946045],[0.00678583700209856,-0.25885462760925293],[-0.13726331293582916,-0.07439596951007843],[-0.22121381759643555,-0.06381069123744965],[-0.07888637483119965,-0.21359026432037354],[0.27033162117004395,-0.19760644435882568],[0.10894785821437836,-0.0261954627931118],[0.24175545573234558,-0.12340737134218216]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06049126386642456,0.2542293965816498,0.6370752453804016],"rotation":[0.023416602984070778,-0.9719294309616089,-0.015360464341938496,-0.23359954357147217],"used":true,"bodyHandle":4.056e-321,"linearSpeed":0,"angularVelocityHistory":[[0.0862455815076828,0.07807034254074097],[0.3523459732532501,0.29900941252708435],[0.037857819348573685,0.3777942657470703],[-0.04808114469051361,0.05488675460219383],[-0.03244803845882416,0.0848977118730545],[0.15091116726398468,-0.1049312949180603],[0.41426873207092285,0.004789697006344795],[0.09219127148389816,0.1866852045059204],[-0.17038166522979736,-0.12191835045814514],[-0.05618461221456528,-0.06820535659790039]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0010385285131633282,0.2561846077442169,0.672496497631073],"rotation":[0.0260757002979517,-0.47065094113349915,-0.019799411296844482,0.8817118406295776],"used":true,"bodyHandle":4.06e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.21190215647220612,0.01318556908518076],[-0.2510233223438263,0.18864482641220093],[-0.00013434182619675994,0.043322548270225525],[0.0025344458408653736,-0.08506587892770767],[0.06074955314397812,-0.10873404890298843],[-0.2820743918418884,-0.08018023520708084],[-0.028003979474306107,-0.069784976541996],[-0.0018027372425422072,0.02137337252497673],[0.09882562607526779,0.05367167294025421],[0.18758819997310638,0.39485815167427063]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.001398265827447176,0.25618648529052734,0.6009871959686279],"rotation":[-0.005341391544789076,-0.47185543179512024,-0.010617244057357311,0.8815957903862],"used":true,"bodyHandle":4.066e-321,"linearSpeed":0,"angularVelocityHistory":[[0.08842948824167252,-0.05896960198879242],[-0.08197741210460663,-0.04401332139968872],[0.027850499376654625,-0.03355182707309723],[0.02171649970114231,-0.0742882788181305],[-0.012713720090687275,0.24398937821388245],[-0.046077653765678406,0.08031465113162994],[0.07942315191030502,0.06816516071557999],[-0.10138542205095291,0.14582501351833344],[-0.24355068802833557,-0.035737600177526474],[-0.2500021159648895,-0.25774332880973816]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05852992460131645,0.25735217332839966,0.6350333094596863],"rotation":[0.013534202240407467,-0.2372310906648636,0.02621605433523655,0.9710051417350769],"used":true,"bodyHandle":4.07e-321,"linearSpeed":0,"angularVelocityHistory":[[0.0979408472776413,0.08892618119716644],[0.27496573328971863,0.11623489856719971],[-0.03495843708515167,0.2534860074520111],[-0.07361744344234467,0.06642406433820724],[-0.14248056709766388,0.04947486147284508],[0.10572938621044159,-0.11553865671157837],[0.24606110155582428,-0.07935801893472672],[0.101841039955616,0.09414109587669373],[-0.13227690756320953,-0.05910787358880043],[-0.0493902713060379,0.04915750026702881]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0611761137843132,0.2590356469154358,0.7039137482643127],"rotation":[-0.011781563051044941,-0.9337254762649536,0.010694652795791626,0.3576360046863556],"used":true,"bodyHandle":4.076e-321,"linearSpeed":0,"angularVelocityHistory":[[0.15918868780136108,-0.07284905016422272],[-0.027330070734024048,-0.08839654922485352],[0.06856828927993774,-0.1789419800043106],[0.11010964959859848,-0.2657729983329773],[-0.15961512923240662,-0.07071840018033981],[-0.28678813576698303,-0.04856463894248009],[-0.043355897068977356,-0.18918476998806],[0.39549142122268677,-0.21461844444274902],[0.016266101971268654,-0.05727072060108185],[0.18976791203022003,-0.10410156100988388]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.002026662928983569,0.25755730271339417,0.7405794858932495],"rotation":[0.00024239387130364776,-0.5199230909347534,-0.00765016907826066,-0.854178786277771],"used":true,"bodyHandle":4.08e-321,"linearSpeed":0,"angularVelocityHistory":[[0.02211320400238037,-0.27003708481788635],[-0.00524318078532815,0.11379995197057724],[-0.21712982654571533,0.12383334338665009],[0.2488817423582077,-0.008035890758037567],[0.08047576248645782,-0.04061048850417137],[-0.21931380033493042,0.15694566071033478],[-0.21545793116092682,0.010081488639116287],[-0.12289846688508987,-0.05320955067873001],[-0.2075340896844864,0.12750710546970367],[-0.13847482204437256,-0.2570919096469879]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05759754031896591,0.25652626156806946,0.7034794688224792],"rotation":[-0.02258751168847084,-0.8410674929618835,0.006813706364482641,0.5404154062271118],"used":true,"bodyHandle":4.086e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.05685572326183319,-0.23674674332141876],[-0.018930485472083092,-0.17880700528621674],[0.07251039892435074,-0.12500782310962677],[-0.22757820785045624,0.017185095697641373],[-0.1717028170824051,-0.09732497483491898],[0.0499902218580246,-0.00925944373011589],[-0.06980793178081512,-0.16602908074855804],[-0.01646573282778263,-0.26003724336624146],[0.03774256259202957,-0.27687934041023254],[0.012093539349734783,-0.2598147392272949]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0016941088251769543,0.25951269268989563,0.6008203029632568],"rotation":[0.011744472198188305,0.6198297739028931,0.008069979026913643,-0.7846068739891052],"used":true,"bodyHandle":4.09e-321,"linearSpeed":0,"angularVelocityHistory":[[0.08582399785518646,-0.12232756614685059],[-0.07485146820545197,-0.043907281011343],[-0.013645508326590061,-0.062104396522045135],[0.007268093526363373,-0.017138361930847168],[0.07825715839862823,0.19288356602191925],[-0.07384765893220901,0.08115778863430023],[0.05759260058403015,0.08970589935779572],[-0.10507769882678986,0.21746061742305756],[-0.2267238199710846,0.023148810490965843],[-0.26430532336235046,-0.25465065240859985]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05877816677093506,0.26432764530181885,0.6352866291999817],"rotation":[0.009749664925038815,-0.038903772830963135,0.029997918754816055,0.9987450242042542],"used":true,"bodyHandle":4.096e-321,"linearSpeed":0,"angularVelocityHistory":[[0.10482392460107803,0.11878867447376251],[0.2568117380142212,0.13906888663768768],[-0.0007651832420378923,0.25852981209754944],[-0.04099820554256439,0.06804744899272919],[-0.11548775434494019,0.09102214127779007],[0.11182934045791626,-0.0996766984462738],[0.2858692407608032,-0.05195094272494316],[0.1094084084033966,0.11300838738679886],[-0.006381205748766661,0.04167323186993599],[0.009683854877948761,0.10605284571647644]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06134776026010513,0.26557615399360657,0.7040505409240723],"rotation":[-0.015571839176118374,-0.6257336139678955,0.005479313898831606,0.7798620462417603],"used":true,"bodyHandle":4.1e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.2876490354537964,0.02385803870856762],[-0.16635818779468536,-0.07266397774219513],[-0.09273476153612137,0.02263627201318741],[-0.1013355702161789,-0.15820127725601196],[-0.16019673645496368,-0.13135333359241486],[-0.28288590908050537,-0.04413136467337608],[-0.14860586822032928,-0.19666773080825806],[0.34671902656555176,-0.15646250545978546],[-0.07520905882120132,-0.13486281037330627],[-0.029414743185043335,-0.15550093352794647]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.002183944685384631,0.26463964581489563,0.7409525513648987],"rotation":[0.0016595965716987848,-0.7886069416999817,-0.011864895932376385,-0.6147809028625488],"used":true,"bodyHandle":4.106e-321,"linearSpeed":0,"angularVelocityHistory":[[0.03977902978658676,-0.26088017225265503],[0.011840783059597015,-0.0030946400947868824],[0.004778561182320118,0.1377796232700348],[0.2435380220413208,-0.07650642096996307],[0.06747625023126602,-0.04972461983561516],[-0.13987483084201813,0.055391669273376465],[-0.2262304127216339,0.043497029691934586],[-0.13985653221607208,-0.055893536657094955],[-0.2751609683036804,0.09126938879489899],[-0.12203173339366913,-0.3359321653842926]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.05831005796790123,0.26372432708740234,0.7032611966133118],"rotation":[0.005677015520632267,-0.8253738284111023,0.019504236057400703,-0.5642209649085999],"used":true,"bodyHandle":4.11e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.07531967759132385,-0.20980186760425568],[-0.009943616576492786,-0.1593003123998642],[0.05368230119347572,-0.10114093869924545],[-0.2457796186208725,0.01722181960940361],[-0.13206787407398224,-0.10845015943050385],[0.009018119424581528,-0.015715738758444786],[-0.050813108682632446,-0.17313560843467712],[-0.0062598614022135735,-0.27001094818115234],[0.019437113776803017,-0.25599589943885803],[0.005994478240609169,-0.22476127743721008]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06168492138385773,0.26557284593582153,0.6333471536636353],"rotation":[0.018928250297904015,0.08810649067163467,0.01328032836318016,-0.995842695236206],"used":true,"bodyHandle":4.116e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.13278897106647491,0.16320154070854187],[-0.147096648812294,0.30788975954055786],[-0.17996568977832794,0.08437571674585342],[-0.11468739807605743,0.04185808449983597],[0.07968071103096008,-0.03624188154935837],[-0.1757320761680603,0.027183063328266144],[0.037061966955661774,-0.11780410259962082],[-0.10365898907184601,-0.12181199342012405],[-0.16903753578662872,0.22330042719841003],[0.16982604563236237,-0.31483256816864014]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.39952632784843445,0.17401747405529022,0.8189302086830139],"rotation":[0.005783822387456894,0.183468297123909,-0.004843884147703648,0.9829967021942139],"used":true,"bodyHandle":4.12e-321,"linearSpeed":6.715167375914157e-7,"angularVelocityHistory":[[-0.006336299702525139,-0.0017452785978093743],[-0.007849453948438168,0.0003766983572859317],[-0.013980812393128872,0.00005456155486172065],[-0.002382677746936679,-0.000500180758535862],[-0.010219271294772625,0.004215652123093605],[-0.013769279234111309,0.0027135475538671017],[0.007323219906538725,0.005958680994808674],[-0.0029937683138996363,0.015826543793082237],[-0.0071796271950006485,-0.0007813749834895134],[-0.0014457297511398792,0.0019674927461892366],[-0.01430620439350605,0.000603352440521121]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4000677466392517,0.17000924050807953,0.770033061504364],"rotation":[-0.0010867117671296,0.008714227937161922,-0.000874832272529602,0.9999610185623169],"used":true,"bodyHandle":4.125e-321,"linearSpeed":0,"angularVelocityHistory":[[0.01766364276409149,0.014476233161985874],[0.02131902240216732,-0.07955862581729889],[0.016270169988274574,-0.012517738156020641],[0.032557860016822815,0.04090163856744766],[0.01658455654978752,0.01424359530210495],[0.12407591193914413,-0.05003514885902405],[0.017946159467101097,-0.048156432807445526],[0.010009354911744595,-0.007737667299807072],[-0.010436699725687504,-0.00603782432153821],[-0.020154180005192757,0.013873995281755924]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0008806877885945141,0.26619991660118103,0.6723821759223938],"rotation":[-0.024517087265849113,-0.40879276394844055,-0.010690836235880852,-0.9122352004051208],"used":true,"bodyHandle":4.13e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.18246883153915405,0.12886948883533478],[-0.3692525029182434,0.2956351935863495],[-0.12428227066993713,0.200693279504776],[-0.10430429130792618,-0.024383701384067535],[-0.035919733345508575,-0.07897990196943283],[0.11426687985658646,-0.05507291480898857],[0.19160300493240356,-0.08447720110416412],[0.08243529498577118,0.03332778811454773],[0.013371647335588932,-0.009428287856280804],[0.1801464557647705,0.12920744717121124]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.40029385685920715,0.17131584882736206,0.7699912786483765],"rotation":[-0.00020938314264640212,0.014763841405510902,0.0013183701084926724,0.999890148639679],"used":true,"bodyHandle":4.135e-321,"linearSpeed":0,"angularVelocityHistory":[[0.07412546128034592,0.06757951527833939],[0.04158589243888855,-0.06088566780090332],[0.009647497907280922,-0.018032420426607132],[0.06434538960456848,0.017647068947553635],[0.019989412277936935,0.015057212673127651],[0.05005476251244545,-0.040683649480342865],[-0.0005357560585252941,-0.018119093030691147],[0.014948070049285889,-0.00021851183555554599],[0.00827844999730587,-0.005907858721911907],[0.0015609097899869084,-0.010218368843197823]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3951965272426605,0.1790175586938858,0.8231516480445862],"rotation":[0.01712251454591751,0.17974403500556946,-0.014747118577361107,0.9834538102149963],"used":true,"bodyHandle":4.14e-321,"linearSpeed":2.595706650967456e-7,"angularVelocityHistory":[[-0.011570543982088566,-0.02081097476184368],[0.02139138989150524,0.01707804575562477],[0.022183774039149284,-0.0085639338940382],[0.03159160912036896,-0.02178090624511242],[0.01936623826622963,-0.027856098487973213],[-0.012217625975608826,-0.008517547510564327],[0.00778422225266695,0.04279310628771782],[0.06723549216985703,0.06394093483686447],[0.016343532130122185,0.003611130639910698],[0.0013138367794454098,-0.040740590542554855],[0.009626276791095734,0.015458952635526657]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0018397083040326834,0.26699569821357727,0.6007435321807861],"rotation":[-0.0037023501936346292,-0.47613587975502014,0.012835804373025894,-0.8792701959609985],"used":true,"bodyHandle":4.145e-321,"linearSpeed":0,"angularVelocityHistory":[[0.024609792977571487,-0.10713589936494827],[-0.05703616142272949,-0.03287611901760101],[-0.02554222010076046,-0.0317300483584404],[-0.038777921348810196,0.09239219129085541],[0.11182180792093277,-0.07727410644292831],[-0.0884597897529602,0.11245860159397125],[0.07109016925096512,-0.11632353812456131],[0.008738446980714798,0.17756469547748566],[-0.058991145342588425,0.025758935138583183],[-0.11728178709745407,-0.1795581579208374]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3932570517063141,0.18424361944198608,0.8265234231948853],"rotation":[0.023561812937259674,0.17936842143535614,-0.019184865057468414,0.9833126664161682],"used":true,"bodyHandle":4.15e-321,"linearSpeed":4.56607418188821e-7,"angularVelocityHistory":[[-0.00866631232202053,-0.022378673776984215],[0.07919450849294662,0.019145743921399117],[0.06662378460168839,-0.02351924031972885],[0.039076704531908035,-0.011524800211191177],[0.02878759801387787,-0.02245846763253212],[-0.00885472260415554,-0.009134350344538689],[0.044817522168159485,0.073637455701828],[0.065461665391922,0.06264995783567429],[0.04978358745574951,0.0062735797837376595],[0.0033211021218448877,-0.03467032313346863],[0.04883677139878273,0.035881783813238144]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.40098151564598083,0.17352867126464844,0.7705320119857788],"rotation":[-0.005462693981826305,0.0010791412787511945,0.000805957242846489,0.9999841451644897],"used":true,"bodyHandle":4.155e-321,"linearSpeed":0,"angularVelocityHistory":[[0.01663082279264927,-0.030669409781694412],[0.03161513805389404,-0.09295028448104858],[0.027500959113240242,-0.009998627007007599],[0.0916229635477066,0.050293583422899246],[-0.00029434674070216715,0.009943949989974499],[0.1704736202955246,-0.083281010389328],[0.028301715850830078,-0.07728199660778046],[0.021519126370549202,-0.002678187098354101],[-0.008661970496177673,-0.007636530324816704],[-0.022458305582404137,0.01110234297811985]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06172944977879524,0.26855170726776123,0.6331753730773926],"rotation":[0.0154024139046669,-0.01738465577363968,0.013636447489261627,-0.9996371865272522],"used":true,"bodyHandle":4.16e-321,"linearSpeed":0,"angularVelocityHistory":[[0.00435348367318511,0.048944439738988876],[-0.11621908843517303,0.10744409263134003],[-0.18456515669822693,0.046210601925849915],[-0.1063624694943428,0.06227800250053406],[0.162444606423378,-0.02777518332004547],[-0.24186144769191742,0.030628517270088196],[-0.1565350443124771,0.025189606472849846],[-0.18810619413852692,-0.2043105810880661],[-0.1814165860414505,0.21759139001369476],[0.11533646285533905,-0.2824162244796753]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.058355242013931274,0.26756080985069275,0.7030739784240723],"rotation":[0.017468852922320366,-0.12100585550069809,0.004745909944176674,-0.9924867153167725],"used":true,"bodyHandle":4.165e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.11582289636135101,-0.15134406089782715],[-0.08889409899711609,-0.15080267190933228],[-0.18121236562728882,-0.15657153725624084],[-0.1601918637752533,-0.13035516440868378],[-0.09149173647165298,-0.20639441907405853],[-0.08608784526586533,-0.14395809173583984],[-0.009846583940088749,-0.16244342923164368],[0.001696089282631874,-0.24921070039272308],[-0.09193437546491623,-0.2715396285057068],[-0.07239142060279846,-0.248591348528862]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.38746926188468933,0.1893717646598816,0.8305128812789917],"rotation":[0.025803597643971443,0.162820965051651,-0.022856369614601135,0.9860532879829407],"used":true,"bodyHandle":4.17e-321,"linearSpeed":4.1783203902391144e-7,"angularVelocityHistory":[[-0.01571083255112171,-0.02523096278309822],[0.07895385473966599,0.022451957687735558],[0.07081976532936096,-0.021501628682017326],[0.047440044581890106,-0.04003027081489563],[0.05398555472493172,-0.03640279173851013],[0.006063790991902351,-0.018080735579133034],[0.04399057477712631,0.07253281027078629],[0.09404082596302032,0.06024538353085518],[0.05393090844154358,0.007402930874377489],[-0.003363115480169654,-0.06517651677131653],[0.047947876155376434,0.0349920280277729]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3998414874076843,0.1753968596458435,0.7688291072845459],"rotation":[0.003287804778665304,0.025013647973537445,-0.004144328646361828,0.9996731281280518],"used":true,"bodyHandle":4.175e-321,"linearSpeed":0,"angularVelocityHistory":[[0.09931764006614685,0.09834609925746918],[-0.02174062281847,-0.06933514028787613],[0.02752242423593998,-0.0026247173082083464],[0.06020704284310341,0.039283737540245056],[0.02475198172032833,0.016711486503481865],[0.03176908940076828,-0.05197537690401077],[0.11263146251440048,-0.1032409518957138],[0.02248811163008213,-0.0032653838861733675],[-0.04832455515861511,0.0023013288155198097],[0.029899001121520996,0.1868656873703003]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.002094640862196684,0.2685854434967041,0.7411749362945557],"rotation":[0.014413229189813137,-0.9869956374168396,-0.007739795371890068,0.15991254150867462],"used":true,"bodyHandle":4.18e-321,"linearSpeed":0,"angularVelocityHistory":[[0.049515433609485626,-0.20536373555660248],[0.1318322718143463,-0.08310399204492569],[0.1769811362028122,0.07180378586053848],[0.13115721940994263,-0.2065383940935135],[0.0575391985476017,0.04401664808392525],[-0.0898895338177681,0.031912803649902344],[-0.1689455807209015,0.04604760557413101],[-0.12278253585100174,-0.07034299522638321],[-0.13562361896038055,0.06614988297224045],[-0.09764020144939423,-0.1527203619480133]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.185e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.40008631348609924,0.17984311282634735,0.7681150436401367],"rotation":[0.010090847499668598,0.03442218154668808,-0.0070344521664083,0.9993316531181335],"used":true,"bodyHandle":4.19e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.4818994998931885,0.062308114022016525],[-0.32728245854377747,-0.1287010759115219],[-0.1499820351600647,-0.1809554100036621],[-0.12135845422744751,0.032794248312711716],[0.072779081761837,0.0029864890966564417],[0.28989458084106445,-0.006296835374087095],[0.21388614177703857,-0.020615462213754654],[0.1541772335767746,-0.18049666285514832],[0.08883153647184372,-0.03653046116232872],[0.11879519373178482,0.049296047538518906]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.061333805322647095,0.2694244384765625,0.7038529515266418],"rotation":[-0.018366705626249313,-0.5204203128814697,0.0041816760785877705,0.8537024259567261],"used":true,"bodyHandle":4.195e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.1200723946094513,0.029023485258221626],[-0.19368614256381989,0.12585264444351196],[-0.11012493073940277,0.07656857371330261],[-0.18402957916259766,-0.08088011294603348],[-0.15501093864440918,-0.2179407775402069],[-0.25825703144073486,-0.032940421253442764],[-0.2201303392648697,-0.1671956479549408],[0.2580389976501465,-0.09679551422595978],[-0.1686684787273407,-0.054616451263427734],[-0.10384886711835861,-0.1288243532180786]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3799377381801605,0.1943088173866272,0.8391389846801758],"rotation":[0.028822075575590134,0.18373577296733856,-0.02308334782719612,0.9822818636894226],"used":true,"bodyHandle":4.2e-321,"linearSpeed":0.000001990899629704839,"angularVelocityHistory":[[-0.015670856460928917,-0.025925287976861],[0.11009898781776428,0.016605904325842857],[0.08311798423528671,-0.028038639575242996],[0.06063855066895485,-0.04240278899669647],[0.058680422604084015,-0.03544097766280174],[0.0015583845088258386,-0.02116336114704609],[0.06827778369188309,0.07228722423315048],[0.1267535239458084,0.04312850534915924],[0.06373622268438339,0.010601447895169258],[0.006533521227538586,-0.06514079123735428],[0.06361311674118042,0.03891189768910408]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.40024635195732117,0.1786346435546875,0.7682155966758728],"rotation":[0.03762774541974068,0.04170786961913109,-0.010430225171148777,0.9983665347099304],"used":true,"bodyHandle":4.204e-321,"linearSpeed":0,"angularVelocityHistory":[[-1.7003462314605713,0.033138539642095566],[-1.4908034801483154,-0.2731180787086487],[-1.3924596309661865,-0.36253470182418823],[-1.3470607995986938,-0.1981136053800583],[0.10091276466846466,0.012431883253157139],[0.34374111890792847,0.02802981063723564],[0.2663176953792572,-0.06610362976789474],[0.21379423141479492,-0.14553774893283844],[0.09528879076242447,-0.03476651385426521],[0.18590351939201355,-0.03213324770331383]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.057939305901527405,0.2681538164615631,0.6356489062309265],"rotation":[0.024834688752889633,-0.4348081946372986,0.023797281086444855,0.899865984916687],"used":true,"bodyHandle":4.21e-321,"linearSpeed":0,"angularVelocityHistory":[[0.08131955564022064,0.09672266244888306],[0.19449248909950256,0.0786619484424591],[-0.01665949821472168,0.1500108689069748],[-0.05406227335333824,0.14363090693950653],[-0.12114832550287247,0.05809548869729042],[0.1267847716808319,0.02389407716691494],[0.16110801696777344,0.06641357392072678],[0.15072771906852722,0.009130259975790977],[-0.04988616332411766,0.048786863684654236],[-0.020074905827641487,0.13919535279273987]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.214e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.00038506623241119087,0.2690694332122803,0.6730350255966187],"rotation":[0.02280808798968792,-0.28685033321380615,-0.00502384128049016,0.9576906561851501],"used":true,"bodyHandle":4.22e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.058149855583906174,0.10873901098966599],[-0.24289646744728088,0.1661437600851059],[-0.16988718509674072,0.160064235329628],[-0.20621834695339203,0.0030659171752631664],[-0.19808916747570038,0.10817747563123703],[0.045897867530584335,0.025804627686738968],[0.09167537093162537,-0.10905192792415619],[-0.04866688698530197,0.05882781744003296],[-0.010827791877090931,0.04095487669110298],[0.08966263383626938,0.17383447289466858]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3994872570037842,0.1763942539691925,0.7679312825202942],"rotation":[-0.008830571547150612,0.04672227054834366,0.003629865124821663,0.9988622665405273],"used":true,"bodyHandle":4.224e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.05772723630070686,-0.040124937891960144],[-0.18904466927051544,-0.20085889101028442],[0.01858278550207615,-0.1696023941040039],[-0.1316550374031067,0.07675598561763763],[0.07743286341428757,0.0062129320576786995],[0.021409684792160988,-0.13898371160030365],[0.2441682368516922,-0.088394396007061],[0.029545877128839493,-0.03804441913962364],[0.022495608776807785,-0.0041780914179980755],[-0.14423884451389313,0.0971354991197586]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.23e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0019500539638102055,0.27117493748664856,0.6006806492805481],"rotation":[0.00769109046086669,0.7821848392486572,-0.006681701634079218,0.6229631304740906],"used":true,"bodyHandle":4.234e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.000777432753238827,-0.1048826351761818],[-0.04070495069026947,-0.04092443734407425],[-0.021309126168489456,-0.03020208328962326],[-0.06488563120365143,0.11342215538024902],[0.09856166690587997,-0.11696336418390274],[-0.10464277118444443,0.1001218929886818],[0.07242781668901443,-0.15977734327316284],[0.02216770313680172,0.1206381767988205],[0.026319533586502075,0.014535486698150635],[-0.04375377297401428,-0.14876720309257507]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.40029633045196533,0.18403036892414093,0.7687955498695374],"rotation":[0.02267468348145485,0.04875579848885536,0.0012644529342651367,0.9985524415969849],"used":true,"bodyHandle":4.24e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.4752196669578552,-0.01083408109843731],[-0.3721126616001129,-0.12375478446483612],[-0.074357770383358,-0.22517846524715424],[-0.010908704251050949,-0.09716054052114487],[0.08633464574813843,-0.004239774774760008],[0.5331320762634277,0.13944712281227112],[0.2625230848789215,0.0037163482047617435],[0.17838440835475922,-0.2116243988275528],[0.14582559466362,-0.006985851097851992],[0.313495397567749,-0.06970501691102982]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.057971592992544174,0.2723331153392792,0.635434091091156],"rotation":[0.03523365780711174,-0.9886481165885925,-0.0076682246290147305,0.14585813879966736],"used":true,"bodyHandle":4.244e-321,"linearSpeed":0,"angularVelocityHistory":[[0.0972527414560318,0.10260289162397385],[0.18928728997707367,0.08416232466697693],[-0.01568346470594406,0.15967990458011627],[-0.07960695028305054,0.01629074104130268],[-0.12652285397052765,0.06141006201505661],[0.10160133242607117,-0.019485848024487495],[0.11472612619400024,-0.03548938035964966],[0.1480022668838501,0.039465244859457016],[0.15891820192337036,0.14475135505199432],[-0.00918310135602951,0.15402351319789886]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.25e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.39979544281959534,0.18256761133670807,0.7707770466804504],"rotation":[0.018081948161125183,0.049078479409217834,0.003305419348180294,0.9986257553100586],"used":true,"bodyHandle":4.254e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.39948761463165283,0.1414186954498291],[-0.32597193121910095,-0.1453828066587448],[-0.3136492967605591,-0.2771981954574585],[-0.08385060727596283,0.05510496348142624],[0.08533687144517899,0.019763976335525513],[0.32985809445381165,0.03173244744539261],[0.20533399283885956,-0.024315383285284042],[0.06987608224153519,-0.01753167435526848],[0.07361903786659241,-0.018528113141655922],[0.022588415071368217,0.0958770141005516]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06111108511686325,0.2743188738822937,0.7034912705421448],"rotation":[-0.012109797447919846,-0.9221850633621216,0.010507737286388874,0.3864165246486664],"used":true,"bodyHandle":4.26e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.08406750857830048,0.015925707295536995],[-0.200401172041893,0.13094308972358704],[-0.12804727256298065,0.07595901936292648],[-0.1941670924425125,-0.0738375335931778],[-0.14261876046657562,-0.19637659192085266],[-0.2564132809638977,-0.03368019312620163],[-0.23197892308235168,-0.15164516866207123],[0.27372244000434875,-0.12960760295391083],[-0.15965571999549866,-0.038650207221508026],[-0.08742129802703857,-0.17271161079406738]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.264e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.40016359090805054,0.18509288132190704,0.7697677612304688],"rotation":[0.0019166468409821391,0.058243267238140106,-0.004155170172452927,0.9982919096946716],"used":true,"bodyHandle":4.27e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.6082627773284912,-0.10114742070436478],[-0.32727718353271484,-0.09458093345165253],[-0.13686983287334442,-0.16011306643486023],[-0.02337506227195263,0.004186603240668774],[0.11100558191537857,0.02555389702320099],[0.4566643536090851,0.06933987885713577],[0.20299500226974487,-0.022095056250691414],[0.14173108339309692,-0.098227359354496],[0.09879328310489655,-0.03243698179721832],[0.1774391382932663,-0.040310923010110855]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0019159761723130941,0.27282658219337463,0.7411984801292419],"rotation":[0.015748202800750732,-0.9881978034973145,-0.009097510948777199,0.15209974348545074],"used":true,"bodyHandle":4.274e-321,"linearSpeed":0,"angularVelocityHistory":[[0.09417588263750076,-0.04593989625573158],[0.1919950395822525,-0.1740451604127884],[0.2508046627044678,0.02908196486532688],[0.02572987973690033,-0.22687485814094543],[0.032598622143268585,0.14968371391296387],[0.02333194576203823,-0.005532747134566307],[-0.024255050346255302,0.022129807621240616],[-0.03896830976009369,-0.04568767920136452],[0.06316772103309631,-0.01018146239221096],[-0.01233647484332323,0.16245578229427338]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.28e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.40024325251579285,0.1880444586277008,0.7712181806564331],"rotation":[0.015666231513023376,0.052591096609830856,-0.012205669656395912,0.9984186291694641],"used":true,"bodyHandle":4.284e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.46645811200141907,0.07170237600803375],[-0.3941229283809662,-0.14030513167381287],[-0.13472729921340942,-0.22045190632343292],[-0.05688802897930145,-0.07390017807483673],[0.11224265396595001,-0.002744644181802869],[0.39054155349731445,0.04894842579960823],[0.23459358513355255,0.0019449112005531788],[0.14459733664989471,-0.2241894155740738],[0.14619502425193787,-0.056818220764398575],[0.406004399061203,-0.07172615081071854]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.058275796473026276,0.272021621465683,0.703113317489624],"rotation":[0.017141122370958328,-0.12027820199728012,0.004793066065758467,-0.9925806522369385],"used":true,"bodyHandle":4.29e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.12330153584480286,-0.13623034954071045],[-0.08949713408946991,-0.17151309549808502],[-0.18310967087745667,-0.16529378294944763],[-0.14472508430480957,-0.14394183456897736],[-0.08994587510824203,-0.20398928225040436],[-0.06269451230764389,-0.08878155052661896],[0.06645575165748596,-0.09737122058868408],[0.000853652018122375,-0.09116414189338684],[-0.04923076927661896,-0.15893132984638214],[-0.0008687214576639235,-0.10480846464633942]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.293e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.40078863501548767,0.18956591188907623,0.771773099899292],"rotation":[0.008040150627493858,0.04213681444525719,-0.003897469723597169,0.9990718960762024],"used":true,"bodyHandle":4.3e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.5303837060928345,0.011427903547883034],[-0.42143315076828003,0.06320885568857193],[-0.1895476132631302,-0.21999330818653107],[-0.1389661431312561,-0.10169391334056854],[0.09088044613599777,-0.05230758339166641],[0.2811689078807831,0.07267840951681137],[0.2284727841615677,0.021657569333910942],[0.15949732065200806,-0.19527368247509003],[0.16314697265625,-0.0835755243897438],[0.36905357241630554,-0.063468337059021]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.060700058937072754,0.2727189362049103,0.6331082582473755],"rotation":[0.00015412190987262875,-0.7239391803741455,0.017900172621011734,-0.6896315217018127],"used":true,"bodyHandle":4.303e-321,"linearSpeed":0,"angularVelocityHistory":[[0.09847386181354523,-0.12924028933048248],[-0.11074670404195786,-0.0686364471912384],[-0.13027529418468475,-0.02183188870549202],[-0.25346148014068604,0.06610625982284546],[0.12989124655723572,0.03307882696390152],[-0.11860444396734238,0.023718927055597305],[-0.4063740372657776,0.26480287313461304],[-0.13812287151813507,-0.08088205009698868],[-0.1986507773399353,0.23798340559005737],[0.03029320016503334,-0.21891959011554718]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4003233015537262,0.19141168892383575,0.7710139751434326],"rotation":[0.010689467191696167,0.046166833490133286,-0.008981682360172272,0.998836100101471],"used":true,"bodyHandle":4.31e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.44400861859321594,0.020243985578417778],[-0.34491080045700073,0.2585083246231079],[-0.14989858865737915,-0.14271900057792664],[-0.049202729016542435,-0.06244952231645584],[0.06526821106672287,-0.09047314524650574],[0.43289637565612793,-0.014664958231151104],[0.23513548076152802,0.030888468027114868],[0.20373907685279846,-0.24218294024467468],[0.12419896572828293,-0.04846562072634697],[0.21881529688835144,-0.1557685285806656]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.313e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.39984914660453796,0.19338177144527435,0.7699991464614868],"rotation":[0.02704356424510479,0.04451211541891098,-0.007504941895604134,0.9986145496368408],"used":true,"bodyHandle":4.32e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.5269528031349182,-0.026279190555214882],[-0.36593693494796753,0.17043502628803253],[-0.18837738037109375,-0.013287635520100594],[-0.14453372359275818,-0.07178127765655518],[0.0615532286465168,-0.07654622197151184],[0.2042829990386963,0.0627850741147995],[0.1728549599647522,0.01928914710879326],[0.06092708557844162,-0.16258104145526886],[0.24698786437511444,-0.07141540199518204],[0.3670577108860016,-0.11917363107204437]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0020832926966249943,0.2740032374858856,0.6710034608840942],"rotation":[-0.01638091914355755,-0.7076851725578308,-0.01814195141196251,-0.7061049342155457],"used":true,"bodyHandle":4.323e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.09036438912153244,0.11478570103645325],[-0.21997343003749847,0.09180863946676254],[-0.16086460649967194,0.1497582048177719],[-0.20777994394302368,-0.04550774767994881],[-0.20033538341522217,0.1417011022567749],[0.04111608862876892,0.05702419951558113],[0.07168968766927719,-0.10434754192829132],[-0.03875253349542618,0.04595223441720009],[-0.062073659151792526,0.013720333576202393],[0.051591042429208755,0.06555832922458649]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.33e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.40170177817344666,0.19663947820663452,0.7715343236923218],"rotation":[0.0066561950370669365,0.055930014699697495,0.002506774850189686,0.9984093308448792],"used":true,"bodyHandle":4.333e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.39256805181503296,0.013773455284535885],[-0.34764859080314636,0.05641508474946022],[-0.09188845753669739,-0.15025915205478668],[-0.1341891586780548,-0.06907442212104797],[0.04455142840743065,-0.06997955590486526],[0.14995676279067993,0.08621726930141449],[0.19072352349758148,-0.0038867101538926363],[0.03687094897031784,-0.15930011868476868],[0.15183484554290771,-0.015510046854615211],[0.3902580440044403,-0.12551403045654297]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0018851696513593197,0.2756950259208679,0.6007642149925232],"rotation":[0.0016662321286275983,0.11734239012002945,0.011457627639174461,-0.9930239915847778],"used":true,"bodyHandle":4.34e-321,"linearSpeed":0,"angularVelocityHistory":[[0.0074141058139503,-0.10379836708307266],[-0.0281990859657526,-0.05446341261267662],[-0.019855080172419548,-0.026470791548490524],[-0.039543602615594864,0.08295411616563797],[0.08091995120048523,-0.11408098042011261],[-0.06604538857936859,0.034141089767217636],[0.05132162570953369,-0.14697478711605072],[0.022463897243142128,0.05904001742601395],[0.004562443122267723,0.0659126341342926],[-0.011042226105928421,-0.1310710459947586]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.343e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3998633921146393,0.19420334696769714,0.7699581980705261],"rotation":[0.0071913753636181355,0.060422930866479874,-0.006700011435896158,0.9981244206428528],"used":true,"bodyHandle":4.35e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.5136166214942932,0.02288946881890297],[-0.40282419323921204,0.07367386668920517],[-0.15534186363220215,-0.18783818185329437],[-0.1531326174736023,-0.059216853231191635],[0.10298354923725128,-0.04481351003050804],[0.25791722536087036,0.013779872097074986],[0.2423768937587738,0.007595713250339031],[0.08592012524604797,-0.18017420172691345],[0.14537183940410614,-0.06275292485952377],[0.3275752067565918,-0.0847184956073761]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06122511625289917,0.2772659361362457,0.6327534317970276],"rotation":[-0.007482647895812988,-0.7866491675376892,0.018812932074069977,-0.6170681118965149],"used":true,"bodyHandle":4.353e-321,"linearSpeed":0,"angularVelocityHistory":[[0.142521932721138,-0.08399736136198044],[-0.08072610199451447,-0.05770087614655495],[-0.05870137736201286,0.03547503799200058],[-0.2687496840953827,0.15556727349758148],[-0.05659442022442818,0.06558503955602646],[-0.08117552101612091,0.11068075895309448],[-0.38190698623657227,0.33207187056541443],[-0.2850906550884247,0.005813801661133766],[-0.10033932328224182,0.286125123500824],[0.14937394857406616,0.17378458380699158]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.36e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3995514214038849,0.19862665235996246,0.7720205187797546],"rotation":[0.010368251241743565,0.06953463703393936,-0.003746358910575509,0.9975185990333557],"used":true,"bodyHandle":4.363e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.27462831139564514,-0.1698623150587082],[-0.3256034553050995,0.044259391725063324],[-0.11291304975748062,-0.16494500637054443],[-0.16354592144489288,-0.07923756539821625],[0.04752461239695549,-0.08657045662403107],[0.17855536937713623,0.03333687409758568],[0.17681054770946503,0.013097336515784264],[0.04013220965862274,-0.17149275541305542],[0.24637599289417267,-0.05340622365474701],[0.376083105802536,-0.12458650767803192]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.058179691433906555,0.27719584107398987,0.7028782367706299],"rotation":[0.01693398877978325,-0.15549597144126892,0.001877748523838818,-0.9876895546913147],"used":true,"bodyHandle":4.37e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.14083604514598846,-0.17438732087612152],[-0.11953406780958176,-0.21796835958957672],[-0.23736627399921417,-0.13015340268611908],[-0.12256654351949692,-0.21217341721057892],[-0.06340345740318298,-0.21607249975204468],[-0.06317877024412155,-0.15766791999340057],[0.05587606132030487,-0.12644273042678833],[0.0034497317392379045,-0.14358018338680267],[-0.049271609634160995,-0.21781261265277863],[0.0036584415938705206,-0.18240909278392792]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4004287123680115,0.2006174772977829,0.7725106477737427],"rotation":[0.010610818862915039,0.05664926394820213,-0.0036460934206843376,0.9983311295509338],"used":true,"bodyHandle":4.372e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.2784881293773651,-0.1466500610113144],[-0.31830042600631714,-0.016448210924863815],[-0.1269635707139969,-0.15962062776088715],[-0.2266402393579483,-0.12619642913341522],[0.10045447200536728,-0.1056143119931221],[0.021375836804509163,0.07776330411434174],[0.16838304698467255,0.005995676852762699],[0.018162628635764122,-0.14010410010814667],[0.25353774428367615,-0.028044410049915314],[0.4076659381389618,-0.1351488083600998]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.377e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0020032869651913643,0.27733752131462097,0.7413256764411926],"rotation":[0.008487005718052387,-0.883014440536499,-0.0194987915456295,-0.46886375546455383],"used":true,"bodyHandle":4.38e-321,"linearSpeed":0,"angularVelocityHistory":[[0.051046982407569885,-0.04348595812916756],[0.16791103780269623,-0.18036554753780365],[0.2362009435892105,0.02431846410036087],[0.042142096906900406,-0.19502539932727814],[0.011877009645104408,0.14719121158123016],[-0.0023918896913528442,-0.0053331865929067135],[-0.025155039504170418,0.022814881056547165],[-0.03801468759775162,-0.04452989622950554],[0.044603753834962845,-0.018456140533089638],[-0.0823371410369873,0.16507169604301453]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4011579155921936,0.20224066078662872,0.7717723250389099],"rotation":[0.0015089215012267232,0.04843011870980263,-0.0012457361444830894,0.9988246560096741],"used":true,"bodyHandle":4.387e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.21035534143447876,-0.1822625994682312],[-0.3010934293270111,0.046109121292829514],[-0.07660797983407974,0.019124986603856087],[-0.15761980414390564,-0.09798670560121536],[0.010440482757985592,-0.17259462177753448],[0.09789340943098068,0.0888344943523407],[0.19049762189388275,0.02451828494668007],[0.0069203912280499935,-0.14415694773197174],[0.27882474660873413,-0.02679889090359211],[0.39409276843070984,-0.10360781848430634]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.39e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.39965856075286865,0.20463556051254272,0.7721395492553711],"rotation":[0.0024052101653069258,0.052303820848464966,-0.001070371363312006,0.9986277222633362],"used":true,"bodyHandle":4.397e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.18057435750961304,-0.03040498122572899],[-0.274845153093338,0.009406397119164467],[-0.03157612308859825,-0.11764641106128693],[-0.17474053800106049,-0.11233911663293839],[0.03516010195016861,-0.1797652542591095],[-0.11907270550727844,0.051553867757320404],[0.09031770378351212,0.013840812258422375],[-0.05558348074555397,-0.044540099799633026],[0.09640395641326904,0.03317730128765106],[0.3039194643497467,-0.11097221076488495]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06102122738957405,0.27878591418266296,0.7050308585166931],"rotation":[-0.01461035292595625,-0.9834100008010864,0.01550195924937725,0.1801414042711258],"used":true,"bodyHandle":4.4e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.05017244070768356,0.0436692088842392],[-0.21628712117671967,0.16683854162693024],[-0.08560379594564438,0.1324978768825531],[-0.17249491810798645,0.03536652773618698],[-0.15166154503822327,-0.2533985674381256],[-0.24233676493167877,0.0017355047166347504],[-0.21954618394374847,-0.08117881417274475],[0.20206788182258606,-0.11246433854103088],[-0.1134028434753418,-0.03769591450691223],[-0.19596567749977112,-0.14606843888759613]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.407e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.40013813972473145,0.2064533680677414,0.7705583572387695],"rotation":[0.005457988008856773,0.045731183141469955,-0.0037686286959797144,0.9989317655563354],"used":true,"bodyHandle":4.41e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.15891994535923004,-0.1774788349866867],[-0.2775055170059204,0.058769553899765015],[-0.08567345887422562,-0.06874161213636398],[-0.14920511841773987,-0.07980883121490479],[0.04046518728137016,-0.18600361049175262],[0.09368564188480377,0.12375932931900024],[0.17802900075912476,-0.004714514594525099],[-0.007393301464617252,-0.12183776497840881],[0.3501497805118561,-0.02682666666805744],[0.3500525951385498,-0.1269889771938324]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05869431421160698,0.2768637239933014,0.6373270750045776],"rotation":[0.038568735122680664,-0.9550456404685974,-0.0005680412286892533,0.2939385771751404],"used":true,"bodyHandle":4.417e-321,"linearSpeed":0,"angularVelocityHistory":[[0.08450556546449661,0.10767459124326706],[0.10424921661615372,0.07438331097364426],[-0.061345819383859634,0.07969669252634048],[-0.0537336990237236,0.04183238744735718],[-0.1321595162153244,-0.0047986870631575584],[0.10043083876371384,0.046292517334222794],[-0.031710654497146606,-0.02356138452887535],[0.13930916786193848,-0.007557400967925787],[0.2230142056941986,0.13979960978031158],[0.02448250725865364,0.23028190433979034]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.42e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.400200754404068,0.20906883478164673,0.7715998888015747],"rotation":[0.007298903539776802,0.044295649975538254,-0.003664695890620351,0.9989850521087646],"used":true,"bodyHandle":4.427e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.2125300168991089,-0.1432064175605774],[-0.30986547470092773,-0.00009707413119031116],[-0.02962539717555046,-0.0819164514541626],[-0.1290876865386963,-0.10644634068012238],[0.011036556214094162,-0.20129722356796265],[-0.1419355869293213,0.011883769184350967],[0.06562970578670502,-0.03307795152068138],[-0.05857991799712181,-0.03705759719014168],[0.1521688997745514,0.03181922435760498],[0.3447081744670868,-0.08333557099103928]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.43e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.0003141250053886324,0.2790380120277405,0.6733841896057129],"rotation":[0.027678873389959335,-0.13835178315639496,-0.0036053385119885206,0.9899897575378418],"used":true,"bodyHandle":4.437e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.02942369505763054,0.14594575762748718],[-0.16839848458766937,0.024610908702015877],[-0.17752937972545624,0.12162738293409348],[-0.23156079649925232,-0.025663156062364578],[-0.3326655328273773,0.13114720582962036],[-0.02702726237475872,0.2109110951423645],[0.04138966649770737,-0.10605745017528534],[-0.03363180160522461,0.03044811077415943],[-0.14510823786258698,-0.010429729707539082],[-0.017699651420116425,0.00024151905381586403]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.39955008029937744,0.2107478529214859,0.7720587849617004],"rotation":[0.002489177044481039,0.041631024330854416,-0.006842068862169981,0.9991065263748169],"used":true,"bodyHandle":4.44e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.029579613357782364,-0.22086180746555328],[-0.4661503732204437,0.06535197049379349],[-0.14402331411838531,-0.04354023188352585],[-0.13945896923542023,-0.0894227921962738],[0.0526316836476326,-0.22180083394050598],[-0.18654361367225647,-0.02112775482237339],[0.3084941804409027,-0.0439738854765892],[-0.05447622761130333,-0.16731588542461395],[0.11244196444749832,0.01873381808400154],[0.2722770571708679,-0.06268718093633652]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.447e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.002172133419662714,0.2808206081390381,0.6006130576133728],"rotation":[0.009442309848964214,0.7351305484771729,-0.005002352874726057,0.677841305732727],"used":true,"bodyHandle":4.45e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.031878434121608734,-0.08659808337688446],[-0.018314313143491745,-0.06032704561948776],[0.0006652472075074911,-0.048638179898262024],[-0.011825154535472393,0.05952871963381767],[0.07368510961532593,-0.10973391681909561],[-0.03341177850961685,0.02292158268392086],[0.024112151935696602,-0.12126616388559341],[0.01613408513367176,0.05886536091566086],[-0.048552047461271286,0.09828312695026398],[-0.02383025921881199,-0.11909367144107819]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3982411026954651,0.21314792335033417,0.7706985473632812],"rotation":[0.0071294307708740234,0.032598502933979034,0.0010286862961947918,0.9994425773620605],"used":true,"bodyHandle":4.456e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.12124163657426834,-0.2445383369922638],[-0.2655838131904602,0.08700849860906601],[0.04739069938659668,-0.07032045722007751],[-0.11818768829107285,-0.14678853750228882],[-0.010185818187892437,-0.18433243036270142],[-0.2996470034122467,0.05563439056277275],[0.021099774166941643,-0.038298312574625015],[-0.09168190509080887,-0.017319923266768456],[0.12536348402500153,0.0073769851587712765],[0.29087162017822266,-0.12463714927434921]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.46e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05728895589709282,0.28172567486763,0.6353175640106201],"rotation":[0.03611999750137329,-0.9542455077171326,0.00297119515016675,0.2968197464942932],"used":true,"bodyHandle":4.466e-321,"linearSpeed":0,"angularVelocityHistory":[[0.0386156402528286,0.07586825639009476],[0.09739723056554794,0.08945652097463608],[-0.0708601176738739,0.10876952111721039],[-0.03226084262132645,0.1411137878894806],[-0.12580733001232147,0.0021585053764283657],[0.07877236604690552,0.1428084522485733],[-0.021060682833194733,-0.030443497002124786],[0.14131835103034973,-0.01321932952851057],[0.22241313755512238,0.11136367917060852],[0.023028763011097908,0.2173999845981598]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.39810147881507874,0.21475327014923096,0.770277738571167],"rotation":[0.0036857256200164557,0.04059067368507385,-0.007471470162272453,0.9991410970687866],"used":true,"bodyHandle":4.47e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.06683077663183212,-0.26649078726768494],[-0.27057087421417236,0.145620197057724],[0.05240897834300995,-0.1321932077407837],[-0.14857013523578644,-0.10352303832769394],[-0.0015839425614103675,-0.19917409121990204],[-0.38893547654151917,-0.04595523700118065],[-0.12151627242565155,-0.11982133239507675],[0.005882658530026674,-0.06556017696857452],[0.08417420089244843,0.09450564533472061],[0.15300601720809937,-0.05425308644771576]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.476e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06139257922768593,0.2834284007549286,0.7021518349647522],"rotation":[-0.020890163257718086,-0.8365325927734375,0.009107151068747044,0.5474430322647095],"used":true,"bodyHandle":4.48e-321,"linearSpeed":0,"angularVelocityHistory":[[0.19910767674446106,0.020622193813323975],[-0.2342967540025711,0.15695780515670776],[-0.019888389855623245,0.16438239812850952],[-0.19292551279067993,0.0006847293698228896],[-0.15618641674518585,-0.2862113416194916],[-0.1277269870042801,0.03624621033668518],[-0.1995585709810257,-0.05068608745932579],[0.07855641841888428,-0.08811459690332413],[-0.06504273414611816,0.03017652966082096],[-0.2485591024160385,-0.05731724947690964]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4004935324192047,0.21711350977420807,0.7708675861358643],"rotation":[0.0011002762475982308,0.04242551699280739,-0.011841809377074242,0.9990288615226746],"used":true,"bodyHandle":4.486e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.11463913321495056,-0.30658039450645447],[-0.33322110772132874,0.1691472828388214],[-0.11623238772153854,-0.0399501733481884],[-0.056478701531887054,-0.10519890487194061],[-0.05847321078181267,-0.1277547925710678],[-0.3562234938144684,-0.05417943000793457],[-0.2651529610157013,-0.0920235887169838],[-0.162977933883667,0.0894649475812912],[0.07916470617055893,0.09971971064805984],[0.031659793108701706,-0.00381768518127501]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4000777304172516,0.21942242980003357,0.7705333232879639],"rotation":[0.003492542542517185,0.04675939679145813,-0.010275546461343765,0.998847246170044],"used":true,"bodyHandle":4.49e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.05087146908044815,-0.24770887196063995],[-0.2603137195110321,0.12467953562736511],[0.03563091531395912,-0.11587554961442947],[-0.04488173499703407,-0.10087903589010239],[-0.003937628120183945,-0.1672133505344391],[-0.30608823895454407,0.008412880823016167],[-0.1334231048822403,-0.0571817122399807],[-0.11637197434902191,-0.017646843567490578],[0.043052542954683304,0.1173325628042221],[0.06807652860879898,-0.026440806686878204]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.496e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0014382645022124052,0.2821001410484314,0.741227388381958],"rotation":[0.018275270238518715,-0.999628484249115,-0.014110978692770004,0.014486183412373066],"used":true,"bodyHandle":4.5e-321,"linearSpeed":0,"angularVelocityHistory":[[0.04807770624756813,0.010443009436130524],[0.16360041499137878,-0.19858460128307343],[0.18591326475143433,-0.13601647317409515],[0.06316807121038437,-0.14493247866630554],[-0.027047157287597656,0.10799290984869003],[0.03682848811149597,-0.049887336790561676],[0.08745959401130676,0.02210782654583454],[0.026165824383497238,-0.009580714628100395],[0.08383714407682419,-0.14092081785202026],[-0.053611163049936295,0.23515625298023224]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4008762836456299,0.22164572775363922,0.7701403498649597],"rotation":[0.003495503682643175,0.04951617866754532,-0.00494045577943325,0.9987550377845764],"used":true,"bodyHandle":4.506e-321,"linearSpeed":0,"angularVelocityHistory":[[0.09911991655826569,-0.36308518052101135],[0.15691179037094116,0.28112518787384033],[-0.03358493000268936,-0.07233124226331711],[0.03083079308271408,-0.1198759377002716],[-0.021017223596572876,-0.07894309610128403],[-0.26943519711494446,-0.04145829752087593],[-0.2537541389465332,-0.07426264882087708],[0.01427215151488781,-0.06261041760444641],[0.027053246274590492,0.11413353681564331],[0.05843653902411461,-0.020727403461933136]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.51e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.057887203991413116,0.2819904088973999,0.7022029757499695],"rotation":[0.01581314206123352,-0.368087500333786,0.004271858837455511,-0.9296468496322632],"used":true,"bodyHandle":4.516e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.1864403933286667,-0.15331679582595825],[-0.17373518645763397,-0.1971617490053177],[-0.20405535399913788,-0.13841088116168976],[-0.19253717362880707,-0.17824020981788635],[-0.01735801249742508,-0.25750645995140076],[-0.19755323231220245,-0.21378861367702484],[0.09540779143571854,-0.110082246363163],[-0.04870776832103729,-0.08935260027647018],[-0.11441925168037415,-0.15017345547676086],[-0.060921069234609604,-0.12532097101211548]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4000638723373413,0.22363784909248352,0.7698643207550049],"rotation":[0.007858611643314362,0.047744445502758026,-0.006727953907102346,0.9988059997558594],"used":true,"bodyHandle":4.52e-321,"linearSpeed":0,"angularVelocityHistory":[[0.06863828003406525,-0.3184671700000763],[0.13398727774620056,0.26932409405708313],[0.031048620119690895,-0.08846669644117355],[-0.015000258572399616,-0.11514543741941452],[-0.13198184967041016,-0.07539278268814087],[-0.2465602606534958,-0.055759526789188385],[-0.2841043472290039,-0.06951671838760376],[0.014105928130447865,-0.034577980637550354],[0.00956414919346571,0.12301304936408997],[0.034548304975032806,-0.04705158621072769]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.526e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.060989171266555786,0.2825973927974701,0.6330957412719727],"rotation":[-0.00020569461048580706,-0.44272035360336304,0.01907511241734028,-0.896456778049469],"used":true,"bodyHandle":4.53e-321,"linearSpeed":0,"angularVelocityHistory":[[0.12586846947669983,-0.1286177933216095],[-0.09204400330781937,-0.05946478620171547],[-0.07267772406339645,0.015614207834005356],[-0.2873041331768036,0.08342768996953964],[-0.03160224109888077,0.07937602698802948],[-0.12202728539705276,0.025255978107452393],[-0.4120413362979889,0.27430376410484314],[-0.33867698907852173,-0.13781315088272095],[-0.10016574710607529,0.3233450949192047],[0.10941098630428314,0.1354387253522873]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4007619321346283,0.22679227590560913,0.7682551741600037],"rotation":[0.009126940742135048,0.03539879992604256,-0.0016256528906524181,0.9993302822113037],"used":true,"bodyHandle":4.536e-321,"linearSpeed":0,"angularVelocityHistory":[[0.07696309685707092,-0.3527279198169708],[0.056601300835609436,0.24959155917167664],[0.08514750748872757,0.24083088338375092],[0.07523910701274872,-0.029511040076613426],[-0.09142956137657166,-0.09177359938621521],[-0.24314573407173157,-0.04890960827469826],[-0.2659972310066223,-0.07104466110467911],[0.13272839784622192,-0.06347709149122238],[0.045890383422374725,0.14453521370887756],[0.024423597380518913,-0.0011754058068618178]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.54e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0005076304660178721,0.28376054763793945,0.6742342710494995],"rotation":[-0.019333763048052788,-0.8068014979362488,-0.021697260439395905,-0.5901075601577759],"used":true,"bodyHandle":4.545e-321,"linearSpeed":0,"angularVelocityHistory":[[0.12092653661966324,0.044716812670230865],[-0.032598573714494705,-0.029901670292019844],[-0.15174496173858643,0.04344378039240837],[-0.1812332719564438,-0.0675271600484848],[-0.4115527868270874,0.2217475324869156],[-0.09492751955986023,0.4007043242454529],[-0.01776016503572464,-0.04661283642053604],[-0.06800119578838348,0.024855323135852814],[-0.2378004491329193,0.054543230682611465],[-0.10345355421304703,-0.04486919194459915]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.40154069662094116,0.2286694347858429,0.768956184387207],"rotation":[0.015246025286614895,0.02408180758357048,-0.003919531125575304,0.9995859861373901],"used":true,"bodyHandle":4.55e-321,"linearSpeed":0,"angularVelocityHistory":[[0.06299439817667007,-0.3116943836212158],[-0.15257948637008667,-0.15765902400016785],[0.01512867957353592,-0.10542338341474533],[0.016797984018921852,0.010397890582680702],[-0.13681279122829437,-0.07864703983068466],[-0.24165302515029907,-0.028586020693182945],[-0.28764471411705017,-0.008087829686701298],[-0.054330769926309586,0.06592400372028351],[0.015115974470973015,0.12437104433774948],[0.00413983641192317,-0.028187165036797523]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.555e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4024062752723694,0.23167139291763306,0.7702189683914185],"rotation":[0.012694403529167175,0.01829259656369686,-0.004488020669668913,0.9997419714927673],"used":true,"bodyHandle":4.56e-321,"linearSpeed":0,"angularVelocityHistory":[[0.168707013130188,-0.35476237535476685],[0.023778051137924194,-0.0646129697561264],[0.1710677295923233,-0.06136385351419449],[0.057799968868494034,0.02290751039981842],[-0.15228712558746338,-0.058447036892175674],[-0.12705980241298676,-0.03734230250120163],[-0.23732885718345642,0.11950530856847763],[0.1468254178762436,0.042668409645557404],[-0.07921286672353745,0.051916975528001785],[-0.10223106294870377,-0.008299159817397594]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.002158153336495161,0.2859138250350952,0.60064297914505],"rotation":[-0.008279413916170597,-0.42741599678993225,0.00761533435434103,-0.9039850234985352],"used":true,"bodyHandle":4.565e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.04221678897738457,-0.07706105709075928],[0.012678866274654865,-0.14121155440807343],[0.006756733637303114,-0.055265072733163834],[-0.04686285927891731,0.09058956056833267],[0.054019078612327576,-0.09798949956893921],[-0.06322285532951355,-0.050522323697805405],[0.014629678800702095,-0.09267991781234741],[0.0562552884221077,-0.08444543927907944],[0.025986183434724808,0.15209418535232544],[0.05728357657790184,-0.10735249519348145]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.57e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.40204012393951416,0.23383694887161255,0.7695041298866272],"rotation":[0.024895163252949715,0.0256058257073164,0.0076651014387607574,0.9993326663970947],"used":true,"bodyHandle":4.575e-321,"linearSpeed":0,"angularVelocityHistory":[[0.18960316479206085,-0.2929559051990509],[0.05312289297580719,-0.0833716094493866],[0.05945596098899841,0.07161137461662292],[0.05309094861149788,0.12136207520961761],[-0.165842205286026,-0.0164241511374712],[-0.02906554751098156,-0.020434731617569923],[-0.15990501642227173,0.12182198464870453],[0.19862717390060425,0.04406458139419556],[-0.009793678298592567,0.07284381240606308],[-0.09463958442211151,-0.022070065140724182]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.060574013739824295,0.28773894906044006,0.6328179240226746],"rotation":[-0.002560312394052744,-0.6175940036773682,0.019685760140419006,-0.7862464189529419],"used":true,"bodyHandle":4.58e-321,"linearSpeed":0,"angularVelocityHistory":[[0.11594389379024506,-0.13396157324314117],[-0.06410980224609375,-0.07513733208179474],[0.010071196593344212,0.006361362524330616],[-0.3046974837779999,0.07246141880750656],[-0.10298675298690796,0.052039314061403275],[-0.08458606153726578,0.0035816903691738844],[-0.3764224350452423,0.21892407536506653],[-0.48515650629997253,-0.09971743822097778],[-0.002471967600286007,0.38168564438819885],[0.24439136683940887,0.4128863513469696]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4019322693347931,0.2374039590358734,0.7702862024307251],"rotation":[0.03184061497449875,0.024759462103247643,0.0020552121568471193,0.9991840720176697],"used":true,"bodyHandle":4.585e-321,"linearSpeed":0,"angularVelocityHistory":[[0.17620529234409332,-0.24762260913848877],[0.12127064913511276,-0.0930161401629448],[0.10750424116849899,0.10479256510734558],[0.07322057336568832,0.12273740023374557],[-0.14005187153816223,-0.020629392936825752],[-0.03690410777926445,-0.010234124027192593],[-0.17108820378780365,0.17353573441505432],[0.14407335221767426,0.04705501347780228],[-0.011336184106767178,0.04927323758602142],[-0.07652328163385391,-0.00918703805655241]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.59e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.058033108711242676,0.2873495817184448,0.7020469307899475],"rotation":[0.017648298293352127,-0.13688543438911438,0.0012119023595005274,-0.9904288649559021],"used":true,"bodyHandle":4.595e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.17065291106700897,-0.15870127081871033],[-0.16253353655338287,-0.20121914148330688],[-0.2182271033525467,-0.13466057181358337],[-0.18707558512687683,-0.17413143813610077],[-0.029356367886066437,-0.25129246711730957],[-0.19651012122631073,-0.22641068696975708],[0.09898760169744492,-0.10726192593574524],[-0.038598425686359406,-0.0965891033411026],[-0.10450250655412674,-0.15858006477355957],[-0.041390955448150635,-0.13558100163936615]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4013315737247467,0.2395326942205429,0.7703617215156555],"rotation":[0.034806590527296066,0.01754947379231453,0.01231107022613287,0.9991641044616699],"used":true,"bodyHandle":4.6e-321,"linearSpeed":0,"angularVelocityHistory":[[0.11829830706119537,-0.2241550236940384],[0.2556504011154175,-0.08307817578315735],[0.11267495155334473,0.08072446286678314],[0.06386667490005493,0.1501087248325348],[-0.1482725292444229,0.020907338708639145],[-0.030480042099952698,0.03761652857065201],[-0.11604591459035873,0.25611719489097595],[0.12720341980457306,-0.002852008678019047],[0.016414441168308258,0.07200311869382858],[-0.0806085616350174,0.02061491832137108]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.605e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0014452656032517552,0.2875720262527466,0.742119550704956],"rotation":[0.009163680486381054,-0.9082192182540894,-0.01957664266228676,-0.417936235666275],"used":true,"bodyHandle":4.61e-321,"linearSpeed":0,"angularVelocityHistory":[[0.021443059667944908,0.014110435731709003],[0.16540531814098358,-0.15516719222068787],[0.1496773362159729,-0.1793118715286255],[0.08783029019832611,-0.12791916728019714],[-0.054268546402454376,0.0947394147515297],[0.0066087981685996056,-0.03370444104075432],[0.1058136373758316,0.02408464625477791],[0.05175791680812836,0.0037998270709067583],[0.07649821043014526,-0.1527797281742096],[-0.04978064075112343,0.20267096161842346]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.40119418501853943,0.24288985133171082,0.7727982401847839],"rotation":[0.03366023302078247,0.016578644514083862,0.009585268795490265,0.9992498755455017],"used":true,"bodyHandle":4.615e-321,"linearSpeed":0,"angularVelocityHistory":[[0.1483267843723297,-0.23698970675468445],[0.15869244933128357,-0.07510650902986526],[0.09220888465642929,0.10525308549404144],[0.05487450212240219,0.13656429946422577],[-0.1296740621328354,-0.005616791546344757],[-0.037529826164245605,0.00644978741183877],[-0.20530161261558533,0.16042941808700562],[0.1345524936914444,0.03853290155529976],[0.005724489688873291,0.04034983366727829],[-0.05513260141015053,0.014200417324900627]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.62e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4012669026851654,0.2452927827835083,0.7721772789955139],"rotation":[0.03597336634993553,-0.01909671537578106,0.010165923275053501,0.9991185665130615],"used":true,"bodyHandle":4.624e-321,"linearSpeed":0,"angularVelocityHistory":[[0.1133711189031601,-0.17522868514060974],[0.23657160997390747,-0.06905845552682877],[0.19178898632526398,0.18156687915325165],[0.020517002791166306,0.1640714704990387],[-0.13443581759929657,0.016936752945184708],[0.080410435795784,0.08896175026893616],[-0.06250263005495071,0.2511292099952698],[0.08776479959487915,0.04230916127562523],[0.015788566321134567,0.002932178322225809],[0.0025286772288382053,0.05041348189115524]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.06102002412080765,0.28877872228622437,0.7043516635894775],"rotation":[-0.012839095667004585,-0.9893668293952942,0.020338211208581924,0.14343930780887604],"used":true,"bodyHandle":4.63e-321,"linearSpeed":0,"angularVelocityHistory":[[0.1959269791841507,0.03762560337781906],[-0.25527334213256836,0.1443001627922058],[-0.028553303331136703,0.185813307762146],[-0.13165515661239624,0.08452384173870087],[-0.23735538125038147,-0.3249954581260681],[-0.1339067816734314,0.04615075886249542],[-0.20265592634677887,-0.057920943945646286],[-0.08717731386423111,-0.07488942891359329],[-0.06747102737426758,0.017510827630758286],[-0.2603696882724762,-0.05073336511850357]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.634e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4019086956977844,0.24820780754089355,0.772858202457428],"rotation":[0.03749946132302284,0.003053834196180105,0.014325588010251522,0.9991893172264099],"used":true,"bodyHandle":4.64e-321,"linearSpeed":0,"angularVelocityHistory":[[0.15151341259479523,-0.012211221270263195],[0.2899133861064911,0.02366720885038376],[0.14305466413497925,0.1689675897359848],[0.09940885752439499,0.20503251254558563],[-0.117551289498806,0.07853829115629196],[0.051596276462078094,0.1034877747297287],[-0.08135687559843063,0.2587604224681854],[0.09652290493249893,0.05078059807419777],[0.007254560012370348,-0.04084502533078194],[0.01626327447593212,0.044559698551893234]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05680255591869354,0.28679683804512024,0.6357529759407043],"rotation":[0.03454896807670593,-0.8453985452651978,0.015150122344493866,0.5328021049499512],"used":true,"bodyHandle":4.644e-321,"linearSpeed":0,"angularVelocityHistory":[[0.010854697786271572,0.05907244607806206],[0.05756831169128418,0.13829253613948822],[-0.10703235119581223,0.07077931612730026],[-0.024192532524466515,0.15484628081321716],[-0.10483668744564056,-0.06787393242120743],[0.06208337843418121,0.1456030160188675],[-0.03625837340950966,0.05198273807764053],[0.07001058757305145,-0.03696087375283241],[0.3202074468135834,0.1367475390434265],[0.039601169526576996,0.21107764542102814]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.65e-321,"linearSpeed":0,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4014745354652405,0.2509445250034332,0.7739521861076355],"rotation":[0.03554001823067665,-0.0022686179727315903,0.018485737964510918,0.9991946816444397],"used":true,"bodyHandle":4.654e-321,"linearSpeed":0,"angularVelocityHistory":[[0.17187249660491943,0.06853773444890976],[0.2813332676887512,0.02176496759057045],[0.15912051498889923,0.17706191539764404],[0.12456738203763962,0.2523304522037506],[-0.08876316994428635,0.15260019898414612],[0.05952700972557068,0.16020971536636353],[-0.004695822484791279,0.26918673515319824],[0.049999017268419266,0.09672489017248154],[0.017743729054927826,0.003409499069675803],[0.03597557917237282,0.06516657769680023]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.44472694396972656,0.17468585073947906,0.7754204869270325],"rotation":[-0.0007123813848011196,-0.27845853567123413,-0.0019979013595730066,0.9604458808898926],"used":true,"bodyHandle":4.66e-321,"linearSpeed":1.5037923070969078e-7,"angularVelocityHistory":[[-0.0008285208023153245,0.0033472708892077208],[0.0010056326864287257,0.0018960981396958232],[-0.002431068103760481,-0.001813555252738297],[0.00020809072884730995,0.0026446478441357613],[0.002731646178290248,0.004051669966429472],[-0.0006657312624156475,-0.002101308899000287],[0.0005903833662159741,-0.004096424672752619],[-0.0005514919175766408,0.0010561369126662612],[0.002897618804126978,0.006491530686616898],[-0.00016965536633506417,-0.0009770335163921118],[0.0029263340402394533,0.003304355079308152]],"sleepCandidateFrames":2,"pendingImpulse":null},{"position":[0.00040007554343901575,0.2889063358306885,0.6739102602005005],"rotation":[0.03178714960813522,0.05155152082443237,-0.002353175077587366,0.9981614947319031],"used":true,"bodyHandle":4.664e-321,"linearSpeed":0,"angularVelocityHistory":[[0.1335649937391281,0.06016843020915985],[-0.02683066949248314,-0.03169253468513489],[-0.13337428867816925,0.06325630098581314],[-0.19457785785198212,-0.09359245002269745],[-0.3815690875053406,0.2722327709197998],[-0.07845860719680786,0.4143677353858948],[-0.03048272803425789,-0.07364430278539658],[-0.05702386051416397,0.03545462340116501],[-0.22539940476417542,0.07262781262397766],[-0.09034011512994766,-0.02287263423204422]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4014296531677246,0.25388580560684204,0.7742883563041687],"rotation":[0.03598466515541077,-0.011391585692763329,0.02250547893345356,0.9990339279174805],"used":true,"bodyHandle":4.67e-321,"linearSpeed":0,"angularVelocityHistory":[[0.12118612974882126,-0.027141200378537178],[0.2751995027065277,-0.02447648160159588],[0.13716426491737366,0.15374313294887543],[0.09674723446369171,0.23720791935920715],[-0.11665596812963486,0.11100518703460693],[0.05060873180627823,0.13069334626197815],[0.03365440294146538,0.2890312969684601],[0.07735647261142731,0.06233246624469757],[0.020310668274760246,-0.016561368480324745],[0.008499992080032825,0.07447446137666702]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.38191819190979004,0.18828150629997253,0.7650318741798401],"rotation":[-0.9423677921295166,0.014639635570347309,-0.2693755030632019,0.19790266454219818],"used":true,"bodyHandle":4.674e-321,"linearSpeed":7.240986893913616e-7,"angularVelocityHistory":[[-0.005101900082081556,-0.005533459130674601],[-0.006164758466184139,0.02789626270532608],[0.0017657452262938023,0.011966274119913578],[-0.0013151002349331975,-0.019545430317521095],[-0.0033218427561223507,0.0011141849681735039],[0.005619660951197147,0.014132213778793812],[0.00230520055629313,0.021652279421687126],[0.0029421765357255936,-0.003151671262457967],[0.00406438484787941,-0.012356285005807877],[-0.0035797760356217623,-0.0011060248361900449],[-0.003435352351516485,-0.029975246638059616]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.002310772193595767,0.2914681136608124,0.600691020488739],"rotation":[0.009507333859801292,0.39402875304222107,-0.006485312711447477,0.9190260171890259],"used":true,"bodyHandle":4.68e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.044530969113111496,-0.07682545483112335],[-0.04887004941701889,-0.05385713279247284],[0.008719544857740402,-0.05335795506834984],[-0.046129606664180756,0.10684153437614441],[0.051175955682992935,-0.09741441160440445],[-0.07013292610645294,-0.00003320287214592099],[0.005932240281254053,-0.1009882390499115],[0.0160844586789608,-0.009225952439010143],[0.03988243639469147,0.08903635293245316],[0.049628958106040955,-0.11117446422576904]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3999550938606262,0.2570028007030487,0.773992121219635],"rotation":[0.030623989179730415,0.0021913875825703144,0.023882217705249786,0.9992431998252869],"used":true,"bodyHandle":4.684e-321,"linearSpeed":0,"angularVelocityHistory":[[0.14960654079914093,0.04672538489103317],[0.2698054611682892,0.016905002295970917],[0.13624416291713715,0.15661907196044922],[0.1118442565202713,0.2587645351886749],[-0.08090174198150635,0.18626174330711365],[0.05042445659637451,0.15716712176799774],[-0.004425236955285072,0.2829083502292633],[0.04473491013050079,0.1027783751487732],[0.02249092608690262,0.004951371345669031],[0.03114892542362213,0.08410143107175827]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3914521634578705,0.18612653017044067,0.7532302737236023],"rotation":[-0.9740761518478394,-0.02342553436756134,-0.10666277259588242,0.1981160044670105],"used":true,"bodyHandle":4.69e-321,"linearSpeed":2.2021722102425624e-7,"angularVelocityHistory":[[-0.010387401096522808,-0.004038556944578886],[0.004702490754425526,0.019449027255177498],[-0.015089486725628376,0.008092669770121574],[0.004080040380358696,-0.008905516006052494],[0.0029944542329758406,0.007314251270145178],[-0.0072744726203382015,0.003681625472381711],[0.004474231041967869,0.009533358737826347],[-0.007976720109581947,0.0002779632923193276],[0.0007789697265252471,-0.006302247289568186],[-0.0016526567051187158,0.0018458063714206219],[0.00011560917482711375,-0.017489122226834297]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05595416575670242,0.2923884391784668,0.636415421962738],"rotation":[0.023691518232226372,-0.530195951461792,0.02876460552215576,0.8470558524131775],"used":true,"bodyHandle":4.694e-321,"linearSpeed":0,"angularVelocityHistory":[[0.0176248662173748,0.04422895982861519],[0.12832726538181305,0.06097345054149628],[-0.10475131124258041,0.062499288469552994],[-0.010869407095015049,0.15733280777931213],[-0.10427109897136688,-0.08279984444379807],[0.09354642778635025,0.08252769708633423],[-0.04752020910382271,0.09751129150390625],[0.11297564953565598,-0.13471417129039764],[0.35323822498321533,0.07983070611953735],[0.04337255656719208,0.19075947999954224]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.40083563327789307,0.2603514790534973,0.7749279737472534],"rotation":[0.03158194571733475,-0.0018577162409201264,0.030890770256519318,0.9990219473838806],"used":true,"bodyHandle":4.7e-321,"linearSpeed":0,"angularVelocityHistory":[[0.1505436897277832,0.07656965404748917],[0.23728923499584198,0.008358992636203766],[0.14338327944278717,0.14899703860282898],[0.10337916761636734,0.20020221173763275],[-0.08694248646497726,0.14213351905345917],[0.056011803448200226,0.16191427409648895],[0.08095409721136093,0.23901940882205963],[0.03453702852129936,0.10262421518564224],[0.031242186203598976,-0.016064325347542763],[0.05205141007900238,0.04415971413254738]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3921507000923157,0.18591533601284027,0.7384990453720093],"rotation":[-0.9668551087379456,-0.016166428104043007,-0.16013289988040924,0.19821052253246307],"used":true,"bodyHandle":4.704e-321,"linearSpeed":1.195752238766964e-7,"angularVelocityHistory":[[-0.005054563283920288,0.0005445172428153455],[-0.004422628786414862,0.02077135443687439],[-0.016654979437589645,0.014456171542406082],[0.0038950287271291018,-0.011729924939572811],[0.004500331822782755,-0.01644739881157875],[-0.006750636734068394,0.0049112820997834206],[-0.005720254499465227,0.013874431140720844],[-0.0003203486849088222,-0.009623788297176361],[0.0009990691905841231,-0.005842260085046291],[0.00018030183855444193,0.004477393813431263],[0.0010115397162735462,-0.015745507553219795]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.4007217586040497,0.26402679085731506,0.77448970079422],"rotation":[0.0283904317766428,-0.014017835259437561,0.04186451435089111,0.9986214637756348],"used":true,"bodyHandle":4.71e-321,"linearSpeed":0,"angularVelocityHistory":[[0.16253381967544556,0.10909444093704224],[0.3192322552204132,0.06331382691860199],[0.14360548555850983,0.13611294329166412],[0.10575433820486069,0.1987026333808899],[0.03440401330590248,0.17041504383087158],[0.06867734342813492,0.1543044149875641],[0.03556559234857559,0.24206304550170898],[0.023777589201927185,0.12054736167192459],[0.008955593220889568,-0.021315904334187508],[0.07993855327367783,0.051660217344760895]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0622977577149868,0.29405272006988525,0.7023370862007141],"rotation":[-0.015875231474637985,-0.9691353440284729,0.020500749349594116,0.24516189098358154],"used":true,"bodyHandle":4.713e-321,"linearSpeed":0,"angularVelocityHistory":[[0.28258901834487915,0.01618041656911373],[-0.2579473853111267,0.13993947207927704],[-0.03336140140891075,0.17519401013851166],[-0.1467898041009903,0.08274076879024506],[-0.22250108420848846,-0.3237519860267639],[-0.08754853159189224,0.03151261806488037],[-0.1758786141872406,-0.017343390733003616],[-0.08456007391214371,-0.08379664272069931],[-0.048967745155096054,0.05477191135287285],[-0.24033311009407043,-0.04034058004617691]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3858182728290558,0.18605566024780273,0.7250774502754211],"rotation":[-0.9523439407348633,-0.004456672817468643,-0.22871355712413788,0.2017703354358673],"used":true,"bodyHandle":4.72e-321,"linearSpeed":1.1512775569317614e-7,"angularVelocityHistory":[[-0.0015417718095704913,0.00014506769366562366],[0.0003706080897245556,0.0057500917464494705],[-0.013610701076686382,0.011621885932981968],[0.00019273553334642202,-0.01728959195315838],[0.015410508029162884,-0.018627293407917023],[-0.006821180693805218,0.008105667307972908],[-0.002702761208638549,0.005901592317968607],[-0.0016511738067492843,-0.010794470086693764],[0.005983214825391769,-0.013032813556492329],[0.001258864183910191,0.004720598924905062],[-0.0020427738782018423,-0.014481982216238976]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.39929482340812683,0.26875942945480347,0.774109423160553],"rotation":[0.02996913716197014,-0.013927200809121132,0.0480312705039978,0.9982990026473999],"used":true,"bodyHandle":4.723e-321,"linearSpeed":0,"angularVelocityHistory":[[0.22003769874572754,0.22754111886024475],[0.24511244893074036,0.028177035972476006],[0.13507026433944702,0.13236679136753082],[0.11797703802585602,0.17260485887527466],[0.011977544054389,0.17417500913143158],[0.0754636600613594,0.16096319258213043],[0.09543247520923615,0.208745539188385],[0.05152358114719391,0.2229187786579132],[0.07211444526910782,0.09791988134384155],[0.08137751370668411,0.06893458962440491]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0010533240856602788,0.29314443469047546,0.7413955926895142],"rotation":[0.013986419886350632,-0.9978020191192627,-0.014207657426595688,-0.06319467723369598],"used":true,"bodyHandle":4.73e-321,"linearSpeed":0,"angularVelocityHistory":[[0.01614745333790779,0.007506767753511667],[0.16314686834812164,-0.12410899996757507],[0.13469016551971436,-0.19347812235355377],[0.09558241814374924,-0.1333981156349182],[-0.060200035572052,0.08375924825668335],[-0.00047643849393352866,-0.0381566658616066],[0.12005980312824249,0.023052647709846497],[0.060422930866479874,0.015367882326245308],[0.06470891833305359,-0.15342223644256592],[-0.04068871587514877,0.16004899144172668]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.39787688851356506,0.27272936701774597,0.7757394909858704],"rotation":[0.03219451755285263,-0.017118200659751892,0.05196436867117882,0.9979830384254456],"used":true,"bodyHandle":4.733e-321,"linearSpeed":0,"angularVelocityHistory":[[0.20135760307312012,0.22715020179748535],[0.24188432097434998,0.19861549139022827],[0.1585666686296463,0.11133008450269699],[0.1339818239212036,0.1166195422410965],[0.12396928668022156,0.19120250642299652],[0.07702083885669708,0.11880917102098465],[0.12229108810424805,0.14635200798511505],[0.11592213809490204,0.25707730650901794],[0.15681970119476318,0.15917439758777618],[0.12403362989425659,0.06395407766103745]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3840720057487488,0.18633711338043213,0.7107545733451843],"rotation":[-0.9216518998146057,0.011463990435004234,-0.32935142517089844,0.2048264592885971],"used":true,"bodyHandle":4.74e-321,"linearSpeed":1.8891799401454856e-7,"angularVelocityHistory":[[-0.004720820114016533,0.008572367951273918],[0.01324472390115261,-0.01920953392982483],[-0.008520703762769699,0.010690347291529179],[-0.0018608366372063756,-0.014469262212514877],[0.013267787173390388,-0.03760760650038719],[-0.003072276245802641,-0.0019172611646354198],[0.0002684950304683298,-0.005685477517545223],[0.0035082665272057056,-0.016807453706860542],[0.013959180563688278,-0.031292062252759933],[-0.0037112748250365257,0.003506047884002328],[-0.005768483970314264,-0.007260946091264486]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.058045707643032074,0.29276373982429504,0.7020555734634399],"rotation":[0.0150992963463068,-0.5965785980224609,0.008218110539019108,-0.8023704886436462],"used":true,"bodyHandle":4.743e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.13891936838626862,-0.1261162906885147],[-0.15081913769245148,-0.1652470976114273],[-0.22432830929756165,-0.13565224409103394],[-0.22173070907592773,-0.1272004246711731],[-0.023161496967077255,-0.2602364420890808],[-0.24393609166145325,-0.2462366670370102],[0.15172651410102844,-0.08151698857545853],[-0.06505321711301804,-0.07796218991279602],[-0.13207750022411346,-0.11524567008018494],[-0.0658407136797905,-0.10814166814088821]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.397617906332016,0.2772480845451355,0.7755582928657532],"rotation":[0.028067436069250107,-0.020238395780324936,0.05289481580257416,0.9980003237724304],"used":true,"bodyHandle":4.75e-321,"linearSpeed":0,"angularVelocityHistory":[[0.16315843164920807,0.21911488473415375],[0.29048123955726624,0.24375340342521667],[0.19572052359580994,0.08238327503204346],[0.14047227799892426,0.10773740708827972],[0.1513928771018982,0.17999935150146484],[0.07636037468910217,0.10950254648923874],[0.1250622570514679,0.11591356247663498],[0.11837246268987656,0.24921277165412903],[0.12587270140647888,0.1995670199394226],[0.14852239191532135,0.10789065062999725]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3762355446815491,0.18638171255588531,0.6985102295875549],"rotation":[-0.9313579201698303,0.0023134134244173765,-0.29988032579421997,0.20649172365665436],"used":true,"bodyHandle":4.753e-321,"linearSpeed":1.2471941647650343e-7,"angularVelocityHistory":[[-0.00659923767670989,0.009625001810491085],[0.008075594902038574,-0.01995932310819626],[-0.004406339954584837,0.003054604632779956],[-0.00038609464536421,-0.01404272299259901],[0.005367416888475418,-0.03714492917060852],[-0.006761783268302679,-0.0013330550864338875],[-0.0009045105543918908,-0.009974092245101929],[0.006852155085653067,-0.01966283470392227],[0.010277382098138332,-0.03586643189191818],[-0.0053626736626029015,0.004126660991460085],[-0.0060587250627577305,-0.005792388692498207]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.396953821182251,0.2825019955635071,0.7759928703308105],"rotation":[0.026699107140302658,-0.010225213132798672,0.051547858864068985,0.9982612133026123],"used":true,"bodyHandle":4.76e-321,"linearSpeed":0,"angularVelocityHistory":[[0.19505396485328674,0.22951002418994904],[0.2413048893213272,0.22110018134117126],[0.17614760994911194,0.08104248344898224],[0.1343865990638733,0.10747433453798294],[0.13823653757572174,0.17904755473136902],[0.0749998688697815,0.11455052345991135],[0.11590617150068283,0.11128274351358414],[0.12159483134746552,0.25557565689086914],[0.1438916176557541,0.2075302004814148],[0.1470332145690918,0.10526247322559357]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.060256704688072205,0.29314640164375305,0.6329946517944336],"rotation":[-0.00018940557492896914,-0.4053010642528534,0.019994428381323814,-0.913964569568634],"used":true,"bodyHandle":4.763e-321,"linearSpeed":0,"angularVelocityHistory":[[0.05741946026682854,-0.12087090313434601],[-0.008164852857589722,-0.10517831891775131],[0.06647361069917679,-0.0012589010875672102],[-0.29577070474624634,0.06153269484639168],[-0.10867176949977875,0.052207060158252716],[-0.10944504290819168,-0.000959389319177717],[-0.29590654373168945,0.08899002522230148],[-0.5447735786437988,-0.10363227874040604],[0.07245001941919327,0.381511926651001],[0.23236893117427826,0.4265461564064026]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3965727388858795,0.2875435948371887,0.7763836979866028],"rotation":[0.02591967210173607,-0.01075900811702013,0.04967285320162773,0.9983711242675781],"used":true,"bodyHandle":4.77e-321,"linearSpeed":0,"angularVelocityHistory":[[0.16489048302173615,0.20101572573184967],[0.22952900826931,0.25973448157310486],[0.19584868848323822,0.05613430589437485],[0.15601469576358795,0.09607905149459839],[0.1782422959804535,0.1495676338672638],[0.08257882297039032,0.10946527868509293],[0.10717011988162994,0.08537885546684265],[0.1494675725698471,0.2160600870847702],[0.13444730639457703,0.223749041557312],[0.15280503034591675,0.12484398484230042]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.37518617510795593,0.18597209453582764,0.6853734254837036],"rotation":[-0.9173311591148376,0.006476094014942646,-0.3402468264102936,0.20662446320056915],"used":true,"bodyHandle":4.773e-321,"linearSpeed":6.343898227177991e-8,"angularVelocityHistory":[[-0.010954027995467186,0.015236591920256615],[0.00778399221599102,-0.015927700325846672],[-0.014909214340150356,0.013425784185528755],[0.0006768853636458516,-0.011469502002000809],[0.010027357377111912,-0.04187154024839401],[-0.005231760907918215,-0.007212392520159483],[-0.0032913866452872753,0.002953086281195283],[0.009515670128166676,-0.017028257250785828],[0.010133852250874043,-0.030993346124887466],[-0.007607458624988794,0.005550467409193516],[-0.005067667458206415,-0.00855462159961462]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3959413766860962,0.29288890957832336,0.7766199111938477],"rotation":[0.02500472590327263,-0.01106986589729786,0.050957851111888885,0.9983263611793518],"used":true,"bodyHandle":4.78e-321,"linearSpeed":0,"angularVelocityHistory":[[0.15377290546894073,0.2052409052848816],[0.24563416838645935,0.3205483853816986],[0.22646839916706085,0.03479630500078201],[0.16054685413837433,0.0921335220336914],[0.18248552083969116,0.14389760792255402],[0.1022123321890831,0.11710762232542038],[0.08852057158946991,0.055916592478752136],[0.15382175147533417,0.21156620979309082],[0.12920063734054565,0.22707676887512207],[0.15727627277374268,0.1559159904718399]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0012973855482414365,0.2943105697631836,0.6737846732139587],"rotation":[-0.020117882639169693,-0.7879120707511902,-0.023060647770762444,-0.6150267720222473],"used":true,"bodyHandle":4.783e-321,"linearSpeed":0,"angularVelocityHistory":[[0.16697268187999725,-0.017070427536964417],[0.027424555271863937,-0.036266978830099106],[-0.11214412748813629,-0.00534012820571661],[-0.12402662634849548,-0.1194230318069458],[-0.3519379198551178,0.20937776565551758],[-0.06681782752275467,0.40224340558052063],[-0.02599187009036541,-0.042105235159397125],[-0.06078192964196205,0.044662006199359894],[-0.28553688526153564,0.10874678194522858],[-0.13690070807933807,-0.04059184342622757]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.36640486121177673,0.1865999847650528,0.6725791692733765],"rotation":[-0.944608747959137,-0.015224211849272251,-0.2554484009742737,0.20549584925174713],"used":true,"bodyHandle":4.787e-321,"linearSpeed":1.0767591039596515e-7,"angularVelocityHistory":[[-0.01039439532905817,0.018658632412552834],[0.006275230087339878,-0.016244569793343544],[-0.008917712606489658,0.011468072421848774],[-0.00041788123780861497,0.003721233457326889],[0.010553381405770779,-0.04079968109726906],[-0.000493922270834446,-0.01633984036743641],[0.0011281105689704418,0.0008811766747385263],[0.009414237923920155,-0.015408325009047985],[0.008267862722277641,-0.03258674219250679],[-0.005777657497674227,0.006809201557189226],[-0.0023540304973721504,-0.008308502845466137]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.3948589563369751,0.2986057996749878,0.7763331532478333],"rotation":[0.02403242141008377,-0.013299243524670601,0.05052115395665169,0.9983452558517456],"used":true,"bodyHandle":4.79e-321,"linearSpeed":0,"angularVelocityHistory":[[0.15704789757728577,0.20109669864177704],[0.23836636543273926,0.3189091384410858],[0.21898332238197327,0.034464046359062195],[0.1602533459663391,0.09017207473516464],[0.1790105402469635,0.14622145891189575],[0.10807018727064133,0.11480570584535599],[0.08757615089416504,0.05568733066320419],[0.1557832807302475,0.212195485830307],[0.13115336000919342,0.22426818311214447],[0.15930064022541046,0.15540000796318054]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0024424376897513866,0.2971605062484741,0.600686252117157],"rotation":[-0.0035582303535193205,0.2635316252708435,0.011488721705973148,-0.9645757675170898],"used":true,"bodyHandle":4.797e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.05284092202782631,-0.06922813504934311],[-0.037035953253507614,-0.07182178646326065],[0.01155164372175932,-0.05918964743614197],[-0.046409524977207184,0.10098090767860413],[0.03884406015276909,-0.08043412119150162],[-0.05834586173295975,-0.028434928506612778],[-0.003963053692132235,-0.0845106840133667],[0.01683884672820568,-0.05562879890203476],[0.014873193576931953,0.15934500098228455],[0.07128311693668365,-0.11675646156072617]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3633415102958679,0.18608276546001434,0.6606907844543457],"rotation":[-0.9432874917984009,-0.017845435068011284,-0.26270365715026855,0.20218074321746826],"used":true,"bodyHandle":4.8e-321,"linearSpeed":2.6158212046384176e-7,"angularVelocityHistory":[[-0.010444341227412224,0.014806522987782955],[-0.002740977331995964,-0.010653886012732983],[-0.016268696635961533,0.01776745915412903],[-0.0005541181308217347,0.0017028319416567683],[0.014041975140571594,-0.03850913792848587],[0.00006928026414243504,-0.016442885622382164],[-0.004007271956652403,0.008396649733185768],[0.006846568081527948,-0.00996901374310255],[0.0030414375942200422,-0.025380481034517288],[-0.0060370261780917645,0.007724745664745569],[-0.005073735490441322,-0.008604551665484905]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3570929765701294,0.18623749911785126,0.6482449769973755],"rotation":[-0.9436985850334167,-0.02360801212489605,-0.2632630467414856,0.19891756772994995],"used":true,"bodyHandle":4.807e-321,"linearSpeed":1.4721585090219422e-7,"angularVelocityHistory":[[-0.0035370944533497095,0.007913215085864067],[-0.005906842648983002,0.006784016732126474],[-0.013729509897530079,0.02713668905198574],[-0.0039029475301504135,0.016562482342123985],[0.021402398124337196,-0.024164479225873947],[0.0009747735457494855,-0.014268158935010433],[-0.0026578744873404503,0.027758991345763206],[0.0017799100605770946,-0.0010995842749252915],[-0.0017035006312653422,-0.006685466505587101],[-0.002353635849431157,0.0048948777839541435],[-0.004835755564272404,0.0013974050525575876]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.06012539938092232,0.298919141292572,0.6328511238098145],"rotation":[0.0007948117563501,-0.37577497959136963,0.02116778865456581,-0.9264687895774841],"used":true,"bodyHandle":4.81e-321,"linearSpeed":0,"angularVelocityHistory":[[0.05774952471256256,-0.1271754950284958],[-0.010857464745640755,-0.10378296673297882],[0.06372810900211334,-0.012426365166902542],[-0.285298615694046,0.06281029433012009],[-0.11263348162174225,0.05272865667939186],[-0.10630964487791061,0.01101414579898119],[-0.27674800157546997,0.1025874987244606],[-0.5120442509651184,-0.10781779885292053],[0.033428631722927094,0.3543633222579956],[0.2079048752784729,0.4102305769920349]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3540005087852478,0.18524222075939178,0.6371644735336304],"rotation":[-0.9548850655555725,-0.03560968488454819,-0.23160232603549957,0.18244659900665283],"used":true,"bodyHandle":4.817e-321,"linearSpeed":1.6519039649411944e-7,"angularVelocityHistory":[[-0.0009861928410828114,0.0022475041914731264],[-0.0037437104620039463,0.008932169526815414],[-0.015613812953233719,0.02693095989525318],[-0.005254503805190325,0.015670478343963623],[0.020534440875053406,-0.018008647486567497],[0.0023088883608579636,-0.015472223050892353],[-0.004027773160487413,0.02546517364680767],[0.00007386512879747897,0.001249088323675096],[0.00009190624405164272,-0.0068976799957454205],[-0.0022128757555037737,0.00283800158649683],[-0.004220453556627035,0.0012855365639552474]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.058493345975875854,0.29856419563293457,0.702303409576416],"rotation":[0.013986618258059025,-0.5965941548347473,0.007964917458593845,-0.8023816347122192],"used":true,"bodyHandle":4.82e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.13309922814369202,-0.11138623207807541],[-0.17449542880058289,-0.13920673727989197],[-0.18332114815711975,-0.14627303183078766],[-0.26243239641189575,-0.08337055146694183],[-0.002547206124290824,-0.26510077714920044],[-0.27887606620788574,-0.27374976873397827],[0.15369102358818054,-0.06809572875499725],[-0.07722276449203491,-0.08434239774942398],[-0.1266617476940155,-0.12234178185462952],[-0.0632113516330719,-0.11549806594848633]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.35079318284988403,0.18405531346797943,0.6256983280181885],"rotation":[-0.9629347920417786,-0.041807178407907486,-0.21579553186893463,0.15633626282215118],"used":true,"bodyHandle":4.827e-321,"linearSpeed":9.127089029393684e-8,"angularVelocityHistory":[[-0.0010654563084244728,-0.000614555028732866],[-0.005141250789165497,0.012843770906329155],[-0.010070419870316982,0.014205850660800934],[-0.0054740929044783115,0.011001364327967167],[0.012257631868124008,-0.006148028187453747],[0.00009636869071982801,-0.0040945070795714855],[-0.0025280320551246405,0.022937344387173653],[-0.0009542184416204691,0.0012897338019683957],[-0.001359752262942493,-0.00011802567314589396],[-0.0007974558975547552,-0.0013648291351273656],[-0.0037519033066928387,0.004479076247662306]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0010852840496227145,0.2988804280757904,0.7432194948196411],"rotation":[0.011974133551120758,-0.9719842672348022,-0.017687616869807243,-0.23407331109046936],"used":true,"bodyHandle":4.83e-321,"linearSpeed":0,"angularVelocityHistory":[[0.018765145912766457,0.0068533774465322495],[0.1687575876712799,-0.11714500188827515],[0.14564716815948486,-0.17574381828308105],[0.1105751097202301,-0.1168651357293129],[-0.054031360894441605,0.08795487135648727],[-0.004204109311103821,-0.03863467276096344],[0.11628112941980362,0.024134796112775803],[0.05586523562669754,0.016125518828630447],[0.05266505107283592,-0.1423456221818924],[-0.026549093425273895,0.15978236496448517]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3466542959213257,0.1818387806415558,0.6135302186012268],"rotation":[-0.9724293947219849,-0.0483514778316021,-0.20314474403858185,0.10380396991968155],"used":true,"bodyHandle":4.837e-321,"linearSpeed":8.856195083383804e-8,"angularVelocityHistory":[[0.0008303401409648359,0.0007832017727196217],[-0.0018103483598679304,0.007498139049857855],[-0.010627089999616146,0.01824060082435608],[-0.005674496293067932,0.008486660197377205],[0.011126803234219551,-0.015227613970637321],[0.0017965558217838407,-0.005931174848228693],[-0.005259994883090258,0.020811179652810097],[-0.0006585890077985823,0.0021753907203674316],[0.0006382630672305822,0.0033493665978312492],[-0.0001320597220910713,-0.00047642074059695005],[-0.003511202521622181,0.005596107337623835]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.062131330370903015,0.299734890460968,0.7021503448486328],"rotation":[-0.017271101474761963,-0.9464831352233887,0.019495947286486626,0.3217005431652069],"used":true,"bodyHandle":4.84e-321,"linearSpeed":0,"angularVelocityHistory":[[0.2934190630912781,-0.020567553117871284],[-0.25857022404670715,0.1379169374704361],[-0.046576350927352905,0.181871235370636],[-0.1286531537771225,0.1181282326579094],[-0.23907271027565002,-0.325400710105896],[-0.08140306919813156,0.005999217741191387],[-0.1521153301000595,0.004157888703048229],[-0.13210609555244446,-0.0839681327342987],[-0.0509047769010067,0.08692464232444763],[-0.24560391902923584,-0.050022173672914505]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[-0.3349401354789734,0.17840978503227234,0.6105801463127136],"rotation":[-0.9364221692085266,-0.024940555915236473,-0.3448973000049591,0.05947639420628548],"used":true,"bodyHandle":4.847e-321,"linearSpeed":6.111031052642428e-8,"angularVelocityHistory":[[-0.00039601378375664353,-0.002415963215753436],[-0.0030444299336522818,0.00971764512360096],[-0.004923072177916765,0.009839638136327267],[-0.0028676644433289766,0.005265333689749241],[0.005925938952714205,-0.014966229908168316],[0.0008448512526229024,-0.003223972162231803],[0.0002347217669012025,0.00839104875922203],[-0.00047739301226101816,0.0008743951912038028],[0.0005183201865293086,0.002253240905702114],[0.0019566351547837257,-0.002913061762228608],[-0.0017059801612049341,0.006643582135438919]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.05610362067818642,0.29819780588150024,0.6363266110420227],"rotation":[0.02682134136557579,-0.6398323774337769,0.026027092710137367,0.767605185508728],"used":true,"bodyHandle":4.85e-321,"linearSpeed":0,"angularVelocityHistory":[[-0.006631696131080389,0.04247650131583214],[0.09605475515127182,0.1318817138671875],[-0.12412123382091522,0.05138011649250984],[0.003948677331209183,0.13756456971168518],[-0.0975538045167923,-0.12467830628156662],[0.08848109096288681,0.11257001757621765],[-0.03901876136660576,0.10303518176078796],[0.04330182448029518,-0.09387360513210297],[0.34801602363586426,0.1259743571281433],[0.05617909878492355,0.2022731602191925]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0.0005241244216449559,0.30002111196517944,0.6752083897590637],"rotation":[0.031676411628723145,0.07098279148340225,0.000262375280726701,0.9969744086265564],"used":true,"bodyHandle":4.857e-321,"linearSpeed":0,"angularVelocityHistory":[[0.17040768265724182,-0.008454340510070324],[0.01944294571876526,-0.029513055458664894],[-0.10193844884634018,0.0055680349469184875],[-0.1445649266242981,-0.1063883900642395],[-0.3381231427192688,0.21078436076641083],[-0.058233506977558136,0.39766645431518555],[-0.03242797404527664,-0.0478641502559185],[-0.059307392686605453,0.0456722117960453],[-0.2688744366168976,0.1017564907670021],[-0.1269787847995758,-0.04363591969013214]],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.86e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.867e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.87e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.876e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.88e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.886e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.89e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.896e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.9e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.906e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.91e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.916e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.92e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.926e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.93e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.936e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.94e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.946e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.95e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.955e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.96e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.965e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.97e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.975e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.98e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.985e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.99e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.995e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.005e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.01e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.015e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.02e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.025e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.03e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.035e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.04e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.044e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.05e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.054e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.06e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.064e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.07e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.074e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.08e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.084e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.09e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.094e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.1e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.104e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.11e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.114e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.12e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.123e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.13e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.133e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.14e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.143e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.15e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.153e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.16e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.163e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.17e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.173e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.18e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.183e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.19e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.193e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.2e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.203e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.207e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.21e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.217e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.22e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.227e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.23e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.237e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.24e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.247e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.25e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.257e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.26e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.267e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.27e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.277e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.28e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.287e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.29e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.296e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.3e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.306e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.31e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.316e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.32e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.326e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.33e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.336e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.34e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.346e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.35e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.356e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.36e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.366e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.37e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.375e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.38e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.385e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.39e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.395e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.4e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.405e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.41e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.415e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.42e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.425e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.43e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.435e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.44e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.445e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.45e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.454e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.46e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.464e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.47e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.474e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.48e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.484e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.49e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.494e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.5e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.504e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.51e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.514e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.52e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.524e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.53e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.534e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.54e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.543e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.55e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.553e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.56e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.563e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.57e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.573e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.58e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.583e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.59e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.593e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.6e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.603e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.61e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.613e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.618e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.62e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.627e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.63e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.637e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.64e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.647e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.65e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.657e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.66e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.667e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.67e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.677e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.68e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.687e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.69e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.697e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.7e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.706e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.71e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.716e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.72e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.726e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.73e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.736e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.74e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.746e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.75e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.756e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.76e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.766e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.77e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.776e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.78e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.786e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.79e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.795e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.8e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.805e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.81e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.815e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.82e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.825e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.83e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.835e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.84e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.845e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.85e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.855e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.86e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.865e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.87e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.874e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.88e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.884e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.89e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.894e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.9e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.904e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.91e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.914e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.92e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.924e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.93e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.934e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.94e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.944e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.95e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.953e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.96e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.963e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.97e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.973e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.98e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.983e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.99e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.993e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.003e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.01e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.013e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.02e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.023e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.03e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.033e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.037e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.04e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.047e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.05e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.057e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.06e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.067e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.07e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.077e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.08e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.087e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.09e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.097e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.1e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.107e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.11e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.117e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.12e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.126e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.13e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.136e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.14e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.146e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.15e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.156e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.16e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.166e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.17e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.176e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.18e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.186e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.19e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.196e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.2e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.205e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.21e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.215e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.22e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.225e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.23e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.235e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.24e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.245e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.25e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.255e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.26e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.265e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.27e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.275e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.28e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.285e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.29e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.294e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.3e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.304e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.31e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.314e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.32e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.324e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.33e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.334e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.34e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.344e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.35e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.354e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.36e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.364e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.37e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.373e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.38e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.383e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.39e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.393e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.4e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.403e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.41e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.413e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.42e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.423e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.43e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.433e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.44e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.443e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.45e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.452e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.457e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.46e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.467e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.47e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.477e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.48e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.487e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.49e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.497e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.5e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.507e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.51e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.517e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.52e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.527e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.53e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.536e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.54e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.546e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.55e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.556e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.56e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.566e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.57e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.576e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.58e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.586e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.59e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.596e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.6e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.606e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.61e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.616e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.62e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.625e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.63e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.635e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.64e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.645e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.65e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.655e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.66e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.665e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.67e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.675e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.68e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.685e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.69e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.695e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.7e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.704e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.71e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.714e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.72e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.724e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.73e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.734e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.74e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.744e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.75e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.754e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.76e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.764e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.77e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.774e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.78e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.784e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.79e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.793e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.8e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.803e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.81e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.813e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.82e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.823e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.83e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.833e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.84e-321,"angularVelocityHistory":[],"sleepCandidateFrames":0,"pendingImpulse":null}],"tokens":[[{"position":[0.07476367056369781,0.17995887994766235,0.5068228244781494],"rotation":[-0.0033555564004927874,-0.7911791801452637,-0.0060473415069282055,0.6115452647209167],"used":true,"bodyHandle":4.4e-323},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5e-323},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.4e-323},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6e-323},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.4e-323},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7e-323},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.4e-323},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":8e-323},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":8.4e-323},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":9e-323},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":9.4e-323},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.04e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.1e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.14e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.2e-322}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.24e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.3e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.33e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.4e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.43e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.5e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.53e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.6e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.63e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.7e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.73e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.8e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.83e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.9e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.93e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2e-322}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.03e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.08e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.1e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.17e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.2e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.27e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.3e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.37e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.4e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.47e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.5e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.57e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.6e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.67e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.7e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.77e-322}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.8e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.87e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.9e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.96e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.06e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.1e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.16e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.2e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.26e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.3e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.36e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.4e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.46e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.5e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.56e-322}],[{"position":[-0.49970704317092896,0.18774433434009552,0.662104606628418],"rotation":[0.020587751641869545,-0.9903590679168701,-0.042208872735500336,-0.13032105565071106],"used":true,"bodyHandle":3.6e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.66e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.7e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.75e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.8e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.85e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.9e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.95e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.05e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.1e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.15e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.2e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.25e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.3e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.35e-322}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.4e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.45e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.5e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.55e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.6e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.64e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.7e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.74e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.8e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.84e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.9e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.94e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.04e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.1e-322},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.14e-322}]],"buttons":[[[{"enabled":false,"isPressing":false,"isBlinking":false,"frameBlinkStart":-1,"blinkingOn":false,"framePressStart":-1,"position":[-0.2,0.16125,1.25]},{"enabled":false,"isPressing":false,"isBlinking":false,"frameBlinkStart":-1,"blinkingOn":false,"framePressStart":-1,"position":[0,0.16125,1.25]},{"enabled":false,"isPressing":false,"isBlinking":false,"frameBlinkStart":-1,"blinkingOn":false,"framePressStart":-1,"position":[0.2,0.16125,1.25]}],[{"enabled":true,"isPressing":false,"isBlinking":true,"frameBlinkStart":26,"blinkingOn":true,"framePressStart":-1,"position":[0.4,0.16125,1.25]},{"enabled":false,"isPressing":false,"isBlinking":false,"frameBlinkStart":-1,"blinkingOn":false,"framePressStart":-1,"position":[0,0,0]},{"enabled":false,"isPressing":false,"isBlinking":false,"frameBlinkStart":-1,"blinkingOn":false,"framePressStart":-1,"position":[0,0,0]}],[{"enabled":false,"isPressing":false,"isBlinking":false,"frameBlinkStart":-1,"blinkingOn":false,"framePressStart":-1,"position":[-0.4,0.16125,1.25]},{"enabled":false,"isPressing":false,"isBlinking":false,"frameBlinkStart":-1,"blinkingOn":false,"framePressStart":-1,"position":[0,0,0]},{"enabled":false,"isPressing":false,"isBlinking":false,"frameBlinkStart":-1,"blinkingOn":false,"framePressStart":-1,"position":[0,0,0]}]]],"ingots":[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.843e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.85e-321},{"position":[-0.07755599170923233,0.18578244745731354,0.35059186816215515],"rotation":[0.01440604217350483,0.5459033250808716,-0.0028783250600099564,0.8377193808555603],"used":true,"bodyHandle":6.853e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.86e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.863e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.868e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.87e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.877e-321}],"state":{"score":0,"points":0,"coins":0},"sensorCollidersHandles":{"gutter":5e-324,"left-trap":1e-323,"right-trap":1.5e-323},"pusher":{"state":"pusher-moving","nextState":null,"phase":3.6128315516295695,"rewards":[],"platformBodyHandle":7.17e-321,"doorBodyHandle":7.164e-321,"door":{"position":0},"lights":{"state":"pusher-lights-idle","nextState":null,"frameLastRefresh":-1,"headIndex":0,"bulbs":[{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0}]}},"sensorGate":{"colliderHandle":7.574e-321,"sensor":{"state":"sensor-letter-idle","nextState":null,"frameFlashStart":-1,"flashCount":0,"letters":[{"state":"sensor-gate-locked-on","nextState":null,"frameFlashStart":-1,"flashCount":0},{"state":"sensor-gate-locked-on","nextState":null,"frameFlashStart":-1,"flashCount":0},{"state":"sensor-gate-off","nextState":null,"frameFlashStart":-1,"flashCount":0},{"state":"sensor-gate-locked-on","nextState":null,"frameFlashStart":-1,"flashCount":0},{"state":"sensor-gate-off","nextState":null,"frameFlashStart":-1,"flashCount":0},{"state":"sensor-gate-locked-on","nextState":null,"frameFlashStart":-1,"flashCount":0}]}},"reelsBox":{"state":"reels-box-idle","nextState":null,"pendingSpins":0,"frameActive":-1,"reels":[{"state":"reel-idle","nextState":null,"index":0,"rotation":0,"previousRotation":0,"currentSpeed":0,"targetIndex":-1,"targetRotation":-1},{"state":"reel-idle","nextState":null,"index":0,"rotation":0,"previousRotation":0,"currentSpeed":0,"targetIndex":-1,"targetRotation":-1},{"state":"reel-idle","nextState":null,"index":0,"rotation":0,"previousRotation":0,"currentSpeed":0,"targetIndex":-1,"targetRotation":-1}],"lights":{"state":"reels-box-lights-idle","headIndex":0,"frameLastRefresh":-1,"bulbs":[{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0}]}},"excavator":{"state":"excavator-idle","nextState":null,"pendingPicks":0,"beaconLightAngle":0,"joints":{"joint-jaw-4":{"jointHandle":0},"joint-jaw-1":{"jointHandle":5e-324},"joint-jaw-3":{"jointHandle":1e-323},"joint-jaw-2":{"jointHandle":1.5e-323},"joint-jaws":{"jointHandle":2e-323},"joint-arms":{"jointHandle":2.5e-323},"joint-arm-rotating-platform":{"jointHandle":3e-323},"joint-rotating-platform":{"jointHandle":3.5e-323},"joint-base":{"jointHandle":4e-323}},"parts":{"jaw-1":{"bodyHandle":7.22e-321},"rotating-platform-base":{"bodyHandle":7.223e-321},"arm-rotating-platform":{"bodyHandle":7.23e-321},"rotating-platform":{"bodyHandle":7.233e-321},"arm-jaws":{"bodyHandle":7.24e-321},"jaws":{"bodyHandle":7.243e-321},"base":{"bodyHandle":7.25e-321},"trap-excavator":{"bodyHandle":7.253e-321},"jaw-4":{"bodyHandle":7.26e-321},"jaw-3":{"bodyHandle":7.263e-321},"jaw-2":{"bodyHandle":7.27e-321},"beacon-light-base":{"bodyHandle":7.273e-321},"beacon-light-mirror":{"bodyHandle":7.28e-321},"beacon-light-bulb":{"bodyHandle":7.283e-321}},"trapSensorHandle":7.614e-321},"leftTower":{"state":"tower-idle","nextState":null,"parts":{"turret":{"bodyHandle":7.287e-321},"stand":{"bodyHandle":7.29e-321},"cabinet":{"bodyHandle":7.297e-321}},"position":0,"oscillationCount":0,"pendingShots":0,"phase":0,"frameLastShot":-1,"lightOn":false},"rightTower":{"state":"tower-idle","nextState":null,"parts":{"turret":{"bodyHandle":7.3e-321},"stand":{"bodyHandle":7.307e-321},"cabinet":{"bodyHandle":7.31e-321}},"position":0,"oscillationCount":0,"pendingShots":0,"phase":0,"frameLastShot":-1,"lightOn":false},"coinRoller":{"state":"coin-roller-idle","nextState":null,"sensorCollidersHandles":{"slot-1":7.9e-321,"slot-3":7.91e-321,"slot-2":7.915e-321,"trap":7.93e-321},"coinIndex":null,"launcherBodyHandle":7.446e-321,"trapBodyHandle":7.45e-321,"doorsBodyHandle":7.46e-321,"launcherPhase":0,"trapPosition":0,"doorsPosition":0,"pendingShots":0,"lights":[{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1}],"lightsHeadIndex":-1,"lightsDirection":1,"lightsRefreshes":-1},"stacker":{"state":"stacker-idle","parts":{"base":{"bodyHandle":7.184e-321},"support":{"bodyHandle":7.19e-321},"arm":{"bodyHandle":7.194e-321},"arm-protection":{"bodyHandle":7.2e-321},"arm-protection-lid":{"bodyHandle":7.203e-321},"arm-door":{"bodyHandle":7.21e-321}},"position":0,"supportPosition":0,"basePosition":0,"armPosition":0,"armDoorPosition":0,"armProtectionLidAngle":0,"rotations":0,"rotationDirection":1,"baseAngle":0,"level":0,"stacks":-1,"levels":-1,"pendingDeliveries":[],"nextState":null,"coinHandle":null,"coinsHandles":[],"lights":{"state":"stacker-lights-idle","nextState":null,"frameLastRefresh":-1,"bulbs":[{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0}]}},"leftStacker":{"state":"stacker-idle","parts":{"base":{"bodyHandle":7.317e-321},"arm":{"bodyHandle":7.32e-321},"support":{"bodyHandle":7.327e-321},"arm-protection-lid":{"bodyHandle":7.33e-321},"arm-door":{"bodyHandle":7.337e-321},"arm-protection":{"bodyHandle":7.34e-321}},"position":0,"supportPosition":0,"basePosition":0,"armPosition":0,"armDoorPosition":0,"armProtectionLidAngle":0,"baseAngle":0,"level":0,"levels":-1,"pendingDeliveries":[],"nextState":null,"coinHandle":null,"coinsHandles":[],"lights":{"state":"stacker-lights-idle","nextState":null,"frameLastRefresh":-1,"bulbs":[{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0}]}},"rightStacker":{"state":"stacker-idle","parts":{"base":{"bodyHandle":7.347e-321},"arm":{"bodyHandle":7.35e-321},"support":{"bodyHandle":7.357e-321},"arm-protection-lid":{"bodyHandle":7.36e-321},"arm-door":{"bodyHandle":7.367e-321},"arm-protection":{"bodyHandle":7.37e-321}},"position":0,"supportPosition":0,"basePosition":0,"armPosition":0,"armDoorPosition":0,"armProtectionLidAngle":0,"baseAngle":0,"level":0,"levels":-1,"pendingDeliveries":[],"nextState":null,"coinHandle":null,"coinsHandles":[],"lights":{"state":"stacker-lights-idle","nextState":null,"frameLastRefresh":-1,"bulbs":[{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0}]}},"sweepers":{"state":"sweepers-idle","nextState":null,"parts":{"left-sweeper":{"bodyHandle":7.376e-321},"left-base":{"bodyHandle":7.38e-321},"right-base":{"bodyHandle":7.386e-321},"left-door":{"bodyHandle":7.39e-321},"right-door":{"bodyHandle":7.396e-321},"left-flap":{"bodyHandle":7.4e-321},"right-flap":{"bodyHandle":7.406e-321},"right-sweeper":{"bodyHandle":7.41e-321}},"position":0,"rotation":0,"translation":0,"sweepersRotationZ":0,"sweepersRotationY":0,"doorsRotation":0,"pendingSweeps":[],"lights":{"state":"sweepers-lights-idle","nextState":null,"leftOn":false,"rightOn":false,"frameLastRefresh":-1}},"runs":{"state":"runs-idle","step":-1,"timeRunCompleted":-1},"scene":{"world":""}}'),b4={time:nA,cabinet:iA},sA=E8.TIMESTEP*1e3;class Nn{static DEBUG_MAX_SPEED=!1;static DEBUG_EMPTY_POOL=!1;static DEBUG_COLLIDERS=!1;static DEBUG_FPS=!1;static DEBUG_POLYGONS=!1;static DEBUG_CONTROLS=!1;static DEBUG_AUTOPLAY=!1;static DEBUG_HIDE_CABINET=!1;static#e;static#t=0;static#n;static#o=!1;static#a=!1;static#r;static#c;static pixelRatio=2;static async initialize(){this.#n=document.body;const e=new tA(this.width/this.height);this.#r=new E8({containerElement:this.#n,camera:e}),await this.#r.initialize(this.width,this.height,this.pixelRatio),this.#e=new YX({scene:this.#r}),this.#e.DEBUG_AUTOPLAY=this.DEBUG_AUTOPLAY,this.#e.DEBUG_HIDE_CABINET=this.DEBUG_HIDE_CABINET,await this.#e.initialize(),this.DEBUG_EMPTY_POOL||await this.load(b4),this.#c=new KX({scene:this.#r,camera:e,interactiveObjects:this.#e.interactiveObjects}),this.#c.initialize(this.width,this.height),n1.DEBUG_COLLIDERS=this.DEBUG_COLLIDERS,n1.DEBUG_FPS=this.DEBUG_FPS,n1.DEBUG_POLYGONS=this.DEBUG_POLYGONS,n1.DEBUG_CONTROLS=this.DEBUG_CONTROLS,await n1.initialize({scene:this.#r,camera:e,containerElement:this.#n,joints:this.#e.joints}),new ResizeObserver(()=>this.#s()).observe(this.#n),onkeydown=async n=>{(n.key==="s"||n.key==="S")&&n.ctrlKey&&(n.preventDefault(),console.log(await this.save())),(n.key==="l"||n.key==="L")&&n.ctrlKey&&(n.preventDefault(),await this.load(b4))}}static run(){this.#i()}static#i(){this.#a&&(this.#a=!1,this.#o=!1),this.#o||(this.#e.update(this.#t),this.#c.update(),n1.update(),this.#r.step(),this.#r.render(),this.#t+=sA),this.DEBUG_MAX_SPEED?setTimeout(()=>this.#i(),0):requestAnimationFrame(()=>this.#i())}static async save(){return{time:this.#t,cabinet:await this.#e.save()}}static async load(e){this.#o=!0,this.#t=e.time,await this.#e.load(e.cabinet),this.#o=!1,this.#a=!0}static#s(){this.#r.resize(this.width,this.height,this.pixelRatio),this.#e.resize(this.width,this.height)}static get width(){return this.#n.clientWidth}static get height(){return this.#n.clientHeight}}Nn.DEBUG_EMPTY_POOL=1;Nn.DEBUG_AUTOPLAY=0;Nn.DEBUG_MAX_SPEED=0;Nn.DEBUG_COLLIDERS=0;Nn.DEBUG_HIDE_CABINET=0;Nn.DEBUG_POLYGONS=0;Nn.DEBUG_CONTROLS=1;Nn.DEBUG_FPS=1;await Nn.initialize();Nn.run();
