(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const r of s)if(r.type==="childList")for(const o of r.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&n(o)}).observe(document,{childList:!0,subtree:!0});function t(s){const r={};return s.integrity&&(r.integrity=s.integrity),s.referrerPolicy&&(r.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?r.credentials="include":s.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function n(s){if(s.ep)return;s.ep=!0;const r=t(s);fetch(s.href,r)}})();/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const Ac="178",hr={ROTATE:0,DOLLY:1,PAN:2},dr={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},$3=0,mu=1,eh=2,b2=1,th=2,vi=3,Ui=0,qn=1,gi=2,us=0,mr=1,bu=2,vu=3,yu=4,nh=5,Ls=100,ih=101,sh=102,rh=103,oh=104,ah=200,lh=201,dh=202,ch=203,ld=204,dd=205,uh=206,ph=207,fh=208,hh=209,mh=210,bh=211,vh=212,yh=213,wh=214,cd=0,ud=1,pd=2,gr=3,fd=4,hd=5,md=6,bd=7,Xc=0,gh=1,xh=2,ps=0,Th=1,Sh=2,Ph=3,v2=4,Rh=5,Lh=6,Nh=7,wu="attached",Mh="detached",y2=300,xr=301,Tr=302,vd=303,yd=304,y0=306,Sr=1e3,xi=1001,qa=1002,In=1003,w2=1004,no=1005,wn=1006,Ea=1007,Ti=1008,Si=1009,g2=1010,x2=1011,co=1012,Ic=1013,Os=1014,Fn=1015,Ci=1016,Dc=1017,Wc=1018,uo=1020,T2=35902,S2=1021,P2=1022,kn=1023,po=1026,fo=1027,w0=1028,jc=1029,R2=1030,Vc=1031,Cc=1033,Aa=33776,Xa=33777,Ia=33778,Da=33779,wd=35840,gd=35841,xd=35842,Td=35843,Sd=36196,Pd=37492,Rd=37496,Ld=37808,Nd=37809,Md=37810,Od=37811,zd=37812,Hd=37813,Ed=37814,Ad=37815,Xd=37816,Id=37817,Dd=37818,Wd=37819,jd=37820,Vd=37821,Wa=36492,Cd=36494,Fd=36495,L2=36283,qd=36284,Yd=36285,Gd=36286,ho=2300,mo=2301,j0=2302,gu=2400,xu=2401,Tu=2402,Oh=2500,zh=0,N2=1,Ud=2,Hh=3200,Eh=3201,Fc=0,Ah=1,ji="",yn="srgb",Sn="srgb-linear",Ya="linear",It="srgb",Vs=7680,Su=519,Xh=512,Ih=513,Dh=514,M2=515,Wh=516,jh=517,Vh=518,Ch=519,Zd=35044,Pu="300 es",Fi=2e3,Ga=2001;class Xs{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){const n=this._listeners;return n===void 0?!1:n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){const n=this._listeners;if(n===void 0)return;const s=n[e];if(s!==void 0){const r=s.indexOf(t);r!==-1&&s.splice(r,1)}}dispatchEvent(e){const t=this._listeners;if(t===void 0)return;const n=t[e.type];if(n!==void 0){e.target=this;const s=n.slice(0);for(let r=0,o=s.length;r<o;r++)s[r].call(this,e);e.target=null}}}const Pn=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let Ru=1234567;const br=Math.PI/180,Pr=180/Math.PI;function fi(){const i=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(Pn[i&255]+Pn[i>>8&255]+Pn[i>>16&255]+Pn[i>>24&255]+"-"+Pn[e&255]+Pn[e>>8&255]+"-"+Pn[e>>16&15|64]+Pn[e>>24&255]+"-"+Pn[t&63|128]+Pn[t>>8&255]+"-"+Pn[t>>16&255]+Pn[t>>24&255]+Pn[n&255]+Pn[n>>8&255]+Pn[n>>16&255]+Pn[n>>24&255]).toLowerCase()}function lt(i,e,t){return Math.max(e,Math.min(t,i))}function qc(i,e){return(i%e+e)%e}function Fh(i,e,t,n,s){return n+(i-e)*(s-n)/(t-e)}function qh(i,e,t){return i!==e?(t-i)/(e-i):0}function so(i,e,t){return(1-t)*i+t*e}function Yh(i,e,t,n){return so(i,e,1-Math.exp(-t*n))}function Gh(i,e=1){return e-Math.abs(qc(i,e*2)-e)}function Uh(i,e,t){return i<=e?0:i>=t?1:(i=(i-e)/(t-e),i*i*(3-2*i))}function Zh(i,e,t){return i<=e?0:i>=t?1:(i=(i-e)/(t-e),i*i*i*(i*(i*6-15)+10))}function kh(i,e){return i+Math.floor(Math.random()*(e-i+1))}function Jh(i,e){return i+Math.random()*(e-i)}function Bh(i){return i*(.5-Math.random())}function Kh(i){i!==void 0&&(Ru=i);let e=Ru+=1831565813;return e=Math.imul(e^e>>>15,e|1),e^=e+Math.imul(e^e>>>7,e|61),((e^e>>>14)>>>0)/4294967296}function Qh(i){return i*br}function _h(i){return i*Pr}function $h(i){return(i&i-1)===0&&i!==0}function e7(i){return Math.pow(2,Math.ceil(Math.log(i)/Math.LN2))}function t7(i){return Math.pow(2,Math.floor(Math.log(i)/Math.LN2))}function n7(i,e,t,n,s){const r=Math.cos,o=Math.sin,a=r(t/2),l=o(t/2),d=r((e+n)/2),c=o((e+n)/2),u=r((e-n)/2),p=o((e-n)/2),h=r((n-e)/2),v=o((n-e)/2);switch(s){case"XYX":i.set(a*c,l*u,l*p,a*d);break;case"YZY":i.set(l*p,a*c,l*u,a*d);break;case"ZXZ":i.set(l*u,l*p,a*c,a*d);break;case"XZX":i.set(a*c,l*v,l*h,a*d);break;case"YXY":i.set(l*h,a*c,l*v,a*d);break;case"ZYZ":i.set(l*v,l*h,a*c,a*d);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+s)}}function pi(i,e){switch(e.constructor){case Float32Array:return i;case Uint32Array:return i/4294967295;case Uint16Array:return i/65535;case Uint8Array:return i/255;case Int32Array:return Math.max(i/2147483647,-1);case Int16Array:return Math.max(i/32767,-1);case Int8Array:return Math.max(i/127,-1);default:throw new Error("Invalid component type.")}}function Mt(i,e){switch(e.constructor){case Float32Array:return i;case Uint32Array:return Math.round(i*4294967295);case Uint16Array:return Math.round(i*65535);case Uint8Array:return Math.round(i*255);case Int32Array:return Math.round(i*2147483647);case Int16Array:return Math.round(i*32767);case Int8Array:return Math.round(i*127);default:throw new Error("Invalid component type.")}}const O2={DEG2RAD:br,RAD2DEG:Pr,generateUUID:fi,clamp:lt,euclideanModulo:qc,mapLinear:Fh,inverseLerp:qh,lerp:so,damp:Yh,pingpong:Gh,smoothstep:Uh,smootherstep:Zh,randInt:kh,randFloat:Jh,randFloatSpread:Bh,seededRandom:Kh,degToRad:Qh,radToDeg:_h,isPowerOfTwo:$h,ceilPowerOfTwo:e7,floorPowerOfTwo:t7,setQuaternionFromProperEuler:n7,normalize:Mt,denormalize:pi};class et{constructor(e=0,t=0){et.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,s=e.elements;return this.x=s[0]*t+s[3]*n+s[6],this.y=s[1]*t+s[4]*n+s[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=lt(this.x,e.x,t.x),this.y=lt(this.y,e.y,t.y),this}clampScalar(e,t){return this.x=lt(this.x,e,t),this.y=lt(this.y,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(lt(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(lt(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),s=Math.sin(t),r=this.x-e.x,o=this.y-e.y;return this.x=r*n-o*s+e.x,this.y=r*s+o*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}let _e=class{constructor(e=0,t=0,n=0,s=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=s}static slerpFlat(e,t,n,s,r,o,a){let l=n[s+0],d=n[s+1],c=n[s+2],u=n[s+3];const p=r[o+0],h=r[o+1],v=r[o+2],x=r[o+3];if(a===0){e[t+0]=l,e[t+1]=d,e[t+2]=c,e[t+3]=u;return}if(a===1){e[t+0]=p,e[t+1]=h,e[t+2]=v,e[t+3]=x;return}if(u!==x||l!==p||d!==h||c!==v){let m=1-a;const f=l*p+d*h+c*v+u*x,N=f>=0?1:-1,O=1-f*f;if(O>Number.EPSILON){const j=Math.sqrt(O),D=Math.atan2(j,f*N);m=Math.sin(m*D)/j,a=Math.sin(a*D)/j}const P=a*N;if(l=l*m+p*P,d=d*m+h*P,c=c*m+v*P,u=u*m+x*P,m===1-a){const j=1/Math.sqrt(l*l+d*d+c*c+u*u);l*=j,d*=j,c*=j,u*=j}}e[t]=l,e[t+1]=d,e[t+2]=c,e[t+3]=u}static multiplyQuaternionsFlat(e,t,n,s,r,o){const a=n[s],l=n[s+1],d=n[s+2],c=n[s+3],u=r[o],p=r[o+1],h=r[o+2],v=r[o+3];return e[t]=a*v+c*u+l*h-d*p,e[t+1]=l*v+c*p+d*u-a*h,e[t+2]=d*v+c*h+a*p-l*u,e[t+3]=c*v-a*u-l*p-d*h,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,s){return this._x=e,this._y=t,this._z=n,this._w=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t=!0){const n=e._x,s=e._y,r=e._z,o=e._order,a=Math.cos,l=Math.sin,d=a(n/2),c=a(s/2),u=a(r/2),p=l(n/2),h=l(s/2),v=l(r/2);switch(o){case"XYZ":this._x=p*c*u+d*h*v,this._y=d*h*u-p*c*v,this._z=d*c*v+p*h*u,this._w=d*c*u-p*h*v;break;case"YXZ":this._x=p*c*u+d*h*v,this._y=d*h*u-p*c*v,this._z=d*c*v-p*h*u,this._w=d*c*u+p*h*v;break;case"ZXY":this._x=p*c*u-d*h*v,this._y=d*h*u+p*c*v,this._z=d*c*v+p*h*u,this._w=d*c*u-p*h*v;break;case"ZYX":this._x=p*c*u-d*h*v,this._y=d*h*u+p*c*v,this._z=d*c*v-p*h*u,this._w=d*c*u+p*h*v;break;case"YZX":this._x=p*c*u+d*h*v,this._y=d*h*u+p*c*v,this._z=d*c*v-p*h*u,this._w=d*c*u-p*h*v;break;case"XZY":this._x=p*c*u-d*h*v,this._y=d*h*u-p*c*v,this._z=d*c*v+p*h*u,this._w=d*c*u+p*h*v;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return t===!0&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,s=Math.sin(n);return this._x=e.x*s,this._y=e.y*s,this._z=e.z*s,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],s=t[4],r=t[8],o=t[1],a=t[5],l=t[9],d=t[2],c=t[6],u=t[10],p=n+a+u;if(p>0){const h=.5/Math.sqrt(p+1);this._w=.25/h,this._x=(c-l)*h,this._y=(r-d)*h,this._z=(o-s)*h}else if(n>a&&n>u){const h=2*Math.sqrt(1+n-a-u);this._w=(c-l)/h,this._x=.25*h,this._y=(s+o)/h,this._z=(r+d)/h}else if(a>u){const h=2*Math.sqrt(1+a-n-u);this._w=(r-d)/h,this._x=(s+o)/h,this._y=.25*h,this._z=(l+c)/h}else{const h=2*Math.sqrt(1+u-n-a);this._w=(o-s)/h,this._x=(r+d)/h,this._y=(l+c)/h,this._z=.25*h}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<1e-8?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(lt(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const s=Math.min(1,t/n);return this.slerp(e,s),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,s=e._y,r=e._z,o=e._w,a=t._x,l=t._y,d=t._z,c=t._w;return this._x=n*c+o*a+s*d-r*l,this._y=s*c+o*l+r*a-n*d,this._z=r*c+o*d+n*l-s*a,this._w=o*c-n*a-s*l-r*d,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,s=this._y,r=this._z,o=this._w;let a=o*e._w+n*e._x+s*e._y+r*e._z;if(a<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,a=-a):this.copy(e),a>=1)return this._w=o,this._x=n,this._y=s,this._z=r,this;const l=1-a*a;if(l<=Number.EPSILON){const h=1-t;return this._w=h*o+t*this._w,this._x=h*n+t*this._x,this._y=h*s+t*this._y,this._z=h*r+t*this._z,this.normalize(),this}const d=Math.sqrt(l),c=Math.atan2(d,a),u=Math.sin((1-t)*c)/d,p=Math.sin(t*c)/d;return this._w=o*u+this._w*p,this._x=n*u+this._x*p,this._y=s*u+this._y*p,this._z=r*u+this._z*p,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=2*Math.PI*Math.random(),t=2*Math.PI*Math.random(),n=Math.random(),s=Math.sqrt(1-n),r=Math.sqrt(n);return this.set(s*Math.sin(e),s*Math.cos(e),r*Math.sin(t),r*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}},T=class z2{constructor(e=0,t=0,n=0){z2.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(Lu.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(Lu.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,s=this.z,r=e.elements;return this.x=r[0]*t+r[3]*n+r[6]*s,this.y=r[1]*t+r[4]*n+r[7]*s,this.z=r[2]*t+r[5]*n+r[8]*s,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,s=this.z,r=e.elements,o=1/(r[3]*t+r[7]*n+r[11]*s+r[15]);return this.x=(r[0]*t+r[4]*n+r[8]*s+r[12])*o,this.y=(r[1]*t+r[5]*n+r[9]*s+r[13])*o,this.z=(r[2]*t+r[6]*n+r[10]*s+r[14])*o,this}applyQuaternion(e){const t=this.x,n=this.y,s=this.z,r=e.x,o=e.y,a=e.z,l=e.w,d=2*(o*s-a*n),c=2*(a*t-r*s),u=2*(r*n-o*t);return this.x=t+l*d+o*u-a*c,this.y=n+l*c+a*d-r*u,this.z=s+l*u+r*c-o*d,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,s=this.z,r=e.elements;return this.x=r[0]*t+r[4]*n+r[8]*s,this.y=r[1]*t+r[5]*n+r[9]*s,this.z=r[2]*t+r[6]*n+r[10]*s,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=lt(this.x,e.x,t.x),this.y=lt(this.y,e.y,t.y),this.z=lt(this.z,e.z,t.z),this}clampScalar(e,t){return this.x=lt(this.x,e,t),this.y=lt(this.y,e,t),this.z=lt(this.z,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(lt(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,s=e.y,r=e.z,o=t.x,a=t.y,l=t.z;return this.x=s*l-r*a,this.y=r*o-n*l,this.z=n*a-s*o,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return V0.copy(this).projectOnVector(e),this.sub(V0)}reflect(e){return this.sub(V0.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(lt(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,s=this.z-e.z;return t*t+n*n+s*s}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const s=Math.sin(t)*e;return this.x=s*Math.sin(n),this.y=Math.cos(t)*e,this.z=s*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),s=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=s,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=Math.random()*Math.PI*2,t=Math.random()*2-1,n=Math.sqrt(1-t*t);return this.x=n*Math.cos(e),this.y=t,this.z=n*Math.sin(e),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}};const V0=new T,Lu=new _e;class rt{constructor(e,t,n,s,r,o,a,l,d){rt.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],e!==void 0&&this.set(e,t,n,s,r,o,a,l,d)}set(e,t,n,s,r,o,a,l,d){const c=this.elements;return c[0]=e,c[1]=s,c[2]=a,c[3]=t,c[4]=r,c[5]=l,c[6]=n,c[7]=o,c[8]=d,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,s=t.elements,r=this.elements,o=n[0],a=n[3],l=n[6],d=n[1],c=n[4],u=n[7],p=n[2],h=n[5],v=n[8],x=s[0],m=s[3],f=s[6],N=s[1],O=s[4],P=s[7],j=s[2],D=s[5],V=s[8];return r[0]=o*x+a*N+l*j,r[3]=o*m+a*O+l*D,r[6]=o*f+a*P+l*V,r[1]=d*x+c*N+u*j,r[4]=d*m+c*O+u*D,r[7]=d*f+c*P+u*V,r[2]=p*x+h*N+v*j,r[5]=p*m+h*O+v*D,r[8]=p*f+h*P+v*V,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],s=e[2],r=e[3],o=e[4],a=e[5],l=e[6],d=e[7],c=e[8];return t*o*c-t*a*d-n*r*c+n*a*l+s*r*d-s*o*l}invert(){const e=this.elements,t=e[0],n=e[1],s=e[2],r=e[3],o=e[4],a=e[5],l=e[6],d=e[7],c=e[8],u=c*o-a*d,p=a*l-c*r,h=d*r-o*l,v=t*u+n*p+s*h;if(v===0)return this.set(0,0,0,0,0,0,0,0,0);const x=1/v;return e[0]=u*x,e[1]=(s*d-c*n)*x,e[2]=(a*n-s*o)*x,e[3]=p*x,e[4]=(c*t-s*l)*x,e[5]=(s*r-a*t)*x,e[6]=h*x,e[7]=(n*l-d*t)*x,e[8]=(o*t-n*r)*x,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,s,r,o,a){const l=Math.cos(r),d=Math.sin(r);return this.set(n*l,n*d,-n*(l*o+d*a)+o+e,-s*d,s*l,-s*(-d*o+l*a)+a+t,0,0,1),this}scale(e,t){return this.premultiply(C0.makeScale(e,t)),this}rotate(e){return this.premultiply(C0.makeRotation(-e)),this}translate(e,t){return this.premultiply(C0.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,n,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,n=e.elements;for(let s=0;s<9;s++)if(t[s]!==n[s])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return new this.constructor().fromArray(this.elements)}}const C0=new rt;function H2(i){for(let e=i.length-1;e>=0;--e)if(i[e]>=65535)return!0;return!1}function bo(i){return document.createElementNS("http://www.w3.org/1999/xhtml",i)}function i7(){const i=bo("canvas");return i.style.display="block",i}const Nu={};function vr(i){i in Nu||(Nu[i]=!0,console.warn(i))}function s7(i,e,t){return new Promise(function(n,s){function r(){switch(i.clientWaitSync(e,i.SYNC_FLUSH_COMMANDS_BIT,0)){case i.WAIT_FAILED:s();break;case i.TIMEOUT_EXPIRED:setTimeout(r,t);break;default:n()}}setTimeout(r,t)})}function r7(i){const e=i.elements;e[2]=.5*e[2]+.5*e[3],e[6]=.5*e[6]+.5*e[7],e[10]=.5*e[10]+.5*e[11],e[14]=.5*e[14]+.5*e[15]}function o7(i){const e=i.elements;e[11]===-1?(e[10]=-e[10]-1,e[14]=-e[14]):(e[10]=-e[10],e[14]=-e[14]+1)}const Mu=new rt().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),Ou=new rt().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function a7(){const i={enabled:!0,workingColorSpace:Sn,spaces:{},convert:function(s,r,o){return this.enabled===!1||r===o||!r||!o||(this.spaces[r].transfer===It&&(s.r=Gi(s.r),s.g=Gi(s.g),s.b=Gi(s.b)),this.spaces[r].primaries!==this.spaces[o].primaries&&(s.applyMatrix3(this.spaces[r].toXYZ),s.applyMatrix3(this.spaces[o].fromXYZ)),this.spaces[o].transfer===It&&(s.r=yr(s.r),s.g=yr(s.g),s.b=yr(s.b))),s},workingToColorSpace:function(s,r){return this.convert(s,this.workingColorSpace,r)},colorSpaceToWorking:function(s,r){return this.convert(s,r,this.workingColorSpace)},getPrimaries:function(s){return this.spaces[s].primaries},getTransfer:function(s){return s===ji?Ya:this.spaces[s].transfer},getLuminanceCoefficients:function(s,r=this.workingColorSpace){return s.fromArray(this.spaces[r].luminanceCoefficients)},define:function(s){Object.assign(this.spaces,s)},_getMatrix:function(s,r,o){return s.copy(this.spaces[r].toXYZ).multiply(this.spaces[o].fromXYZ)},_getDrawingBufferColorSpace:function(s){return this.spaces[s].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(s=this.workingColorSpace){return this.spaces[s].workingColorSpaceConfig.unpackColorSpace},fromWorkingColorSpace:function(s,r){return vr("THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace()."),i.workingToColorSpace(s,r)},toWorkingColorSpace:function(s,r){return vr("THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking()."),i.colorSpaceToWorking(s,r)}},e=[.64,.33,.3,.6,.15,.06],t=[.2126,.7152,.0722],n=[.3127,.329];return i.define({[Sn]:{primaries:e,whitePoint:n,transfer:Ya,toXYZ:Mu,fromXYZ:Ou,luminanceCoefficients:t,workingColorSpaceConfig:{unpackColorSpace:yn},outputColorSpaceConfig:{drawingBufferColorSpace:yn}},[yn]:{primaries:e,whitePoint:n,transfer:It,toXYZ:Mu,fromXYZ:Ou,luminanceCoefficients:t,outputColorSpaceConfig:{drawingBufferColorSpace:yn}}}),i}const wt=a7();function Gi(i){return i<.04045?i*.0773993808:Math.pow(i*.9478672986+.0521327014,2.4)}function yr(i){return i<.0031308?i*12.92:1.055*Math.pow(i,.41666)-.055}let Cs;class l7{static getDataURL(e,t="image/png"){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let n;if(e instanceof HTMLCanvasElement)n=e;else{Cs===void 0&&(Cs=bo("canvas")),Cs.width=e.width,Cs.height=e.height;const s=Cs.getContext("2d");e instanceof ImageData?s.putImageData(e,0,0):s.drawImage(e,0,0,e.width,e.height),n=Cs}return n.toDataURL(t)}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const t=bo("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const s=n.getImageData(0,0,e.width,e.height),r=s.data;for(let o=0;o<r.length;o++)r[o]=Gi(r[o]/255)*255;return n.putImageData(s,0,0),t}else if(e.data){const t=e.data.slice(0);for(let n=0;n<t.length;n++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[n]=Math.floor(Gi(t[n]/255)*255):t[n]=Gi(t[n]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}let d7=0;class Yc{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:d7++}),this.uuid=fi(),this.data=e,this.dataReady=!0,this.version=0}getSize(e){const t=this.data;return t instanceof HTMLVideoElement?e.set(t.videoWidth,t.videoHeight):t!==null?e.set(t.width,t.height,t.depth||0):e.set(0,0,0),e}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const n={uuid:this.uuid,url:""},s=this.data;if(s!==null){let r;if(Array.isArray(s)){r=[];for(let o=0,a=s.length;o<a;o++)s[o].isDataTexture?r.push(F0(s[o].image)):r.push(F0(s[o]))}else r=F0(s);n.url=r}return t||(e.images[this.uuid]=n),n}}function F0(i){return typeof HTMLImageElement<"u"&&i instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&i instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&i instanceof ImageBitmap?l7.getDataURL(i):i.data?{data:Array.from(i.data),width:i.width,height:i.height,type:i.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let c7=0;const q0=new T;class gn extends Xs{constructor(e=gn.DEFAULT_IMAGE,t=gn.DEFAULT_MAPPING,n=xi,s=xi,r=wn,o=Ti,a=kn,l=Si,d=gn.DEFAULT_ANISOTROPY,c=ji){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:c7++}),this.uuid=fi(),this.name="",this.source=new Yc(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=n,this.wrapT=s,this.magFilter=r,this.minFilter=o,this.anisotropy=d,this.format=a,this.internalFormat=null,this.type=l,this.offset=new et(0,0),this.repeat=new et(1,1),this.center=new et(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new rt,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=c,this.userData={},this.updateRanges=[],this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.isArrayTexture=!!(e&&e.depth&&e.depth>1),this.pmremVersion=0}get width(){return this.source.getSize(q0).x}get height(){return this.source.getSize(q0).y}get depth(){return this.source.getSize(q0).z}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.renderTarget=e.renderTarget,this.isRenderTargetTexture=e.isRenderTargetTexture,this.isArrayTexture=e.isArrayTexture,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}setValues(e){for(const t in e){const n=e[t];if(n===void 0){console.warn(`THREE.Texture.setValues(): parameter '${t}' has value of undefined.`);continue}const s=this[t];if(s===void 0){console.warn(`THREE.Texture.setValues(): property '${t}' does not exist.`);continue}s&&n&&s.isVector2&&n.isVector2||s&&n&&s.isVector3&&n.isVector3||s&&n&&s.isMatrix3&&n.isMatrix3?s.copy(n):this[t]=n}}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const n={metadata:{version:4.7,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==y2)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case Sr:e.x=e.x-Math.floor(e.x);break;case xi:e.x=e.x<0?0:1;break;case qa:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case Sr:e.y=e.y-Math.floor(e.y);break;case xi:e.y=e.y<0?0:1;break;case qa:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(e){e===!0&&this.pmremVersion++}}gn.DEFAULT_IMAGE=null;gn.DEFAULT_MAPPING=y2;gn.DEFAULT_ANISOTROPY=1;class Rt{constructor(e=0,t=0,n=0,s=1){Rt.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=s}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,s){return this.x=e,this.y=t,this.z=n,this.w=s,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,s=this.z,r=this.w,o=e.elements;return this.x=o[0]*t+o[4]*n+o[8]*s+o[12]*r,this.y=o[1]*t+o[5]*n+o[9]*s+o[13]*r,this.z=o[2]*t+o[6]*n+o[10]*s+o[14]*r,this.w=o[3]*t+o[7]*n+o[11]*s+o[15]*r,this}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this.w/=e.w,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,s,r;const l=e.elements,d=l[0],c=l[4],u=l[8],p=l[1],h=l[5],v=l[9],x=l[2],m=l[6],f=l[10];if(Math.abs(c-p)<.01&&Math.abs(u-x)<.01&&Math.abs(v-m)<.01){if(Math.abs(c+p)<.1&&Math.abs(u+x)<.1&&Math.abs(v+m)<.1&&Math.abs(d+h+f-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const O=(d+1)/2,P=(h+1)/2,j=(f+1)/2,D=(c+p)/4,V=(u+x)/4,G=(v+m)/4;return O>P&&O>j?O<.01?(n=0,s=.707106781,r=.707106781):(n=Math.sqrt(O),s=D/n,r=V/n):P>j?P<.01?(n=.707106781,s=0,r=.707106781):(s=Math.sqrt(P),n=D/s,r=G/s):j<.01?(n=.707106781,s=.707106781,r=0):(r=Math.sqrt(j),n=V/r,s=G/r),this.set(n,s,r,t),this}let N=Math.sqrt((m-v)*(m-v)+(u-x)*(u-x)+(p-c)*(p-c));return Math.abs(N)<.001&&(N=1),this.x=(m-v)/N,this.y=(u-x)/N,this.z=(p-c)/N,this.w=Math.acos((d+h+f-1)/2),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this.w=t[15],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=lt(this.x,e.x,t.x),this.y=lt(this.y,e.y,t.y),this.z=lt(this.z,e.z,t.z),this.w=lt(this.w,e.w,t.w),this}clampScalar(e,t){return this.x=lt(this.x,e,t),this.y=lt(this.y,e,t),this.z=lt(this.z,e,t),this.w=lt(this.w,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(lt(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class u7 extends Xs{constructor(e=1,t=1,n={}){super(),n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:wn,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1,depth:1,multiview:!1},n),this.isRenderTarget=!0,this.width=e,this.height=t,this.depth=n.depth,this.scissor=new Rt(0,0,e,t),this.scissorTest=!1,this.viewport=new Rt(0,0,e,t);const s={width:e,height:t,depth:n.depth},r=new gn(s);this.textures=[];const o=n.count;for(let a=0;a<o;a++)this.textures[a]=r.clone(),this.textures[a].isRenderTargetTexture=!0,this.textures[a].renderTarget=this;this._setTextureOptions(n),this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=n.depthTexture,this.samples=n.samples,this.multiview=n.multiview}_setTextureOptions(e={}){const t={minFilter:wn,generateMipmaps:!1,flipY:!1,internalFormat:null};e.mapping!==void 0&&(t.mapping=e.mapping),e.wrapS!==void 0&&(t.wrapS=e.wrapS),e.wrapT!==void 0&&(t.wrapT=e.wrapT),e.wrapR!==void 0&&(t.wrapR=e.wrapR),e.magFilter!==void 0&&(t.magFilter=e.magFilter),e.minFilter!==void 0&&(t.minFilter=e.minFilter),e.format!==void 0&&(t.format=e.format),e.type!==void 0&&(t.type=e.type),e.anisotropy!==void 0&&(t.anisotropy=e.anisotropy),e.colorSpace!==void 0&&(t.colorSpace=e.colorSpace),e.flipY!==void 0&&(t.flipY=e.flipY),e.generateMipmaps!==void 0&&(t.generateMipmaps=e.generateMipmaps),e.internalFormat!==void 0&&(t.internalFormat=e.internalFormat);for(let n=0;n<this.textures.length;n++)this.textures[n].setValues(t)}get texture(){return this.textures[0]}set texture(e){this.textures[0]=e}set depthTexture(e){this._depthTexture!==null&&(this._depthTexture.renderTarget=null),e!==null&&(e.renderTarget=this),this._depthTexture=e}get depthTexture(){return this._depthTexture}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e,this.height=t,this.depth=n;for(let s=0,r=this.textures.length;s<r;s++)this.textures[s].image.width=e,this.textures[s].image.height=t,this.textures[s].image.depth=n,this.textures[s].isArrayTexture=this.textures[s].image.depth>1;this.dispose()}this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.textures.length=0;for(let t=0,n=e.textures.length;t<n;t++){this.textures[t]=e.textures[t].clone(),this.textures[t].isRenderTargetTexture=!0,this.textures[t].renderTarget=this;const s=Object.assign({},e.textures[t].image);this.textures[t].source=new Yc(s)}return this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.resolveDepthBuffer=e.resolveDepthBuffer,this.resolveStencilBuffer=e.resolveStencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class zs extends u7{constructor(e=1,t=1,n={}){super(e,t,n),this.isWebGLRenderTarget=!0}}class E2 extends gn{constructor(e=null,t=1,n=1,s=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:s},this.magFilter=In,this.minFilter=In,this.wrapR=xi,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class p7 extends gn{constructor(e=null,t=1,n=1,s=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:s},this.magFilter=In,this.minFilter=In,this.wrapR=xi,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Bi{constructor(e=new T(1/0,1/0,1/0),t=new T(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3)this.expandByPoint(ii.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++)this.expandByPoint(ii.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=ii.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(n!==void 0){const r=n.getAttribute("position");if(t===!0&&r!==void 0&&e.isInstancedMesh!==!0)for(let o=0,a=r.count;o<a;o++)e.isMesh===!0?e.getVertexPosition(o,ii):ii.fromBufferAttribute(r,o),ii.applyMatrix4(e.matrixWorld),this.expandByPoint(ii);else e.boundingBox!==void 0?(e.boundingBox===null&&e.computeBoundingBox(),Ao.copy(e.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),Ao.copy(n.boundingBox)),Ao.applyMatrix4(e.matrixWorld),this.union(Ao)}const s=e.children;for(let r=0,o=s.length;r<o;r++)this.expandByObject(s[r],t);return this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y&&e.z>=this.min.z&&e.z<=this.max.z}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y&&e.max.z>=this.min.z&&e.min.z<=this.max.z}intersectsSphere(e){return this.clampPoint(e.center,ii),ii.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(jr),Xo.subVectors(this.max,jr),Fs.subVectors(e.a,jr),qs.subVectors(e.b,jr),Ys.subVectors(e.c,jr),Qi.subVectors(qs,Fs),_i.subVectors(Ys,qs),bs.subVectors(Fs,Ys);let t=[0,-Qi.z,Qi.y,0,-_i.z,_i.y,0,-bs.z,bs.y,Qi.z,0,-Qi.x,_i.z,0,-_i.x,bs.z,0,-bs.x,-Qi.y,Qi.x,0,-_i.y,_i.x,0,-bs.y,bs.x,0];return!Y0(t,Fs,qs,Ys,Xo)||(t=[1,0,0,0,1,0,0,0,1],!Y0(t,Fs,qs,Ys,Xo))?!1:(Io.crossVectors(Qi,_i),t=[Io.x,Io.y,Io.z],Y0(t,Fs,qs,Ys,Xo))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,ii).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(ii).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(zi[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),zi[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),zi[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),zi[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),zi[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),zi[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),zi[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),zi[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(zi),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}toJSON(){return{min:this.min.toArray(),max:this.max.toArray()}}fromJSON(e){return this.min.fromArray(e.min),this.max.fromArray(e.max),this}}const zi=[new T,new T,new T,new T,new T,new T,new T,new T],ii=new T,Ao=new Bi,Fs=new T,qs=new T,Ys=new T,Qi=new T,_i=new T,bs=new T,jr=new T,Xo=new T,Io=new T,vs=new T;function Y0(i,e,t,n,s){for(let r=0,o=i.length-3;r<=o;r+=3){vs.fromArray(i,r);const a=s.x*Math.abs(vs.x)+s.y*Math.abs(vs.y)+s.z*Math.abs(vs.z),l=e.dot(vs),d=t.dot(vs),c=n.dot(vs);if(Math.max(-Math.max(l,d,c),Math.min(l,d,c))>a)return!1}return!0}const f7=new Bi,Vr=new T,G0=new T;class Ri{constructor(e=new T,t=-1){this.isSphere=!0,this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):f7.setFromPoints(e).getCenter(n);let s=0;for(let r=0,o=e.length;r<o;r++)s=Math.max(s,n.distanceToSquared(e[r]));return this.radius=Math.sqrt(s),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;Vr.subVectors(e,this.center);const t=Vr.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t),s=(n-this.radius)*.5;this.center.addScaledVector(Vr,s/n),this.radius+=s}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(G0.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(Vr.copy(e.center).add(G0)),this.expandByPoint(Vr.copy(e.center).sub(G0))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}toJSON(){return{radius:this.radius,center:this.center.toArray()}}fromJSON(e){return this.radius=e.radius,this.center.fromArray(e.center),this}}const Hi=new T,U0=new T,Do=new T,$i=new T,Z0=new T,Wo=new T,k0=new T;class Or{constructor(e=new T,t=new T(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,Hi)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=Hi.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(Hi.copy(this.origin).addScaledVector(this.direction,t),Hi.distanceToSquared(e))}distanceSqToSegment(e,t,n,s){U0.copy(e).add(t).multiplyScalar(.5),Do.copy(t).sub(e).normalize(),$i.copy(this.origin).sub(U0);const r=e.distanceTo(t)*.5,o=-this.direction.dot(Do),a=$i.dot(this.direction),l=-$i.dot(Do),d=$i.lengthSq(),c=Math.abs(1-o*o);let u,p,h,v;if(c>0)if(u=o*l-a,p=o*a-l,v=r*c,u>=0)if(p>=-v)if(p<=v){const x=1/c;u*=x,p*=x,h=u*(u+o*p+2*a)+p*(o*u+p+2*l)+d}else p=r,u=Math.max(0,-(o*p+a)),h=-u*u+p*(p+2*l)+d;else p=-r,u=Math.max(0,-(o*p+a)),h=-u*u+p*(p+2*l)+d;else p<=-v?(u=Math.max(0,-(-o*r+a)),p=u>0?-r:Math.min(Math.max(-r,-l),r),h=-u*u+p*(p+2*l)+d):p<=v?(u=0,p=Math.min(Math.max(-r,-l),r),h=p*(p+2*l)+d):(u=Math.max(0,-(o*r+a)),p=u>0?r:Math.min(Math.max(-r,-l),r),h=-u*u+p*(p+2*l)+d);else p=o>0?-r:r,u=Math.max(0,-(o*p+a)),h=-u*u+p*(p+2*l)+d;return n&&n.copy(this.origin).addScaledVector(this.direction,u),s&&s.copy(U0).addScaledVector(Do,p),h}intersectSphere(e,t){Hi.subVectors(e.center,this.origin);const n=Hi.dot(this.direction),s=Hi.dot(Hi)-n*n,r=e.radius*e.radius;if(s>r)return null;const o=Math.sqrt(r-s),a=n-o,l=n+o;return l<0?null:a<0?this.at(l,t):this.at(a,t)}intersectsSphere(e){return e.radius<0?!1:this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,s,r,o,a,l;const d=1/this.direction.x,c=1/this.direction.y,u=1/this.direction.z,p=this.origin;return d>=0?(n=(e.min.x-p.x)*d,s=(e.max.x-p.x)*d):(n=(e.max.x-p.x)*d,s=(e.min.x-p.x)*d),c>=0?(r=(e.min.y-p.y)*c,o=(e.max.y-p.y)*c):(r=(e.max.y-p.y)*c,o=(e.min.y-p.y)*c),n>o||r>s||((r>n||isNaN(n))&&(n=r),(o<s||isNaN(s))&&(s=o),u>=0?(a=(e.min.z-p.z)*u,l=(e.max.z-p.z)*u):(a=(e.max.z-p.z)*u,l=(e.min.z-p.z)*u),n>l||a>s)||((a>n||n!==n)&&(n=a),(l<s||s!==s)&&(s=l),s<0)?null:this.at(n>=0?n:s,t)}intersectsBox(e){return this.intersectBox(e,Hi)!==null}intersectTriangle(e,t,n,s,r){Z0.subVectors(t,e),Wo.subVectors(n,e),k0.crossVectors(Z0,Wo);let o=this.direction.dot(k0),a;if(o>0){if(s)return null;a=1}else if(o<0)a=-1,o=-o;else return null;$i.subVectors(this.origin,e);const l=a*this.direction.dot(Wo.crossVectors($i,Wo));if(l<0)return null;const d=a*this.direction.dot(Z0.cross($i));if(d<0||l+d>o)return null;const c=-a*$i.dot(k0);return c<0?null:this.at(c/o,r)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class Be{constructor(e,t,n,s,r,o,a,l,d,c,u,p,h,v,x,m){Be.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],e!==void 0&&this.set(e,t,n,s,r,o,a,l,d,c,u,p,h,v,x,m)}set(e,t,n,s,r,o,a,l,d,c,u,p,h,v,x,m){const f=this.elements;return f[0]=e,f[4]=t,f[8]=n,f[12]=s,f[1]=r,f[5]=o,f[9]=a,f[13]=l,f[2]=d,f[6]=c,f[10]=u,f[14]=p,f[3]=h,f[7]=v,f[11]=x,f[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Be().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,s=1/Gs.setFromMatrixColumn(e,0).length(),r=1/Gs.setFromMatrixColumn(e,1).length(),o=1/Gs.setFromMatrixColumn(e,2).length();return t[0]=n[0]*s,t[1]=n[1]*s,t[2]=n[2]*s,t[3]=0,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=0,t[8]=n[8]*o,t[9]=n[9]*o,t[10]=n[10]*o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,n=e.x,s=e.y,r=e.z,o=Math.cos(n),a=Math.sin(n),l=Math.cos(s),d=Math.sin(s),c=Math.cos(r),u=Math.sin(r);if(e.order==="XYZ"){const p=o*c,h=o*u,v=a*c,x=a*u;t[0]=l*c,t[4]=-l*u,t[8]=d,t[1]=h+v*d,t[5]=p-x*d,t[9]=-a*l,t[2]=x-p*d,t[6]=v+h*d,t[10]=o*l}else if(e.order==="YXZ"){const p=l*c,h=l*u,v=d*c,x=d*u;t[0]=p+x*a,t[4]=v*a-h,t[8]=o*d,t[1]=o*u,t[5]=o*c,t[9]=-a,t[2]=h*a-v,t[6]=x+p*a,t[10]=o*l}else if(e.order==="ZXY"){const p=l*c,h=l*u,v=d*c,x=d*u;t[0]=p-x*a,t[4]=-o*u,t[8]=v+h*a,t[1]=h+v*a,t[5]=o*c,t[9]=x-p*a,t[2]=-o*d,t[6]=a,t[10]=o*l}else if(e.order==="ZYX"){const p=o*c,h=o*u,v=a*c,x=a*u;t[0]=l*c,t[4]=v*d-h,t[8]=p*d+x,t[1]=l*u,t[5]=x*d+p,t[9]=h*d-v,t[2]=-d,t[6]=a*l,t[10]=o*l}else if(e.order==="YZX"){const p=o*l,h=o*d,v=a*l,x=a*d;t[0]=l*c,t[4]=x-p*u,t[8]=v*u+h,t[1]=u,t[5]=o*c,t[9]=-a*c,t[2]=-d*c,t[6]=h*u+v,t[10]=p-x*u}else if(e.order==="XZY"){const p=o*l,h=o*d,v=a*l,x=a*d;t[0]=l*c,t[4]=-u,t[8]=d*c,t[1]=p*u+x,t[5]=o*c,t[9]=h*u-v,t[2]=v*u-h,t[6]=a*c,t[10]=x*u+p}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(h7,e,m7)}lookAt(e,t,n){const s=this.elements;return Gn.subVectors(e,t),Gn.lengthSq()===0&&(Gn.z=1),Gn.normalize(),es.crossVectors(n,Gn),es.lengthSq()===0&&(Math.abs(n.z)===1?Gn.x+=1e-4:Gn.z+=1e-4,Gn.normalize(),es.crossVectors(n,Gn)),es.normalize(),jo.crossVectors(Gn,es),s[0]=es.x,s[4]=jo.x,s[8]=Gn.x,s[1]=es.y,s[5]=jo.y,s[9]=Gn.y,s[2]=es.z,s[6]=jo.z,s[10]=Gn.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,s=t.elements,r=this.elements,o=n[0],a=n[4],l=n[8],d=n[12],c=n[1],u=n[5],p=n[9],h=n[13],v=n[2],x=n[6],m=n[10],f=n[14],N=n[3],O=n[7],P=n[11],j=n[15],D=s[0],V=s[4],G=s[8],M=s[12],R=s[1],F=s[5],K=s[9],Q=s[13],ee=s[2],ue=s[6],ne=s[10],ve=s[14],te=s[3],Te=s[7],Le=s[11],je=s[15];return r[0]=o*D+a*R+l*ee+d*te,r[4]=o*V+a*F+l*ue+d*Te,r[8]=o*G+a*K+l*ne+d*Le,r[12]=o*M+a*Q+l*ve+d*je,r[1]=c*D+u*R+p*ee+h*te,r[5]=c*V+u*F+p*ue+h*Te,r[9]=c*G+u*K+p*ne+h*Le,r[13]=c*M+u*Q+p*ve+h*je,r[2]=v*D+x*R+m*ee+f*te,r[6]=v*V+x*F+m*ue+f*Te,r[10]=v*G+x*K+m*ne+f*Le,r[14]=v*M+x*Q+m*ve+f*je,r[3]=N*D+O*R+P*ee+j*te,r[7]=N*V+O*F+P*ue+j*Te,r[11]=N*G+O*K+P*ne+j*Le,r[15]=N*M+O*Q+P*ve+j*je,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],s=e[8],r=e[12],o=e[1],a=e[5],l=e[9],d=e[13],c=e[2],u=e[6],p=e[10],h=e[14],v=e[3],x=e[7],m=e[11],f=e[15];return v*(+r*l*u-s*d*u-r*a*p+n*d*p+s*a*h-n*l*h)+x*(+t*l*h-t*d*p+r*o*p-s*o*h+s*d*c-r*l*c)+m*(+t*d*u-t*a*h-r*o*u+n*o*h+r*a*c-n*d*c)+f*(-s*a*c-t*l*u+t*a*p+s*o*u-n*o*p+n*l*c)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const s=this.elements;return e.isVector3?(s[12]=e.x,s[13]=e.y,s[14]=e.z):(s[12]=e,s[13]=t,s[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],s=e[2],r=e[3],o=e[4],a=e[5],l=e[6],d=e[7],c=e[8],u=e[9],p=e[10],h=e[11],v=e[12],x=e[13],m=e[14],f=e[15],N=u*m*d-x*p*d+x*l*h-a*m*h-u*l*f+a*p*f,O=v*p*d-c*m*d-v*l*h+o*m*h+c*l*f-o*p*f,P=c*x*d-v*u*d+v*a*h-o*x*h-c*a*f+o*u*f,j=v*u*l-c*x*l-v*a*p+o*x*p+c*a*m-o*u*m,D=t*N+n*O+s*P+r*j;if(D===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const V=1/D;return e[0]=N*V,e[1]=(x*p*r-u*m*r-x*s*h+n*m*h+u*s*f-n*p*f)*V,e[2]=(a*m*r-x*l*r+x*s*d-n*m*d-a*s*f+n*l*f)*V,e[3]=(u*l*r-a*p*r-u*s*d+n*p*d+a*s*h-n*l*h)*V,e[4]=O*V,e[5]=(c*m*r-v*p*r+v*s*h-t*m*h-c*s*f+t*p*f)*V,e[6]=(v*l*r-o*m*r-v*s*d+t*m*d+o*s*f-t*l*f)*V,e[7]=(o*p*r-c*l*r+c*s*d-t*p*d-o*s*h+t*l*h)*V,e[8]=P*V,e[9]=(v*u*r-c*x*r-v*n*h+t*x*h+c*n*f-t*u*f)*V,e[10]=(o*x*r-v*a*r+v*n*d-t*x*d-o*n*f+t*a*f)*V,e[11]=(c*a*r-o*u*r-c*n*d+t*u*d+o*n*h-t*a*h)*V,e[12]=j*V,e[13]=(c*x*s-v*u*s+v*n*p-t*x*p-c*n*m+t*u*m)*V,e[14]=(v*a*s-o*x*s-v*n*l+t*x*l+o*n*m-t*a*m)*V,e[15]=(o*u*s-c*a*s+c*n*l-t*u*l-o*n*p+t*a*p)*V,this}scale(e){const t=this.elements,n=e.x,s=e.y,r=e.z;return t[0]*=n,t[4]*=s,t[8]*=r,t[1]*=n,t[5]*=s,t[9]*=r,t[2]*=n,t[6]*=s,t[10]*=r,t[3]*=n,t[7]*=s,t[11]*=r,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],s=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,s))}makeTranslation(e,t,n){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),s=Math.sin(t),r=1-n,o=e.x,a=e.y,l=e.z,d=r*o,c=r*a;return this.set(d*o+n,d*a-s*l,d*l+s*a,0,d*a+s*l,c*a+n,c*l-s*o,0,d*l-s*a,c*l+s*o,r*l*l+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,s,r,o){return this.set(1,n,r,0,e,1,o,0,t,s,1,0,0,0,0,1),this}compose(e,t,n){const s=this.elements,r=t._x,o=t._y,a=t._z,l=t._w,d=r+r,c=o+o,u=a+a,p=r*d,h=r*c,v=r*u,x=o*c,m=o*u,f=a*u,N=l*d,O=l*c,P=l*u,j=n.x,D=n.y,V=n.z;return s[0]=(1-(x+f))*j,s[1]=(h+P)*j,s[2]=(v-O)*j,s[3]=0,s[4]=(h-P)*D,s[5]=(1-(p+f))*D,s[6]=(m+N)*D,s[7]=0,s[8]=(v+O)*V,s[9]=(m-N)*V,s[10]=(1-(p+x))*V,s[11]=0,s[12]=e.x,s[13]=e.y,s[14]=e.z,s[15]=1,this}decompose(e,t,n){const s=this.elements;let r=Gs.set(s[0],s[1],s[2]).length();const o=Gs.set(s[4],s[5],s[6]).length(),a=Gs.set(s[8],s[9],s[10]).length();this.determinant()<0&&(r=-r),e.x=s[12],e.y=s[13],e.z=s[14],si.copy(this);const d=1/r,c=1/o,u=1/a;return si.elements[0]*=d,si.elements[1]*=d,si.elements[2]*=d,si.elements[4]*=c,si.elements[5]*=c,si.elements[6]*=c,si.elements[8]*=u,si.elements[9]*=u,si.elements[10]*=u,t.setFromRotationMatrix(si),n.x=r,n.y=o,n.z=a,this}makePerspective(e,t,n,s,r,o,a=Fi){const l=this.elements,d=2*r/(t-e),c=2*r/(n-s),u=(t+e)/(t-e),p=(n+s)/(n-s);let h,v;if(a===Fi)h=-(o+r)/(o-r),v=-2*o*r/(o-r);else if(a===Ga)h=-o/(o-r),v=-o*r/(o-r);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return l[0]=d,l[4]=0,l[8]=u,l[12]=0,l[1]=0,l[5]=c,l[9]=p,l[13]=0,l[2]=0,l[6]=0,l[10]=h,l[14]=v,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(e,t,n,s,r,o,a=Fi){const l=this.elements,d=1/(t-e),c=1/(n-s),u=1/(o-r),p=(t+e)*d,h=(n+s)*c;let v,x;if(a===Fi)v=(o+r)*u,x=-2*u;else if(a===Ga)v=r*u,x=-1*u;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return l[0]=2*d,l[4]=0,l[8]=0,l[12]=-p,l[1]=0,l[5]=2*c,l[9]=0,l[13]=-h,l[2]=0,l[6]=0,l[10]=x,l[14]=-v,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let s=0;s<16;s++)if(t[s]!==n[s])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}const Gs=new T,si=new Be,h7=new T(0,0,0),m7=new T(1,1,1),es=new T,jo=new T,Gn=new T,zu=new Be,Hu=new _e;class zt{constructor(e=0,t=0,n=0,s=zt.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=s}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,s=this._order){return this._x=e,this._y=t,this._z=n,this._order=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const s=e.elements,r=s[0],o=s[4],a=s[8],l=s[1],d=s[5],c=s[9],u=s[2],p=s[6],h=s[10];switch(t){case"XYZ":this._y=Math.asin(lt(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-c,h),this._z=Math.atan2(-o,r)):(this._x=Math.atan2(p,d),this._z=0);break;case"YXZ":this._x=Math.asin(-lt(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(a,h),this._z=Math.atan2(l,d)):(this._y=Math.atan2(-u,r),this._z=0);break;case"ZXY":this._x=Math.asin(lt(p,-1,1)),Math.abs(p)<.9999999?(this._y=Math.atan2(-u,h),this._z=Math.atan2(-o,d)):(this._y=0,this._z=Math.atan2(l,r));break;case"ZYX":this._y=Math.asin(-lt(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(p,h),this._z=Math.atan2(l,r)):(this._x=0,this._z=Math.atan2(-o,d));break;case"YZX":this._z=Math.asin(lt(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-c,d),this._y=Math.atan2(-u,r)):(this._x=0,this._y=Math.atan2(a,h));break;case"XZY":this._z=Math.asin(-lt(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(p,d),this._y=Math.atan2(a,r)):(this._x=Math.atan2(-c,h),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return zu.makeRotationFromQuaternion(e),this.setFromRotationMatrix(zu,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return Hu.setFromEuler(this),this.setFromQuaternion(Hu,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}zt.DEFAULT_ORDER="XYZ";class Gc{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let b7=0;const Eu=new T,Us=new _e,Ei=new Be,Vo=new T,Cr=new T,v7=new T,y7=new _e,Au=new T(1,0,0),Xu=new T(0,1,0),Iu=new T(0,0,1),Du={type:"added"},w7={type:"removed"},Zs={type:"childadded",child:null},J0={type:"childremoved",child:null};class Zt extends Xs{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:b7++}),this.uuid=fi(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Zt.DEFAULT_UP.clone();const e=new T,t=new zt,n=new _e,s=new T(1,1,1);function r(){n.setFromEuler(t,!1)}function o(){t.setFromQuaternion(n,void 0,!1)}t._onChange(r),n._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:s},modelViewMatrix:{value:new Be},normalMatrix:{value:new rt}}),this.matrix=new Be,this.matrixWorld=new Be,this.matrixAutoUpdate=Zt.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Zt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new Gc,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.customDepthMaterial=void 0,this.customDistanceMaterial=void 0,this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return Us.setFromAxisAngle(e,t),this.quaternion.multiply(Us),this}rotateOnWorldAxis(e,t){return Us.setFromAxisAngle(e,t),this.quaternion.premultiply(Us),this}rotateX(e){return this.rotateOnAxis(Au,e)}rotateY(e){return this.rotateOnAxis(Xu,e)}rotateZ(e){return this.rotateOnAxis(Iu,e)}translateOnAxis(e,t){return Eu.copy(e).applyQuaternion(this.quaternion),this.position.add(Eu.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(Au,e)}translateY(e){return this.translateOnAxis(Xu,e)}translateZ(e){return this.translateOnAxis(Iu,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(Ei.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?Vo.copy(e):Vo.set(e,t,n);const s=this.parent;this.updateWorldMatrix(!0,!1),Cr.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Ei.lookAt(Cr,Vo,this.up):Ei.lookAt(Vo,Cr,this.up),this.quaternion.setFromRotationMatrix(Ei),s&&(Ei.extractRotation(s.matrixWorld),Us.setFromRotationMatrix(Ei),this.quaternion.premultiply(Us.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.removeFromParent(),e.parent=this,this.children.push(e),e.dispatchEvent(Du),Zs.child=e,this.dispatchEvent(Zs),Zs.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(w7),J0.child=e,this.dispatchEvent(J0),J0.child=null),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),Ei.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),Ei.multiply(e.parent.matrixWorld)),e.applyMatrix4(Ei),e.removeFromParent(),e.parent=this,this.children.push(e),e.updateWorldMatrix(!1,!0),e.dispatchEvent(Du),Zs.child=e,this.dispatchEvent(Zs),Zs.child=null,this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,s=this.children.length;n<s;n++){const o=this.children[n].getObjectByProperty(e,t);if(o!==void 0)return o}}getObjectsByProperty(e,t,n=[]){this[e]===t&&n.push(this);const s=this.children;for(let r=0,o=s.length;r<o;r++)s[r].getObjectsByProperty(e,t,n);return n}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Cr,e,v7),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Cr,y7,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].updateMatrixWorld(e)}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),t===!0){const s=this.children;for(let r=0,o=s.length;r<o;r++)s[r].updateWorldMatrix(!1,!0)}}toJSON(e){const t=e===void 0||typeof e=="string",n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.7,type:"Object",generator:"Object3D.toJSON"});const s={};s.uuid=this.uuid,s.type=this.type,this.name!==""&&(s.name=this.name),this.castShadow===!0&&(s.castShadow=!0),this.receiveShadow===!0&&(s.receiveShadow=!0),this.visible===!1&&(s.visible=!1),this.frustumCulled===!1&&(s.frustumCulled=!1),this.renderOrder!==0&&(s.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(s.userData=this.userData),s.layers=this.layers.mask,s.matrix=this.matrix.toArray(),s.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(s.matrixAutoUpdate=!1),this.isInstancedMesh&&(s.type="InstancedMesh",s.count=this.count,s.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(s.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(s.type="BatchedMesh",s.perObjectFrustumCulled=this.perObjectFrustumCulled,s.sortObjects=this.sortObjects,s.drawRanges=this._drawRanges,s.reservedRanges=this._reservedRanges,s.geometryInfo=this._geometryInfo.map(a=>({...a,boundingBox:a.boundingBox?a.boundingBox.toJSON():void 0,boundingSphere:a.boundingSphere?a.boundingSphere.toJSON():void 0})),s.instanceInfo=this._instanceInfo.map(a=>({...a})),s.availableInstanceIds=this._availableInstanceIds.slice(),s.availableGeometryIds=this._availableGeometryIds.slice(),s.nextIndexStart=this._nextIndexStart,s.nextVertexStart=this._nextVertexStart,s.geometryCount=this._geometryCount,s.maxInstanceCount=this._maxInstanceCount,s.maxVertexCount=this._maxVertexCount,s.maxIndexCount=this._maxIndexCount,s.geometryInitialized=this._geometryInitialized,s.matricesTexture=this._matricesTexture.toJSON(e),s.indirectTexture=this._indirectTexture.toJSON(e),this._colorsTexture!==null&&(s.colorsTexture=this._colorsTexture.toJSON(e)),this.boundingSphere!==null&&(s.boundingSphere=this.boundingSphere.toJSON()),this.boundingBox!==null&&(s.boundingBox=this.boundingBox.toJSON()));function r(a,l){return a[l.uuid]===void 0&&(a[l.uuid]=l.toJSON(e)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?s.background=this.background.toJSON():this.background.isTexture&&(s.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(s.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){s.geometry=r(e.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const l=a.shapes;if(Array.isArray(l))for(let d=0,c=l.length;d<c;d++){const u=l[d];r(e.shapes,u)}else r(e.shapes,l)}}if(this.isSkinnedMesh&&(s.bindMode=this.bindMode,s.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(r(e.skeletons,this.skeleton),s.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let l=0,d=this.material.length;l<d;l++)a.push(r(e.materials,this.material[l]));s.material=a}else s.material=r(e.materials,this.material);if(this.children.length>0){s.children=[];for(let a=0;a<this.children.length;a++)s.children.push(this.children[a].toJSON(e).object)}if(this.animations.length>0){s.animations=[];for(let a=0;a<this.animations.length;a++){const l=this.animations[a];s.animations.push(r(e.animations,l))}}if(t){const a=o(e.geometries),l=o(e.materials),d=o(e.textures),c=o(e.images),u=o(e.shapes),p=o(e.skeletons),h=o(e.animations),v=o(e.nodes);a.length>0&&(n.geometries=a),l.length>0&&(n.materials=l),d.length>0&&(n.textures=d),c.length>0&&(n.images=c),u.length>0&&(n.shapes=u),p.length>0&&(n.skeletons=p),h.length>0&&(n.animations=h),v.length>0&&(n.nodes=v)}return n.object=s,n;function o(a){const l=[];for(const d in a){const c=a[d];delete c.metadata,l.push(c)}return l}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let n=0;n<e.children.length;n++){const s=e.children[n];this.add(s.clone())}return this}}Zt.DEFAULT_UP=new T(0,1,0);Zt.DEFAULT_MATRIX_AUTO_UPDATE=!0;Zt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const ri=new T,Ai=new T,B0=new T,Xi=new T,ks=new T,Js=new T,Wu=new T,K0=new T,Q0=new T,_0=new T,$0=new Rt,el=new Rt,tl=new Rt;let rr=class or{constructor(e=new T,t=new T,n=new T){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,s){s.subVectors(n,t),ri.subVectors(e,t),s.cross(ri);const r=s.lengthSq();return r>0?s.multiplyScalar(1/Math.sqrt(r)):s.set(0,0,0)}static getBarycoord(e,t,n,s,r){ri.subVectors(s,t),Ai.subVectors(n,t),B0.subVectors(e,t);const o=ri.dot(ri),a=ri.dot(Ai),l=ri.dot(B0),d=Ai.dot(Ai),c=Ai.dot(B0),u=o*d-a*a;if(u===0)return r.set(0,0,0),null;const p=1/u,h=(d*l-a*c)*p,v=(o*c-a*l)*p;return r.set(1-h-v,v,h)}static containsPoint(e,t,n,s){return this.getBarycoord(e,t,n,s,Xi)===null?!1:Xi.x>=0&&Xi.y>=0&&Xi.x+Xi.y<=1}static getInterpolation(e,t,n,s,r,o,a,l){return this.getBarycoord(e,t,n,s,Xi)===null?(l.x=0,l.y=0,"z"in l&&(l.z=0),"w"in l&&(l.w=0),null):(l.setScalar(0),l.addScaledVector(r,Xi.x),l.addScaledVector(o,Xi.y),l.addScaledVector(a,Xi.z),l)}static getInterpolatedAttribute(e,t,n,s,r,o){return $0.setScalar(0),el.setScalar(0),tl.setScalar(0),$0.fromBufferAttribute(e,t),el.fromBufferAttribute(e,n),tl.fromBufferAttribute(e,s),o.setScalar(0),o.addScaledVector($0,r.x),o.addScaledVector(el,r.y),o.addScaledVector(tl,r.z),o}static isFrontFacing(e,t,n,s){return ri.subVectors(n,t),Ai.subVectors(e,t),ri.cross(Ai).dot(s)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,s){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[s]),this}setFromAttributeAndIndices(e,t,n,s){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,s),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return ri.subVectors(this.c,this.b),Ai.subVectors(this.a,this.b),ri.cross(Ai).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return or.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return or.getBarycoord(e,this.a,this.b,this.c,t)}getInterpolation(e,t,n,s,r){return or.getInterpolation(e,this.a,this.b,this.c,t,n,s,r)}containsPoint(e){return or.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return or.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,s=this.b,r=this.c;let o,a;ks.subVectors(s,n),Js.subVectors(r,n),K0.subVectors(e,n);const l=ks.dot(K0),d=Js.dot(K0);if(l<=0&&d<=0)return t.copy(n);Q0.subVectors(e,s);const c=ks.dot(Q0),u=Js.dot(Q0);if(c>=0&&u<=c)return t.copy(s);const p=l*u-c*d;if(p<=0&&l>=0&&c<=0)return o=l/(l-c),t.copy(n).addScaledVector(ks,o);_0.subVectors(e,r);const h=ks.dot(_0),v=Js.dot(_0);if(v>=0&&h<=v)return t.copy(r);const x=h*d-l*v;if(x<=0&&d>=0&&v<=0)return a=d/(d-v),t.copy(n).addScaledVector(Js,a);const m=c*v-h*u;if(m<=0&&u-c>=0&&h-v>=0)return Wu.subVectors(r,s),a=(u-c)/(u-c+(h-v)),t.copy(s).addScaledVector(Wu,a);const f=1/(m+x+p);return o=x*f,a=p*f,t.copy(n).addScaledVector(ks,o).addScaledVector(Js,a)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}};const A2={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},ts={h:0,s:0,l:0},Co={h:0,s:0,l:0};function nl(i,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?i+(e-i)*6*t:t<1/2?e:t<2/3?i+(e-i)*6*(2/3-t):i}class tt{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,n)}set(e,t,n){if(t===void 0&&n===void 0){const s=e;s&&s.isColor?this.copy(s):typeof s=="number"?this.setHex(s):typeof s=="string"&&this.setStyle(s)}else this.setRGB(e,t,n);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=yn){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,wt.colorSpaceToWorking(this,t),this}setRGB(e,t,n,s=wt.workingColorSpace){return this.r=e,this.g=t,this.b=n,wt.colorSpaceToWorking(this,s),this}setHSL(e,t,n,s=wt.workingColorSpace){if(e=qc(e,1),t=lt(t,0,1),n=lt(n,0,1),t===0)this.r=this.g=this.b=n;else{const r=n<=.5?n*(1+t):n+t-n*t,o=2*n-r;this.r=nl(o,r,e+1/3),this.g=nl(o,r,e),this.b=nl(o,r,e-1/3)}return wt.colorSpaceToWorking(this,s),this}setStyle(e,t=yn){function n(r){r!==void 0&&parseFloat(r)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let s;if(s=/^(\w+)\(([^\)]*)\)/.exec(e)){let r;const o=s[1],a=s[2];switch(o){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,t);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,t);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(s=/^\#([A-Fa-f\d]+)$/.exec(e)){const r=s[1],o=r.length;if(o===3)return this.setRGB(parseInt(r.charAt(0),16)/15,parseInt(r.charAt(1),16)/15,parseInt(r.charAt(2),16)/15,t);if(o===6)return this.setHex(parseInt(r,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=yn){const n=A2[e.toLowerCase()];return n!==void 0?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=Gi(e.r),this.g=Gi(e.g),this.b=Gi(e.b),this}copyLinearToSRGB(e){return this.r=yr(e.r),this.g=yr(e.g),this.b=yr(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=yn){return wt.workingToColorSpace(Rn.copy(this),e),Math.round(lt(Rn.r*255,0,255))*65536+Math.round(lt(Rn.g*255,0,255))*256+Math.round(lt(Rn.b*255,0,255))}getHexString(e=yn){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=wt.workingColorSpace){wt.workingToColorSpace(Rn.copy(this),t);const n=Rn.r,s=Rn.g,r=Rn.b,o=Math.max(n,s,r),a=Math.min(n,s,r);let l,d;const c=(a+o)/2;if(a===o)l=0,d=0;else{const u=o-a;switch(d=c<=.5?u/(o+a):u/(2-o-a),o){case n:l=(s-r)/u+(s<r?6:0);break;case s:l=(r-n)/u+2;break;case r:l=(n-s)/u+4;break}l/=6}return e.h=l,e.s=d,e.l=c,e}getRGB(e,t=wt.workingColorSpace){return wt.workingToColorSpace(Rn.copy(this),t),e.r=Rn.r,e.g=Rn.g,e.b=Rn.b,e}getStyle(e=yn){wt.workingToColorSpace(Rn.copy(this),e);const t=Rn.r,n=Rn.g,s=Rn.b;return e!==yn?`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${s.toFixed(3)})`:`rgb(${Math.round(t*255)},${Math.round(n*255)},${Math.round(s*255)})`}offsetHSL(e,t,n){return this.getHSL(ts),this.setHSL(ts.h+e,ts.s+t,ts.l+n)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(ts),e.getHSL(Co);const n=so(ts.h,Co.h,t),s=so(ts.s,Co.s,t),r=so(ts.l,Co.l,t);return this.setHSL(n,s,r),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const t=this.r,n=this.g,s=this.b,r=e.elements;return this.r=r[0]*t+r[3]*n+r[6]*s,this.g=r[1]*t+r[4]*n+r[7]*s,this.b=r[2]*t+r[5]*n+r[8]*s,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const Rn=new tt;tt.NAMES=A2;let g7=0;class hi extends Xs{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:g7++}),this.uuid=fi(),this.name="",this.type="Material",this.blending=mr,this.side=Ui,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=ld,this.blendDst=dd,this.blendEquation=Ls,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new tt(0,0,0),this.blendAlpha=0,this.depthFunc=gr,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Su,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Vs,this.stencilZFail=Vs,this.stencilZPass=Vs,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.allowOverride=!0,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const n=e[t];if(n===void 0){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const s=this[t];if(s===void 0){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}s&&s.isColor?s.set(n):s&&s.isVector3&&n&&n.isVector3?s.copy(n):this[t]=n}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const n={metadata:{version:4.7,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==mr&&(n.blending=this.blending),this.side!==Ui&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==ld&&(n.blendSrc=this.blendSrc),this.blendDst!==dd&&(n.blendDst=this.blendDst),this.blendEquation!==Ls&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==gr&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==Su&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==Vs&&(n.stencilFail=this.stencilFail),this.stencilZFail!==Vs&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==Vs&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function s(r){const o=[];for(const a in r){const l=r[a];delete l.metadata,o.push(l)}return o}if(t){const r=s(e.textures),o=s(e.images);r.length>0&&(n.textures=r),o.length>0&&(n.images=o)}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const s=t.length;n=new Array(s);for(let r=0;r!==s;++r)n[r]=t[r].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}}class qi extends hi{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new tt(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new zt,this.combine=Xc,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const Vi=x7();function x7(){const i=new ArrayBuffer(4),e=new Float32Array(i),t=new Uint32Array(i),n=new Uint32Array(512),s=new Uint32Array(512);for(let l=0;l<256;++l){const d=l-127;d<-27?(n[l]=0,n[l|256]=32768,s[l]=24,s[l|256]=24):d<-14?(n[l]=1024>>-d-14,n[l|256]=1024>>-d-14|32768,s[l]=-d-1,s[l|256]=-d-1):d<=15?(n[l]=d+15<<10,n[l|256]=d+15<<10|32768,s[l]=13,s[l|256]=13):d<128?(n[l]=31744,n[l|256]=64512,s[l]=24,s[l|256]=24):(n[l]=31744,n[l|256]=64512,s[l]=13,s[l|256]=13)}const r=new Uint32Array(2048),o=new Uint32Array(64),a=new Uint32Array(64);for(let l=1;l<1024;++l){let d=l<<13,c=0;for(;(d&8388608)===0;)d<<=1,c-=8388608;d&=-8388609,c+=947912704,r[l]=d|c}for(let l=1024;l<2048;++l)r[l]=939524096+(l-1024<<13);for(let l=1;l<31;++l)o[l]=l<<23;o[31]=1199570944,o[32]=2147483648;for(let l=33;l<63;++l)o[l]=2147483648+(l-32<<23);o[63]=3347054592;for(let l=1;l<64;++l)l!==32&&(a[l]=1024);return{floatView:e,uint32View:t,baseTable:n,shiftTable:s,mantissaTable:r,exponentTable:o,offsetTable:a}}function T7(i){Math.abs(i)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),i=lt(i,-65504,65504),Vi.floatView[0]=i;const e=Vi.uint32View[0],t=e>>23&511;return Vi.baseTable[t]+((e&8388607)>>Vi.shiftTable[t])}function S7(i){const e=i>>10;return Vi.uint32View[0]=Vi.mantissaTable[Vi.offsetTable[e]+(i&1023)]+Vi.exponentTable[e],Vi.floatView[0]}class ju{static toHalfFloat(e){return T7(e)}static fromHalfFloat(e){return S7(e)}}const _t=new T,Fo=new et;let P7=0;class Dn{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,Object.defineProperty(this,"id",{value:P7++}),this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n,this.usage=Zd,this.updateRanges=[],this.gpuType=Fn,this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let s=0,r=this.itemSize;s<r;s++)this.array[e+s]=t.array[n+s];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)Fo.fromBufferAttribute(this,t),Fo.applyMatrix3(e),this.setXY(t,Fo.x,Fo.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)_t.fromBufferAttribute(this,t),_t.applyMatrix3(e),this.setXYZ(t,_t.x,_t.y,_t.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)_t.fromBufferAttribute(this,t),_t.applyMatrix4(e),this.setXYZ(t,_t.x,_t.y,_t.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)_t.fromBufferAttribute(this,t),_t.applyNormalMatrix(e),this.setXYZ(t,_t.x,_t.y,_t.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)_t.fromBufferAttribute(this,t),_t.transformDirection(e),this.setXYZ(t,_t.x,_t.y,_t.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let n=this.array[e*this.itemSize+t];return this.normalized&&(n=pi(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=Mt(n,this.array)),this.array[e*this.itemSize+t]=n,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=pi(t,this.array)),t}setX(e,t){return this.normalized&&(t=Mt(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=pi(t,this.array)),t}setY(e,t){return this.normalized&&(t=Mt(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=pi(t,this.array)),t}setZ(e,t){return this.normalized&&(t=Mt(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=pi(t,this.array)),t}setW(e,t){return this.normalized&&(t=Mt(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=Mt(t,this.array),n=Mt(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,s){return e*=this.itemSize,this.normalized&&(t=Mt(t,this.array),n=Mt(n,this.array),s=Mt(s,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=s,this}setXYZW(e,t,n,s,r){return e*=this.itemSize,this.normalized&&(t=Mt(t,this.array),n=Mt(n,this.array),s=Mt(s,this.array),r=Mt(r,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=s,this.array[e+3]=r,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==Zd&&(e.usage=this.usage),e}}class X2 extends Dn{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class Uc extends Dn{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class xn extends Dn{constructor(e,t,n){super(new Float32Array(e),t,n)}}let R7=0;const Jn=new Be,il=new Zt,Bs=new T,Un=new Bi,Fr=new Bi,pn=new T;class zn extends Xs{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:R7++}),this.uuid=fi(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(H2(e)?Uc:X2)(e,1):this.index=e,this}setIndirect(e){return this.indirect=e,this}getIndirect(){return this.indirect}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const r=new rt().getNormalMatrix(e);n.applyNormalMatrix(r),n.needsUpdate=!0}const s=this.attributes.tangent;return s!==void 0&&(s.transformDirection(e),s.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return Jn.makeRotationFromQuaternion(e),this.applyMatrix4(Jn),this}rotateX(e){return Jn.makeRotationX(e),this.applyMatrix4(Jn),this}rotateY(e){return Jn.makeRotationY(e),this.applyMatrix4(Jn),this}rotateZ(e){return Jn.makeRotationZ(e),this.applyMatrix4(Jn),this}translate(e,t,n){return Jn.makeTranslation(e,t,n),this.applyMatrix4(Jn),this}scale(e,t,n){return Jn.makeScale(e,t,n),this.applyMatrix4(Jn),this}lookAt(e){return il.lookAt(e),il.updateMatrix(),this.applyMatrix4(il.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Bs).negate(),this.translate(Bs.x,Bs.y,Bs.z),this}setFromPoints(e){const t=this.getAttribute("position");if(t===void 0){const n=[];for(let s=0,r=e.length;s<r;s++){const o=e[s];n.push(o.x,o.y,o.z||0)}this.setAttribute("position",new xn(n,3))}else{const n=Math.min(e.length,t.count);for(let s=0;s<n;s++){const r=e[s];t.setXYZ(s,r.x,r.y,r.z||0)}e.length>t.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),t.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Bi);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new T(-1/0,-1/0,-1/0),new T(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,s=t.length;n<s;n++){const r=t[n];Un.setFromBufferAttribute(r),this.morphTargetsRelative?(pn.addVectors(this.boundingBox.min,Un.min),this.boundingBox.expandByPoint(pn),pn.addVectors(this.boundingBox.max,Un.max),this.boundingBox.expandByPoint(pn)):(this.boundingBox.expandByPoint(Un.min),this.boundingBox.expandByPoint(Un.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Ri);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new T,1/0);return}if(e){const n=this.boundingSphere.center;if(Un.setFromBufferAttribute(e),t)for(let r=0,o=t.length;r<o;r++){const a=t[r];Fr.setFromBufferAttribute(a),this.morphTargetsRelative?(pn.addVectors(Un.min,Fr.min),Un.expandByPoint(pn),pn.addVectors(Un.max,Fr.max),Un.expandByPoint(pn)):(Un.expandByPoint(Fr.min),Un.expandByPoint(Fr.max))}Un.getCenter(n);let s=0;for(let r=0,o=e.count;r<o;r++)pn.fromBufferAttribute(e,r),s=Math.max(s,n.distanceToSquared(pn));if(t)for(let r=0,o=t.length;r<o;r++){const a=t[r],l=this.morphTargetsRelative;for(let d=0,c=a.count;d<c;d++)pn.fromBufferAttribute(a,d),l&&(Bs.fromBufferAttribute(e,d),pn.add(Bs)),s=Math.max(s,n.distanceToSquared(pn))}this.boundingSphere.radius=Math.sqrt(s),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=t.position,s=t.normal,r=t.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new Dn(new Float32Array(4*n.count),4));const o=this.getAttribute("tangent"),a=[],l=[];for(let G=0;G<n.count;G++)a[G]=new T,l[G]=new T;const d=new T,c=new T,u=new T,p=new et,h=new et,v=new et,x=new T,m=new T;function f(G,M,R){d.fromBufferAttribute(n,G),c.fromBufferAttribute(n,M),u.fromBufferAttribute(n,R),p.fromBufferAttribute(r,G),h.fromBufferAttribute(r,M),v.fromBufferAttribute(r,R),c.sub(d),u.sub(d),h.sub(p),v.sub(p);const F=1/(h.x*v.y-v.x*h.y);isFinite(F)&&(x.copy(c).multiplyScalar(v.y).addScaledVector(u,-h.y).multiplyScalar(F),m.copy(u).multiplyScalar(h.x).addScaledVector(c,-v.x).multiplyScalar(F),a[G].add(x),a[M].add(x),a[R].add(x),l[G].add(m),l[M].add(m),l[R].add(m))}let N=this.groups;N.length===0&&(N=[{start:0,count:e.count}]);for(let G=0,M=N.length;G<M;++G){const R=N[G],F=R.start,K=R.count;for(let Q=F,ee=F+K;Q<ee;Q+=3)f(e.getX(Q+0),e.getX(Q+1),e.getX(Q+2))}const O=new T,P=new T,j=new T,D=new T;function V(G){j.fromBufferAttribute(s,G),D.copy(j);const M=a[G];O.copy(M),O.sub(j.multiplyScalar(j.dot(M))).normalize(),P.crossVectors(D,M);const F=P.dot(l[G])<0?-1:1;o.setXYZW(G,O.x,O.y,O.z,F)}for(let G=0,M=N.length;G<M;++G){const R=N[G],F=R.start,K=R.count;for(let Q=F,ee=F+K;Q<ee;Q+=3)V(e.getX(Q+0)),V(e.getX(Q+1)),V(e.getX(Q+2))}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new Dn(new Float32Array(t.count*3),3),this.setAttribute("normal",n);else for(let p=0,h=n.count;p<h;p++)n.setXYZ(p,0,0,0);const s=new T,r=new T,o=new T,a=new T,l=new T,d=new T,c=new T,u=new T;if(e)for(let p=0,h=e.count;p<h;p+=3){const v=e.getX(p+0),x=e.getX(p+1),m=e.getX(p+2);s.fromBufferAttribute(t,v),r.fromBufferAttribute(t,x),o.fromBufferAttribute(t,m),c.subVectors(o,r),u.subVectors(s,r),c.cross(u),a.fromBufferAttribute(n,v),l.fromBufferAttribute(n,x),d.fromBufferAttribute(n,m),a.add(c),l.add(c),d.add(c),n.setXYZ(v,a.x,a.y,a.z),n.setXYZ(x,l.x,l.y,l.z),n.setXYZ(m,d.x,d.y,d.z)}else for(let p=0,h=t.count;p<h;p+=3)s.fromBufferAttribute(t,p+0),r.fromBufferAttribute(t,p+1),o.fromBufferAttribute(t,p+2),c.subVectors(o,r),u.subVectors(s,r),c.cross(u),n.setXYZ(p+0,c.x,c.y,c.z),n.setXYZ(p+1,c.x,c.y,c.z),n.setXYZ(p+2,c.x,c.y,c.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)pn.fromBufferAttribute(e,t),pn.normalize(),e.setXYZ(t,pn.x,pn.y,pn.z)}toNonIndexed(){function e(a,l){const d=a.array,c=a.itemSize,u=a.normalized,p=new d.constructor(l.length*c);let h=0,v=0;for(let x=0,m=l.length;x<m;x++){a.isInterleavedBufferAttribute?h=l[x]*a.data.stride+a.offset:h=l[x]*c;for(let f=0;f<c;f++)p[v++]=d[h++]}return new Dn(p,c,u)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new zn,n=this.index.array,s=this.attributes;for(const a in s){const l=s[a],d=e(l,n);t.setAttribute(a,d)}const r=this.morphAttributes;for(const a in r){const l=[],d=r[a];for(let c=0,u=d.length;c<u;c++){const p=d[c],h=e(p,n);l.push(h)}t.morphAttributes[a]=l}t.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,l=o.length;a<l;a++){const d=o[a];t.addGroup(d.start,d.count,d.materialIndex)}return t}toJSON(){const e={metadata:{version:4.7,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const d in l)l[d]!==void 0&&(e[d]=l[d]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const l in n){const d=n[l];e.data.attributes[l]=d.toJSON(e.data)}const s={};let r=!1;for(const l in this.morphAttributes){const d=this.morphAttributes[l],c=[];for(let u=0,p=d.length;u<p;u++){const h=d[u];c.push(h.toJSON(e.data))}c.length>0&&(s[l]=c,r=!0)}r&&(e.data.morphAttributes=s,e.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(e.data.groups=JSON.parse(JSON.stringify(o)));const a=this.boundingSphere;return a!==null&&(e.data.boundingSphere=a.toJSON()),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone());const s=e.attributes;for(const d in s){const c=s[d];this.setAttribute(d,c.clone(t))}const r=e.morphAttributes;for(const d in r){const c=[],u=r[d];for(let p=0,h=u.length;p<h;p++)c.push(u[p].clone(t));this.morphAttributes[d]=c}this.morphTargetsRelative=e.morphTargetsRelative;const o=e.groups;for(let d=0,c=o.length;d<c;d++){const u=o[d];this.addGroup(u.start,u.count,u.materialIndex)}const a=e.boundingBox;a!==null&&(this.boundingBox=a.clone());const l=e.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const Vu=new Be,ys=new Or,qo=new Ri,Cu=new T,Yo=new T,Go=new T,Uo=new T,sl=new T,Zo=new T,Fu=new T,ko=new T;class Kt extends Zt{constructor(e=new zn,t=new qi){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.count=1,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const s=t[n[0]];if(s!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,o=s.length;r<o;r++){const a=s[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=r}}}}getVertexPosition(e,t){const n=this.geometry,s=n.attributes.position,r=n.morphAttributes.position,o=n.morphTargetsRelative;t.fromBufferAttribute(s,e);const a=this.morphTargetInfluences;if(r&&a){Zo.set(0,0,0);for(let l=0,d=r.length;l<d;l++){const c=a[l],u=r[l];c!==0&&(sl.fromBufferAttribute(u,e),o?Zo.addScaledVector(sl,c):Zo.addScaledVector(sl.sub(t),c))}t.add(Zo)}return t}raycast(e,t){const n=this.geometry,s=this.material,r=this.matrixWorld;s!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),qo.copy(n.boundingSphere),qo.applyMatrix4(r),ys.copy(e.ray).recast(e.near),!(qo.containsPoint(ys.origin)===!1&&(ys.intersectSphere(qo,Cu)===null||ys.origin.distanceToSquared(Cu)>(e.far-e.near)**2))&&(Vu.copy(r).invert(),ys.copy(e.ray).applyMatrix4(Vu),!(n.boundingBox!==null&&ys.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(e,t,ys)))}_computeIntersections(e,t,n){let s;const r=this.geometry,o=this.material,a=r.index,l=r.attributes.position,d=r.attributes.uv,c=r.attributes.uv1,u=r.attributes.normal,p=r.groups,h=r.drawRange;if(a!==null)if(Array.isArray(o))for(let v=0,x=p.length;v<x;v++){const m=p[v],f=o[m.materialIndex],N=Math.max(m.start,h.start),O=Math.min(a.count,Math.min(m.start+m.count,h.start+h.count));for(let P=N,j=O;P<j;P+=3){const D=a.getX(P),V=a.getX(P+1),G=a.getX(P+2);s=Jo(this,f,e,n,d,c,u,D,V,G),s&&(s.faceIndex=Math.floor(P/3),s.face.materialIndex=m.materialIndex,t.push(s))}}else{const v=Math.max(0,h.start),x=Math.min(a.count,h.start+h.count);for(let m=v,f=x;m<f;m+=3){const N=a.getX(m),O=a.getX(m+1),P=a.getX(m+2);s=Jo(this,o,e,n,d,c,u,N,O,P),s&&(s.faceIndex=Math.floor(m/3),t.push(s))}}else if(l!==void 0)if(Array.isArray(o))for(let v=0,x=p.length;v<x;v++){const m=p[v],f=o[m.materialIndex],N=Math.max(m.start,h.start),O=Math.min(l.count,Math.min(m.start+m.count,h.start+h.count));for(let P=N,j=O;P<j;P+=3){const D=P,V=P+1,G=P+2;s=Jo(this,f,e,n,d,c,u,D,V,G),s&&(s.faceIndex=Math.floor(P/3),s.face.materialIndex=m.materialIndex,t.push(s))}}else{const v=Math.max(0,h.start),x=Math.min(l.count,h.start+h.count);for(let m=v,f=x;m<f;m+=3){const N=m,O=m+1,P=m+2;s=Jo(this,o,e,n,d,c,u,N,O,P),s&&(s.faceIndex=Math.floor(m/3),t.push(s))}}}}function L7(i,e,t,n,s,r,o,a){let l;if(e.side===qn?l=n.intersectTriangle(o,r,s,!0,a):l=n.intersectTriangle(s,r,o,e.side===Ui,a),l===null)return null;ko.copy(a),ko.applyMatrix4(i.matrixWorld);const d=t.ray.origin.distanceTo(ko);return d<t.near||d>t.far?null:{distance:d,point:ko.clone(),object:i}}function Jo(i,e,t,n,s,r,o,a,l,d){i.getVertexPosition(a,Yo),i.getVertexPosition(l,Go),i.getVertexPosition(d,Uo);const c=L7(i,e,t,n,Yo,Go,Uo,Fu);if(c){const u=new T;rr.getBarycoord(Fu,Yo,Go,Uo,u),s&&(c.uv=rr.getInterpolatedAttribute(s,a,l,d,u,new et)),r&&(c.uv1=rr.getInterpolatedAttribute(r,a,l,d,u,new et)),o&&(c.normal=rr.getInterpolatedAttribute(o,a,l,d,u,new T),c.normal.dot(n.direction)>0&&c.normal.multiplyScalar(-1));const p={a,b:l,c:d,normal:new T,materialIndex:0};rr.getNormal(Yo,Go,Uo,p.normal),c.face=p,c.barycoord=u}return c}class ti extends zn{constructor(e=1,t=1,n=1,s=1,r=1,o=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:s,heightSegments:r,depthSegments:o};const a=this;s=Math.floor(s),r=Math.floor(r),o=Math.floor(o);const l=[],d=[],c=[],u=[];let p=0,h=0;v("z","y","x",-1,-1,n,t,e,o,r,0),v("z","y","x",1,-1,n,t,-e,o,r,1),v("x","z","y",1,1,e,n,t,s,o,2),v("x","z","y",1,-1,e,n,-t,s,o,3),v("x","y","z",1,-1,e,t,n,s,r,4),v("x","y","z",-1,-1,e,t,-n,s,r,5),this.setIndex(l),this.setAttribute("position",new xn(d,3)),this.setAttribute("normal",new xn(c,3)),this.setAttribute("uv",new xn(u,2));function v(x,m,f,N,O,P,j,D,V,G,M){const R=P/V,F=j/G,K=P/2,Q=j/2,ee=D/2,ue=V+1,ne=G+1;let ve=0,te=0;const Te=new T;for(let Le=0;Le<ne;Le++){const je=Le*F-Q;for(let Ke=0;Ke<ue;Ke++){const ut=Ke*R-K;Te[x]=ut*N,Te[m]=je*O,Te[f]=ee,d.push(Te.x,Te.y,Te.z),Te[x]=0,Te[m]=0,Te[f]=D>0?1:-1,c.push(Te.x,Te.y,Te.z),u.push(Ke/V),u.push(1-Le/G),ve+=1}}for(let Le=0;Le<G;Le++)for(let je=0;je<V;je++){const Ke=p+je+ue*Le,ut=p+je+ue*(Le+1),se=p+(je+1)+ue*(Le+1),ge=p+(je+1)+ue*Le;l.push(Ke,ut,ge),l.push(ut,se,ge),te+=6}a.addGroup(h,te,M),h+=te,p+=ve}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ti(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function Rr(i){const e={};for(const t in i){e[t]={};for(const n in i[t]){const s=i[t][n];s&&(s.isColor||s.isMatrix3||s.isMatrix4||s.isVector2||s.isVector3||s.isVector4||s.isTexture||s.isQuaternion)?s.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[t][n]=null):e[t][n]=s.clone():Array.isArray(s)?e[t][n]=s.slice():e[t][n]=s}}return e}function En(i){const e={};for(let t=0;t<i.length;t++){const n=Rr(i[t]);for(const s in n)e[s]=n[s]}return e}function N7(i){const e=[];for(let t=0;t<i.length;t++)e.push(i[t].clone());return e}function I2(i){const e=i.getRenderTarget();return e===null?i.outputColorSpace:e.isXRRenderTarget===!0?e.texture.colorSpace:wt.workingColorSpace}const M7={clone:Rr,merge:En};var O7=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,z7=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class fs extends hi{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=O7,this.fragmentShader=z7,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Rr(e.uniforms),this.uniformsGroups=N7(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const s in this.uniforms){const o=this.uniforms[s].value;o&&o.isTexture?t.uniforms[s]={type:"t",value:o.toJSON(e).uuid}:o&&o.isColor?t.uniforms[s]={type:"c",value:o.getHex()}:o&&o.isVector2?t.uniforms[s]={type:"v2",value:o.toArray()}:o&&o.isVector3?t.uniforms[s]={type:"v3",value:o.toArray()}:o&&o.isVector4?t.uniforms[s]={type:"v4",value:o.toArray()}:o&&o.isMatrix3?t.uniforms[s]={type:"m3",value:o.toArray()}:o&&o.isMatrix4?t.uniforms[s]={type:"m4",value:o.toArray()}:t.uniforms[s]={value:o}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;const n={};for(const s in this.extensions)this.extensions[s]===!0&&(n[s]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}let D2=class extends Zt{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Be,this.projectionMatrix=new Be,this.projectionMatrixInverse=new Be,this.coordinateSystem=Fi}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}};const ns=new T,qu=new et,Yu=new et;class Xn extends D2{constructor(e=50,t=1,n=.1,s=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=s,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=Pr*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(br*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return Pr*2*Math.atan(Math.tan(br*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,t,n){ns.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),t.set(ns.x,ns.y).multiplyScalar(-e/ns.z),ns.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(ns.x,ns.y).multiplyScalar(-e/ns.z)}getViewSize(e,t){return this.getViewBounds(e,qu,Yu),t.subVectors(Yu,qu)}setViewOffset(e,t,n,s,r,o){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=s,this.view.width=r,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(br*.5*this.fov)/this.zoom,n=2*t,s=this.aspect*n,r=-.5*s;const o=this.view;if(this.view!==null&&this.view.enabled){const l=o.fullWidth,d=o.fullHeight;r+=o.offsetX*s/l,t-=o.offsetY*n/d,s*=o.width/l,n*=o.height/d}const a=this.filmOffset;a!==0&&(r+=e*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+s,t,t-n,e,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const Ks=-90,Qs=1;class H7 extends Zt{constructor(e,t,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const s=new Xn(Ks,Qs,e,t);s.layers=this.layers,this.add(s);const r=new Xn(Ks,Qs,e,t);r.layers=this.layers,this.add(r);const o=new Xn(Ks,Qs,e,t);o.layers=this.layers,this.add(o);const a=new Xn(Ks,Qs,e,t);a.layers=this.layers,this.add(a);const l=new Xn(Ks,Qs,e,t);l.layers=this.layers,this.add(l);const d=new Xn(Ks,Qs,e,t);d.layers=this.layers,this.add(d)}updateCoordinateSystem(){const e=this.coordinateSystem,t=this.children.concat(),[n,s,r,o,a,l]=t;for(const d of t)this.remove(d);if(e===Fi)n.up.set(0,1,0),n.lookAt(1,0,0),s.up.set(0,1,0),s.lookAt(-1,0,0),r.up.set(0,0,-1),r.lookAt(0,1,0),o.up.set(0,0,1),o.lookAt(0,-1,0),a.up.set(0,1,0),a.lookAt(0,0,1),l.up.set(0,1,0),l.lookAt(0,0,-1);else if(e===Ga)n.up.set(0,-1,0),n.lookAt(-1,0,0),s.up.set(0,-1,0),s.lookAt(1,0,0),r.up.set(0,0,1),r.lookAt(0,1,0),o.up.set(0,0,-1),o.lookAt(0,-1,0),a.up.set(0,-1,0),a.lookAt(0,0,1),l.up.set(0,-1,0),l.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);for(const d of t)this.add(d),d.updateMatrixWorld()}update(e,t){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:s}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());const[r,o,a,l,d,c]=this.children,u=e.getRenderTarget(),p=e.getActiveCubeFace(),h=e.getActiveMipmapLevel(),v=e.xr.enabled;e.xr.enabled=!1;const x=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0,s),e.render(t,r),e.setRenderTarget(n,1,s),e.render(t,o),e.setRenderTarget(n,2,s),e.render(t,a),e.setRenderTarget(n,3,s),e.render(t,l),e.setRenderTarget(n,4,s),e.render(t,d),n.texture.generateMipmaps=x,e.setRenderTarget(n,5,s),e.render(t,c),e.setRenderTarget(u,p,h),e.xr.enabled=v,n.texture.needsPMREMUpdate=!0}}class W2 extends gn{constructor(e=[],t=xr,n,s,r,o,a,l,d,c){super(e,t,n,s,r,o,a,l,d,c),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class E7 extends zs{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const n={width:e,height:e,depth:1},s=[n,n,n,n,n,n];this.texture=new W2(s),this._setTextureOptions(t),this.texture.isRenderTargetTexture=!0}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},s=new ti(5,5,5),r=new fs({name:"CubemapFromEquirect",uniforms:Rr(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:qn,blending:us});r.uniforms.tEquirect.value=t;const o=new Kt(s,r),a=t.minFilter;return t.minFilter===Ti&&(t.minFilter=wn),new H7(1,10,this).update(e,o),t.minFilter=a,o.geometry.dispose(),o.material.dispose(),this}clear(e,t=!0,n=!0,s=!0){const r=e.getRenderTarget();for(let o=0;o<6;o++)e.setRenderTarget(this,o),e.clear(t,n,s);e.setRenderTarget(r)}}class cs extends Zt{constructor(){super(),this.isGroup=!0,this.type="Group"}}const A7={type:"move"};class rl{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new cs,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new cs,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new T,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new T),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new cs,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new T,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new T),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const n of e.hand.values())this._getHandJoint(t,n)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let s=null,r=null,o=null;const a=this._targetRay,l=this._grip,d=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(d&&e.hand){o=!0;for(const x of e.hand.values()){const m=t.getJointPose(x,n),f=this._getHandJoint(d,x);m!==null&&(f.matrix.fromArray(m.transform.matrix),f.matrix.decompose(f.position,f.rotation,f.scale),f.matrixWorldNeedsUpdate=!0,f.jointRadius=m.radius),f.visible=m!==null}const c=d.joints["index-finger-tip"],u=d.joints["thumb-tip"],p=c.position.distanceTo(u.position),h=.02,v=.005;d.inputState.pinching&&p>h+v?(d.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!d.inputState.pinching&&p<=h-v&&(d.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else l!==null&&e.gripSpace&&(r=t.getPose(e.gripSpace,n),r!==null&&(l.matrix.fromArray(r.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),l.matrixWorldNeedsUpdate=!0,r.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(r.linearVelocity)):l.hasLinearVelocity=!1,r.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(r.angularVelocity)):l.hasAngularVelocity=!1));a!==null&&(s=t.getPose(e.targetRaySpace,n),s===null&&r!==null&&(s=r),s!==null&&(a.matrix.fromArray(s.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),a.matrixWorldNeedsUpdate=!0,s.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(s.linearVelocity)):a.hasLinearVelocity=!1,s.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(s.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(A7)))}return a!==null&&(a.visible=s!==null),l!==null&&(l.visible=r!==null),d!==null&&(d.visible=o!==null),this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const n=new cs;n.matrixAutoUpdate=!1,n.visible=!1,e.joints[t.jointName]=n,e.add(n)}return e.joints[t.jointName]}}let Gu=class extends Zt{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new zt,this.environmentIntensity=1,this.environmentRotation=new zt,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,this.backgroundRotation.copy(e.backgroundRotation),this.environmentIntensity=e.environmentIntensity,this.environmentRotation.copy(e.environmentRotation),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(t.object.backgroundIntensity=this.backgroundIntensity),t.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(t.object.environmentIntensity=this.environmentIntensity),t.object.environmentRotation=this.environmentRotation.toArray(),t}};class X7{constructor(e,t){this.isInterleavedBuffer=!0,this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=Zd,this.updateRanges=[],this.version=0,this.uuid=fi()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,n){e*=this.stride,n*=t.stride;for(let s=0,r=this.stride;s<r;s++)this.array[e+s]=t.array[n+s];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=fi()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(t,this.stride);return n.setUsage(this.usage),n}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=fi()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const Hn=new T;class Zc{constructor(e,t,n,s=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=e,this.itemSize=t,this.offset=n,this.normalized=s}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,n=this.data.count;t<n;t++)Hn.fromBufferAttribute(this,t),Hn.applyMatrix4(e),this.setXYZ(t,Hn.x,Hn.y,Hn.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)Hn.fromBufferAttribute(this,t),Hn.applyNormalMatrix(e),this.setXYZ(t,Hn.x,Hn.y,Hn.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)Hn.fromBufferAttribute(this,t),Hn.transformDirection(e),this.setXYZ(t,Hn.x,Hn.y,Hn.z);return this}getComponent(e,t){let n=this.array[e*this.data.stride+this.offset+t];return this.normalized&&(n=pi(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=Mt(n,this.array)),this.data.array[e*this.data.stride+this.offset+t]=n,this}setX(e,t){return this.normalized&&(t=Mt(t,this.array)),this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.normalized&&(t=Mt(t,this.array)),this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.normalized&&(t=Mt(t,this.array)),this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.normalized&&(t=Mt(t,this.array)),this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){let t=this.data.array[e*this.data.stride+this.offset];return this.normalized&&(t=pi(t,this.array)),t}getY(e){let t=this.data.array[e*this.data.stride+this.offset+1];return this.normalized&&(t=pi(t,this.array)),t}getZ(e){let t=this.data.array[e*this.data.stride+this.offset+2];return this.normalized&&(t=pi(t,this.array)),t}getW(e){let t=this.data.array[e*this.data.stride+this.offset+3];return this.normalized&&(t=pi(t,this.array)),t}setXY(e,t,n){return e=e*this.data.stride+this.offset,this.normalized&&(t=Mt(t,this.array),n=Mt(n,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this}setXYZ(e,t,n,s){return e=e*this.data.stride+this.offset,this.normalized&&(t=Mt(t,this.array),n=Mt(n,this.array),s=Mt(s,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=s,this}setXYZW(e,t,n,s,r){return e=e*this.data.stride+this.offset,this.normalized&&(t=Mt(t,this.array),n=Mt(n,this.array),s=Mt(s,this.array),r=Mt(r,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=s,this.data.array[e+3]=r,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const s=n*this.data.stride+this.offset;for(let r=0;r<this.itemSize;r++)t.push(this.data.array[s+r])}return new Dn(new this.array.constructor(t),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new Zc(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const s=n*this.data.stride+this.offset;for(let r=0;r<this.itemSize;r++)t.push(this.data.array[s+r])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}const Uu=new T,Zu=new Rt,ku=new Rt,I7=new T,Ju=new Be,Bo=new T,ol=new Ri,Bu=new Be,al=new Or;class D7 extends Kt{constructor(e,t){super(e,t),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode=wu,this.bindMatrix=new Be,this.bindMatrixInverse=new Be,this.boundingBox=null,this.boundingSphere=null}computeBoundingBox(){const e=this.geometry;this.boundingBox===null&&(this.boundingBox=new Bi),this.boundingBox.makeEmpty();const t=e.getAttribute("position");for(let n=0;n<t.count;n++)this.getVertexPosition(n,Bo),this.boundingBox.expandByPoint(Bo)}computeBoundingSphere(){const e=this.geometry;this.boundingSphere===null&&(this.boundingSphere=new Ri),this.boundingSphere.makeEmpty();const t=e.getAttribute("position");for(let n=0;n<t.count;n++)this.getVertexPosition(n,Bo),this.boundingSphere.expandByPoint(Bo)}copy(e,t){return super.copy(e,t),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}raycast(e,t){const n=this.material,s=this.matrixWorld;n!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),ol.copy(this.boundingSphere),ol.applyMatrix4(s),e.ray.intersectsSphere(ol)!==!1&&(Bu.copy(s).invert(),al.copy(e.ray).applyMatrix4(Bu),!(this.boundingBox!==null&&al.intersectsBox(this.boundingBox)===!1)&&this._computeIntersections(e,t,al)))}getVertexPosition(e,t){return super.getVertexPosition(e,t),this.applyBoneTransform(e,t),t}bind(e,t){this.skeleton=e,t===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new Rt,t=this.geometry.attributes.skinWeight;for(let n=0,s=t.count;n<s;n++){e.fromBufferAttribute(t,n);const r=1/e.manhattanLength();r!==1/0?e.multiplyScalar(r):e.set(1,0,0,0),t.setXYZW(n,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode===wu?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode===Mh?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}applyBoneTransform(e,t){const n=this.skeleton,s=this.geometry;Zu.fromBufferAttribute(s.attributes.skinIndex,e),ku.fromBufferAttribute(s.attributes.skinWeight,e),Uu.copy(t).applyMatrix4(this.bindMatrix),t.set(0,0,0);for(let r=0;r<4;r++){const o=ku.getComponent(r);if(o!==0){const a=Zu.getComponent(r);Ju.multiplyMatrices(n.bones[a].matrixWorld,n.boneInverses[a]),t.addScaledVector(I7.copy(Uu).applyMatrix4(Ju),o)}}return t.applyMatrix4(this.bindMatrixInverse)}}class j2 extends Zt{constructor(){super(),this.isBone=!0,this.type="Bone"}}class kc extends gn{constructor(e=null,t=1,n=1,s,r,o,a,l,d=In,c=In,u,p){super(null,o,a,l,d,c,s,r,u,p),this.isDataTexture=!0,this.image={data:e,width:t,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const Ku=new Be,W7=new Be;class Jc{constructor(e=[],t=[]){this.uuid=fi(),this.bones=e.slice(0),this.boneInverses=t,this.boneMatrices=null,this.boneTexture=null,this.init()}init(){const e=this.bones,t=this.boneInverses;if(this.boneMatrices=new Float32Array(e.length*16),t.length===0)this.calculateInverses();else if(e.length!==t.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let n=0,s=this.bones.length;n<s;n++)this.boneInverses.push(new Be)}}calculateInverses(){this.boneInverses.length=0;for(let e=0,t=this.bones.length;e<t;e++){const n=new Be;this.bones[e]&&n.copy(this.bones[e].matrixWorld).invert(),this.boneInverses.push(n)}}pose(){for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&n.matrixWorld.copy(this.boneInverses[e]).invert()}for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&(n.parent&&n.parent.isBone?(n.matrix.copy(n.parent.matrixWorld).invert(),n.matrix.multiply(n.matrixWorld)):n.matrix.copy(n.matrixWorld),n.matrix.decompose(n.position,n.quaternion,n.scale))}}update(){const e=this.bones,t=this.boneInverses,n=this.boneMatrices,s=this.boneTexture;for(let r=0,o=e.length;r<o;r++){const a=e[r]?e[r].matrixWorld:W7;Ku.multiplyMatrices(a,t[r]),Ku.toArray(n,r*16)}s!==null&&(s.needsUpdate=!0)}clone(){return new Jc(this.bones,this.boneInverses)}computeBoneTexture(){let e=Math.sqrt(this.bones.length*4);e=Math.ceil(e/4)*4,e=Math.max(e,4);const t=new Float32Array(e*e*4);t.set(this.boneMatrices);const n=new kc(t,e,e,kn,Fn);return n.needsUpdate=!0,this.boneMatrices=t,this.boneTexture=n,this}getBoneByName(e){for(let t=0,n=this.bones.length;t<n;t++){const s=this.bones[t];if(s.name===e)return s}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(e,t){this.uuid=e.uuid;for(let n=0,s=e.bones.length;n<s;n++){const r=e.bones[n];let o=t[r];o===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",r),o=new j2),this.bones.push(o),this.boneInverses.push(new Be().fromArray(e.boneInverses[n]))}return this.init(),this}toJSON(){const e={metadata:{version:4.7,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};e.uuid=this.uuid;const t=this.bones,n=this.boneInverses;for(let s=0,r=t.length;s<r;s++){const o=t[s];e.bones.push(o.uuid);const a=n[s];e.boneInverses.push(a.toArray())}return e}}class kd extends Dn{constructor(e,t,n,s=1){super(e,t,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=s}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}const _s=new Be,Qu=new Be,Ko=[],_u=new Bi,j7=new Be,qr=new Kt,Yr=new Ri;class Is extends Kt{constructor(e,t,n){super(e,t),this.isInstancedMesh=!0,this.instanceMatrix=new kd(new Float32Array(n*16),16),this.instanceColor=null,this.morphTexture=null,this.count=n,this.boundingBox=null,this.boundingSphere=null;for(let s=0;s<n;s++)this.setMatrixAt(s,j7)}computeBoundingBox(){const e=this.geometry,t=this.count;this.boundingBox===null&&(this.boundingBox=new Bi),e.boundingBox===null&&e.computeBoundingBox(),this.boundingBox.makeEmpty();for(let n=0;n<t;n++)this.getMatrixAt(n,_s),_u.copy(e.boundingBox).applyMatrix4(_s),this.boundingBox.union(_u)}computeBoundingSphere(){const e=this.geometry,t=this.count;this.boundingSphere===null&&(this.boundingSphere=new Ri),e.boundingSphere===null&&e.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let n=0;n<t;n++)this.getMatrixAt(n,_s),Yr.copy(e.boundingSphere).applyMatrix4(_s),this.boundingSphere.union(Yr)}copy(e,t){return super.copy(e,t),this.instanceMatrix.copy(e.instanceMatrix),e.morphTexture!==null&&(this.morphTexture=e.morphTexture.clone()),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}getColorAt(e,t){t.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,e*16)}getMorphAt(e,t){const n=t.morphTargetInfluences,s=this.morphTexture.source.data.data,r=n.length+1,o=e*r+1;for(let a=0;a<n.length;a++)n[a]=s[o+a]}raycast(e,t){const n=this.matrixWorld,s=this.count;if(qr.geometry=this.geometry,qr.material=this.material,qr.material!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),Yr.copy(this.boundingSphere),Yr.applyMatrix4(n),e.ray.intersectsSphere(Yr)!==!1))for(let r=0;r<s;r++){this.getMatrixAt(r,_s),Qu.multiplyMatrices(n,_s),qr.matrixWorld=Qu,qr.raycast(e,Ko);for(let o=0,a=Ko.length;o<a;o++){const l=Ko[o];l.instanceId=r,l.object=this,t.push(l)}Ko.length=0}}setColorAt(e,t){this.instanceColor===null&&(this.instanceColor=new kd(new Float32Array(this.instanceMatrix.count*3).fill(1),3)),t.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,t){t.toArray(this.instanceMatrix.array,e*16)}setMorphAt(e,t){const n=t.morphTargetInfluences,s=n.length+1;this.morphTexture===null&&(this.morphTexture=new kc(new Float32Array(s*this.count),s,this.count,w0,Fn));const r=this.morphTexture.source.data.data;let o=0;for(let d=0;d<n.length;d++)o+=n[d];const a=this.geometry.morphTargetsRelative?1:1-o,l=s*e;r[l]=a,r.set(n,l+1)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"}),this.morphTexture!==null&&(this.morphTexture.dispose(),this.morphTexture=null)}}const ll=new T,V7=new T,C7=new rt;class as{constructor(e=new T(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,s){return this.normal.set(e,t,n),this.constant=s,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const s=ll.subVectors(n,t).cross(V7.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(s,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const n=e.delta(ll),s=this.normal.dot(n);if(s===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const r=-(e.start.dot(this.normal)+this.constant)/s;return r<0||r>1?null:t.copy(e.start).addScaledVector(n,r)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||C7.getNormalMatrix(e),s=this.coplanarPoint(ll).applyMatrix4(e),r=this.normal.applyMatrix3(n).normalize();return this.constant=-s.dot(r),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const ws=new Ri,F7=new et(.5,.5),Qo=new T;class Bc{constructor(e=new as,t=new as,n=new as,s=new as,r=new as,o=new as){this.planes=[e,t,n,s,r,o]}set(e,t,n,s,r,o){const a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(n),a[3].copy(s),a[4].copy(r),a[5].copy(o),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e,t=Fi){const n=this.planes,s=e.elements,r=s[0],o=s[1],a=s[2],l=s[3],d=s[4],c=s[5],u=s[6],p=s[7],h=s[8],v=s[9],x=s[10],m=s[11],f=s[12],N=s[13],O=s[14],P=s[15];if(n[0].setComponents(l-r,p-d,m-h,P-f).normalize(),n[1].setComponents(l+r,p+d,m+h,P+f).normalize(),n[2].setComponents(l+o,p+c,m+v,P+N).normalize(),n[3].setComponents(l-o,p-c,m-v,P-N).normalize(),n[4].setComponents(l-a,p-u,m-x,P-O).normalize(),t===Fi)n[5].setComponents(l+a,p+u,m+x,P+O).normalize();else if(t===Ga)n[5].setComponents(a,u,x,O).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);return this}intersectsObject(e){if(e.boundingSphere!==void 0)e.boundingSphere===null&&e.computeBoundingSphere(),ws.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;t.boundingSphere===null&&t.computeBoundingSphere(),ws.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(ws)}intersectsSprite(e){ws.center.set(0,0,0);const t=F7.distanceTo(e.center);return ws.radius=.7071067811865476+t,ws.applyMatrix4(e.matrixWorld),this.intersectsSphere(ws)}intersectsSphere(e){const t=this.planes,n=e.center,s=-e.radius;for(let r=0;r<6;r++)if(t[r].distanceToPoint(n)<s)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const s=t[n];if(Qo.x=s.normal.x>0?e.max.x:e.min.x,Qo.y=s.normal.y>0?e.max.y:e.min.y,Qo.z=s.normal.z>0?e.max.z:e.min.z,s.distanceToPoint(Qo)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}class vo extends hi{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new tt(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}const Ua=new T,Za=new T,$u=new Be,Gr=new Or,_o=new Ri,dl=new T,e1=new T;class g0 extends Zt{constructor(e=new zn,t=new vo){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=t,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[0];for(let s=1,r=t.count;s<r;s++)Ua.fromBufferAttribute(t,s-1),Za.fromBufferAttribute(t,s),n[s]=n[s-1],n[s]+=Ua.distanceTo(Za);e.setAttribute("lineDistance",new xn(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,t){const n=this.geometry,s=this.matrixWorld,r=e.params.Line.threshold,o=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),_o.copy(n.boundingSphere),_o.applyMatrix4(s),_o.radius+=r,e.ray.intersectsSphere(_o)===!1)return;$u.copy(s).invert(),Gr.copy(e.ray).applyMatrix4($u);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),l=a*a,d=this.isLineSegments?2:1,c=n.index,p=n.attributes.position;if(c!==null){const h=Math.max(0,o.start),v=Math.min(c.count,o.start+o.count);for(let x=h,m=v-1;x<m;x+=d){const f=c.getX(x),N=c.getX(x+1),O=$o(this,e,Gr,l,f,N,x);O&&t.push(O)}if(this.isLineLoop){const x=c.getX(v-1),m=c.getX(h),f=$o(this,e,Gr,l,x,m,v-1);f&&t.push(f)}}else{const h=Math.max(0,o.start),v=Math.min(p.count,o.start+o.count);for(let x=h,m=v-1;x<m;x+=d){const f=$o(this,e,Gr,l,x,x+1,x);f&&t.push(f)}if(this.isLineLoop){const x=$o(this,e,Gr,l,v-1,h,v-1);x&&t.push(x)}}}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const s=t[n[0]];if(s!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,o=s.length;r<o;r++){const a=s[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=r}}}}}function $o(i,e,t,n,s,r,o){const a=i.geometry.attributes.position;if(Ua.fromBufferAttribute(a,s),Za.fromBufferAttribute(a,r),t.distanceSqToSegment(Ua,Za,dl,e1)>n)return;dl.applyMatrix4(i.matrixWorld);const d=e.ray.origin.distanceTo(dl);if(!(d<e.near||d>e.far))return{distance:d,point:e1.clone().applyMatrix4(i.matrixWorld),index:o,face:null,faceIndex:null,barycoord:null,object:i}}const t1=new T,n1=new T;class Kc extends g0{constructor(e,t){super(e,t),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[];for(let s=0,r=t.count;s<r;s+=2)t1.fromBufferAttribute(t,s),n1.fromBufferAttribute(t,s+1),n[s]=s===0?0:n[s-1],n[s+1]=n[s]+t1.distanceTo(n1);e.setAttribute("lineDistance",new xn(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class q7 extends g0{constructor(e,t){super(e,t),this.isLineLoop=!0,this.type="LineLoop"}}class V2 extends hi{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new tt(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}const i1=new Be,Jd=new Or,ea=new Ri,ta=new T;class Y7 extends Zt{constructor(e=new zn,t=new V2){super(),this.isPoints=!0,this.type="Points",this.geometry=e,this.material=t,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}raycast(e,t){const n=this.geometry,s=this.matrixWorld,r=e.params.Points.threshold,o=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),ea.copy(n.boundingSphere),ea.applyMatrix4(s),ea.radius+=r,e.ray.intersectsSphere(ea)===!1)return;i1.copy(s).invert(),Jd.copy(e.ray).applyMatrix4(i1);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),l=a*a,d=n.index,u=n.attributes.position;if(d!==null){const p=Math.max(0,o.start),h=Math.min(d.count,o.start+o.count);for(let v=p,x=h;v<x;v++){const m=d.getX(v);ta.fromBufferAttribute(u,m),s1(ta,m,l,s,e,t,this)}}else{const p=Math.max(0,o.start),h=Math.min(u.count,o.start+o.count);for(let v=p,x=h;v<x;v++)ta.fromBufferAttribute(u,v),s1(ta,v,l,s,e,t,this)}}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const s=t[n[0]];if(s!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,o=s.length;r<o;r++){const a=s[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=r}}}}}function s1(i,e,t,n,s,r,o){const a=Jd.distanceSqToPoint(i);if(a<t){const l=new T;Jd.closestPointToPoint(i,l),l.applyMatrix4(n);const d=s.ray.origin.distanceTo(l);if(d<s.near||d>s.far)return;r.push({distance:d,distanceToRay:Math.sqrt(a),point:l,index:e,face:null,faceIndex:null,barycoord:null,object:o})}}class C2 extends gn{constructor(e,t,n=Os,s,r,o,a=In,l=In,d,c=po,u=1){if(c!==po&&c!==fo)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");const p={width:e,height:t,depth:u};super(p,s,r,o,a,l,c,n,d),this.isDepthTexture=!0,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.source=new Yc(Object.assign({},e.image)),this.compareFunction=e.compareFunction,this}toJSON(e){const t=super.toJSON(e);return this.compareFunction!==null&&(t.compareFunction=this.compareFunction),t}}class x0 extends zn{constructor(e=1,t=1,n=1,s=32,r=1,o=!1,a=0,l=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:s,heightSegments:r,openEnded:o,thetaStart:a,thetaLength:l};const d=this;s=Math.floor(s),r=Math.floor(r);const c=[],u=[],p=[],h=[];let v=0;const x=[],m=n/2;let f=0;N(),o===!1&&(e>0&&O(!0),t>0&&O(!1)),this.setIndex(c),this.setAttribute("position",new xn(u,3)),this.setAttribute("normal",new xn(p,3)),this.setAttribute("uv",new xn(h,2));function N(){const P=new T,j=new T;let D=0;const V=(t-e)/n;for(let G=0;G<=r;G++){const M=[],R=G/r,F=R*(t-e)+e;for(let K=0;K<=s;K++){const Q=K/s,ee=Q*l+a,ue=Math.sin(ee),ne=Math.cos(ee);j.x=F*ue,j.y=-R*n+m,j.z=F*ne,u.push(j.x,j.y,j.z),P.set(ue,V,ne).normalize(),p.push(P.x,P.y,P.z),h.push(Q,1-R),M.push(v++)}x.push(M)}for(let G=0;G<s;G++)for(let M=0;M<r;M++){const R=x[M][G],F=x[M+1][G],K=x[M+1][G+1],Q=x[M][G+1];(e>0||M!==0)&&(c.push(R,F,Q),D+=3),(t>0||M!==r-1)&&(c.push(F,K,Q),D+=3)}d.addGroup(f,D,0),f+=D}function O(P){const j=v,D=new et,V=new T;let G=0;const M=P===!0?e:t,R=P===!0?1:-1;for(let K=1;K<=s;K++)u.push(0,m*R,0),p.push(0,R,0),h.push(.5,.5),v++;const F=v;for(let K=0;K<=s;K++){const ee=K/s*l+a,ue=Math.cos(ee),ne=Math.sin(ee);V.x=M*ne,V.y=m*R,V.z=M*ue,u.push(V.x,V.y,V.z),p.push(0,R,0),D.x=ue*.5+.5,D.y=ne*.5*R+.5,h.push(D.x,D.y),v++}for(let K=0;K<s;K++){const Q=j+K,ee=F+K;P===!0?c.push(ee,ee+1,Q):c.push(ee+1,ee,Q),G+=3}d.addGroup(f,G,P===!0?1:2),f+=G}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new x0(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}const na=new T,ia=new T,cl=new T,sa=new rr;class G7 extends zn{constructor(e=null,t=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:e,thresholdAngle:t},e!==null){const s=Math.pow(10,4),r=Math.cos(br*t),o=e.getIndex(),a=e.getAttribute("position"),l=o?o.count:a.count,d=[0,0,0],c=["a","b","c"],u=new Array(3),p={},h=[];for(let v=0;v<l;v+=3){o?(d[0]=o.getX(v),d[1]=o.getX(v+1),d[2]=o.getX(v+2)):(d[0]=v,d[1]=v+1,d[2]=v+2);const{a:x,b:m,c:f}=sa;if(x.fromBufferAttribute(a,d[0]),m.fromBufferAttribute(a,d[1]),f.fromBufferAttribute(a,d[2]),sa.getNormal(cl),u[0]=`${Math.round(x.x*s)},${Math.round(x.y*s)},${Math.round(x.z*s)}`,u[1]=`${Math.round(m.x*s)},${Math.round(m.y*s)},${Math.round(m.z*s)}`,u[2]=`${Math.round(f.x*s)},${Math.round(f.y*s)},${Math.round(f.z*s)}`,!(u[0]===u[1]||u[1]===u[2]||u[2]===u[0]))for(let N=0;N<3;N++){const O=(N+1)%3,P=u[N],j=u[O],D=sa[c[N]],V=sa[c[O]],G=`${P}_${j}`,M=`${j}_${P}`;M in p&&p[M]?(cl.dot(p[M].normal)<=r&&(h.push(D.x,D.y,D.z),h.push(V.x,V.y,V.z)),p[M]=null):G in p||(p[G]={index0:d[N],index1:d[O],normal:cl.clone()})}}for(const v in p)if(p[v]){const{index0:x,index1:m}=p[v];na.fromBufferAttribute(a,x),ia.fromBufferAttribute(a,m),h.push(na.x,na.y,na.z),h.push(ia.x,ia.y,ia.z)}this.setAttribute("position",new xn(h,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}class T0 extends zn{constructor(e=1,t=1,n=1,s=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:s};const r=e/2,o=t/2,a=Math.floor(n),l=Math.floor(s),d=a+1,c=l+1,u=e/a,p=t/l,h=[],v=[],x=[],m=[];for(let f=0;f<c;f++){const N=f*p-o;for(let O=0;O<d;O++){const P=O*u-r;v.push(P,-N,0),x.push(0,0,1),m.push(O/a),m.push(1-f/l)}}for(let f=0;f<l;f++)for(let N=0;N<a;N++){const O=N+d*f,P=N+d*(f+1),j=N+1+d*(f+1),D=N+1+d*f;h.push(O,P,D),h.push(P,j,D)}this.setIndex(h),this.setAttribute("position",new xn(v,3)),this.setAttribute("normal",new xn(x,3)),this.setAttribute("uv",new xn(m,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new T0(e.width,e.height,e.widthSegments,e.heightSegments)}}class ka extends zn{constructor(e=1,t=32,n=16,s=0,r=Math.PI*2,o=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:s,phiLength:r,thetaStart:o,thetaLength:a},t=Math.max(3,Math.floor(t)),n=Math.max(2,Math.floor(n));const l=Math.min(o+a,Math.PI);let d=0;const c=[],u=new T,p=new T,h=[],v=[],x=[],m=[];for(let f=0;f<=n;f++){const N=[],O=f/n;let P=0;f===0&&o===0?P=.5/t:f===n&&l===Math.PI&&(P=-.5/t);for(let j=0;j<=t;j++){const D=j/t;u.x=-e*Math.cos(s+D*r)*Math.sin(o+O*a),u.y=e*Math.cos(o+O*a),u.z=e*Math.sin(s+D*r)*Math.sin(o+O*a),v.push(u.x,u.y,u.z),p.copy(u).normalize(),x.push(p.x,p.y,p.z),m.push(D+P,1-O),N.push(d++)}c.push(N)}for(let f=0;f<n;f++)for(let N=0;N<t;N++){const O=c[f][N+1],P=c[f][N],j=c[f+1][N],D=c[f+1][N+1];(f!==0||o>0)&&h.push(O,P,D),(f!==n-1||l<Math.PI)&&h.push(P,j,D)}this.setIndex(h),this.setAttribute("position",new xn(v,3)),this.setAttribute("normal",new xn(x,3)),this.setAttribute("uv",new xn(m,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ka(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class zr extends hi{constructor(e){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new tt(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new tt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Fc,this.normalScale=new et(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new zt,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class Li extends zr{constructor(e){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new et(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return lt(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new tt(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new tt(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new tt(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(e)}get anisotropy(){return this._anisotropy}set anisotropy(e){this._anisotropy>0!=e>0&&this.version++,this._anisotropy=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){this._iridescence>0!=e>0&&this.version++,this._iridescence=e}get dispersion(){return this._dispersion}set dispersion(e){this._dispersion>0!=e>0&&this.version++,this._dispersion=e}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=e.anisotropy,this.anisotropyRotation=e.anisotropyRotation,this.anisotropyMap=e.anisotropyMap,this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.dispersion=e.dispersion,this.ior=e.ior,this.iridescence=e.iridescence,this.iridescenceMap=e.iridescenceMap,this.iridescenceIOR=e.iridescenceIOR,this.iridescenceThicknessRange=[...e.iridescenceThicknessRange],this.iridescenceThicknessMap=e.iridescenceThicknessMap,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}}class F2 extends hi{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new tt(16777215),this.specular=new tt(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new tt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Fc,this.normalScale=new et(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new zt,this.combine=Xc,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class U7 extends hi{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=Hh,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class Z7 extends hi{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}function ra(i,e){return!i||i.constructor===e?i:typeof e.BYTES_PER_ELEMENT=="number"?new e(i):Array.prototype.slice.call(i)}function k7(i){return ArrayBuffer.isView(i)&&!(i instanceof DataView)}function J7(i){function e(s,r){return i[s]-i[r]}const t=i.length,n=new Array(t);for(let s=0;s!==t;++s)n[s]=s;return n.sort(e),n}function r1(i,e,t){const n=i.length,s=new i.constructor(n);for(let r=0,o=0;o!==n;++r){const a=t[r]*e;for(let l=0;l!==e;++l)s[o++]=i[a+l]}return s}function q2(i,e,t,n){let s=1,r=i[0];for(;r!==void 0&&r[n]===void 0;)r=i[s++];if(r===void 0)return;let o=r[n];if(o!==void 0)if(Array.isArray(o))do o=r[n],o!==void 0&&(e.push(r.time),t.push(...o)),r=i[s++];while(r!==void 0);else if(o.toArray!==void 0)do o=r[n],o!==void 0&&(e.push(r.time),o.toArray(t,t.length)),r=i[s++];while(r!==void 0);else do o=r[n],o!==void 0&&(e.push(r.time),t.push(o)),r=i[s++];while(r!==void 0)}class Lo{constructor(e,t,n,s){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=s!==void 0?s:new t.constructor(n),this.sampleValues=t,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(e){const t=this.parameterPositions;let n=this._cachedIndex,s=t[n],r=t[n-1];n:{e:{let o;t:{i:if(!(e<s)){for(let a=n+2;;){if(s===void 0){if(e<r)break i;return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}if(n===a)break;if(r=s,s=t[++n],e<s)break e}o=t.length;break t}if(!(e>=r)){const a=t[1];e<a&&(n=2,r=a);for(let l=n-2;;){if(r===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(n===l)break;if(s=r,r=t[--n-1],e>=r)break e}o=n,n=0;break t}break n}for(;n<o;){const a=n+o>>>1;e<t[a]?o=a:n=a+1}if(s=t[n],r=t[n-1],r===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(s===void 0)return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}this._cachedIndex=n,this.intervalChanged_(n,r,s)}return this.interpolate_(n,r,e,s)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,s=this.valueSize,r=e*s;for(let o=0;o!==s;++o)t[o]=n[r+o];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class B7 extends Lo{constructor(e,t,n,s){super(e,t,n,s),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:gu,endingEnd:gu}}intervalChanged_(e,t,n){const s=this.parameterPositions;let r=e-2,o=e+1,a=s[r],l=s[o];if(a===void 0)switch(this.getSettings_().endingStart){case xu:r=e,a=2*t-n;break;case Tu:r=s.length-2,a=t+s[r]-s[r+1];break;default:r=e,a=n}if(l===void 0)switch(this.getSettings_().endingEnd){case xu:o=e,l=2*n-t;break;case Tu:o=1,l=n+s[1]-s[0];break;default:o=e-1,l=t}const d=(n-t)*.5,c=this.valueSize;this._weightPrev=d/(t-a),this._weightNext=d/(l-n),this._offsetPrev=r*c,this._offsetNext=o*c}interpolate_(e,t,n,s){const r=this.resultBuffer,o=this.sampleValues,a=this.valueSize,l=e*a,d=l-a,c=this._offsetPrev,u=this._offsetNext,p=this._weightPrev,h=this._weightNext,v=(n-t)/(s-t),x=v*v,m=x*v,f=-p*m+2*p*x-p*v,N=(1+p)*m+(-1.5-2*p)*x+(-.5+p)*v+1,O=(-1-h)*m+(1.5+h)*x+.5*v,P=h*m-h*x;for(let j=0;j!==a;++j)r[j]=f*o[c+j]+N*o[d+j]+O*o[l+j]+P*o[u+j];return r}}class K7 extends Lo{constructor(e,t,n,s){super(e,t,n,s)}interpolate_(e,t,n,s){const r=this.resultBuffer,o=this.sampleValues,a=this.valueSize,l=e*a,d=l-a,c=(n-t)/(s-t),u=1-c;for(let p=0;p!==a;++p)r[p]=o[d+p]*u+o[l+p]*c;return r}}class Q7 extends Lo{constructor(e,t,n,s){super(e,t,n,s)}interpolate_(e){return this.copySampleValue_(e-1)}}class mi{constructor(e,t,n,s){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===void 0||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=ra(t,this.TimeBufferType),this.values=ra(n,this.ValueBufferType),this.setInterpolation(s||this.DefaultInterpolation)}static toJSON(e){const t=e.constructor;let n;if(t.toJSON!==this.toJSON)n=t.toJSON(e);else{n={name:e.name,times:ra(e.times,Array),values:ra(e.values,Array)};const s=e.getInterpolation();s!==e.DefaultInterpolation&&(n.interpolation=s)}return n.type=e.ValueTypeName,n}InterpolantFactoryMethodDiscrete(e){return new Q7(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new K7(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new B7(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case ho:t=this.InterpolantFactoryMethodDiscrete;break;case mo:t=this.InterpolantFactoryMethodLinear;break;case j0:t=this.InterpolantFactoryMethodSmooth;break}if(t===void 0){const n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(n);return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return ho;case this.InterpolantFactoryMethodLinear:return mo;case this.InterpolantFactoryMethodSmooth:return j0}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const t=this.times;for(let n=0,s=t.length;n!==s;++n)t[n]+=e}return this}scale(e){if(e!==1){const t=this.times;for(let n=0,s=t.length;n!==s;++n)t[n]*=e}return this}trim(e,t){const n=this.times,s=n.length;let r=0,o=s-1;for(;r!==s&&n[r]<e;)++r;for(;o!==-1&&n[o]>t;)--o;if(++o,r!==0||o!==s){r>=o&&(o=Math.max(o,1),r=o-1);const a=this.getValueSize();this.times=n.slice(r,o),this.values=this.values.slice(r*a,o*a)}return this}validate(){let e=!0;const t=this.getValueSize();t-Math.floor(t)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const n=this.times,s=this.values,r=n.length;r===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let o=null;for(let a=0;a!==r;a++){const l=n[a];if(typeof l=="number"&&isNaN(l)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,a,l),e=!1;break}if(o!==null&&o>l){console.error("THREE.KeyframeTrack: Out of order keys.",this,a,l,o),e=!1;break}o=l}if(s!==void 0&&k7(s))for(let a=0,l=s.length;a!==l;++a){const d=s[a];if(isNaN(d)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,a,d),e=!1;break}}return e}optimize(){const e=this.times.slice(),t=this.values.slice(),n=this.getValueSize(),s=this.getInterpolation()===j0,r=e.length-1;let o=1;for(let a=1;a<r;++a){let l=!1;const d=e[a],c=e[a+1];if(d!==c&&(a!==1||d!==e[0]))if(s)l=!0;else{const u=a*n,p=u-n,h=u+n;for(let v=0;v!==n;++v){const x=t[u+v];if(x!==t[p+v]||x!==t[h+v]){l=!0;break}}}if(l){if(a!==o){e[o]=e[a];const u=a*n,p=o*n;for(let h=0;h!==n;++h)t[p+h]=t[u+h]}++o}}if(r>0){e[o]=e[r];for(let a=r*n,l=o*n,d=0;d!==n;++d)t[l+d]=t[a+d];++o}return o!==e.length?(this.times=e.slice(0,o),this.values=t.slice(0,o*n)):(this.times=e,this.values=t),this}clone(){const e=this.times.slice(),t=this.values.slice(),n=this.constructor,s=new n(this.name,e,t);return s.createInterpolant=this.createInterpolant,s}}mi.prototype.ValueTypeName="";mi.prototype.TimeBufferType=Float32Array;mi.prototype.ValueBufferType=Float32Array;mi.prototype.DefaultInterpolation=mo;class Hr extends mi{constructor(e,t,n){super(e,t,n)}}Hr.prototype.ValueTypeName="bool";Hr.prototype.ValueBufferType=Array;Hr.prototype.DefaultInterpolation=ho;Hr.prototype.InterpolantFactoryMethodLinear=void 0;Hr.prototype.InterpolantFactoryMethodSmooth=void 0;class Y2 extends mi{constructor(e,t,n,s){super(e,t,n,s)}}Y2.prototype.ValueTypeName="color";class Lr extends mi{constructor(e,t,n,s){super(e,t,n,s)}}Lr.prototype.ValueTypeName="number";class _7 extends Lo{constructor(e,t,n,s){super(e,t,n,s)}interpolate_(e,t,n,s){const r=this.resultBuffer,o=this.sampleValues,a=this.valueSize,l=(n-t)/(s-t);let d=e*a;for(let c=d+a;d!==c;d+=4)_e.slerpFlat(r,0,o,d-a,o,d,l);return r}}class Nr extends mi{constructor(e,t,n,s){super(e,t,n,s)}InterpolantFactoryMethodLinear(e){return new _7(this.times,this.values,this.getValueSize(),e)}}Nr.prototype.ValueTypeName="quaternion";Nr.prototype.InterpolantFactoryMethodSmooth=void 0;class Er extends mi{constructor(e,t,n){super(e,t,n)}}Er.prototype.ValueTypeName="string";Er.prototype.ValueBufferType=Array;Er.prototype.DefaultInterpolation=ho;Er.prototype.InterpolantFactoryMethodLinear=void 0;Er.prototype.InterpolantFactoryMethodSmooth=void 0;class Mr extends mi{constructor(e,t,n,s){super(e,t,n,s)}}Mr.prototype.ValueTypeName="vector";class $7{constructor(e="",t=-1,n=[],s=Oh){this.name=e,this.tracks=n,this.duration=t,this.blendMode=s,this.uuid=fi(),this.duration<0&&this.resetDuration()}static parse(e){const t=[],n=e.tracks,s=1/(e.fps||1);for(let o=0,a=n.length;o!==a;++o)t.push(t9(n[o]).scale(s));const r=new this(e.name,e.duration,t,e.blendMode);return r.uuid=e.uuid,r}static toJSON(e){const t=[],n=e.tracks,s={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode};for(let r=0,o=n.length;r!==o;++r)t.push(mi.toJSON(n[r]));return s}static CreateFromMorphTargetSequence(e,t,n,s){const r=t.length,o=[];for(let a=0;a<r;a++){let l=[],d=[];l.push((a+r-1)%r,a,(a+1)%r),d.push(0,1,0);const c=J7(l);l=r1(l,1,c),d=r1(d,1,c),!s&&l[0]===0&&(l.push(r),d.push(d[0])),o.push(new Lr(".morphTargetInfluences["+t[a].name+"]",l,d).scale(1/n))}return new this(e,-1,o)}static findByName(e,t){let n=e;if(!Array.isArray(e)){const s=e;n=s.geometry&&s.geometry.animations||s.animations}for(let s=0;s<n.length;s++)if(n[s].name===t)return n[s];return null}static CreateClipsFromMorphTargetSequences(e,t,n){const s={},r=/^([\w-]*?)([\d]+)$/;for(let a=0,l=e.length;a<l;a++){const d=e[a],c=d.name.match(r);if(c&&c.length>1){const u=c[1];let p=s[u];p||(s[u]=p=[]),p.push(d)}}const o=[];for(const a in s)o.push(this.CreateFromMorphTargetSequence(a,s[a],t,n));return o}static parseAnimation(e,t){if(console.warn("THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185"),!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(u,p,h,v,x){if(h.length!==0){const m=[],f=[];q2(h,m,f,v),m.length!==0&&x.push(new u(p,m,f))}},s=[],r=e.name||"default",o=e.fps||30,a=e.blendMode;let l=e.length||-1;const d=e.hierarchy||[];for(let u=0;u<d.length;u++){const p=d[u].keys;if(!(!p||p.length===0))if(p[0].morphTargets){const h={};let v;for(v=0;v<p.length;v++)if(p[v].morphTargets)for(let x=0;x<p[v].morphTargets.length;x++)h[p[v].morphTargets[x]]=-1;for(const x in h){const m=[],f=[];for(let N=0;N!==p[v].morphTargets.length;++N){const O=p[v];m.push(O.time),f.push(O.morphTarget===x?1:0)}s.push(new Lr(".morphTargetInfluence["+x+"]",m,f))}l=h.length*o}else{const h=".bones["+t[u].name+"]";n(Mr,h+".position",p,"pos",s),n(Nr,h+".quaternion",p,"rot",s),n(Mr,h+".scale",p,"scl",s)}}return s.length===0?null:new this(r,l,s,a)}resetDuration(){const e=this.tracks;let t=0;for(let n=0,s=e.length;n!==s;++n){const r=this.tracks[n];t=Math.max(t,r.times[r.times.length-1])}return this.duration=t,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new this.constructor(this.name,this.duration,e,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function e9(i){switch(i.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Lr;case"vector":case"vector2":case"vector3":case"vector4":return Mr;case"color":return Y2;case"quaternion":return Nr;case"bool":case"boolean":return Hr;case"string":return Er}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+i)}function t9(i){if(i.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=e9(i.type);if(i.times===void 0){const t=[],n=[];q2(i.keys,t,n,"value"),i.times=t,i.values=n}return e.parse!==void 0?e.parse(i):new e(i.name,i.times,i.values,i.interpolation)}const Yi={enabled:!1,files:{},add:function(i,e){this.enabled!==!1&&(this.files[i]=e)},get:function(i){if(this.enabled!==!1)return this.files[i]},remove:function(i){delete this.files[i]},clear:function(){this.files={}}};class n9{constructor(e,t,n){const s=this;let r=!1,o=0,a=0,l;const d=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(c){a++,r===!1&&s.onStart!==void 0&&s.onStart(c,o,a),r=!0},this.itemEnd=function(c){o++,s.onProgress!==void 0&&s.onProgress(c,o,a),o===a&&(r=!1,s.onLoad!==void 0&&s.onLoad())},this.itemError=function(c){s.onError!==void 0&&s.onError(c)},this.resolveURL=function(c){return l?l(c):c},this.setURLModifier=function(c){return l=c,this},this.addHandler=function(c,u){return d.push(c,u),this},this.removeHandler=function(c){const u=d.indexOf(c);return u!==-1&&d.splice(u,2),this},this.getHandler=function(c){for(let u=0,p=d.length;u<p;u+=2){const h=d[u],v=d[u+1];if(h.global&&(h.lastIndex=0),h.test(c))return v}return null}}}const i9=new n9;class Ds{constructor(e){this.manager=e!==void 0?e:i9,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(s,r){n.load(e,s,t,r)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}Ds.DEFAULT_MATERIAL_NAME="__DEFAULT";const Ii={};class s9 extends Error{constructor(e,t){super(e),this.response=t}}class Qc extends Ds{constructor(e){super(e),this.mimeType="",this.responseType=""}load(e,t,n,s){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const r=Yi.get(`file:${e}`);if(r!==void 0)return this.manager.itemStart(e),setTimeout(()=>{t&&t(r),this.manager.itemEnd(e)},0),r;if(Ii[e]!==void 0){Ii[e].push({onLoad:t,onProgress:n,onError:s});return}Ii[e]=[],Ii[e].push({onLoad:t,onProgress:n,onError:s});const o=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),a=this.mimeType,l=this.responseType;fetch(o).then(d=>{if(d.status===200||d.status===0){if(d.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream>"u"||d.body===void 0||d.body.getReader===void 0)return d;const c=Ii[e],u=d.body.getReader(),p=d.headers.get("X-File-Size")||d.headers.get("Content-Length"),h=p?parseInt(p):0,v=h!==0;let x=0;const m=new ReadableStream({start(f){N();function N(){u.read().then(({done:O,value:P})=>{if(O)f.close();else{x+=P.byteLength;const j=new ProgressEvent("progress",{lengthComputable:v,loaded:x,total:h});for(let D=0,V=c.length;D<V;D++){const G=c[D];G.onProgress&&G.onProgress(j)}f.enqueue(P),N()}},O=>{f.error(O)})}}});return new Response(m)}else throw new s9(`fetch for "${d.url}" responded with ${d.status}: ${d.statusText}`,d)}).then(d=>{switch(l){case"arraybuffer":return d.arrayBuffer();case"blob":return d.blob();case"document":return d.text().then(c=>new DOMParser().parseFromString(c,a));case"json":return d.json();default:if(a==="")return d.text();{const u=/charset="?([^;"\s]*)"?/i.exec(a),p=u&&u[1]?u[1].toLowerCase():void 0,h=new TextDecoder(p);return d.arrayBuffer().then(v=>h.decode(v))}}}).then(d=>{Yi.add(`file:${e}`,d);const c=Ii[e];delete Ii[e];for(let u=0,p=c.length;u<p;u++){const h=c[u];h.onLoad&&h.onLoad(d)}}).catch(d=>{const c=Ii[e];if(c===void 0)throw this.manager.itemError(e),d;delete Ii[e];for(let u=0,p=c.length;u<p;u++){const h=c[u];h.onError&&h.onError(d)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}const $s=new WeakMap;class r9 extends Ds{constructor(e){super(e)}load(e,t,n,s){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const r=this,o=Yi.get(`image:${e}`);if(o!==void 0){if(o.complete===!0)r.manager.itemStart(e),setTimeout(function(){t&&t(o),r.manager.itemEnd(e)},0);else{let u=$s.get(o);u===void 0&&(u=[],$s.set(o,u)),u.push({onLoad:t,onError:s})}return o}const a=bo("img");function l(){c(),t&&t(this);const u=$s.get(this)||[];for(let p=0;p<u.length;p++){const h=u[p];h.onLoad&&h.onLoad(this)}$s.delete(this),r.manager.itemEnd(e)}function d(u){c(),s&&s(u),Yi.remove(`image:${e}`);const p=$s.get(this)||[];for(let h=0;h<p.length;h++){const v=p[h];v.onError&&v.onError(u)}$s.delete(this),r.manager.itemError(e),r.manager.itemEnd(e)}function c(){a.removeEventListener("load",l,!1),a.removeEventListener("error",d,!1)}return a.addEventListener("load",l,!1),a.addEventListener("error",d,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(a.crossOrigin=this.crossOrigin),Yi.add(`image:${e}`,a),r.manager.itemStart(e),a.src=e,a}}class o9 extends Ds{constructor(e){super(e)}load(e,t,n,s){const r=this,o=new kc,a=new Qc(this.manager);return a.setResponseType("arraybuffer"),a.setRequestHeader(this.requestHeader),a.setPath(this.path),a.setWithCredentials(r.withCredentials),a.load(e,function(l){let d;try{d=r.parse(l)}catch(c){if(s!==void 0)s(c);else{console.error(c);return}}d.image!==void 0?o.image=d.image:d.data!==void 0&&(o.image.width=d.width,o.image.height=d.height,o.image.data=d.data),o.wrapS=d.wrapS!==void 0?d.wrapS:xi,o.wrapT=d.wrapT!==void 0?d.wrapT:xi,o.magFilter=d.magFilter!==void 0?d.magFilter:wn,o.minFilter=d.minFilter!==void 0?d.minFilter:wn,o.anisotropy=d.anisotropy!==void 0?d.anisotropy:1,d.colorSpace!==void 0&&(o.colorSpace=d.colorSpace),d.flipY!==void 0&&(o.flipY=d.flipY),d.format!==void 0&&(o.format=d.format),d.type!==void 0&&(o.type=d.type),d.mipmaps!==void 0&&(o.mipmaps=d.mipmaps,o.minFilter=Ti),d.mipmapCount===1&&(o.minFilter=wn),d.generateMipmaps!==void 0&&(o.generateMipmaps=d.generateMipmaps),o.needsUpdate=!0,t&&t(o,d)},n,s),o}}class a9 extends Ds{constructor(e){super(e)}load(e,t,n,s){const r=new gn,o=new r9(this.manager);return o.setCrossOrigin(this.crossOrigin),o.setPath(this.path),o.load(e,function(a){r.image=a,r.needsUpdate=!0,t!==void 0&&t(r)},n,s),r}}class S0 extends Zt{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new tt(e),this.intensity=t}dispose(){}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(t.object.target=this.target.uuid),t}}const ul=new Be,o1=new T,a1=new T;class _c{constructor(e){this.camera=e,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new et(512,512),this.mapType=Si,this.map=null,this.mapPass=null,this.matrix=new Be,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Bc,this._frameExtents=new et(1,1),this._viewportCount=1,this._viewports=[new Rt(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,n=this.matrix;o1.setFromMatrixPosition(e.matrixWorld),t.position.copy(o1),a1.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(a1),t.updateMatrixWorld(),ul.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(ul),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(ul)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.intensity=e.intensity,this.bias=e.bias,this.radius=e.radius,this.autoUpdate=e.autoUpdate,this.needsUpdate=e.needsUpdate,this.normalBias=e.normalBias,this.blurSamples=e.blurSamples,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.intensity!==1&&(e.intensity=this.intensity),this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class l9 extends _c{constructor(){super(new Xn(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1,this.aspect=1}updateMatrices(e){const t=this.camera,n=Pr*2*e.angle*this.focus,s=this.mapSize.width/this.mapSize.height*this.aspect,r=e.distance||t.far;(n!==t.fov||s!==t.aspect||r!==t.far)&&(t.fov=n,t.aspect=s,t.far=r,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}class G2 extends S0{constructor(e,t,n=0,s=Math.PI/3,r=0,o=2){super(e,t),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(Zt.DEFAULT_UP),this.updateMatrix(),this.target=new Zt,this.distance=n,this.angle=s,this.penumbra=r,this.decay=o,this.map=null,this.shadow=new l9}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}const l1=new Be,Ur=new T,pl=new T;class d9 extends _c{constructor(){super(new Xn(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new et(4,2),this._viewportCount=6,this._viewports=[new Rt(2,1,1,1),new Rt(0,1,1,1),new Rt(3,1,1,1),new Rt(1,1,1,1),new Rt(3,0,1,1),new Rt(1,0,1,1)],this._cubeDirections=[new T(1,0,0),new T(-1,0,0),new T(0,0,1),new T(0,0,-1),new T(0,1,0),new T(0,-1,0)],this._cubeUps=[new T(0,1,0),new T(0,1,0),new T(0,1,0),new T(0,1,0),new T(0,0,1),new T(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera,s=this.matrix,r=e.distance||n.far;r!==n.far&&(n.far=r,n.updateProjectionMatrix()),Ur.setFromMatrixPosition(e.matrixWorld),n.position.copy(Ur),pl.copy(n.position),pl.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(pl),n.updateMatrixWorld(),s.makeTranslation(-Ur.x,-Ur.y,-Ur.z),l1.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(l1)}}class U2 extends S0{constructor(e,t,n=0,s=2){super(e,t),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=s,this.shadow=new d9}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}class $c extends D2{constructor(e=-1,t=1,n=1,s=-1,r=.1,o=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=s,this.near=r,this.far=o,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,s,r,o){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=s,this.view.width=r,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,s=(this.top+this.bottom)/2;let r=n-e,o=n+e,a=s+t,l=s-t;if(this.view!==null&&this.view.enabled){const d=(this.right-this.left)/this.view.fullWidth/this.zoom,c=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=d*this.view.offsetX,o=r+d*this.view.width,a-=c*this.view.offsetY,l=a-c*this.view.height}this.projectionMatrix.makeOrthographic(r,o,a,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}class c9 extends _c{constructor(){super(new $c(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class Z2 extends S0{constructor(e,t){super(e,t),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(Zt.DEFAULT_UP),this.updateMatrix(),this.target=new Zt,this.shadow=new c9}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}class u9 extends S0{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}}class ro{static extractUrlBase(e){const t=e.lastIndexOf("/");return t===-1?"./":e.slice(0,t+1)}static resolveURL(e,t){return typeof e!="string"||e===""?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}}const fl=new WeakMap;class p9 extends Ds{constructor(e){super(e),this.isImageBitmapLoader=!0,typeof createImageBitmap>"u"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch>"u"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(e){return this.options=e,this}load(e,t,n,s){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const r=this,o=Yi.get(`image-bitmap:${e}`);if(o!==void 0){if(r.manager.itemStart(e),o.then){o.then(d=>{if(fl.has(o)===!0)s&&s(fl.get(o)),r.manager.itemError(e),r.manager.itemEnd(e);else return t&&t(d),r.manager.itemEnd(e),d});return}return setTimeout(function(){t&&t(o),r.manager.itemEnd(e)},0),o}const a={};a.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",a.headers=this.requestHeader;const l=fetch(e,a).then(function(d){return d.blob()}).then(function(d){return createImageBitmap(d,Object.assign(r.options,{colorSpaceConversion:"none"}))}).then(function(d){return Yi.add(`image-bitmap:${e}`,d),t&&t(d),r.manager.itemEnd(e),d}).catch(function(d){s&&s(d),fl.set(l,d),Yi.remove(`image-bitmap:${e}`),r.manager.itemError(e),r.manager.itemEnd(e)});Yi.add(`image-bitmap:${e}`,l),r.manager.itemStart(e)}}class f9 extends Xn{constructor(e=[]){super(),this.isArrayCamera=!0,this.isMultiViewCamera=!1,this.cameras=e}}const eu="\\[\\]\\.:\\/",h9=new RegExp("["+eu+"]","g"),tu="[^"+eu+"]",m9="[^"+eu.replace("\\.","")+"]",b9=/((?:WC+[\/:])*)/.source.replace("WC",tu),v9=/(WCOD+)?/.source.replace("WCOD",m9),y9=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",tu),w9=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",tu),g9=new RegExp("^"+b9+v9+y9+w9+"$"),x9=["material","materials","bones","map"];class T9{constructor(e,t,n){const s=n||Ot.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,s)}getValue(e,t){this.bind();const n=this._targetGroup.nCachedObjects_,s=this._bindings[n];s!==void 0&&s.getValue(e,t)}setValue(e,t){const n=this._bindings;for(let s=this._targetGroup.nCachedObjects_,r=n.length;s!==r;++s)n[s].setValue(e,t)}bind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()}unbind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}}class Ot{constructor(e,t,n){this.path=t,this.parsedPath=n||Ot.parseTrackName(t),this.node=Ot.findNode(e,this.parsedPath.nodeName),this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,n){return e&&e.isAnimationObjectGroup?new Ot.Composite(e,t,n):new Ot(e,t,n)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(h9,"")}static parseTrackName(e){const t=g9.exec(e);if(t===null)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},s=n.nodeName&&n.nodeName.lastIndexOf(".");if(s!==void 0&&s!==-1){const r=n.nodeName.substring(s+1);x9.indexOf(r)!==-1&&(n.nodeName=n.nodeName.substring(0,s),n.objectName=r)}if(n.propertyName===null||n.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return n}static findNode(e,t){if(t===void 0||t===""||t==="."||t===-1||t===e.name||t===e.uuid)return e;if(e.skeleton){const n=e.skeleton.getBoneByName(t);if(n!==void 0)return n}if(e.children){const n=function(r){for(let o=0;o<r.length;o++){const a=r[o];if(a.name===t||a.uuid===t)return a;const l=n(a.children);if(l)return l}return null},s=n(e.children);if(s)return s}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){const n=this.resolvedProperty;for(let s=0,r=n.length;s!==r;++s)e[t++]=n[s]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){const n=this.resolvedProperty;for(let s=0,r=n.length;s!==r;++s)n[s]=e[t++]}_setValue_array_setNeedsUpdate(e,t){const n=this.resolvedProperty;for(let s=0,r=n.length;s!==r;++s)n[s]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){const n=this.resolvedProperty;for(let s=0,r=n.length;s!==r;++s)n[s]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node;const t=this.parsedPath,n=t.objectName,s=t.propertyName;let r=t.propertyIndex;if(e||(e=Ot.findNode(this.rootNode,t.nodeName),this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");return}if(n){let d=t.objectIndex;switch(n){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let c=0;c<e.length;c++)if(e[c].name===d){d=c;break}break;case"map":if("map"in e){e=e.map;break}if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}e=e.material.map;break;default:if(e[n]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[n]}if(d!==void 0){if(e[d]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[d]}}const o=e[s];if(o===void 0){const d=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+d+"."+s+" but it wasn't found.",e);return}let a=this.Versioning.None;this.targetObject=e,e.isMaterial===!0?a=this.Versioning.NeedsUpdate:e.isObject3D===!0&&(a=this.Versioning.MatrixWorldNeedsUpdate);let l=this.BindingType.Direct;if(r!==void 0){if(s==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[r]!==void 0&&(r=e.morphTargetDictionary[r])}l=this.BindingType.ArrayElement,this.resolvedProperty=o,this.propertyIndex=r}else o.fromArray!==void 0&&o.toArray!==void 0?(l=this.BindingType.HasFromToArray,this.resolvedProperty=o):Array.isArray(o)?(l=this.BindingType.EntireArray,this.resolvedProperty=o):this.propertyName=s;this.getValue=this.GetterByBindingType[l],this.setValue=this.SetterByBindingTypeAndVersioning[l][a]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Ot.Composite=T9;Ot.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};Ot.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};Ot.prototype.GetterByBindingType=[Ot.prototype._getValue_direct,Ot.prototype._getValue_array,Ot.prototype._getValue_arrayElement,Ot.prototype._getValue_toArray];Ot.prototype.SetterByBindingTypeAndVersioning=[[Ot.prototype._setValue_direct,Ot.prototype._setValue_direct_setNeedsUpdate,Ot.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Ot.prototype._setValue_array,Ot.prototype._setValue_array_setNeedsUpdate,Ot.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Ot.prototype._setValue_arrayElement,Ot.prototype._setValue_arrayElement_setNeedsUpdate,Ot.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Ot.prototype._setValue_fromArray,Ot.prototype._setValue_fromArray_setNeedsUpdate,Ot.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];const d1=new Be;class S9{constructor(e,t,n=0,s=1/0){this.ray=new Or(e,t),this.near=n,this.far=s,this.camera=null,this.layers=new Gc,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,t){this.ray.set(e,t)}setFromCamera(e,t){t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}setFromXRController(e){return d1.identity().extractRotation(e.matrixWorld),this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(d1),this}intersectObject(e,t=!0,n=[]){return Bd(e,this,n,t),n.sort(c1),n}intersectObjects(e,t=!0,n=[]){for(let s=0,r=e.length;s<r;s++)Bd(e[s],this,n,t);return n.sort(c1),n}}function c1(i,e){return i.distance-e.distance}function Bd(i,e,t,n){let s=!0;if(i.layers.test(e.layers)&&i.raycast(e,t)===!1&&(s=!1),s===!0&&n===!0){const r=i.children;for(let o=0,a=r.length;o<a;o++)Bd(r[o],e,t,!0)}}class u1{constructor(e=1,t=0,n=0){this.radius=e,this.phi=t,this.theta=n}set(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=lt(this.phi,1e-6,Math.PI-1e-6),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(lt(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class P9 extends Xs{constructor(e,t=null){super(),this.object=e,this.domElement=t,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(e){if(e===void 0){console.warn("THREE.Controls: connect() now requires an element.");return}this.domElement!==null&&this.disconnect(),this.domElement=e}disconnect(){}dispose(){}update(){}}function p1(i,e,t,n){const s=R9(n);switch(t){case S2:return i*e;case w0:return i*e/s.components*s.byteLength;case jc:return i*e/s.components*s.byteLength;case R2:return i*e*2/s.components*s.byteLength;case Vc:return i*e*2/s.components*s.byteLength;case P2:return i*e*3/s.components*s.byteLength;case kn:return i*e*4/s.components*s.byteLength;case Cc:return i*e*4/s.components*s.byteLength;case Aa:case Xa:return Math.floor((i+3)/4)*Math.floor((e+3)/4)*8;case Ia:case Da:return Math.floor((i+3)/4)*Math.floor((e+3)/4)*16;case gd:case Td:return Math.max(i,16)*Math.max(e,8)/4;case wd:case xd:return Math.max(i,8)*Math.max(e,8)/2;case Sd:case Pd:return Math.floor((i+3)/4)*Math.floor((e+3)/4)*8;case Rd:return Math.floor((i+3)/4)*Math.floor((e+3)/4)*16;case Ld:return Math.floor((i+3)/4)*Math.floor((e+3)/4)*16;case Nd:return Math.floor((i+4)/5)*Math.floor((e+3)/4)*16;case Md:return Math.floor((i+4)/5)*Math.floor((e+4)/5)*16;case Od:return Math.floor((i+5)/6)*Math.floor((e+4)/5)*16;case zd:return Math.floor((i+5)/6)*Math.floor((e+5)/6)*16;case Hd:return Math.floor((i+7)/8)*Math.floor((e+4)/5)*16;case Ed:return Math.floor((i+7)/8)*Math.floor((e+5)/6)*16;case Ad:return Math.floor((i+7)/8)*Math.floor((e+7)/8)*16;case Xd:return Math.floor((i+9)/10)*Math.floor((e+4)/5)*16;case Id:return Math.floor((i+9)/10)*Math.floor((e+5)/6)*16;case Dd:return Math.floor((i+9)/10)*Math.floor((e+7)/8)*16;case Wd:return Math.floor((i+9)/10)*Math.floor((e+9)/10)*16;case jd:return Math.floor((i+11)/12)*Math.floor((e+9)/10)*16;case Vd:return Math.floor((i+11)/12)*Math.floor((e+11)/12)*16;case Wa:case Cd:case Fd:return Math.ceil(i/4)*Math.ceil(e/4)*16;case L2:case qd:return Math.ceil(i/4)*Math.ceil(e/4)*8;case Yd:case Gd:return Math.ceil(i/4)*Math.ceil(e/4)*16}throw new Error(`Unable to determine texture byte length for ${t} format.`)}function R9(i){switch(i){case Si:case g2:return{byteLength:1,components:1};case co:case x2:case Ci:return{byteLength:2,components:1};case Dc:case Wc:return{byteLength:2,components:4};case Os:case Ic:case Fn:return{byteLength:4,components:1};case T2:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${i}.`)}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:Ac}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=Ac);/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function k2(){let i=null,e=!1,t=null,n=null;function s(r,o){t(r,o),n=i.requestAnimationFrame(s)}return{start:function(){e!==!0&&t!==null&&(n=i.requestAnimationFrame(s),e=!0)},stop:function(){i.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(r){t=r},setContext:function(r){i=r}}}function L9(i){const e=new WeakMap;function t(a,l){const d=a.array,c=a.usage,u=d.byteLength,p=i.createBuffer();i.bindBuffer(l,p),i.bufferData(l,d,c),a.onUploadCallback();let h;if(d instanceof Float32Array)h=i.FLOAT;else if(typeof Float16Array<"u"&&d instanceof Float16Array)h=i.HALF_FLOAT;else if(d instanceof Uint16Array)a.isFloat16BufferAttribute?h=i.HALF_FLOAT:h=i.UNSIGNED_SHORT;else if(d instanceof Int16Array)h=i.SHORT;else if(d instanceof Uint32Array)h=i.UNSIGNED_INT;else if(d instanceof Int32Array)h=i.INT;else if(d instanceof Int8Array)h=i.BYTE;else if(d instanceof Uint8Array)h=i.UNSIGNED_BYTE;else if(d instanceof Uint8ClampedArray)h=i.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+d);return{buffer:p,type:h,bytesPerElement:d.BYTES_PER_ELEMENT,version:a.version,size:u}}function n(a,l,d){const c=l.array,u=l.updateRanges;if(i.bindBuffer(d,a),u.length===0)i.bufferSubData(d,0,c);else{u.sort((h,v)=>h.start-v.start);let p=0;for(let h=1;h<u.length;h++){const v=u[p],x=u[h];x.start<=v.start+v.count+1?v.count=Math.max(v.count,x.start+x.count-v.start):(++p,u[p]=x)}u.length=p+1;for(let h=0,v=u.length;h<v;h++){const x=u[h];i.bufferSubData(d,x.start*c.BYTES_PER_ELEMENT,c,x.start,x.count)}l.clearUpdateRanges()}l.onUploadCallback()}function s(a){return a.isInterleavedBufferAttribute&&(a=a.data),e.get(a)}function r(a){a.isInterleavedBufferAttribute&&(a=a.data);const l=e.get(a);l&&(i.deleteBuffer(l.buffer),e.delete(a))}function o(a,l){if(a.isInterleavedBufferAttribute&&(a=a.data),a.isGLBufferAttribute){const c=e.get(a);(!c||c.version<a.version)&&e.set(a,{buffer:a.buffer,type:a.type,bytesPerElement:a.elementSize,version:a.version});return}const d=e.get(a);if(d===void 0)e.set(a,t(a,l));else if(d.version<a.version){if(d.size!==a.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");n(d.buffer,a,l),d.version=a.version}}return{get:s,remove:r,update:o}}var N9=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,M9=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,O9=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,z9=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,H9=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,E9=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,A9=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,X9=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,I9=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,D9=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,W9=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,j9=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,V9=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,C9=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,F9=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,q9=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,Y9=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,G9=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,U9=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,Z9=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,k9=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,J9=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,B9=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,K9=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,Q9=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,_9=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,$9=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,e6=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,t6=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,n6=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,i6="gl_FragColor = linearToOutputTexel( gl_FragColor );",s6=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,r6=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,o6=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,a6=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,l6=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,d6=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,c6=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,u6=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,p6=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,f6=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,h6=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,m6=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,b6=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,v6=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,y6=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,w6=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,g6=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,x6=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,T6=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,S6=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,P6=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,R6=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,L6=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,N6=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,M6=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,O6=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,z6=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,H6=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,E6=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,A6=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,X6=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,I6=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,D6=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,W6=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,j6=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,V6=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,C6=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,F6=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,q6=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,Y6=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,G6=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,U6=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,Z6=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,k6=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,J6=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,B6=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,K6=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,Q6=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,_6=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,$6=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,e5=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,t5=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,n5=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,i5=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,s5=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,r5=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,o5=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,a5=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,l5=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,d5=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,c5=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,u5=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,p5=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,f5=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,h5=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,m5=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,b5=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,v5=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,y5=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,w5=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,g5=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,x5=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,T5=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,S5=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,P5=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,R5=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const L5=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,N5=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,M5=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,O5=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,z5=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,H5=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,E5=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,A5=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,X5=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,I5=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,D5=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,W5=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,j5=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,V5=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,C5=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,F5=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,q5=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Y5=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,G5=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,U5=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Z5=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,k5=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,J5=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,B5=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,K5=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,Q5=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,_5=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,$5=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,e4=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,t4=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,n4=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,i4=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,s4=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,r4=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,at={alphahash_fragment:N9,alphahash_pars_fragment:M9,alphamap_fragment:O9,alphamap_pars_fragment:z9,alphatest_fragment:H9,alphatest_pars_fragment:E9,aomap_fragment:A9,aomap_pars_fragment:X9,batching_pars_vertex:I9,batching_vertex:D9,begin_vertex:W9,beginnormal_vertex:j9,bsdfs:V9,iridescence_fragment:C9,bumpmap_pars_fragment:F9,clipping_planes_fragment:q9,clipping_planes_pars_fragment:Y9,clipping_planes_pars_vertex:G9,clipping_planes_vertex:U9,color_fragment:Z9,color_pars_fragment:k9,color_pars_vertex:J9,color_vertex:B9,common:K9,cube_uv_reflection_fragment:Q9,defaultnormal_vertex:_9,displacementmap_pars_vertex:$9,displacementmap_vertex:e6,emissivemap_fragment:t6,emissivemap_pars_fragment:n6,colorspace_fragment:i6,colorspace_pars_fragment:s6,envmap_fragment:r6,envmap_common_pars_fragment:o6,envmap_pars_fragment:a6,envmap_pars_vertex:l6,envmap_physical_pars_fragment:w6,envmap_vertex:d6,fog_vertex:c6,fog_pars_vertex:u6,fog_fragment:p6,fog_pars_fragment:f6,gradientmap_pars_fragment:h6,lightmap_pars_fragment:m6,lights_lambert_fragment:b6,lights_lambert_pars_fragment:v6,lights_pars_begin:y6,lights_toon_fragment:g6,lights_toon_pars_fragment:x6,lights_phong_fragment:T6,lights_phong_pars_fragment:S6,lights_physical_fragment:P6,lights_physical_pars_fragment:R6,lights_fragment_begin:L6,lights_fragment_maps:N6,lights_fragment_end:M6,logdepthbuf_fragment:O6,logdepthbuf_pars_fragment:z6,logdepthbuf_pars_vertex:H6,logdepthbuf_vertex:E6,map_fragment:A6,map_pars_fragment:X6,map_particle_fragment:I6,map_particle_pars_fragment:D6,metalnessmap_fragment:W6,metalnessmap_pars_fragment:j6,morphinstance_vertex:V6,morphcolor_vertex:C6,morphnormal_vertex:F6,morphtarget_pars_vertex:q6,morphtarget_vertex:Y6,normal_fragment_begin:G6,normal_fragment_maps:U6,normal_pars_fragment:Z6,normal_pars_vertex:k6,normal_vertex:J6,normalmap_pars_fragment:B6,clearcoat_normal_fragment_begin:K6,clearcoat_normal_fragment_maps:Q6,clearcoat_pars_fragment:_6,iridescence_pars_fragment:$6,opaque_fragment:e5,packing:t5,premultiplied_alpha_fragment:n5,project_vertex:i5,dithering_fragment:s5,dithering_pars_fragment:r5,roughnessmap_fragment:o5,roughnessmap_pars_fragment:a5,shadowmap_pars_fragment:l5,shadowmap_pars_vertex:d5,shadowmap_vertex:c5,shadowmask_pars_fragment:u5,skinbase_vertex:p5,skinning_pars_vertex:f5,skinning_vertex:h5,skinnormal_vertex:m5,specularmap_fragment:b5,specularmap_pars_fragment:v5,tonemapping_fragment:y5,tonemapping_pars_fragment:w5,transmission_fragment:g5,transmission_pars_fragment:x5,uv_pars_fragment:T5,uv_pars_vertex:S5,uv_vertex:P5,worldpos_vertex:R5,background_vert:L5,background_frag:N5,backgroundCube_vert:M5,backgroundCube_frag:O5,cube_vert:z5,cube_frag:H5,depth_vert:E5,depth_frag:A5,distanceRGBA_vert:X5,distanceRGBA_frag:I5,equirect_vert:D5,equirect_frag:W5,linedashed_vert:j5,linedashed_frag:V5,meshbasic_vert:C5,meshbasic_frag:F5,meshlambert_vert:q5,meshlambert_frag:Y5,meshmatcap_vert:G5,meshmatcap_frag:U5,meshnormal_vert:Z5,meshnormal_frag:k5,meshphong_vert:J5,meshphong_frag:B5,meshphysical_vert:K5,meshphysical_frag:Q5,meshtoon_vert:_5,meshtoon_frag:$5,points_vert:e4,points_frag:t4,shadow_vert:n4,shadow_frag:i4,sprite_vert:s4,sprite_frag:r4},Ne={common:{diffuse:{value:new tt(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new rt},alphaMap:{value:null},alphaMapTransform:{value:new rt},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new rt}},envmap:{envMap:{value:null},envMapRotation:{value:new rt},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new rt}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new rt}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new rt},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new rt},normalScale:{value:new et(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new rt},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new rt}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new rt}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new rt}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new tt(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new tt(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new rt},alphaTest:{value:0},uvTransform:{value:new rt}},sprite:{diffuse:{value:new tt(16777215)},opacity:{value:1},center:{value:new et(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new rt},alphaMap:{value:null},alphaMapTransform:{value:new rt},alphaTest:{value:0}}},wi={basic:{uniforms:En([Ne.common,Ne.specularmap,Ne.envmap,Ne.aomap,Ne.lightmap,Ne.fog]),vertexShader:at.meshbasic_vert,fragmentShader:at.meshbasic_frag},lambert:{uniforms:En([Ne.common,Ne.specularmap,Ne.envmap,Ne.aomap,Ne.lightmap,Ne.emissivemap,Ne.bumpmap,Ne.normalmap,Ne.displacementmap,Ne.fog,Ne.lights,{emissive:{value:new tt(0)}}]),vertexShader:at.meshlambert_vert,fragmentShader:at.meshlambert_frag},phong:{uniforms:En([Ne.common,Ne.specularmap,Ne.envmap,Ne.aomap,Ne.lightmap,Ne.emissivemap,Ne.bumpmap,Ne.normalmap,Ne.displacementmap,Ne.fog,Ne.lights,{emissive:{value:new tt(0)},specular:{value:new tt(1118481)},shininess:{value:30}}]),vertexShader:at.meshphong_vert,fragmentShader:at.meshphong_frag},standard:{uniforms:En([Ne.common,Ne.envmap,Ne.aomap,Ne.lightmap,Ne.emissivemap,Ne.bumpmap,Ne.normalmap,Ne.displacementmap,Ne.roughnessmap,Ne.metalnessmap,Ne.fog,Ne.lights,{emissive:{value:new tt(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:at.meshphysical_vert,fragmentShader:at.meshphysical_frag},toon:{uniforms:En([Ne.common,Ne.aomap,Ne.lightmap,Ne.emissivemap,Ne.bumpmap,Ne.normalmap,Ne.displacementmap,Ne.gradientmap,Ne.fog,Ne.lights,{emissive:{value:new tt(0)}}]),vertexShader:at.meshtoon_vert,fragmentShader:at.meshtoon_frag},matcap:{uniforms:En([Ne.common,Ne.bumpmap,Ne.normalmap,Ne.displacementmap,Ne.fog,{matcap:{value:null}}]),vertexShader:at.meshmatcap_vert,fragmentShader:at.meshmatcap_frag},points:{uniforms:En([Ne.points,Ne.fog]),vertexShader:at.points_vert,fragmentShader:at.points_frag},dashed:{uniforms:En([Ne.common,Ne.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:at.linedashed_vert,fragmentShader:at.linedashed_frag},depth:{uniforms:En([Ne.common,Ne.displacementmap]),vertexShader:at.depth_vert,fragmentShader:at.depth_frag},normal:{uniforms:En([Ne.common,Ne.bumpmap,Ne.normalmap,Ne.displacementmap,{opacity:{value:1}}]),vertexShader:at.meshnormal_vert,fragmentShader:at.meshnormal_frag},sprite:{uniforms:En([Ne.sprite,Ne.fog]),vertexShader:at.sprite_vert,fragmentShader:at.sprite_frag},background:{uniforms:{uvTransform:{value:new rt},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:at.background_vert,fragmentShader:at.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new rt}},vertexShader:at.backgroundCube_vert,fragmentShader:at.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:at.cube_vert,fragmentShader:at.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:at.equirect_vert,fragmentShader:at.equirect_frag},distanceRGBA:{uniforms:En([Ne.common,Ne.displacementmap,{referencePosition:{value:new T},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:at.distanceRGBA_vert,fragmentShader:at.distanceRGBA_frag},shadow:{uniforms:En([Ne.lights,Ne.fog,{color:{value:new tt(0)},opacity:{value:1}}]),vertexShader:at.shadow_vert,fragmentShader:at.shadow_frag}};wi.physical={uniforms:En([wi.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new rt},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new rt},clearcoatNormalScale:{value:new et(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new rt},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new rt},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new rt},sheen:{value:0},sheenColor:{value:new tt(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new rt},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new rt},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new rt},transmissionSamplerSize:{value:new et},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new rt},attenuationDistance:{value:0},attenuationColor:{value:new tt(0)},specularColor:{value:new tt(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new rt},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new rt},anisotropyVector:{value:new et},anisotropyMap:{value:null},anisotropyMapTransform:{value:new rt}}]),vertexShader:at.meshphysical_vert,fragmentShader:at.meshphysical_frag};const oa={r:0,b:0,g:0},gs=new zt,o4=new Be;function a4(i,e,t,n,s,r,o){const a=new tt(0);let l=r===!0?0:1,d,c,u=null,p=0,h=null;function v(O){let P=O.isScene===!0?O.background:null;return P&&P.isTexture&&(P=(O.backgroundBlurriness>0?t:e).get(P)),P}function x(O){let P=!1;const j=v(O);j===null?f(a,l):j&&j.isColor&&(f(j,1),P=!0);const D=i.xr.getEnvironmentBlendMode();D==="additive"?n.buffers.color.setClear(0,0,0,1,o):D==="alpha-blend"&&n.buffers.color.setClear(0,0,0,0,o),(i.autoClear||P)&&(n.buffers.depth.setTest(!0),n.buffers.depth.setMask(!0),n.buffers.color.setMask(!0),i.clear(i.autoClearColor,i.autoClearDepth,i.autoClearStencil))}function m(O,P){const j=v(P);j&&(j.isCubeTexture||j.mapping===y0)?(c===void 0&&(c=new Kt(new ti(1,1,1),new fs({name:"BackgroundCubeMaterial",uniforms:Rr(wi.backgroundCube.uniforms),vertexShader:wi.backgroundCube.vertexShader,fragmentShader:wi.backgroundCube.fragmentShader,side:qn,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),c.geometry.deleteAttribute("normal"),c.geometry.deleteAttribute("uv"),c.onBeforeRender=function(D,V,G){this.matrixWorld.copyPosition(G.matrixWorld)},Object.defineProperty(c.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),s.update(c)),gs.copy(P.backgroundRotation),gs.x*=-1,gs.y*=-1,gs.z*=-1,j.isCubeTexture&&j.isRenderTargetTexture===!1&&(gs.y*=-1,gs.z*=-1),c.material.uniforms.envMap.value=j,c.material.uniforms.flipEnvMap.value=j.isCubeTexture&&j.isRenderTargetTexture===!1?-1:1,c.material.uniforms.backgroundBlurriness.value=P.backgroundBlurriness,c.material.uniforms.backgroundIntensity.value=P.backgroundIntensity,c.material.uniforms.backgroundRotation.value.setFromMatrix4(o4.makeRotationFromEuler(gs)),c.material.toneMapped=wt.getTransfer(j.colorSpace)!==It,(u!==j||p!==j.version||h!==i.toneMapping)&&(c.material.needsUpdate=!0,u=j,p=j.version,h=i.toneMapping),c.layers.enableAll(),O.unshift(c,c.geometry,c.material,0,0,null)):j&&j.isTexture&&(d===void 0&&(d=new Kt(new T0(2,2),new fs({name:"BackgroundMaterial",uniforms:Rr(wi.background.uniforms),vertexShader:wi.background.vertexShader,fragmentShader:wi.background.fragmentShader,side:Ui,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),d.geometry.deleteAttribute("normal"),Object.defineProperty(d.material,"map",{get:function(){return this.uniforms.t2D.value}}),s.update(d)),d.material.uniforms.t2D.value=j,d.material.uniforms.backgroundIntensity.value=P.backgroundIntensity,d.material.toneMapped=wt.getTransfer(j.colorSpace)!==It,j.matrixAutoUpdate===!0&&j.updateMatrix(),d.material.uniforms.uvTransform.value.copy(j.matrix),(u!==j||p!==j.version||h!==i.toneMapping)&&(d.material.needsUpdate=!0,u=j,p=j.version,h=i.toneMapping),d.layers.enableAll(),O.unshift(d,d.geometry,d.material,0,0,null))}function f(O,P){O.getRGB(oa,I2(i)),n.buffers.color.setClear(oa.r,oa.g,oa.b,P,o)}function N(){c!==void 0&&(c.geometry.dispose(),c.material.dispose(),c=void 0),d!==void 0&&(d.geometry.dispose(),d.material.dispose(),d=void 0)}return{getClearColor:function(){return a},setClearColor:function(O,P=1){a.set(O),l=P,f(a,l)},getClearAlpha:function(){return l},setClearAlpha:function(O){l=O,f(a,l)},render:x,addToRenderList:m,dispose:N}}function l4(i,e){const t=i.getParameter(i.MAX_VERTEX_ATTRIBS),n={},s=p(null);let r=s,o=!1;function a(R,F,K,Q,ee){let ue=!1;const ne=u(Q,K,F);r!==ne&&(r=ne,d(r.object)),ue=h(R,Q,K,ee),ue&&v(R,Q,K,ee),ee!==null&&e.update(ee,i.ELEMENT_ARRAY_BUFFER),(ue||o)&&(o=!1,P(R,F,K,Q),ee!==null&&i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,e.get(ee).buffer))}function l(){return i.createVertexArray()}function d(R){return i.bindVertexArray(R)}function c(R){return i.deleteVertexArray(R)}function u(R,F,K){const Q=K.wireframe===!0;let ee=n[R.id];ee===void 0&&(ee={},n[R.id]=ee);let ue=ee[F.id];ue===void 0&&(ue={},ee[F.id]=ue);let ne=ue[Q];return ne===void 0&&(ne=p(l()),ue[Q]=ne),ne}function p(R){const F=[],K=[],Q=[];for(let ee=0;ee<t;ee++)F[ee]=0,K[ee]=0,Q[ee]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:F,enabledAttributes:K,attributeDivisors:Q,object:R,attributes:{},index:null}}function h(R,F,K,Q){const ee=r.attributes,ue=F.attributes;let ne=0;const ve=K.getAttributes();for(const te in ve)if(ve[te].location>=0){const Le=ee[te];let je=ue[te];if(je===void 0&&(te==="instanceMatrix"&&R.instanceMatrix&&(je=R.instanceMatrix),te==="instanceColor"&&R.instanceColor&&(je=R.instanceColor)),Le===void 0||Le.attribute!==je||je&&Le.data!==je.data)return!0;ne++}return r.attributesNum!==ne||r.index!==Q}function v(R,F,K,Q){const ee={},ue=F.attributes;let ne=0;const ve=K.getAttributes();for(const te in ve)if(ve[te].location>=0){let Le=ue[te];Le===void 0&&(te==="instanceMatrix"&&R.instanceMatrix&&(Le=R.instanceMatrix),te==="instanceColor"&&R.instanceColor&&(Le=R.instanceColor));const je={};je.attribute=Le,Le&&Le.data&&(je.data=Le.data),ee[te]=je,ne++}r.attributes=ee,r.attributesNum=ne,r.index=Q}function x(){const R=r.newAttributes;for(let F=0,K=R.length;F<K;F++)R[F]=0}function m(R){f(R,0)}function f(R,F){const K=r.newAttributes,Q=r.enabledAttributes,ee=r.attributeDivisors;K[R]=1,Q[R]===0&&(i.enableVertexAttribArray(R),Q[R]=1),ee[R]!==F&&(i.vertexAttribDivisor(R,F),ee[R]=F)}function N(){const R=r.newAttributes,F=r.enabledAttributes;for(let K=0,Q=F.length;K<Q;K++)F[K]!==R[K]&&(i.disableVertexAttribArray(K),F[K]=0)}function O(R,F,K,Q,ee,ue,ne){ne===!0?i.vertexAttribIPointer(R,F,K,ee,ue):i.vertexAttribPointer(R,F,K,Q,ee,ue)}function P(R,F,K,Q){x();const ee=Q.attributes,ue=K.getAttributes(),ne=F.defaultAttributeValues;for(const ve in ue){const te=ue[ve];if(te.location>=0){let Te=ee[ve];if(Te===void 0&&(ve==="instanceMatrix"&&R.instanceMatrix&&(Te=R.instanceMatrix),ve==="instanceColor"&&R.instanceColor&&(Te=R.instanceColor)),Te!==void 0){const Le=Te.normalized,je=Te.itemSize,Ke=e.get(Te);if(Ke===void 0)continue;const ut=Ke.buffer,se=Ke.type,ge=Ke.bytesPerElement,xe=se===i.INT||se===i.UNSIGNED_INT||Te.gpuType===Ic;if(Te.isInterleavedBufferAttribute){const Se=Te.data,Ae=Se.stride,mt=Te.offset;if(Se.isInstancedInterleavedBuffer){for(let Ue=0;Ue<te.locationSize;Ue++)f(te.location+Ue,Se.meshPerAttribute);R.isInstancedMesh!==!0&&Q._maxInstanceCount===void 0&&(Q._maxInstanceCount=Se.meshPerAttribute*Se.count)}else for(let Ue=0;Ue<te.locationSize;Ue++)m(te.location+Ue);i.bindBuffer(i.ARRAY_BUFFER,ut);for(let Ue=0;Ue<te.locationSize;Ue++)O(te.location+Ue,je/te.locationSize,se,Le,Ae*ge,(mt+je/te.locationSize*Ue)*ge,xe)}else{if(Te.isInstancedBufferAttribute){for(let Se=0;Se<te.locationSize;Se++)f(te.location+Se,Te.meshPerAttribute);R.isInstancedMesh!==!0&&Q._maxInstanceCount===void 0&&(Q._maxInstanceCount=Te.meshPerAttribute*Te.count)}else for(let Se=0;Se<te.locationSize;Se++)m(te.location+Se);i.bindBuffer(i.ARRAY_BUFFER,ut);for(let Se=0;Se<te.locationSize;Se++)O(te.location+Se,je/te.locationSize,se,Le,je*ge,je/te.locationSize*Se*ge,xe)}}else if(ne!==void 0){const Le=ne[ve];if(Le!==void 0)switch(Le.length){case 2:i.vertexAttrib2fv(te.location,Le);break;case 3:i.vertexAttrib3fv(te.location,Le);break;case 4:i.vertexAttrib4fv(te.location,Le);break;default:i.vertexAttrib1fv(te.location,Le)}}}}N()}function j(){G();for(const R in n){const F=n[R];for(const K in F){const Q=F[K];for(const ee in Q)c(Q[ee].object),delete Q[ee];delete F[K]}delete n[R]}}function D(R){if(n[R.id]===void 0)return;const F=n[R.id];for(const K in F){const Q=F[K];for(const ee in Q)c(Q[ee].object),delete Q[ee];delete F[K]}delete n[R.id]}function V(R){for(const F in n){const K=n[F];if(K[R.id]===void 0)continue;const Q=K[R.id];for(const ee in Q)c(Q[ee].object),delete Q[ee];delete K[R.id]}}function G(){M(),o=!0,r!==s&&(r=s,d(r.object))}function M(){s.geometry=null,s.program=null,s.wireframe=!1}return{setup:a,reset:G,resetDefaultState:M,dispose:j,releaseStatesOfGeometry:D,releaseStatesOfProgram:V,initAttributes:x,enableAttribute:m,disableUnusedAttributes:N}}function d4(i,e,t){let n;function s(d){n=d}function r(d,c){i.drawArrays(n,d,c),t.update(c,n,1)}function o(d,c,u){u!==0&&(i.drawArraysInstanced(n,d,c,u),t.update(c,n,u))}function a(d,c,u){if(u===0)return;e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n,d,0,c,0,u);let h=0;for(let v=0;v<u;v++)h+=c[v];t.update(h,n,1)}function l(d,c,u,p){if(u===0)return;const h=e.get("WEBGL_multi_draw");if(h===null)for(let v=0;v<d.length;v++)o(d[v],c[v],p[v]);else{h.multiDrawArraysInstancedWEBGL(n,d,0,c,0,p,0,u);let v=0;for(let x=0;x<u;x++)v+=c[x]*p[x];t.update(v,n,1)}}this.setMode=s,this.render=r,this.renderInstances=o,this.renderMultiDraw=a,this.renderMultiDrawInstances=l}function c4(i,e,t,n){let s;function r(){if(s!==void 0)return s;if(e.has("EXT_texture_filter_anisotropic")===!0){const V=e.get("EXT_texture_filter_anisotropic");s=i.getParameter(V.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else s=0;return s}function o(V){return!(V!==kn&&n.convert(V)!==i.getParameter(i.IMPLEMENTATION_COLOR_READ_FORMAT))}function a(V){const G=V===Ci&&(e.has("EXT_color_buffer_half_float")||e.has("EXT_color_buffer_float"));return!(V!==Si&&n.convert(V)!==i.getParameter(i.IMPLEMENTATION_COLOR_READ_TYPE)&&V!==Fn&&!G)}function l(V){if(V==="highp"){if(i.getShaderPrecisionFormat(i.VERTEX_SHADER,i.HIGH_FLOAT).precision>0&&i.getShaderPrecisionFormat(i.FRAGMENT_SHADER,i.HIGH_FLOAT).precision>0)return"highp";V="mediump"}return V==="mediump"&&i.getShaderPrecisionFormat(i.VERTEX_SHADER,i.MEDIUM_FLOAT).precision>0&&i.getShaderPrecisionFormat(i.FRAGMENT_SHADER,i.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let d=t.precision!==void 0?t.precision:"highp";const c=l(d);c!==d&&(console.warn("THREE.WebGLRenderer:",d,"not supported, using",c,"instead."),d=c);const u=t.logarithmicDepthBuffer===!0,p=t.reverseDepthBuffer===!0&&e.has("EXT_clip_control"),h=i.getParameter(i.MAX_TEXTURE_IMAGE_UNITS),v=i.getParameter(i.MAX_VERTEX_TEXTURE_IMAGE_UNITS),x=i.getParameter(i.MAX_TEXTURE_SIZE),m=i.getParameter(i.MAX_CUBE_MAP_TEXTURE_SIZE),f=i.getParameter(i.MAX_VERTEX_ATTRIBS),N=i.getParameter(i.MAX_VERTEX_UNIFORM_VECTORS),O=i.getParameter(i.MAX_VARYING_VECTORS),P=i.getParameter(i.MAX_FRAGMENT_UNIFORM_VECTORS),j=v>0,D=i.getParameter(i.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:r,getMaxPrecision:l,textureFormatReadable:o,textureTypeReadable:a,precision:d,logarithmicDepthBuffer:u,reverseDepthBuffer:p,maxTextures:h,maxVertexTextures:v,maxTextureSize:x,maxCubemapSize:m,maxAttributes:f,maxVertexUniforms:N,maxVaryings:O,maxFragmentUniforms:P,vertexTextures:j,maxSamples:D}}function u4(i){const e=this;let t=null,n=0,s=!1,r=!1;const o=new as,a=new rt,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(u,p){const h=u.length!==0||p||n!==0||s;return s=p,n=u.length,h},this.beginShadows=function(){r=!0,c(null)},this.endShadows=function(){r=!1},this.setGlobalState=function(u,p){t=c(u,p,0)},this.setState=function(u,p,h){const v=u.clippingPlanes,x=u.clipIntersection,m=u.clipShadows,f=i.get(u);if(!s||v===null||v.length===0||r&&!m)r?c(null):d();else{const N=r?0:n,O=N*4;let P=f.clippingState||null;l.value=P,P=c(v,p,O,h);for(let j=0;j!==O;++j)P[j]=t[j];f.clippingState=P,this.numIntersection=x?this.numPlanes:0,this.numPlanes+=N}};function d(){l.value!==t&&(l.value=t,l.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function c(u,p,h,v){const x=u!==null?u.length:0;let m=null;if(x!==0){if(m=l.value,v!==!0||m===null){const f=h+x*4,N=p.matrixWorldInverse;a.getNormalMatrix(N),(m===null||m.length<f)&&(m=new Float32Array(f));for(let O=0,P=h;O!==x;++O,P+=4)o.copy(u[O]).applyMatrix4(N,a),o.normal.toArray(m,P),m[P+3]=o.constant}l.value=m,l.needsUpdate=!0}return e.numPlanes=x,e.numIntersection=0,m}}function p4(i){let e=new WeakMap;function t(o,a){return a===vd?o.mapping=xr:a===yd&&(o.mapping=Tr),o}function n(o){if(o&&o.isTexture){const a=o.mapping;if(a===vd||a===yd)if(e.has(o)){const l=e.get(o).texture;return t(l,o.mapping)}else{const l=o.image;if(l&&l.height>0){const d=new E7(l.height);return d.fromEquirectangularTexture(i,o),e.set(o,d),o.addEventListener("dispose",s),t(d.texture,o.mapping)}else return null}}return o}function s(o){const a=o.target;a.removeEventListener("dispose",s);const l=e.get(a);l!==void 0&&(e.delete(a),l.dispose())}function r(){e=new WeakMap}return{get:n,dispose:r}}const cr=4,f1=[.125,.215,.35,.446,.526,.582],Ns=20,hl=new $c,h1=new tt;let ml=null,bl=0,vl=0,yl=!1;const Ps=(1+Math.sqrt(5))/2,er=1/Ps,m1=[new T(-Ps,er,0),new T(Ps,er,0),new T(-er,0,Ps),new T(er,0,Ps),new T(0,Ps,-er),new T(0,Ps,er),new T(-1,1,-1),new T(1,1,-1),new T(-1,1,1),new T(1,1,1)],f4=new T;class Kd{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,s=100,r={}){const{size:o=256,position:a=f4}=r;ml=this._renderer.getRenderTarget(),bl=this._renderer.getActiveCubeFace(),vl=this._renderer.getActiveMipmapLevel(),yl=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(o);const l=this._allocateTargets();return l.depthBuffer=!0,this._sceneToCubeUV(e,n,s,l,a),t>0&&this._blur(l,0,0,t),this._applyPMREM(l),this._cleanup(l),l}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=y1(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=v1(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(ml,bl,vl),this._renderer.xr.enabled=yl,e.scissorTest=!1,aa(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===xr||e.mapping===Tr?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),ml=this._renderer.getRenderTarget(),bl=this._renderer.getActiveCubeFace(),vl=this._renderer.getActiveMipmapLevel(),yl=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:wn,minFilter:wn,generateMipmaps:!1,type:Ci,format:kn,colorSpace:Sn,depthBuffer:!1},s=b1(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=b1(e,t,n);const{_lodMax:r}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=h4(r)),this._blurMaterial=m4(r,e,t)}return s}_compileMaterial(e){const t=new Kt(this._lodPlanes[0],e);this._renderer.compile(t,hl)}_sceneToCubeUV(e,t,n,s,r){const l=new Xn(90,1,t,n),d=[1,-1,1,1,1,1],c=[1,1,1,-1,-1,-1],u=this._renderer,p=u.autoClear,h=u.toneMapping;u.getClearColor(h1),u.toneMapping=ps,u.autoClear=!1;const v=new qi({name:"PMREM.Background",side:qn,depthWrite:!1,depthTest:!1}),x=new Kt(new ti,v);let m=!1;const f=e.background;f?f.isColor&&(v.color.copy(f),e.background=null,m=!0):(v.color.copy(h1),m=!0);for(let N=0;N<6;N++){const O=N%3;O===0?(l.up.set(0,d[N],0),l.position.set(r.x,r.y,r.z),l.lookAt(r.x+c[N],r.y,r.z)):O===1?(l.up.set(0,0,d[N]),l.position.set(r.x,r.y,r.z),l.lookAt(r.x,r.y+c[N],r.z)):(l.up.set(0,d[N],0),l.position.set(r.x,r.y,r.z),l.lookAt(r.x,r.y,r.z+c[N]));const P=this._cubeSize;aa(s,O*P,N>2?P:0,P,P),u.setRenderTarget(s),m&&u.render(x,l),u.render(e,l)}x.geometry.dispose(),x.material.dispose(),u.toneMapping=h,u.autoClear=p,e.background=f}_textureToCubeUV(e,t){const n=this._renderer,s=e.mapping===xr||e.mapping===Tr;s?(this._cubemapMaterial===null&&(this._cubemapMaterial=y1()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=v1());const r=s?this._cubemapMaterial:this._equirectMaterial,o=new Kt(this._lodPlanes[0],r),a=r.uniforms;a.envMap.value=e;const l=this._cubeSize;aa(t,0,0,3*l,2*l),n.setRenderTarget(t),n.render(o,hl)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;const s=this._lodPlanes.length;for(let r=1;r<s;r++){const o=Math.sqrt(this._sigmas[r]*this._sigmas[r]-this._sigmas[r-1]*this._sigmas[r-1]),a=m1[(s-r-1)%m1.length];this._blur(e,r-1,r,o,a)}t.autoClear=n}_blur(e,t,n,s,r){const o=this._pingPongRenderTarget;this._halfBlur(e,o,t,n,s,"latitudinal",r),this._halfBlur(o,e,n,n,s,"longitudinal",r)}_halfBlur(e,t,n,s,r,o,a){const l=this._renderer,d=this._blurMaterial;o!=="latitudinal"&&o!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const c=3,u=new Kt(this._lodPlanes[s],d),p=d.uniforms,h=this._sizeLods[n]-1,v=isFinite(r)?Math.PI/(2*h):2*Math.PI/(2*Ns-1),x=r/v,m=isFinite(r)?1+Math.floor(c*x):Ns;m>Ns&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${m} samples when the maximum is set to ${Ns}`);const f=[];let N=0;for(let V=0;V<Ns;++V){const G=V/x,M=Math.exp(-G*G/2);f.push(M),V===0?N+=M:V<m&&(N+=2*M)}for(let V=0;V<f.length;V++)f[V]=f[V]/N;p.envMap.value=e.texture,p.samples.value=m,p.weights.value=f,p.latitudinal.value=o==="latitudinal",a&&(p.poleAxis.value=a);const{_lodMax:O}=this;p.dTheta.value=v,p.mipInt.value=O-n;const P=this._sizeLods[s],j=3*P*(s>O-cr?s-O+cr:0),D=4*(this._cubeSize-P);aa(t,j,D,3*P,2*P),l.setRenderTarget(t),l.render(u,hl)}}function h4(i){const e=[],t=[],n=[];let s=i;const r=i-cr+1+f1.length;for(let o=0;o<r;o++){const a=Math.pow(2,s);t.push(a);let l=1/a;o>i-cr?l=f1[o-i+cr-1]:o===0&&(l=0),n.push(l);const d=1/(a-2),c=-d,u=1+d,p=[c,c,u,c,u,u,c,c,u,u,c,u],h=6,v=6,x=3,m=2,f=1,N=new Float32Array(x*v*h),O=new Float32Array(m*v*h),P=new Float32Array(f*v*h);for(let D=0;D<h;D++){const V=D%3*2/3-1,G=D>2?0:-1,M=[V,G,0,V+2/3,G,0,V+2/3,G+1,0,V,G,0,V+2/3,G+1,0,V,G+1,0];N.set(M,x*v*D),O.set(p,m*v*D);const R=[D,D,D,D,D,D];P.set(R,f*v*D)}const j=new zn;j.setAttribute("position",new Dn(N,x)),j.setAttribute("uv",new Dn(O,m)),j.setAttribute("faceIndex",new Dn(P,f)),e.push(j),s>cr&&s--}return{lodPlanes:e,sizeLods:t,sigmas:n}}function b1(i,e,t){const n=new zs(i,e,t);return n.texture.mapping=y0,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function aa(i,e,t,n,s){i.viewport.set(e,t,n,s),i.scissor.set(e,t,n,s)}function m4(i,e,t){const n=new Float32Array(Ns),s=new T(0,1,0);return new fs({name:"SphericalGaussianBlur",defines:{n:Ns,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${i}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:s}},vertexShader:nu(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:us,depthTest:!1,depthWrite:!1})}function v1(){return new fs({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:nu(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:us,depthTest:!1,depthWrite:!1})}function y1(){return new fs({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:nu(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:us,depthTest:!1,depthWrite:!1})}function nu(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function b4(i){let e=new WeakMap,t=null;function n(a){if(a&&a.isTexture){const l=a.mapping,d=l===vd||l===yd,c=l===xr||l===Tr;if(d||c){let u=e.get(a);const p=u!==void 0?u.texture.pmremVersion:0;if(a.isRenderTargetTexture&&a.pmremVersion!==p)return t===null&&(t=new Kd(i)),u=d?t.fromEquirectangular(a,u):t.fromCubemap(a,u),u.texture.pmremVersion=a.pmremVersion,e.set(a,u),u.texture;if(u!==void 0)return u.texture;{const h=a.image;return d&&h&&h.height>0||c&&h&&s(h)?(t===null&&(t=new Kd(i)),u=d?t.fromEquirectangular(a):t.fromCubemap(a),u.texture.pmremVersion=a.pmremVersion,e.set(a,u),a.addEventListener("dispose",r),u.texture):null}}}return a}function s(a){let l=0;const d=6;for(let c=0;c<d;c++)a[c]!==void 0&&l++;return l===d}function r(a){const l=a.target;l.removeEventListener("dispose",r);const d=e.get(l);d!==void 0&&(e.delete(l),d.dispose())}function o(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:n,dispose:o}}function v4(i){const e={};function t(n){if(e[n]!==void 0)return e[n];let s;switch(n){case"WEBGL_depth_texture":s=i.getExtension("WEBGL_depth_texture")||i.getExtension("MOZ_WEBGL_depth_texture")||i.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":s=i.getExtension("EXT_texture_filter_anisotropic")||i.getExtension("MOZ_EXT_texture_filter_anisotropic")||i.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":s=i.getExtension("WEBGL_compressed_texture_s3tc")||i.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":s=i.getExtension("WEBGL_compressed_texture_pvrtc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:s=i.getExtension(n)}return e[n]=s,s}return{has:function(n){return t(n)!==null},init:function(){t("EXT_color_buffer_float"),t("WEBGL_clip_cull_distance"),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture"),t("WEBGL_render_shared_exponent")},get:function(n){const s=t(n);return s===null&&vr("THREE.WebGLRenderer: "+n+" extension not supported."),s}}}function y4(i,e,t,n){const s={},r=new WeakMap;function o(u){const p=u.target;p.index!==null&&e.remove(p.index);for(const v in p.attributes)e.remove(p.attributes[v]);p.removeEventListener("dispose",o),delete s[p.id];const h=r.get(p);h&&(e.remove(h),r.delete(p)),n.releaseStatesOfGeometry(p),p.isInstancedBufferGeometry===!0&&delete p._maxInstanceCount,t.memory.geometries--}function a(u,p){return s[p.id]===!0||(p.addEventListener("dispose",o),s[p.id]=!0,t.memory.geometries++),p}function l(u){const p=u.attributes;for(const h in p)e.update(p[h],i.ARRAY_BUFFER)}function d(u){const p=[],h=u.index,v=u.attributes.position;let x=0;if(h!==null){const N=h.array;x=h.version;for(let O=0,P=N.length;O<P;O+=3){const j=N[O+0],D=N[O+1],V=N[O+2];p.push(j,D,D,V,V,j)}}else if(v!==void 0){const N=v.array;x=v.version;for(let O=0,P=N.length/3-1;O<P;O+=3){const j=O+0,D=O+1,V=O+2;p.push(j,D,D,V,V,j)}}else return;const m=new(H2(p)?Uc:X2)(p,1);m.version=x;const f=r.get(u);f&&e.remove(f),r.set(u,m)}function c(u){const p=r.get(u);if(p){const h=u.index;h!==null&&p.version<h.version&&d(u)}else d(u);return r.get(u)}return{get:a,update:l,getWireframeAttribute:c}}function w4(i,e,t){let n;function s(p){n=p}let r,o;function a(p){r=p.type,o=p.bytesPerElement}function l(p,h){i.drawElements(n,h,r,p*o),t.update(h,n,1)}function d(p,h,v){v!==0&&(i.drawElementsInstanced(n,h,r,p*o,v),t.update(h,n,v))}function c(p,h,v){if(v===0)return;e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n,h,0,r,p,0,v);let m=0;for(let f=0;f<v;f++)m+=h[f];t.update(m,n,1)}function u(p,h,v,x){if(v===0)return;const m=e.get("WEBGL_multi_draw");if(m===null)for(let f=0;f<p.length;f++)d(p[f]/o,h[f],x[f]);else{m.multiDrawElementsInstancedWEBGL(n,h,0,r,p,0,x,0,v);let f=0;for(let N=0;N<v;N++)f+=h[N]*x[N];t.update(f,n,1)}}this.setMode=s,this.setIndex=a,this.render=l,this.renderInstances=d,this.renderMultiDraw=c,this.renderMultiDrawInstances=u}function g4(i){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(r,o,a){switch(t.calls++,o){case i.TRIANGLES:t.triangles+=a*(r/3);break;case i.LINES:t.lines+=a*(r/2);break;case i.LINE_STRIP:t.lines+=a*(r-1);break;case i.LINE_LOOP:t.lines+=a*r;break;case i.POINTS:t.points+=a*r;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",o);break}}function s(){t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:s,update:n}}function x4(i,e,t){const n=new WeakMap,s=new Rt;function r(o,a,l){const d=o.morphTargetInfluences,c=a.morphAttributes.position||a.morphAttributes.normal||a.morphAttributes.color,u=c!==void 0?c.length:0;let p=n.get(a);if(p===void 0||p.count!==u){let M=function(){V.dispose(),n.delete(a),a.removeEventListener("dispose",M)};p!==void 0&&p.texture.dispose();const h=a.morphAttributes.position!==void 0,v=a.morphAttributes.normal!==void 0,x=a.morphAttributes.color!==void 0,m=a.morphAttributes.position||[],f=a.morphAttributes.normal||[],N=a.morphAttributes.color||[];let O=0;h===!0&&(O=1),v===!0&&(O=2),x===!0&&(O=3);let P=a.attributes.position.count*O,j=1;P>e.maxTextureSize&&(j=Math.ceil(P/e.maxTextureSize),P=e.maxTextureSize);const D=new Float32Array(P*j*4*u),V=new E2(D,P,j,u);V.type=Fn,V.needsUpdate=!0;const G=O*4;for(let R=0;R<u;R++){const F=m[R],K=f[R],Q=N[R],ee=P*j*4*R;for(let ue=0;ue<F.count;ue++){const ne=ue*G;h===!0&&(s.fromBufferAttribute(F,ue),D[ee+ne+0]=s.x,D[ee+ne+1]=s.y,D[ee+ne+2]=s.z,D[ee+ne+3]=0),v===!0&&(s.fromBufferAttribute(K,ue),D[ee+ne+4]=s.x,D[ee+ne+5]=s.y,D[ee+ne+6]=s.z,D[ee+ne+7]=0),x===!0&&(s.fromBufferAttribute(Q,ue),D[ee+ne+8]=s.x,D[ee+ne+9]=s.y,D[ee+ne+10]=s.z,D[ee+ne+11]=Q.itemSize===4?s.w:1)}}p={count:u,texture:V,size:new et(P,j)},n.set(a,p),a.addEventListener("dispose",M)}if(o.isInstancedMesh===!0&&o.morphTexture!==null)l.getUniforms().setValue(i,"morphTexture",o.morphTexture,t);else{let h=0;for(let x=0;x<d.length;x++)h+=d[x];const v=a.morphTargetsRelative?1:1-h;l.getUniforms().setValue(i,"morphTargetBaseInfluence",v),l.getUniforms().setValue(i,"morphTargetInfluences",d)}l.getUniforms().setValue(i,"morphTargetsTexture",p.texture,t),l.getUniforms().setValue(i,"morphTargetsTextureSize",p.size)}return{update:r}}function T4(i,e,t,n){let s=new WeakMap;function r(l){const d=n.render.frame,c=l.geometry,u=e.get(l,c);if(s.get(u)!==d&&(e.update(u),s.set(u,d)),l.isInstancedMesh&&(l.hasEventListener("dispose",a)===!1&&l.addEventListener("dispose",a),s.get(l)!==d&&(t.update(l.instanceMatrix,i.ARRAY_BUFFER),l.instanceColor!==null&&t.update(l.instanceColor,i.ARRAY_BUFFER),s.set(l,d))),l.isSkinnedMesh){const p=l.skeleton;s.get(p)!==d&&(p.update(),s.set(p,d))}return u}function o(){s=new WeakMap}function a(l){const d=l.target;d.removeEventListener("dispose",a),t.remove(d.instanceMatrix),d.instanceColor!==null&&t.remove(d.instanceColor)}return{update:r,dispose:o}}const J2=new gn,w1=new C2(1,1),B2=new E2,K2=new p7,Q2=new W2,g1=[],x1=[],T1=new Float32Array(16),S1=new Float32Array(9),P1=new Float32Array(4);function Ar(i,e,t){const n=i[0];if(n<=0||n>0)return i;const s=e*t;let r=g1[s];if(r===void 0&&(r=new Float32Array(s),g1[s]=r),e!==0){n.toArray(r,0);for(let o=1,a=0;o!==e;++o)a+=t,i[o].toArray(r,a)}return r}function an(i,e){if(i.length!==e.length)return!1;for(let t=0,n=i.length;t<n;t++)if(i[t]!==e[t])return!1;return!0}function ln(i,e){for(let t=0,n=e.length;t<n;t++)i[t]=e[t]}function P0(i,e){let t=x1[e];t===void 0&&(t=new Int32Array(e),x1[e]=t);for(let n=0;n!==e;++n)t[n]=i.allocateTextureUnit();return t}function S4(i,e){const t=this.cache;t[0]!==e&&(i.uniform1f(this.addr,e),t[0]=e)}function P4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(i.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(an(t,e))return;i.uniform2fv(this.addr,e),ln(t,e)}}function R4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(i.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(i.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(an(t,e))return;i.uniform3fv(this.addr,e),ln(t,e)}}function L4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(i.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(an(t,e))return;i.uniform4fv(this.addr,e),ln(t,e)}}function N4(i,e){const t=this.cache,n=e.elements;if(n===void 0){if(an(t,e))return;i.uniformMatrix2fv(this.addr,!1,e),ln(t,e)}else{if(an(t,n))return;P1.set(n),i.uniformMatrix2fv(this.addr,!1,P1),ln(t,n)}}function M4(i,e){const t=this.cache,n=e.elements;if(n===void 0){if(an(t,e))return;i.uniformMatrix3fv(this.addr,!1,e),ln(t,e)}else{if(an(t,n))return;S1.set(n),i.uniformMatrix3fv(this.addr,!1,S1),ln(t,n)}}function O4(i,e){const t=this.cache,n=e.elements;if(n===void 0){if(an(t,e))return;i.uniformMatrix4fv(this.addr,!1,e),ln(t,e)}else{if(an(t,n))return;T1.set(n),i.uniformMatrix4fv(this.addr,!1,T1),ln(t,n)}}function z4(i,e){const t=this.cache;t[0]!==e&&(i.uniform1i(this.addr,e),t[0]=e)}function H4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(i.uniform2i(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(an(t,e))return;i.uniform2iv(this.addr,e),ln(t,e)}}function E4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(i.uniform3i(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(an(t,e))return;i.uniform3iv(this.addr,e),ln(t,e)}}function A4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(i.uniform4i(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(an(t,e))return;i.uniform4iv(this.addr,e),ln(t,e)}}function X4(i,e){const t=this.cache;t[0]!==e&&(i.uniform1ui(this.addr,e),t[0]=e)}function I4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(i.uniform2ui(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(an(t,e))return;i.uniform2uiv(this.addr,e),ln(t,e)}}function D4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(i.uniform3ui(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(an(t,e))return;i.uniform3uiv(this.addr,e),ln(t,e)}}function W4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(i.uniform4ui(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(an(t,e))return;i.uniform4uiv(this.addr,e),ln(t,e)}}function j4(i,e,t){const n=this.cache,s=t.allocateTextureUnit();n[0]!==s&&(i.uniform1i(this.addr,s),n[0]=s);let r;this.type===i.SAMPLER_2D_SHADOW?(w1.compareFunction=M2,r=w1):r=J2,t.setTexture2D(e||r,s)}function V4(i,e,t){const n=this.cache,s=t.allocateTextureUnit();n[0]!==s&&(i.uniform1i(this.addr,s),n[0]=s),t.setTexture3D(e||K2,s)}function C4(i,e,t){const n=this.cache,s=t.allocateTextureUnit();n[0]!==s&&(i.uniform1i(this.addr,s),n[0]=s),t.setTextureCube(e||Q2,s)}function F4(i,e,t){const n=this.cache,s=t.allocateTextureUnit();n[0]!==s&&(i.uniform1i(this.addr,s),n[0]=s),t.setTexture2DArray(e||B2,s)}function q4(i){switch(i){case 5126:return S4;case 35664:return P4;case 35665:return R4;case 35666:return L4;case 35674:return N4;case 35675:return M4;case 35676:return O4;case 5124:case 35670:return z4;case 35667:case 35671:return H4;case 35668:case 35672:return E4;case 35669:case 35673:return A4;case 5125:return X4;case 36294:return I4;case 36295:return D4;case 36296:return W4;case 35678:case 36198:case 36298:case 36306:case 35682:return j4;case 35679:case 36299:case 36307:return V4;case 35680:case 36300:case 36308:case 36293:return C4;case 36289:case 36303:case 36311:case 36292:return F4}}function Y4(i,e){i.uniform1fv(this.addr,e)}function G4(i,e){const t=Ar(e,this.size,2);i.uniform2fv(this.addr,t)}function U4(i,e){const t=Ar(e,this.size,3);i.uniform3fv(this.addr,t)}function Z4(i,e){const t=Ar(e,this.size,4);i.uniform4fv(this.addr,t)}function k4(i,e){const t=Ar(e,this.size,4);i.uniformMatrix2fv(this.addr,!1,t)}function J4(i,e){const t=Ar(e,this.size,9);i.uniformMatrix3fv(this.addr,!1,t)}function B4(i,e){const t=Ar(e,this.size,16);i.uniformMatrix4fv(this.addr,!1,t)}function K4(i,e){i.uniform1iv(this.addr,e)}function Q4(i,e){i.uniform2iv(this.addr,e)}function _4(i,e){i.uniform3iv(this.addr,e)}function $4(i,e){i.uniform4iv(this.addr,e)}function e8(i,e){i.uniform1uiv(this.addr,e)}function t8(i,e){i.uniform2uiv(this.addr,e)}function n8(i,e){i.uniform3uiv(this.addr,e)}function i8(i,e){i.uniform4uiv(this.addr,e)}function s8(i,e,t){const n=this.cache,s=e.length,r=P0(t,s);an(n,r)||(i.uniform1iv(this.addr,r),ln(n,r));for(let o=0;o!==s;++o)t.setTexture2D(e[o]||J2,r[o])}function r8(i,e,t){const n=this.cache,s=e.length,r=P0(t,s);an(n,r)||(i.uniform1iv(this.addr,r),ln(n,r));for(let o=0;o!==s;++o)t.setTexture3D(e[o]||K2,r[o])}function o8(i,e,t){const n=this.cache,s=e.length,r=P0(t,s);an(n,r)||(i.uniform1iv(this.addr,r),ln(n,r));for(let o=0;o!==s;++o)t.setTextureCube(e[o]||Q2,r[o])}function a8(i,e,t){const n=this.cache,s=e.length,r=P0(t,s);an(n,r)||(i.uniform1iv(this.addr,r),ln(n,r));for(let o=0;o!==s;++o)t.setTexture2DArray(e[o]||B2,r[o])}function l8(i){switch(i){case 5126:return Y4;case 35664:return G4;case 35665:return U4;case 35666:return Z4;case 35674:return k4;case 35675:return J4;case 35676:return B4;case 5124:case 35670:return K4;case 35667:case 35671:return Q4;case 35668:case 35672:return _4;case 35669:case 35673:return $4;case 5125:return e8;case 36294:return t8;case 36295:return n8;case 36296:return i8;case 35678:case 36198:case 36298:case 36306:case 35682:return s8;case 35679:case 36299:case 36307:return r8;case 35680:case 36300:case 36308:case 36293:return o8;case 36289:case 36303:case 36311:case 36292:return a8}}class d8{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.setValue=q4(t.type)}}class c8{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=l8(t.type)}}class u8{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const s=this.seq;for(let r=0,o=s.length;r!==o;++r){const a=s[r];a.setValue(e,t[a.id],n)}}}const wl=/(\w+)(\])?(\[|\.)?/g;function R1(i,e){i.seq.push(e),i.map[e.id]=e}function p8(i,e,t){const n=i.name,s=n.length;for(wl.lastIndex=0;;){const r=wl.exec(n),o=wl.lastIndex;let a=r[1];const l=r[2]==="]",d=r[3];if(l&&(a=a|0),d===void 0||d==="["&&o+2===s){R1(t,d===void 0?new d8(a,i,e):new c8(a,i,e));break}else{let u=t.map[a];u===void 0&&(u=new u8(a),R1(t,u)),t=u}}}class ja{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let s=0;s<n;++s){const r=e.getActiveUniform(t,s),o=e.getUniformLocation(t,r.name);p8(r,o,this)}}setValue(e,t,n,s){const r=this.map[t];r!==void 0&&r.setValue(e,n,s)}setOptional(e,t,n){const s=t[n];s!==void 0&&this.setValue(e,n,s)}static upload(e,t,n,s){for(let r=0,o=t.length;r!==o;++r){const a=t[r],l=n[a.id];l.needsUpdate!==!1&&a.setValue(e,l.value,s)}}static seqWithValue(e,t){const n=[];for(let s=0,r=e.length;s!==r;++s){const o=e[s];o.id in t&&n.push(o)}return n}}function L1(i,e,t){const n=i.createShader(e);return i.shaderSource(n,t),i.compileShader(n),n}const f8=37297;let h8=0;function m8(i,e){const t=i.split(`
`),n=[],s=Math.max(e-6,0),r=Math.min(e+6,t.length);for(let o=s;o<r;o++){const a=o+1;n.push(`${a===e?">":" "} ${a}: ${t[o]}`)}return n.join(`
`)}const N1=new rt;function b8(i){wt._getMatrix(N1,wt.workingColorSpace,i);const e=`mat3( ${N1.elements.map(t=>t.toFixed(4))} )`;switch(wt.getTransfer(i)){case Ya:return[e,"LinearTransferOETF"];case It:return[e,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",i),[e,"LinearTransferOETF"]}}function M1(i,e,t){const n=i.getShaderParameter(e,i.COMPILE_STATUS),s=i.getShaderInfoLog(e).trim();if(n&&s==="")return"";const r=/ERROR: 0:(\d+)/.exec(s);if(r){const o=parseInt(r[1]);return t.toUpperCase()+`

`+s+`

`+m8(i.getShaderSource(e),o)}else return s}function v8(i,e){const t=b8(e);return[`vec4 ${i}( vec4 value ) {`,`	return ${t[1]}( vec4( value.rgb * ${t[0]}, value.a ) );`,"}"].join(`
`)}function y8(i,e){let t;switch(e){case Th:t="Linear";break;case Sh:t="Reinhard";break;case Ph:t="Cineon";break;case v2:t="ACESFilmic";break;case Lh:t="AgX";break;case Nh:t="Neutral";break;case Rh:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+i+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}const la=new T;function w8(){wt.getLuminanceCoefficients(la);const i=la.x.toFixed(4),e=la.y.toFixed(4),t=la.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${i}, ${e}, ${t} );`,"	return dot( weights, rgb );","}"].join(`
`)}function g8(i){return[i.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",i.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(io).join(`
`)}function x8(i){const e=[];for(const t in i){const n=i[t];n!==!1&&e.push("#define "+t+" "+n)}return e.join(`
`)}function T8(i,e){const t={},n=i.getProgramParameter(e,i.ACTIVE_ATTRIBUTES);for(let s=0;s<n;s++){const r=i.getActiveAttrib(e,s),o=r.name;let a=1;r.type===i.FLOAT_MAT2&&(a=2),r.type===i.FLOAT_MAT3&&(a=3),r.type===i.FLOAT_MAT4&&(a=4),t[o]={type:r.type,location:i.getAttribLocation(e,o),locationSize:a}}return t}function io(i){return i!==""}function O1(i,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return i.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function z1(i,e){return i.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const S8=/^[ \t]*#include +<([\w\d./]+)>/gm;function Qd(i){return i.replace(S8,R8)}const P8=new Map;function R8(i,e){let t=at[e];if(t===void 0){const n=P8.get(e);if(n!==void 0)t=at[n],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,n);else throw new Error("Can not resolve #include <"+e+">")}return Qd(t)}const L8=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function H1(i){return i.replace(L8,N8)}function N8(i,e,t,n){let s="";for(let r=parseInt(e);r<parseInt(t);r++)s+=n.replace(/\[\s*i\s*\]/g,"[ "+r+" ]").replace(/UNROLLED_LOOP_INDEX/g,r);return s}function E1(i){let e=`precision ${i.precision} float;
	precision ${i.precision} int;
	precision ${i.precision} sampler2D;
	precision ${i.precision} samplerCube;
	precision ${i.precision} sampler3D;
	precision ${i.precision} sampler2DArray;
	precision ${i.precision} sampler2DShadow;
	precision ${i.precision} samplerCubeShadow;
	precision ${i.precision} sampler2DArrayShadow;
	precision ${i.precision} isampler2D;
	precision ${i.precision} isampler3D;
	precision ${i.precision} isamplerCube;
	precision ${i.precision} isampler2DArray;
	precision ${i.precision} usampler2D;
	precision ${i.precision} usampler3D;
	precision ${i.precision} usamplerCube;
	precision ${i.precision} usampler2DArray;
	`;return i.precision==="highp"?e+=`
#define HIGH_PRECISION`:i.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:i.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function M8(i){let e="SHADOWMAP_TYPE_BASIC";return i.shadowMapType===b2?e="SHADOWMAP_TYPE_PCF":i.shadowMapType===th?e="SHADOWMAP_TYPE_PCF_SOFT":i.shadowMapType===vi&&(e="SHADOWMAP_TYPE_VSM"),e}function O8(i){let e="ENVMAP_TYPE_CUBE";if(i.envMap)switch(i.envMapMode){case xr:case Tr:e="ENVMAP_TYPE_CUBE";break;case y0:e="ENVMAP_TYPE_CUBE_UV";break}return e}function z8(i){let e="ENVMAP_MODE_REFLECTION";if(i.envMap)switch(i.envMapMode){case Tr:e="ENVMAP_MODE_REFRACTION";break}return e}function H8(i){let e="ENVMAP_BLENDING_NONE";if(i.envMap)switch(i.combine){case Xc:e="ENVMAP_BLENDING_MULTIPLY";break;case gh:e="ENVMAP_BLENDING_MIX";break;case xh:e="ENVMAP_BLENDING_ADD";break}return e}function E8(i){const e=i.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2,n=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:n,maxMip:t}}function A8(i,e,t,n){const s=i.getContext(),r=t.defines;let o=t.vertexShader,a=t.fragmentShader;const l=M8(t),d=O8(t),c=z8(t),u=H8(t),p=E8(t),h=g8(t),v=x8(r),x=s.createProgram();let m,f,N=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(m=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,v].filter(io).join(`
`),m.length>0&&(m+=`
`),f=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,v].filter(io).join(`
`),f.length>0&&(f+=`
`)):(m=[E1(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,v,t.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",t.batching?"#define USE_BATCHING":"",t.batchingColor?"#define USE_BATCHING_COLOR":"",t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.instancingMorph?"#define USE_INSTANCING_MORPH":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+c:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+t.anisotropyMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(io).join(`
`),f=[E1(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,v,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+d:"",t.envMap?"#define "+c:"",t.envMap?"#define "+u:"",p?"#define CUBEUV_TEXEL_WIDTH "+p.texelWidth:"",p?"#define CUBEUV_TEXEL_HEIGHT "+p.texelHeight:"",p?"#define CUBEUV_MAX_MIP "+p.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.dispersion?"#define USE_DISPERSION":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor||t.batchingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==ps?"#define TONE_MAPPING":"",t.toneMapping!==ps?at.tonemapping_pars_fragment:"",t.toneMapping!==ps?y8("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",at.colorspace_pars_fragment,v8("linearToOutputTexel",t.outputColorSpace),w8(),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(io).join(`
`)),o=Qd(o),o=O1(o,t),o=z1(o,t),a=Qd(a),a=O1(a,t),a=z1(a,t),o=H1(o),a=H1(a),t.isRawShaderMaterial!==!0&&(N=`#version 300 es
`,m=[h,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+m,f=["#define varying in",t.glslVersion===Pu?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===Pu?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+f);const O=N+m+o,P=N+f+a,j=L1(s,s.VERTEX_SHADER,O),D=L1(s,s.FRAGMENT_SHADER,P);s.attachShader(x,j),s.attachShader(x,D),t.index0AttributeName!==void 0?s.bindAttribLocation(x,0,t.index0AttributeName):t.morphTargets===!0&&s.bindAttribLocation(x,0,"position"),s.linkProgram(x);function V(F){if(i.debug.checkShaderErrors){const K=s.getProgramInfoLog(x).trim(),Q=s.getShaderInfoLog(j).trim(),ee=s.getShaderInfoLog(D).trim();let ue=!0,ne=!0;if(s.getProgramParameter(x,s.LINK_STATUS)===!1)if(ue=!1,typeof i.debug.onShaderError=="function")i.debug.onShaderError(s,x,j,D);else{const ve=M1(s,j,"vertex"),te=M1(s,D,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(x,s.VALIDATE_STATUS)+`

Material Name: `+F.name+`
Material Type: `+F.type+`

Program Info Log: `+K+`
`+ve+`
`+te)}else K!==""?console.warn("THREE.WebGLProgram: Program Info Log:",K):(Q===""||ee==="")&&(ne=!1);ne&&(F.diagnostics={runnable:ue,programLog:K,vertexShader:{log:Q,prefix:m},fragmentShader:{log:ee,prefix:f}})}s.deleteShader(j),s.deleteShader(D),G=new ja(s,x),M=T8(s,x)}let G;this.getUniforms=function(){return G===void 0&&V(this),G};let M;this.getAttributes=function(){return M===void 0&&V(this),M};let R=t.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return R===!1&&(R=s.getProgramParameter(x,f8)),R},this.destroy=function(){n.releaseStatesOfProgram(this),s.deleteProgram(x),this.program=void 0},this.type=t.shaderType,this.name=t.shaderName,this.id=h8++,this.cacheKey=e,this.usedTimes=1,this.program=x,this.vertexShader=j,this.fragmentShader=D,this}let X8=0;class I8{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,s=this._getShaderStage(t),r=this._getShaderStage(n),o=this._getShaderCacheForMaterial(e);return o.has(s)===!1&&(o.add(s),s.usedTimes++),o.has(r)===!1&&(o.add(r),r.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const n of t)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);return n===void 0&&(n=new Set,t.set(e,n)),n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);return n===void 0&&(n=new D8(e),t.set(e,n)),n}}class D8{constructor(e){this.id=X8++,this.code=e,this.usedTimes=0}}function W8(i,e,t,n,s,r,o){const a=new Gc,l=new I8,d=new Set,c=[],u=s.logarithmicDepthBuffer,p=s.vertexTextures;let h=s.precision;const v={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function x(M){return d.add(M),M===0?"uv":`uv${M}`}function m(M,R,F,K,Q){const ee=K.fog,ue=Q.geometry,ne=M.isMeshStandardMaterial?K.environment:null,ve=(M.isMeshStandardMaterial?t:e).get(M.envMap||ne),te=ve&&ve.mapping===y0?ve.image.height:null,Te=v[M.type];M.precision!==null&&(h=s.getMaxPrecision(M.precision),h!==M.precision&&console.warn("THREE.WebGLProgram.getParameters:",M.precision,"not supported, using",h,"instead."));const Le=ue.morphAttributes.position||ue.morphAttributes.normal||ue.morphAttributes.color,je=Le!==void 0?Le.length:0;let Ke=0;ue.morphAttributes.position!==void 0&&(Ke=1),ue.morphAttributes.normal!==void 0&&(Ke=2),ue.morphAttributes.color!==void 0&&(Ke=3);let ut,se,ge,xe;if(Te){const Pt=wi[Te];ut=Pt.vertexShader,se=Pt.fragmentShader}else ut=M.vertexShader,se=M.fragmentShader,l.update(M),ge=l.getVertexShaderID(M),xe=l.getFragmentShaderID(M);const Se=i.getRenderTarget(),Ae=i.state.buffers.depth.getReversed(),mt=Q.isInstancedMesh===!0,Ue=Q.isBatchedMesh===!0,Nt=!!M.map,Ht=!!M.matcap,ft=!!ve,C=!!M.aoMap,cn=!!M.lightMap,gt=!!M.bumpMap,Et=!!M.normalMap,Ve=!!M.displacementMap,yt=!!M.emissiveMap,Ge=!!M.metalnessMap,it=!!M.roughnessMap,Qt=M.anisotropy>0,A=M.clearcoat>0,S=M.dispersion>0,B=M.iridescence>0,re=M.sheen>0,pe=M.transmission>0,ie=Qt&&!!M.anisotropyMap,Ie=A&&!!M.clearcoatMap,Re=A&&!!M.clearcoatNormalMap,De=A&&!!M.clearcoatRoughnessMap,Fe=B&&!!M.iridescenceMap,le=B&&!!M.iridescenceThicknessMap,Pe=re&&!!M.sheenColorMap,Ze=re&&!!M.sheenRoughnessMap,Ce=!!M.specularMap,ye=!!M.specularColorMap,We=!!M.specularIntensityMap,Y=pe&&!!M.transmissionMap,_=pe&&!!M.thicknessMap,he=!!M.gradientMap,He=!!M.alphaMap,be=M.alphaTest>0,de=!!M.alphaHash,Xe=!!M.extensions;let nt=ps;M.toneMapped&&(Se===null||Se.isXRRenderTarget===!0)&&(nt=i.toneMapping);const jt={shaderID:Te,shaderType:M.type,shaderName:M.name,vertexShader:ut,fragmentShader:se,defines:M.defines,customVertexShaderID:ge,customFragmentShaderID:xe,isRawShaderMaterial:M.isRawShaderMaterial===!0,glslVersion:M.glslVersion,precision:h,batching:Ue,batchingColor:Ue&&Q._colorsTexture!==null,instancing:mt,instancingColor:mt&&Q.instanceColor!==null,instancingMorph:mt&&Q.morphTexture!==null,supportsVertexTextures:p,outputColorSpace:Se===null?i.outputColorSpace:Se.isXRRenderTarget===!0?Se.texture.colorSpace:Sn,alphaToCoverage:!!M.alphaToCoverage,map:Nt,matcap:Ht,envMap:ft,envMapMode:ft&&ve.mapping,envMapCubeUVHeight:te,aoMap:C,lightMap:cn,bumpMap:gt,normalMap:Et,displacementMap:p&&Ve,emissiveMap:yt,normalMapObjectSpace:Et&&M.normalMapType===Ah,normalMapTangentSpace:Et&&M.normalMapType===Fc,metalnessMap:Ge,roughnessMap:it,anisotropy:Qt,anisotropyMap:ie,clearcoat:A,clearcoatMap:Ie,clearcoatNormalMap:Re,clearcoatRoughnessMap:De,dispersion:S,iridescence:B,iridescenceMap:Fe,iridescenceThicknessMap:le,sheen:re,sheenColorMap:Pe,sheenRoughnessMap:Ze,specularMap:Ce,specularColorMap:ye,specularIntensityMap:We,transmission:pe,transmissionMap:Y,thicknessMap:_,gradientMap:he,opaque:M.transparent===!1&&M.blending===mr&&M.alphaToCoverage===!1,alphaMap:He,alphaTest:be,alphaHash:de,combine:M.combine,mapUv:Nt&&x(M.map.channel),aoMapUv:C&&x(M.aoMap.channel),lightMapUv:cn&&x(M.lightMap.channel),bumpMapUv:gt&&x(M.bumpMap.channel),normalMapUv:Et&&x(M.normalMap.channel),displacementMapUv:Ve&&x(M.displacementMap.channel),emissiveMapUv:yt&&x(M.emissiveMap.channel),metalnessMapUv:Ge&&x(M.metalnessMap.channel),roughnessMapUv:it&&x(M.roughnessMap.channel),anisotropyMapUv:ie&&x(M.anisotropyMap.channel),clearcoatMapUv:Ie&&x(M.clearcoatMap.channel),clearcoatNormalMapUv:Re&&x(M.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:De&&x(M.clearcoatRoughnessMap.channel),iridescenceMapUv:Fe&&x(M.iridescenceMap.channel),iridescenceThicknessMapUv:le&&x(M.iridescenceThicknessMap.channel),sheenColorMapUv:Pe&&x(M.sheenColorMap.channel),sheenRoughnessMapUv:Ze&&x(M.sheenRoughnessMap.channel),specularMapUv:Ce&&x(M.specularMap.channel),specularColorMapUv:ye&&x(M.specularColorMap.channel),specularIntensityMapUv:We&&x(M.specularIntensityMap.channel),transmissionMapUv:Y&&x(M.transmissionMap.channel),thicknessMapUv:_&&x(M.thicknessMap.channel),alphaMapUv:He&&x(M.alphaMap.channel),vertexTangents:!!ue.attributes.tangent&&(Et||Qt),vertexColors:M.vertexColors,vertexAlphas:M.vertexColors===!0&&!!ue.attributes.color&&ue.attributes.color.itemSize===4,pointsUvs:Q.isPoints===!0&&!!ue.attributes.uv&&(Nt||He),fog:!!ee,useFog:M.fog===!0,fogExp2:!!ee&&ee.isFogExp2,flatShading:M.flatShading===!0&&M.wireframe===!1,sizeAttenuation:M.sizeAttenuation===!0,logarithmicDepthBuffer:u,reverseDepthBuffer:Ae,skinning:Q.isSkinnedMesh===!0,morphTargets:ue.morphAttributes.position!==void 0,morphNormals:ue.morphAttributes.normal!==void 0,morphColors:ue.morphAttributes.color!==void 0,morphTargetsCount:je,morphTextureStride:Ke,numDirLights:R.directional.length,numPointLights:R.point.length,numSpotLights:R.spot.length,numSpotLightMaps:R.spotLightMap.length,numRectAreaLights:R.rectArea.length,numHemiLights:R.hemi.length,numDirLightShadows:R.directionalShadowMap.length,numPointLightShadows:R.pointShadowMap.length,numSpotLightShadows:R.spotShadowMap.length,numSpotLightShadowsWithMaps:R.numSpotLightShadowsWithMaps,numLightProbes:R.numLightProbes,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:M.dithering,shadowMapEnabled:i.shadowMap.enabled&&F.length>0,shadowMapType:i.shadowMap.type,toneMapping:nt,decodeVideoTexture:Nt&&M.map.isVideoTexture===!0&&wt.getTransfer(M.map.colorSpace)===It,decodeVideoTextureEmissive:yt&&M.emissiveMap.isVideoTexture===!0&&wt.getTransfer(M.emissiveMap.colorSpace)===It,premultipliedAlpha:M.premultipliedAlpha,doubleSided:M.side===gi,flipSided:M.side===qn,useDepthPacking:M.depthPacking>=0,depthPacking:M.depthPacking||0,index0AttributeName:M.index0AttributeName,extensionClipCullDistance:Xe&&M.extensions.clipCullDistance===!0&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(Xe&&M.extensions.multiDraw===!0||Ue)&&n.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:M.customProgramCacheKey()};return jt.vertexUv1s=d.has(1),jt.vertexUv2s=d.has(2),jt.vertexUv3s=d.has(3),d.clear(),jt}function f(M){const R=[];if(M.shaderID?R.push(M.shaderID):(R.push(M.customVertexShaderID),R.push(M.customFragmentShaderID)),M.defines!==void 0)for(const F in M.defines)R.push(F),R.push(M.defines[F]);return M.isRawShaderMaterial===!1&&(N(R,M),O(R,M),R.push(i.outputColorSpace)),R.push(M.customProgramCacheKey),R.join()}function N(M,R){M.push(R.precision),M.push(R.outputColorSpace),M.push(R.envMapMode),M.push(R.envMapCubeUVHeight),M.push(R.mapUv),M.push(R.alphaMapUv),M.push(R.lightMapUv),M.push(R.aoMapUv),M.push(R.bumpMapUv),M.push(R.normalMapUv),M.push(R.displacementMapUv),M.push(R.emissiveMapUv),M.push(R.metalnessMapUv),M.push(R.roughnessMapUv),M.push(R.anisotropyMapUv),M.push(R.clearcoatMapUv),M.push(R.clearcoatNormalMapUv),M.push(R.clearcoatRoughnessMapUv),M.push(R.iridescenceMapUv),M.push(R.iridescenceThicknessMapUv),M.push(R.sheenColorMapUv),M.push(R.sheenRoughnessMapUv),M.push(R.specularMapUv),M.push(R.specularColorMapUv),M.push(R.specularIntensityMapUv),M.push(R.transmissionMapUv),M.push(R.thicknessMapUv),M.push(R.combine),M.push(R.fogExp2),M.push(R.sizeAttenuation),M.push(R.morphTargetsCount),M.push(R.morphAttributeCount),M.push(R.numDirLights),M.push(R.numPointLights),M.push(R.numSpotLights),M.push(R.numSpotLightMaps),M.push(R.numHemiLights),M.push(R.numRectAreaLights),M.push(R.numDirLightShadows),M.push(R.numPointLightShadows),M.push(R.numSpotLightShadows),M.push(R.numSpotLightShadowsWithMaps),M.push(R.numLightProbes),M.push(R.shadowMapType),M.push(R.toneMapping),M.push(R.numClippingPlanes),M.push(R.numClipIntersection),M.push(R.depthPacking)}function O(M,R){a.disableAll(),R.supportsVertexTextures&&a.enable(0),R.instancing&&a.enable(1),R.instancingColor&&a.enable(2),R.instancingMorph&&a.enable(3),R.matcap&&a.enable(4),R.envMap&&a.enable(5),R.normalMapObjectSpace&&a.enable(6),R.normalMapTangentSpace&&a.enable(7),R.clearcoat&&a.enable(8),R.iridescence&&a.enable(9),R.alphaTest&&a.enable(10),R.vertexColors&&a.enable(11),R.vertexAlphas&&a.enable(12),R.vertexUv1s&&a.enable(13),R.vertexUv2s&&a.enable(14),R.vertexUv3s&&a.enable(15),R.vertexTangents&&a.enable(16),R.anisotropy&&a.enable(17),R.alphaHash&&a.enable(18),R.batching&&a.enable(19),R.dispersion&&a.enable(20),R.batchingColor&&a.enable(21),R.gradientMap&&a.enable(22),M.push(a.mask),a.disableAll(),R.fog&&a.enable(0),R.useFog&&a.enable(1),R.flatShading&&a.enable(2),R.logarithmicDepthBuffer&&a.enable(3),R.reverseDepthBuffer&&a.enable(4),R.skinning&&a.enable(5),R.morphTargets&&a.enable(6),R.morphNormals&&a.enable(7),R.morphColors&&a.enable(8),R.premultipliedAlpha&&a.enable(9),R.shadowMapEnabled&&a.enable(10),R.doubleSided&&a.enable(11),R.flipSided&&a.enable(12),R.useDepthPacking&&a.enable(13),R.dithering&&a.enable(14),R.transmission&&a.enable(15),R.sheen&&a.enable(16),R.opaque&&a.enable(17),R.pointsUvs&&a.enable(18),R.decodeVideoTexture&&a.enable(19),R.decodeVideoTextureEmissive&&a.enable(20),R.alphaToCoverage&&a.enable(21),M.push(a.mask)}function P(M){const R=v[M.type];let F;if(R){const K=wi[R];F=M7.clone(K.uniforms)}else F=M.uniforms;return F}function j(M,R){let F;for(let K=0,Q=c.length;K<Q;K++){const ee=c[K];if(ee.cacheKey===R){F=ee,++F.usedTimes;break}}return F===void 0&&(F=new A8(i,R,M,r),c.push(F)),F}function D(M){if(--M.usedTimes===0){const R=c.indexOf(M);c[R]=c[c.length-1],c.pop(),M.destroy()}}function V(M){l.remove(M)}function G(){l.dispose()}return{getParameters:m,getProgramCacheKey:f,getUniforms:P,acquireProgram:j,releaseProgram:D,releaseShaderCache:V,programs:c,dispose:G}}function j8(){let i=new WeakMap;function e(o){return i.has(o)}function t(o){let a=i.get(o);return a===void 0&&(a={},i.set(o,a)),a}function n(o){i.delete(o)}function s(o,a,l){i.get(o)[a]=l}function r(){i=new WeakMap}return{has:e,get:t,remove:n,update:s,dispose:r}}function V8(i,e){return i.groupOrder!==e.groupOrder?i.groupOrder-e.groupOrder:i.renderOrder!==e.renderOrder?i.renderOrder-e.renderOrder:i.material.id!==e.material.id?i.material.id-e.material.id:i.z!==e.z?i.z-e.z:i.id-e.id}function A1(i,e){return i.groupOrder!==e.groupOrder?i.groupOrder-e.groupOrder:i.renderOrder!==e.renderOrder?i.renderOrder-e.renderOrder:i.z!==e.z?e.z-i.z:i.id-e.id}function X1(){const i=[];let e=0;const t=[],n=[],s=[];function r(){e=0,t.length=0,n.length=0,s.length=0}function o(u,p,h,v,x,m){let f=i[e];return f===void 0?(f={id:u.id,object:u,geometry:p,material:h,groupOrder:v,renderOrder:u.renderOrder,z:x,group:m},i[e]=f):(f.id=u.id,f.object=u,f.geometry=p,f.material=h,f.groupOrder=v,f.renderOrder=u.renderOrder,f.z=x,f.group=m),e++,f}function a(u,p,h,v,x,m){const f=o(u,p,h,v,x,m);h.transmission>0?n.push(f):h.transparent===!0?s.push(f):t.push(f)}function l(u,p,h,v,x,m){const f=o(u,p,h,v,x,m);h.transmission>0?n.unshift(f):h.transparent===!0?s.unshift(f):t.unshift(f)}function d(u,p){t.length>1&&t.sort(u||V8),n.length>1&&n.sort(p||A1),s.length>1&&s.sort(p||A1)}function c(){for(let u=e,p=i.length;u<p;u++){const h=i[u];if(h.id===null)break;h.id=null,h.object=null,h.geometry=null,h.material=null,h.group=null}}return{opaque:t,transmissive:n,transparent:s,init:r,push:a,unshift:l,finish:c,sort:d}}function C8(){let i=new WeakMap;function e(n,s){const r=i.get(n);let o;return r===void 0?(o=new X1,i.set(n,[o])):s>=r.length?(o=new X1,r.push(o)):o=r[s],o}function t(){i=new WeakMap}return{get:e,dispose:t}}function F8(){const i={};return{get:function(e){if(i[e.id]!==void 0)return i[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new T,color:new tt};break;case"SpotLight":t={position:new T,direction:new T,color:new tt,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new T,color:new tt,distance:0,decay:0};break;case"HemisphereLight":t={direction:new T,skyColor:new tt,groundColor:new tt};break;case"RectAreaLight":t={color:new tt,position:new T,halfWidth:new T,halfHeight:new T};break}return i[e.id]=t,t}}}function q8(){const i={};return{get:function(e){if(i[e.id]!==void 0)return i[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new et};break;case"SpotLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new et};break;case"PointLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new et,shadowCameraNear:1,shadowCameraFar:1e3};break}return i[e.id]=t,t}}}let Y8=0;function G8(i,e){return(e.castShadow?2:0)-(i.castShadow?2:0)+(e.map?1:0)-(i.map?1:0)}function U8(i){const e=new F8,t=q8(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let d=0;d<9;d++)n.probe.push(new T);const s=new T,r=new Be,o=new Be;function a(d){let c=0,u=0,p=0;for(let M=0;M<9;M++)n.probe[M].set(0,0,0);let h=0,v=0,x=0,m=0,f=0,N=0,O=0,P=0,j=0,D=0,V=0;d.sort(G8);for(let M=0,R=d.length;M<R;M++){const F=d[M],K=F.color,Q=F.intensity,ee=F.distance,ue=F.shadow&&F.shadow.map?F.shadow.map.texture:null;if(F.isAmbientLight)c+=K.r*Q,u+=K.g*Q,p+=K.b*Q;else if(F.isLightProbe){for(let ne=0;ne<9;ne++)n.probe[ne].addScaledVector(F.sh.coefficients[ne],Q);V++}else if(F.isDirectionalLight){const ne=e.get(F);if(ne.color.copy(F.color).multiplyScalar(F.intensity),F.castShadow){const ve=F.shadow,te=t.get(F);te.shadowIntensity=ve.intensity,te.shadowBias=ve.bias,te.shadowNormalBias=ve.normalBias,te.shadowRadius=ve.radius,te.shadowMapSize=ve.mapSize,n.directionalShadow[h]=te,n.directionalShadowMap[h]=ue,n.directionalShadowMatrix[h]=F.shadow.matrix,N++}n.directional[h]=ne,h++}else if(F.isSpotLight){const ne=e.get(F);ne.position.setFromMatrixPosition(F.matrixWorld),ne.color.copy(K).multiplyScalar(Q),ne.distance=ee,ne.coneCos=Math.cos(F.angle),ne.penumbraCos=Math.cos(F.angle*(1-F.penumbra)),ne.decay=F.decay,n.spot[x]=ne;const ve=F.shadow;if(F.map&&(n.spotLightMap[j]=F.map,j++,ve.updateMatrices(F),F.castShadow&&D++),n.spotLightMatrix[x]=ve.matrix,F.castShadow){const te=t.get(F);te.shadowIntensity=ve.intensity,te.shadowBias=ve.bias,te.shadowNormalBias=ve.normalBias,te.shadowRadius=ve.radius,te.shadowMapSize=ve.mapSize,n.spotShadow[x]=te,n.spotShadowMap[x]=ue,P++}x++}else if(F.isRectAreaLight){const ne=e.get(F);ne.color.copy(K).multiplyScalar(Q),ne.halfWidth.set(F.width*.5,0,0),ne.halfHeight.set(0,F.height*.5,0),n.rectArea[m]=ne,m++}else if(F.isPointLight){const ne=e.get(F);if(ne.color.copy(F.color).multiplyScalar(F.intensity),ne.distance=F.distance,ne.decay=F.decay,F.castShadow){const ve=F.shadow,te=t.get(F);te.shadowIntensity=ve.intensity,te.shadowBias=ve.bias,te.shadowNormalBias=ve.normalBias,te.shadowRadius=ve.radius,te.shadowMapSize=ve.mapSize,te.shadowCameraNear=ve.camera.near,te.shadowCameraFar=ve.camera.far,n.pointShadow[v]=te,n.pointShadowMap[v]=ue,n.pointShadowMatrix[v]=F.shadow.matrix,O++}n.point[v]=ne,v++}else if(F.isHemisphereLight){const ne=e.get(F);ne.skyColor.copy(F.color).multiplyScalar(Q),ne.groundColor.copy(F.groundColor).multiplyScalar(Q),n.hemi[f]=ne,f++}}m>0&&(i.has("OES_texture_float_linear")===!0?(n.rectAreaLTC1=Ne.LTC_FLOAT_1,n.rectAreaLTC2=Ne.LTC_FLOAT_2):(n.rectAreaLTC1=Ne.LTC_HALF_1,n.rectAreaLTC2=Ne.LTC_HALF_2)),n.ambient[0]=c,n.ambient[1]=u,n.ambient[2]=p;const G=n.hash;(G.directionalLength!==h||G.pointLength!==v||G.spotLength!==x||G.rectAreaLength!==m||G.hemiLength!==f||G.numDirectionalShadows!==N||G.numPointShadows!==O||G.numSpotShadows!==P||G.numSpotMaps!==j||G.numLightProbes!==V)&&(n.directional.length=h,n.spot.length=x,n.rectArea.length=m,n.point.length=v,n.hemi.length=f,n.directionalShadow.length=N,n.directionalShadowMap.length=N,n.pointShadow.length=O,n.pointShadowMap.length=O,n.spotShadow.length=P,n.spotShadowMap.length=P,n.directionalShadowMatrix.length=N,n.pointShadowMatrix.length=O,n.spotLightMatrix.length=P+j-D,n.spotLightMap.length=j,n.numSpotLightShadowsWithMaps=D,n.numLightProbes=V,G.directionalLength=h,G.pointLength=v,G.spotLength=x,G.rectAreaLength=m,G.hemiLength=f,G.numDirectionalShadows=N,G.numPointShadows=O,G.numSpotShadows=P,G.numSpotMaps=j,G.numLightProbes=V,n.version=Y8++)}function l(d,c){let u=0,p=0,h=0,v=0,x=0;const m=c.matrixWorldInverse;for(let f=0,N=d.length;f<N;f++){const O=d[f];if(O.isDirectionalLight){const P=n.directional[u];P.direction.setFromMatrixPosition(O.matrixWorld),s.setFromMatrixPosition(O.target.matrixWorld),P.direction.sub(s),P.direction.transformDirection(m),u++}else if(O.isSpotLight){const P=n.spot[h];P.position.setFromMatrixPosition(O.matrixWorld),P.position.applyMatrix4(m),P.direction.setFromMatrixPosition(O.matrixWorld),s.setFromMatrixPosition(O.target.matrixWorld),P.direction.sub(s),P.direction.transformDirection(m),h++}else if(O.isRectAreaLight){const P=n.rectArea[v];P.position.setFromMatrixPosition(O.matrixWorld),P.position.applyMatrix4(m),o.identity(),r.copy(O.matrixWorld),r.premultiply(m),o.extractRotation(r),P.halfWidth.set(O.width*.5,0,0),P.halfHeight.set(0,O.height*.5,0),P.halfWidth.applyMatrix4(o),P.halfHeight.applyMatrix4(o),v++}else if(O.isPointLight){const P=n.point[p];P.position.setFromMatrixPosition(O.matrixWorld),P.position.applyMatrix4(m),p++}else if(O.isHemisphereLight){const P=n.hemi[x];P.direction.setFromMatrixPosition(O.matrixWorld),P.direction.transformDirection(m),x++}}}return{setup:a,setupView:l,state:n}}function I1(i){const e=new U8(i),t=[],n=[];function s(c){d.camera=c,t.length=0,n.length=0}function r(c){t.push(c)}function o(c){n.push(c)}function a(){e.setup(t)}function l(c){e.setupView(t,c)}const d={lightsArray:t,shadowsArray:n,camera:null,lights:e,transmissionRenderTarget:{}};return{init:s,state:d,setupLights:a,setupLightsView:l,pushLight:r,pushShadow:o}}function Z8(i){let e=new WeakMap;function t(s,r=0){const o=e.get(s);let a;return o===void 0?(a=new I1(i),e.set(s,[a])):r>=o.length?(a=new I1(i),o.push(a)):a=o[r],a}function n(){e=new WeakMap}return{get:t,dispose:n}}const k8=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,J8=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function B8(i,e,t){let n=new Bc;const s=new et,r=new et,o=new Rt,a=new U7({depthPacking:Eh}),l=new Z7,d={},c=t.maxTextureSize,u={[Ui]:qn,[qn]:Ui,[gi]:gi},p=new fs({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new et},radius:{value:4}},vertexShader:k8,fragmentShader:J8}),h=p.clone();h.defines.HORIZONTAL_PASS=1;const v=new zn;v.setAttribute("position",new Dn(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const x=new Kt(v,p),m=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=b2;let f=this.type;this.render=function(D,V,G){if(m.enabled===!1||m.autoUpdate===!1&&m.needsUpdate===!1||D.length===0)return;const M=i.getRenderTarget(),R=i.getActiveCubeFace(),F=i.getActiveMipmapLevel(),K=i.state;K.setBlending(us),K.buffers.color.setClear(1,1,1,1),K.buffers.depth.setTest(!0),K.setScissorTest(!1);const Q=f!==vi&&this.type===vi,ee=f===vi&&this.type!==vi;for(let ue=0,ne=D.length;ue<ne;ue++){const ve=D[ue],te=ve.shadow;if(te===void 0){console.warn("THREE.WebGLShadowMap:",ve,"has no shadow.");continue}if(te.autoUpdate===!1&&te.needsUpdate===!1)continue;s.copy(te.mapSize);const Te=te.getFrameExtents();if(s.multiply(Te),r.copy(te.mapSize),(s.x>c||s.y>c)&&(s.x>c&&(r.x=Math.floor(c/Te.x),s.x=r.x*Te.x,te.mapSize.x=r.x),s.y>c&&(r.y=Math.floor(c/Te.y),s.y=r.y*Te.y,te.mapSize.y=r.y)),te.map===null||Q===!0||ee===!0){const je=this.type!==vi?{minFilter:In,magFilter:In}:{};te.map!==null&&te.map.dispose(),te.map=new zs(s.x,s.y,je),te.map.texture.name=ve.name+".shadowMap",te.camera.updateProjectionMatrix()}i.setRenderTarget(te.map),i.clear();const Le=te.getViewportCount();for(let je=0;je<Le;je++){const Ke=te.getViewport(je);o.set(r.x*Ke.x,r.y*Ke.y,r.x*Ke.z,r.y*Ke.w),K.viewport(o),te.updateMatrices(ve,je),n=te.getFrustum(),P(V,G,te.camera,ve,this.type)}te.isPointLightShadow!==!0&&this.type===vi&&N(te,G),te.needsUpdate=!1}f=this.type,m.needsUpdate=!1,i.setRenderTarget(M,R,F)};function N(D,V){const G=e.update(x);p.defines.VSM_SAMPLES!==D.blurSamples&&(p.defines.VSM_SAMPLES=D.blurSamples,h.defines.VSM_SAMPLES=D.blurSamples,p.needsUpdate=!0,h.needsUpdate=!0),D.mapPass===null&&(D.mapPass=new zs(s.x,s.y)),p.uniforms.shadow_pass.value=D.map.texture,p.uniforms.resolution.value=D.mapSize,p.uniforms.radius.value=D.radius,i.setRenderTarget(D.mapPass),i.clear(),i.renderBufferDirect(V,null,G,p,x,null),h.uniforms.shadow_pass.value=D.mapPass.texture,h.uniforms.resolution.value=D.mapSize,h.uniforms.radius.value=D.radius,i.setRenderTarget(D.map),i.clear(),i.renderBufferDirect(V,null,G,h,x,null)}function O(D,V,G,M){let R=null;const F=G.isPointLight===!0?D.customDistanceMaterial:D.customDepthMaterial;if(F!==void 0)R=F;else if(R=G.isPointLight===!0?l:a,i.localClippingEnabled&&V.clipShadows===!0&&Array.isArray(V.clippingPlanes)&&V.clippingPlanes.length!==0||V.displacementMap&&V.displacementScale!==0||V.alphaMap&&V.alphaTest>0||V.map&&V.alphaTest>0||V.alphaToCoverage===!0){const K=R.uuid,Q=V.uuid;let ee=d[K];ee===void 0&&(ee={},d[K]=ee);let ue=ee[Q];ue===void 0&&(ue=R.clone(),ee[Q]=ue,V.addEventListener("dispose",j)),R=ue}if(R.visible=V.visible,R.wireframe=V.wireframe,M===vi?R.side=V.shadowSide!==null?V.shadowSide:V.side:R.side=V.shadowSide!==null?V.shadowSide:u[V.side],R.alphaMap=V.alphaMap,R.alphaTest=V.alphaToCoverage===!0?.5:V.alphaTest,R.map=V.map,R.clipShadows=V.clipShadows,R.clippingPlanes=V.clippingPlanes,R.clipIntersection=V.clipIntersection,R.displacementMap=V.displacementMap,R.displacementScale=V.displacementScale,R.displacementBias=V.displacementBias,R.wireframeLinewidth=V.wireframeLinewidth,R.linewidth=V.linewidth,G.isPointLight===!0&&R.isMeshDistanceMaterial===!0){const K=i.properties.get(R);K.light=G}return R}function P(D,V,G,M,R){if(D.visible===!1)return;if(D.layers.test(V.layers)&&(D.isMesh||D.isLine||D.isPoints)&&(D.castShadow||D.receiveShadow&&R===vi)&&(!D.frustumCulled||n.intersectsObject(D))){D.modelViewMatrix.multiplyMatrices(G.matrixWorldInverse,D.matrixWorld);const Q=e.update(D),ee=D.material;if(Array.isArray(ee)){const ue=Q.groups;for(let ne=0,ve=ue.length;ne<ve;ne++){const te=ue[ne],Te=ee[te.materialIndex];if(Te&&Te.visible){const Le=O(D,Te,M,R);D.onBeforeShadow(i,D,V,G,Q,Le,te),i.renderBufferDirect(G,null,Q,Le,D,te),D.onAfterShadow(i,D,V,G,Q,Le,te)}}}else if(ee.visible){const ue=O(D,ee,M,R);D.onBeforeShadow(i,D,V,G,Q,ue,null),i.renderBufferDirect(G,null,Q,ue,D,null),D.onAfterShadow(i,D,V,G,Q,ue,null)}}const K=D.children;for(let Q=0,ee=K.length;Q<ee;Q++)P(K[Q],V,G,M,R)}function j(D){D.target.removeEventListener("dispose",j);for(const G in d){const M=d[G],R=D.target.uuid;R in M&&(M[R].dispose(),delete M[R])}}}const K8={[cd]:ud,[pd]:md,[fd]:bd,[gr]:hd,[ud]:cd,[md]:pd,[bd]:fd,[hd]:gr};function Q8(i,e){function t(){let Y=!1;const _=new Rt;let he=null;const He=new Rt(0,0,0,0);return{setMask:function(be){he!==be&&!Y&&(i.colorMask(be,be,be,be),he=be)},setLocked:function(be){Y=be},setClear:function(be,de,Xe,nt,jt){jt===!0&&(be*=nt,de*=nt,Xe*=nt),_.set(be,de,Xe,nt),He.equals(_)===!1&&(i.clearColor(be,de,Xe,nt),He.copy(_))},reset:function(){Y=!1,he=null,He.set(-1,0,0,0)}}}function n(){let Y=!1,_=!1,he=null,He=null,be=null;return{setReversed:function(de){if(_!==de){const Xe=e.get("EXT_clip_control");de?Xe.clipControlEXT(Xe.LOWER_LEFT_EXT,Xe.ZERO_TO_ONE_EXT):Xe.clipControlEXT(Xe.LOWER_LEFT_EXT,Xe.NEGATIVE_ONE_TO_ONE_EXT),_=de;const nt=be;be=null,this.setClear(nt)}},getReversed:function(){return _},setTest:function(de){de?Se(i.DEPTH_TEST):Ae(i.DEPTH_TEST)},setMask:function(de){he!==de&&!Y&&(i.depthMask(de),he=de)},setFunc:function(de){if(_&&(de=K8[de]),He!==de){switch(de){case cd:i.depthFunc(i.NEVER);break;case ud:i.depthFunc(i.ALWAYS);break;case pd:i.depthFunc(i.LESS);break;case gr:i.depthFunc(i.LEQUAL);break;case fd:i.depthFunc(i.EQUAL);break;case hd:i.depthFunc(i.GEQUAL);break;case md:i.depthFunc(i.GREATER);break;case bd:i.depthFunc(i.NOTEQUAL);break;default:i.depthFunc(i.LEQUAL)}He=de}},setLocked:function(de){Y=de},setClear:function(de){be!==de&&(_&&(de=1-de),i.clearDepth(de),be=de)},reset:function(){Y=!1,he=null,He=null,be=null,_=!1}}}function s(){let Y=!1,_=null,he=null,He=null,be=null,de=null,Xe=null,nt=null,jt=null;return{setTest:function(Pt){Y||(Pt?Se(i.STENCIL_TEST):Ae(i.STENCIL_TEST))},setMask:function(Pt){_!==Pt&&!Y&&(i.stencilMask(Pt),_=Pt)},setFunc:function(Pt,Yn,ni){(he!==Pt||He!==Yn||be!==ni)&&(i.stencilFunc(Pt,Yn,ni),he=Pt,He=Yn,be=ni)},setOp:function(Pt,Yn,ni){(de!==Pt||Xe!==Yn||nt!==ni)&&(i.stencilOp(Pt,Yn,ni),de=Pt,Xe=Yn,nt=ni)},setLocked:function(Pt){Y=Pt},setClear:function(Pt){jt!==Pt&&(i.clearStencil(Pt),jt=Pt)},reset:function(){Y=!1,_=null,he=null,He=null,be=null,de=null,Xe=null,nt=null,jt=null}}}const r=new t,o=new n,a=new s,l=new WeakMap,d=new WeakMap;let c={},u={},p=new WeakMap,h=[],v=null,x=!1,m=null,f=null,N=null,O=null,P=null,j=null,D=null,V=new tt(0,0,0),G=0,M=!1,R=null,F=null,K=null,Q=null,ee=null;const ue=i.getParameter(i.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let ne=!1,ve=0;const te=i.getParameter(i.VERSION);te.indexOf("WebGL")!==-1?(ve=parseFloat(/^WebGL (\d)/.exec(te)[1]),ne=ve>=1):te.indexOf("OpenGL ES")!==-1&&(ve=parseFloat(/^OpenGL ES (\d)/.exec(te)[1]),ne=ve>=2);let Te=null,Le={};const je=i.getParameter(i.SCISSOR_BOX),Ke=i.getParameter(i.VIEWPORT),ut=new Rt().fromArray(je),se=new Rt().fromArray(Ke);function ge(Y,_,he,He){const be=new Uint8Array(4),de=i.createTexture();i.bindTexture(Y,de),i.texParameteri(Y,i.TEXTURE_MIN_FILTER,i.NEAREST),i.texParameteri(Y,i.TEXTURE_MAG_FILTER,i.NEAREST);for(let Xe=0;Xe<he;Xe++)Y===i.TEXTURE_3D||Y===i.TEXTURE_2D_ARRAY?i.texImage3D(_,0,i.RGBA,1,1,He,0,i.RGBA,i.UNSIGNED_BYTE,be):i.texImage2D(_+Xe,0,i.RGBA,1,1,0,i.RGBA,i.UNSIGNED_BYTE,be);return de}const xe={};xe[i.TEXTURE_2D]=ge(i.TEXTURE_2D,i.TEXTURE_2D,1),xe[i.TEXTURE_CUBE_MAP]=ge(i.TEXTURE_CUBE_MAP,i.TEXTURE_CUBE_MAP_POSITIVE_X,6),xe[i.TEXTURE_2D_ARRAY]=ge(i.TEXTURE_2D_ARRAY,i.TEXTURE_2D_ARRAY,1,1),xe[i.TEXTURE_3D]=ge(i.TEXTURE_3D,i.TEXTURE_3D,1,1),r.setClear(0,0,0,1),o.setClear(1),a.setClear(0),Se(i.DEPTH_TEST),o.setFunc(gr),gt(!1),Et(mu),Se(i.CULL_FACE),C(us);function Se(Y){c[Y]!==!0&&(i.enable(Y),c[Y]=!0)}function Ae(Y){c[Y]!==!1&&(i.disable(Y),c[Y]=!1)}function mt(Y,_){return u[Y]!==_?(i.bindFramebuffer(Y,_),u[Y]=_,Y===i.DRAW_FRAMEBUFFER&&(u[i.FRAMEBUFFER]=_),Y===i.FRAMEBUFFER&&(u[i.DRAW_FRAMEBUFFER]=_),!0):!1}function Ue(Y,_){let he=h,He=!1;if(Y){he=p.get(_),he===void 0&&(he=[],p.set(_,he));const be=Y.textures;if(he.length!==be.length||he[0]!==i.COLOR_ATTACHMENT0){for(let de=0,Xe=be.length;de<Xe;de++)he[de]=i.COLOR_ATTACHMENT0+de;he.length=be.length,He=!0}}else he[0]!==i.BACK&&(he[0]=i.BACK,He=!0);He&&i.drawBuffers(he)}function Nt(Y){return v!==Y?(i.useProgram(Y),v=Y,!0):!1}const Ht={[Ls]:i.FUNC_ADD,[ih]:i.FUNC_SUBTRACT,[sh]:i.FUNC_REVERSE_SUBTRACT};Ht[rh]=i.MIN,Ht[oh]=i.MAX;const ft={[ah]:i.ZERO,[lh]:i.ONE,[dh]:i.SRC_COLOR,[ld]:i.SRC_ALPHA,[mh]:i.SRC_ALPHA_SATURATE,[fh]:i.DST_COLOR,[uh]:i.DST_ALPHA,[ch]:i.ONE_MINUS_SRC_COLOR,[dd]:i.ONE_MINUS_SRC_ALPHA,[hh]:i.ONE_MINUS_DST_COLOR,[ph]:i.ONE_MINUS_DST_ALPHA,[bh]:i.CONSTANT_COLOR,[vh]:i.ONE_MINUS_CONSTANT_COLOR,[yh]:i.CONSTANT_ALPHA,[wh]:i.ONE_MINUS_CONSTANT_ALPHA};function C(Y,_,he,He,be,de,Xe,nt,jt,Pt){if(Y===us){x===!0&&(Ae(i.BLEND),x=!1);return}if(x===!1&&(Se(i.BLEND),x=!0),Y!==nh){if(Y!==m||Pt!==M){if((f!==Ls||P!==Ls)&&(i.blendEquation(i.FUNC_ADD),f=Ls,P=Ls),Pt)switch(Y){case mr:i.blendFuncSeparate(i.ONE,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE_MINUS_SRC_ALPHA);break;case bu:i.blendFunc(i.ONE,i.ONE);break;case vu:i.blendFuncSeparate(i.ZERO,i.ONE_MINUS_SRC_COLOR,i.ZERO,i.ONE);break;case yu:i.blendFuncSeparate(i.DST_COLOR,i.ONE_MINUS_SRC_ALPHA,i.ZERO,i.ONE);break;default:console.error("THREE.WebGLState: Invalid blending: ",Y);break}else switch(Y){case mr:i.blendFuncSeparate(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE_MINUS_SRC_ALPHA);break;case bu:i.blendFuncSeparate(i.SRC_ALPHA,i.ONE,i.ONE,i.ONE);break;case vu:console.error("THREE.WebGLState: SubtractiveBlending requires material.premultipliedAlpha = true");break;case yu:console.error("THREE.WebGLState: MultiplyBlending requires material.premultipliedAlpha = true");break;default:console.error("THREE.WebGLState: Invalid blending: ",Y);break}N=null,O=null,j=null,D=null,V.set(0,0,0),G=0,m=Y,M=Pt}return}be=be||_,de=de||he,Xe=Xe||He,(_!==f||be!==P)&&(i.blendEquationSeparate(Ht[_],Ht[be]),f=_,P=be),(he!==N||He!==O||de!==j||Xe!==D)&&(i.blendFuncSeparate(ft[he],ft[He],ft[de],ft[Xe]),N=he,O=He,j=de,D=Xe),(nt.equals(V)===!1||jt!==G)&&(i.blendColor(nt.r,nt.g,nt.b,jt),V.copy(nt),G=jt),m=Y,M=!1}function cn(Y,_){Y.side===gi?Ae(i.CULL_FACE):Se(i.CULL_FACE);let he=Y.side===qn;_&&(he=!he),gt(he),Y.blending===mr&&Y.transparent===!1?C(us):C(Y.blending,Y.blendEquation,Y.blendSrc,Y.blendDst,Y.blendEquationAlpha,Y.blendSrcAlpha,Y.blendDstAlpha,Y.blendColor,Y.blendAlpha,Y.premultipliedAlpha),o.setFunc(Y.depthFunc),o.setTest(Y.depthTest),o.setMask(Y.depthWrite),r.setMask(Y.colorWrite);const He=Y.stencilWrite;a.setTest(He),He&&(a.setMask(Y.stencilWriteMask),a.setFunc(Y.stencilFunc,Y.stencilRef,Y.stencilFuncMask),a.setOp(Y.stencilFail,Y.stencilZFail,Y.stencilZPass)),yt(Y.polygonOffset,Y.polygonOffsetFactor,Y.polygonOffsetUnits),Y.alphaToCoverage===!0?Se(i.SAMPLE_ALPHA_TO_COVERAGE):Ae(i.SAMPLE_ALPHA_TO_COVERAGE)}function gt(Y){R!==Y&&(Y?i.frontFace(i.CW):i.frontFace(i.CCW),R=Y)}function Et(Y){Y!==$3?(Se(i.CULL_FACE),Y!==F&&(Y===mu?i.cullFace(i.BACK):Y===eh?i.cullFace(i.FRONT):i.cullFace(i.FRONT_AND_BACK))):Ae(i.CULL_FACE),F=Y}function Ve(Y){Y!==K&&(ne&&i.lineWidth(Y),K=Y)}function yt(Y,_,he){Y?(Se(i.POLYGON_OFFSET_FILL),(Q!==_||ee!==he)&&(i.polygonOffset(_,he),Q=_,ee=he)):Ae(i.POLYGON_OFFSET_FILL)}function Ge(Y){Y?Se(i.SCISSOR_TEST):Ae(i.SCISSOR_TEST)}function it(Y){Y===void 0&&(Y=i.TEXTURE0+ue-1),Te!==Y&&(i.activeTexture(Y),Te=Y)}function Qt(Y,_,he){he===void 0&&(Te===null?he=i.TEXTURE0+ue-1:he=Te);let He=Le[he];He===void 0&&(He={type:void 0,texture:void 0},Le[he]=He),(He.type!==Y||He.texture!==_)&&(Te!==he&&(i.activeTexture(he),Te=he),i.bindTexture(Y,_||xe[Y]),He.type=Y,He.texture=_)}function A(){const Y=Le[Te];Y!==void 0&&Y.type!==void 0&&(i.bindTexture(Y.type,null),Y.type=void 0,Y.texture=void 0)}function S(){try{i.compressedTexImage2D(...arguments)}catch(Y){console.error("THREE.WebGLState:",Y)}}function B(){try{i.compressedTexImage3D(...arguments)}catch(Y){console.error("THREE.WebGLState:",Y)}}function re(){try{i.texSubImage2D(...arguments)}catch(Y){console.error("THREE.WebGLState:",Y)}}function pe(){try{i.texSubImage3D(...arguments)}catch(Y){console.error("THREE.WebGLState:",Y)}}function ie(){try{i.compressedTexSubImage2D(...arguments)}catch(Y){console.error("THREE.WebGLState:",Y)}}function Ie(){try{i.compressedTexSubImage3D(...arguments)}catch(Y){console.error("THREE.WebGLState:",Y)}}function Re(){try{i.texStorage2D(...arguments)}catch(Y){console.error("THREE.WebGLState:",Y)}}function De(){try{i.texStorage3D(...arguments)}catch(Y){console.error("THREE.WebGLState:",Y)}}function Fe(){try{i.texImage2D(...arguments)}catch(Y){console.error("THREE.WebGLState:",Y)}}function le(){try{i.texImage3D(...arguments)}catch(Y){console.error("THREE.WebGLState:",Y)}}function Pe(Y){ut.equals(Y)===!1&&(i.scissor(Y.x,Y.y,Y.z,Y.w),ut.copy(Y))}function Ze(Y){se.equals(Y)===!1&&(i.viewport(Y.x,Y.y,Y.z,Y.w),se.copy(Y))}function Ce(Y,_){let he=d.get(_);he===void 0&&(he=new WeakMap,d.set(_,he));let He=he.get(Y);He===void 0&&(He=i.getUniformBlockIndex(_,Y.name),he.set(Y,He))}function ye(Y,_){const He=d.get(_).get(Y);l.get(_)!==He&&(i.uniformBlockBinding(_,He,Y.__bindingPointIndex),l.set(_,He))}function We(){i.disable(i.BLEND),i.disable(i.CULL_FACE),i.disable(i.DEPTH_TEST),i.disable(i.POLYGON_OFFSET_FILL),i.disable(i.SCISSOR_TEST),i.disable(i.STENCIL_TEST),i.disable(i.SAMPLE_ALPHA_TO_COVERAGE),i.blendEquation(i.FUNC_ADD),i.blendFunc(i.ONE,i.ZERO),i.blendFuncSeparate(i.ONE,i.ZERO,i.ONE,i.ZERO),i.blendColor(0,0,0,0),i.colorMask(!0,!0,!0,!0),i.clearColor(0,0,0,0),i.depthMask(!0),i.depthFunc(i.LESS),o.setReversed(!1),i.clearDepth(1),i.stencilMask(4294967295),i.stencilFunc(i.ALWAYS,0,4294967295),i.stencilOp(i.KEEP,i.KEEP,i.KEEP),i.clearStencil(0),i.cullFace(i.BACK),i.frontFace(i.CCW),i.polygonOffset(0,0),i.activeTexture(i.TEXTURE0),i.bindFramebuffer(i.FRAMEBUFFER,null),i.bindFramebuffer(i.DRAW_FRAMEBUFFER,null),i.bindFramebuffer(i.READ_FRAMEBUFFER,null),i.useProgram(null),i.lineWidth(1),i.scissor(0,0,i.canvas.width,i.canvas.height),i.viewport(0,0,i.canvas.width,i.canvas.height),c={},Te=null,Le={},u={},p=new WeakMap,h=[],v=null,x=!1,m=null,f=null,N=null,O=null,P=null,j=null,D=null,V=new tt(0,0,0),G=0,M=!1,R=null,F=null,K=null,Q=null,ee=null,ut.set(0,0,i.canvas.width,i.canvas.height),se.set(0,0,i.canvas.width,i.canvas.height),r.reset(),o.reset(),a.reset()}return{buffers:{color:r,depth:o,stencil:a},enable:Se,disable:Ae,bindFramebuffer:mt,drawBuffers:Ue,useProgram:Nt,setBlending:C,setMaterial:cn,setFlipSided:gt,setCullFace:Et,setLineWidth:Ve,setPolygonOffset:yt,setScissorTest:Ge,activeTexture:it,bindTexture:Qt,unbindTexture:A,compressedTexImage2D:S,compressedTexImage3D:B,texImage2D:Fe,texImage3D:le,updateUBOMapping:Ce,uniformBlockBinding:ye,texStorage2D:Re,texStorage3D:De,texSubImage2D:re,texSubImage3D:pe,compressedTexSubImage2D:ie,compressedTexSubImage3D:Ie,scissor:Pe,viewport:Ze,reset:We}}function _8(i,e,t,n,s,r,o){const a=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,l=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),d=new et,c=new WeakMap;let u;const p=new WeakMap;let h=!1;try{h=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function v(A,S){return h?new OffscreenCanvas(A,S):bo("canvas")}function x(A,S,B){let re=1;const pe=Qt(A);if((pe.width>B||pe.height>B)&&(re=B/Math.max(pe.width,pe.height)),re<1)if(typeof HTMLImageElement<"u"&&A instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&A instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&A instanceof ImageBitmap||typeof VideoFrame<"u"&&A instanceof VideoFrame){const ie=Math.floor(re*pe.width),Ie=Math.floor(re*pe.height);u===void 0&&(u=v(ie,Ie));const Re=S?v(ie,Ie):u;return Re.width=ie,Re.height=Ie,Re.getContext("2d").drawImage(A,0,0,ie,Ie),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+pe.width+"x"+pe.height+") to ("+ie+"x"+Ie+")."),Re}else return"data"in A&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+pe.width+"x"+pe.height+")."),A;return A}function m(A){return A.generateMipmaps}function f(A){i.generateMipmap(A)}function N(A){return A.isWebGLCubeRenderTarget?i.TEXTURE_CUBE_MAP:A.isWebGL3DRenderTarget?i.TEXTURE_3D:A.isWebGLArrayRenderTarget||A.isCompressedArrayTexture?i.TEXTURE_2D_ARRAY:i.TEXTURE_2D}function O(A,S,B,re,pe=!1){if(A!==null){if(i[A]!==void 0)return i[A];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+A+"'")}let ie=S;if(S===i.RED&&(B===i.FLOAT&&(ie=i.R32F),B===i.HALF_FLOAT&&(ie=i.R16F),B===i.UNSIGNED_BYTE&&(ie=i.R8)),S===i.RED_INTEGER&&(B===i.UNSIGNED_BYTE&&(ie=i.R8UI),B===i.UNSIGNED_SHORT&&(ie=i.R16UI),B===i.UNSIGNED_INT&&(ie=i.R32UI),B===i.BYTE&&(ie=i.R8I),B===i.SHORT&&(ie=i.R16I),B===i.INT&&(ie=i.R32I)),S===i.RG&&(B===i.FLOAT&&(ie=i.RG32F),B===i.HALF_FLOAT&&(ie=i.RG16F),B===i.UNSIGNED_BYTE&&(ie=i.RG8)),S===i.RG_INTEGER&&(B===i.UNSIGNED_BYTE&&(ie=i.RG8UI),B===i.UNSIGNED_SHORT&&(ie=i.RG16UI),B===i.UNSIGNED_INT&&(ie=i.RG32UI),B===i.BYTE&&(ie=i.RG8I),B===i.SHORT&&(ie=i.RG16I),B===i.INT&&(ie=i.RG32I)),S===i.RGB_INTEGER&&(B===i.UNSIGNED_BYTE&&(ie=i.RGB8UI),B===i.UNSIGNED_SHORT&&(ie=i.RGB16UI),B===i.UNSIGNED_INT&&(ie=i.RGB32UI),B===i.BYTE&&(ie=i.RGB8I),B===i.SHORT&&(ie=i.RGB16I),B===i.INT&&(ie=i.RGB32I)),S===i.RGBA_INTEGER&&(B===i.UNSIGNED_BYTE&&(ie=i.RGBA8UI),B===i.UNSIGNED_SHORT&&(ie=i.RGBA16UI),B===i.UNSIGNED_INT&&(ie=i.RGBA32UI),B===i.BYTE&&(ie=i.RGBA8I),B===i.SHORT&&(ie=i.RGBA16I),B===i.INT&&(ie=i.RGBA32I)),S===i.RGB&&B===i.UNSIGNED_INT_5_9_9_9_REV&&(ie=i.RGB9_E5),S===i.RGBA){const Ie=pe?Ya:wt.getTransfer(re);B===i.FLOAT&&(ie=i.RGBA32F),B===i.HALF_FLOAT&&(ie=i.RGBA16F),B===i.UNSIGNED_BYTE&&(ie=Ie===It?i.SRGB8_ALPHA8:i.RGBA8),B===i.UNSIGNED_SHORT_4_4_4_4&&(ie=i.RGBA4),B===i.UNSIGNED_SHORT_5_5_5_1&&(ie=i.RGB5_A1)}return(ie===i.R16F||ie===i.R32F||ie===i.RG16F||ie===i.RG32F||ie===i.RGBA16F||ie===i.RGBA32F)&&e.get("EXT_color_buffer_float"),ie}function P(A,S){let B;return A?S===null||S===Os||S===uo?B=i.DEPTH24_STENCIL8:S===Fn?B=i.DEPTH32F_STENCIL8:S===co&&(B=i.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):S===null||S===Os||S===uo?B=i.DEPTH_COMPONENT24:S===Fn?B=i.DEPTH_COMPONENT32F:S===co&&(B=i.DEPTH_COMPONENT16),B}function j(A,S){return m(A)===!0||A.isFramebufferTexture&&A.minFilter!==In&&A.minFilter!==wn?Math.log2(Math.max(S.width,S.height))+1:A.mipmaps!==void 0&&A.mipmaps.length>0?A.mipmaps.length:A.isCompressedTexture&&Array.isArray(A.image)?S.mipmaps.length:1}function D(A){const S=A.target;S.removeEventListener("dispose",D),G(S),S.isVideoTexture&&c.delete(S)}function V(A){const S=A.target;S.removeEventListener("dispose",V),R(S)}function G(A){const S=n.get(A);if(S.__webglInit===void 0)return;const B=A.source,re=p.get(B);if(re){const pe=re[S.__cacheKey];pe.usedTimes--,pe.usedTimes===0&&M(A),Object.keys(re).length===0&&p.delete(B)}n.remove(A)}function M(A){const S=n.get(A);i.deleteTexture(S.__webglTexture);const B=A.source,re=p.get(B);delete re[S.__cacheKey],o.memory.textures--}function R(A){const S=n.get(A);if(A.depthTexture&&(A.depthTexture.dispose(),n.remove(A.depthTexture)),A.isWebGLCubeRenderTarget)for(let re=0;re<6;re++){if(Array.isArray(S.__webglFramebuffer[re]))for(let pe=0;pe<S.__webglFramebuffer[re].length;pe++)i.deleteFramebuffer(S.__webglFramebuffer[re][pe]);else i.deleteFramebuffer(S.__webglFramebuffer[re]);S.__webglDepthbuffer&&i.deleteRenderbuffer(S.__webglDepthbuffer[re])}else{if(Array.isArray(S.__webglFramebuffer))for(let re=0;re<S.__webglFramebuffer.length;re++)i.deleteFramebuffer(S.__webglFramebuffer[re]);else i.deleteFramebuffer(S.__webglFramebuffer);if(S.__webglDepthbuffer&&i.deleteRenderbuffer(S.__webglDepthbuffer),S.__webglMultisampledFramebuffer&&i.deleteFramebuffer(S.__webglMultisampledFramebuffer),S.__webglColorRenderbuffer)for(let re=0;re<S.__webglColorRenderbuffer.length;re++)S.__webglColorRenderbuffer[re]&&i.deleteRenderbuffer(S.__webglColorRenderbuffer[re]);S.__webglDepthRenderbuffer&&i.deleteRenderbuffer(S.__webglDepthRenderbuffer)}const B=A.textures;for(let re=0,pe=B.length;re<pe;re++){const ie=n.get(B[re]);ie.__webglTexture&&(i.deleteTexture(ie.__webglTexture),o.memory.textures--),n.remove(B[re])}n.remove(A)}let F=0;function K(){F=0}function Q(){const A=F;return A>=s.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+A+" texture units while this GPU supports only "+s.maxTextures),F+=1,A}function ee(A){const S=[];return S.push(A.wrapS),S.push(A.wrapT),S.push(A.wrapR||0),S.push(A.magFilter),S.push(A.minFilter),S.push(A.anisotropy),S.push(A.internalFormat),S.push(A.format),S.push(A.type),S.push(A.generateMipmaps),S.push(A.premultiplyAlpha),S.push(A.flipY),S.push(A.unpackAlignment),S.push(A.colorSpace),S.join()}function ue(A,S){const B=n.get(A);if(A.isVideoTexture&&Ge(A),A.isRenderTargetTexture===!1&&A.version>0&&B.__version!==A.version){const re=A.image;if(re===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(re.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{xe(B,A,S);return}}t.bindTexture(i.TEXTURE_2D,B.__webglTexture,i.TEXTURE0+S)}function ne(A,S){const B=n.get(A);if(A.version>0&&B.__version!==A.version){xe(B,A,S);return}t.bindTexture(i.TEXTURE_2D_ARRAY,B.__webglTexture,i.TEXTURE0+S)}function ve(A,S){const B=n.get(A);if(A.version>0&&B.__version!==A.version){xe(B,A,S);return}t.bindTexture(i.TEXTURE_3D,B.__webglTexture,i.TEXTURE0+S)}function te(A,S){const B=n.get(A);if(A.version>0&&B.__version!==A.version){Se(B,A,S);return}t.bindTexture(i.TEXTURE_CUBE_MAP,B.__webglTexture,i.TEXTURE0+S)}const Te={[Sr]:i.REPEAT,[xi]:i.CLAMP_TO_EDGE,[qa]:i.MIRRORED_REPEAT},Le={[In]:i.NEAREST,[w2]:i.NEAREST_MIPMAP_NEAREST,[no]:i.NEAREST_MIPMAP_LINEAR,[wn]:i.LINEAR,[Ea]:i.LINEAR_MIPMAP_NEAREST,[Ti]:i.LINEAR_MIPMAP_LINEAR},je={[Xh]:i.NEVER,[Ch]:i.ALWAYS,[Ih]:i.LESS,[M2]:i.LEQUAL,[Dh]:i.EQUAL,[Vh]:i.GEQUAL,[Wh]:i.GREATER,[jh]:i.NOTEQUAL};function Ke(A,S){if(S.type===Fn&&e.has("OES_texture_float_linear")===!1&&(S.magFilter===wn||S.magFilter===Ea||S.magFilter===no||S.magFilter===Ti||S.minFilter===wn||S.minFilter===Ea||S.minFilter===no||S.minFilter===Ti)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),i.texParameteri(A,i.TEXTURE_WRAP_S,Te[S.wrapS]),i.texParameteri(A,i.TEXTURE_WRAP_T,Te[S.wrapT]),(A===i.TEXTURE_3D||A===i.TEXTURE_2D_ARRAY)&&i.texParameteri(A,i.TEXTURE_WRAP_R,Te[S.wrapR]),i.texParameteri(A,i.TEXTURE_MAG_FILTER,Le[S.magFilter]),i.texParameteri(A,i.TEXTURE_MIN_FILTER,Le[S.minFilter]),S.compareFunction&&(i.texParameteri(A,i.TEXTURE_COMPARE_MODE,i.COMPARE_REF_TO_TEXTURE),i.texParameteri(A,i.TEXTURE_COMPARE_FUNC,je[S.compareFunction])),e.has("EXT_texture_filter_anisotropic")===!0){if(S.magFilter===In||S.minFilter!==no&&S.minFilter!==Ti||S.type===Fn&&e.has("OES_texture_float_linear")===!1)return;if(S.anisotropy>1||n.get(S).__currentAnisotropy){const B=e.get("EXT_texture_filter_anisotropic");i.texParameterf(A,B.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(S.anisotropy,s.getMaxAnisotropy())),n.get(S).__currentAnisotropy=S.anisotropy}}}function ut(A,S){let B=!1;A.__webglInit===void 0&&(A.__webglInit=!0,S.addEventListener("dispose",D));const re=S.source;let pe=p.get(re);pe===void 0&&(pe={},p.set(re,pe));const ie=ee(S);if(ie!==A.__cacheKey){pe[ie]===void 0&&(pe[ie]={texture:i.createTexture(),usedTimes:0},o.memory.textures++,B=!0),pe[ie].usedTimes++;const Ie=pe[A.__cacheKey];Ie!==void 0&&(pe[A.__cacheKey].usedTimes--,Ie.usedTimes===0&&M(S)),A.__cacheKey=ie,A.__webglTexture=pe[ie].texture}return B}function se(A,S,B){return Math.floor(Math.floor(A/B)/S)}function ge(A,S,B,re){const ie=A.updateRanges;if(ie.length===0)t.texSubImage2D(i.TEXTURE_2D,0,0,0,S.width,S.height,B,re,S.data);else{ie.sort((le,Pe)=>le.start-Pe.start);let Ie=0;for(let le=1;le<ie.length;le++){const Pe=ie[Ie],Ze=ie[le],Ce=Pe.start+Pe.count,ye=se(Ze.start,S.width,4),We=se(Pe.start,S.width,4);Ze.start<=Ce+1&&ye===We&&se(Ze.start+Ze.count-1,S.width,4)===ye?Pe.count=Math.max(Pe.count,Ze.start+Ze.count-Pe.start):(++Ie,ie[Ie]=Ze)}ie.length=Ie+1;const Re=i.getParameter(i.UNPACK_ROW_LENGTH),De=i.getParameter(i.UNPACK_SKIP_PIXELS),Fe=i.getParameter(i.UNPACK_SKIP_ROWS);i.pixelStorei(i.UNPACK_ROW_LENGTH,S.width);for(let le=0,Pe=ie.length;le<Pe;le++){const Ze=ie[le],Ce=Math.floor(Ze.start/4),ye=Math.ceil(Ze.count/4),We=Ce%S.width,Y=Math.floor(Ce/S.width),_=ye,he=1;i.pixelStorei(i.UNPACK_SKIP_PIXELS,We),i.pixelStorei(i.UNPACK_SKIP_ROWS,Y),t.texSubImage2D(i.TEXTURE_2D,0,We,Y,_,he,B,re,S.data)}A.clearUpdateRanges(),i.pixelStorei(i.UNPACK_ROW_LENGTH,Re),i.pixelStorei(i.UNPACK_SKIP_PIXELS,De),i.pixelStorei(i.UNPACK_SKIP_ROWS,Fe)}}function xe(A,S,B){let re=i.TEXTURE_2D;(S.isDataArrayTexture||S.isCompressedArrayTexture)&&(re=i.TEXTURE_2D_ARRAY),S.isData3DTexture&&(re=i.TEXTURE_3D);const pe=ut(A,S),ie=S.source;t.bindTexture(re,A.__webglTexture,i.TEXTURE0+B);const Ie=n.get(ie);if(ie.version!==Ie.__version||pe===!0){t.activeTexture(i.TEXTURE0+B);const Re=wt.getPrimaries(wt.workingColorSpace),De=S.colorSpace===ji?null:wt.getPrimaries(S.colorSpace),Fe=S.colorSpace===ji||Re===De?i.NONE:i.BROWSER_DEFAULT_WEBGL;i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,S.flipY),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,S.premultiplyAlpha),i.pixelStorei(i.UNPACK_ALIGNMENT,S.unpackAlignment),i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,Fe);let le=x(S.image,!1,s.maxTextureSize);le=it(S,le);const Pe=r.convert(S.format,S.colorSpace),Ze=r.convert(S.type);let Ce=O(S.internalFormat,Pe,Ze,S.colorSpace,S.isVideoTexture);Ke(re,S);let ye;const We=S.mipmaps,Y=S.isVideoTexture!==!0,_=Ie.__version===void 0||pe===!0,he=ie.dataReady,He=j(S,le);if(S.isDepthTexture)Ce=P(S.format===fo,S.type),_&&(Y?t.texStorage2D(i.TEXTURE_2D,1,Ce,le.width,le.height):t.texImage2D(i.TEXTURE_2D,0,Ce,le.width,le.height,0,Pe,Ze,null));else if(S.isDataTexture)if(We.length>0){Y&&_&&t.texStorage2D(i.TEXTURE_2D,He,Ce,We[0].width,We[0].height);for(let be=0,de=We.length;be<de;be++)ye=We[be],Y?he&&t.texSubImage2D(i.TEXTURE_2D,be,0,0,ye.width,ye.height,Pe,Ze,ye.data):t.texImage2D(i.TEXTURE_2D,be,Ce,ye.width,ye.height,0,Pe,Ze,ye.data);S.generateMipmaps=!1}else Y?(_&&t.texStorage2D(i.TEXTURE_2D,He,Ce,le.width,le.height),he&&ge(S,le,Pe,Ze)):t.texImage2D(i.TEXTURE_2D,0,Ce,le.width,le.height,0,Pe,Ze,le.data);else if(S.isCompressedTexture)if(S.isCompressedArrayTexture){Y&&_&&t.texStorage3D(i.TEXTURE_2D_ARRAY,He,Ce,We[0].width,We[0].height,le.depth);for(let be=0,de=We.length;be<de;be++)if(ye=We[be],S.format!==kn)if(Pe!==null)if(Y){if(he)if(S.layerUpdates.size>0){const Xe=p1(ye.width,ye.height,S.format,S.type);for(const nt of S.layerUpdates){const jt=ye.data.subarray(nt*Xe/ye.data.BYTES_PER_ELEMENT,(nt+1)*Xe/ye.data.BYTES_PER_ELEMENT);t.compressedTexSubImage3D(i.TEXTURE_2D_ARRAY,be,0,0,nt,ye.width,ye.height,1,Pe,jt)}S.clearLayerUpdates()}else t.compressedTexSubImage3D(i.TEXTURE_2D_ARRAY,be,0,0,0,ye.width,ye.height,le.depth,Pe,ye.data)}else t.compressedTexImage3D(i.TEXTURE_2D_ARRAY,be,Ce,ye.width,ye.height,le.depth,0,ye.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else Y?he&&t.texSubImage3D(i.TEXTURE_2D_ARRAY,be,0,0,0,ye.width,ye.height,le.depth,Pe,Ze,ye.data):t.texImage3D(i.TEXTURE_2D_ARRAY,be,Ce,ye.width,ye.height,le.depth,0,Pe,Ze,ye.data)}else{Y&&_&&t.texStorage2D(i.TEXTURE_2D,He,Ce,We[0].width,We[0].height);for(let be=0,de=We.length;be<de;be++)ye=We[be],S.format!==kn?Pe!==null?Y?he&&t.compressedTexSubImage2D(i.TEXTURE_2D,be,0,0,ye.width,ye.height,Pe,ye.data):t.compressedTexImage2D(i.TEXTURE_2D,be,Ce,ye.width,ye.height,0,ye.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):Y?he&&t.texSubImage2D(i.TEXTURE_2D,be,0,0,ye.width,ye.height,Pe,Ze,ye.data):t.texImage2D(i.TEXTURE_2D,be,Ce,ye.width,ye.height,0,Pe,Ze,ye.data)}else if(S.isDataArrayTexture)if(Y){if(_&&t.texStorage3D(i.TEXTURE_2D_ARRAY,He,Ce,le.width,le.height,le.depth),he)if(S.layerUpdates.size>0){const be=p1(le.width,le.height,S.format,S.type);for(const de of S.layerUpdates){const Xe=le.data.subarray(de*be/le.data.BYTES_PER_ELEMENT,(de+1)*be/le.data.BYTES_PER_ELEMENT);t.texSubImage3D(i.TEXTURE_2D_ARRAY,0,0,0,de,le.width,le.height,1,Pe,Ze,Xe)}S.clearLayerUpdates()}else t.texSubImage3D(i.TEXTURE_2D_ARRAY,0,0,0,0,le.width,le.height,le.depth,Pe,Ze,le.data)}else t.texImage3D(i.TEXTURE_2D_ARRAY,0,Ce,le.width,le.height,le.depth,0,Pe,Ze,le.data);else if(S.isData3DTexture)Y?(_&&t.texStorage3D(i.TEXTURE_3D,He,Ce,le.width,le.height,le.depth),he&&t.texSubImage3D(i.TEXTURE_3D,0,0,0,0,le.width,le.height,le.depth,Pe,Ze,le.data)):t.texImage3D(i.TEXTURE_3D,0,Ce,le.width,le.height,le.depth,0,Pe,Ze,le.data);else if(S.isFramebufferTexture){if(_)if(Y)t.texStorage2D(i.TEXTURE_2D,He,Ce,le.width,le.height);else{let be=le.width,de=le.height;for(let Xe=0;Xe<He;Xe++)t.texImage2D(i.TEXTURE_2D,Xe,Ce,be,de,0,Pe,Ze,null),be>>=1,de>>=1}}else if(We.length>0){if(Y&&_){const be=Qt(We[0]);t.texStorage2D(i.TEXTURE_2D,He,Ce,be.width,be.height)}for(let be=0,de=We.length;be<de;be++)ye=We[be],Y?he&&t.texSubImage2D(i.TEXTURE_2D,be,0,0,Pe,Ze,ye):t.texImage2D(i.TEXTURE_2D,be,Ce,Pe,Ze,ye);S.generateMipmaps=!1}else if(Y){if(_){const be=Qt(le);t.texStorage2D(i.TEXTURE_2D,He,Ce,be.width,be.height)}he&&t.texSubImage2D(i.TEXTURE_2D,0,0,0,Pe,Ze,le)}else t.texImage2D(i.TEXTURE_2D,0,Ce,Pe,Ze,le);m(S)&&f(re),Ie.__version=ie.version,S.onUpdate&&S.onUpdate(S)}A.__version=S.version}function Se(A,S,B){if(S.image.length!==6)return;const re=ut(A,S),pe=S.source;t.bindTexture(i.TEXTURE_CUBE_MAP,A.__webglTexture,i.TEXTURE0+B);const ie=n.get(pe);if(pe.version!==ie.__version||re===!0){t.activeTexture(i.TEXTURE0+B);const Ie=wt.getPrimaries(wt.workingColorSpace),Re=S.colorSpace===ji?null:wt.getPrimaries(S.colorSpace),De=S.colorSpace===ji||Ie===Re?i.NONE:i.BROWSER_DEFAULT_WEBGL;i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,S.flipY),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,S.premultiplyAlpha),i.pixelStorei(i.UNPACK_ALIGNMENT,S.unpackAlignment),i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,De);const Fe=S.isCompressedTexture||S.image[0].isCompressedTexture,le=S.image[0]&&S.image[0].isDataTexture,Pe=[];for(let de=0;de<6;de++)!Fe&&!le?Pe[de]=x(S.image[de],!0,s.maxCubemapSize):Pe[de]=le?S.image[de].image:S.image[de],Pe[de]=it(S,Pe[de]);const Ze=Pe[0],Ce=r.convert(S.format,S.colorSpace),ye=r.convert(S.type),We=O(S.internalFormat,Ce,ye,S.colorSpace),Y=S.isVideoTexture!==!0,_=ie.__version===void 0||re===!0,he=pe.dataReady;let He=j(S,Ze);Ke(i.TEXTURE_CUBE_MAP,S);let be;if(Fe){Y&&_&&t.texStorage2D(i.TEXTURE_CUBE_MAP,He,We,Ze.width,Ze.height);for(let de=0;de<6;de++){be=Pe[de].mipmaps;for(let Xe=0;Xe<be.length;Xe++){const nt=be[Xe];S.format!==kn?Ce!==null?Y?he&&t.compressedTexSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+de,Xe,0,0,nt.width,nt.height,Ce,nt.data):t.compressedTexImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+de,Xe,We,nt.width,nt.height,0,nt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):Y?he&&t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+de,Xe,0,0,nt.width,nt.height,Ce,ye,nt.data):t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+de,Xe,We,nt.width,nt.height,0,Ce,ye,nt.data)}}}else{if(be=S.mipmaps,Y&&_){be.length>0&&He++;const de=Qt(Pe[0]);t.texStorage2D(i.TEXTURE_CUBE_MAP,He,We,de.width,de.height)}for(let de=0;de<6;de++)if(le){Y?he&&t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+de,0,0,0,Pe[de].width,Pe[de].height,Ce,ye,Pe[de].data):t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+de,0,We,Pe[de].width,Pe[de].height,0,Ce,ye,Pe[de].data);for(let Xe=0;Xe<be.length;Xe++){const jt=be[Xe].image[de].image;Y?he&&t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+de,Xe+1,0,0,jt.width,jt.height,Ce,ye,jt.data):t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+de,Xe+1,We,jt.width,jt.height,0,Ce,ye,jt.data)}}else{Y?he&&t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+de,0,0,0,Ce,ye,Pe[de]):t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+de,0,We,Ce,ye,Pe[de]);for(let Xe=0;Xe<be.length;Xe++){const nt=be[Xe];Y?he&&t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+de,Xe+1,0,0,Ce,ye,nt.image[de]):t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+de,Xe+1,We,Ce,ye,nt.image[de])}}}m(S)&&f(i.TEXTURE_CUBE_MAP),ie.__version=pe.version,S.onUpdate&&S.onUpdate(S)}A.__version=S.version}function Ae(A,S,B,re,pe,ie){const Ie=r.convert(B.format,B.colorSpace),Re=r.convert(B.type),De=O(B.internalFormat,Ie,Re,B.colorSpace),Fe=n.get(S),le=n.get(B);if(le.__renderTarget=S,!Fe.__hasExternalTextures){const Pe=Math.max(1,S.width>>ie),Ze=Math.max(1,S.height>>ie);pe===i.TEXTURE_3D||pe===i.TEXTURE_2D_ARRAY?t.texImage3D(pe,ie,De,Pe,Ze,S.depth,0,Ie,Re,null):t.texImage2D(pe,ie,De,Pe,Ze,0,Ie,Re,null)}t.bindFramebuffer(i.FRAMEBUFFER,A),yt(S)?a.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,re,pe,le.__webglTexture,0,Ve(S)):(pe===i.TEXTURE_2D||pe>=i.TEXTURE_CUBE_MAP_POSITIVE_X&&pe<=i.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&i.framebufferTexture2D(i.FRAMEBUFFER,re,pe,le.__webglTexture,ie),t.bindFramebuffer(i.FRAMEBUFFER,null)}function mt(A,S,B){if(i.bindRenderbuffer(i.RENDERBUFFER,A),S.depthBuffer){const re=S.depthTexture,pe=re&&re.isDepthTexture?re.type:null,ie=P(S.stencilBuffer,pe),Ie=S.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,Re=Ve(S);yt(S)?a.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,Re,ie,S.width,S.height):B?i.renderbufferStorageMultisample(i.RENDERBUFFER,Re,ie,S.width,S.height):i.renderbufferStorage(i.RENDERBUFFER,ie,S.width,S.height),i.framebufferRenderbuffer(i.FRAMEBUFFER,Ie,i.RENDERBUFFER,A)}else{const re=S.textures;for(let pe=0;pe<re.length;pe++){const ie=re[pe],Ie=r.convert(ie.format,ie.colorSpace),Re=r.convert(ie.type),De=O(ie.internalFormat,Ie,Re,ie.colorSpace),Fe=Ve(S);B&&yt(S)===!1?i.renderbufferStorageMultisample(i.RENDERBUFFER,Fe,De,S.width,S.height):yt(S)?a.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,Fe,De,S.width,S.height):i.renderbufferStorage(i.RENDERBUFFER,De,S.width,S.height)}}i.bindRenderbuffer(i.RENDERBUFFER,null)}function Ue(A,S){if(S&&S.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(i.FRAMEBUFFER,A),!(S.depthTexture&&S.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const re=n.get(S.depthTexture);re.__renderTarget=S,(!re.__webglTexture||S.depthTexture.image.width!==S.width||S.depthTexture.image.height!==S.height)&&(S.depthTexture.image.width=S.width,S.depthTexture.image.height=S.height,S.depthTexture.needsUpdate=!0),ue(S.depthTexture,0);const pe=re.__webglTexture,ie=Ve(S);if(S.depthTexture.format===po)yt(S)?a.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.TEXTURE_2D,pe,0,ie):i.framebufferTexture2D(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.TEXTURE_2D,pe,0);else if(S.depthTexture.format===fo)yt(S)?a.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.TEXTURE_2D,pe,0,ie):i.framebufferTexture2D(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.TEXTURE_2D,pe,0);else throw new Error("Unknown depthTexture format")}function Nt(A){const S=n.get(A),B=A.isWebGLCubeRenderTarget===!0;if(S.__boundDepthTexture!==A.depthTexture){const re=A.depthTexture;if(S.__depthDisposeCallback&&S.__depthDisposeCallback(),re){const pe=()=>{delete S.__boundDepthTexture,delete S.__depthDisposeCallback,re.removeEventListener("dispose",pe)};re.addEventListener("dispose",pe),S.__depthDisposeCallback=pe}S.__boundDepthTexture=re}if(A.depthTexture&&!S.__autoAllocateDepthBuffer){if(B)throw new Error("target.depthTexture not supported in Cube render targets");const re=A.texture.mipmaps;re&&re.length>0?Ue(S.__webglFramebuffer[0],A):Ue(S.__webglFramebuffer,A)}else if(B){S.__webglDepthbuffer=[];for(let re=0;re<6;re++)if(t.bindFramebuffer(i.FRAMEBUFFER,S.__webglFramebuffer[re]),S.__webglDepthbuffer[re]===void 0)S.__webglDepthbuffer[re]=i.createRenderbuffer(),mt(S.__webglDepthbuffer[re],A,!1);else{const pe=A.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,ie=S.__webglDepthbuffer[re];i.bindRenderbuffer(i.RENDERBUFFER,ie),i.framebufferRenderbuffer(i.FRAMEBUFFER,pe,i.RENDERBUFFER,ie)}}else{const re=A.texture.mipmaps;if(re&&re.length>0?t.bindFramebuffer(i.FRAMEBUFFER,S.__webglFramebuffer[0]):t.bindFramebuffer(i.FRAMEBUFFER,S.__webglFramebuffer),S.__webglDepthbuffer===void 0)S.__webglDepthbuffer=i.createRenderbuffer(),mt(S.__webglDepthbuffer,A,!1);else{const pe=A.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,ie=S.__webglDepthbuffer;i.bindRenderbuffer(i.RENDERBUFFER,ie),i.framebufferRenderbuffer(i.FRAMEBUFFER,pe,i.RENDERBUFFER,ie)}}t.bindFramebuffer(i.FRAMEBUFFER,null)}function Ht(A,S,B){const re=n.get(A);S!==void 0&&Ae(re.__webglFramebuffer,A,A.texture,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,0),B!==void 0&&Nt(A)}function ft(A){const S=A.texture,B=n.get(A),re=n.get(S);A.addEventListener("dispose",V);const pe=A.textures,ie=A.isWebGLCubeRenderTarget===!0,Ie=pe.length>1;if(Ie||(re.__webglTexture===void 0&&(re.__webglTexture=i.createTexture()),re.__version=S.version,o.memory.textures++),ie){B.__webglFramebuffer=[];for(let Re=0;Re<6;Re++)if(S.mipmaps&&S.mipmaps.length>0){B.__webglFramebuffer[Re]=[];for(let De=0;De<S.mipmaps.length;De++)B.__webglFramebuffer[Re][De]=i.createFramebuffer()}else B.__webglFramebuffer[Re]=i.createFramebuffer()}else{if(S.mipmaps&&S.mipmaps.length>0){B.__webglFramebuffer=[];for(let Re=0;Re<S.mipmaps.length;Re++)B.__webglFramebuffer[Re]=i.createFramebuffer()}else B.__webglFramebuffer=i.createFramebuffer();if(Ie)for(let Re=0,De=pe.length;Re<De;Re++){const Fe=n.get(pe[Re]);Fe.__webglTexture===void 0&&(Fe.__webglTexture=i.createTexture(),o.memory.textures++)}if(A.samples>0&&yt(A)===!1){B.__webglMultisampledFramebuffer=i.createFramebuffer(),B.__webglColorRenderbuffer=[],t.bindFramebuffer(i.FRAMEBUFFER,B.__webglMultisampledFramebuffer);for(let Re=0;Re<pe.length;Re++){const De=pe[Re];B.__webglColorRenderbuffer[Re]=i.createRenderbuffer(),i.bindRenderbuffer(i.RENDERBUFFER,B.__webglColorRenderbuffer[Re]);const Fe=r.convert(De.format,De.colorSpace),le=r.convert(De.type),Pe=O(De.internalFormat,Fe,le,De.colorSpace,A.isXRRenderTarget===!0),Ze=Ve(A);i.renderbufferStorageMultisample(i.RENDERBUFFER,Ze,Pe,A.width,A.height),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+Re,i.RENDERBUFFER,B.__webglColorRenderbuffer[Re])}i.bindRenderbuffer(i.RENDERBUFFER,null),A.depthBuffer&&(B.__webglDepthRenderbuffer=i.createRenderbuffer(),mt(B.__webglDepthRenderbuffer,A,!0)),t.bindFramebuffer(i.FRAMEBUFFER,null)}}if(ie){t.bindTexture(i.TEXTURE_CUBE_MAP,re.__webglTexture),Ke(i.TEXTURE_CUBE_MAP,S);for(let Re=0;Re<6;Re++)if(S.mipmaps&&S.mipmaps.length>0)for(let De=0;De<S.mipmaps.length;De++)Ae(B.__webglFramebuffer[Re][De],A,S,i.COLOR_ATTACHMENT0,i.TEXTURE_CUBE_MAP_POSITIVE_X+Re,De);else Ae(B.__webglFramebuffer[Re],A,S,i.COLOR_ATTACHMENT0,i.TEXTURE_CUBE_MAP_POSITIVE_X+Re,0);m(S)&&f(i.TEXTURE_CUBE_MAP),t.unbindTexture()}else if(Ie){for(let Re=0,De=pe.length;Re<De;Re++){const Fe=pe[Re],le=n.get(Fe);t.bindTexture(i.TEXTURE_2D,le.__webglTexture),Ke(i.TEXTURE_2D,Fe),Ae(B.__webglFramebuffer,A,Fe,i.COLOR_ATTACHMENT0+Re,i.TEXTURE_2D,0),m(Fe)&&f(i.TEXTURE_2D)}t.unbindTexture()}else{let Re=i.TEXTURE_2D;if((A.isWebGL3DRenderTarget||A.isWebGLArrayRenderTarget)&&(Re=A.isWebGL3DRenderTarget?i.TEXTURE_3D:i.TEXTURE_2D_ARRAY),t.bindTexture(Re,re.__webglTexture),Ke(Re,S),S.mipmaps&&S.mipmaps.length>0)for(let De=0;De<S.mipmaps.length;De++)Ae(B.__webglFramebuffer[De],A,S,i.COLOR_ATTACHMENT0,Re,De);else Ae(B.__webglFramebuffer,A,S,i.COLOR_ATTACHMENT0,Re,0);m(S)&&f(Re),t.unbindTexture()}A.depthBuffer&&Nt(A)}function C(A){const S=A.textures;for(let B=0,re=S.length;B<re;B++){const pe=S[B];if(m(pe)){const ie=N(A),Ie=n.get(pe).__webglTexture;t.bindTexture(ie,Ie),f(ie),t.unbindTexture()}}}const cn=[],gt=[];function Et(A){if(A.samples>0){if(yt(A)===!1){const S=A.textures,B=A.width,re=A.height;let pe=i.COLOR_BUFFER_BIT;const ie=A.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,Ie=n.get(A),Re=S.length>1;if(Re)for(let Fe=0;Fe<S.length;Fe++)t.bindFramebuffer(i.FRAMEBUFFER,Ie.__webglMultisampledFramebuffer),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+Fe,i.RENDERBUFFER,null),t.bindFramebuffer(i.FRAMEBUFFER,Ie.__webglFramebuffer),i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0+Fe,i.TEXTURE_2D,null,0);t.bindFramebuffer(i.READ_FRAMEBUFFER,Ie.__webglMultisampledFramebuffer);const De=A.texture.mipmaps;De&&De.length>0?t.bindFramebuffer(i.DRAW_FRAMEBUFFER,Ie.__webglFramebuffer[0]):t.bindFramebuffer(i.DRAW_FRAMEBUFFER,Ie.__webglFramebuffer);for(let Fe=0;Fe<S.length;Fe++){if(A.resolveDepthBuffer&&(A.depthBuffer&&(pe|=i.DEPTH_BUFFER_BIT),A.stencilBuffer&&A.resolveStencilBuffer&&(pe|=i.STENCIL_BUFFER_BIT)),Re){i.framebufferRenderbuffer(i.READ_FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.RENDERBUFFER,Ie.__webglColorRenderbuffer[Fe]);const le=n.get(S[Fe]).__webglTexture;i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,le,0)}i.blitFramebuffer(0,0,B,re,0,0,B,re,pe,i.NEAREST),l===!0&&(cn.length=0,gt.length=0,cn.push(i.COLOR_ATTACHMENT0+Fe),A.depthBuffer&&A.resolveDepthBuffer===!1&&(cn.push(ie),gt.push(ie),i.invalidateFramebuffer(i.DRAW_FRAMEBUFFER,gt)),i.invalidateFramebuffer(i.READ_FRAMEBUFFER,cn))}if(t.bindFramebuffer(i.READ_FRAMEBUFFER,null),t.bindFramebuffer(i.DRAW_FRAMEBUFFER,null),Re)for(let Fe=0;Fe<S.length;Fe++){t.bindFramebuffer(i.FRAMEBUFFER,Ie.__webglMultisampledFramebuffer),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+Fe,i.RENDERBUFFER,Ie.__webglColorRenderbuffer[Fe]);const le=n.get(S[Fe]).__webglTexture;t.bindFramebuffer(i.FRAMEBUFFER,Ie.__webglFramebuffer),i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0+Fe,i.TEXTURE_2D,le,0)}t.bindFramebuffer(i.DRAW_FRAMEBUFFER,Ie.__webglMultisampledFramebuffer)}else if(A.depthBuffer&&A.resolveDepthBuffer===!1&&l){const S=A.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT;i.invalidateFramebuffer(i.DRAW_FRAMEBUFFER,[S])}}}function Ve(A){return Math.min(s.maxSamples,A.samples)}function yt(A){const S=n.get(A);return A.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&S.__useRenderToTexture!==!1}function Ge(A){const S=o.render.frame;c.get(A)!==S&&(c.set(A,S),A.update())}function it(A,S){const B=A.colorSpace,re=A.format,pe=A.type;return A.isCompressedTexture===!0||A.isVideoTexture===!0||B!==Sn&&B!==ji&&(wt.getTransfer(B)===It?(re!==kn||pe!==Si)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",B)),S}function Qt(A){return typeof HTMLImageElement<"u"&&A instanceof HTMLImageElement?(d.width=A.naturalWidth||A.width,d.height=A.naturalHeight||A.height):typeof VideoFrame<"u"&&A instanceof VideoFrame?(d.width=A.displayWidth,d.height=A.displayHeight):(d.width=A.width,d.height=A.height),d}this.allocateTextureUnit=Q,this.resetTextureUnits=K,this.setTexture2D=ue,this.setTexture2DArray=ne,this.setTexture3D=ve,this.setTextureCube=te,this.rebindTextures=Ht,this.setupRenderTarget=ft,this.updateRenderTargetMipmap=C,this.updateMultisampleRenderTarget=Et,this.setupDepthRenderbuffer=Nt,this.setupFrameBufferTexture=Ae,this.useMultisampledRTT=yt}function $8(i,e){function t(n,s=ji){let r;const o=wt.getTransfer(s);if(n===Si)return i.UNSIGNED_BYTE;if(n===Dc)return i.UNSIGNED_SHORT_4_4_4_4;if(n===Wc)return i.UNSIGNED_SHORT_5_5_5_1;if(n===T2)return i.UNSIGNED_INT_5_9_9_9_REV;if(n===g2)return i.BYTE;if(n===x2)return i.SHORT;if(n===co)return i.UNSIGNED_SHORT;if(n===Ic)return i.INT;if(n===Os)return i.UNSIGNED_INT;if(n===Fn)return i.FLOAT;if(n===Ci)return i.HALF_FLOAT;if(n===S2)return i.ALPHA;if(n===P2)return i.RGB;if(n===kn)return i.RGBA;if(n===po)return i.DEPTH_COMPONENT;if(n===fo)return i.DEPTH_STENCIL;if(n===w0)return i.RED;if(n===jc)return i.RED_INTEGER;if(n===R2)return i.RG;if(n===Vc)return i.RG_INTEGER;if(n===Cc)return i.RGBA_INTEGER;if(n===Aa||n===Xa||n===Ia||n===Da)if(o===It)if(r=e.get("WEBGL_compressed_texture_s3tc_srgb"),r!==null){if(n===Aa)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===Xa)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===Ia)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===Da)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(r=e.get("WEBGL_compressed_texture_s3tc"),r!==null){if(n===Aa)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===Xa)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===Ia)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===Da)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(n===wd||n===gd||n===xd||n===Td)if(r=e.get("WEBGL_compressed_texture_pvrtc"),r!==null){if(n===wd)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===gd)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===xd)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===Td)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(n===Sd||n===Pd||n===Rd)if(r=e.get("WEBGL_compressed_texture_etc"),r!==null){if(n===Sd||n===Pd)return o===It?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(n===Rd)return o===It?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(n===Ld||n===Nd||n===Md||n===Od||n===zd||n===Hd||n===Ed||n===Ad||n===Xd||n===Id||n===Dd||n===Wd||n===jd||n===Vd)if(r=e.get("WEBGL_compressed_texture_astc"),r!==null){if(n===Ld)return o===It?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===Nd)return o===It?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===Md)return o===It?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===Od)return o===It?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===zd)return o===It?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===Hd)return o===It?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===Ed)return o===It?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===Ad)return o===It?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===Xd)return o===It?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===Id)return o===It?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===Dd)return o===It?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===Wd)return o===It?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===jd)return o===It?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===Vd)return o===It?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(n===Wa||n===Cd||n===Fd)if(r=e.get("EXT_texture_compression_bptc"),r!==null){if(n===Wa)return o===It?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===Cd)return r.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===Fd)return r.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(n===L2||n===qd||n===Yd||n===Gd)if(r=e.get("EXT_texture_compression_rgtc"),r!==null){if(n===Wa)return r.COMPRESSED_RED_RGTC1_EXT;if(n===qd)return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===Yd)return r.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===Gd)return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return n===uo?i.UNSIGNED_INT_24_8:i[n]!==void 0?i[n]:null}return{convert:t}}const em=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,tm=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class nm{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(e,t,n){if(this.texture===null){const s=new gn,r=e.properties.get(s);r.__webglTexture=t.texture,(t.depthNear!==n.depthNear||t.depthFar!==n.depthFar)&&(this.depthNear=t.depthNear,this.depthFar=t.depthFar),this.texture=s}}getMesh(e){if(this.texture!==null&&this.mesh===null){const t=e.cameras[0].viewport,n=new fs({vertexShader:em,fragmentShader:tm,uniforms:{depthColor:{value:this.texture},depthWidth:{value:t.z},depthHeight:{value:t.w}}});this.mesh=new Kt(new T0(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class im extends Xs{constructor(e,t){super();const n=this;let s=null,r=1,o=null,a="local-floor",l=1,d=null,c=null,u=null,p=null,h=null,v=null;const x=new nm,m=t.getContextAttributes();let f=null,N=null;const O=[],P=[],j=new et;let D=null;const V=new Xn;V.viewport=new Rt;const G=new Xn;G.viewport=new Rt;const M=[V,G],R=new f9;let F=null,K=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(se){let ge=O[se];return ge===void 0&&(ge=new rl,O[se]=ge),ge.getTargetRaySpace()},this.getControllerGrip=function(se){let ge=O[se];return ge===void 0&&(ge=new rl,O[se]=ge),ge.getGripSpace()},this.getHand=function(se){let ge=O[se];return ge===void 0&&(ge=new rl,O[se]=ge),ge.getHandSpace()};function Q(se){const ge=P.indexOf(se.inputSource);if(ge===-1)return;const xe=O[ge];xe!==void 0&&(xe.update(se.inputSource,se.frame,d||o),xe.dispatchEvent({type:se.type,data:se.inputSource}))}function ee(){s.removeEventListener("select",Q),s.removeEventListener("selectstart",Q),s.removeEventListener("selectend",Q),s.removeEventListener("squeeze",Q),s.removeEventListener("squeezestart",Q),s.removeEventListener("squeezeend",Q),s.removeEventListener("end",ee),s.removeEventListener("inputsourceschange",ue);for(let se=0;se<O.length;se++){const ge=P[se];ge!==null&&(P[se]=null,O[se].disconnect(ge))}F=null,K=null,x.reset(),e.setRenderTarget(f),h=null,p=null,u=null,s=null,N=null,ut.stop(),n.isPresenting=!1,e.setPixelRatio(D),e.setSize(j.width,j.height,!1),n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(se){r=se,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(se){a=se,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return d||o},this.setReferenceSpace=function(se){d=se},this.getBaseLayer=function(){return p!==null?p:h},this.getBinding=function(){return u},this.getFrame=function(){return v},this.getSession=function(){return s},this.setSession=async function(se){if(s=se,s!==null){if(f=e.getRenderTarget(),s.addEventListener("select",Q),s.addEventListener("selectstart",Q),s.addEventListener("selectend",Q),s.addEventListener("squeeze",Q),s.addEventListener("squeezestart",Q),s.addEventListener("squeezeend",Q),s.addEventListener("end",ee),s.addEventListener("inputsourceschange",ue),m.xrCompatible!==!0&&await t.makeXRCompatible(),D=e.getPixelRatio(),e.getSize(j),typeof XRWebGLBinding<"u"&&"createProjectionLayer"in XRWebGLBinding.prototype){let xe=null,Se=null,Ae=null;m.depth&&(Ae=m.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,xe=m.stencil?fo:po,Se=m.stencil?uo:Os);const mt={colorFormat:t.RGBA8,depthFormat:Ae,scaleFactor:r};u=new XRWebGLBinding(s,t),p=u.createProjectionLayer(mt),s.updateRenderState({layers:[p]}),e.setPixelRatio(1),e.setSize(p.textureWidth,p.textureHeight,!1),N=new zs(p.textureWidth,p.textureHeight,{format:kn,type:Si,depthTexture:new C2(p.textureWidth,p.textureHeight,Se,void 0,void 0,void 0,void 0,void 0,void 0,xe),stencilBuffer:m.stencil,colorSpace:e.outputColorSpace,samples:m.antialias?4:0,resolveDepthBuffer:p.ignoreDepthValues===!1,resolveStencilBuffer:p.ignoreDepthValues===!1})}else{const xe={antialias:m.antialias,alpha:!0,depth:m.depth,stencil:m.stencil,framebufferScaleFactor:r};h=new XRWebGLLayer(s,t,xe),s.updateRenderState({baseLayer:h}),e.setPixelRatio(1),e.setSize(h.framebufferWidth,h.framebufferHeight,!1),N=new zs(h.framebufferWidth,h.framebufferHeight,{format:kn,type:Si,colorSpace:e.outputColorSpace,stencilBuffer:m.stencil,resolveDepthBuffer:h.ignoreDepthValues===!1,resolveStencilBuffer:h.ignoreDepthValues===!1})}N.isXRRenderTarget=!0,this.setFoveation(l),d=null,o=await s.requestReferenceSpace(a),ut.setContext(s),ut.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(s!==null)return s.environmentBlendMode},this.getDepthTexture=function(){return x.getDepthTexture()};function ue(se){for(let ge=0;ge<se.removed.length;ge++){const xe=se.removed[ge],Se=P.indexOf(xe);Se>=0&&(P[Se]=null,O[Se].disconnect(xe))}for(let ge=0;ge<se.added.length;ge++){const xe=se.added[ge];let Se=P.indexOf(xe);if(Se===-1){for(let mt=0;mt<O.length;mt++)if(mt>=P.length){P.push(xe),Se=mt;break}else if(P[mt]===null){P[mt]=xe,Se=mt;break}if(Se===-1)break}const Ae=O[Se];Ae&&Ae.connect(xe)}}const ne=new T,ve=new T;function te(se,ge,xe){ne.setFromMatrixPosition(ge.matrixWorld),ve.setFromMatrixPosition(xe.matrixWorld);const Se=ne.distanceTo(ve),Ae=ge.projectionMatrix.elements,mt=xe.projectionMatrix.elements,Ue=Ae[14]/(Ae[10]-1),Nt=Ae[14]/(Ae[10]+1),Ht=(Ae[9]+1)/Ae[5],ft=(Ae[9]-1)/Ae[5],C=(Ae[8]-1)/Ae[0],cn=(mt[8]+1)/mt[0],gt=Ue*C,Et=Ue*cn,Ve=Se/(-C+cn),yt=Ve*-C;if(ge.matrixWorld.decompose(se.position,se.quaternion,se.scale),se.translateX(yt),se.translateZ(Ve),se.matrixWorld.compose(se.position,se.quaternion,se.scale),se.matrixWorldInverse.copy(se.matrixWorld).invert(),Ae[10]===-1)se.projectionMatrix.copy(ge.projectionMatrix),se.projectionMatrixInverse.copy(ge.projectionMatrixInverse);else{const Ge=Ue+Ve,it=Nt+Ve,Qt=gt-yt,A=Et+(Se-yt),S=Ht*Nt/it*Ge,B=ft*Nt/it*Ge;se.projectionMatrix.makePerspective(Qt,A,S,B,Ge,it),se.projectionMatrixInverse.copy(se.projectionMatrix).invert()}}function Te(se,ge){ge===null?se.matrixWorld.copy(se.matrix):se.matrixWorld.multiplyMatrices(ge.matrixWorld,se.matrix),se.matrixWorldInverse.copy(se.matrixWorld).invert()}this.updateCamera=function(se){if(s===null)return;let ge=se.near,xe=se.far;x.texture!==null&&(x.depthNear>0&&(ge=x.depthNear),x.depthFar>0&&(xe=x.depthFar)),R.near=G.near=V.near=ge,R.far=G.far=V.far=xe,(F!==R.near||K!==R.far)&&(s.updateRenderState({depthNear:R.near,depthFar:R.far}),F=R.near,K=R.far),V.layers.mask=se.layers.mask|2,G.layers.mask=se.layers.mask|4,R.layers.mask=V.layers.mask|G.layers.mask;const Se=se.parent,Ae=R.cameras;Te(R,Se);for(let mt=0;mt<Ae.length;mt++)Te(Ae[mt],Se);Ae.length===2?te(R,V,G):R.projectionMatrix.copy(V.projectionMatrix),Le(se,R,Se)};function Le(se,ge,xe){xe===null?se.matrix.copy(ge.matrixWorld):(se.matrix.copy(xe.matrixWorld),se.matrix.invert(),se.matrix.multiply(ge.matrixWorld)),se.matrix.decompose(se.position,se.quaternion,se.scale),se.updateMatrixWorld(!0),se.projectionMatrix.copy(ge.projectionMatrix),se.projectionMatrixInverse.copy(ge.projectionMatrixInverse),se.isPerspectiveCamera&&(se.fov=Pr*2*Math.atan(1/se.projectionMatrix.elements[5]),se.zoom=1)}this.getCamera=function(){return R},this.getFoveation=function(){if(!(p===null&&h===null))return l},this.setFoveation=function(se){l=se,p!==null&&(p.fixedFoveation=se),h!==null&&h.fixedFoveation!==void 0&&(h.fixedFoveation=se)},this.hasDepthSensing=function(){return x.texture!==null},this.getDepthSensingMesh=function(){return x.getMesh(R)};let je=null;function Ke(se,ge){if(c=ge.getViewerPose(d||o),v=ge,c!==null){const xe=c.views;h!==null&&(e.setRenderTargetFramebuffer(N,h.framebuffer),e.setRenderTarget(N));let Se=!1;xe.length!==R.cameras.length&&(R.cameras.length=0,Se=!0);for(let Ue=0;Ue<xe.length;Ue++){const Nt=xe[Ue];let Ht=null;if(h!==null)Ht=h.getViewport(Nt);else{const C=u.getViewSubImage(p,Nt);Ht=C.viewport,Ue===0&&(e.setRenderTargetTextures(N,C.colorTexture,C.depthStencilTexture),e.setRenderTarget(N))}let ft=M[Ue];ft===void 0&&(ft=new Xn,ft.layers.enable(Ue),ft.viewport=new Rt,M[Ue]=ft),ft.matrix.fromArray(Nt.transform.matrix),ft.matrix.decompose(ft.position,ft.quaternion,ft.scale),ft.projectionMatrix.fromArray(Nt.projectionMatrix),ft.projectionMatrixInverse.copy(ft.projectionMatrix).invert(),ft.viewport.set(Ht.x,Ht.y,Ht.width,Ht.height),Ue===0&&(R.matrix.copy(ft.matrix),R.matrix.decompose(R.position,R.quaternion,R.scale)),Se===!0&&R.cameras.push(ft)}const Ae=s.enabledFeatures;if(Ae&&Ae.includes("depth-sensing")&&s.depthUsage=="gpu-optimized"&&u){const Ue=u.getDepthInformation(xe[0]);Ue&&Ue.isValid&&Ue.texture&&x.init(e,Ue,s.renderState)}}for(let xe=0;xe<O.length;xe++){const Se=P[xe],Ae=O[xe];Se!==null&&Ae!==void 0&&Ae.update(Se,ge,d||o)}je&&je(se,ge),ge.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:ge}),v=null}const ut=new k2;ut.setAnimationLoop(Ke),this.setAnimationLoop=function(se){je=se},this.dispose=function(){}}}const xs=new zt,sm=new Be;function rm(i,e){function t(m,f){m.matrixAutoUpdate===!0&&m.updateMatrix(),f.value.copy(m.matrix)}function n(m,f){f.color.getRGB(m.fogColor.value,I2(i)),f.isFog?(m.fogNear.value=f.near,m.fogFar.value=f.far):f.isFogExp2&&(m.fogDensity.value=f.density)}function s(m,f,N,O,P){f.isMeshBasicMaterial||f.isMeshLambertMaterial?r(m,f):f.isMeshToonMaterial?(r(m,f),u(m,f)):f.isMeshPhongMaterial?(r(m,f),c(m,f)):f.isMeshStandardMaterial?(r(m,f),p(m,f),f.isMeshPhysicalMaterial&&h(m,f,P)):f.isMeshMatcapMaterial?(r(m,f),v(m,f)):f.isMeshDepthMaterial?r(m,f):f.isMeshDistanceMaterial?(r(m,f),x(m,f)):f.isMeshNormalMaterial?r(m,f):f.isLineBasicMaterial?(o(m,f),f.isLineDashedMaterial&&a(m,f)):f.isPointsMaterial?l(m,f,N,O):f.isSpriteMaterial?d(m,f):f.isShadowMaterial?(m.color.value.copy(f.color),m.opacity.value=f.opacity):f.isShaderMaterial&&(f.uniformsNeedUpdate=!1)}function r(m,f){m.opacity.value=f.opacity,f.color&&m.diffuse.value.copy(f.color),f.emissive&&m.emissive.value.copy(f.emissive).multiplyScalar(f.emissiveIntensity),f.map&&(m.map.value=f.map,t(f.map,m.mapTransform)),f.alphaMap&&(m.alphaMap.value=f.alphaMap,t(f.alphaMap,m.alphaMapTransform)),f.bumpMap&&(m.bumpMap.value=f.bumpMap,t(f.bumpMap,m.bumpMapTransform),m.bumpScale.value=f.bumpScale,f.side===qn&&(m.bumpScale.value*=-1)),f.normalMap&&(m.normalMap.value=f.normalMap,t(f.normalMap,m.normalMapTransform),m.normalScale.value.copy(f.normalScale),f.side===qn&&m.normalScale.value.negate()),f.displacementMap&&(m.displacementMap.value=f.displacementMap,t(f.displacementMap,m.displacementMapTransform),m.displacementScale.value=f.displacementScale,m.displacementBias.value=f.displacementBias),f.emissiveMap&&(m.emissiveMap.value=f.emissiveMap,t(f.emissiveMap,m.emissiveMapTransform)),f.specularMap&&(m.specularMap.value=f.specularMap,t(f.specularMap,m.specularMapTransform)),f.alphaTest>0&&(m.alphaTest.value=f.alphaTest);const N=e.get(f),O=N.envMap,P=N.envMapRotation;O&&(m.envMap.value=O,xs.copy(P),xs.x*=-1,xs.y*=-1,xs.z*=-1,O.isCubeTexture&&O.isRenderTargetTexture===!1&&(xs.y*=-1,xs.z*=-1),m.envMapRotation.value.setFromMatrix4(sm.makeRotationFromEuler(xs)),m.flipEnvMap.value=O.isCubeTexture&&O.isRenderTargetTexture===!1?-1:1,m.reflectivity.value=f.reflectivity,m.ior.value=f.ior,m.refractionRatio.value=f.refractionRatio),f.lightMap&&(m.lightMap.value=f.lightMap,m.lightMapIntensity.value=f.lightMapIntensity,t(f.lightMap,m.lightMapTransform)),f.aoMap&&(m.aoMap.value=f.aoMap,m.aoMapIntensity.value=f.aoMapIntensity,t(f.aoMap,m.aoMapTransform))}function o(m,f){m.diffuse.value.copy(f.color),m.opacity.value=f.opacity,f.map&&(m.map.value=f.map,t(f.map,m.mapTransform))}function a(m,f){m.dashSize.value=f.dashSize,m.totalSize.value=f.dashSize+f.gapSize,m.scale.value=f.scale}function l(m,f,N,O){m.diffuse.value.copy(f.color),m.opacity.value=f.opacity,m.size.value=f.size*N,m.scale.value=O*.5,f.map&&(m.map.value=f.map,t(f.map,m.uvTransform)),f.alphaMap&&(m.alphaMap.value=f.alphaMap,t(f.alphaMap,m.alphaMapTransform)),f.alphaTest>0&&(m.alphaTest.value=f.alphaTest)}function d(m,f){m.diffuse.value.copy(f.color),m.opacity.value=f.opacity,m.rotation.value=f.rotation,f.map&&(m.map.value=f.map,t(f.map,m.mapTransform)),f.alphaMap&&(m.alphaMap.value=f.alphaMap,t(f.alphaMap,m.alphaMapTransform)),f.alphaTest>0&&(m.alphaTest.value=f.alphaTest)}function c(m,f){m.specular.value.copy(f.specular),m.shininess.value=Math.max(f.shininess,1e-4)}function u(m,f){f.gradientMap&&(m.gradientMap.value=f.gradientMap)}function p(m,f){m.metalness.value=f.metalness,f.metalnessMap&&(m.metalnessMap.value=f.metalnessMap,t(f.metalnessMap,m.metalnessMapTransform)),m.roughness.value=f.roughness,f.roughnessMap&&(m.roughnessMap.value=f.roughnessMap,t(f.roughnessMap,m.roughnessMapTransform)),f.envMap&&(m.envMapIntensity.value=f.envMapIntensity)}function h(m,f,N){m.ior.value=f.ior,f.sheen>0&&(m.sheenColor.value.copy(f.sheenColor).multiplyScalar(f.sheen),m.sheenRoughness.value=f.sheenRoughness,f.sheenColorMap&&(m.sheenColorMap.value=f.sheenColorMap,t(f.sheenColorMap,m.sheenColorMapTransform)),f.sheenRoughnessMap&&(m.sheenRoughnessMap.value=f.sheenRoughnessMap,t(f.sheenRoughnessMap,m.sheenRoughnessMapTransform))),f.clearcoat>0&&(m.clearcoat.value=f.clearcoat,m.clearcoatRoughness.value=f.clearcoatRoughness,f.clearcoatMap&&(m.clearcoatMap.value=f.clearcoatMap,t(f.clearcoatMap,m.clearcoatMapTransform)),f.clearcoatRoughnessMap&&(m.clearcoatRoughnessMap.value=f.clearcoatRoughnessMap,t(f.clearcoatRoughnessMap,m.clearcoatRoughnessMapTransform)),f.clearcoatNormalMap&&(m.clearcoatNormalMap.value=f.clearcoatNormalMap,t(f.clearcoatNormalMap,m.clearcoatNormalMapTransform),m.clearcoatNormalScale.value.copy(f.clearcoatNormalScale),f.side===qn&&m.clearcoatNormalScale.value.negate())),f.dispersion>0&&(m.dispersion.value=f.dispersion),f.iridescence>0&&(m.iridescence.value=f.iridescence,m.iridescenceIOR.value=f.iridescenceIOR,m.iridescenceThicknessMinimum.value=f.iridescenceThicknessRange[0],m.iridescenceThicknessMaximum.value=f.iridescenceThicknessRange[1],f.iridescenceMap&&(m.iridescenceMap.value=f.iridescenceMap,t(f.iridescenceMap,m.iridescenceMapTransform)),f.iridescenceThicknessMap&&(m.iridescenceThicknessMap.value=f.iridescenceThicknessMap,t(f.iridescenceThicknessMap,m.iridescenceThicknessMapTransform))),f.transmission>0&&(m.transmission.value=f.transmission,m.transmissionSamplerMap.value=N.texture,m.transmissionSamplerSize.value.set(N.width,N.height),f.transmissionMap&&(m.transmissionMap.value=f.transmissionMap,t(f.transmissionMap,m.transmissionMapTransform)),m.thickness.value=f.thickness,f.thicknessMap&&(m.thicknessMap.value=f.thicknessMap,t(f.thicknessMap,m.thicknessMapTransform)),m.attenuationDistance.value=f.attenuationDistance,m.attenuationColor.value.copy(f.attenuationColor)),f.anisotropy>0&&(m.anisotropyVector.value.set(f.anisotropy*Math.cos(f.anisotropyRotation),f.anisotropy*Math.sin(f.anisotropyRotation)),f.anisotropyMap&&(m.anisotropyMap.value=f.anisotropyMap,t(f.anisotropyMap,m.anisotropyMapTransform))),m.specularIntensity.value=f.specularIntensity,m.specularColor.value.copy(f.specularColor),f.specularColorMap&&(m.specularColorMap.value=f.specularColorMap,t(f.specularColorMap,m.specularColorMapTransform)),f.specularIntensityMap&&(m.specularIntensityMap.value=f.specularIntensityMap,t(f.specularIntensityMap,m.specularIntensityMapTransform))}function v(m,f){f.matcap&&(m.matcap.value=f.matcap)}function x(m,f){const N=e.get(f).light;m.referencePosition.value.setFromMatrixPosition(N.matrixWorld),m.nearDistance.value=N.shadow.camera.near,m.farDistance.value=N.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:s}}function om(i,e,t,n){let s={},r={},o=[];const a=i.getParameter(i.MAX_UNIFORM_BUFFER_BINDINGS);function l(N,O){const P=O.program;n.uniformBlockBinding(N,P)}function d(N,O){let P=s[N.id];P===void 0&&(v(N),P=c(N),s[N.id]=P,N.addEventListener("dispose",m));const j=O.program;n.updateUBOMapping(N,j);const D=e.render.frame;r[N.id]!==D&&(p(N),r[N.id]=D)}function c(N){const O=u();N.__bindingPointIndex=O;const P=i.createBuffer(),j=N.__size,D=N.usage;return i.bindBuffer(i.UNIFORM_BUFFER,P),i.bufferData(i.UNIFORM_BUFFER,j,D),i.bindBuffer(i.UNIFORM_BUFFER,null),i.bindBufferBase(i.UNIFORM_BUFFER,O,P),P}function u(){for(let N=0;N<a;N++)if(o.indexOf(N)===-1)return o.push(N),N;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function p(N){const O=s[N.id],P=N.uniforms,j=N.__cache;i.bindBuffer(i.UNIFORM_BUFFER,O);for(let D=0,V=P.length;D<V;D++){const G=Array.isArray(P[D])?P[D]:[P[D]];for(let M=0,R=G.length;M<R;M++){const F=G[M];if(h(F,D,M,j)===!0){const K=F.__offset,Q=Array.isArray(F.value)?F.value:[F.value];let ee=0;for(let ue=0;ue<Q.length;ue++){const ne=Q[ue],ve=x(ne);typeof ne=="number"||typeof ne=="boolean"?(F.__data[0]=ne,i.bufferSubData(i.UNIFORM_BUFFER,K+ee,F.__data)):ne.isMatrix3?(F.__data[0]=ne.elements[0],F.__data[1]=ne.elements[1],F.__data[2]=ne.elements[2],F.__data[3]=0,F.__data[4]=ne.elements[3],F.__data[5]=ne.elements[4],F.__data[6]=ne.elements[5],F.__data[7]=0,F.__data[8]=ne.elements[6],F.__data[9]=ne.elements[7],F.__data[10]=ne.elements[8],F.__data[11]=0):(ne.toArray(F.__data,ee),ee+=ve.storage/Float32Array.BYTES_PER_ELEMENT)}i.bufferSubData(i.UNIFORM_BUFFER,K,F.__data)}}}i.bindBuffer(i.UNIFORM_BUFFER,null)}function h(N,O,P,j){const D=N.value,V=O+"_"+P;if(j[V]===void 0)return typeof D=="number"||typeof D=="boolean"?j[V]=D:j[V]=D.clone(),!0;{const G=j[V];if(typeof D=="number"||typeof D=="boolean"){if(G!==D)return j[V]=D,!0}else if(G.equals(D)===!1)return G.copy(D),!0}return!1}function v(N){const O=N.uniforms;let P=0;const j=16;for(let V=0,G=O.length;V<G;V++){const M=Array.isArray(O[V])?O[V]:[O[V]];for(let R=0,F=M.length;R<F;R++){const K=M[R],Q=Array.isArray(K.value)?K.value:[K.value];for(let ee=0,ue=Q.length;ee<ue;ee++){const ne=Q[ee],ve=x(ne),te=P%j,Te=te%ve.boundary,Le=te+Te;P+=Te,Le!==0&&j-Le<ve.storage&&(P+=j-Le),K.__data=new Float32Array(ve.storage/Float32Array.BYTES_PER_ELEMENT),K.__offset=P,P+=ve.storage}}}const D=P%j;return D>0&&(P+=j-D),N.__size=P,N.__cache={},this}function x(N){const O={boundary:0,storage:0};return typeof N=="number"||typeof N=="boolean"?(O.boundary=4,O.storage=4):N.isVector2?(O.boundary=8,O.storage=8):N.isVector3||N.isColor?(O.boundary=16,O.storage=12):N.isVector4?(O.boundary=16,O.storage=16):N.isMatrix3?(O.boundary=48,O.storage=48):N.isMatrix4?(O.boundary=64,O.storage=64):N.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",N),O}function m(N){const O=N.target;O.removeEventListener("dispose",m);const P=o.indexOf(O.__bindingPointIndex);o.splice(P,1),i.deleteBuffer(s[O.id]),delete s[O.id],delete r[O.id]}function f(){for(const N in s)i.deleteBuffer(s[N]);o=[],s={},r={}}return{bind:l,update:d,dispose:f}}class am{constructor(e={}){const{canvas:t=i7(),context:n=null,depth:s=!0,stencil:r=!1,alpha:o=!1,antialias:a=!1,premultipliedAlpha:l=!0,preserveDrawingBuffer:d=!1,powerPreference:c="default",failIfMajorPerformanceCaveat:u=!1,reverseDepthBuffer:p=!1}=e;this.isWebGLRenderer=!0;let h;if(n!==null){if(typeof WebGLRenderingContext<"u"&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");h=n.getContextAttributes().alpha}else h=o;const v=new Uint32Array(4),x=new Int32Array(4);let m=null,f=null;const N=[],O=[];this.domElement=t,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.toneMapping=ps,this.toneMappingExposure=1,this.transmissionResolutionScale=1;const P=this;let j=!1;this._outputColorSpace=yn;let D=0,V=0,G=null,M=-1,R=null;const F=new Rt,K=new Rt;let Q=null;const ee=new tt(0);let ue=0,ne=t.width,ve=t.height,te=1,Te=null,Le=null;const je=new Rt(0,0,ne,ve),Ke=new Rt(0,0,ne,ve);let ut=!1;const se=new Bc;let ge=!1,xe=!1;const Se=new Be,Ae=new Be,mt=new T,Ue=new Rt,Nt={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let Ht=!1;function ft(){return G===null?te:1}let C=n;function cn(g,z){return t.getContext(g,z)}try{const g={alpha:!0,depth:s,stencil:r,antialias:a,premultipliedAlpha:l,preserveDrawingBuffer:d,powerPreference:c,failIfMajorPerformanceCaveat:u};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${Ac}`),t.addEventListener("webglcontextlost",He,!1),t.addEventListener("webglcontextrestored",be,!1),t.addEventListener("webglcontextcreationerror",de,!1),C===null){const z="webgl2";if(C=cn(z,g),C===null)throw cn(z)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(g){throw console.error("THREE.WebGLRenderer: "+g.message),g}let gt,Et,Ve,yt,Ge,it,Qt,A,S,B,re,pe,ie,Ie,Re,De,Fe,le,Pe,Ze,Ce,ye,We,Y;function _(){gt=new v4(C),gt.init(),ye=new $8(C,gt),Et=new c4(C,gt,e,ye),Ve=new Q8(C,gt),Et.reverseDepthBuffer&&p&&Ve.buffers.depth.setReversed(!0),yt=new g4(C),Ge=new j8,it=new _8(C,gt,Ve,Ge,Et,ye,yt),Qt=new p4(P),A=new b4(P),S=new L9(C),We=new l4(C,S),B=new y4(C,S,yt,We),re=new T4(C,B,S,yt),Pe=new x4(C,Et,it),De=new u4(Ge),pe=new W8(P,Qt,A,gt,Et,We,De),ie=new rm(P,Ge),Ie=new C8,Re=new Z8(gt),le=new a4(P,Qt,A,Ve,re,h,l),Fe=new B8(P,re,Et),Y=new om(C,yt,Et,Ve),Ze=new d4(C,gt,yt),Ce=new w4(C,gt,yt),yt.programs=pe.programs,P.capabilities=Et,P.extensions=gt,P.properties=Ge,P.renderLists=Ie,P.shadowMap=Fe,P.state=Ve,P.info=yt}_();const he=new im(P,C);this.xr=he,this.getContext=function(){return C},this.getContextAttributes=function(){return C.getContextAttributes()},this.forceContextLoss=function(){const g=gt.get("WEBGL_lose_context");g&&g.loseContext()},this.forceContextRestore=function(){const g=gt.get("WEBGL_lose_context");g&&g.restoreContext()},this.getPixelRatio=function(){return te},this.setPixelRatio=function(g){g!==void 0&&(te=g,this.setSize(ne,ve,!1))},this.getSize=function(g){return g.set(ne,ve)},this.setSize=function(g,z,H=!0){if(he.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}ne=g,ve=z,t.width=Math.floor(g*te),t.height=Math.floor(z*te),H===!0&&(t.style.width=g+"px",t.style.height=z+"px"),this.setViewport(0,0,g,z)},this.getDrawingBufferSize=function(g){return g.set(ne*te,ve*te).floor()},this.setDrawingBufferSize=function(g,z,H){ne=g,ve=z,te=H,t.width=Math.floor(g*H),t.height=Math.floor(z*H),this.setViewport(0,0,g,z)},this.getCurrentViewport=function(g){return g.copy(F)},this.getViewport=function(g){return g.copy(je)},this.setViewport=function(g,z,H,I){g.isVector4?je.set(g.x,g.y,g.z,g.w):je.set(g,z,H,I),Ve.viewport(F.copy(je).multiplyScalar(te).round())},this.getScissor=function(g){return g.copy(Ke)},this.setScissor=function(g,z,H,I){g.isVector4?Ke.set(g.x,g.y,g.z,g.w):Ke.set(g,z,H,I),Ve.scissor(K.copy(Ke).multiplyScalar(te).round())},this.getScissorTest=function(){return ut},this.setScissorTest=function(g){Ve.setScissorTest(ut=g)},this.setOpaqueSort=function(g){Te=g},this.setTransparentSort=function(g){Le=g},this.getClearColor=function(g){return g.copy(le.getClearColor())},this.setClearColor=function(){le.setClearColor(...arguments)},this.getClearAlpha=function(){return le.getClearAlpha()},this.setClearAlpha=function(){le.setClearAlpha(...arguments)},this.clear=function(g=!0,z=!0,H=!0){let I=0;if(g){let E=!1;if(G!==null){const U=G.texture.format;E=U===Cc||U===Vc||U===jc}if(E){const U=G.texture.type,k=U===Si||U===Os||U===co||U===uo||U===Dc||U===Wc,J=le.getClearColor(),$=le.getClearAlpha(),oe=J.r,ae=J.g,ce=J.b;k?(v[0]=oe,v[1]=ae,v[2]=ce,v[3]=$,C.clearBufferuiv(C.COLOR,0,v)):(x[0]=oe,x[1]=ae,x[2]=ce,x[3]=$,C.clearBufferiv(C.COLOR,0,x))}else I|=C.COLOR_BUFFER_BIT}z&&(I|=C.DEPTH_BUFFER_BIT),H&&(I|=C.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),C.clear(I)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",He,!1),t.removeEventListener("webglcontextrestored",be,!1),t.removeEventListener("webglcontextcreationerror",de,!1),le.dispose(),Ie.dispose(),Re.dispose(),Ge.dispose(),Qt.dispose(),A.dispose(),re.dispose(),We.dispose(),Y.dispose(),pe.dispose(),he.dispose(),he.removeEventListener("sessionstart",Oo),he.removeEventListener("sessionend",zo),Mi.stop()};function He(g){g.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),j=!0}function be(){console.log("THREE.WebGLRenderer: Context Restored."),j=!1;const g=yt.autoReset,z=Fe.enabled,H=Fe.autoUpdate,I=Fe.needsUpdate,E=Fe.type;_(),yt.autoReset=g,Fe.enabled=z,Fe.autoUpdate=H,Fe.needsUpdate=I,Fe.type=E}function de(g){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",g.statusMessage)}function Xe(g){const z=g.target;z.removeEventListener("dispose",Xe),nt(z)}function nt(g){jt(g),Ge.remove(g)}function jt(g){const z=Ge.get(g).programs;z!==void 0&&(z.forEach(function(H){pe.releaseProgram(H)}),g.isShaderMaterial&&pe.releaseShaderCache(g))}this.renderBufferDirect=function(g,z,H,I,E,U){z===null&&(z=Nt);const k=E.isMesh&&E.matrixWorld.determinant()<0,J=D0(g,z,H,I,E);Ve.setMaterial(I,k);let $=H.index,oe=1;if(I.wireframe===!0){if($=B.getWireframeAttribute(H),$===void 0)return;oe=2}const ae=H.drawRange,ce=H.attributes.position;let fe=ae.start*oe,we=(ae.start+ae.count)*oe;U!==null&&(fe=Math.max(fe,U.start*oe),we=Math.min(we,(U.start+U.count)*oe)),$!==null?(fe=Math.max(fe,0),we=Math.min(we,$.count)):ce!=null&&(fe=Math.max(fe,0),we=Math.min(we,ce.count));const Oe=we-fe;if(Oe<0||Oe===1/0)return;We.setup(E,I,J,H,$);let Ye,ke=Ze;if($!==null&&(Ye=S.get($),ke=Ce,ke.setIndex(Ye)),E.isMesh)I.wireframe===!0?(Ve.setLineWidth(I.wireframeLinewidth*ft()),ke.setMode(C.LINES)):ke.setMode(C.TRIANGLES);else if(E.isLine){let Ee=I.linewidth;Ee===void 0&&(Ee=1),Ve.setLineWidth(Ee*ft()),E.isLineSegments?ke.setMode(C.LINES):E.isLineLoop?ke.setMode(C.LINE_LOOP):ke.setMode(C.LINE_STRIP)}else E.isPoints?ke.setMode(C.POINTS):E.isSprite&&ke.setMode(C.TRIANGLES);if(E.isBatchedMesh)if(E._multiDrawInstances!==null)vr("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),ke.renderMultiDrawInstances(E._multiDrawStarts,E._multiDrawCounts,E._multiDrawCount,E._multiDrawInstances);else if(gt.get("WEBGL_multi_draw"))ke.renderMultiDraw(E._multiDrawStarts,E._multiDrawCounts,E._multiDrawCount);else{const Ee=E._multiDrawStarts,$e=E._multiDrawCounts,ze=E._multiDrawCount,xt=$?S.get($).bytesPerElement:1,tn=Ge.get(I).currentProgram.getUniforms();for(let Tt=0;Tt<ze;Tt++)tn.setValue(C,"_gl_DrawID",Tt),ke.render(Ee[Tt]/xt,$e[Tt])}else if(E.isInstancedMesh)ke.renderInstances(fe,Oe,E.count);else if(H.isInstancedBufferGeometry){const Ee=H._maxInstanceCount!==void 0?H._maxInstanceCount:1/0,$e=Math.min(H.instanceCount,Ee);ke.renderInstances(fe,Oe,$e)}else ke.render(fe,Oe)};function Pt(g,z,H){g.transparent===!0&&g.side===gi&&g.forceSinglePass===!1?(g.side=qn,g.needsUpdate=!0,js(g,z,H),g.side=Ui,g.needsUpdate=!0,js(g,z,H),g.side=gi):js(g,z,H)}this.compile=function(g,z,H=null){H===null&&(H=g),f=Re.get(H),f.init(z),O.push(f),H.traverseVisible(function(E){E.isLight&&E.layers.test(z.layers)&&(f.pushLight(E),E.castShadow&&f.pushShadow(E))}),g!==H&&g.traverseVisible(function(E){E.isLight&&E.layers.test(z.layers)&&(f.pushLight(E),E.castShadow&&f.pushShadow(E))}),f.setupLights();const I=new Set;return g.traverse(function(E){if(!(E.isMesh||E.isPoints||E.isLine||E.isSprite))return;const U=E.material;if(U)if(Array.isArray(U))for(let k=0;k<U.length;k++){const J=U[k];Pt(J,H,E),I.add(J)}else Pt(U,H,E),I.add(U)}),f=O.pop(),I},this.compileAsync=function(g,z,H=null){const I=this.compile(g,z,H);return new Promise(E=>{function U(){if(I.forEach(function(k){Ge.get(k).currentProgram.isReady()&&I.delete(k)}),I.size===0){E(g);return}setTimeout(U,10)}gt.get("KHR_parallel_shader_compile")!==null?U():setTimeout(U,10)})};let Yn=null;function ni(g){Yn&&Yn(g)}function Oo(){Mi.stop()}function zo(){Mi.start()}const Mi=new k2;Mi.setAnimationLoop(ni),typeof self<"u"&&Mi.setContext(self),this.setAnimationLoop=function(g){Yn=g,he.setAnimationLoop(g),g===null?Mi.stop():Mi.start()},he.addEventListener("sessionstart",Oo),he.addEventListener("sessionend",zo),this.render=function(g,z){if(z!==void 0&&z.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(j===!0)return;if(g.matrixWorldAutoUpdate===!0&&g.updateMatrixWorld(),z.parent===null&&z.matrixWorldAutoUpdate===!0&&z.updateMatrixWorld(),he.enabled===!0&&he.isPresenting===!0&&(he.cameraAutoUpdate===!0&&he.updateCamera(z),z=he.getCamera()),g.isScene===!0&&g.onBeforeRender(P,g,z,G),f=Re.get(g,O.length),f.init(z),O.push(f),Ae.multiplyMatrices(z.projectionMatrix,z.matrixWorldInverse),se.setFromProjectionMatrix(Ae),xe=this.localClippingEnabled,ge=De.init(this.clippingPlanes,xe),m=Ie.get(g,N.length),m.init(),N.push(m),he.enabled===!0&&he.isPresenting===!0){const U=P.xr.getDepthSensingMesh();U!==null&&Xr(U,z,-1/0,P.sortObjects)}Xr(g,z,0,P.sortObjects),m.finish(),P.sortObjects===!0&&m.sort(Te,Le),Ht=he.enabled===!1||he.isPresenting===!1||he.hasDepthSensing()===!1,Ht&&le.addToRenderList(m,g),this.info.render.frame++,ge===!0&&De.beginShadows();const H=f.state.shadowsArray;Fe.render(H,g,z),ge===!0&&De.endShadows(),this.info.autoReset===!0&&this.info.reset();const I=m.opaque,E=m.transmissive;if(f.setupLights(),z.isArrayCamera){const U=z.cameras;if(E.length>0)for(let k=0,J=U.length;k<J;k++){const $=U[k];Ho(I,E,g,$)}Ht&&le.render(g);for(let k=0,J=U.length;k<J;k++){const $=U[k];Ir(m,g,$,$.viewport)}}else E.length>0&&Ho(I,E,g,z),Ht&&le.render(g),Ir(m,g,z);G!==null&&V===0&&(it.updateMultisampleRenderTarget(G),it.updateRenderTargetMipmap(G)),g.isScene===!0&&g.onAfterRender(P,g,z),We.resetDefaultState(),M=-1,R=null,O.pop(),O.length>0?(f=O[O.length-1],ge===!0&&De.setGlobalState(P.clippingPlanes,f.state.camera)):f=null,N.pop(),N.length>0?m=N[N.length-1]:m=null};function Xr(g,z,H,I){if(g.visible===!1)return;if(g.layers.test(z.layers)){if(g.isGroup)H=g.renderOrder;else if(g.isLOD)g.autoUpdate===!0&&g.update(z);else if(g.isLight)f.pushLight(g),g.castShadow&&f.pushShadow(g);else if(g.isSprite){if(!g.frustumCulled||se.intersectsSprite(g)){I&&Ue.setFromMatrixPosition(g.matrixWorld).applyMatrix4(Ae);const k=re.update(g),J=g.material;J.visible&&m.push(g,k,J,H,Ue.z,null)}}else if((g.isMesh||g.isLine||g.isPoints)&&(!g.frustumCulled||se.intersectsObject(g))){const k=re.update(g),J=g.material;if(I&&(g.boundingSphere!==void 0?(g.boundingSphere===null&&g.computeBoundingSphere(),Ue.copy(g.boundingSphere.center)):(k.boundingSphere===null&&k.computeBoundingSphere(),Ue.copy(k.boundingSphere.center)),Ue.applyMatrix4(g.matrixWorld).applyMatrix4(Ae)),Array.isArray(J)){const $=k.groups;for(let oe=0,ae=$.length;oe<ae;oe++){const ce=$[oe],fe=J[ce.materialIndex];fe&&fe.visible&&m.push(g,k,fe,H,Ue.z,ce)}}else J.visible&&m.push(g,k,J,H,Ue.z,null)}}const U=g.children;for(let k=0,J=U.length;k<J;k++)Xr(U[k],z,H,I)}function Ir(g,z,H,I){const E=g.opaque,U=g.transmissive,k=g.transparent;f.setupLightsView(H),ge===!0&&De.setGlobalState(P.clippingPlanes,H),I&&Ve.viewport(F.copy(I)),E.length>0&&Ws(E,z,H),U.length>0&&Ws(U,z,H),k.length>0&&Ws(k,z,H),Ve.buffers.depth.setTest(!0),Ve.buffers.depth.setMask(!0),Ve.buffers.color.setMask(!0),Ve.setPolygonOffset(!1)}function Ho(g,z,H,I){if((H.isScene===!0?H.overrideMaterial:null)!==null)return;f.state.transmissionRenderTarget[I.id]===void 0&&(f.state.transmissionRenderTarget[I.id]=new zs(1,1,{generateMipmaps:!0,type:gt.has("EXT_color_buffer_half_float")||gt.has("EXT_color_buffer_float")?Ci:Si,minFilter:Ti,samples:4,stencilBuffer:r,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:wt.workingColorSpace}));const U=f.state.transmissionRenderTarget[I.id],k=I.viewport||F;U.setSize(k.z*P.transmissionResolutionScale,k.w*P.transmissionResolutionScale);const J=P.getRenderTarget(),$=P.getActiveCubeFace(),oe=P.getActiveMipmapLevel();P.setRenderTarget(U),P.getClearColor(ee),ue=P.getClearAlpha(),ue<1&&P.setClearColor(16777215,.5),P.clear(),Ht&&le.render(H);const ae=P.toneMapping;P.toneMapping=ps;const ce=I.viewport;if(I.viewport!==void 0&&(I.viewport=void 0),f.setupLightsView(I),ge===!0&&De.setGlobalState(P.clippingPlanes,I),Ws(g,H,I),it.updateMultisampleRenderTarget(U),it.updateRenderTargetMipmap(U),gt.has("WEBGL_multisampled_render_to_texture")===!1){let fe=!1;for(let we=0,Oe=z.length;we<Oe;we++){const Ye=z[we],ke=Ye.object,Ee=Ye.geometry,$e=Ye.material,ze=Ye.group;if($e.side===gi&&ke.layers.test(I.layers)){const xt=$e.side;$e.side=qn,$e.needsUpdate=!0,Eo(ke,H,I,Ee,$e,ze),$e.side=xt,$e.needsUpdate=!0,fe=!0}}fe===!0&&(it.updateMultisampleRenderTarget(U),it.updateRenderTargetMipmap(U))}P.setRenderTarget(J,$,oe),P.setClearColor(ee,ue),ce!==void 0&&(I.viewport=ce),P.toneMapping=ae}function Ws(g,z,H){const I=z.isScene===!0?z.overrideMaterial:null;for(let E=0,U=g.length;E<U;E++){const k=g[E],J=k.object,$=k.geometry,oe=k.group;let ae=k.material;ae.allowOverride===!0&&I!==null&&(ae=I),J.layers.test(H.layers)&&Eo(J,z,H,$,ae,oe)}}function Eo(g,z,H,I,E,U){g.onBeforeRender(P,z,H,I,E,U),g.modelViewMatrix.multiplyMatrices(H.matrixWorldInverse,g.matrixWorld),g.normalMatrix.getNormalMatrix(g.modelViewMatrix),E.onBeforeRender(P,z,H,I,g,U),E.transparent===!0&&E.side===gi&&E.forceSinglePass===!1?(E.side=qn,E.needsUpdate=!0,P.renderBufferDirect(H,z,I,E,g,U),E.side=Ui,E.needsUpdate=!0,P.renderBufferDirect(H,z,I,E,g,U),E.side=gi):P.renderBufferDirect(H,z,I,E,g,U),g.onAfterRender(P,z,H,I,E,U)}function js(g,z,H){z.isScene!==!0&&(z=Nt);const I=Ge.get(g),E=f.state.lights,U=f.state.shadowsArray,k=E.state.version,J=pe.getParameters(g,E.state,U,z,H),$=pe.getProgramCacheKey(J);let oe=I.programs;I.environment=g.isMeshStandardMaterial?z.environment:null,I.fog=z.fog,I.envMap=(g.isMeshStandardMaterial?A:Qt).get(g.envMap||I.environment),I.envMapRotation=I.environment!==null&&g.envMap===null?z.environmentRotation:g.envMapRotation,oe===void 0&&(g.addEventListener("dispose",Xe),oe=new Map,I.programs=oe);let ae=oe.get($);if(ae!==void 0){if(I.currentProgram===ae&&I.lightsStateVersion===k)return Wr(g,J),ae}else J.uniforms=pe.getUniforms(g),g.onBeforeCompile(J,P),ae=pe.acquireProgram(J,$),oe.set($,ae),I.uniforms=J.uniforms;const ce=I.uniforms;return(!g.isShaderMaterial&&!g.isRawShaderMaterial||g.clipping===!0)&&(ce.clippingPlanes=De.uniform),Wr(g,J),I.needsLights=Ki(g),I.lightsStateVersion=k,I.needsLights&&(ce.ambientLightColor.value=E.state.ambient,ce.lightProbe.value=E.state.probe,ce.directionalLights.value=E.state.directional,ce.directionalLightShadows.value=E.state.directionalShadow,ce.spotLights.value=E.state.spot,ce.spotLightShadows.value=E.state.spotShadow,ce.rectAreaLights.value=E.state.rectArea,ce.ltc_1.value=E.state.rectAreaLTC1,ce.ltc_2.value=E.state.rectAreaLTC2,ce.pointLights.value=E.state.point,ce.pointLightShadows.value=E.state.pointShadow,ce.hemisphereLights.value=E.state.hemi,ce.directionalShadowMap.value=E.state.directionalShadowMap,ce.directionalShadowMatrix.value=E.state.directionalShadowMatrix,ce.spotShadowMap.value=E.state.spotShadowMap,ce.spotLightMatrix.value=E.state.spotLightMatrix,ce.spotLightMap.value=E.state.spotLightMap,ce.pointShadowMap.value=E.state.pointShadowMap,ce.pointShadowMatrix.value=E.state.pointShadowMatrix),I.currentProgram=ae,I.uniformsList=null,ae}function Dr(g){if(g.uniformsList===null){const z=g.currentProgram.getUniforms();g.uniformsList=ja.seqWithValue(z.seq,g.uniforms)}return g.uniformsList}function Wr(g,z){const H=Ge.get(g);H.outputColorSpace=z.outputColorSpace,H.batching=z.batching,H.batchingColor=z.batchingColor,H.instancing=z.instancing,H.instancingColor=z.instancingColor,H.instancingMorph=z.instancingMorph,H.skinning=z.skinning,H.morphTargets=z.morphTargets,H.morphNormals=z.morphNormals,H.morphColors=z.morphColors,H.morphTargetsCount=z.morphTargetsCount,H.numClippingPlanes=z.numClippingPlanes,H.numIntersection=z.numClipIntersection,H.vertexAlphas=z.vertexAlphas,H.vertexTangents=z.vertexTangents,H.toneMapping=z.toneMapping}function D0(g,z,H,I,E){z.isScene!==!0&&(z=Nt),it.resetTextureUnits();const U=z.fog,k=I.isMeshStandardMaterial?z.environment:null,J=G===null?P.outputColorSpace:G.isXRRenderTarget===!0?G.texture.colorSpace:Sn,$=(I.isMeshStandardMaterial?A:Qt).get(I.envMap||k),oe=I.vertexColors===!0&&!!H.attributes.color&&H.attributes.color.itemSize===4,ae=!!H.attributes.tangent&&(!!I.normalMap||I.anisotropy>0),ce=!!H.morphAttributes.position,fe=!!H.morphAttributes.normal,we=!!H.morphAttributes.color;let Oe=ps;I.toneMapped&&(G===null||G.isXRRenderTarget===!0)&&(Oe=P.toneMapping);const Ye=H.morphAttributes.position||H.morphAttributes.normal||H.morphAttributes.color,ke=Ye!==void 0?Ye.length:0,Ee=Ge.get(I),$e=f.state.lights;if(ge===!0&&(xe===!0||g!==R)){const Vt=g===R&&I.id===M;De.setState(I,g,Vt)}let ze=!1;I.version===Ee.__version?(Ee.needsLights&&Ee.lightsStateVersion!==$e.state.version||Ee.outputColorSpace!==J||E.isBatchedMesh&&Ee.batching===!1||!E.isBatchedMesh&&Ee.batching===!0||E.isBatchedMesh&&Ee.batchingColor===!0&&E.colorTexture===null||E.isBatchedMesh&&Ee.batchingColor===!1&&E.colorTexture!==null||E.isInstancedMesh&&Ee.instancing===!1||!E.isInstancedMesh&&Ee.instancing===!0||E.isSkinnedMesh&&Ee.skinning===!1||!E.isSkinnedMesh&&Ee.skinning===!0||E.isInstancedMesh&&Ee.instancingColor===!0&&E.instanceColor===null||E.isInstancedMesh&&Ee.instancingColor===!1&&E.instanceColor!==null||E.isInstancedMesh&&Ee.instancingMorph===!0&&E.morphTexture===null||E.isInstancedMesh&&Ee.instancingMorph===!1&&E.morphTexture!==null||Ee.envMap!==$||I.fog===!0&&Ee.fog!==U||Ee.numClippingPlanes!==void 0&&(Ee.numClippingPlanes!==De.numPlanes||Ee.numIntersection!==De.numIntersection)||Ee.vertexAlphas!==oe||Ee.vertexTangents!==ae||Ee.morphTargets!==ce||Ee.morphNormals!==fe||Ee.morphColors!==we||Ee.toneMapping!==Oe||Ee.morphTargetsCount!==ke)&&(ze=!0):(ze=!0,Ee.__version=I.version);let xt=Ee.currentProgram;ze===!0&&(xt=js(I,z,E));let tn=!1,Tt=!1,bt=!1;const Je=xt.getUniforms(),Jt=Ee.uniforms;if(Ve.useProgram(xt.program)&&(tn=!0,Tt=!0,bt=!0),I.id!==M&&(M=I.id,Tt=!0),tn||R!==g){Ve.buffers.depth.getReversed()?(Se.copy(g.projectionMatrix),r7(Se),o7(Se),Je.setValue(C,"projectionMatrix",Se)):Je.setValue(C,"projectionMatrix",g.projectionMatrix),Je.setValue(C,"viewMatrix",g.matrixWorldInverse);const nn=Je.map.cameraPosition;nn!==void 0&&nn.setValue(C,mt.setFromMatrixPosition(g.matrixWorld)),Et.logarithmicDepthBuffer&&Je.setValue(C,"logDepthBufFC",2/(Math.log(g.far+1)/Math.LN2)),(I.isMeshPhongMaterial||I.isMeshToonMaterial||I.isMeshLambertMaterial||I.isMeshBasicMaterial||I.isMeshStandardMaterial||I.isShaderMaterial)&&Je.setValue(C,"isOrthographic",g.isOrthographicCamera===!0),R!==g&&(R=g,Tt=!0,bt=!0)}if(E.isSkinnedMesh){Je.setOptional(C,E,"bindMatrix"),Je.setOptional(C,E,"bindMatrixInverse");const Vt=E.skeleton;Vt&&(Vt.boneTexture===null&&Vt.computeBoneTexture(),Je.setValue(C,"boneTexture",Vt.boneTexture,it))}E.isBatchedMesh&&(Je.setOptional(C,E,"batchingTexture"),Je.setValue(C,"batchingTexture",E._matricesTexture,it),Je.setOptional(C,E,"batchingIdTexture"),Je.setValue(C,"batchingIdTexture",E._indirectTexture,it),Je.setOptional(C,E,"batchingColorTexture"),E._colorsTexture!==null&&Je.setValue(C,"batchingColorTexture",E._colorsTexture,it));const un=H.morphAttributes;if((un.position!==void 0||un.normal!==void 0||un.color!==void 0)&&Pe.update(E,H,xt),(Tt||Ee.receiveShadow!==E.receiveShadow)&&(Ee.receiveShadow=E.receiveShadow,Je.setValue(C,"receiveShadow",E.receiveShadow)),I.isMeshGouraudMaterial&&I.envMap!==null&&(Jt.envMap.value=$,Jt.flipEnvMap.value=$.isCubeTexture&&$.isRenderTargetTexture===!1?-1:1),I.isMeshStandardMaterial&&I.envMap===null&&z.environment!==null&&(Jt.envMapIntensity.value=z.environmentIntensity),Tt&&(Je.setValue(C,"toneMappingExposure",P.toneMappingExposure),Ee.needsLights&&Oi(Jt,bt),U&&I.fog===!0&&ie.refreshFogUniforms(Jt,U),ie.refreshMaterialUniforms(Jt,I,te,ve,f.state.transmissionRenderTarget[g.id]),ja.upload(C,Dr(Ee),Jt,it)),I.isShaderMaterial&&I.uniformsNeedUpdate===!0&&(ja.upload(C,Dr(Ee),Jt,it),I.uniformsNeedUpdate=!1),I.isSpriteMaterial&&Je.setValue(C,"center",E.center),Je.setValue(C,"modelViewMatrix",E.modelViewMatrix),Je.setValue(C,"normalMatrix",E.normalMatrix),Je.setValue(C,"modelMatrix",E.matrixWorld),I.isShaderMaterial||I.isRawShaderMaterial){const Vt=I.uniformsGroups;for(let nn=0,W0=Vt.length;nn<W0;nn++){const ms=Vt[nn];Y.update(ms,xt),Y.bind(ms,xt)}}return xt}function Oi(g,z){g.ambientLightColor.needsUpdate=z,g.lightProbe.needsUpdate=z,g.directionalLights.needsUpdate=z,g.directionalLightShadows.needsUpdate=z,g.pointLights.needsUpdate=z,g.pointLightShadows.needsUpdate=z,g.spotLights.needsUpdate=z,g.spotLightShadows.needsUpdate=z,g.rectAreaLights.needsUpdate=z,g.hemisphereLights.needsUpdate=z}function Ki(g){return g.isMeshLambertMaterial||g.isMeshToonMaterial||g.isMeshPhongMaterial||g.isMeshStandardMaterial||g.isShadowMaterial||g.isShaderMaterial&&g.lights===!0}this.getActiveCubeFace=function(){return D},this.getActiveMipmapLevel=function(){return V},this.getRenderTarget=function(){return G},this.setRenderTargetTextures=function(g,z,H){const I=Ge.get(g);I.__autoAllocateDepthBuffer=g.resolveDepthBuffer===!1,I.__autoAllocateDepthBuffer===!1&&(I.__useRenderToTexture=!1),Ge.get(g.texture).__webglTexture=z,Ge.get(g.depthTexture).__webglTexture=I.__autoAllocateDepthBuffer?void 0:H,I.__hasExternalTextures=!0},this.setRenderTargetFramebuffer=function(g,z){const H=Ge.get(g);H.__webglFramebuffer=z,H.__useDefaultFramebuffer=z===void 0};const w=C.createFramebuffer();this.setRenderTarget=function(g,z=0,H=0){G=g,D=z,V=H;let I=!0,E=null,U=!1,k=!1;if(g){const $=Ge.get(g);if($.__useDefaultFramebuffer!==void 0)Ve.bindFramebuffer(C.FRAMEBUFFER,null),I=!1;else if($.__webglFramebuffer===void 0)it.setupRenderTarget(g);else if($.__hasExternalTextures)it.rebindTextures(g,Ge.get(g.texture).__webglTexture,Ge.get(g.depthTexture).__webglTexture);else if(g.depthBuffer){const ce=g.depthTexture;if($.__boundDepthTexture!==ce){if(ce!==null&&Ge.has(ce)&&(g.width!==ce.image.width||g.height!==ce.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");it.setupDepthRenderbuffer(g)}}const oe=g.texture;(oe.isData3DTexture||oe.isDataArrayTexture||oe.isCompressedArrayTexture)&&(k=!0);const ae=Ge.get(g).__webglFramebuffer;g.isWebGLCubeRenderTarget?(Array.isArray(ae[z])?E=ae[z][H]:E=ae[z],U=!0):g.samples>0&&it.useMultisampledRTT(g)===!1?E=Ge.get(g).__webglMultisampledFramebuffer:Array.isArray(ae)?E=ae[H]:E=ae,F.copy(g.viewport),K.copy(g.scissor),Q=g.scissorTest}else F.copy(je).multiplyScalar(te).floor(),K.copy(Ke).multiplyScalar(te).floor(),Q=ut;if(H!==0&&(E=w),Ve.bindFramebuffer(C.FRAMEBUFFER,E)&&I&&Ve.drawBuffers(g,E),Ve.viewport(F),Ve.scissor(K),Ve.setScissorTest(Q),U){const $=Ge.get(g.texture);C.framebufferTexture2D(C.FRAMEBUFFER,C.COLOR_ATTACHMENT0,C.TEXTURE_CUBE_MAP_POSITIVE_X+z,$.__webglTexture,H)}else if(k){const $=Ge.get(g.texture),oe=z;C.framebufferTextureLayer(C.FRAMEBUFFER,C.COLOR_ATTACHMENT0,$.__webglTexture,H,oe)}else if(g!==null&&H!==0){const $=Ge.get(g.texture);C.framebufferTexture2D(C.FRAMEBUFFER,C.COLOR_ATTACHMENT0,C.TEXTURE_2D,$.__webglTexture,H)}M=-1},this.readRenderTargetPixels=function(g,z,H,I,E,U,k,J=0){if(!(g&&g.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let $=Ge.get(g).__webglFramebuffer;if(g.isWebGLCubeRenderTarget&&k!==void 0&&($=$[k]),$){Ve.bindFramebuffer(C.FRAMEBUFFER,$);try{const oe=g.textures[J],ae=oe.format,ce=oe.type;if(!Et.textureFormatReadable(ae)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!Et.textureTypeReadable(ce)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}z>=0&&z<=g.width-I&&H>=0&&H<=g.height-E&&(g.textures.length>1&&C.readBuffer(C.COLOR_ATTACHMENT0+J),C.readPixels(z,H,I,E,ye.convert(ae),ye.convert(ce),U))}finally{const oe=G!==null?Ge.get(G).__webglFramebuffer:null;Ve.bindFramebuffer(C.FRAMEBUFFER,oe)}}},this.readRenderTargetPixelsAsync=async function(g,z,H,I,E,U,k,J=0){if(!(g&&g.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let $=Ge.get(g).__webglFramebuffer;if(g.isWebGLCubeRenderTarget&&k!==void 0&&($=$[k]),$)if(z>=0&&z<=g.width-I&&H>=0&&H<=g.height-E){Ve.bindFramebuffer(C.FRAMEBUFFER,$);const oe=g.textures[J],ae=oe.format,ce=oe.type;if(!Et.textureFormatReadable(ae))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!Et.textureTypeReadable(ce))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");const fe=C.createBuffer();C.bindBuffer(C.PIXEL_PACK_BUFFER,fe),C.bufferData(C.PIXEL_PACK_BUFFER,U.byteLength,C.STREAM_READ),g.textures.length>1&&C.readBuffer(C.COLOR_ATTACHMENT0+J),C.readPixels(z,H,I,E,ye.convert(ae),ye.convert(ce),0);const we=G!==null?Ge.get(G).__webglFramebuffer:null;Ve.bindFramebuffer(C.FRAMEBUFFER,we);const Oe=C.fenceSync(C.SYNC_GPU_COMMANDS_COMPLETE,0);return C.flush(),await s7(C,Oe,4),C.bindBuffer(C.PIXEL_PACK_BUFFER,fe),C.getBufferSubData(C.PIXEL_PACK_BUFFER,0,U),C.deleteBuffer(fe),C.deleteSync(Oe),U}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")},this.copyFramebufferToTexture=function(g,z=null,H=0){const I=Math.pow(2,-H),E=Math.floor(g.image.width*I),U=Math.floor(g.image.height*I),k=z!==null?z.x:0,J=z!==null?z.y:0;it.setTexture2D(g,0),C.copyTexSubImage2D(C.TEXTURE_2D,H,0,0,k,J,E,U),Ve.unbindTexture()};const L=C.createFramebuffer(),X=C.createFramebuffer();this.copyTextureToTexture=function(g,z,H=null,I=null,E=0,U=null){U===null&&(E!==0?(vr("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),U=E,E=0):U=0);let k,J,$,oe,ae,ce,fe,we,Oe;const Ye=g.isCompressedTexture?g.mipmaps[U]:g.image;if(H!==null)k=H.max.x-H.min.x,J=H.max.y-H.min.y,$=H.isBox3?H.max.z-H.min.z:1,oe=H.min.x,ae=H.min.y,ce=H.isBox3?H.min.z:0;else{const un=Math.pow(2,-E);k=Math.floor(Ye.width*un),J=Math.floor(Ye.height*un),g.isDataArrayTexture?$=Ye.depth:g.isData3DTexture?$=Math.floor(Ye.depth*un):$=1,oe=0,ae=0,ce=0}I!==null?(fe=I.x,we=I.y,Oe=I.z):(fe=0,we=0,Oe=0);const ke=ye.convert(z.format),Ee=ye.convert(z.type);let $e;z.isData3DTexture?(it.setTexture3D(z,0),$e=C.TEXTURE_3D):z.isDataArrayTexture||z.isCompressedArrayTexture?(it.setTexture2DArray(z,0),$e=C.TEXTURE_2D_ARRAY):(it.setTexture2D(z,0),$e=C.TEXTURE_2D),C.pixelStorei(C.UNPACK_FLIP_Y_WEBGL,z.flipY),C.pixelStorei(C.UNPACK_PREMULTIPLY_ALPHA_WEBGL,z.premultiplyAlpha),C.pixelStorei(C.UNPACK_ALIGNMENT,z.unpackAlignment);const ze=C.getParameter(C.UNPACK_ROW_LENGTH),xt=C.getParameter(C.UNPACK_IMAGE_HEIGHT),tn=C.getParameter(C.UNPACK_SKIP_PIXELS),Tt=C.getParameter(C.UNPACK_SKIP_ROWS),bt=C.getParameter(C.UNPACK_SKIP_IMAGES);C.pixelStorei(C.UNPACK_ROW_LENGTH,Ye.width),C.pixelStorei(C.UNPACK_IMAGE_HEIGHT,Ye.height),C.pixelStorei(C.UNPACK_SKIP_PIXELS,oe),C.pixelStorei(C.UNPACK_SKIP_ROWS,ae),C.pixelStorei(C.UNPACK_SKIP_IMAGES,ce);const Je=g.isDataArrayTexture||g.isData3DTexture,Jt=z.isDataArrayTexture||z.isData3DTexture;if(g.isDepthTexture){const un=Ge.get(g),Vt=Ge.get(z),nn=Ge.get(un.__renderTarget),W0=Ge.get(Vt.__renderTarget);Ve.bindFramebuffer(C.READ_FRAMEBUFFER,nn.__webglFramebuffer),Ve.bindFramebuffer(C.DRAW_FRAMEBUFFER,W0.__webglFramebuffer);for(let ms=0;ms<$;ms++)Je&&(C.framebufferTextureLayer(C.READ_FRAMEBUFFER,C.COLOR_ATTACHMENT0,Ge.get(g).__webglTexture,E,ce+ms),C.framebufferTextureLayer(C.DRAW_FRAMEBUFFER,C.COLOR_ATTACHMENT0,Ge.get(z).__webglTexture,U,Oe+ms)),C.blitFramebuffer(oe,ae,k,J,fe,we,k,J,C.DEPTH_BUFFER_BIT,C.NEAREST);Ve.bindFramebuffer(C.READ_FRAMEBUFFER,null),Ve.bindFramebuffer(C.DRAW_FRAMEBUFFER,null)}else if(E!==0||g.isRenderTargetTexture||Ge.has(g)){const un=Ge.get(g),Vt=Ge.get(z);Ve.bindFramebuffer(C.READ_FRAMEBUFFER,L),Ve.bindFramebuffer(C.DRAW_FRAMEBUFFER,X);for(let nn=0;nn<$;nn++)Je?C.framebufferTextureLayer(C.READ_FRAMEBUFFER,C.COLOR_ATTACHMENT0,un.__webglTexture,E,ce+nn):C.framebufferTexture2D(C.READ_FRAMEBUFFER,C.COLOR_ATTACHMENT0,C.TEXTURE_2D,un.__webglTexture,E),Jt?C.framebufferTextureLayer(C.DRAW_FRAMEBUFFER,C.COLOR_ATTACHMENT0,Vt.__webglTexture,U,Oe+nn):C.framebufferTexture2D(C.DRAW_FRAMEBUFFER,C.COLOR_ATTACHMENT0,C.TEXTURE_2D,Vt.__webglTexture,U),E!==0?C.blitFramebuffer(oe,ae,k,J,fe,we,k,J,C.COLOR_BUFFER_BIT,C.NEAREST):Jt?C.copyTexSubImage3D($e,U,fe,we,Oe+nn,oe,ae,k,J):C.copyTexSubImage2D($e,U,fe,we,oe,ae,k,J);Ve.bindFramebuffer(C.READ_FRAMEBUFFER,null),Ve.bindFramebuffer(C.DRAW_FRAMEBUFFER,null)}else Jt?g.isDataTexture||g.isData3DTexture?C.texSubImage3D($e,U,fe,we,Oe,k,J,$,ke,Ee,Ye.data):z.isCompressedArrayTexture?C.compressedTexSubImage3D($e,U,fe,we,Oe,k,J,$,ke,Ye.data):C.texSubImage3D($e,U,fe,we,Oe,k,J,$,ke,Ee,Ye):g.isDataTexture?C.texSubImage2D(C.TEXTURE_2D,U,fe,we,k,J,ke,Ee,Ye.data):g.isCompressedTexture?C.compressedTexSubImage2D(C.TEXTURE_2D,U,fe,we,Ye.width,Ye.height,ke,Ye.data):C.texSubImage2D(C.TEXTURE_2D,U,fe,we,k,J,ke,Ee,Ye);C.pixelStorei(C.UNPACK_ROW_LENGTH,ze),C.pixelStorei(C.UNPACK_IMAGE_HEIGHT,xt),C.pixelStorei(C.UNPACK_SKIP_PIXELS,tn),C.pixelStorei(C.UNPACK_SKIP_ROWS,Tt),C.pixelStorei(C.UNPACK_SKIP_IMAGES,bt),U===0&&z.generateMipmaps&&C.generateMipmap($e),Ve.unbindTexture()},this.copyTextureToTexture3D=function(g,z,H=null,I=null,E=0){return vr('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(g,z,H,I,E)},this.initRenderTarget=function(g){Ge.get(g).__webglFramebuffer===void 0&&it.setupRenderTarget(g)},this.initTexture=function(g){g.isCubeTexture?it.setTextureCube(g,0):g.isData3DTexture?it.setTexture3D(g,0):g.isDataArrayTexture||g.isCompressedArrayTexture?it.setTexture2DArray(g,0):it.setTexture2D(g,0),Ve.unbindTexture()},this.resetState=function(){D=0,V=0,G=null,Ve.reset(),We.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Fi}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=wt._getDrawingBufferColorSpace(e),t.unpackColorSpace=wt._getUnpackColorSpace()}}const Zr=new T;function Bn(i,e,t,n,s,r){const o=2*Math.PI*s/4,a=Math.max(r-2*s,0),l=Math.PI/4;Zr.copy(e),Zr[n]=0,Zr.normalize();const d=.5*o/(o+a),c=1-Zr.angleTo(i)/l;return Math.sign(Zr[t])===1?c*d:a/(o+a)+d+d*(1-c)}class lm extends ti{constructor(e=1,t=1,n=1,s=2,r=.1){if(s=s*2+1,r=Math.min(e/2,t/2,n/2,r),super(e,t,n,s,s,s),s===1)return;const o=this.toNonIndexed();this.index=null,this.attributes.position=o.attributes.position,this.attributes.normal=o.attributes.normal,this.attributes.uv=o.attributes.uv;const a=new T,l=new T,d=new T(e,t,n).divideScalar(2).subScalar(r),c=this.attributes.position.array,u=this.attributes.normal.array,p=this.attributes.uv.array,h=c.length/6,v=new T,x=.5/s;for(let m=0,f=0;m<c.length;m+=3,f+=2)switch(a.fromArray(c,m),l.copy(a),l.x-=Math.sign(l.x)*x,l.y-=Math.sign(l.y)*x,l.z-=Math.sign(l.z)*x,l.normalize(),c[m+0]=d.x*Math.sign(a.x)+l.x*r,c[m+1]=d.y*Math.sign(a.y)+l.y*r,c[m+2]=d.z*Math.sign(a.z)+l.z*r,u[m+0]=l.x,u[m+1]=l.y,u[m+2]=l.z,Math.floor(m/h)){case 0:v.set(1,0,0),p[f+0]=Bn(v,l,"z","y",r,n),p[f+1]=1-Bn(v,l,"y","z",r,t);break;case 1:v.set(-1,0,0),p[f+0]=1-Bn(v,l,"z","y",r,n),p[f+1]=1-Bn(v,l,"y","z",r,t);break;case 2:v.set(0,1,0),p[f+0]=1-Bn(v,l,"x","z",r,e),p[f+1]=Bn(v,l,"z","x",r,n);break;case 3:v.set(0,-1,0),p[f+0]=1-Bn(v,l,"x","z",r,e),p[f+1]=1-Bn(v,l,"z","x",r,n);break;case 4:v.set(0,0,1),p[f+0]=1-Bn(v,l,"x","y",r,e),p[f+1]=1-Bn(v,l,"y","x",r,t);break;case 5:v.set(0,0,-1),p[f+0]=Bn(v,l,"x","y",r,e),p[f+1]=1-Bn(v,l,"y","x",r,t);break}}}const kr=new T,Jr=new T,D1=new rt;class dm extends Kc{constructor(e,t=1,n=16711680){const s=new zn,r=e.geometry.attributes.normal.count,o=new xn(r*2*3,3);s.setAttribute("position",o),super(s,new vo({color:n,toneMapped:!1})),this.object=e,this.size=t,this.type="VertexNormalsHelper",this.matrixAutoUpdate=!1,this.isVertexNormalsHelper=!0,this.update()}update(){this.object.updateMatrixWorld(!0),D1.getNormalMatrix(this.object.matrixWorld);const e=this.object.matrixWorld,t=this.geometry.attributes.position,n=this.object.geometry;if(n){const s=n.attributes.position,r=n.attributes.normal;let o=0;for(let a=0,l=s.count;a<l;a++)kr.fromBufferAttribute(s,a).applyMatrix4(e),Jr.fromBufferAttribute(r,a),Jr.applyMatrix3(D1).normalize().multiplyScalar(this.size).add(kr),t.setXYZ(o,kr.x,kr.y,kr.z),o=o+1,t.setXYZ(o,Jr.x,Jr.y,Jr.z),o=o+1}t.needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}class cm{constructor({scene:e,joints:t=[]}){this.#e=e,this.#t=t}#e;#t;#n=new Map;#a=new WeakMap;#o=new WeakMap;initialize(){this.#e.forEachCollider(e=>{let t=this.#o.get(e.parent());t||(t=Math.round(16777215*Math.random()),this.#o.set(e.parent(),t));const n=new vo({color:t}),s=e.shapeType(),r=e.translation(),o=e.rotation();let a;if(s===0){const l=e.radius();a=new ka(l,8,8)}else if(s===1){const l=e.halfExtents();a=new ti(l.x*2,l.y*2,l.z*2)}else if(s===6||s===9){const l=e.vertices(),d=e.indices();a=new zn,a.setIndex(new Uc(d,1)),a.setAttribute("position",new xn(l,3))}else if(s===10){const l=e.radius(),d=e.halfHeight()*2;a=new x0(l,l,d,6)}else if(s===12){const l=e.halfExtents();a=new lm(l.x*2,l.y*2,l.z*2,1,e.roundRadius())}else console.warn("Unsupported collider shape:",s);if(a){a.computeVertexNormals();const l=new Kc(new G7(a),n);l.position.set(r.x,r.y,r.z),l.quaternion.set(o.x,o.y,o.z,o.w),l.material.depthTest=!1,l.material.transparent=!0,l.material.opacity=.5,this.#e.addObject(l);const d=new Kt(a);d.position.copy(r),d.quaternion.copy(o);const c=new dm(d,.025);c.material.transparent=!0,c.material.opacity=.25,this.#e.addObject(c),this.#n.set(e,{wireframe:l,normalsHelper:c,normalMesh:d})}}),this.#t.forEach(({joint:e,jointData:t})=>{const n=new ka(5e-4,4,4),s=e.body1(),r=e.body2(),o=new qi({color:this.#o.get(s),depthTest:!1}),a=new qi({color:this.#o.get(r),depthTest:!1}),l=new Kt(n,o),d=new Kt(n,a),c=tr(e.body1(),e.anchor1()),u=tr(e.body2(),e.anchor2());l.position.copy(c),d.position.copy(u),this.#e.addObject(l),this.#e.addObject(d);const p={anchor1Mesh:l,anchor2Mesh:d};if(t.axis!==void 0){const h=tr(e.body1(),e.anchor1()),v=t.axis.clone().applyQuaternion(e.body1().rotation()),x=h.clone().add(v.multiplyScalar(.02)),m=new zn().setFromPoints([h,x]),f=new vo({color:16776960,depthTest:!1}),N=new g0(m,f);this.#e.addObject(N),p.axisLine=N,p.axis=t.axis}this.#a.set(e,p)})}update(){this.#e.forEachCollider(e=>{const t=this.#n.get(e);if(t){const{wireframe:n,normalsHelper:s,normalMesh:r}=t,o=e.translation(),a=e.rotation();n.position.set(o.x,o.y,o.z),n.quaternion.set(a.x,a.y,a.z,a.w);const l=e.parent().isSleeping();r.position.set(o.x,o.y,o.z),r.quaternion.set(a.x,a.y,a.z,a.w);const d=l?0:this.#o.get(e.parent());s.material.color.setHex(d),s.update()}}),this.#t.forEach(({joint:e})=>{const{anchor1Mesh:t,anchor2Mesh:n,axisLine:s,axis:r}=this.#a.get(e),o=tr(e.body1(),e.anchor1()),a=tr(e.body2(),e.anchor2());if(t.position.copy(o),n.position.copy(a),s){const l=tr(e.body1(),e.anchor1()),d=r.clone().applyQuaternion(e.body1().rotation()),c=.01,u=l.clone().add(d.clone().multiplyScalar(-c)),p=l.clone().add(d.clone().multiplyScalar(c));s.geometry.setFromPoints([u,p])}})}}function tr(i,e){const t=new T().copy(i.translation());return t.add(new T().copy(e).applyQuaternion(i.rotation())),t}class um{constructor({containerElement:e}){this.#e=document.createElement("div"),this.#e.style.position="absolute",this.#e.style.top="10px",this.#e.style.left="10px",this.#e.style.color="white",this.#e.style.fontSize="20px",this.#e.style.zIndex="1000",this.#e.style.pointerEvents="none",this.#e.style.userSelect="none",this.#e.style.fontFamily="Arial, sans-serif",this.#e.style.backgroundColor="rgba(0, 0, 0, 0.5)",this.#e.style.padding="5px",this.#e.style.borderRadius="5px",this.#e.style.boxShadow="0 0 10px rgba(0, 0, 0, 0.5)",e.appendChild(this.#e)}#e=null;#t=0;initialize(){}update(){const e=performance.now();if(this.#t){const t=e-this.#t;let n=Math.round(1e3/t);this.#e.innerText=`FPS: ${n}`}this.#t=e}}class pm{constructor({scene:e,containerElement:t}){this.#e=e,this.#t=document.createElement("div"),this.#t.style.position="absolute",this.#t.style.bottom="10px",this.#t.style.left="10px",this.#t.style.color="white",this.#t.style.fontSize="20px",this.#t.style.zIndex="1000",this.#t.style.pointerEvents="none",this.#t.style.userSelect="none",this.#t.style.fontFamily="Arial, sans-serif",this.#t.style.backgroundColor="rgba(0, 0, 0, 0.5)",this.#t.style.padding="5px",this.#t.style.borderRadius="5px",this.#t.style.boxShadow="0 0 10px rgba(0, 0, 0, 0.5)",t.appendChild(this.#t)}#e=null;#t=null;initialize(){}update(){const e=this.#e.triangles;this.#t.innerText=`Polygons: ${Intl.NumberFormat("en-US").format(e)}`}}const W1={type:"change"},iu={type:"start"},_2={type:"end"},da=new Or,j1=new as,fm=Math.cos(70*O2.DEG2RAD),sn=new T,Wn=2*Math.PI,Wt={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},gl=1e-6;class hm extends P9{constructor(e,t=null){super(e,t),this.state=Wt.NONE,this.target=new T,this.cursor=new T,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.keyRotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:hr.ROTATE,MIDDLE:hr.DOLLY,RIGHT:hr.PAN},this.touches={ONE:dr.ROTATE,TWO:dr.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this._lastPosition=new T,this._lastQuaternion=new _e,this._lastTargetPosition=new T,this._quat=new _e().setFromUnitVectors(e.up,new T(0,1,0)),this._quatInverse=this._quat.clone().invert(),this._spherical=new u1,this._sphericalDelta=new u1,this._scale=1,this._panOffset=new T,this._rotateStart=new et,this._rotateEnd=new et,this._rotateDelta=new et,this._panStart=new et,this._panEnd=new et,this._panDelta=new et,this._dollyStart=new et,this._dollyEnd=new et,this._dollyDelta=new et,this._dollyDirection=new T,this._mouse=new et,this._performCursorZoom=!1,this._pointers=[],this._pointerPositions={},this._controlActive=!1,this._onPointerMove=bm.bind(this),this._onPointerDown=mm.bind(this),this._onPointerUp=vm.bind(this),this._onContextMenu=Pm.bind(this),this._onMouseWheel=gm.bind(this),this._onKeyDown=xm.bind(this),this._onTouchStart=Tm.bind(this),this._onTouchMove=Sm.bind(this),this._onMouseDown=ym.bind(this),this._onMouseMove=wm.bind(this),this._interceptControlDown=Rm.bind(this),this._interceptControlUp=Lm.bind(this),this.domElement!==null&&this.connect(this.domElement),this.update()}connect(e){super.connect(e),this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerUp),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.getRootNode().addEventListener("keydown",this._interceptControlDown,{passive:!0,capture:!0}),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerUp),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.stopListenToKeyEvents(),this.domElement.getRootNode().removeEventListener("keydown",this._interceptControlDown,{capture:!0}),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}getPolarAngle(){return this._spherical.phi}getAzimuthalAngle(){return this._spherical.theta}getDistance(){return this.object.position.distanceTo(this.target)}listenToKeyEvents(e){e.addEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=e}stopListenToKeyEvents(){this._domElementKeyEvents!==null&&(this._domElementKeyEvents.removeEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=null)}saveState(){this.target0.copy(this.target),this.position0.copy(this.object.position),this.zoom0=this.object.zoom}reset(){this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(W1),this.update(),this.state=Wt.NONE}update(e=null){const t=this.object.position;sn.copy(t).sub(this.target),sn.applyQuaternion(this._quat),this._spherical.setFromVector3(sn),this.autoRotate&&this.state===Wt.NONE&&this._rotateLeft(this._getAutoRotationAngle(e)),this.enableDamping?(this._spherical.theta+=this._sphericalDelta.theta*this.dampingFactor,this._spherical.phi+=this._sphericalDelta.phi*this.dampingFactor):(this._spherical.theta+=this._sphericalDelta.theta,this._spherical.phi+=this._sphericalDelta.phi);let n=this.minAzimuthAngle,s=this.maxAzimuthAngle;isFinite(n)&&isFinite(s)&&(n<-Math.PI?n+=Wn:n>Math.PI&&(n-=Wn),s<-Math.PI?s+=Wn:s>Math.PI&&(s-=Wn),n<=s?this._spherical.theta=Math.max(n,Math.min(s,this._spherical.theta)):this._spherical.theta=this._spherical.theta>(n+s)/2?Math.max(n,this._spherical.theta):Math.min(s,this._spherical.theta)),this._spherical.phi=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,this._spherical.phi)),this._spherical.makeSafe(),this.enableDamping===!0?this.target.addScaledVector(this._panOffset,this.dampingFactor):this.target.add(this._panOffset),this.target.sub(this.cursor),this.target.clampLength(this.minTargetRadius,this.maxTargetRadius),this.target.add(this.cursor);let r=!1;if(this.zoomToCursor&&this._performCursorZoom||this.object.isOrthographicCamera)this._spherical.radius=this._clampDistance(this._spherical.radius);else{const o=this._spherical.radius;this._spherical.radius=this._clampDistance(this._spherical.radius*this._scale),r=o!=this._spherical.radius}if(sn.setFromSpherical(this._spherical),sn.applyQuaternion(this._quatInverse),t.copy(this.target).add(sn),this.object.lookAt(this.target),this.enableDamping===!0?(this._sphericalDelta.theta*=1-this.dampingFactor,this._sphericalDelta.phi*=1-this.dampingFactor,this._panOffset.multiplyScalar(1-this.dampingFactor)):(this._sphericalDelta.set(0,0,0),this._panOffset.set(0,0,0)),this.zoomToCursor&&this._performCursorZoom){let o=null;if(this.object.isPerspectiveCamera){const a=sn.length();o=this._clampDistance(a*this._scale);const l=a-o;this.object.position.addScaledVector(this._dollyDirection,l),this.object.updateMatrixWorld(),r=!!l}else if(this.object.isOrthographicCamera){const a=new T(this._mouse.x,this._mouse.y,0);a.unproject(this.object);const l=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),this.object.updateProjectionMatrix(),r=l!==this.object.zoom;const d=new T(this._mouse.x,this._mouse.y,0);d.unproject(this.object),this.object.position.sub(d).add(a),this.object.updateMatrixWorld(),o=sn.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),this.zoomToCursor=!1;o!==null&&(this.screenSpacePanning?this.target.set(0,0,-1).transformDirection(this.object.matrix).multiplyScalar(o).add(this.object.position):(da.origin.copy(this.object.position),da.direction.set(0,0,-1).transformDirection(this.object.matrix),Math.abs(this.object.up.dot(da.direction))<fm?this.object.lookAt(this.target):(j1.setFromNormalAndCoplanarPoint(this.object.up,this.target),da.intersectPlane(j1,this.target))))}else if(this.object.isOrthographicCamera){const o=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),o!==this.object.zoom&&(this.object.updateProjectionMatrix(),r=!0)}return this._scale=1,this._performCursorZoom=!1,r||this._lastPosition.distanceToSquared(this.object.position)>gl||8*(1-this._lastQuaternion.dot(this.object.quaternion))>gl||this._lastTargetPosition.distanceToSquared(this.target)>gl?(this.dispatchEvent(W1),this._lastPosition.copy(this.object.position),this._lastQuaternion.copy(this.object.quaternion),this._lastTargetPosition.copy(this.target),!0):!1}_getAutoRotationAngle(e){return e!==null?Wn/60*this.autoRotateSpeed*e:Wn/60/60*this.autoRotateSpeed}_getZoomScale(e){const t=Math.abs(e*.01);return Math.pow(.95,this.zoomSpeed*t)}_rotateLeft(e){this._sphericalDelta.theta-=e}_rotateUp(e){this._sphericalDelta.phi-=e}_panLeft(e,t){sn.setFromMatrixColumn(t,0),sn.multiplyScalar(-e),this._panOffset.add(sn)}_panUp(e,t){this.screenSpacePanning===!0?sn.setFromMatrixColumn(t,1):(sn.setFromMatrixColumn(t,0),sn.crossVectors(this.object.up,sn)),sn.multiplyScalar(e),this._panOffset.add(sn)}_pan(e,t){const n=this.domElement;if(this.object.isPerspectiveCamera){const s=this.object.position;sn.copy(s).sub(this.target);let r=sn.length();r*=Math.tan(this.object.fov/2*Math.PI/180),this._panLeft(2*e*r/n.clientHeight,this.object.matrix),this._panUp(2*t*r/n.clientHeight,this.object.matrix)}else this.object.isOrthographicCamera?(this._panLeft(e*(this.object.right-this.object.left)/this.object.zoom/n.clientWidth,this.object.matrix),this._panUp(t*(this.object.top-this.object.bottom)/this.object.zoom/n.clientHeight,this.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),this.enablePan=!1)}_dollyOut(e){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale/=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_dollyIn(e){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale*=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_updateZoomParameters(e,t){if(!this.zoomToCursor)return;this._performCursorZoom=!0;const n=this.domElement.getBoundingClientRect(),s=e-n.left,r=t-n.top,o=n.width,a=n.height;this._mouse.x=s/o*2-1,this._mouse.y=-(r/a)*2+1,this._dollyDirection.set(this._mouse.x,this._mouse.y,1).unproject(this.object).sub(this.object.position).normalize()}_clampDistance(e){return Math.max(this.minDistance,Math.min(this.maxDistance,e))}_handleMouseDownRotate(e){this._rotateStart.set(e.clientX,e.clientY)}_handleMouseDownDolly(e){this._updateZoomParameters(e.clientX,e.clientX),this._dollyStart.set(e.clientX,e.clientY)}_handleMouseDownPan(e){this._panStart.set(e.clientX,e.clientY)}_handleMouseMoveRotate(e){this._rotateEnd.set(e.clientX,e.clientY),this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const t=this.domElement;this._rotateLeft(Wn*this._rotateDelta.x/t.clientHeight),this._rotateUp(Wn*this._rotateDelta.y/t.clientHeight),this._rotateStart.copy(this._rotateEnd),this.update()}_handleMouseMoveDolly(e){this._dollyEnd.set(e.clientX,e.clientY),this._dollyDelta.subVectors(this._dollyEnd,this._dollyStart),this._dollyDelta.y>0?this._dollyOut(this._getZoomScale(this._dollyDelta.y)):this._dollyDelta.y<0&&this._dollyIn(this._getZoomScale(this._dollyDelta.y)),this._dollyStart.copy(this._dollyEnd),this.update()}_handleMouseMovePan(e){this._panEnd.set(e.clientX,e.clientY),this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd),this.update()}_handleMouseWheel(e){this._updateZoomParameters(e.clientX,e.clientY),e.deltaY<0?this._dollyIn(this._getZoomScale(e.deltaY)):e.deltaY>0&&this._dollyOut(this._getZoomScale(e.deltaY)),this.update()}_handleKeyDown(e){let t=!1;switch(e.code){case this.keys.UP:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateUp(Wn*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,this.keyPanSpeed),t=!0;break;case this.keys.BOTTOM:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateUp(-Wn*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,-this.keyPanSpeed),t=!0;break;case this.keys.LEFT:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateLeft(Wn*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(this.keyPanSpeed,0),t=!0;break;case this.keys.RIGHT:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateLeft(-Wn*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(-this.keyPanSpeed,0),t=!0;break}t&&(e.preventDefault(),this.update())}_handleTouchStartRotate(e){if(this._pointers.length===1)this._rotateStart.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),s=.5*(e.pageY+t.y);this._rotateStart.set(n,s)}}_handleTouchStartPan(e){if(this._pointers.length===1)this._panStart.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),s=.5*(e.pageY+t.y);this._panStart.set(n,s)}}_handleTouchStartDolly(e){const t=this._getSecondPointerPosition(e),n=e.pageX-t.x,s=e.pageY-t.y,r=Math.sqrt(n*n+s*s);this._dollyStart.set(0,r)}_handleTouchStartDollyPan(e){this.enableZoom&&this._handleTouchStartDolly(e),this.enablePan&&this._handleTouchStartPan(e)}_handleTouchStartDollyRotate(e){this.enableZoom&&this._handleTouchStartDolly(e),this.enableRotate&&this._handleTouchStartRotate(e)}_handleTouchMoveRotate(e){if(this._pointers.length==1)this._rotateEnd.set(e.pageX,e.pageY);else{const n=this._getSecondPointerPosition(e),s=.5*(e.pageX+n.x),r=.5*(e.pageY+n.y);this._rotateEnd.set(s,r)}this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const t=this.domElement;this._rotateLeft(Wn*this._rotateDelta.x/t.clientHeight),this._rotateUp(Wn*this._rotateDelta.y/t.clientHeight),this._rotateStart.copy(this._rotateEnd)}_handleTouchMovePan(e){if(this._pointers.length===1)this._panEnd.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),s=.5*(e.pageY+t.y);this._panEnd.set(n,s)}this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd)}_handleTouchMoveDolly(e){const t=this._getSecondPointerPosition(e),n=e.pageX-t.x,s=e.pageY-t.y,r=Math.sqrt(n*n+s*s);this._dollyEnd.set(0,r),this._dollyDelta.set(0,Math.pow(this._dollyEnd.y/this._dollyStart.y,this.zoomSpeed)),this._dollyOut(this._dollyDelta.y),this._dollyStart.copy(this._dollyEnd);const o=(e.pageX+t.x)*.5,a=(e.pageY+t.y)*.5;this._updateZoomParameters(o,a)}_handleTouchMoveDollyPan(e){this.enableZoom&&this._handleTouchMoveDolly(e),this.enablePan&&this._handleTouchMovePan(e)}_handleTouchMoveDollyRotate(e){this.enableZoom&&this._handleTouchMoveDolly(e),this.enableRotate&&this._handleTouchMoveRotate(e)}_addPointer(e){this._pointers.push(e.pointerId)}_removePointer(e){delete this._pointerPositions[e.pointerId];for(let t=0;t<this._pointers.length;t++)if(this._pointers[t]==e.pointerId){this._pointers.splice(t,1);return}}_isTrackingPointer(e){for(let t=0;t<this._pointers.length;t++)if(this._pointers[t]==e.pointerId)return!0;return!1}_trackPointer(e){let t=this._pointerPositions[e.pointerId];t===void 0&&(t=new et,this._pointerPositions[e.pointerId]=t),t.set(e.pageX,e.pageY)}_getSecondPointerPosition(e){const t=e.pointerId===this._pointers[0]?this._pointers[1]:this._pointers[0];return this._pointerPositions[t]}_customWheelEvent(e){const t=e.deltaMode,n={clientX:e.clientX,clientY:e.clientY,deltaY:e.deltaY};switch(t){case 1:n.deltaY*=16;break;case 2:n.deltaY*=100;break}return e.ctrlKey&&!this._controlActive&&(n.deltaY*=10),n}}function mm(i){this.enabled!==!1&&(this._pointers.length===0&&(this.domElement.setPointerCapture(i.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),!this._isTrackingPointer(i)&&(this._addPointer(i),i.pointerType==="touch"?this._onTouchStart(i):this._onMouseDown(i)))}function bm(i){this.enabled!==!1&&(i.pointerType==="touch"?this._onTouchMove(i):this._onMouseMove(i))}function vm(i){switch(this._removePointer(i),this._pointers.length){case 0:this.domElement.releasePointerCapture(i.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.dispatchEvent(_2),this.state=Wt.NONE;break;case 1:const e=this._pointers[0],t=this._pointerPositions[e];this._onTouchStart({pointerId:e,pageX:t.x,pageY:t.y});break}}function ym(i){let e;switch(i.button){case 0:e=this.mouseButtons.LEFT;break;case 1:e=this.mouseButtons.MIDDLE;break;case 2:e=this.mouseButtons.RIGHT;break;default:e=-1}switch(e){case hr.DOLLY:if(this.enableZoom===!1)return;this._handleMouseDownDolly(i),this.state=Wt.DOLLY;break;case hr.ROTATE:if(i.ctrlKey||i.metaKey||i.shiftKey){if(this.enablePan===!1)return;this._handleMouseDownPan(i),this.state=Wt.PAN}else{if(this.enableRotate===!1)return;this._handleMouseDownRotate(i),this.state=Wt.ROTATE}break;case hr.PAN:if(i.ctrlKey||i.metaKey||i.shiftKey){if(this.enableRotate===!1)return;this._handleMouseDownRotate(i),this.state=Wt.ROTATE}else{if(this.enablePan===!1)return;this._handleMouseDownPan(i),this.state=Wt.PAN}break;default:this.state=Wt.NONE}this.state!==Wt.NONE&&this.dispatchEvent(iu)}function wm(i){switch(this.state){case Wt.ROTATE:if(this.enableRotate===!1)return;this._handleMouseMoveRotate(i);break;case Wt.DOLLY:if(this.enableZoom===!1)return;this._handleMouseMoveDolly(i);break;case Wt.PAN:if(this.enablePan===!1)return;this._handleMouseMovePan(i);break}}function gm(i){this.enabled===!1||this.enableZoom===!1||this.state!==Wt.NONE||(i.preventDefault(),this.dispatchEvent(iu),this._handleMouseWheel(this._customWheelEvent(i)),this.dispatchEvent(_2))}function xm(i){this.enabled!==!1&&this._handleKeyDown(i)}function Tm(i){switch(this._trackPointer(i),this._pointers.length){case 1:switch(this.touches.ONE){case dr.ROTATE:if(this.enableRotate===!1)return;this._handleTouchStartRotate(i),this.state=Wt.TOUCH_ROTATE;break;case dr.PAN:if(this.enablePan===!1)return;this._handleTouchStartPan(i),this.state=Wt.TOUCH_PAN;break;default:this.state=Wt.NONE}break;case 2:switch(this.touches.TWO){case dr.DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchStartDollyPan(i),this.state=Wt.TOUCH_DOLLY_PAN;break;case dr.DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchStartDollyRotate(i),this.state=Wt.TOUCH_DOLLY_ROTATE;break;default:this.state=Wt.NONE}break;default:this.state=Wt.NONE}this.state!==Wt.NONE&&this.dispatchEvent(iu)}function Sm(i){switch(this._trackPointer(i),this.state){case Wt.TOUCH_ROTATE:if(this.enableRotate===!1)return;this._handleTouchMoveRotate(i),this.update();break;case Wt.TOUCH_PAN:if(this.enablePan===!1)return;this._handleTouchMovePan(i),this.update();break;case Wt.TOUCH_DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchMoveDollyPan(i),this.update();break;case Wt.TOUCH_DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchMoveDollyRotate(i),this.update();break;default:this.state=Wt.NONE}}function Pm(i){this.enabled!==!1&&i.preventDefault()}function Rm(i){i.key==="Control"&&(this._controlActive=!0,this.domElement.getRootNode().addEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function Lm(i){i.key==="Control"&&(this._controlActive=!1,this.domElement.getRootNode().removeEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}const Nm=new T(0,.45,0);class Mm{constructor({camera:e,containerElement:t}){this.#e=e,this.#t=t}#e;#t;initialize(){const e=new hm(this.#e,this.#t);e.target.copy(Nm),e.update()}update(){}}class nr{static DEBUG_COLLIDERS=!1;static DEBUG_FPS=!1;static DEBUG_POLYGONS=!1;static DEBUG_CONTROLS=!1;static#e;static#t;static#n;static#a;static#o;static#r;static#c;static async initialize({scene:e,containerElement:t,camera:n,joints:s}){this.#e=e,this.#t=t,this.#n=n,this.DEBUG_COLLIDERS&&(this.#a=new cm({scene:this.#e,joints:s}),this.#a.initialize()),this.DEBUG_FPS&&(this.#o=new um({containerElement:this.#t}),this.#o.initialize()),this.DEBUG_POLYGONS&&(this.#r=new pm({scene:this.#e,containerElement:this.#t}),this.#r.initialize()),this.DEBUG_CONTROLS&&(this.#c=new Mm({scene:this.#e,containerElement:this.#t,camera:this.#n}),this.#c.initialize())}static update(){this.DEBUG_COLLIDERS&&this.#a.update(),this.DEBUG_FPS&&this.#o.update(),this.DEBUG_POLYGONS&&this.#r.update(),this.DEBUG_CONTROLS&&this.#c.update()}}function V1(i,e){if(e===zh)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),i;if(e===Ud||e===N2){let t=i.getIndex();if(t===null){const o=[],a=i.getAttribute("position");if(a!==void 0){for(let l=0;l<a.count;l++)o.push(l);i.setIndex(o),t=i.getIndex()}else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),i}const n=t.count-2,s=[];if(e===Ud)for(let o=1;o<=n;o++)s.push(t.getX(0)),s.push(t.getX(o)),s.push(t.getX(o+1));else for(let o=0;o<n;o++)o%2===0?(s.push(t.getX(o)),s.push(t.getX(o+1)),s.push(t.getX(o+2))):(s.push(t.getX(o+2)),s.push(t.getX(o+1)),s.push(t.getX(o)));s.length/3!==n&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");const r=i.clone();return r.setIndex(s),r.clearGroups(),r}else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",e),i}class Om extends Ds{constructor(e){super(e),this.dracoLoader=null,this.ktx2Loader=null,this.meshoptDecoder=null,this.pluginCallbacks=[],this.register(function(t){return new Xm(t)}),this.register(function(t){return new Im(t)}),this.register(function(t){return new Gm(t)}),this.register(function(t){return new Um(t)}),this.register(function(t){return new Zm(t)}),this.register(function(t){return new Wm(t)}),this.register(function(t){return new jm(t)}),this.register(function(t){return new Vm(t)}),this.register(function(t){return new Cm(t)}),this.register(function(t){return new Am(t)}),this.register(function(t){return new Fm(t)}),this.register(function(t){return new Dm(t)}),this.register(function(t){return new Ym(t)}),this.register(function(t){return new qm(t)}),this.register(function(t){return new Hm(t)}),this.register(function(t){return new km(t)}),this.register(function(t){return new Jm(t)})}load(e,t,n,s){const r=this;let o;if(this.resourcePath!=="")o=this.resourcePath;else if(this.path!==""){const d=ro.extractUrlBase(e);o=ro.resolveURL(d,this.path)}else o=ro.extractUrlBase(e);this.manager.itemStart(e);const a=function(d){s?s(d):console.error(d),r.manager.itemError(e),r.manager.itemEnd(e)},l=new Qc(this.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),l.setRequestHeader(this.requestHeader),l.setWithCredentials(this.withCredentials),l.load(e,function(d){try{r.parse(d,o,function(c){t(c),r.manager.itemEnd(e)},a)}catch(c){a(c)}},n,a)}setDRACOLoader(e){return this.dracoLoader=e,this}setKTX2Loader(e){return this.ktx2Loader=e,this}setMeshoptDecoder(e){return this.meshoptDecoder=e,this}register(e){return this.pluginCallbacks.indexOf(e)===-1&&this.pluginCallbacks.push(e),this}unregister(e){return this.pluginCallbacks.indexOf(e)!==-1&&this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(e),1),this}parse(e,t,n,s){let r;const o={},a={},l=new TextDecoder;if(typeof e=="string")r=JSON.parse(e);else if(e instanceof ArrayBuffer)if(l.decode(new Uint8Array(e,0,4))===$2){try{o[ht.KHR_BINARY_GLTF]=new Bm(e)}catch(u){s&&s(u);return}r=JSON.parse(o[ht.KHR_BINARY_GLTF].content)}else r=JSON.parse(l.decode(e));else r=e;if(r.asset===void 0||r.asset.version[0]<2){s&&s(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));return}const d=new lb(r,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,requestHeader:this.requestHeader,manager:this.manager,ktx2Loader:this.ktx2Loader,meshoptDecoder:this.meshoptDecoder});d.fileLoader.setRequestHeader(this.requestHeader);for(let c=0;c<this.pluginCallbacks.length;c++){const u=this.pluginCallbacks[c](d);u.name||console.error("THREE.GLTFLoader: Invalid plugin found: missing name"),a[u.name]=u,o[u.name]=!0}if(r.extensionsUsed)for(let c=0;c<r.extensionsUsed.length;++c){const u=r.extensionsUsed[c],p=r.extensionsRequired||[];switch(u){case ht.KHR_MATERIALS_UNLIT:o[u]=new Em;break;case ht.KHR_DRACO_MESH_COMPRESSION:o[u]=new Km(r,this.dracoLoader);break;case ht.KHR_TEXTURE_TRANSFORM:o[u]=new Qm;break;case ht.KHR_MESH_QUANTIZATION:o[u]=new _m;break;default:p.indexOf(u)>=0&&a[u]===void 0&&console.warn('THREE.GLTFLoader: Unknown extension "'+u+'".')}}d.setExtensions(o),d.setPlugins(a),d.parse(n,s)}parseAsync(e,t){const n=this;return new Promise(function(s,r){n.parse(e,t,s,r)})}}function zm(){let i={};return{get:function(e){return i[e]},add:function(e,t){i[e]=t},remove:function(e){delete i[e]},removeAll:function(){i={}}}}const ht={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_DISPERSION:"KHR_materials_dispersion",KHR_MATERIALS_IOR:"KHR_materials_ior",KHR_MATERIALS_SHEEN:"KHR_materials_sheen",KHR_MATERIALS_SPECULAR:"KHR_materials_specular",KHR_MATERIALS_TRANSMISSION:"KHR_materials_transmission",KHR_MATERIALS_IRIDESCENCE:"KHR_materials_iridescence",KHR_MATERIALS_ANISOTROPY:"KHR_materials_anisotropy",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_MATERIALS_VOLUME:"KHR_materials_volume",KHR_TEXTURE_BASISU:"KHR_texture_basisu",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",KHR_MATERIALS_EMISSIVE_STRENGTH:"KHR_materials_emissive_strength",EXT_MATERIALS_BUMP:"EXT_materials_bump",EXT_TEXTURE_WEBP:"EXT_texture_webp",EXT_TEXTURE_AVIF:"EXT_texture_avif",EXT_MESHOPT_COMPRESSION:"EXT_meshopt_compression",EXT_MESH_GPU_INSTANCING:"EXT_mesh_gpu_instancing"};class Hm{constructor(e){this.parser=e,this.name=ht.KHR_LIGHTS_PUNCTUAL,this.cache={refs:{},uses:{}}}_markDefs(){const e=this.parser,t=this.parser.json.nodes||[];for(let n=0,s=t.length;n<s;n++){const r=t[n];r.extensions&&r.extensions[this.name]&&r.extensions[this.name].light!==void 0&&e._addNodeRef(this.cache,r.extensions[this.name].light)}}_loadLight(e){const t=this.parser,n="light:"+e;let s=t.cache.get(n);if(s)return s;const r=t.json,l=((r.extensions&&r.extensions[this.name]||{}).lights||[])[e];let d;const c=new tt(16777215);l.color!==void 0&&c.setRGB(l.color[0],l.color[1],l.color[2],Sn);const u=l.range!==void 0?l.range:0;switch(l.type){case"directional":d=new Z2(c),d.target.position.set(0,0,-1),d.add(d.target);break;case"point":d=new U2(c),d.distance=u;break;case"spot":d=new G2(c),d.distance=u,l.spot=l.spot||{},l.spot.innerConeAngle=l.spot.innerConeAngle!==void 0?l.spot.innerConeAngle:0,l.spot.outerConeAngle=l.spot.outerConeAngle!==void 0?l.spot.outerConeAngle:Math.PI/4,d.angle=l.spot.outerConeAngle,d.penumbra=1-l.spot.innerConeAngle/l.spot.outerConeAngle,d.target.position.set(0,0,-1),d.add(d.target);break;default:throw new Error("THREE.GLTFLoader: Unexpected light type: "+l.type)}return d.position.set(0,0,0),Di(d,l),l.intensity!==void 0&&(d.intensity=l.intensity),d.name=t.createUniqueName(l.name||"light_"+e),s=Promise.resolve(d),t.cache.add(n,s),s}getDependency(e,t){if(e==="light")return this._loadLight(t)}createNodeAttachment(e){const t=this,n=this.parser,r=n.json.nodes[e],a=(r.extensions&&r.extensions[this.name]||{}).light;return a===void 0?null:this._loadLight(a).then(function(l){return n._getNodeRef(t.cache,a,l)})}}class Em{constructor(){this.name=ht.KHR_MATERIALS_UNLIT}getMaterialType(){return qi}extendParams(e,t,n){const s=[];e.color=new tt(1,1,1),e.opacity=1;const r=t.pbrMetallicRoughness;if(r){if(Array.isArray(r.baseColorFactor)){const o=r.baseColorFactor;e.color.setRGB(o[0],o[1],o[2],Sn),e.opacity=o[3]}r.baseColorTexture!==void 0&&s.push(n.assignTexture(e,"map",r.baseColorTexture,yn))}return Promise.all(s)}}class Am{constructor(e){this.parser=e,this.name=ht.KHR_MATERIALS_EMISSIVE_STRENGTH}extendMaterialParams(e,t){const s=this.parser.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=s.extensions[this.name].emissiveStrength;return r!==void 0&&(t.emissiveIntensity=r),Promise.resolve()}}class Xm{constructor(e){this.parser=e,this.name=ht.KHR_MATERIALS_CLEARCOAT}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Li}extendMaterialParams(e,t){const n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=[],o=s.extensions[this.name];if(o.clearcoatFactor!==void 0&&(t.clearcoat=o.clearcoatFactor),o.clearcoatTexture!==void 0&&r.push(n.assignTexture(t,"clearcoatMap",o.clearcoatTexture)),o.clearcoatRoughnessFactor!==void 0&&(t.clearcoatRoughness=o.clearcoatRoughnessFactor),o.clearcoatRoughnessTexture!==void 0&&r.push(n.assignTexture(t,"clearcoatRoughnessMap",o.clearcoatRoughnessTexture)),o.clearcoatNormalTexture!==void 0&&(r.push(n.assignTexture(t,"clearcoatNormalMap",o.clearcoatNormalTexture)),o.clearcoatNormalTexture.scale!==void 0)){const a=o.clearcoatNormalTexture.scale;t.clearcoatNormalScale=new et(a,a)}return Promise.all(r)}}class Im{constructor(e){this.parser=e,this.name=ht.KHR_MATERIALS_DISPERSION}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Li}extendMaterialParams(e,t){const s=this.parser.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=s.extensions[this.name];return t.dispersion=r.dispersion!==void 0?r.dispersion:0,Promise.resolve()}}class Dm{constructor(e){this.parser=e,this.name=ht.KHR_MATERIALS_IRIDESCENCE}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Li}extendMaterialParams(e,t){const n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=[],o=s.extensions[this.name];return o.iridescenceFactor!==void 0&&(t.iridescence=o.iridescenceFactor),o.iridescenceTexture!==void 0&&r.push(n.assignTexture(t,"iridescenceMap",o.iridescenceTexture)),o.iridescenceIor!==void 0&&(t.iridescenceIOR=o.iridescenceIor),t.iridescenceThicknessRange===void 0&&(t.iridescenceThicknessRange=[100,400]),o.iridescenceThicknessMinimum!==void 0&&(t.iridescenceThicknessRange[0]=o.iridescenceThicknessMinimum),o.iridescenceThicknessMaximum!==void 0&&(t.iridescenceThicknessRange[1]=o.iridescenceThicknessMaximum),o.iridescenceThicknessTexture!==void 0&&r.push(n.assignTexture(t,"iridescenceThicknessMap",o.iridescenceThicknessTexture)),Promise.all(r)}}class Wm{constructor(e){this.parser=e,this.name=ht.KHR_MATERIALS_SHEEN}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Li}extendMaterialParams(e,t){const n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=[];t.sheenColor=new tt(0,0,0),t.sheenRoughness=0,t.sheen=1;const o=s.extensions[this.name];if(o.sheenColorFactor!==void 0){const a=o.sheenColorFactor;t.sheenColor.setRGB(a[0],a[1],a[2],Sn)}return o.sheenRoughnessFactor!==void 0&&(t.sheenRoughness=o.sheenRoughnessFactor),o.sheenColorTexture!==void 0&&r.push(n.assignTexture(t,"sheenColorMap",o.sheenColorTexture,yn)),o.sheenRoughnessTexture!==void 0&&r.push(n.assignTexture(t,"sheenRoughnessMap",o.sheenRoughnessTexture)),Promise.all(r)}}class jm{constructor(e){this.parser=e,this.name=ht.KHR_MATERIALS_TRANSMISSION}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Li}extendMaterialParams(e,t){const n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=[],o=s.extensions[this.name];return o.transmissionFactor!==void 0&&(t.transmission=o.transmissionFactor),o.transmissionTexture!==void 0&&r.push(n.assignTexture(t,"transmissionMap",o.transmissionTexture)),Promise.all(r)}}class Vm{constructor(e){this.parser=e,this.name=ht.KHR_MATERIALS_VOLUME}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Li}extendMaterialParams(e,t){const n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=[],o=s.extensions[this.name];t.thickness=o.thicknessFactor!==void 0?o.thicknessFactor:0,o.thicknessTexture!==void 0&&r.push(n.assignTexture(t,"thicknessMap",o.thicknessTexture)),t.attenuationDistance=o.attenuationDistance||1/0;const a=o.attenuationColor||[1,1,1];return t.attenuationColor=new tt().setRGB(a[0],a[1],a[2],Sn),Promise.all(r)}}class Cm{constructor(e){this.parser=e,this.name=ht.KHR_MATERIALS_IOR}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Li}extendMaterialParams(e,t){const s=this.parser.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=s.extensions[this.name];return t.ior=r.ior!==void 0?r.ior:1.5,Promise.resolve()}}class Fm{constructor(e){this.parser=e,this.name=ht.KHR_MATERIALS_SPECULAR}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Li}extendMaterialParams(e,t){const n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=[],o=s.extensions[this.name];t.specularIntensity=o.specularFactor!==void 0?o.specularFactor:1,o.specularTexture!==void 0&&r.push(n.assignTexture(t,"specularIntensityMap",o.specularTexture));const a=o.specularColorFactor||[1,1,1];return t.specularColor=new tt().setRGB(a[0],a[1],a[2],Sn),o.specularColorTexture!==void 0&&r.push(n.assignTexture(t,"specularColorMap",o.specularColorTexture,yn)),Promise.all(r)}}class qm{constructor(e){this.parser=e,this.name=ht.EXT_MATERIALS_BUMP}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Li}extendMaterialParams(e,t){const n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=[],o=s.extensions[this.name];return t.bumpScale=o.bumpFactor!==void 0?o.bumpFactor:1,o.bumpTexture!==void 0&&r.push(n.assignTexture(t,"bumpMap",o.bumpTexture)),Promise.all(r)}}class Ym{constructor(e){this.parser=e,this.name=ht.KHR_MATERIALS_ANISOTROPY}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:Li}extendMaterialParams(e,t){const n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();const r=[],o=s.extensions[this.name];return o.anisotropyStrength!==void 0&&(t.anisotropy=o.anisotropyStrength),o.anisotropyRotation!==void 0&&(t.anisotropyRotation=o.anisotropyRotation),o.anisotropyTexture!==void 0&&r.push(n.assignTexture(t,"anisotropyMap",o.anisotropyTexture)),Promise.all(r)}}class Gm{constructor(e){this.parser=e,this.name=ht.KHR_TEXTURE_BASISU}loadTexture(e){const t=this.parser,n=t.json,s=n.textures[e];if(!s.extensions||!s.extensions[this.name])return null;const r=s.extensions[this.name],o=t.options.ktx2Loader;if(!o){if(n.extensionsRequired&&n.extensionsRequired.indexOf(this.name)>=0)throw new Error("THREE.GLTFLoader: setKTX2Loader must be called before loading KTX2 textures");return null}return t.loadTextureImage(e,r.source,o)}}class Um{constructor(e){this.parser=e,this.name=ht.EXT_TEXTURE_WEBP}loadTexture(e){const t=this.name,n=this.parser,s=n.json,r=s.textures[e];if(!r.extensions||!r.extensions[t])return null;const o=r.extensions[t],a=s.images[o.source];let l=n.textureLoader;if(a.uri){const d=n.options.manager.getHandler(a.uri);d!==null&&(l=d)}return n.loadTextureImage(e,o.source,l)}}class Zm{constructor(e){this.parser=e,this.name=ht.EXT_TEXTURE_AVIF}loadTexture(e){const t=this.name,n=this.parser,s=n.json,r=s.textures[e];if(!r.extensions||!r.extensions[t])return null;const o=r.extensions[t],a=s.images[o.source];let l=n.textureLoader;if(a.uri){const d=n.options.manager.getHandler(a.uri);d!==null&&(l=d)}return n.loadTextureImage(e,o.source,l)}}class km{constructor(e){this.name=ht.EXT_MESHOPT_COMPRESSION,this.parser=e}loadBufferView(e){const t=this.parser.json,n=t.bufferViews[e];if(n.extensions&&n.extensions[this.name]){const s=n.extensions[this.name],r=this.parser.getDependency("buffer",s.buffer),o=this.parser.options.meshoptDecoder;if(!o||!o.supported){if(t.extensionsRequired&&t.extensionsRequired.indexOf(this.name)>=0)throw new Error("THREE.GLTFLoader: setMeshoptDecoder must be called before loading compressed files");return null}return r.then(function(a){const l=s.byteOffset||0,d=s.byteLength||0,c=s.count,u=s.byteStride,p=new Uint8Array(a,l,d);return o.decodeGltfBufferAsync?o.decodeGltfBufferAsync(c,u,p,s.mode,s.filter).then(function(h){return h.buffer}):o.ready.then(function(){const h=new ArrayBuffer(c*u);return o.decodeGltfBuffer(new Uint8Array(h),c,u,p,s.mode,s.filter),h})})}else return null}}class Jm{constructor(e){this.name=ht.EXT_MESH_GPU_INSTANCING,this.parser=e}createNodeMesh(e){const t=this.parser.json,n=t.nodes[e];if(!n.extensions||!n.extensions[this.name]||n.mesh===void 0)return null;const s=t.meshes[n.mesh];for(const d of s.primitives)if(d.mode!==_n.TRIANGLES&&d.mode!==_n.TRIANGLE_STRIP&&d.mode!==_n.TRIANGLE_FAN&&d.mode!==void 0)return null;const o=n.extensions[this.name].attributes,a=[],l={};for(const d in o)a.push(this.parser.getDependency("accessor",o[d]).then(c=>(l[d]=c,l[d])));return a.length<1?null:(a.push(this.parser.createNodeMesh(e)),Promise.all(a).then(d=>{const c=d.pop(),u=c.isGroup?c.children:[c],p=d[0].count,h=[];for(const v of u){const x=new Be,m=new T,f=new _e,N=new T(1,1,1),O=new Is(v.geometry,v.material,p);for(let P=0;P<p;P++)l.TRANSLATION&&m.fromBufferAttribute(l.TRANSLATION,P),l.ROTATION&&f.fromBufferAttribute(l.ROTATION,P),l.SCALE&&N.fromBufferAttribute(l.SCALE,P),O.setMatrixAt(P,x.compose(m,f,N));for(const P in l)if(P==="_COLOR_0"){const j=l[P];O.instanceColor=new kd(j.array,j.itemSize,j.normalized)}else P!=="TRANSLATION"&&P!=="ROTATION"&&P!=="SCALE"&&v.geometry.setAttribute(P,l[P]);Zt.prototype.copy.call(O,v),this.parser.assignFinalMaterial(O),h.push(O)}return c.isGroup?(c.clear(),c.add(...h),c):h[0]}))}}const $2="glTF",Br=12,C1={JSON:1313821514,BIN:5130562};class Bm{constructor(e){this.name=ht.KHR_BINARY_GLTF,this.content=null,this.body=null;const t=new DataView(e,0,Br),n=new TextDecoder;if(this.header={magic:n.decode(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==$2)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");const s=this.header.length-Br,r=new DataView(e,Br);let o=0;for(;o<s;){const a=r.getUint32(o,!0);o+=4;const l=r.getUint32(o,!0);if(o+=4,l===C1.JSON){const d=new Uint8Array(e,Br+o,a);this.content=n.decode(d)}else if(l===C1.BIN){const d=Br+o;this.body=e.slice(d,d+a)}o+=a}if(this.content===null)throw new Error("THREE.GLTFLoader: JSON content not found.")}}class Km{constructor(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=ht.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}decodePrimitive(e,t){const n=this.json,s=this.dracoLoader,r=e.extensions[this.name].bufferView,o=e.extensions[this.name].attributes,a={},l={},d={};for(const c in o){const u=_d[c]||c.toLowerCase();a[u]=o[c]}for(const c in e.attributes){const u=_d[c]||c.toLowerCase();if(o[c]!==void 0){const p=n.accessors[e.attributes[c]],h=wr[p.componentType];d[u]=h.name,l[u]=p.normalized===!0}}return t.getDependency("bufferView",r).then(function(c){return new Promise(function(u,p){s.decodeDracoFile(c,function(h){for(const v in h.attributes){const x=h.attributes[v],m=l[v];m!==void 0&&(x.normalized=m)}u(h)},a,d,Sn,p)})})}}class Qm{constructor(){this.name=ht.KHR_TEXTURE_TRANSFORM}extendTexture(e,t){return(t.texCoord===void 0||t.texCoord===e.channel)&&t.offset===void 0&&t.rotation===void 0&&t.scale===void 0||(e=e.clone(),t.texCoord!==void 0&&(e.channel=t.texCoord),t.offset!==void 0&&e.offset.fromArray(t.offset),t.rotation!==void 0&&(e.rotation=t.rotation),t.scale!==void 0&&e.repeat.fromArray(t.scale),e.needsUpdate=!0),e}}class _m{constructor(){this.name=ht.KHR_MESH_QUANTIZATION}}class e3 extends Lo{constructor(e,t,n,s){super(e,t,n,s)}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,s=this.valueSize,r=e*s*3+s;for(let o=0;o!==s;o++)t[o]=n[r+o];return t}interpolate_(e,t,n,s){const r=this.resultBuffer,o=this.sampleValues,a=this.valueSize,l=a*2,d=a*3,c=s-t,u=(n-t)/c,p=u*u,h=p*u,v=e*d,x=v-d,m=-2*h+3*p,f=h-p,N=1-m,O=f-p+u;for(let P=0;P!==a;P++){const j=o[x+P+a],D=o[x+P+l]*c,V=o[v+P+a],G=o[v+P]*c;r[P]=N*j+O*D+m*V+f*G}return r}}const $m=new _e;class eb extends e3{interpolate_(e,t,n,s){const r=super.interpolate_(e,t,n,s);return $m.fromArray(r).normalize().toArray(r),r}}const _n={POINTS:0,LINES:1,LINE_LOOP:2,LINE_STRIP:3,TRIANGLES:4,TRIANGLE_STRIP:5,TRIANGLE_FAN:6},wr={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},F1={9728:In,9729:wn,9984:w2,9985:Ea,9986:no,9987:Ti},q1={33071:xi,33648:qa,10497:Sr},xl={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},_d={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv1",TEXCOORD_2:"uv2",TEXCOORD_3:"uv3",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},is={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},tb={CUBICSPLINE:void 0,LINEAR:mo,STEP:ho},Tl={OPAQUE:"OPAQUE",MASK:"MASK",BLEND:"BLEND"};function nb(i){return i.DefaultMaterial===void 0&&(i.DefaultMaterial=new zr({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:Ui})),i.DefaultMaterial}function Ts(i,e,t){for(const n in t.extensions)i[n]===void 0&&(e.userData.gltfExtensions=e.userData.gltfExtensions||{},e.userData.gltfExtensions[n]=t.extensions[n])}function Di(i,e){e.extras!==void 0&&(typeof e.extras=="object"?Object.assign(i.userData,e.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+e.extras))}function ib(i,e,t){let n=!1,s=!1,r=!1;for(let d=0,c=e.length;d<c;d++){const u=e[d];if(u.POSITION!==void 0&&(n=!0),u.NORMAL!==void 0&&(s=!0),u.COLOR_0!==void 0&&(r=!0),n&&s&&r)break}if(!n&&!s&&!r)return Promise.resolve(i);const o=[],a=[],l=[];for(let d=0,c=e.length;d<c;d++){const u=e[d];if(n){const p=u.POSITION!==void 0?t.getDependency("accessor",u.POSITION):i.attributes.position;o.push(p)}if(s){const p=u.NORMAL!==void 0?t.getDependency("accessor",u.NORMAL):i.attributes.normal;a.push(p)}if(r){const p=u.COLOR_0!==void 0?t.getDependency("accessor",u.COLOR_0):i.attributes.color;l.push(p)}}return Promise.all([Promise.all(o),Promise.all(a),Promise.all(l)]).then(function(d){const c=d[0],u=d[1],p=d[2];return n&&(i.morphAttributes.position=c),s&&(i.morphAttributes.normal=u),r&&(i.morphAttributes.color=p),i.morphTargetsRelative=!0,i})}function sb(i,e){if(i.updateMorphTargets(),e.weights!==void 0)for(let t=0,n=e.weights.length;t<n;t++)i.morphTargetInfluences[t]=e.weights[t];if(e.extras&&Array.isArray(e.extras.targetNames)){const t=e.extras.targetNames;if(i.morphTargetInfluences.length===t.length){i.morphTargetDictionary={};for(let n=0,s=t.length;n<s;n++)i.morphTargetDictionary[t[n]]=n}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function rb(i){let e;const t=i.extensions&&i.extensions[ht.KHR_DRACO_MESH_COMPRESSION];if(t?e="draco:"+t.bufferView+":"+t.indices+":"+Sl(t.attributes):e=i.indices+":"+Sl(i.attributes)+":"+i.mode,i.targets!==void 0)for(let n=0,s=i.targets.length;n<s;n++)e+=":"+Sl(i.targets[n]);return e}function Sl(i){let e="";const t=Object.keys(i).sort();for(let n=0,s=t.length;n<s;n++)e+=t[n]+":"+i[t[n]]+";";return e}function $d(i){switch(i){case Int8Array:return 1/127;case Uint8Array:return 1/255;case Int16Array:return 1/32767;case Uint16Array:return 1/65535;default:throw new Error("THREE.GLTFLoader: Unsupported normalized accessor component type.")}}function ob(i){return i.search(/\.jpe?g($|\?)/i)>0||i.search(/^data\:image\/jpeg/)===0?"image/jpeg":i.search(/\.webp($|\?)/i)>0||i.search(/^data\:image\/webp/)===0?"image/webp":i.search(/\.ktx2($|\?)/i)>0||i.search(/^data\:image\/ktx2/)===0?"image/ktx2":"image/png"}const ab=new Be;class lb{constructor(e={},t={}){this.json=e,this.extensions={},this.plugins={},this.options=t,this.cache=new zm,this.associations=new Map,this.primitiveCache={},this.nodeCache={},this.meshCache={refs:{},uses:{}},this.cameraCache={refs:{},uses:{}},this.lightCache={refs:{},uses:{}},this.sourceCache={},this.textureCache={},this.nodeNamesUsed={};let n=!1,s=-1,r=!1,o=-1;if(typeof navigator<"u"){const a=navigator.userAgent;n=/^((?!chrome|android).)*safari/i.test(a)===!0;const l=a.match(/Version\/(\d+)/);s=n&&l?parseInt(l[1],10):-1,r=a.indexOf("Firefox")>-1,o=r?a.match(/Firefox\/([0-9]+)\./)[1]:-1}typeof createImageBitmap>"u"||n&&s<17||r&&o<98?this.textureLoader=new a9(this.options.manager):this.textureLoader=new p9(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.textureLoader.setRequestHeader(this.options.requestHeader),this.fileLoader=new Qc(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),this.options.crossOrigin==="use-credentials"&&this.fileLoader.setWithCredentials(!0)}setExtensions(e){this.extensions=e}setPlugins(e){this.plugins=e}parse(e,t){const n=this,s=this.json,r=this.extensions;this.cache.removeAll(),this.nodeCache={},this._invokeAll(function(o){return o._markDefs&&o._markDefs()}),Promise.all(this._invokeAll(function(o){return o.beforeRoot&&o.beforeRoot()})).then(function(){return Promise.all([n.getDependencies("scene"),n.getDependencies("animation"),n.getDependencies("camera")])}).then(function(o){const a={scene:o[0][s.scene||0],scenes:o[0],animations:o[1],cameras:o[2],asset:s.asset,parser:n,userData:{}};return Ts(r,a,s),Di(a,s),Promise.all(n._invokeAll(function(l){return l.afterRoot&&l.afterRoot(a)})).then(function(){for(const l of a.scenes)l.updateMatrixWorld();e(a)})}).catch(t)}_markDefs(){const e=this.json.nodes||[],t=this.json.skins||[],n=this.json.meshes||[];for(let s=0,r=t.length;s<r;s++){const o=t[s].joints;for(let a=0,l=o.length;a<l;a++)e[o[a]].isBone=!0}for(let s=0,r=e.length;s<r;s++){const o=e[s];o.mesh!==void 0&&(this._addNodeRef(this.meshCache,o.mesh),o.skin!==void 0&&(n[o.mesh].isSkinnedMesh=!0)),o.camera!==void 0&&this._addNodeRef(this.cameraCache,o.camera)}}_addNodeRef(e,t){t!==void 0&&(e.refs[t]===void 0&&(e.refs[t]=e.uses[t]=0),e.refs[t]++)}_getNodeRef(e,t,n){if(e.refs[t]<=1)return n;const s=n.clone(),r=(o,a)=>{const l=this.associations.get(o);l!=null&&this.associations.set(a,l);for(const[d,c]of o.children.entries())r(c,a.children[d])};return r(n,s),s.name+="_instance_"+e.uses[t]++,s}_invokeOne(e){const t=Object.values(this.plugins);t.push(this);for(let n=0;n<t.length;n++){const s=e(t[n]);if(s)return s}return null}_invokeAll(e){const t=Object.values(this.plugins);t.unshift(this);const n=[];for(let s=0;s<t.length;s++){const r=e(t[s]);r&&n.push(r)}return n}getDependency(e,t){const n=e+":"+t;let s=this.cache.get(n);if(!s){switch(e){case"scene":s=this.loadScene(t);break;case"node":s=this._invokeOne(function(r){return r.loadNode&&r.loadNode(t)});break;case"mesh":s=this._invokeOne(function(r){return r.loadMesh&&r.loadMesh(t)});break;case"accessor":s=this.loadAccessor(t);break;case"bufferView":s=this._invokeOne(function(r){return r.loadBufferView&&r.loadBufferView(t)});break;case"buffer":s=this.loadBuffer(t);break;case"material":s=this._invokeOne(function(r){return r.loadMaterial&&r.loadMaterial(t)});break;case"texture":s=this._invokeOne(function(r){return r.loadTexture&&r.loadTexture(t)});break;case"skin":s=this.loadSkin(t);break;case"animation":s=this._invokeOne(function(r){return r.loadAnimation&&r.loadAnimation(t)});break;case"camera":s=this.loadCamera(t);break;default:if(s=this._invokeOne(function(r){return r!=this&&r.getDependency&&r.getDependency(e,t)}),!s)throw new Error("Unknown type: "+e);break}this.cache.add(n,s)}return s}getDependencies(e){let t=this.cache.get(e);if(!t){const n=this,s=this.json[e+(e==="mesh"?"es":"s")]||[];t=Promise.all(s.map(function(r,o){return n.getDependency(e,o)})),this.cache.add(e,t)}return t}loadBuffer(e){const t=this.json.buffers[e],n=this.fileLoader;if(t.type&&t.type!=="arraybuffer")throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(t.uri===void 0&&e===0)return Promise.resolve(this.extensions[ht.KHR_BINARY_GLTF].body);const s=this.options;return new Promise(function(r,o){n.load(ro.resolveURL(t.uri,s.path),r,void 0,function(){o(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))})})}loadBufferView(e){const t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then(function(n){const s=t.byteLength||0,r=t.byteOffset||0;return n.slice(r,r+s)})}loadAccessor(e){const t=this,n=this.json,s=this.json.accessors[e];if(s.bufferView===void 0&&s.sparse===void 0){const o=xl[s.type],a=wr[s.componentType],l=s.normalized===!0,d=new a(s.count*o);return Promise.resolve(new Dn(d,o,l))}const r=[];return s.bufferView!==void 0?r.push(this.getDependency("bufferView",s.bufferView)):r.push(null),s.sparse!==void 0&&(r.push(this.getDependency("bufferView",s.sparse.indices.bufferView)),r.push(this.getDependency("bufferView",s.sparse.values.bufferView))),Promise.all(r).then(function(o){const a=o[0],l=xl[s.type],d=wr[s.componentType],c=d.BYTES_PER_ELEMENT,u=c*l,p=s.byteOffset||0,h=s.bufferView!==void 0?n.bufferViews[s.bufferView].byteStride:void 0,v=s.normalized===!0;let x,m;if(h&&h!==u){const f=Math.floor(p/h),N="InterleavedBuffer:"+s.bufferView+":"+s.componentType+":"+f+":"+s.count;let O=t.cache.get(N);O||(x=new d(a,f*h,s.count*h/c),O=new X7(x,h/c),t.cache.add(N,O)),m=new Zc(O,l,p%h/c,v)}else a===null?x=new d(s.count*l):x=new d(a,p,s.count*l),m=new Dn(x,l,v);if(s.sparse!==void 0){const f=xl.SCALAR,N=wr[s.sparse.indices.componentType],O=s.sparse.indices.byteOffset||0,P=s.sparse.values.byteOffset||0,j=new N(o[1],O,s.sparse.count*f),D=new d(o[2],P,s.sparse.count*l);a!==null&&(m=new Dn(m.array.slice(),m.itemSize,m.normalized)),m.normalized=!1;for(let V=0,G=j.length;V<G;V++){const M=j[V];if(m.setX(M,D[V*l]),l>=2&&m.setY(M,D[V*l+1]),l>=3&&m.setZ(M,D[V*l+2]),l>=4&&m.setW(M,D[V*l+3]),l>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}m.normalized=v}return m})}loadTexture(e){const t=this.json,n=this.options,r=t.textures[e].source,o=t.images[r];let a=this.textureLoader;if(o.uri){const l=n.manager.getHandler(o.uri);l!==null&&(a=l)}return this.loadTextureImage(e,r,a)}loadTextureImage(e,t,n){const s=this,r=this.json,o=r.textures[e],a=r.images[t],l=(a.uri||a.bufferView)+":"+o.sampler;if(this.textureCache[l])return this.textureCache[l];const d=this.loadImageSource(t,n).then(function(c){c.flipY=!1,c.name=o.name||a.name||"",c.name===""&&typeof a.uri=="string"&&a.uri.startsWith("data:image/")===!1&&(c.name=a.uri);const p=(r.samplers||{})[o.sampler]||{};return c.magFilter=F1[p.magFilter]||wn,c.minFilter=F1[p.minFilter]||Ti,c.wrapS=q1[p.wrapS]||Sr,c.wrapT=q1[p.wrapT]||Sr,c.generateMipmaps=!c.isCompressedTexture&&c.minFilter!==In&&c.minFilter!==wn,s.associations.set(c,{textures:e}),c}).catch(function(){return null});return this.textureCache[l]=d,d}loadImageSource(e,t){const n=this,s=this.json,r=this.options;if(this.sourceCache[e]!==void 0)return this.sourceCache[e].then(u=>u.clone());const o=s.images[e],a=self.URL||self.webkitURL;let l=o.uri||"",d=!1;if(o.bufferView!==void 0)l=n.getDependency("bufferView",o.bufferView).then(function(u){d=!0;const p=new Blob([u],{type:o.mimeType});return l=a.createObjectURL(p),l});else if(o.uri===void 0)throw new Error("THREE.GLTFLoader: Image "+e+" is missing URI and bufferView");const c=Promise.resolve(l).then(function(u){return new Promise(function(p,h){let v=p;t.isImageBitmapLoader===!0&&(v=function(x){const m=new gn(x);m.needsUpdate=!0,p(m)}),t.load(ro.resolveURL(u,r.path),v,void 0,h)})}).then(function(u){return d===!0&&a.revokeObjectURL(l),Di(u,o),u.userData.mimeType=o.mimeType||ob(o.uri),u}).catch(function(u){throw console.error("THREE.GLTFLoader: Couldn't load texture",l),u});return this.sourceCache[e]=c,c}assignTexture(e,t,n,s){const r=this;return this.getDependency("texture",n.index).then(function(o){if(!o)return null;if(n.texCoord!==void 0&&n.texCoord>0&&(o=o.clone(),o.channel=n.texCoord),r.extensions[ht.KHR_TEXTURE_TRANSFORM]){const a=n.extensions!==void 0?n.extensions[ht.KHR_TEXTURE_TRANSFORM]:void 0;if(a){const l=r.associations.get(o);o=r.extensions[ht.KHR_TEXTURE_TRANSFORM].extendTexture(o,a),r.associations.set(o,l)}}return s!==void 0&&(o.colorSpace=s),e[t]=o,o})}assignFinalMaterial(e){const t=e.geometry;let n=e.material;const s=t.attributes.tangent===void 0,r=t.attributes.color!==void 0,o=t.attributes.normal===void 0;if(e.isPoints){const a="PointsMaterial:"+n.uuid;let l=this.cache.get(a);l||(l=new V2,hi.prototype.copy.call(l,n),l.color.copy(n.color),l.map=n.map,l.sizeAttenuation=!1,this.cache.add(a,l)),n=l}else if(e.isLine){const a="LineBasicMaterial:"+n.uuid;let l=this.cache.get(a);l||(l=new vo,hi.prototype.copy.call(l,n),l.color.copy(n.color),l.map=n.map,this.cache.add(a,l)),n=l}if(s||r||o){let a="ClonedMaterial:"+n.uuid+":";s&&(a+="derivative-tangents:"),r&&(a+="vertex-colors:"),o&&(a+="flat-shading:");let l=this.cache.get(a);l||(l=n.clone(),r&&(l.vertexColors=!0),o&&(l.flatShading=!0),s&&(l.normalScale&&(l.normalScale.y*=-1),l.clearcoatNormalScale&&(l.clearcoatNormalScale.y*=-1)),this.cache.add(a,l),this.associations.set(l,this.associations.get(n))),n=l}e.material=n}getMaterialType(){return zr}loadMaterial(e){const t=this,n=this.json,s=this.extensions,r=n.materials[e];let o;const a={},l=r.extensions||{},d=[];if(l[ht.KHR_MATERIALS_UNLIT]){const u=s[ht.KHR_MATERIALS_UNLIT];o=u.getMaterialType(),d.push(u.extendParams(a,r,t))}else{const u=r.pbrMetallicRoughness||{};if(a.color=new tt(1,1,1),a.opacity=1,Array.isArray(u.baseColorFactor)){const p=u.baseColorFactor;a.color.setRGB(p[0],p[1],p[2],Sn),a.opacity=p[3]}u.baseColorTexture!==void 0&&d.push(t.assignTexture(a,"map",u.baseColorTexture,yn)),a.metalness=u.metallicFactor!==void 0?u.metallicFactor:1,a.roughness=u.roughnessFactor!==void 0?u.roughnessFactor:1,u.metallicRoughnessTexture!==void 0&&(d.push(t.assignTexture(a,"metalnessMap",u.metallicRoughnessTexture)),d.push(t.assignTexture(a,"roughnessMap",u.metallicRoughnessTexture))),o=this._invokeOne(function(p){return p.getMaterialType&&p.getMaterialType(e)}),d.push(Promise.all(this._invokeAll(function(p){return p.extendMaterialParams&&p.extendMaterialParams(e,a)})))}r.doubleSided===!0&&(a.side=gi);const c=r.alphaMode||Tl.OPAQUE;if(c===Tl.BLEND?(a.transparent=!0,a.depthWrite=!1):(a.transparent=!1,c===Tl.MASK&&(a.alphaTest=r.alphaCutoff!==void 0?r.alphaCutoff:.5)),r.normalTexture!==void 0&&o!==qi&&(d.push(t.assignTexture(a,"normalMap",r.normalTexture)),a.normalScale=new et(1,1),r.normalTexture.scale!==void 0)){const u=r.normalTexture.scale;a.normalScale.set(u,u)}if(r.occlusionTexture!==void 0&&o!==qi&&(d.push(t.assignTexture(a,"aoMap",r.occlusionTexture)),r.occlusionTexture.strength!==void 0&&(a.aoMapIntensity=r.occlusionTexture.strength)),r.emissiveFactor!==void 0&&o!==qi){const u=r.emissiveFactor;a.emissive=new tt().setRGB(u[0],u[1],u[2],Sn)}return r.emissiveTexture!==void 0&&o!==qi&&d.push(t.assignTexture(a,"emissiveMap",r.emissiveTexture,yn)),Promise.all(d).then(function(){const u=new o(a);return r.name&&(u.name=r.name),Di(u,r),t.associations.set(u,{materials:e}),r.extensions&&Ts(s,u,r),u})}createUniqueName(e){const t=Ot.sanitizeNodeName(e||"");return t in this.nodeNamesUsed?t+"_"+ ++this.nodeNamesUsed[t]:(this.nodeNamesUsed[t]=0,t)}loadGeometries(e){const t=this,n=this.extensions,s=this.primitiveCache;function r(a){return n[ht.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(a,t).then(function(l){return Y1(l,a,t)})}const o=[];for(let a=0,l=e.length;a<l;a++){const d=e[a],c=rb(d),u=s[c];if(u)o.push(u.promise);else{let p;d.extensions&&d.extensions[ht.KHR_DRACO_MESH_COMPRESSION]?p=r(d):p=Y1(new zn,d,t),s[c]={primitive:d,promise:p},o.push(p)}}return Promise.all(o)}loadMesh(e){const t=this,n=this.json,s=this.extensions,r=n.meshes[e],o=r.primitives,a=[];for(let l=0,d=o.length;l<d;l++){const c=o[l].material===void 0?nb(this.cache):this.getDependency("material",o[l].material);a.push(c)}return a.push(t.loadGeometries(o)),Promise.all(a).then(function(l){const d=l.slice(0,l.length-1),c=l[l.length-1],u=[];for(let h=0,v=c.length;h<v;h++){const x=c[h],m=o[h];let f;const N=d[h];if(m.mode===_n.TRIANGLES||m.mode===_n.TRIANGLE_STRIP||m.mode===_n.TRIANGLE_FAN||m.mode===void 0)f=r.isSkinnedMesh===!0?new D7(x,N):new Kt(x,N),f.isSkinnedMesh===!0&&f.normalizeSkinWeights(),m.mode===_n.TRIANGLE_STRIP?f.geometry=V1(f.geometry,N2):m.mode===_n.TRIANGLE_FAN&&(f.geometry=V1(f.geometry,Ud));else if(m.mode===_n.LINES)f=new Kc(x,N);else if(m.mode===_n.LINE_STRIP)f=new g0(x,N);else if(m.mode===_n.LINE_LOOP)f=new q7(x,N);else if(m.mode===_n.POINTS)f=new Y7(x,N);else throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+m.mode);Object.keys(f.geometry.morphAttributes).length>0&&sb(f,r),f.name=t.createUniqueName(r.name||"mesh_"+e),Di(f,r),m.extensions&&Ts(s,f,m),t.assignFinalMaterial(f),u.push(f)}for(let h=0,v=u.length;h<v;h++)t.associations.set(u[h],{meshes:e,primitives:h});if(u.length===1)return r.extensions&&Ts(s,u[0],r),u[0];const p=new cs;r.extensions&&Ts(s,p,r),t.associations.set(p,{meshes:e});for(let h=0,v=u.length;h<v;h++)p.add(u[h]);return p})}loadCamera(e){let t;const n=this.json.cameras[e],s=n[n.type];if(!s){console.warn("THREE.GLTFLoader: Missing camera parameters.");return}return n.type==="perspective"?t=new Xn(O2.radToDeg(s.yfov),s.aspectRatio||1,s.znear||1,s.zfar||2e6):n.type==="orthographic"&&(t=new $c(-s.xmag,s.xmag,s.ymag,-s.ymag,s.znear,s.zfar)),n.name&&(t.name=this.createUniqueName(n.name)),Di(t,n),Promise.resolve(t)}loadSkin(e){const t=this.json.skins[e],n=[];for(let s=0,r=t.joints.length;s<r;s++)n.push(this._loadNodeShallow(t.joints[s]));return t.inverseBindMatrices!==void 0?n.push(this.getDependency("accessor",t.inverseBindMatrices)):n.push(null),Promise.all(n).then(function(s){const r=s.pop(),o=s,a=[],l=[];for(let d=0,c=o.length;d<c;d++){const u=o[d];if(u){a.push(u);const p=new Be;r!==null&&p.fromArray(r.array,d*16),l.push(p)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[d])}return new Jc(a,l)})}loadAnimation(e){const t=this.json,n=this,s=t.animations[e],r=s.name?s.name:"animation_"+e,o=[],a=[],l=[],d=[],c=[];for(let u=0,p=s.channels.length;u<p;u++){const h=s.channels[u],v=s.samplers[h.sampler],x=h.target,m=x.node,f=s.parameters!==void 0?s.parameters[v.input]:v.input,N=s.parameters!==void 0?s.parameters[v.output]:v.output;x.node!==void 0&&(o.push(this.getDependency("node",m)),a.push(this.getDependency("accessor",f)),l.push(this.getDependency("accessor",N)),d.push(v),c.push(x))}return Promise.all([Promise.all(o),Promise.all(a),Promise.all(l),Promise.all(d),Promise.all(c)]).then(function(u){const p=u[0],h=u[1],v=u[2],x=u[3],m=u[4],f=[];for(let N=0,O=p.length;N<O;N++){const P=p[N],j=h[N],D=v[N],V=x[N],G=m[N];if(P===void 0)continue;P.updateMatrix&&P.updateMatrix();const M=n._createAnimationTracks(P,j,D,V,G);if(M)for(let R=0;R<M.length;R++)f.push(M[R])}return new $7(r,void 0,f)})}createNodeMesh(e){const t=this.json,n=this,s=t.nodes[e];return s.mesh===void 0?null:n.getDependency("mesh",s.mesh).then(function(r){const o=n._getNodeRef(n.meshCache,s.mesh,r);return s.weights!==void 0&&o.traverse(function(a){if(a.isMesh)for(let l=0,d=s.weights.length;l<d;l++)a.morphTargetInfluences[l]=s.weights[l]}),o})}loadNode(e){const t=this.json,n=this,s=t.nodes[e],r=n._loadNodeShallow(e),o=[],a=s.children||[];for(let d=0,c=a.length;d<c;d++)o.push(n.getDependency("node",a[d]));const l=s.skin===void 0?Promise.resolve(null):n.getDependency("skin",s.skin);return Promise.all([r,Promise.all(o),l]).then(function(d){const c=d[0],u=d[1],p=d[2];p!==null&&c.traverse(function(h){h.isSkinnedMesh&&h.bind(p,ab)});for(let h=0,v=u.length;h<v;h++)c.add(u[h]);return c})}_loadNodeShallow(e){const t=this.json,n=this.extensions,s=this;if(this.nodeCache[e]!==void 0)return this.nodeCache[e];const r=t.nodes[e],o=r.name?s.createUniqueName(r.name):"",a=[],l=s._invokeOne(function(d){return d.createNodeMesh&&d.createNodeMesh(e)});return l&&a.push(l),r.camera!==void 0&&a.push(s.getDependency("camera",r.camera).then(function(d){return s._getNodeRef(s.cameraCache,r.camera,d)})),s._invokeAll(function(d){return d.createNodeAttachment&&d.createNodeAttachment(e)}).forEach(function(d){a.push(d)}),this.nodeCache[e]=Promise.all(a).then(function(d){let c;if(r.isBone===!0?c=new j2:d.length>1?c=new cs:d.length===1?c=d[0]:c=new Zt,c!==d[0])for(let u=0,p=d.length;u<p;u++)c.add(d[u]);if(r.name&&(c.userData.name=r.name,c.name=o),Di(c,r),r.extensions&&Ts(n,c,r),r.matrix!==void 0){const u=new Be;u.fromArray(r.matrix),c.applyMatrix4(u)}else r.translation!==void 0&&c.position.fromArray(r.translation),r.rotation!==void 0&&c.quaternion.fromArray(r.rotation),r.scale!==void 0&&c.scale.fromArray(r.scale);if(!s.associations.has(c))s.associations.set(c,{});else if(r.mesh!==void 0&&s.meshCache.refs[r.mesh]>1){const u=s.associations.get(c);s.associations.set(c,{...u})}return s.associations.get(c).nodes=e,c}),this.nodeCache[e]}loadScene(e){const t=this.extensions,n=this.json.scenes[e],s=this,r=new cs;n.name&&(r.name=s.createUniqueName(n.name)),Di(r,n),n.extensions&&Ts(t,r,n);const o=n.nodes||[],a=[];for(let l=0,d=o.length;l<d;l++)a.push(s.getDependency("node",o[l]));return Promise.all(a).then(function(l){for(let c=0,u=l.length;c<u;c++)r.add(l[c]);const d=c=>{const u=new Map;for(const[p,h]of s.associations)(p instanceof hi||p instanceof gn)&&u.set(p,h);return c.traverse(p=>{const h=s.associations.get(p);h!=null&&u.set(p,h)}),u};return s.associations=d(r),r})}_createAnimationTracks(e,t,n,s,r){const o=[],a=e.name?e.name:e.uuid,l=[];is[r.path]===is.weights?e.traverse(function(p){p.morphTargetInfluences&&l.push(p.name?p.name:p.uuid)}):l.push(a);let d;switch(is[r.path]){case is.weights:d=Lr;break;case is.rotation:d=Nr;break;case is.translation:case is.scale:d=Mr;break;default:switch(n.itemSize){case 1:d=Lr;break;case 2:case 3:default:d=Mr;break}break}const c=s.interpolation!==void 0?tb[s.interpolation]:mo,u=this._getArrayFromAccessor(n);for(let p=0,h=l.length;p<h;p++){const v=new d(l[p]+"."+is[r.path],t.array,u,c);s.interpolation==="CUBICSPLINE"&&this._createCubicSplineTrackInterpolant(v),o.push(v)}return o}_getArrayFromAccessor(e){let t=e.array;if(e.normalized){const n=$d(t.constructor),s=new Float32Array(t.length);for(let r=0,o=t.length;r<o;r++)s[r]=t[r]*n;t=s}return t}_createCubicSplineTrackInterpolant(e){e.createInterpolant=function(n){const s=this instanceof Nr?eb:e3;return new s(this.times,this.values,this.getValueSize()/3,n)},e.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0}}function db(i,e,t){const n=e.attributes,s=new Bi;if(n.POSITION!==void 0){const a=t.json.accessors[n.POSITION],l=a.min,d=a.max;if(l!==void 0&&d!==void 0){if(s.set(new T(l[0],l[1],l[2]),new T(d[0],d[1],d[2])),a.normalized){const c=$d(wr[a.componentType]);s.min.multiplyScalar(c),s.max.multiplyScalar(c)}}else{console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.");return}}else return;const r=e.targets;if(r!==void 0){const a=new T,l=new T;for(let d=0,c=r.length;d<c;d++){const u=r[d];if(u.POSITION!==void 0){const p=t.json.accessors[u.POSITION],h=p.min,v=p.max;if(h!==void 0&&v!==void 0){if(l.setX(Math.max(Math.abs(h[0]),Math.abs(v[0]))),l.setY(Math.max(Math.abs(h[1]),Math.abs(v[1]))),l.setZ(Math.max(Math.abs(h[2]),Math.abs(v[2]))),p.normalized){const x=$d(wr[p.componentType]);l.multiplyScalar(x)}a.max(l)}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}s.expandByVector(a)}i.boundingBox=s;const o=new Ri;s.getCenter(o.center),o.radius=s.min.distanceTo(s.max)/2,i.boundingSphere=o}function Y1(i,e,t){const n=e.attributes,s=[];function r(o,a){return t.getDependency("accessor",o).then(function(l){i.setAttribute(a,l)})}for(const o in n){const a=_d[o]||o.toLowerCase();a in i.attributes||s.push(r(n[o],a))}if(e.indices!==void 0&&!i.index){const o=t.getDependency("accessor",e.indices).then(function(a){i.setIndex(a)});s.push(o)}return wt.workingColorSpace!==Sn&&"COLOR_0"in n&&console.warn(`THREE.GLTFLoader: Converting vertex colors from "srgb-linear" to "${wt.workingColorSpace}" not supported.`),Di(i,e),db(i,e,t),Promise.all(s).then(function(){return e.targets!==void 0?ib(i,e.targets,t):i})}/*!
fflate - fast JavaScript compression/decompression
<https://101arrowz.github.io/fflate>
Licensed under MIT. https://github.com/101arrowz/fflate/blob/master/LICENSE
version 0.8.2
*/var ei=Uint8Array,ur=Uint16Array,cb=Int32Array,t3=new ei([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),n3=new ei([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),ub=new ei([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),i3=function(i,e){for(var t=new ur(31),n=0;n<31;++n)t[n]=e+=1<<i[n-1];for(var s=new cb(t[30]),n=1;n<30;++n)for(var r=t[n];r<t[n+1];++r)s[r]=r-t[n]<<5|n;return{b:t,r:s}},s3=i3(t3,2),r3=s3.b,pb=s3.r;r3[28]=258,pb[258]=28;var fb=i3(n3,0),hb=fb.b,ec=new ur(32768);for(var Gt=0;Gt<32768;++Gt){var ss=(Gt&43690)>>1|(Gt&21845)<<1;ss=(ss&52428)>>2|(ss&13107)<<2,ss=(ss&61680)>>4|(ss&3855)<<4,ec[Gt]=((ss&65280)>>8|(ss&255)<<8)>>1}var oo=function(i,e,t){for(var n=i.length,s=0,r=new ur(e);s<n;++s)i[s]&&++r[i[s]-1];var o=new ur(e);for(s=1;s<e;++s)o[s]=o[s-1]+r[s-1]<<1;var a;if(t){a=new ur(1<<e);var l=15-e;for(s=0;s<n;++s)if(i[s])for(var d=s<<4|i[s],c=e-i[s],u=o[i[s]-1]++<<c,p=u|(1<<c)-1;u<=p;++u)a[ec[u]>>l]=d}else for(a=new ur(n),s=0;s<n;++s)i[s]&&(a[s]=ec[o[i[s]-1]++]>>15-i[s]);return a},No=new ei(288);for(var Gt=0;Gt<144;++Gt)No[Gt]=8;for(var Gt=144;Gt<256;++Gt)No[Gt]=9;for(var Gt=256;Gt<280;++Gt)No[Gt]=7;for(var Gt=280;Gt<288;++Gt)No[Gt]=8;var o3=new ei(32);for(var Gt=0;Gt<32;++Gt)o3[Gt]=5;var mb=oo(No,9,1),bb=oo(o3,5,1),Pl=function(i){for(var e=i[0],t=1;t<i.length;++t)i[t]>e&&(e=i[t]);return e},oi=function(i,e,t){var n=e/8|0;return(i[n]|i[n+1]<<8)>>(e&7)&t},Rl=function(i,e){var t=e/8|0;return(i[t]|i[t+1]<<8|i[t+2]<<16)>>(e&7)},vb=function(i){return(i+7)/8|0},yb=function(i,e,t){return(t==null||t>i.length)&&(t=i.length),new ei(i.subarray(e,t))},wb=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],li=function(i,e,t){var n=new Error(e||wb[i]);if(n.code=i,Error.captureStackTrace&&Error.captureStackTrace(n,li),!t)throw n;return n},gb=function(i,e,t,n){var s=i.length,r=0;if(!s||e.f&&!e.l)return t||new ei(0);var o=!t,a=o||e.i!=2,l=e.i;o&&(t=new ei(s*3));var d=function(Nt){var Ht=t.length;if(Nt>Ht){var ft=new ei(Math.max(Ht*2,Nt));ft.set(t),t=ft}},c=e.f||0,u=e.p||0,p=e.b||0,h=e.l,v=e.d,x=e.m,m=e.n,f=s*8;do{if(!h){c=oi(i,u,1);var N=oi(i,u+1,3);if(u+=3,N)if(N==1)h=mb,v=bb,x=9,m=5;else if(N==2){var D=oi(i,u,31)+257,V=oi(i,u+10,15)+4,G=D+oi(i,u+5,31)+1;u+=14;for(var M=new ei(G),R=new ei(19),F=0;F<V;++F)R[ub[F]]=oi(i,u+F*3,7);u+=V*3;for(var K=Pl(R),Q=(1<<K)-1,ee=oo(R,K,1),F=0;F<G;){var ue=ee[oi(i,u,Q)];u+=ue&15;var O=ue>>4;if(O<16)M[F++]=O;else{var ne=0,ve=0;for(O==16?(ve=3+oi(i,u,3),u+=2,ne=M[F-1]):O==17?(ve=3+oi(i,u,7),u+=3):O==18&&(ve=11+oi(i,u,127),u+=7);ve--;)M[F++]=ne}}var te=M.subarray(0,D),Te=M.subarray(D);x=Pl(te),m=Pl(Te),h=oo(te,x,1),v=oo(Te,m,1)}else li(1);else{var O=vb(u)+4,P=i[O-4]|i[O-3]<<8,j=O+P;if(j>s){l&&li(0);break}a&&d(p+P),t.set(i.subarray(O,j),p),e.b=p+=P,e.p=u=j*8,e.f=c;continue}if(u>f){l&&li(0);break}}a&&d(p+131072);for(var Le=(1<<x)-1,je=(1<<m)-1,Ke=u;;Ke=u){var ne=h[Rl(i,u)&Le],ut=ne>>4;if(u+=ne&15,u>f){l&&li(0);break}if(ne||li(2),ut<256)t[p++]=ut;else if(ut==256){Ke=u,h=null;break}else{var se=ut-254;if(ut>264){var F=ut-257,ge=t3[F];se=oi(i,u,(1<<ge)-1)+r3[F],u+=ge}var xe=v[Rl(i,u)&je],Se=xe>>4;xe||li(3),u+=xe&15;var Te=hb[Se];if(Se>3){var ge=n3[Se];Te+=Rl(i,u)&(1<<ge)-1,u+=ge}if(u>f){l&&li(0);break}a&&d(p+131072);var Ae=p+se;if(p<Te){var mt=r-Te,Ue=Math.min(Te,Ae);for(mt+p<0&&li(3);p<Ue;++p)t[p]=n[mt+p]}for(;p<Ae;++p)t[p]=t[p-Te]}}e.l=h,e.p=Ke,e.b=p,e.f=c,h&&(c=1,e.m=x,e.d=v,e.n=m)}while(!c);return p!=t.length&&o?yb(t,0,p):t.subarray(0,p)},xb=new ei(0),Tb=function(i,e){return((i[0]&15)!=8||i[0]>>4>7||(i[0]<<8|i[1])%31)&&li(6,"invalid zlib data"),(i[1]>>5&1)==1&&li(6,"invalid zlib data: "+(i[1]&32?"need":"unexpected")+" dictionary"),(i[1]>>3&4)+2};function ca(i,e){return gb(i.subarray(Tb(i),-4),{i:2},e,e)}var Sb=typeof TextDecoder<"u"&&new TextDecoder,Pb=0;try{Sb.decode(xb,{stream:!0}),Pb=1}catch{}class Rb extends o9{constructor(e){super(e),this.type=Ci}parse(e){const M=Math.pow(2.7182818,2.2);function R(w,L){let X=0;for(let z=0;z<65536;++z)(z==0||w[z>>3]&1<<(z&7))&&(L[X++]=z);const g=X-1;for(;X<65536;)L[X++]=0;return g}function F(w){for(let L=0;L<16384;L++)w[L]={},w[L].len=0,w[L].lit=0,w[L].p=null}const K={l:0,c:0,lc:0};function Q(w,L,X,g,z){for(;X<w;)L=L<<8|Ze(g,z),X+=8;X-=w,K.l=L>>X&(1<<w)-1,K.c=L,K.lc=X}const ee=new Array(59);function ue(w){for(let X=0;X<=58;++X)ee[X]=0;for(let X=0;X<65537;++X)ee[w[X]]+=1;let L=0;for(let X=58;X>0;--X){const g=L+ee[X]>>1;ee[X]=L,L=g}for(let X=0;X<65537;++X){const g=w[X];g>0&&(w[X]=g|ee[g]++<<6)}}function ne(w,L,X,g,z,H){const I=L;let E=0,U=0;for(;g<=z;g++){if(I.value-L.value>X)return!1;Q(6,E,U,w,I);const k=K.l;if(E=K.c,U=K.lc,H[g]=k,k==63){if(I.value-L.value>X)throw new Error("Something wrong with hufUnpackEncTable");Q(8,E,U,w,I);let J=K.l+6;if(E=K.c,U=K.lc,g+J>z+1)throw new Error("Something wrong with hufUnpackEncTable");for(;J--;)H[g++]=0;g--}else if(k>=59){let J=k-59+2;if(g+J>z+1)throw new Error("Something wrong with hufUnpackEncTable");for(;J--;)H[g++]=0;g--}}ue(H)}function ve(w){return w&63}function te(w){return w>>6}function Te(w,L,X,g){for(;L<=X;L++){const z=te(w[L]),H=ve(w[L]);if(z>>H)throw new Error("Invalid table entry");if(H>14){const I=g[z>>H-14];if(I.len)throw new Error("Invalid table entry");if(I.lit++,I.p){const E=I.p;I.p=new Array(I.lit);for(let U=0;U<I.lit-1;++U)I.p[U]=E[U]}else I.p=new Array(1);I.p[I.lit-1]=L}else if(H){let I=0;for(let E=1<<14-H;E>0;E--){const U=g[(z<<14-H)+I];if(U.len||U.p)throw new Error("Invalid table entry");U.len=H,U.lit=L,I++}}}return!0}const Le={c:0,lc:0};function je(w,L,X,g){w=w<<8|Ze(X,g),L+=8,Le.c=w,Le.lc=L}const Ke={c:0,lc:0};function ut(w,L,X,g,z,H,I,E,U){if(w==L){g<8&&(je(X,g,z,H),X=Le.c,g=Le.lc),g-=8;let k=X>>g;if(k=new Uint8Array([k])[0],E.value+k>U)return!1;const J=I[E.value-1];for(;k-- >0;)I[E.value++]=J}else if(E.value<U)I[E.value++]=w;else return!1;Ke.c=X,Ke.lc=g}function se(w){return w&65535}function ge(w){const L=se(w);return L>32767?L-65536:L}const xe={a:0,b:0};function Se(w,L){const X=ge(w),z=ge(L),H=X+(z&1)+(z>>1),I=H,E=H-z;xe.a=I,xe.b=E}function Ae(w,L){const X=se(w),g=se(L),z=X-(g>>1)&65535,H=g+z-32768&65535;xe.a=H,xe.b=z}function mt(w,L,X,g,z,H,I){const E=I<16384,U=X>z?z:X;let k=1,J,$;for(;k<=U;)k<<=1;for(k>>=1,J=k,k>>=1;k>=1;){$=0;const oe=$+H*(z-J),ae=H*k,ce=H*J,fe=g*k,we=g*J;let Oe,Ye,ke,Ee;for(;$<=oe;$+=ce){let $e=$;const ze=$+g*(X-J);for(;$e<=ze;$e+=we){const xt=$e+fe,tn=$e+ae,Tt=tn+fe;E?(Se(w[$e+L],w[tn+L]),Oe=xe.a,ke=xe.b,Se(w[xt+L],w[Tt+L]),Ye=xe.a,Ee=xe.b,Se(Oe,Ye),w[$e+L]=xe.a,w[xt+L]=xe.b,Se(ke,Ee),w[tn+L]=xe.a,w[Tt+L]=xe.b):(Ae(w[$e+L],w[tn+L]),Oe=xe.a,ke=xe.b,Ae(w[xt+L],w[Tt+L]),Ye=xe.a,Ee=xe.b,Ae(Oe,Ye),w[$e+L]=xe.a,w[xt+L]=xe.b,Ae(ke,Ee),w[tn+L]=xe.a,w[Tt+L]=xe.b)}if(X&k){const xt=$e+ae;E?Se(w[$e+L],w[xt+L]):Ae(w[$e+L],w[xt+L]),Oe=xe.a,w[xt+L]=xe.b,w[$e+L]=Oe}}if(z&k){let $e=$;const ze=$+g*(X-J);for(;$e<=ze;$e+=we){const xt=$e+fe;E?Se(w[$e+L],w[xt+L]):Ae(w[$e+L],w[xt+L]),Oe=xe.a,w[xt+L]=xe.b,w[$e+L]=Oe}}J=k,k>>=1}return $}function Ue(w,L,X,g,z,H,I,E,U){let k=0,J=0;const $=I,oe=Math.trunc(g.value+(z+7)/8);for(;g.value<oe;)for(je(k,J,X,g),k=Le.c,J=Le.lc;J>=14;){const ce=k>>J-14&16383,fe=L[ce];if(fe.len)J-=fe.len,ut(fe.lit,H,k,J,X,g,E,U,$),k=Ke.c,J=Ke.lc;else{if(!fe.p)throw new Error("hufDecode issues");let we;for(we=0;we<fe.lit;we++){const Oe=ve(w[fe.p[we]]);for(;J<Oe&&g.value<oe;)je(k,J,X,g),k=Le.c,J=Le.lc;if(J>=Oe&&te(w[fe.p[we]])==(k>>J-Oe&(1<<Oe)-1)){J-=Oe,ut(fe.p[we],H,k,J,X,g,E,U,$),k=Ke.c,J=Ke.lc;break}}if(we==fe.lit)throw new Error("hufDecode issues")}}const ae=8-z&7;for(k>>=ae,J-=ae;J>0;){const ce=L[k<<14-J&16383];if(ce.len)J-=ce.len,ut(ce.lit,H,k,J,X,g,E,U,$),k=Ke.c,J=Ke.lc;else throw new Error("hufDecode issues")}return!0}function Nt(w,L,X,g,z,H){const I={value:0},E=X.value,U=Pe(L,X),k=Pe(L,X);X.value+=4;const J=Pe(L,X);if(X.value+=4,U<0||U>=65537||k<0||k>=65537)throw new Error("Something wrong with HUF_ENCSIZE");const $=new Array(65537),oe=new Array(16384);F(oe);const ae=g-(X.value-E);if(ne(w,X,ae,U,k,$),J>8*(g-(X.value-E)))throw new Error("Something wrong with hufUncompress");Te($,U,k,oe),Ue($,oe,w,X,J,k,H,z,I)}function Ht(w,L,X){for(let g=0;g<X;++g)L[g]=w[L[g]]}function ft(w){for(let L=1;L<w.length;L++){const X=w[L-1]+w[L]-128;w[L]=X}}function C(w,L){let X=0,g=Math.floor((w.length+1)/2),z=0;const H=w.length-1;for(;!(z>H||(L[z++]=w[X++],z>H));)L[z++]=w[g++]}function cn(w){let L=w.byteLength;const X=new Array;let g=0;const z=new DataView(w);for(;L>0;){const H=z.getInt8(g++);if(H<0){const I=-H;L-=I+1;for(let E=0;E<I;E++)X.push(z.getUint8(g++))}else{const I=H;L-=2;const E=z.getUint8(g++);for(let U=0;U<I+1;U++)X.push(E)}}return X}function gt(w,L,X,g,z,H){let I=new DataView(H.buffer);const E=X[w.idx[0]].width,U=X[w.idx[0]].height,k=3,J=Math.floor(E/8),$=Math.ceil(E/8),oe=Math.ceil(U/8),ae=E-($-1)*8,ce=U-(oe-1)*8,fe={value:0},we=new Array(k),Oe=new Array(k),Ye=new Array(k),ke=new Array(k),Ee=new Array(k);for(let ze=0;ze<k;++ze)Ee[ze]=L[w.idx[ze]],we[ze]=ze<1?0:we[ze-1]+$*oe,Oe[ze]=new Float32Array(64),Ye[ze]=new Uint16Array(64),ke[ze]=new Uint16Array($*64);for(let ze=0;ze<oe;++ze){let xt=8;ze==oe-1&&(xt=ce);let tn=8;for(let bt=0;bt<$;++bt){bt==$-1&&(tn=ae);for(let Je=0;Je<k;++Je)Ye[Je].fill(0),Ye[Je][0]=z[we[Je]++],Et(fe,g,Ye[Je]),Ve(Ye[Je],Oe[Je]),yt(Oe[Je]);Ge(Oe);for(let Je=0;Je<k;++Je)it(Oe[Je],ke[Je],bt*64)}let Tt=0;for(let bt=0;bt<k;++bt){const Je=X[w.idx[bt]].type;for(let Jt=8*ze;Jt<8*ze+xt;++Jt){Tt=Ee[bt][Jt];for(let un=0;un<J;++un){const Vt=un*64+(Jt&7)*8;I.setUint16(Tt+0*2*Je,ke[bt][Vt+0],!0),I.setUint16(Tt+1*2*Je,ke[bt][Vt+1],!0),I.setUint16(Tt+2*2*Je,ke[bt][Vt+2],!0),I.setUint16(Tt+3*2*Je,ke[bt][Vt+3],!0),I.setUint16(Tt+4*2*Je,ke[bt][Vt+4],!0),I.setUint16(Tt+5*2*Je,ke[bt][Vt+5],!0),I.setUint16(Tt+6*2*Je,ke[bt][Vt+6],!0),I.setUint16(Tt+7*2*Je,ke[bt][Vt+7],!0),Tt+=8*2*Je}}if(J!=$)for(let Jt=8*ze;Jt<8*ze+xt;++Jt){const un=Ee[bt][Jt]+8*J*2*Je,Vt=J*64+(Jt&7)*8;for(let nn=0;nn<tn;++nn)I.setUint16(un+nn*2*Je,ke[bt][Vt+nn],!0)}}}const $e=new Uint16Array(E);I=new DataView(H.buffer);for(let ze=0;ze<k;++ze){X[w.idx[ze]].decoded=!0;const xt=X[w.idx[ze]].type;if(X[ze].type==2)for(let tn=0;tn<U;++tn){const Tt=Ee[ze][tn];for(let bt=0;bt<E;++bt)$e[bt]=I.getUint16(Tt+bt*2*xt,!0);for(let bt=0;bt<E;++bt)I.setFloat32(Tt+bt*2*xt,_($e[bt]),!0)}}}function Et(w,L,X){let g,z=1;for(;z<64;)g=L[w.value],g==65280?z=64:g>>8==255?z+=g&255:(X[z]=g,z++),w.value++}function Ve(w,L){L[0]=_(w[0]),L[1]=_(w[1]),L[2]=_(w[5]),L[3]=_(w[6]),L[4]=_(w[14]),L[5]=_(w[15]),L[6]=_(w[27]),L[7]=_(w[28]),L[8]=_(w[2]),L[9]=_(w[4]),L[10]=_(w[7]),L[11]=_(w[13]),L[12]=_(w[16]),L[13]=_(w[26]),L[14]=_(w[29]),L[15]=_(w[42]),L[16]=_(w[3]),L[17]=_(w[8]),L[18]=_(w[12]),L[19]=_(w[17]),L[20]=_(w[25]),L[21]=_(w[30]),L[22]=_(w[41]),L[23]=_(w[43]),L[24]=_(w[9]),L[25]=_(w[11]),L[26]=_(w[18]),L[27]=_(w[24]),L[28]=_(w[31]),L[29]=_(w[40]),L[30]=_(w[44]),L[31]=_(w[53]),L[32]=_(w[10]),L[33]=_(w[19]),L[34]=_(w[23]),L[35]=_(w[32]),L[36]=_(w[39]),L[37]=_(w[45]),L[38]=_(w[52]),L[39]=_(w[54]),L[40]=_(w[20]),L[41]=_(w[22]),L[42]=_(w[33]),L[43]=_(w[38]),L[44]=_(w[46]),L[45]=_(w[51]),L[46]=_(w[55]),L[47]=_(w[60]),L[48]=_(w[21]),L[49]=_(w[34]),L[50]=_(w[37]),L[51]=_(w[47]),L[52]=_(w[50]),L[53]=_(w[56]),L[54]=_(w[59]),L[55]=_(w[61]),L[56]=_(w[35]),L[57]=_(w[36]),L[58]=_(w[48]),L[59]=_(w[49]),L[60]=_(w[57]),L[61]=_(w[58]),L[62]=_(w[62]),L[63]=_(w[63])}function yt(w){const L=.5*Math.cos(.7853975),X=.5*Math.cos(3.14159/16),g=.5*Math.cos(3.14159/8),z=.5*Math.cos(3*3.14159/16),H=.5*Math.cos(5*3.14159/16),I=.5*Math.cos(3*3.14159/8),E=.5*Math.cos(7*3.14159/16),U=new Array(4),k=new Array(4),J=new Array(4),$=new Array(4);for(let oe=0;oe<8;++oe){const ae=oe*8;U[0]=g*w[ae+2],U[1]=I*w[ae+2],U[2]=g*w[ae+6],U[3]=I*w[ae+6],k[0]=X*w[ae+1]+z*w[ae+3]+H*w[ae+5]+E*w[ae+7],k[1]=z*w[ae+1]-E*w[ae+3]-X*w[ae+5]-H*w[ae+7],k[2]=H*w[ae+1]-X*w[ae+3]+E*w[ae+5]+z*w[ae+7],k[3]=E*w[ae+1]-H*w[ae+3]+z*w[ae+5]-X*w[ae+7],J[0]=L*(w[ae+0]+w[ae+4]),J[3]=L*(w[ae+0]-w[ae+4]),J[1]=U[0]+U[3],J[2]=U[1]-U[2],$[0]=J[0]+J[1],$[1]=J[3]+J[2],$[2]=J[3]-J[2],$[3]=J[0]-J[1],w[ae+0]=$[0]+k[0],w[ae+1]=$[1]+k[1],w[ae+2]=$[2]+k[2],w[ae+3]=$[3]+k[3],w[ae+4]=$[3]-k[3],w[ae+5]=$[2]-k[2],w[ae+6]=$[1]-k[1],w[ae+7]=$[0]-k[0]}for(let oe=0;oe<8;++oe)U[0]=g*w[16+oe],U[1]=I*w[16+oe],U[2]=g*w[48+oe],U[3]=I*w[48+oe],k[0]=X*w[8+oe]+z*w[24+oe]+H*w[40+oe]+E*w[56+oe],k[1]=z*w[8+oe]-E*w[24+oe]-X*w[40+oe]-H*w[56+oe],k[2]=H*w[8+oe]-X*w[24+oe]+E*w[40+oe]+z*w[56+oe],k[3]=E*w[8+oe]-H*w[24+oe]+z*w[40+oe]-X*w[56+oe],J[0]=L*(w[oe]+w[32+oe]),J[3]=L*(w[oe]-w[32+oe]),J[1]=U[0]+U[3],J[2]=U[1]-U[2],$[0]=J[0]+J[1],$[1]=J[3]+J[2],$[2]=J[3]-J[2],$[3]=J[0]-J[1],w[0+oe]=$[0]+k[0],w[8+oe]=$[1]+k[1],w[16+oe]=$[2]+k[2],w[24+oe]=$[3]+k[3],w[32+oe]=$[3]-k[3],w[40+oe]=$[2]-k[2],w[48+oe]=$[1]-k[1],w[56+oe]=$[0]-k[0]}function Ge(w){for(let L=0;L<64;++L){const X=w[0][L],g=w[1][L],z=w[2][L];w[0][L]=X+1.5747*z,w[1][L]=X-.1873*g-.4682*z,w[2][L]=X+1.8556*g}}function it(w,L,X){for(let g=0;g<64;++g)L[X+g]=ju.toHalfFloat(Qt(w[g]))}function Qt(w){return w<=1?Math.sign(w)*Math.pow(Math.abs(w),2.2):Math.sign(w)*Math.pow(M,Math.abs(w)-1)}function A(w){return new DataView(w.array.buffer,w.offset.value,w.size)}function S(w){const L=w.viewer.buffer.slice(w.offset.value,w.offset.value+w.size),X=new Uint8Array(cn(L)),g=new Uint8Array(X.length);return ft(X),C(X,g),new DataView(g.buffer)}function B(w){const L=w.array.slice(w.offset.value,w.offset.value+w.size),X=ca(L),g=new Uint8Array(X.length);return ft(X),C(X,g),new DataView(g.buffer)}function re(w){const L=w.viewer,X={value:w.offset.value},g=new Uint16Array(w.columns*w.lines*(w.inputChannels.length*w.type)),z=new Uint8Array(8192);let H=0;const I=new Array(w.inputChannels.length);for(let ce=0,fe=w.inputChannels.length;ce<fe;ce++)I[ce]={},I[ce].start=H,I[ce].end=I[ce].start,I[ce].nx=w.columns,I[ce].ny=w.lines,I[ce].size=w.type,H+=I[ce].nx*I[ce].ny*I[ce].size;const E=he(L,X),U=he(L,X);if(U>=8192)throw new Error("Something is wrong with PIZ_COMPRESSION BITMAP_SIZE");if(E<=U)for(let ce=0;ce<U-E+1;ce++)z[ce+E]=Ce(L,X);const k=new Uint16Array(65536),J=R(z,k),$=Pe(L,X);Nt(w.array,L,X,$,g,H);for(let ce=0;ce<w.inputChannels.length;++ce){const fe=I[ce];for(let we=0;we<I[ce].size;++we)mt(g,fe.start+we,fe.nx,fe.size,fe.ny,fe.nx*fe.size,J)}Ht(k,g,H);let oe=0;const ae=new Uint8Array(g.buffer.byteLength);for(let ce=0;ce<w.lines;ce++)for(let fe=0;fe<w.inputChannels.length;fe++){const we=I[fe],Oe=we.nx*we.size,Ye=new Uint8Array(g.buffer,we.end*2,Oe*2);ae.set(Ye,oe),oe+=Oe*2,we.end+=Oe}return new DataView(ae.buffer)}function pe(w){const L=w.array.slice(w.offset.value,w.offset.value+w.size),X=ca(L),g=w.inputChannels.length*w.lines*w.columns*w.totalBytes,z=new ArrayBuffer(g),H=new DataView(z);let I=0,E=0;const U=new Array(4);for(let k=0;k<w.lines;k++)for(let J=0;J<w.inputChannels.length;J++){let $=0;switch(w.inputChannels[J].pixelType){case 1:U[0]=I,U[1]=U[0]+w.columns,I=U[1]+w.columns;for(let ae=0;ae<w.columns;++ae){const ce=X[U[0]++]<<8|X[U[1]++];$+=ce,H.setUint16(E,$,!0),E+=2}break;case 2:U[0]=I,U[1]=U[0]+w.columns,U[2]=U[1]+w.columns,I=U[2]+w.columns;for(let ae=0;ae<w.columns;++ae){const ce=X[U[0]++]<<24|X[U[1]++]<<16|X[U[2]++]<<8;$+=ce,H.setUint32(E,$,!0),E+=4}break}}return H}function ie(w){const L=w.viewer,X={value:w.offset.value},g=new Uint8Array(w.columns*w.lines*(w.inputChannels.length*w.type*2)),z={version:ye(L,X),unknownUncompressedSize:ye(L,X),unknownCompressedSize:ye(L,X),acCompressedSize:ye(L,X),dcCompressedSize:ye(L,X),rleCompressedSize:ye(L,X),rleUncompressedSize:ye(L,X),rleRawSize:ye(L,X),totalAcUncompressedCount:ye(L,X),totalDcUncompressedCount:ye(L,X),acCompression:ye(L,X)};if(z.version<2)throw new Error("EXRLoader.parse: "+Oi.compression+" version "+z.version+" is unsupported");const H=new Array;let I=he(L,X)-2;for(;I>0;){const fe=Ie(L.buffer,X),we=Ce(L,X),Oe=we>>2&3,Ye=(we>>4)-1,ke=new Int8Array([Ye])[0],Ee=Ce(L,X);H.push({name:fe,index:ke,type:Ee,compression:Oe}),I-=fe.length+3}const E=Oi.channels,U=new Array(w.inputChannels.length);for(let fe=0;fe<w.inputChannels.length;++fe){const we=U[fe]={},Oe=E[fe];we.name=Oe.name,we.compression=0,we.decoded=!1,we.type=Oe.pixelType,we.pLinear=Oe.pLinear,we.width=w.columns,we.height=w.lines}const k={idx:new Array(3)};for(let fe=0;fe<w.inputChannels.length;++fe){const we=U[fe];for(let Oe=0;Oe<H.length;++Oe){const Ye=H[Oe];we.name==Ye.name&&(we.compression=Ye.compression,Ye.index>=0&&(k.idx[Ye.index]=fe),we.offset=fe)}}let J,$,oe;if(z.acCompressedSize>0)switch(z.acCompression){case 0:J=new Uint16Array(z.totalAcUncompressedCount),Nt(w.array,L,X,z.acCompressedSize,J,z.totalAcUncompressedCount);break;case 1:const fe=w.array.slice(X.value,X.value+z.totalAcUncompressedCount),we=ca(fe);J=new Uint16Array(we.buffer),X.value+=z.totalAcUncompressedCount;break}if(z.dcCompressedSize>0){const fe={array:w.array,offset:X,size:z.dcCompressedSize};$=new Uint16Array(B(fe).buffer),X.value+=z.dcCompressedSize}if(z.rleRawSize>0){const fe=w.array.slice(X.value,X.value+z.rleCompressedSize),we=ca(fe);oe=cn(we.buffer),X.value+=z.rleCompressedSize}let ae=0;const ce=new Array(U.length);for(let fe=0;fe<ce.length;++fe)ce[fe]=new Array;for(let fe=0;fe<w.lines;++fe)for(let we=0;we<U.length;++we)ce[we].push(ae),ae+=U[we].width*w.type*2;gt(k,ce,U,J,$,g);for(let fe=0;fe<U.length;++fe){const we=U[fe];if(!we.decoded)switch(we.compression){case 2:let Oe=0,Ye=0;for(let ke=0;ke<w.lines;++ke){let Ee=ce[fe][Oe];for(let $e=0;$e<we.width;++$e){for(let ze=0;ze<2*we.type;++ze)g[Ee++]=oe[Ye+ze*we.width*we.height];Ye++}Oe++}break;case 1:default:throw new Error("EXRLoader.parse: unsupported channel compression")}}return new DataView(g.buffer)}function Ie(w,L){const X=new Uint8Array(w);let g=0;for(;X[L.value+g]!=0;)g+=1;const z=new TextDecoder().decode(X.slice(L.value,L.value+g));return L.value=L.value+g+1,z}function Re(w,L,X){const g=new TextDecoder().decode(new Uint8Array(w).slice(L.value,L.value+X));return L.value=L.value+X,g}function De(w,L){const X=le(w,L),g=Pe(w,L);return[X,g]}function Fe(w,L){const X=Pe(w,L),g=Pe(w,L);return[X,g]}function le(w,L){const X=w.getInt32(L.value,!0);return L.value=L.value+4,X}function Pe(w,L){const X=w.getUint32(L.value,!0);return L.value=L.value+4,X}function Ze(w,L){const X=w[L.value];return L.value=L.value+1,X}function Ce(w,L){const X=w.getUint8(L.value);return L.value=L.value+1,X}const ye=function(w,L){let X;return"getBigInt64"in DataView.prototype?X=Number(w.getBigInt64(L.value,!0)):X=w.getUint32(L.value+4,!0)+Number(w.getUint32(L.value,!0)<<32),L.value+=8,X};function We(w,L){const X=w.getFloat32(L.value,!0);return L.value+=4,X}function Y(w,L){return ju.toHalfFloat(We(w,L))}function _(w){const L=(w&31744)>>10,X=w&1023;return(w>>15?-1:1)*(L?L===31?X?NaN:1/0:Math.pow(2,L-15)*(1+X/1024):6103515625e-14*(X/1024))}function he(w,L){const X=w.getUint16(L.value,!0);return L.value+=2,X}function He(w,L){return _(he(w,L))}function be(w,L,X,g){const z=X.value,H=[];for(;X.value<z+g-1;){const I=Ie(L,X),E=le(w,X),U=Ce(w,X);X.value+=3;const k=le(w,X),J=le(w,X);H.push({name:I,pixelType:E,pLinear:U,xSampling:k,ySampling:J})}return X.value+=1,H}function de(w,L){const X=We(w,L),g=We(w,L),z=We(w,L),H=We(w,L),I=We(w,L),E=We(w,L),U=We(w,L),k=We(w,L);return{redX:X,redY:g,greenX:z,greenY:H,blueX:I,blueY:E,whiteX:U,whiteY:k}}function Xe(w,L){const X=["NO_COMPRESSION","RLE_COMPRESSION","ZIPS_COMPRESSION","ZIP_COMPRESSION","PIZ_COMPRESSION","PXR24_COMPRESSION","B44_COMPRESSION","B44A_COMPRESSION","DWAA_COMPRESSION","DWAB_COMPRESSION"],g=Ce(w,L);return X[g]}function nt(w,L){const X=le(w,L),g=le(w,L),z=le(w,L),H=le(w,L);return{xMin:X,yMin:g,xMax:z,yMax:H}}function jt(w,L){const X=["INCREASING_Y","DECREASING_Y","RANDOM_Y"],g=Ce(w,L);return X[g]}function Pt(w,L){const X=["ENVMAP_LATLONG","ENVMAP_CUBE"],g=Ce(w,L);return X[g]}function Yn(w,L){const X=["ONE_LEVEL","MIPMAP_LEVELS","RIPMAP_LEVELS"],g=["ROUND_DOWN","ROUND_UP"],z=Pe(w,L),H=Pe(w,L),I=Ce(w,L);return{xSize:z,ySize:H,levelMode:X[I&15],roundingMode:g[I>>4]}}function ni(w,L){const X=We(w,L),g=We(w,L);return[X,g]}function Oo(w,L){const X=We(w,L),g=We(w,L),z=We(w,L);return[X,g,z]}function zo(w,L,X,g,z){if(g==="string"||g==="stringvector"||g==="iccProfile")return Re(L,X,z);if(g==="chlist")return be(w,L,X,z);if(g==="chromaticities")return de(w,X);if(g==="compression")return Xe(w,X);if(g==="box2i")return nt(w,X);if(g==="envmap")return Pt(w,X);if(g==="tiledesc")return Yn(w,X);if(g==="lineOrder")return jt(w,X);if(g==="float")return We(w,X);if(g==="v2f")return ni(w,X);if(g==="v3f")return Oo(w,X);if(g==="int")return le(w,X);if(g==="rational")return De(w,X);if(g==="timecode")return Fe(w,X);if(g==="preview")return X.value+=z,"skipped";X.value+=z}function Mi(w,L){const X=Math.log2(w);return L=="ROUND_DOWN"?Math.floor(X):Math.ceil(X)}function Xr(w,L,X){let g=0;switch(w.levelMode){case"ONE_LEVEL":g=1;break;case"MIPMAP_LEVELS":g=Mi(Math.max(L,X),w.roundingMode)+1;break;case"RIPMAP_LEVELS":throw new Error("THREE.EXRLoader: RIPMAP_LEVELS tiles currently unsupported.")}return g}function Ir(w,L,X,g){const z=new Array(w);for(let H=0;H<w;H++){const I=1<<H;let E=L/I|0;g=="ROUND_UP"&&E*I<L&&(E+=1);const U=Math.max(E,1);z[H]=(U+X-1)/X|0}return z}function Ho(){const w=this,L=w.offset,X={value:0};for(let g=0;g<w.tileCount;g++){const z=le(w.viewer,L),H=le(w.viewer,L);L.value+=8,w.size=Pe(w.viewer,L);const I=z*w.blockWidth,E=H*w.blockHeight;w.columns=I+w.blockWidth>w.width?w.width-I:w.blockWidth,w.lines=E+w.blockHeight>w.height?w.height-E:w.blockHeight;const U=w.columns*w.totalBytes,J=w.size<w.lines*U?w.uncompress(w):A(w);L.value+=w.size;for(let $=0;$<w.lines;$++){const oe=$*w.columns*w.totalBytes;for(let ae=0;ae<w.inputChannels.length;ae++){const ce=Oi.channels[ae].name,fe=w.channelByteOffsets[ce]*w.columns,we=w.decodeChannels[ce];if(we===void 0)continue;X.value=oe+fe;const Oe=(w.height-(1+E+$))*w.outLineWidth;for(let Ye=0;Ye<w.columns;Ye++){const ke=Oe+(Ye+I)*w.outputChannels+we;w.byteArray[ke]=w.getter(J,X)}}}}}function Ws(){const w=this,L=w.offset,X={value:0};for(let g=0;g<w.height/w.blockHeight;g++){const z=le(w.viewer,L)-Oi.dataWindow.yMin;w.size=Pe(w.viewer,L),w.lines=z+w.blockHeight>w.height?w.height-z:w.blockHeight;const H=w.columns*w.totalBytes,E=w.size<w.lines*H?w.uncompress(w):A(w);L.value+=w.size;for(let U=0;U<w.blockHeight;U++){const k=g*w.blockHeight,J=U+w.scanOrder(k);if(J>=w.height)continue;const $=U*H,oe=(w.height-1-J)*w.outLineWidth;for(let ae=0;ae<w.inputChannels.length;ae++){const ce=Oi.channels[ae].name,fe=w.channelByteOffsets[ce]*w.columns,we=w.decodeChannels[ce];if(we!==void 0){X.value=$+fe;for(let Oe=0;Oe<w.columns;Oe++){const Ye=oe+Oe*w.outputChannels+we;w.byteArray[Ye]=w.getter(E,X)}}}}}}function Eo(w,L,X){const g={};if(w.getUint32(0,!0)!=20000630)throw new Error("THREE.EXRLoader: Provided file doesn't appear to be in OpenEXR format.");g.version=w.getUint8(4);const z=w.getUint8(5);g.spec={singleTile:!!(z&2),longName:!!(z&4),deepFormat:!!(z&8),multiPart:!!(z&16)},X.value=8;let H=!0;for(;H;){const I=Ie(L,X);if(I==="")H=!1;else{const E=Ie(L,X),U=Pe(w,X),k=zo(w,L,X,E,U);k===void 0?console.warn(`THREE.EXRLoader: Skipped unknown header attribute type '${E}'.`):g[I]=k}}if((z&-7)!=0)throw console.error("THREE.EXRHeader:",g),new Error("THREE.EXRLoader: Provided file is currently unsupported.");return g}function js(w,L,X,g,z){const H={size:0,viewer:L,array:X,offset:g,width:w.dataWindow.xMax-w.dataWindow.xMin+1,height:w.dataWindow.yMax-w.dataWindow.yMin+1,inputChannels:w.channels,channelByteOffsets:{},scanOrder:null,totalBytes:null,columns:null,lines:null,type:null,uncompress:null,getter:null,format:null,colorSpace:Sn};switch(w.compression){case"NO_COMPRESSION":H.blockHeight=1,H.uncompress=A;break;case"RLE_COMPRESSION":H.blockHeight=1,H.uncompress=S;break;case"ZIPS_COMPRESSION":H.blockHeight=1,H.uncompress=B;break;case"ZIP_COMPRESSION":H.blockHeight=16,H.uncompress=B;break;case"PIZ_COMPRESSION":H.blockHeight=32,H.uncompress=re;break;case"PXR24_COMPRESSION":H.blockHeight=16,H.uncompress=pe;break;case"DWAA_COMPRESSION":H.blockHeight=32,H.uncompress=ie;break;case"DWAB_COMPRESSION":H.blockHeight=256,H.uncompress=ie;break;default:throw new Error("EXRLoader.parse: "+w.compression+" is unsupported")}const I={};for(const J of w.channels)switch(J.name){case"Y":case"R":case"G":case"B":case"A":I[J.name]=!0,H.type=J.pixelType}let E=!1;if(I.R&&I.G&&I.B)E=!I.A,H.outputChannels=4,H.decodeChannels={R:0,G:1,B:2,A:3};else if(I.Y)H.outputChannels=1,H.decodeChannels={Y:0};else throw new Error("EXRLoader.parse: file contains unsupported data channels.");if(H.type==1)switch(z){case Fn:H.getter=He;break;case Ci:H.getter=he;break}else if(H.type==2)switch(z){case Fn:H.getter=We;break;case Ci:H.getter=Y}else throw new Error("EXRLoader.parse: unsupported pixelType "+H.type+" for "+w.compression+".");H.columns=H.width;const U=H.width*H.height*H.outputChannels;switch(z){case Fn:H.byteArray=new Float32Array(U),E&&H.byteArray.fill(1,0,U);break;case Ci:H.byteArray=new Uint16Array(U),E&&H.byteArray.fill(15360,0,U);break;default:console.error("THREE.EXRLoader: unsupported type: ",z);break}let k=0;for(const J of w.channels)H.decodeChannels[J.name]!==void 0&&(H.channelByteOffsets[J.name]=k),k+=J.pixelType*2;if(H.totalBytes=k,H.outLineWidth=H.width*H.outputChannels,w.lineOrder==="INCREASING_Y"?H.scanOrder=J=>J:H.scanOrder=J=>H.height-1-J,H.outputChannels==4?(H.format=kn,H.colorSpace=Sn):(H.format=w0,H.colorSpace=ji),w.spec.singleTile){H.blockHeight=w.tiles.ySize,H.blockWidth=w.tiles.xSize;const J=Xr(w.tiles,H.width,H.height),$=Ir(J,H.width,w.tiles.xSize,w.tiles.roundingMode),oe=Ir(J,H.height,w.tiles.ySize,w.tiles.roundingMode);H.tileCount=$[0]*oe[0];for(let ae=0;ae<J;ae++)for(let ce=0;ce<oe[ae];ce++)for(let fe=0;fe<$[ae];fe++)ye(L,g);H.decode=Ho.bind(H)}else{H.blockWidth=H.width;const J=Math.ceil(H.height/H.blockHeight);for(let $=0;$<J;$++)ye(L,g);H.decode=Ws.bind(H)}return H}const Dr={value:0},Wr=new DataView(e),D0=new Uint8Array(e),Oi=Eo(Wr,e,Dr),Ki=js(Oi,Wr,D0,Dr,this.type);return Ki.decode(),{header:Oi,width:Ki.width,height:Ki.height,data:Ki.byteArray,format:Ki.format,colorSpace:Ki.colorSpace,type:this.type}}setDataType(e){return this.type=e,this}load(e,t,n,s){function r(o,a){o.colorSpace=a.colorSpace,o.minFilter=wn,o.magFilter=wn,o.generateMipmaps=!1,o.flipY=!1,t&&t(o,a)}return super.load(e,r,n,s)}}const Lb=""+new URL("rapier_wasm3d_bg-DxsxPRy4.wasm",import.meta.url).href,Nb=async(i={},e)=>{let t;if(e.startsWith("data:")){const n=e.replace(/^data:.*?base64,/,"");let s;if(typeof Buffer=="function"&&typeof Buffer.from=="function")s=Buffer.from(n,"base64");else if(typeof atob=="function"){const r=atob(n);s=new Uint8Array(r.length);for(let o=0;o<r.length;o++)s[o]=r.charCodeAt(o)}else throw new Error("Cannot decode base64-encoded data URL");t=await WebAssembly.instantiate(s,i)}else{const n=await fetch(e),s=n.headers.get("Content-Type")||"";if("instantiateStreaming"in WebAssembly&&s.startsWith("application/wasm"))t=await WebAssembly.instantiateStreaming(n,i);else{const r=await n.arrayBuffer();t=await WebAssembly.instantiate(r,i)}}return t.instance.exports};let b;function Mb(i){b=i}const vt=new Array(128).fill(void 0);vt.push(void 0,null,!0,!1);function Lt(i){return vt[i]}let ao=vt.length;function $t(i){ao===vt.length&&vt.push(vt.length+1);const e=ao;return ao=vt[e],vt[e]=i,e}function su(i,e){try{return i.apply(this,e)}catch(t){b.__wbindgen_export_0($t(t))}}function Qe(i){return i==null}let ir=null;function hn(){return(ir===null||ir.buffer.detached===!0||ir.buffer.detached===void 0&&ir.buffer!==b.memory.buffer)&&(ir=new DataView(b.memory.buffer)),ir}function Ob(i){i<132||(vt[i]=ao,ao=i)}function yo(i){const e=Lt(i);return Ob(i),e}const zb=typeof TextDecoder>"u"?(0,module.require)("util").TextDecoder:TextDecoder;let a3=new zb("utf-8",{ignoreBOM:!0,fatal:!0});a3.decode();let ua=null;function Hb(){return(ua===null||ua.byteLength===0)&&(ua=new Uint8Array(b.memory.buffer)),ua}function Eb(i,e){return i=i>>>0,a3.decode(Hb().subarray(i,i+e))}function W(i,e){if(!(i instanceof e))throw new Error(`expected instance of ${e.name}`)}let Dt=128;function qt(i){if(Dt==1)throw new Error("out of js stack");return vt[--Dt]=i,Dt}let pa=null;function Ab(){return(pa===null||pa.byteLength===0)&&(pa=new Int32Array(b.memory.buffer)),pa}function Xb(i,e){return i=i>>>0,Ab().subarray(i/4,i/4+e)}let fa=null;function l3(){return(fa===null||fa.byteLength===0)&&(fa=new Float32Array(b.memory.buffer)),fa}function G1(i,e){return i=i>>>0,l3().subarray(i/4,i/4+e)}let ha=null;function d3(){return(ha===null||ha.byteLength===0)&&(ha=new Uint32Array(b.memory.buffer)),ha}function Ib(i,e){return i=i>>>0,d3().subarray(i/4,i/4+e)}let An=0;function Kr(i,e){const t=e(i.length*4,4)>>>0;return d3().set(i,t/4),An=i.length,t}function rs(i,e){const t=e(i.length*4,4)>>>0;return l3().set(i,t/4),An=i.length,t}const R0=Object.freeze({LinX:0,0:"LinX",LinY:1,1:"LinY",LinZ:2,2:"LinZ",AngX:3,3:"AngX",AngY:4,4:"AngY",AngZ:5,5:"AngZ"}),di=Object.freeze({Revolute:0,0:"Revolute",Fixed:1,1:"Fixed",Prismatic:2,2:"Prismatic",Rope:3,3:"Rope",Spring:4,4:"Spring",Spherical:5,5:"Spherical",Generic:6,6:"Generic"}),fn=Object.freeze({Ball:0,0:"Ball",Cuboid:1,1:"Cuboid",Capsule:2,2:"Capsule",Segment:3,3:"Segment",Polyline:4,4:"Polyline",Triangle:5,5:"Triangle",TriMesh:6,6:"TriMesh",HeightField:7,7:"HeightField",Compound:8,8:"Compound",ConvexPolyhedron:9,9:"ConvexPolyhedron",Cylinder:10,10:"Cylinder",Cone:11,11:"Cone",RoundCuboid:12,12:"RoundCuboid",RoundTriangle:13,13:"RoundTriangle",RoundCylinder:14,14:"RoundCylinder",RoundCone:15,15:"RoundCone",RoundConvexPolyhedron:16,16:"RoundConvexPolyhedron",HalfSpace:17,17:"HalfSpace",Voxels:18,18:"Voxels"}),Ll=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawbroadphase_free(i>>>0,1));class Hs{static __wrap(e){e=e>>>0;const t=Object.create(Hs.prototype);return t.__wbg_ptr=e,Ll.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,Ll.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawbroadphase_free(e,0)}constructor(){const e=b.rawbroadphase_new();return this.__wbg_ptr=e>>>0,Ll.register(this,this.__wbg_ptr,this),this}}const U1=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawccdsolver_free(i>>>0,1));class tc{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,U1.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawccdsolver_free(e,0)}constructor(){const e=b.rawccdsolver_new();return this.__wbg_ptr=e>>>0,U1.register(this,this.__wbg_ptr,this),this}}const Z1=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawcharactercollision_free(i>>>0,1));class c3{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,Z1.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawcharactercollision_free(e,0)}constructor(){const e=b.rawcharactercollision_new();return this.__wbg_ptr=e>>>0,Z1.register(this,this.__wbg_ptr,this),this}handle(){return b.rawcharactercollision_handle(this.__wbg_ptr)}translationDeltaApplied(){const e=b.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return q.__wrap(e)}translationDeltaRemaining(){const e=b.rawcharactercollision_translationDeltaRemaining(this.__wbg_ptr);return q.__wrap(e)}toi(){return b.rawcharactercollision_toi(this.__wbg_ptr)}worldWitness1(){const e=b.rawcharactercollision_worldWitness1(this.__wbg_ptr);return q.__wrap(e)}worldWitness2(){const e=b.rawcharactercollision_worldWitness2(this.__wbg_ptr);return q.__wrap(e)}worldNormal1(){const e=b.rawcharactercollision_worldNormal1(this.__wbg_ptr);return q.__wrap(e)}worldNormal2(){const e=b.rawcharactercollision_worldNormal2(this.__wbg_ptr);return q.__wrap(e)}}const Nl=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawcolliderset_free(i>>>0,1));class kt{static __wrap(e){e=e>>>0;const t=Object.create(kt.prototype);return t.__wbg_ptr=e,Nl.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,Nl.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawcolliderset_free(e,0)}coTranslation(e){const t=b.rawcolliderset_coTranslation(this.__wbg_ptr,e);return q.__wrap(t)}coRotation(e){const t=b.rawcolliderset_coRotation(this.__wbg_ptr,e);return ct.__wrap(t)}coSetTranslation(e,t,n,s){b.rawcolliderset_coSetTranslation(this.__wbg_ptr,e,t,n,s)}coSetTranslationWrtParent(e,t,n,s){b.rawcolliderset_coSetTranslationWrtParent(this.__wbg_ptr,e,t,n,s)}coSetRotation(e,t,n,s,r){b.rawcolliderset_coSetRotation(this.__wbg_ptr,e,t,n,s,r)}coSetRotationWrtParent(e,t,n,s,r){b.rawcolliderset_coSetRotationWrtParent(this.__wbg_ptr,e,t,n,s,r)}coIsSensor(e){return b.rawcolliderset_coIsSensor(this.__wbg_ptr,e)!==0}coShapeType(e){return b.rawcolliderset_coShapeType(this.__wbg_ptr,e)}coHalfspaceNormal(e){const t=b.rawcolliderset_coHalfspaceNormal(this.__wbg_ptr,e);return t===0?void 0:q.__wrap(t)}coHalfExtents(e){const t=b.rawcolliderset_coHalfExtents(this.__wbg_ptr,e);return t===0?void 0:q.__wrap(t)}coSetHalfExtents(e,t){W(t,q),b.rawcolliderset_coSetHalfExtents(this.__wbg_ptr,e,t.__wbg_ptr)}coRadius(e){const t=b.rawcolliderset_coRadius(this.__wbg_ptr,e);return t===4294967297?void 0:t}coSetRadius(e,t){b.rawcolliderset_coSetRadius(this.__wbg_ptr,e,t)}coHalfHeight(e){const t=b.rawcolliderset_coHalfHeight(this.__wbg_ptr,e);return t===4294967297?void 0:t}coSetHalfHeight(e,t){b.rawcolliderset_coSetHalfHeight(this.__wbg_ptr,e,t)}coRoundRadius(e){const t=b.rawcolliderset_coRoundRadius(this.__wbg_ptr,e);return t===4294967297?void 0:t}coSetRoundRadius(e,t){b.rawcolliderset_coSetRoundRadius(this.__wbg_ptr,e,t)}coVoxelData(e){try{const s=b.__wbindgen_add_to_stack_pointer(-16);b.rawcolliderset_coVoxelData(s,this.__wbg_ptr,e);var t=hn().getInt32(s+4*0,!0),n=hn().getInt32(s+4*1,!0);let r;return t!==0&&(r=Xb(t,n).slice(),b.__wbindgen_export_1(t,n*4,4)),r}finally{b.__wbindgen_add_to_stack_pointer(16)}}coVoxelSize(e){const t=b.rawcolliderset_coVoxelSize(this.__wbg_ptr,e);return t===0?void 0:q.__wrap(t)}coSetVoxel(e,t,n,s,r){b.rawcolliderset_coSetVoxel(this.__wbg_ptr,e,t,n,s,r)}coPropagateVoxelChange(e,t,n,s,r,o,a,l){b.rawcolliderset_coPropagateVoxelChange(this.__wbg_ptr,e,t,n,s,r,o,a,l)}coCombineVoxelStates(e,t,n,s,r){b.rawcolliderset_coCombineVoxelStates(this.__wbg_ptr,e,t,n,s,r)}coVertices(e){try{const s=b.__wbindgen_add_to_stack_pointer(-16);b.rawcolliderset_coVertices(s,this.__wbg_ptr,e);var t=hn().getInt32(s+4*0,!0),n=hn().getInt32(s+4*1,!0);let r;return t!==0&&(r=G1(t,n).slice(),b.__wbindgen_export_1(t,n*4,4)),r}finally{b.__wbindgen_add_to_stack_pointer(16)}}coIndices(e){try{const s=b.__wbindgen_add_to_stack_pointer(-16);b.rawcolliderset_coIndices(s,this.__wbg_ptr,e);var t=hn().getInt32(s+4*0,!0),n=hn().getInt32(s+4*1,!0);let r;return t!==0&&(r=Ib(t,n).slice(),b.__wbindgen_export_1(t,n*4,4)),r}finally{b.__wbindgen_add_to_stack_pointer(16)}}coTriMeshFlags(e){const t=b.rawcolliderset_coTriMeshFlags(this.__wbg_ptr,e);return t===4294967297?void 0:t}coHeightFieldFlags(e){const t=b.rawcolliderset_coHeightFieldFlags(this.__wbg_ptr,e);return t===4294967297?void 0:t}coHeightfieldHeights(e){try{const s=b.__wbindgen_add_to_stack_pointer(-16);b.rawcolliderset_coHeightfieldHeights(s,this.__wbg_ptr,e);var t=hn().getInt32(s+4*0,!0),n=hn().getInt32(s+4*1,!0);let r;return t!==0&&(r=G1(t,n).slice(),b.__wbindgen_export_1(t,n*4,4)),r}finally{b.__wbindgen_add_to_stack_pointer(16)}}coHeightfieldScale(e){const t=b.rawcolliderset_coHeightfieldScale(this.__wbg_ptr,e);return t===0?void 0:q.__wrap(t)}coHeightfieldNRows(e){const t=b.rawcolliderset_coHeightfieldNRows(this.__wbg_ptr,e);return t===4294967297?void 0:t}coHeightfieldNCols(e){const t=b.rawcolliderset_coHeightfieldNCols(this.__wbg_ptr,e);return t===4294967297?void 0:t}coParent(e){try{const s=b.__wbindgen_add_to_stack_pointer(-16);b.rawcolliderset_coParent(s,this.__wbg_ptr,e);var t=hn().getInt32(s+4*0,!0),n=hn().getFloat64(s+8*1,!0);return t===0?void 0:n}finally{b.__wbindgen_add_to_stack_pointer(16)}}coSetEnabled(e,t){b.rawcolliderset_coSetEnabled(this.__wbg_ptr,e,t)}coIsEnabled(e){return b.rawcolliderset_coIsEnabled(this.__wbg_ptr,e)!==0}coSetContactSkin(e,t){b.rawcolliderset_coSetContactSkin(this.__wbg_ptr,e,t)}coContactSkin(e){return b.rawcolliderset_coContactSkin(this.__wbg_ptr,e)}coFriction(e){return b.rawcolliderset_coFriction(this.__wbg_ptr,e)}coRestitution(e){return b.rawcolliderset_coRestitution(this.__wbg_ptr,e)}coDensity(e){return b.rawcolliderset_coDensity(this.__wbg_ptr,e)}coMass(e){return b.rawcolliderset_coMass(this.__wbg_ptr,e)}coVolume(e){return b.rawcolliderset_coVolume(this.__wbg_ptr,e)}coCollisionGroups(e){return b.rawcolliderset_coCollisionGroups(this.__wbg_ptr,e)>>>0}coSolverGroups(e){return b.rawcolliderset_coSolverGroups(this.__wbg_ptr,e)>>>0}coActiveHooks(e){return b.rawcolliderset_coActiveHooks(this.__wbg_ptr,e)>>>0}coActiveCollisionTypes(e){return b.rawcolliderset_coActiveCollisionTypes(this.__wbg_ptr,e)}coActiveEvents(e){return b.rawcolliderset_coActiveEvents(this.__wbg_ptr,e)>>>0}coContactForceEventThreshold(e){return b.rawcolliderset_coContactForceEventThreshold(this.__wbg_ptr,e)}coContainsPoint(e,t){return W(t,q),b.rawcolliderset_coContainsPoint(this.__wbg_ptr,e,t.__wbg_ptr)!==0}coCastShape(e,t,n,s,r,o,a,l,d){W(t,q),W(n,qe),W(s,q),W(r,ct),W(o,q);const c=b.rawcolliderset_coCastShape(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,o.__wbg_ptr,a,l,d);return c===0?void 0:z0.__wrap(c)}coCastCollider(e,t,n,s,r,o,a){W(t,q),W(s,q);const l=b.rawcolliderset_coCastCollider(this.__wbg_ptr,e,t.__wbg_ptr,n,s.__wbg_ptr,r,o,a);return l===0?void 0:L0.__wrap(l)}coIntersectsShape(e,t,n,s){return W(t,qe),W(n,q),W(s,ct),b.rawcolliderset_coIntersectsShape(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr)!==0}coContactShape(e,t,n,s,r){W(t,qe),W(n,q),W(s,ct);const o=b.rawcolliderset_coContactShape(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r);return o===0?void 0:wo.__wrap(o)}coContactCollider(e,t,n){const s=b.rawcolliderset_coContactCollider(this.__wbg_ptr,e,t,n);return s===0?void 0:wo.__wrap(s)}coProjectPoint(e,t,n){W(t,q);const s=b.rawcolliderset_coProjectPoint(this.__wbg_ptr,e,t.__wbg_ptr,n);return N0.__wrap(s)}coIntersectsRay(e,t,n,s){return W(t,q),W(n,q),b.rawcolliderset_coIntersectsRay(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s)!==0}coCastRay(e,t,n,s,r){return W(t,q),W(n,q),b.rawcolliderset_coCastRay(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s,r)}coCastRayAndGetNormal(e,t,n,s,r){W(t,q),W(n,q);const o=b.rawcolliderset_coCastRayAndGetNormal(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s,r);return o===0?void 0:O0.__wrap(o)}coSetSensor(e,t){b.rawcolliderset_coSetSensor(this.__wbg_ptr,e,t)}coSetRestitution(e,t){b.rawcolliderset_coSetRestitution(this.__wbg_ptr,e,t)}coSetFriction(e,t){b.rawcolliderset_coSetFriction(this.__wbg_ptr,e,t)}coFrictionCombineRule(e){return b.rawcolliderset_coFrictionCombineRule(this.__wbg_ptr,e)>>>0}coSetFrictionCombineRule(e,t){b.rawcolliderset_coSetFrictionCombineRule(this.__wbg_ptr,e,t)}coRestitutionCombineRule(e){return b.rawcolliderset_coRestitutionCombineRule(this.__wbg_ptr,e)>>>0}coSetRestitutionCombineRule(e,t){b.rawcolliderset_coSetRestitutionCombineRule(this.__wbg_ptr,e,t)}coSetCollisionGroups(e,t){b.rawcolliderset_coSetCollisionGroups(this.__wbg_ptr,e,t)}coSetSolverGroups(e,t){b.rawcolliderset_coSetSolverGroups(this.__wbg_ptr,e,t)}coSetActiveHooks(e,t){b.rawcolliderset_coSetActiveHooks(this.__wbg_ptr,e,t)}coSetActiveEvents(e,t){b.rawcolliderset_coSetActiveEvents(this.__wbg_ptr,e,t)}coSetActiveCollisionTypes(e,t){b.rawcolliderset_coSetActiveCollisionTypes(this.__wbg_ptr,e,t)}coSetShape(e,t){W(t,qe),b.rawcolliderset_coSetShape(this.__wbg_ptr,e,t.__wbg_ptr)}coSetContactForceEventThreshold(e,t){b.rawcolliderset_coSetContactForceEventThreshold(this.__wbg_ptr,e,t)}coSetDensity(e,t){b.rawcolliderset_coSetDensity(this.__wbg_ptr,e,t)}coSetMass(e,t){b.rawcolliderset_coSetMass(this.__wbg_ptr,e,t)}coSetMassProperties(e,t,n,s,r){W(n,q),W(s,q),W(r,ct),b.rawcolliderset_coSetMassProperties(this.__wbg_ptr,e,t,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr)}constructor(){const e=b.rawcolliderset_new();return this.__wbg_ptr=e>>>0,Nl.register(this,this.__wbg_ptr,this),this}len(){return b.rawcolliderset_len(this.__wbg_ptr)>>>0}contains(e){return b.rawcolliderset_contains(this.__wbg_ptr,e)!==0}createCollider(e,t,n,s,r,o,a,l,d,c,u,p,h,v,x,m,f,N,O,P,j,D,V,G,M){try{const K=b.__wbindgen_add_to_stack_pointer(-16);W(t,qe),W(n,q),W(s,ct),W(a,q),W(l,q),W(d,ct),W(M,Yt),b.rawcolliderset_createCollider(K,this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r,o,a.__wbg_ptr,l.__wbg_ptr,d.__wbg_ptr,c,u,p,h,v,x,m,f,N,O,P,j,D,V,G,M.__wbg_ptr);var R=hn().getInt32(K+4*0,!0),F=hn().getFloat64(K+8*1,!0);return R===0?void 0:F}finally{b.__wbindgen_add_to_stack_pointer(16)}}remove(e,t,n,s){W(t,ki),W(n,Yt),b.rawcolliderset_remove(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s)}isHandleValid(e){return b.rawcolliderset_contains(this.__wbg_ptr,e)!==0}forEachColliderHandle(e){try{b.rawcolliderset_forEachColliderHandle(this.__wbg_ptr,qt(e))}finally{vt[Dt++]=void 0}}}const k1=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawcollidershapecasthit_free(i>>>0,1));class L0{static __wrap(e){e=e>>>0;const t=Object.create(L0.prototype);return t.__wbg_ptr=e,k1.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,k1.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawcollidershapecasthit_free(e,0)}colliderHandle(){return b.rawcharactercollision_handle(this.__wbg_ptr)}time_of_impact(){return b.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}witness1(){const e=b.rawcollidershapecasthit_witness1(this.__wbg_ptr);return q.__wrap(e)}witness2(){const e=b.rawcollidershapecasthit_witness2(this.__wbg_ptr);return q.__wrap(e)}normal1(){const e=b.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return q.__wrap(e)}normal2(){const e=b.rawcharactercollision_translationDeltaRemaining(this.__wbg_ptr);return q.__wrap(e)}}const J1=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawcontactforceevent_free(i>>>0,1));class ru{static __wrap(e){e=e>>>0;const t=Object.create(ru.prototype);return t.__wbg_ptr=e,J1.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,J1.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawcontactforceevent_free(e,0)}collider1(){return b.rawcharactercollision_handle(this.__wbg_ptr)}collider2(){return b.rawcontactforceevent_collider2(this.__wbg_ptr)}total_force(){const e=b.rawcontactforceevent_total_force(this.__wbg_ptr);return q.__wrap(e)}total_force_magnitude(){return b.rawcontactforceevent_total_force_magnitude(this.__wbg_ptr)}max_force_direction(){const e=b.rawcontactforceevent_max_force_direction(this.__wbg_ptr);return q.__wrap(e)}max_force_magnitude(){return b.rawcontactforceevent_max_force_magnitude(this.__wbg_ptr)}}const B1=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawcontactmanifold_free(i>>>0,1));class ou{static __wrap(e){e=e>>>0;const t=Object.create(ou.prototype);return t.__wbg_ptr=e,B1.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,B1.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawcontactmanifold_free(e,0)}normal(){const e=b.rawcontactmanifold_normal(this.__wbg_ptr);return q.__wrap(e)}local_n1(){const e=b.rawcontactmanifold_local_n1(this.__wbg_ptr);return q.__wrap(e)}local_n2(){const e=b.rawcontactmanifold_local_n2(this.__wbg_ptr);return q.__wrap(e)}subshape1(){return b.rawcontactmanifold_subshape1(this.__wbg_ptr)>>>0}subshape2(){return b.rawcontactmanifold_subshape2(this.__wbg_ptr)>>>0}num_contacts(){return b.rawcontactmanifold_num_contacts(this.__wbg_ptr)>>>0}contact_local_p1(e){const t=b.rawcontactmanifold_contact_local_p1(this.__wbg_ptr,e);return t===0?void 0:q.__wrap(t)}contact_local_p2(e){const t=b.rawcontactmanifold_contact_local_p2(this.__wbg_ptr,e);return t===0?void 0:q.__wrap(t)}contact_dist(e){return b.rawcontactmanifold_contact_dist(this.__wbg_ptr,e)}contact_fid1(e){return b.rawcontactmanifold_contact_fid1(this.__wbg_ptr,e)>>>0}contact_fid2(e){return b.rawcontactmanifold_contact_fid2(this.__wbg_ptr,e)>>>0}contact_impulse(e){return b.rawcontactmanifold_contact_impulse(this.__wbg_ptr,e)}contact_tangent_impulse_x(e){return b.rawcontactmanifold_contact_tangent_impulse_x(this.__wbg_ptr,e)}contact_tangent_impulse_y(e){return b.rawcontactmanifold_contact_tangent_impulse_y(this.__wbg_ptr,e)}num_solver_contacts(){return b.rawcontactmanifold_num_solver_contacts(this.__wbg_ptr)>>>0}solver_contact_point(e){const t=b.rawcontactmanifold_solver_contact_point(this.__wbg_ptr,e);return t===0?void 0:q.__wrap(t)}solver_contact_dist(e){return b.rawcontactmanifold_solver_contact_dist(this.__wbg_ptr,e)}solver_contact_friction(e){return b.rawcontactmanifold_solver_contact_friction(this.__wbg_ptr,e)}solver_contact_restitution(e){return b.rawcontactmanifold_solver_contact_restitution(this.__wbg_ptr,e)}solver_contact_tangent_velocity(e){const t=b.rawcontactmanifold_solver_contact_tangent_velocity(this.__wbg_ptr,e);return q.__wrap(t)}}const K1=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawcontactpair_free(i>>>0,1));class au{static __wrap(e){e=e>>>0;const t=Object.create(au.prototype);return t.__wbg_ptr=e,K1.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,K1.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawcontactpair_free(e,0)}collider1(){return b.rawcontactpair_collider1(this.__wbg_ptr)}collider2(){return b.rawcontactpair_collider2(this.__wbg_ptr)}numContactManifolds(){return b.rawcontactpair_numContactManifolds(this.__wbg_ptr)>>>0}contactManifold(e){const t=b.rawcontactpair_contactManifold(this.__wbg_ptr,e);return t===0?void 0:ou.__wrap(t)}}const Q1=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawdebugrenderpipeline_free(i>>>0,1));class Db{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,Q1.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawdebugrenderpipeline_free(e,0)}constructor(){const e=b.rawdebugrenderpipeline_new();return this.__wbg_ptr=e>>>0,Q1.register(this,this.__wbg_ptr,this),this}vertices(){const e=b.rawdebugrenderpipeline_vertices(this.__wbg_ptr);return yo(e)}colors(){const e=b.rawdebugrenderpipeline_colors(this.__wbg_ptr);return yo(e)}render(e,t,n,s,r,o,a){try{W(e,Yt),W(t,kt),W(n,Zi),W(s,Ji),W(r,hs),b.rawdebugrenderpipeline_render(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,o,qt(a))}finally{vt[Dt++]=void 0}}}const _1=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawdeserializedworld_free(i>>>0,1));class lu{static __wrap(e){e=e>>>0;const t=Object.create(lu.prototype);return t.__wbg_ptr=e,_1.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,_1.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawdeserializedworld_free(e,0)}takeGravity(){const e=b.rawdeserializedworld_takeGravity(this.__wbg_ptr);return e===0?void 0:q.__wrap(e)}takeIntegrationParameters(){const e=b.rawdeserializedworld_takeIntegrationParameters(this.__wbg_ptr);return e===0?void 0:Es.__wrap(e)}takeIslandManager(){const e=b.rawdeserializedworld_takeIslandManager(this.__wbg_ptr);return e===0?void 0:ki.__wrap(e)}takeBroadPhase(){const e=b.rawdeserializedworld_takeBroadPhase(this.__wbg_ptr);return e===0?void 0:Hs.__wrap(e)}takeNarrowPhase(){const e=b.rawdeserializedworld_takeNarrowPhase(this.__wbg_ptr);return e===0?void 0:hs.__wrap(e)}takeBodies(){const e=b.rawdeserializedworld_takeBodies(this.__wbg_ptr);return e===0?void 0:Yt.__wrap(e)}takeColliders(){const e=b.rawdeserializedworld_takeColliders(this.__wbg_ptr);return e===0?void 0:kt.__wrap(e)}takeImpulseJoints(){const e=b.rawdeserializedworld_takeImpulseJoints(this.__wbg_ptr);return e===0?void 0:Zi.__wrap(e)}takeMultibodyJoints(){const e=b.rawdeserializedworld_takeMultibodyJoints(this.__wbg_ptr);return e===0?void 0:Ji.__wrap(e)}}const $1=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawdynamicraycastvehiclecontroller_free(i>>>0,1));class Wb{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,$1.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawdynamicraycastvehiclecontroller_free(e,0)}constructor(e){const t=b.rawdynamicraycastvehiclecontroller_new(e);return this.__wbg_ptr=t>>>0,$1.register(this,this.__wbg_ptr,this),this}current_vehicle_speed(){return b.rawdynamicraycastvehiclecontroller_current_vehicle_speed(this.__wbg_ptr)}chassis(){return b.rawdynamicraycastvehiclecontroller_chassis(this.__wbg_ptr)}index_up_axis(){return b.rawdynamicraycastvehiclecontroller_index_up_axis(this.__wbg_ptr)>>>0}set_index_up_axis(e){b.rawdynamicraycastvehiclecontroller_set_index_up_axis(this.__wbg_ptr,e)}index_forward_axis(){return b.rawdynamicraycastvehiclecontroller_index_forward_axis(this.__wbg_ptr)>>>0}set_index_forward_axis(e){b.rawdynamicraycastvehiclecontroller_set_index_forward_axis(this.__wbg_ptr,e)}add_wheel(e,t,n,s,r){W(e,q),W(t,q),W(n,q),b.rawdynamicraycastvehiclecontroller_add_wheel(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s,r)}num_wheels(){return b.rawdynamicraycastvehiclecontroller_num_wheels(this.__wbg_ptr)>>>0}update_vehicle(e,t,n,s,r,o,a){try{W(t,Yt),W(n,kt),W(s,du),b.rawdynamicraycastvehiclecontroller_update_vehicle(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r,Qe(o)?4294967297:o>>>0,qt(a))}finally{vt[Dt++]=void 0}}wheel_chassis_connection_point_cs(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs(this.__wbg_ptr,e);return t===0?void 0:q.__wrap(t)}set_wheel_chassis_connection_point_cs(e,t){W(t,q),b.rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs(this.__wbg_ptr,e,t.__wbg_ptr)}wheel_suspension_rest_length(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_suspension_rest_length(e,t){b.rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length(this.__wbg_ptr,e,t)}wheel_max_suspension_travel(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_max_suspension_travel(e,t){b.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel(this.__wbg_ptr,e,t)}wheel_radius(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_radius(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_radius(e,t){b.rawdynamicraycastvehiclecontroller_set_wheel_radius(this.__wbg_ptr,e,t)}wheel_suspension_stiffness(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_suspension_stiffness(e,t){b.rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness(this.__wbg_ptr,e,t)}wheel_suspension_compression(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_suspension_compression(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_suspension_compression(e,t){b.rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression(this.__wbg_ptr,e,t)}wheel_suspension_relaxation(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_suspension_relaxation(e,t){b.rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation(this.__wbg_ptr,e,t)}wheel_max_suspension_force(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_max_suspension_force(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_max_suspension_force(e,t){b.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force(this.__wbg_ptr,e,t)}wheel_brake(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_brake(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_brake(e,t){b.rawdynamicraycastvehiclecontroller_set_wheel_brake(this.__wbg_ptr,e,t)}wheel_steering(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_steering(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_steering(e,t){b.rawdynamicraycastvehiclecontroller_set_wheel_steering(this.__wbg_ptr,e,t)}wheel_engine_force(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_engine_force(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_engine_force(e,t){b.rawdynamicraycastvehiclecontroller_set_wheel_engine_force(this.__wbg_ptr,e,t)}wheel_direction_cs(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_direction_cs(this.__wbg_ptr,e);return t===0?void 0:q.__wrap(t)}set_wheel_direction_cs(e,t){W(t,q),b.rawdynamicraycastvehiclecontroller_set_wheel_direction_cs(this.__wbg_ptr,e,t.__wbg_ptr)}wheel_axle_cs(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_axle_cs(this.__wbg_ptr,e);return t===0?void 0:q.__wrap(t)}set_wheel_axle_cs(e,t){W(t,q),b.rawdynamicraycastvehiclecontroller_set_wheel_axle_cs(this.__wbg_ptr,e,t.__wbg_ptr)}wheel_friction_slip(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_friction_slip(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_friction_slip(e,t){b.rawdynamicraycastvehiclecontroller_set_wheel_friction_slip(this.__wbg_ptr,e,t)}wheel_side_friction_stiffness(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_side_friction_stiffness(e,t){b.rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness(this.__wbg_ptr,e,t)}wheel_rotation(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_rotation(this.__wbg_ptr,e);return t===4294967297?void 0:t}wheel_forward_impulse(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_forward_impulse(this.__wbg_ptr,e);return t===4294967297?void 0:t}wheel_side_impulse(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_side_impulse(this.__wbg_ptr,e);return t===4294967297?void 0:t}wheel_suspension_force(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_suspension_force(this.__wbg_ptr,e);return t===4294967297?void 0:t}wheel_contact_normal_ws(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws(this.__wbg_ptr,e);return t===0?void 0:q.__wrap(t)}wheel_contact_point_ws(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_contact_point_ws(this.__wbg_ptr,e);return t===0?void 0:q.__wrap(t)}wheel_suspension_length(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_suspension_length(this.__wbg_ptr,e);return t===4294967297?void 0:t}wheel_hard_point_ws(e){const t=b.rawdynamicraycastvehiclecontroller_wheel_hard_point_ws(this.__wbg_ptr,e);return t===0?void 0:q.__wrap(t)}wheel_is_in_contact(e){return b.rawdynamicraycastvehiclecontroller_wheel_is_in_contact(this.__wbg_ptr,e)!==0}wheel_ground_object(e){try{const s=b.__wbindgen_add_to_stack_pointer(-16);b.rawdynamicraycastvehiclecontroller_wheel_ground_object(s,this.__wbg_ptr,e);var t=hn().getInt32(s+4*0,!0),n=hn().getFloat64(s+8*1,!0);return t===0?void 0:n}finally{b.__wbindgen_add_to_stack_pointer(16)}}}const ep=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_raweventqueue_free(i>>>0,1));class jb{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,ep.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_raweventqueue_free(e,0)}constructor(e){const t=b.raweventqueue_new(e);return this.__wbg_ptr=t>>>0,ep.register(this,this.__wbg_ptr,this),this}drainCollisionEvents(e){try{b.raweventqueue_drainCollisionEvents(this.__wbg_ptr,qt(e))}finally{vt[Dt++]=void 0}}drainContactForceEvents(e){try{b.raweventqueue_drainContactForceEvents(this.__wbg_ptr,qt(e))}finally{vt[Dt++]=void 0}}clear(){b.raweventqueue_clear(this.__wbg_ptr)}}const tp=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawgenericjoint_free(i>>>0,1));class vn{static __wrap(e){e=e>>>0;const t=Object.create(vn.prototype);return t.__wbg_ptr=e,tp.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,tp.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawgenericjoint_free(e,0)}static generic(e,t,n,s){W(e,q),W(t,q),W(n,q);const r=b.rawgenericjoint_generic(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s);return r===0?void 0:vn.__wrap(r)}static spring(e,t,n,s,r){W(s,q),W(r,q);const o=b.rawgenericjoint_spring(e,t,n,s.__wbg_ptr,r.__wbg_ptr);return vn.__wrap(o)}static rope(e,t,n){W(t,q),W(n,q);const s=b.rawgenericjoint_rope(e,t.__wbg_ptr,n.__wbg_ptr);return vn.__wrap(s)}static spherical(e,t){W(e,q),W(t,q);const n=b.rawgenericjoint_spherical(e.__wbg_ptr,t.__wbg_ptr);return vn.__wrap(n)}static prismatic(e,t,n,s,r,o){W(e,q),W(t,q),W(n,q);const a=b.rawgenericjoint_prismatic(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s,r,o);return a===0?void 0:vn.__wrap(a)}static fixed(e,t,n,s){W(e,q),W(t,ct),W(n,q),W(s,ct);const r=b.rawgenericjoint_fixed(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr);return vn.__wrap(r)}static revolute(e,t,n){W(e,q),W(t,q),W(n,q);const s=b.rawgenericjoint_revolute(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr);return s===0?void 0:vn.__wrap(s)}}const Ml=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawimpulsejointset_free(i>>>0,1));class Zi{static __wrap(e){e=e>>>0;const t=Object.create(Zi.prototype);return t.__wbg_ptr=e,Ml.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,Ml.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawimpulsejointset_free(e,0)}jointType(e){return b.rawimpulsejointset_jointType(this.__wbg_ptr,e)}jointBodyHandle1(e){return b.rawimpulsejointset_jointBodyHandle1(this.__wbg_ptr,e)}jointBodyHandle2(e){return b.rawimpulsejointset_jointBodyHandle2(this.__wbg_ptr,e)}jointFrameX1(e){const t=b.rawimpulsejointset_jointFrameX1(this.__wbg_ptr,e);return ct.__wrap(t)}jointFrameX2(e){const t=b.rawimpulsejointset_jointFrameX2(this.__wbg_ptr,e);return ct.__wrap(t)}jointAnchor1(e){const t=b.rawimpulsejointset_jointAnchor1(this.__wbg_ptr,e);return q.__wrap(t)}jointAnchor2(e){const t=b.rawimpulsejointset_jointAnchor2(this.__wbg_ptr,e);return q.__wrap(t)}jointSetAnchor1(e,t){W(t,q),b.rawimpulsejointset_jointSetAnchor1(this.__wbg_ptr,e,t.__wbg_ptr)}jointSetAnchor2(e,t){W(t,q),b.rawimpulsejointset_jointSetAnchor2(this.__wbg_ptr,e,t.__wbg_ptr)}jointContactsEnabled(e){return b.rawimpulsejointset_jointContactsEnabled(this.__wbg_ptr,e)!==0}jointSetContactsEnabled(e,t){b.rawimpulsejointset_jointSetContactsEnabled(this.__wbg_ptr,e,t)}jointLimitsEnabled(e,t){return b.rawimpulsejointset_jointLimitsEnabled(this.__wbg_ptr,e,t)!==0}jointLimitsMin(e,t){return b.rawimpulsejointset_jointLimitsMin(this.__wbg_ptr,e,t)}jointLimitsMax(e,t){return b.rawimpulsejointset_jointLimitsMax(this.__wbg_ptr,e,t)}jointSetLimits(e,t,n,s){b.rawimpulsejointset_jointSetLimits(this.__wbg_ptr,e,t,n,s)}jointConfigureMotorModel(e,t,n){b.rawimpulsejointset_jointConfigureMotorModel(this.__wbg_ptr,e,t,n)}jointConfigureMotorVelocity(e,t,n,s){b.rawimpulsejointset_jointConfigureMotorVelocity(this.__wbg_ptr,e,t,n,s)}jointConfigureMotorPosition(e,t,n,s,r){b.rawimpulsejointset_jointConfigureMotorPosition(this.__wbg_ptr,e,t,n,s,r)}jointConfigureMotor(e,t,n,s,r,o){b.rawimpulsejointset_jointConfigureMotor(this.__wbg_ptr,e,t,n,s,r,o)}constructor(){const e=b.rawimpulsejointset_new();return this.__wbg_ptr=e>>>0,Ml.register(this,this.__wbg_ptr,this),this}createJoint(e,t,n,s){return W(e,vn),b.rawimpulsejointset_createJoint(this.__wbg_ptr,e.__wbg_ptr,t,n,s)}remove(e,t){b.rawimpulsejointset_remove(this.__wbg_ptr,e,t)}len(){return b.rawimpulsejointset_len(this.__wbg_ptr)>>>0}contains(e){return b.rawimpulsejointset_contains(this.__wbg_ptr,e)!==0}forEachJointHandle(e){try{b.rawimpulsejointset_forEachJointHandle(this.__wbg_ptr,qt(e))}finally{vt[Dt++]=void 0}}forEachJointAttachedToRigidBody(e,t){try{b.rawimpulsejointset_forEachJointAttachedToRigidBody(this.__wbg_ptr,e,qt(t))}finally{vt[Dt++]=void 0}}}const Ol=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawintegrationparameters_free(i>>>0,1));class Es{static __wrap(e){e=e>>>0;const t=Object.create(Es.prototype);return t.__wbg_ptr=e,Ol.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,Ol.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawintegrationparameters_free(e,0)}constructor(){const e=b.rawintegrationparameters_new();return this.__wbg_ptr=e>>>0,Ol.register(this,this.__wbg_ptr,this),this}get dt(){return b.rawintegrationparameters_dt(this.__wbg_ptr)}get contact_erp(){return b.rawintegrationparameters_contact_erp(this.__wbg_ptr)}get normalizedAllowedLinearError(){return b.rawdynamicraycastvehiclecontroller_current_vehicle_speed(this.__wbg_ptr)}get normalizedPredictionDistance(){return b.rawcontactforceevent_max_force_magnitude(this.__wbg_ptr)}get numSolverIterations(){return b.rawintegrationparameters_numSolverIterations(this.__wbg_ptr)>>>0}get numAdditionalFrictionIterations(){return b.rawdynamicraycastvehiclecontroller_index_up_axis(this.__wbg_ptr)>>>0}get numInternalPgsIterations(){return b.rawdynamicraycastvehiclecontroller_index_forward_axis(this.__wbg_ptr)>>>0}get minIslandSize(){return b.rawintegrationparameters_minIslandSize(this.__wbg_ptr)>>>0}get maxCcdSubsteps(){return b.rawintegrationparameters_maxCcdSubsteps(this.__wbg_ptr)>>>0}get lengthUnit(){return b.rawintegrationparameters_lengthUnit(this.__wbg_ptr)}set dt(e){b.rawintegrationparameters_set_dt(this.__wbg_ptr,e)}set contact_natural_frequency(e){b.rawintegrationparameters_set_contact_natural_frequency(this.__wbg_ptr,e)}set normalizedAllowedLinearError(e){b.rawintegrationparameters_set_normalizedAllowedLinearError(this.__wbg_ptr,e)}set normalizedPredictionDistance(e){b.rawintegrationparameters_set_normalizedPredictionDistance(this.__wbg_ptr,e)}set numSolverIterations(e){b.rawintegrationparameters_set_numSolverIterations(this.__wbg_ptr,e)}set numAdditionalFrictionIterations(e){b.rawdynamicraycastvehiclecontroller_set_index_up_axis(this.__wbg_ptr,e)}set numInternalPgsIterations(e){b.rawdynamicraycastvehiclecontroller_set_index_forward_axis(this.__wbg_ptr,e)}set minIslandSize(e){b.rawintegrationparameters_set_minIslandSize(this.__wbg_ptr,e)}set maxCcdSubsteps(e){b.rawintegrationparameters_set_maxCcdSubsteps(this.__wbg_ptr,e)}set lengthUnit(e){b.rawintegrationparameters_set_lengthUnit(this.__wbg_ptr,e)}switchToStandardPgsSolver(){b.rawintegrationparameters_switchToStandardPgsSolver(this.__wbg_ptr)}switchToSmallStepsPgsSolver(){b.rawintegrationparameters_switchToSmallStepsPgsSolver(this.__wbg_ptr)}switchToSmallStepsPgsSolverWithoutWarmstart(){b.rawintegrationparameters_switchToSmallStepsPgsSolverWithoutWarmstart(this.__wbg_ptr)}}const zl=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawislandmanager_free(i>>>0,1));class ki{static __wrap(e){e=e>>>0;const t=Object.create(ki.prototype);return t.__wbg_ptr=e,zl.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,zl.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawislandmanager_free(e,0)}constructor(){const e=b.rawislandmanager_new();return this.__wbg_ptr=e>>>0,zl.register(this,this.__wbg_ptr,this),this}forEachActiveRigidBodyHandle(e){try{b.rawislandmanager_forEachActiveRigidBodyHandle(this.__wbg_ptr,qt(e))}finally{vt[Dt++]=void 0}}}const np=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawkinematiccharactercontroller_free(i>>>0,1));class Vb{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,np.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawkinematiccharactercontroller_free(e,0)}constructor(e){const t=b.rawkinematiccharactercontroller_new(e);return this.__wbg_ptr=t>>>0,np.register(this,this.__wbg_ptr,this),this}up(){const e=b.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return q.__wrap(e)}setUp(e){W(e,q),b.rawkinematiccharactercontroller_setUp(this.__wbg_ptr,e.__wbg_ptr)}normalNudgeFactor(){return b.rawkinematiccharactercontroller_normalNudgeFactor(this.__wbg_ptr)}setNormalNudgeFactor(e){b.rawkinematiccharactercontroller_setNormalNudgeFactor(this.__wbg_ptr,e)}offset(){return b.rawintegrationparameters_dt(this.__wbg_ptr)}setOffset(e){b.rawkinematiccharactercontroller_setOffset(this.__wbg_ptr,e)}slideEnabled(){return b.rawkinematiccharactercontroller_slideEnabled(this.__wbg_ptr)!==0}setSlideEnabled(e){b.rawkinematiccharactercontroller_setSlideEnabled(this.__wbg_ptr,e)}autostepMaxHeight(){const e=b.rawkinematiccharactercontroller_autostepMaxHeight(this.__wbg_ptr);return e===4294967297?void 0:e}autostepMinWidth(){const e=b.rawkinematiccharactercontroller_autostepMinWidth(this.__wbg_ptr);return e===4294967297?void 0:e}autostepIncludesDynamicBodies(){const e=b.rawkinematiccharactercontroller_autostepIncludesDynamicBodies(this.__wbg_ptr);return e===16777215?void 0:e!==0}autostepEnabled(){return b.rawkinematiccharactercontroller_autostepEnabled(this.__wbg_ptr)!==0}enableAutostep(e,t,n){b.rawkinematiccharactercontroller_enableAutostep(this.__wbg_ptr,e,t,n)}disableAutostep(){b.rawkinematiccharactercontroller_disableAutostep(this.__wbg_ptr)}maxSlopeClimbAngle(){return b.rawkinematiccharactercontroller_maxSlopeClimbAngle(this.__wbg_ptr)}setMaxSlopeClimbAngle(e){b.rawkinematiccharactercontroller_setMaxSlopeClimbAngle(this.__wbg_ptr,e)}minSlopeSlideAngle(){return b.rawkinematiccharactercontroller_minSlopeSlideAngle(this.__wbg_ptr)}setMinSlopeSlideAngle(e){b.rawkinematiccharactercontroller_setMinSlopeSlideAngle(this.__wbg_ptr,e)}snapToGroundDistance(){const e=b.rawkinematiccharactercontroller_snapToGroundDistance(this.__wbg_ptr);return e===4294967297?void 0:e}enableSnapToGround(e){b.rawkinematiccharactercontroller_enableSnapToGround(this.__wbg_ptr,e)}disableSnapToGround(){b.rawkinematiccharactercontroller_disableSnapToGround(this.__wbg_ptr)}snapToGroundEnabled(){return b.rawkinematiccharactercontroller_snapToGroundEnabled(this.__wbg_ptr)!==0}computeColliderMovement(e,t,n,s,r,o,a,l,d,c,u){try{W(t,Yt),W(n,kt),W(s,du),W(o,q),b.rawkinematiccharactercontroller_computeColliderMovement(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r,o.__wbg_ptr,a,Qe(l)?4294967297:Math.fround(l),d,Qe(c)?4294967297:c>>>0,qt(u))}finally{vt[Dt++]=void 0}}computedMovement(){const e=b.rawkinematiccharactercontroller_computedMovement(this.__wbg_ptr);return q.__wrap(e)}computedGrounded(){return b.rawkinematiccharactercontroller_computedGrounded(this.__wbg_ptr)!==0}numComputedCollisions(){return b.rawkinematiccharactercontroller_numComputedCollisions(this.__wbg_ptr)>>>0}computedCollision(e,t){return W(t,c3),b.rawkinematiccharactercontroller_computedCollision(this.__wbg_ptr,e,t.__wbg_ptr)!==0}}const Hl=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawmultibodyjointset_free(i>>>0,1));class Ji{static __wrap(e){e=e>>>0;const t=Object.create(Ji.prototype);return t.__wbg_ptr=e,Hl.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,Hl.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawmultibodyjointset_free(e,0)}jointType(e){return b.rawmultibodyjointset_jointType(this.__wbg_ptr,e)}jointFrameX1(e){const t=b.rawmultibodyjointset_jointFrameX1(this.__wbg_ptr,e);return ct.__wrap(t)}jointFrameX2(e){const t=b.rawmultibodyjointset_jointFrameX2(this.__wbg_ptr,e);return ct.__wrap(t)}jointAnchor1(e){const t=b.rawmultibodyjointset_jointAnchor1(this.__wbg_ptr,e);return q.__wrap(t)}jointAnchor2(e){const t=b.rawmultibodyjointset_jointAnchor2(this.__wbg_ptr,e);return q.__wrap(t)}jointContactsEnabled(e){return b.rawmultibodyjointset_jointContactsEnabled(this.__wbg_ptr,e)!==0}jointSetContactsEnabled(e,t){b.rawmultibodyjointset_jointSetContactsEnabled(this.__wbg_ptr,e,t)}jointLimitsEnabled(e,t){return b.rawmultibodyjointset_jointLimitsEnabled(this.__wbg_ptr,e,t)!==0}jointLimitsMin(e,t){return b.rawmultibodyjointset_jointLimitsMin(this.__wbg_ptr,e,t)}jointLimitsMax(e,t){return b.rawmultibodyjointset_jointLimitsMax(this.__wbg_ptr,e,t)}constructor(){const e=b.rawmultibodyjointset_new();return this.__wbg_ptr=e>>>0,Hl.register(this,this.__wbg_ptr,this),this}createJoint(e,t,n,s){return W(e,vn),b.rawmultibodyjointset_createJoint(this.__wbg_ptr,e.__wbg_ptr,t,n,s)}remove(e,t){b.rawmultibodyjointset_remove(this.__wbg_ptr,e,t)}contains(e){return b.rawmultibodyjointset_contains(this.__wbg_ptr,e)!==0}forEachJointHandle(e){try{b.rawmultibodyjointset_forEachJointHandle(this.__wbg_ptr,qt(e))}finally{vt[Dt++]=void 0}}forEachJointAttachedToRigidBody(e,t){try{b.rawmultibodyjointset_forEachJointAttachedToRigidBody(this.__wbg_ptr,e,qt(t))}finally{vt[Dt++]=void 0}}}const El=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawnarrowphase_free(i>>>0,1));class hs{static __wrap(e){e=e>>>0;const t=Object.create(hs.prototype);return t.__wbg_ptr=e,El.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,El.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawnarrowphase_free(e,0)}constructor(){const e=b.rawnarrowphase_new();return this.__wbg_ptr=e>>>0,El.register(this,this.__wbg_ptr,this),this}contact_pairs_with(e,t){b.rawnarrowphase_contact_pairs_with(this.__wbg_ptr,e,$t(t))}contact_pair(e,t){const n=b.rawnarrowphase_contact_pair(this.__wbg_ptr,e,t);return n===0?void 0:au.__wrap(n)}intersection_pairs_with(e,t){b.rawnarrowphase_intersection_pairs_with(this.__wbg_ptr,e,$t(t))}intersection_pair(e,t){return b.rawnarrowphase_intersection_pair(this.__wbg_ptr,e,t)!==0}}const ip=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawphysicspipeline_free(i>>>0,1));class Cb{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,ip.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawphysicspipeline_free(e,0)}constructor(){const e=b.rawphysicspipeline_new();return this.__wbg_ptr=e>>>0,ip.register(this,this.__wbg_ptr,this),this}step(e,t,n,s,r,o,a,l,d,c){W(e,q),W(t,Es),W(n,ki),W(s,Hs),W(r,hs),W(o,Yt),W(a,kt),W(l,Zi),W(d,Ji),W(c,tc),b.rawphysicspipeline_step(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,o.__wbg_ptr,a.__wbg_ptr,l.__wbg_ptr,d.__wbg_ptr,c.__wbg_ptr)}stepWithEvents(e,t,n,s,r,o,a,l,d,c,u,p,h,v){W(e,q),W(t,Es),W(n,ki),W(s,Hs),W(r,hs),W(o,Yt),W(a,kt),W(l,Zi),W(d,Ji),W(c,tc),W(u,jb),b.rawphysicspipeline_stepWithEvents(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,o.__wbg_ptr,a.__wbg_ptr,l.__wbg_ptr,d.__wbg_ptr,c.__wbg_ptr,u.__wbg_ptr,$t(p),$t(h),$t(v))}}const sp=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawpidcontroller_free(i>>>0,1));class Fb{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,sp.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawpidcontroller_free(e,0)}constructor(e,t,n,s){const r=b.rawpidcontroller_new(e,t,n,s);return this.__wbg_ptr=r>>>0,sp.register(this,this.__wbg_ptr,this),this}set_kp(e,t){b.rawpidcontroller_set_kp(this.__wbg_ptr,e,t)}set_ki(e,t){b.rawpidcontroller_set_ki(this.__wbg_ptr,e,t)}set_kd(e,t){b.rawpidcontroller_set_kd(this.__wbg_ptr,e,t)}set_axes_mask(e){b.rawpidcontroller_set_axes_mask(this.__wbg_ptr,e)}reset_integrals(){b.rawpidcontroller_reset_integrals(this.__wbg_ptr)}apply_linear_correction(e,t,n,s,r){W(t,Yt),W(s,q),W(r,q),b.rawpidcontroller_apply_linear_correction(this.__wbg_ptr,e,t.__wbg_ptr,n,s.__wbg_ptr,r.__wbg_ptr)}apply_angular_correction(e,t,n,s,r){W(t,Yt),W(s,ct),W(r,q),b.rawpidcontroller_apply_angular_correction(this.__wbg_ptr,e,t.__wbg_ptr,n,s.__wbg_ptr,r.__wbg_ptr)}linear_correction(e,t,n,s,r){W(t,Yt),W(s,q),W(r,q);const o=b.rawpidcontroller_linear_correction(this.__wbg_ptr,e,t.__wbg_ptr,n,s.__wbg_ptr,r.__wbg_ptr);return q.__wrap(o)}angular_correction(e,t,n,s,r){W(t,Yt),W(s,ct),W(r,q);const o=b.rawpidcontroller_angular_correction(this.__wbg_ptr,e,t.__wbg_ptr,n,s.__wbg_ptr,r.__wbg_ptr);return q.__wrap(o)}}const rp=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawpointcolliderprojection_free(i>>>0,1));class Ja{static __wrap(e){e=e>>>0;const t=Object.create(Ja.prototype);return t.__wbg_ptr=e,rp.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,rp.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawpointcolliderprojection_free(e,0)}colliderHandle(){return b.rawpointcolliderprojection_colliderHandle(this.__wbg_ptr)}point(){const e=b.rawpointcolliderprojection_point(this.__wbg_ptr);return q.__wrap(e)}isInside(){return b.rawpointcolliderprojection_isInside(this.__wbg_ptr)!==0}featureType(){return b.rawpointcolliderprojection_featureType(this.__wbg_ptr)}featureId(){const e=b.rawpointcolliderprojection_featureId(this.__wbg_ptr);return e===4294967297?void 0:e}}const op=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawpointprojection_free(i>>>0,1));class N0{static __wrap(e){e=e>>>0;const t=Object.create(N0.prototype);return t.__wbg_ptr=e,op.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,op.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawpointprojection_free(e,0)}point(){const e=b.rawpointprojection_point(this.__wbg_ptr);return q.__wrap(e)}isInside(){return b.rawpointprojection_isInside(this.__wbg_ptr)!==0}}const ap=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawquerypipeline_free(i>>>0,1));class du{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,ap.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawquerypipeline_free(e,0)}constructor(){const e=b.rawquerypipeline_new();return this.__wbg_ptr=e>>>0,ap.register(this,this.__wbg_ptr,this),this}update(e){W(e,kt),b.rawquerypipeline_update(this.__wbg_ptr,e.__wbg_ptr)}castRay(e,t,n,s,r,o,a,l,d,c,u){try{W(e,Yt),W(t,kt),W(n,q),W(s,q);const p=b.rawquerypipeline_castRay(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r,o,a,Qe(l)?4294967297:l>>>0,!Qe(d),Qe(d)?0:d,!Qe(c),Qe(c)?0:c,qt(u));return p===0?void 0:cu.__wrap(p)}finally{vt[Dt++]=void 0}}castRayAndGetNormal(e,t,n,s,r,o,a,l,d,c,u){try{W(e,Yt),W(t,kt),W(n,q),W(s,q);const p=b.rawquerypipeline_castRayAndGetNormal(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r,o,a,Qe(l)?4294967297:l>>>0,!Qe(d),Qe(d)?0:d,!Qe(c),Qe(c)?0:c,qt(u));return p===0?void 0:M0.__wrap(p)}finally{vt[Dt++]=void 0}}intersectionsWithRay(e,t,n,s,r,o,a,l,d,c,u,p){try{W(e,Yt),W(t,kt),W(n,q),W(s,q),b.rawquerypipeline_intersectionsWithRay(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r,o,qt(a),l,Qe(d)?4294967297:d>>>0,!Qe(c),Qe(c)?0:c,!Qe(u),Qe(u)?0:u,qt(p))}finally{vt[Dt++]=void 0,vt[Dt++]=void 0}}intersectionWithShape(e,t,n,s,r,o,a,l,d,c){try{const h=b.__wbindgen_add_to_stack_pointer(-16);W(e,Yt),W(t,kt),W(n,q),W(s,ct),W(r,qe),b.rawquerypipeline_intersectionWithShape(h,this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,o,Qe(a)?4294967297:a>>>0,!Qe(l),Qe(l)?0:l,!Qe(d),Qe(d)?0:d,qt(c));var u=hn().getInt32(h+4*0,!0),p=hn().getFloat64(h+8*1,!0);return u===0?void 0:p}finally{b.__wbindgen_add_to_stack_pointer(16),vt[Dt++]=void 0}}projectPoint(e,t,n,s,r,o,a,l,d){try{W(e,Yt),W(t,kt),W(n,q);const c=b.rawquerypipeline_projectPoint(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s,r,Qe(o)?4294967297:o>>>0,!Qe(a),Qe(a)?0:a,!Qe(l),Qe(l)?0:l,qt(d));return c===0?void 0:Ja.__wrap(c)}finally{vt[Dt++]=void 0}}projectPointAndGetFeature(e,t,n,s,r,o,a,l){try{W(e,Yt),W(t,kt),W(n,q);const d=b.rawquerypipeline_projectPointAndGetFeature(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s,Qe(r)?4294967297:r>>>0,!Qe(o),Qe(o)?0:o,!Qe(a),Qe(a)?0:a,qt(l));return d===0?void 0:Ja.__wrap(d)}finally{vt[Dt++]=void 0}}intersectionsWithPoint(e,t,n,s,r,o,a,l,d){try{W(e,Yt),W(t,kt),W(n,q),b.rawquerypipeline_intersectionsWithPoint(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,qt(s),r,Qe(o)?4294967297:o>>>0,!Qe(a),Qe(a)?0:a,!Qe(l),Qe(l)?0:l,qt(d))}finally{vt[Dt++]=void 0,vt[Dt++]=void 0}}castShape(e,t,n,s,r,o,a,l,d,c,u,p,h,v){try{W(e,Yt),W(t,kt),W(n,q),W(s,ct),W(r,q),W(o,qe);const x=b.rawquerypipeline_castShape(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,o.__wbg_ptr,a,l,d,c,Qe(u)?4294967297:u>>>0,!Qe(p),Qe(p)?0:p,!Qe(h),Qe(h)?0:h,qt(v));return x===0?void 0:L0.__wrap(x)}finally{vt[Dt++]=void 0}}intersectionsWithShape(e,t,n,s,r,o,a,l,d,c,u){try{W(e,Yt),W(t,kt),W(n,q),W(s,ct),W(r,qe),b.rawquerypipeline_intersectionsWithShape(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,qt(o),a,Qe(l)?4294967297:l>>>0,!Qe(d),Qe(d)?0:d,!Qe(c),Qe(c)?0:c,qt(u))}finally{vt[Dt++]=void 0,vt[Dt++]=void 0}}collidersWithAabbIntersectingAabb(e,t,n){try{W(e,q),W(t,q),b.rawquerypipeline_collidersWithAabbIntersectingAabb(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,qt(n))}finally{vt[Dt++]=void 0}}}const lp=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawraycolliderhit_free(i>>>0,1));class cu{static __wrap(e){e=e>>>0;const t=Object.create(cu.prototype);return t.__wbg_ptr=e,lp.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,lp.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawraycolliderhit_free(e,0)}colliderHandle(){return b.rawcharactercollision_handle(this.__wbg_ptr)}timeOfImpact(){return b.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}}const dp=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawraycolliderintersection_free(i>>>0,1));class M0{static __wrap(e){e=e>>>0;const t=Object.create(M0.prototype);return t.__wbg_ptr=e,dp.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,dp.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawraycolliderintersection_free(e,0)}colliderHandle(){return b.rawpointcolliderprojection_colliderHandle(this.__wbg_ptr)}normal(){const e=b.rawcollidershapecasthit_witness1(this.__wbg_ptr);return q.__wrap(e)}time_of_impact(){return b.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}featureType(){return b.rawpointcolliderprojection_featureType(this.__wbg_ptr)}featureId(){const e=b.rawpointcolliderprojection_featureId(this.__wbg_ptr);return e===4294967297?void 0:e}}const cp=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawrayintersection_free(i>>>0,1));class O0{static __wrap(e){e=e>>>0;const t=Object.create(O0.prototype);return t.__wbg_ptr=e,cp.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,cp.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawrayintersection_free(e,0)}normal(){const e=b.rawcollidershapecasthit_witness1(this.__wbg_ptr);return q.__wrap(e)}time_of_impact(){return b.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}featureType(){return b.rawpointcolliderprojection_featureType(this.__wbg_ptr)}featureId(){const e=b.rawpointcolliderprojection_featureId(this.__wbg_ptr);return e===4294967297?void 0:e}}const Al=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawrigidbodyset_free(i>>>0,1));class Yt{static __wrap(e){e=e>>>0;const t=Object.create(Yt.prototype);return t.__wbg_ptr=e,Al.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,Al.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawrigidbodyset_free(e,0)}rbTranslation(e){const t=b.rawrigidbodyset_rbTranslation(this.__wbg_ptr,e);return q.__wrap(t)}rbRotation(e){const t=b.rawrigidbodyset_rbRotation(this.__wbg_ptr,e);return ct.__wrap(t)}rbSleep(e){b.rawrigidbodyset_rbSleep(this.__wbg_ptr,e)}rbIsSleeping(e){return b.rawrigidbodyset_rbIsSleeping(this.__wbg_ptr,e)!==0}rbIsMoving(e){return b.rawrigidbodyset_rbIsMoving(this.__wbg_ptr,e)!==0}rbNextTranslation(e){const t=b.rawrigidbodyset_rbNextTranslation(this.__wbg_ptr,e);return q.__wrap(t)}rbNextRotation(e){const t=b.rawrigidbodyset_rbNextRotation(this.__wbg_ptr,e);return ct.__wrap(t)}rbSetTranslation(e,t,n,s,r){b.rawrigidbodyset_rbSetTranslation(this.__wbg_ptr,e,t,n,s,r)}rbSetRotation(e,t,n,s,r,o){b.rawrigidbodyset_rbSetRotation(this.__wbg_ptr,e,t,n,s,r,o)}rbSetLinvel(e,t,n){W(t,q),b.rawrigidbodyset_rbSetLinvel(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbSetAngvel(e,t,n){W(t,q),b.rawrigidbodyset_rbSetAngvel(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbSetNextKinematicTranslation(e,t,n,s){b.rawrigidbodyset_rbSetNextKinematicTranslation(this.__wbg_ptr,e,t,n,s)}rbSetNextKinematicRotation(e,t,n,s,r){b.rawrigidbodyset_rbSetNextKinematicRotation(this.__wbg_ptr,e,t,n,s,r)}rbRecomputeMassPropertiesFromColliders(e,t){W(t,kt),b.rawrigidbodyset_rbRecomputeMassPropertiesFromColliders(this.__wbg_ptr,e,t.__wbg_ptr)}rbSetAdditionalMass(e,t,n){b.rawrigidbodyset_rbSetAdditionalMass(this.__wbg_ptr,e,t,n)}rbSetAdditionalMassProperties(e,t,n,s,r,o){W(n,q),W(s,q),W(r,ct),b.rawrigidbodyset_rbSetAdditionalMassProperties(this.__wbg_ptr,e,t,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,o)}rbLinvel(e){const t=b.rawrigidbodyset_rbLinvel(this.__wbg_ptr,e);return q.__wrap(t)}rbAngvel(e){const t=b.rawrigidbodyset_rbAngvel(this.__wbg_ptr,e);return q.__wrap(t)}rbVelocityAtPoint(e,t){W(t,q);const n=b.rawrigidbodyset_rbVelocityAtPoint(this.__wbg_ptr,e,t.__wbg_ptr);return q.__wrap(n)}rbLockTranslations(e,t,n){b.rawrigidbodyset_rbLockTranslations(this.__wbg_ptr,e,t,n)}rbSetEnabledTranslations(e,t,n,s,r){b.rawrigidbodyset_rbSetEnabledTranslations(this.__wbg_ptr,e,t,n,s,r)}rbLockRotations(e,t,n){b.rawrigidbodyset_rbLockRotations(this.__wbg_ptr,e,t,n)}rbSetEnabledRotations(e,t,n,s,r){b.rawrigidbodyset_rbSetEnabledRotations(this.__wbg_ptr,e,t,n,s,r)}rbDominanceGroup(e){return b.rawrigidbodyset_rbDominanceGroup(this.__wbg_ptr,e)}rbSetDominanceGroup(e,t){b.rawrigidbodyset_rbSetDominanceGroup(this.__wbg_ptr,e,t)}rbEnableCcd(e,t){b.rawrigidbodyset_rbEnableCcd(this.__wbg_ptr,e,t)}rbSetSoftCcdPrediction(e,t){b.rawrigidbodyset_rbSetSoftCcdPrediction(this.__wbg_ptr,e,t)}rbMass(e){return b.rawrigidbodyset_rbMass(this.__wbg_ptr,e)}rbInvMass(e){return b.rawrigidbodyset_rbInvMass(this.__wbg_ptr,e)}rbEffectiveInvMass(e){const t=b.rawrigidbodyset_rbEffectiveInvMass(this.__wbg_ptr,e);return q.__wrap(t)}rbLocalCom(e){const t=b.rawrigidbodyset_rbLocalCom(this.__wbg_ptr,e);return q.__wrap(t)}rbWorldCom(e){const t=b.rawrigidbodyset_rbWorldCom(this.__wbg_ptr,e);return q.__wrap(t)}rbInvPrincipalInertiaSqrt(e){const t=b.rawrigidbodyset_rbInvPrincipalInertiaSqrt(this.__wbg_ptr,e);return q.__wrap(t)}rbPrincipalInertiaLocalFrame(e){const t=b.rawrigidbodyset_rbPrincipalInertiaLocalFrame(this.__wbg_ptr,e);return ct.__wrap(t)}rbPrincipalInertia(e){const t=b.rawrigidbodyset_rbPrincipalInertia(this.__wbg_ptr,e);return q.__wrap(t)}rbEffectiveWorldInvInertiaSqrt(e){const t=b.rawrigidbodyset_rbEffectiveWorldInvInertiaSqrt(this.__wbg_ptr,e);return Ba.__wrap(t)}rbEffectiveAngularInertia(e){const t=b.rawrigidbodyset_rbEffectiveAngularInertia(this.__wbg_ptr,e);return Ba.__wrap(t)}rbWakeUp(e){b.rawrigidbodyset_rbWakeUp(this.__wbg_ptr,e)}rbIsCcdEnabled(e){return b.rawrigidbodyset_rbIsCcdEnabled(this.__wbg_ptr,e)!==0}rbSoftCcdPrediction(e){return b.rawrigidbodyset_rbSoftCcdPrediction(this.__wbg_ptr,e)}rbNumColliders(e){return b.rawrigidbodyset_rbNumColliders(this.__wbg_ptr,e)>>>0}rbCollider(e,t){return b.rawrigidbodyset_rbCollider(this.__wbg_ptr,e,t)}rbBodyType(e){return b.rawrigidbodyset_rbBodyType(this.__wbg_ptr,e)}rbSetBodyType(e,t,n){b.rawrigidbodyset_rbSetBodyType(this.__wbg_ptr,e,t,n)}rbIsFixed(e){return b.rawrigidbodyset_rbIsFixed(this.__wbg_ptr,e)!==0}rbIsKinematic(e){return b.rawrigidbodyset_rbIsKinematic(this.__wbg_ptr,e)!==0}rbIsDynamic(e){return b.rawrigidbodyset_rbIsDynamic(this.__wbg_ptr,e)!==0}rbLinearDamping(e){return b.rawrigidbodyset_rbLinearDamping(this.__wbg_ptr,e)}rbAngularDamping(e){return b.rawrigidbodyset_rbAngularDamping(this.__wbg_ptr,e)}rbSetLinearDamping(e,t){b.rawrigidbodyset_rbSetLinearDamping(this.__wbg_ptr,e,t)}rbSetAngularDamping(e,t){b.rawrigidbodyset_rbSetAngularDamping(this.__wbg_ptr,e,t)}rbSetEnabled(e,t){b.rawrigidbodyset_rbSetEnabled(this.__wbg_ptr,e,t)}rbIsEnabled(e){return b.rawrigidbodyset_rbIsEnabled(this.__wbg_ptr,e)!==0}rbGravityScale(e){return b.rawrigidbodyset_rbGravityScale(this.__wbg_ptr,e)}rbSetGravityScale(e,t,n){b.rawrigidbodyset_rbSetGravityScale(this.__wbg_ptr,e,t,n)}rbResetForces(e,t){b.rawrigidbodyset_rbResetForces(this.__wbg_ptr,e,t)}rbResetTorques(e,t){b.rawrigidbodyset_rbResetTorques(this.__wbg_ptr,e,t)}rbAddForce(e,t,n){W(t,q),b.rawrigidbodyset_rbAddForce(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbApplyImpulse(e,t,n){W(t,q),b.rawrigidbodyset_rbApplyImpulse(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbAddTorque(e,t,n){W(t,q),b.rawrigidbodyset_rbAddTorque(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbApplyTorqueImpulse(e,t,n){W(t,q),b.rawrigidbodyset_rbApplyTorqueImpulse(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbAddForceAtPoint(e,t,n,s){W(t,q),W(n,q),b.rawrigidbodyset_rbAddForceAtPoint(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s)}rbApplyImpulseAtPoint(e,t,n,s){W(t,q),W(n,q),b.rawrigidbodyset_rbApplyImpulseAtPoint(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s)}rbAdditionalSolverIterations(e){return b.rawrigidbodyset_rbAdditionalSolverIterations(this.__wbg_ptr,e)>>>0}rbSetAdditionalSolverIterations(e,t){b.rawrigidbodyset_rbSetAdditionalSolverIterations(this.__wbg_ptr,e,t)}rbUserData(e){return b.rawrigidbodyset_rbUserData(this.__wbg_ptr,e)>>>0}rbSetUserData(e,t){b.rawrigidbodyset_rbSetUserData(this.__wbg_ptr,e,t)}rbUserForce(e){const t=b.rawrigidbodyset_rbUserForce(this.__wbg_ptr,e);return q.__wrap(t)}rbUserTorque(e){const t=b.rawrigidbodyset_rbUserTorque(this.__wbg_ptr,e);return q.__wrap(t)}constructor(){const e=b.rawrigidbodyset_new();return this.__wbg_ptr=e>>>0,Al.register(this,this.__wbg_ptr,this),this}createRigidBody(e,t,n,s,r,o,a,l,d,c,u,p,h,v,x,m,f,N,O,P,j,D,V,G,M,R){return W(t,q),W(n,ct),W(a,q),W(l,q),W(d,q),W(c,q),W(u,ct),b.rawrigidbodyset_createRigidBody(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s,r,o,a.__wbg_ptr,l.__wbg_ptr,d.__wbg_ptr,c.__wbg_ptr,u.__wbg_ptr,p,h,v,x,m,f,N,O,P,j,D,V,G,M,R)}remove(e,t,n,s,r){W(t,ki),W(n,kt),W(s,Zi),W(r,Ji),b.rawrigidbodyset_remove(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr)}len(){return b.rawcolliderset_len(this.__wbg_ptr)>>>0}contains(e){return b.rawrigidbodyset_contains(this.__wbg_ptr,e)!==0}forEachRigidBodyHandle(e){try{b.rawrigidbodyset_forEachRigidBodyHandle(this.__wbg_ptr,qt(e))}finally{vt[Dt++]=void 0}}propagateModifiedBodyPositionsToColliders(e){W(e,kt),b.rawrigidbodyset_propagateModifiedBodyPositionsToColliders(this.__wbg_ptr,e.__wbg_ptr)}}const Xl=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawrotation_free(i>>>0,1));class ct{static __wrap(e){e=e>>>0;const t=Object.create(ct.prototype);return t.__wbg_ptr=e,Xl.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,Xl.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawrotation_free(e,0)}constructor(e,t,n,s){const r=b.rawrotation_new(e,t,n,s);return this.__wbg_ptr=r>>>0,Xl.register(this,this.__wbg_ptr,this),this}static identity(){const e=b.rawrotation_identity();return ct.__wrap(e)}get x(){return b.rawrotation_x(this.__wbg_ptr)}get y(){return b.rawintegrationparameters_dt(this.__wbg_ptr)}get z(){return b.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}get w(){return b.rawrotation_w(this.__wbg_ptr)}}const up=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawsdpmatrix3_free(i>>>0,1));class Ba{static __wrap(e){e=e>>>0;const t=Object.create(Ba.prototype);return t.__wbg_ptr=e,up.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,up.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawsdpmatrix3_free(e,0)}elements(){const e=b.rawsdpmatrix3_elements(this.__wbg_ptr);return yo(e)}}const pp=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawserializationpipeline_free(i>>>0,1));class qb{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,pp.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawserializationpipeline_free(e,0)}constructor(){const e=b.rawserializationpipeline_new();return this.__wbg_ptr=e>>>0,pp.register(this,this.__wbg_ptr,this),this}serializeAll(e,t,n,s,r,o,a,l,d){W(e,q),W(t,Es),W(n,ki),W(s,Hs),W(r,hs),W(o,Yt),W(a,kt),W(l,Zi),W(d,Ji);const c=b.rawserializationpipeline_serializeAll(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,o.__wbg_ptr,a.__wbg_ptr,l.__wbg_ptr,d.__wbg_ptr);return yo(c)}deserializeAll(e){const t=b.rawserializationpipeline_deserializeAll(this.__wbg_ptr,$t(e));return t===0?void 0:lu.__wrap(t)}}const fp=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawshape_free(i>>>0,1));class qe{static __wrap(e){e=e>>>0;const t=Object.create(qe.prototype);return t.__wbg_ptr=e,fp.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,fp.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawshape_free(e,0)}static cuboid(e,t,n){const s=b.rawshape_cuboid(e,t,n);return qe.__wrap(s)}static roundCuboid(e,t,n,s){const r=b.rawshape_roundCuboid(e,t,n,s);return qe.__wrap(r)}static ball(e){const t=b.rawshape_ball(e);return qe.__wrap(t)}static halfspace(e){W(e,q);const t=b.rawshape_halfspace(e.__wbg_ptr);return qe.__wrap(t)}static capsule(e,t){const n=b.rawshape_capsule(e,t);return qe.__wrap(n)}static cylinder(e,t){const n=b.rawshape_cylinder(e,t);return qe.__wrap(n)}static roundCylinder(e,t,n){const s=b.rawshape_roundCylinder(e,t,n);return qe.__wrap(s)}static cone(e,t){const n=b.rawshape_cone(e,t);return qe.__wrap(n)}static roundCone(e,t,n){const s=b.rawshape_roundCone(e,t,n);return qe.__wrap(s)}static voxels(e,t){W(e,q);const n=Kr(t,b.__wbindgen_export_2),s=An,r=b.rawshape_voxels(e.__wbg_ptr,n,s);return qe.__wrap(r)}static voxelsFromPoints(e,t){W(e,q);const n=rs(t,b.__wbindgen_export_2),s=An,r=b.rawshape_voxelsFromPoints(e.__wbg_ptr,n,s);return qe.__wrap(r)}static polyline(e,t){const n=rs(e,b.__wbindgen_export_2),s=An,r=Kr(t,b.__wbindgen_export_2),o=An,a=b.rawshape_polyline(n,s,r,o);return qe.__wrap(a)}static trimesh(e,t,n){const s=rs(e,b.__wbindgen_export_2),r=An,o=Kr(t,b.__wbindgen_export_2),a=An,l=b.rawshape_trimesh(s,r,o,a,n);return l===0?void 0:qe.__wrap(l)}static heightfield(e,t,n,s,r){const o=rs(n,b.__wbindgen_export_2),a=An;W(s,q);const l=b.rawshape_heightfield(e,t,o,a,s.__wbg_ptr,r);return qe.__wrap(l)}static segment(e,t){W(e,q),W(t,q);const n=b.rawshape_segment(e.__wbg_ptr,t.__wbg_ptr);return qe.__wrap(n)}static triangle(e,t,n){W(e,q),W(t,q),W(n,q);const s=b.rawshape_triangle(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr);return qe.__wrap(s)}static roundTriangle(e,t,n,s){W(e,q),W(t,q),W(n,q);const r=b.rawshape_roundTriangle(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s);return qe.__wrap(r)}static convexHull(e){const t=rs(e,b.__wbindgen_export_2),n=An,s=b.rawshape_convexHull(t,n);return s===0?void 0:qe.__wrap(s)}static roundConvexHull(e,t){const n=rs(e,b.__wbindgen_export_2),s=An,r=b.rawshape_roundConvexHull(n,s,t);return r===0?void 0:qe.__wrap(r)}static convexMesh(e,t){const n=rs(e,b.__wbindgen_export_2),s=An,r=Kr(t,b.__wbindgen_export_2),o=An,a=b.rawshape_convexMesh(n,s,r,o);return a===0?void 0:qe.__wrap(a)}static roundConvexMesh(e,t,n){const s=rs(e,b.__wbindgen_export_2),r=An,o=Kr(t,b.__wbindgen_export_2),a=An,l=b.rawshape_roundConvexMesh(s,r,o,a,n);return l===0?void 0:qe.__wrap(l)}castShape(e,t,n,s,r,o,a,l,d,c){W(e,q),W(t,ct),W(n,q),W(s,qe),W(r,q),W(o,ct),W(a,q);const u=b.rawshape_castShape(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,o.__wbg_ptr,a.__wbg_ptr,l,d,c);return u===0?void 0:z0.__wrap(u)}intersectsShape(e,t,n,s,r){return W(e,q),W(t,ct),W(n,qe),W(s,q),W(r,ct),b.rawshape_intersectsShape(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr)!==0}contactShape(e,t,n,s,r,o){W(e,q),W(t,ct),W(n,qe),W(s,q),W(r,ct);const a=b.rawshape_contactShape(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r.__wbg_ptr,o);return a===0?void 0:wo.__wrap(a)}containsPoint(e,t,n){return W(e,q),W(t,ct),W(n,q),b.rawshape_containsPoint(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr)!==0}projectPoint(e,t,n,s){W(e,q),W(t,ct),W(n,q);const r=b.rawshape_projectPoint(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s);return N0.__wrap(r)}intersectsRay(e,t,n,s,r){return W(e,q),W(t,ct),W(n,q),W(s,q),b.rawshape_intersectsRay(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r)!==0}castRay(e,t,n,s,r,o){return W(e,q),W(t,ct),W(n,q),W(s,q),b.rawshape_castRay(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r,o)}castRayAndGetNormal(e,t,n,s,r,o){W(e,q),W(t,ct),W(n,q),W(s,q);const a=b.rawshape_castRayAndGetNormal(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,s.__wbg_ptr,r,o);return a===0?void 0:O0.__wrap(a)}}const hp=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawshapecasthit_free(i>>>0,1));class z0{static __wrap(e){e=e>>>0;const t=Object.create(z0.prototype);return t.__wbg_ptr=e,hp.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,hp.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawshapecasthit_free(e,0)}time_of_impact(){return b.rawrotation_x(this.__wbg_ptr)}witness1(){const e=b.rawshapecasthit_witness1(this.__wbg_ptr);return q.__wrap(e)}witness2(){const e=b.rawcontactforceevent_total_force(this.__wbg_ptr);return q.__wrap(e)}normal1(){const e=b.rawshapecasthit_normal1(this.__wbg_ptr);return q.__wrap(e)}normal2(){const e=b.rawshapecasthit_normal2(this.__wbg_ptr);return q.__wrap(e)}}const mp=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawshapecontact_free(i>>>0,1));class wo{static __wrap(e){e=e>>>0;const t=Object.create(wo.prototype);return t.__wbg_ptr=e,mp.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,mp.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawshapecontact_free(e,0)}distance(){return b.rawkinematiccharactercontroller_maxSlopeClimbAngle(this.__wbg_ptr)}point1(){const e=b.rawpointprojection_point(this.__wbg_ptr);return q.__wrap(e)}point2(){const e=b.rawcollidershapecasthit_witness1(this.__wbg_ptr);return q.__wrap(e)}normal1(){const e=b.rawcollidershapecasthit_witness2(this.__wbg_ptr);return q.__wrap(e)}normal2(){const e=b.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return q.__wrap(e)}}const Il=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(i=>b.__wbg_rawvector_free(i>>>0,1));class q{static __wrap(e){e=e>>>0;const t=Object.create(q.prototype);return t.__wbg_ptr=e,Il.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,Il.unregister(this),e}free(){const e=this.__destroy_into_raw();b.__wbg_rawvector_free(e,0)}static zero(){const e=b.rawvector_zero();return q.__wrap(e)}constructor(e,t,n){const s=b.rawvector_new(e,t,n);return this.__wbg_ptr=s>>>0,Il.register(this,this.__wbg_ptr,this),this}get x(){return b.rawrotation_x(this.__wbg_ptr)}set x(e){b.rawvector_set_x(this.__wbg_ptr,e)}get y(){return b.rawintegrationparameters_dt(this.__wbg_ptr)}set y(e){b.rawintegrationparameters_set_dt(this.__wbg_ptr,e)}get z(){return b.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}set z(e){b.rawvector_set_z(this.__wbg_ptr,e)}xyz(){const e=b.rawvector_xyz(this.__wbg_ptr);return q.__wrap(e)}yxz(){const e=b.rawvector_yxz(this.__wbg_ptr);return q.__wrap(e)}zxy(){const e=b.rawvector_zxy(this.__wbg_ptr);return q.__wrap(e)}xzy(){const e=b.rawvector_xzy(this.__wbg_ptr);return q.__wrap(e)}yzx(){const e=b.rawvector_yzx(this.__wbg_ptr);return q.__wrap(e)}zyx(){const e=b.rawvector_zyx(this.__wbg_ptr);return q.__wrap(e)}}function Yb(i,e,t,n){const s=Lt(i).bind(Lt(e),Lt(t),Lt(n));return $t(s)}function Gb(i){const e=Lt(i).buffer;return $t(e)}function Ub(){return su(function(i,e,t){const n=Lt(i).call(Lt(e),Lt(t));return $t(n)},arguments)}function Zb(){return su(function(i,e,t,n){const s=Lt(i).call(Lt(e),Lt(t),Lt(n));return $t(s)},arguments)}function kb(){return su(function(i,e,t,n,s){const r=Lt(i).call(Lt(e),Lt(t),Lt(n),Lt(s));return $t(r)},arguments)}function Jb(i){return Lt(i).length}function Bb(i){return Lt(i).length}function Kb(i){const e=new Uint8Array(Lt(i));return $t(e)}function Qb(i,e,t){const n=new Uint8Array(Lt(i),e>>>0,t>>>0);return $t(n)}function _b(i,e,t){const n=new Float32Array(Lt(i),e>>>0,t>>>0);return $t(n)}function $b(i){const e=new Float32Array(i>>>0);return $t(e)}function ev(i){const e=ru.__wrap(i);return $t(e)}function tv(i){const e=M0.__wrap(i);return $t(e)}function nv(i,e,t){Lt(i).set(Lt(e),t>>>0)}function iv(i,e,t){Lt(i).set(Lt(e),t>>>0)}function sv(i){const e=Lt(i);return typeof e=="boolean"?e?1:0:2}function rv(i){return typeof Lt(i)=="function"}function ov(){const i=b.memory;return $t(i)}function av(i,e){const t=Lt(e),n=typeof t=="number"?t:void 0;hn().setFloat64(i+8*1,Qe(n)?0:n,!0),hn().setInt32(i+4*0,!Qe(n),!0)}function lv(i){return $t(i)}function dv(i){yo(i)}function cv(i,e){throw new Error(Eb(i,e))}URL=globalThis.URL;const y=await Nb({"./rapier_wasm3d_bg.js":{__wbindgen_number_new:lv,__wbindgen_boolean_get:sv,__wbindgen_object_drop_ref:dv,__wbindgen_number_get:av,__wbindgen_is_function:rv,__wbg_rawraycolliderintersection_new:tv,__wbg_rawcontactforceevent_new:ev,__wbg_call_7cccdd69e0791ae2:Ub,__wbg_call_833bed5770ea2041:Zb,__wbg_call_b8adc8b1d0a0d8eb:kb,__wbg_bind_c8359b1cba058168:Yb,__wbg_buffer_609cc3eee51ed158:Gb,__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a:Qb,__wbg_new_a12002a7f91c75be:Kb,__wbg_set_65595bdd868b3009:iv,__wbg_length_a446193dc22c12f8:Bb,__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354:_b,__wbg_set_10bad9bee0e9c58b:nv,__wbg_length_3b4f022188ae8db6:Jb,__wbg_newwithlength_5a5efe313cfd59f1:$b,__wbindgen_throw:cv,__wbindgen_memory:ov}},Lb),uv=y.memory,pv=y.version,fv=y.__wbg_rawkinematiccharactercontroller_free,hv=y.rawkinematiccharactercontroller_new,mv=y.rawkinematiccharactercontroller_setUp,bv=y.rawkinematiccharactercontroller_normalNudgeFactor,vv=y.rawkinematiccharactercontroller_setNormalNudgeFactor,yv=y.rawkinematiccharactercontroller_setOffset,wv=y.rawkinematiccharactercontroller_slideEnabled,gv=y.rawkinematiccharactercontroller_setSlideEnabled,xv=y.rawkinematiccharactercontroller_autostepMaxHeight,Tv=y.rawkinematiccharactercontroller_autostepMinWidth,Sv=y.rawkinematiccharactercontroller_autostepIncludesDynamicBodies,Pv=y.rawkinematiccharactercontroller_autostepEnabled,Rv=y.rawkinematiccharactercontroller_enableAutostep,Lv=y.rawkinematiccharactercontroller_disableAutostep,Nv=y.rawkinematiccharactercontroller_maxSlopeClimbAngle,Mv=y.rawkinematiccharactercontroller_setMaxSlopeClimbAngle,Ov=y.rawkinematiccharactercontroller_minSlopeSlideAngle,zv=y.rawkinematiccharactercontroller_setMinSlopeSlideAngle,Hv=y.rawkinematiccharactercontroller_snapToGroundDistance,Ev=y.rawkinematiccharactercontroller_enableSnapToGround,Av=y.rawkinematiccharactercontroller_disableSnapToGround,Xv=y.rawkinematiccharactercontroller_snapToGroundEnabled,Iv=y.rawkinematiccharactercontroller_computeColliderMovement,Dv=y.rawkinematiccharactercontroller_computedMovement,Wv=y.rawkinematiccharactercontroller_computedGrounded,jv=y.rawkinematiccharactercontroller_numComputedCollisions,Vv=y.rawkinematiccharactercontroller_computedCollision,Cv=y.__wbg_rawcharactercollision_free,Fv=y.rawcharactercollision_new,qv=y.rawcharactercollision_handle,Yv=y.rawcharactercollision_translationDeltaApplied,Gv=y.rawcharactercollision_translationDeltaRemaining,Uv=y.rawcharactercollision_toi,Zv=y.rawcharactercollision_worldWitness1,kv=y.rawcharactercollision_worldWitness2,Jv=y.rawcharactercollision_worldNormal1,Bv=y.rawcharactercollision_worldNormal2,Kv=y.__wbg_rawpidcontroller_free,Qv=y.rawpidcontroller_new,_v=y.rawpidcontroller_set_kp,$v=y.rawpidcontroller_set_ki,ey=y.rawpidcontroller_set_kd,ty=y.rawpidcontroller_set_axes_mask,ny=y.rawpidcontroller_reset_integrals,iy=y.rawpidcontroller_apply_linear_correction,sy=y.rawpidcontroller_apply_angular_correction,ry=y.rawpidcontroller_linear_correction,oy=y.rawpidcontroller_angular_correction,ay=y.__wbg_rawdynamicraycastvehiclecontroller_free,ly=y.rawdynamicraycastvehiclecontroller_new,dy=y.rawdynamicraycastvehiclecontroller_current_vehicle_speed,cy=y.rawdynamicraycastvehiclecontroller_chassis,uy=y.rawdynamicraycastvehiclecontroller_index_up_axis,py=y.rawdynamicraycastvehiclecontroller_set_index_up_axis,fy=y.rawdynamicraycastvehiclecontroller_index_forward_axis,hy=y.rawdynamicraycastvehiclecontroller_set_index_forward_axis,my=y.rawdynamicraycastvehiclecontroller_add_wheel,by=y.rawdynamicraycastvehiclecontroller_num_wheels,vy=y.rawdynamicraycastvehiclecontroller_update_vehicle,yy=y.rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs,wy=y.rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs,gy=y.rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length,xy=y.rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length,Ty=y.rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel,Sy=y.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel,Py=y.rawdynamicraycastvehiclecontroller_wheel_radius,Ry=y.rawdynamicraycastvehiclecontroller_set_wheel_radius,Ly=y.rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness,Ny=y.rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness,My=y.rawdynamicraycastvehiclecontroller_wheel_suspension_compression,Oy=y.rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression,zy=y.rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation,Hy=y.rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation,Ey=y.rawdynamicraycastvehiclecontroller_wheel_max_suspension_force,Ay=y.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force,Xy=y.rawdynamicraycastvehiclecontroller_wheel_brake,Iy=y.rawdynamicraycastvehiclecontroller_set_wheel_brake,Dy=y.rawdynamicraycastvehiclecontroller_wheel_steering,Wy=y.rawdynamicraycastvehiclecontroller_set_wheel_steering,jy=y.rawdynamicraycastvehiclecontroller_wheel_engine_force,Vy=y.rawdynamicraycastvehiclecontroller_set_wheel_engine_force,Cy=y.rawdynamicraycastvehiclecontroller_wheel_direction_cs,Fy=y.rawdynamicraycastvehiclecontroller_set_wheel_direction_cs,qy=y.rawdynamicraycastvehiclecontroller_wheel_axle_cs,Yy=y.rawdynamicraycastvehiclecontroller_set_wheel_axle_cs,Gy=y.rawdynamicraycastvehiclecontroller_wheel_friction_slip,Uy=y.rawdynamicraycastvehiclecontroller_set_wheel_friction_slip,Zy=y.rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness,ky=y.rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness,Jy=y.rawdynamicraycastvehiclecontroller_wheel_rotation,By=y.rawdynamicraycastvehiclecontroller_wheel_forward_impulse,Ky=y.rawdynamicraycastvehiclecontroller_wheel_side_impulse,Qy=y.rawdynamicraycastvehiclecontroller_wheel_suspension_force,_y=y.rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws,$y=y.rawdynamicraycastvehiclecontroller_wheel_contact_point_ws,ew=y.rawdynamicraycastvehiclecontroller_wheel_suspension_length,tw=y.rawdynamicraycastvehiclecontroller_wheel_hard_point_ws,nw=y.rawdynamicraycastvehiclecontroller_wheel_is_in_contact,iw=y.rawdynamicraycastvehiclecontroller_wheel_ground_object,sw=y.__wbg_rawccdsolver_free,rw=y.rawccdsolver_new,ow=y.rawimpulsejointset_jointType,aw=y.rawimpulsejointset_jointBodyHandle1,lw=y.rawimpulsejointset_jointBodyHandle2,dw=y.rawimpulsejointset_jointFrameX1,cw=y.rawimpulsejointset_jointFrameX2,uw=y.rawimpulsejointset_jointAnchor1,pw=y.rawimpulsejointset_jointAnchor2,fw=y.rawimpulsejointset_jointSetAnchor1,hw=y.rawimpulsejointset_jointSetAnchor2,mw=y.rawimpulsejointset_jointContactsEnabled,bw=y.rawimpulsejointset_jointSetContactsEnabled,vw=y.rawimpulsejointset_jointLimitsEnabled,yw=y.rawimpulsejointset_jointLimitsMin,ww=y.rawimpulsejointset_jointLimitsMax,gw=y.rawimpulsejointset_jointSetLimits,xw=y.rawimpulsejointset_jointConfigureMotorModel,Tw=y.rawimpulsejointset_jointConfigureMotorVelocity,Sw=y.rawimpulsejointset_jointConfigureMotorPosition,Pw=y.rawimpulsejointset_jointConfigureMotor,Rw=y.__wbg_rawimpulsejointset_free,Lw=y.rawimpulsejointset_new,Nw=y.rawimpulsejointset_createJoint,Mw=y.rawimpulsejointset_remove,Ow=y.rawimpulsejointset_len,zw=y.rawimpulsejointset_contains,Hw=y.rawimpulsejointset_forEachJointHandle,Ew=y.rawimpulsejointset_forEachJointAttachedToRigidBody,Aw=y.__wbg_rawintegrationparameters_free,Xw=y.rawintegrationparameters_new,Iw=y.rawintegrationparameters_dt,Dw=y.rawintegrationparameters_contact_erp,Ww=y.rawintegrationparameters_numSolverIterations,jw=y.rawintegrationparameters_minIslandSize,Vw=y.rawintegrationparameters_maxCcdSubsteps,Cw=y.rawintegrationparameters_lengthUnit,Fw=y.rawintegrationparameters_set_dt,qw=y.rawintegrationparameters_set_contact_natural_frequency,Yw=y.rawintegrationparameters_set_normalizedAllowedLinearError,Gw=y.rawintegrationparameters_set_normalizedPredictionDistance,Uw=y.rawintegrationparameters_set_numSolverIterations,Zw=y.rawintegrationparameters_set_minIslandSize,kw=y.rawintegrationparameters_set_maxCcdSubsteps,Jw=y.rawintegrationparameters_set_lengthUnit,Bw=y.rawintegrationparameters_switchToStandardPgsSolver,Kw=y.rawintegrationparameters_switchToSmallStepsPgsSolver,Qw=y.rawintegrationparameters_switchToSmallStepsPgsSolverWithoutWarmstart,_w=y.__wbg_rawislandmanager_free,$w=y.rawislandmanager_new,eg=y.rawislandmanager_forEachActiveRigidBodyHandle,tg=y.__wbg_rawgenericjoint_free,ng=y.rawgenericjoint_generic,ig=y.rawgenericjoint_spring,sg=y.rawgenericjoint_rope,rg=y.rawgenericjoint_spherical,og=y.rawgenericjoint_prismatic,ag=y.rawgenericjoint_fixed,lg=y.rawgenericjoint_revolute,dg=y.rawmultibodyjointset_jointType,cg=y.rawmultibodyjointset_jointFrameX1,ug=y.rawmultibodyjointset_jointFrameX2,pg=y.rawmultibodyjointset_jointAnchor1,fg=y.rawmultibodyjointset_jointAnchor2,hg=y.rawmultibodyjointset_jointContactsEnabled,mg=y.rawmultibodyjointset_jointSetContactsEnabled,bg=y.rawmultibodyjointset_jointLimitsEnabled,vg=y.rawmultibodyjointset_jointLimitsMin,yg=y.rawmultibodyjointset_jointLimitsMax,wg=y.__wbg_rawmultibodyjointset_free,gg=y.rawmultibodyjointset_new,xg=y.rawmultibodyjointset_createJoint,Tg=y.rawmultibodyjointset_remove,Sg=y.rawmultibodyjointset_contains,Pg=y.rawmultibodyjointset_forEachJointHandle,Rg=y.rawmultibodyjointset_forEachJointAttachedToRigidBody,Lg=y.rawrigidbodyset_rbTranslation,Ng=y.rawrigidbodyset_rbRotation,Mg=y.rawrigidbodyset_rbSleep,Og=y.rawrigidbodyset_rbIsSleeping,zg=y.rawrigidbodyset_rbIsMoving,Hg=y.rawrigidbodyset_rbNextTranslation,Eg=y.rawrigidbodyset_rbNextRotation,Ag=y.rawrigidbodyset_rbSetTranslation,Xg=y.rawrigidbodyset_rbSetRotation,Ig=y.rawrigidbodyset_rbSetLinvel,Dg=y.rawrigidbodyset_rbSetAngvel,Wg=y.rawrigidbodyset_rbSetNextKinematicTranslation,jg=y.rawrigidbodyset_rbSetNextKinematicRotation,Vg=y.rawrigidbodyset_rbRecomputeMassPropertiesFromColliders,Cg=y.rawrigidbodyset_rbSetAdditionalMass,Fg=y.rawrigidbodyset_rbSetAdditionalMassProperties,qg=y.rawrigidbodyset_rbLinvel,Yg=y.rawrigidbodyset_rbAngvel,Gg=y.rawrigidbodyset_rbVelocityAtPoint,Ug=y.rawrigidbodyset_rbLockTranslations,Zg=y.rawrigidbodyset_rbSetEnabledTranslations,kg=y.rawrigidbodyset_rbLockRotations,Jg=y.rawrigidbodyset_rbSetEnabledRotations,Bg=y.rawrigidbodyset_rbDominanceGroup,Kg=y.rawrigidbodyset_rbSetDominanceGroup,Qg=y.rawrigidbodyset_rbEnableCcd,_g=y.rawrigidbodyset_rbSetSoftCcdPrediction,$g=y.rawrigidbodyset_rbMass,ex=y.rawrigidbodyset_rbInvMass,tx=y.rawrigidbodyset_rbEffectiveInvMass,nx=y.rawrigidbodyset_rbLocalCom,ix=y.rawrigidbodyset_rbWorldCom,sx=y.rawrigidbodyset_rbInvPrincipalInertiaSqrt,rx=y.rawrigidbodyset_rbPrincipalInertiaLocalFrame,ox=y.rawrigidbodyset_rbPrincipalInertia,ax=y.rawrigidbodyset_rbEffectiveWorldInvInertiaSqrt,lx=y.rawrigidbodyset_rbEffectiveAngularInertia,dx=y.rawrigidbodyset_rbWakeUp,cx=y.rawrigidbodyset_rbIsCcdEnabled,ux=y.rawrigidbodyset_rbSoftCcdPrediction,px=y.rawrigidbodyset_rbNumColliders,fx=y.rawrigidbodyset_rbCollider,hx=y.rawrigidbodyset_rbBodyType,mx=y.rawrigidbodyset_rbSetBodyType,bx=y.rawrigidbodyset_rbIsFixed,vx=y.rawrigidbodyset_rbIsKinematic,yx=y.rawrigidbodyset_rbIsDynamic,wx=y.rawrigidbodyset_rbLinearDamping,gx=y.rawrigidbodyset_rbAngularDamping,xx=y.rawrigidbodyset_rbSetLinearDamping,Tx=y.rawrigidbodyset_rbSetAngularDamping,Sx=y.rawrigidbodyset_rbSetEnabled,Px=y.rawrigidbodyset_rbIsEnabled,Rx=y.rawrigidbodyset_rbGravityScale,Lx=y.rawrigidbodyset_rbSetGravityScale,Nx=y.rawrigidbodyset_rbResetForces,Mx=y.rawrigidbodyset_rbResetTorques,Ox=y.rawrigidbodyset_rbAddForce,zx=y.rawrigidbodyset_rbApplyImpulse,Hx=y.rawrigidbodyset_rbAddTorque,Ex=y.rawrigidbodyset_rbApplyTorqueImpulse,Ax=y.rawrigidbodyset_rbAddForceAtPoint,Xx=y.rawrigidbodyset_rbApplyImpulseAtPoint,Ix=y.rawrigidbodyset_rbAdditionalSolverIterations,Dx=y.rawrigidbodyset_rbSetAdditionalSolverIterations,Wx=y.rawrigidbodyset_rbUserData,jx=y.rawrigidbodyset_rbSetUserData,Vx=y.rawrigidbodyset_rbUserForce,Cx=y.rawrigidbodyset_rbUserTorque,Fx=y.__wbg_rawrigidbodyset_free,qx=y.rawrigidbodyset_new,Yx=y.rawrigidbodyset_createRigidBody,Gx=y.rawrigidbodyset_remove,Ux=y.rawrigidbodyset_contains,Zx=y.rawrigidbodyset_forEachRigidBodyHandle,kx=y.rawrigidbodyset_propagateModifiedBodyPositionsToColliders,Jx=y.__wbg_rawbroadphase_free,Bx=y.rawbroadphase_new,Kx=y.rawcolliderset_coTranslation,Qx=y.rawcolliderset_coRotation,_x=y.rawcolliderset_coSetTranslation,$x=y.rawcolliderset_coSetTranslationWrtParent,eT=y.rawcolliderset_coSetRotation,tT=y.rawcolliderset_coSetRotationWrtParent,nT=y.rawcolliderset_coIsSensor,iT=y.rawcolliderset_coShapeType,sT=y.rawcolliderset_coHalfspaceNormal,rT=y.rawcolliderset_coHalfExtents,oT=y.rawcolliderset_coSetHalfExtents,aT=y.rawcolliderset_coRadius,lT=y.rawcolliderset_coSetRadius,dT=y.rawcolliderset_coHalfHeight,cT=y.rawcolliderset_coSetHalfHeight,uT=y.rawcolliderset_coRoundRadius,pT=y.rawcolliderset_coSetRoundRadius,fT=y.rawcolliderset_coVoxelData,hT=y.rawcolliderset_coVoxelSize,mT=y.rawcolliderset_coSetVoxel,bT=y.rawcolliderset_coPropagateVoxelChange,vT=y.rawcolliderset_coCombineVoxelStates,yT=y.rawcolliderset_coVertices,wT=y.rawcolliderset_coIndices,gT=y.rawcolliderset_coTriMeshFlags,xT=y.rawcolliderset_coHeightFieldFlags,TT=y.rawcolliderset_coHeightfieldHeights,ST=y.rawcolliderset_coHeightfieldScale,PT=y.rawcolliderset_coHeightfieldNRows,RT=y.rawcolliderset_coHeightfieldNCols,LT=y.rawcolliderset_coParent,NT=y.rawcolliderset_coSetEnabled,MT=y.rawcolliderset_coIsEnabled,OT=y.rawcolliderset_coSetContactSkin,zT=y.rawcolliderset_coContactSkin,HT=y.rawcolliderset_coFriction,ET=y.rawcolliderset_coRestitution,AT=y.rawcolliderset_coDensity,XT=y.rawcolliderset_coMass,IT=y.rawcolliderset_coVolume,DT=y.rawcolliderset_coCollisionGroups,WT=y.rawcolliderset_coSolverGroups,jT=y.rawcolliderset_coActiveHooks,VT=y.rawcolliderset_coActiveCollisionTypes,CT=y.rawcolliderset_coActiveEvents,FT=y.rawcolliderset_coContactForceEventThreshold,qT=y.rawcolliderset_coContainsPoint,YT=y.rawcolliderset_coCastShape,GT=y.rawcolliderset_coCastCollider,UT=y.rawcolliderset_coIntersectsShape,ZT=y.rawcolliderset_coContactShape,kT=y.rawcolliderset_coContactCollider,JT=y.rawcolliderset_coProjectPoint,BT=y.rawcolliderset_coIntersectsRay,KT=y.rawcolliderset_coCastRay,QT=y.rawcolliderset_coCastRayAndGetNormal,_T=y.rawcolliderset_coSetSensor,$T=y.rawcolliderset_coSetRestitution,eS=y.rawcolliderset_coSetFriction,tS=y.rawcolliderset_coFrictionCombineRule,nS=y.rawcolliderset_coSetFrictionCombineRule,iS=y.rawcolliderset_coRestitutionCombineRule,sS=y.rawcolliderset_coSetRestitutionCombineRule,rS=y.rawcolliderset_coSetCollisionGroups,oS=y.rawcolliderset_coSetSolverGroups,aS=y.rawcolliderset_coSetActiveHooks,lS=y.rawcolliderset_coSetActiveEvents,dS=y.rawcolliderset_coSetActiveCollisionTypes,cS=y.rawcolliderset_coSetShape,uS=y.rawcolliderset_coSetContactForceEventThreshold,pS=y.rawcolliderset_coSetDensity,fS=y.rawcolliderset_coSetMass,hS=y.rawcolliderset_coSetMassProperties,mS=y.__wbg_rawcolliderset_free,bS=y.rawcolliderset_new,vS=y.rawcolliderset_len,yS=y.rawcolliderset_contains,wS=y.rawcolliderset_createCollider,gS=y.rawcolliderset_remove,xS=y.rawcolliderset_forEachColliderHandle,TS=y.__wbg_rawshapecontact_free,SS=y.__wbg_rawnarrowphase_free,PS=y.rawnarrowphase_new,RS=y.rawnarrowphase_contact_pairs_with,LS=y.rawnarrowphase_contact_pair,NS=y.rawnarrowphase_intersection_pairs_with,MS=y.rawnarrowphase_intersection_pair,OS=y.__wbg_rawcontactmanifold_free,zS=y.rawcontactpair_collider1,HS=y.rawcontactpair_collider2,ES=y.rawcontactpair_numContactManifolds,AS=y.rawcontactpair_contactManifold,XS=y.rawcontactmanifold_normal,IS=y.rawcontactmanifold_local_n1,DS=y.rawcontactmanifold_local_n2,WS=y.rawcontactmanifold_subshape1,jS=y.rawcontactmanifold_subshape2,VS=y.rawcontactmanifold_num_contacts,CS=y.rawcontactmanifold_contact_local_p1,FS=y.rawcontactmanifold_contact_local_p2,qS=y.rawcontactmanifold_contact_dist,YS=y.rawcontactmanifold_contact_fid1,GS=y.rawcontactmanifold_contact_fid2,US=y.rawcontactmanifold_contact_impulse,ZS=y.rawcontactmanifold_contact_tangent_impulse_x,kS=y.rawcontactmanifold_contact_tangent_impulse_y,JS=y.rawcontactmanifold_num_solver_contacts,BS=y.rawcontactmanifold_solver_contact_point,KS=y.rawcontactmanifold_solver_contact_dist,QS=y.rawcontactmanifold_solver_contact_friction,_S=y.rawcontactmanifold_solver_contact_restitution,$S=y.rawcontactmanifold_solver_contact_tangent_velocity,eP=y.__wbg_rawpointprojection_free,tP=y.rawpointprojection_point,nP=y.rawpointprojection_isInside,iP=y.__wbg_rawpointcolliderprojection_free,sP=y.rawpointcolliderprojection_colliderHandle,rP=y.rawpointcolliderprojection_point,oP=y.rawpointcolliderprojection_isInside,aP=y.rawpointcolliderprojection_featureType,lP=y.rawpointcolliderprojection_featureId,dP=y.__wbg_rawrayintersection_free,cP=y.__wbg_rawraycolliderhit_free,uP=y.__wbg_rawshape_free,pP=y.rawshape_cuboid,fP=y.rawshape_roundCuboid,hP=y.rawshape_ball,mP=y.rawshape_halfspace,bP=y.rawshape_capsule,vP=y.rawshape_cylinder,yP=y.rawshape_roundCylinder,wP=y.rawshape_cone,gP=y.rawshape_roundCone,xP=y.rawshape_voxels,TP=y.rawshape_voxelsFromPoints,SP=y.rawshape_polyline,PP=y.rawshape_trimesh,RP=y.rawshape_heightfield,LP=y.rawshape_segment,NP=y.rawshape_triangle,MP=y.rawshape_roundTriangle,OP=y.rawshape_convexHull,zP=y.rawshape_roundConvexHull,HP=y.rawshape_convexMesh,EP=y.rawshape_roundConvexMesh,AP=y.rawshape_castShape,XP=y.rawshape_intersectsShape,IP=y.rawshape_contactShape,DP=y.rawshape_containsPoint,WP=y.rawshape_projectPoint,jP=y.rawshape_intersectsRay,VP=y.rawshape_castRay,CP=y.rawshape_castRayAndGetNormal,FP=y.__wbg_rawshapecasthit_free,qP=y.rawshapecasthit_witness1,YP=y.rawshapecasthit_normal1,GP=y.rawshapecasthit_normal2,UP=y.__wbg_rawcollidershapecasthit_free,ZP=y.rawcollidershapecasthit_time_of_impact,kP=y.rawcollidershapecasthit_witness1,JP=y.rawcollidershapecasthit_witness2,BP=y.rawrotation_new,KP=y.rawrotation_identity,QP=y.rawrotation_x,_P=y.rawrotation_w,$P=y.rawvector_zero,eR=y.rawvector_new,tR=y.rawvector_set_x,nR=y.rawvector_set_z,iR=y.rawvector_xyz,sR=y.rawvector_yxz,rR=y.rawvector_zxy,oR=y.rawvector_xzy,aR=y.rawvector_yzx,lR=y.rawvector_zyx,dR=y.rawsdpmatrix3_elements,cR=y.__wbg_rawdebugrenderpipeline_free,uR=y.rawdebugrenderpipeline_new,pR=y.rawdebugrenderpipeline_vertices,fR=y.rawdebugrenderpipeline_colors,hR=y.rawdebugrenderpipeline_render,mR=y.__wbg_raweventqueue_free,bR=y.__wbg_rawcontactforceevent_free,vR=y.rawcontactforceevent_collider2,yR=y.rawcontactforceevent_total_force,wR=y.rawcontactforceevent_total_force_magnitude,gR=y.rawcontactforceevent_max_force_direction,xR=y.rawcontactforceevent_max_force_magnitude,TR=y.raweventqueue_new,SR=y.raweventqueue_drainCollisionEvents,PR=y.raweventqueue_drainContactForceEvents,RR=y.raweventqueue_clear,LR=y.__wbg_rawphysicspipeline_free,NR=y.rawphysicspipeline_new,MR=y.rawphysicspipeline_step,OR=y.rawphysicspipeline_stepWithEvents,zR=y.rawquerypipeline_new,HR=y.rawquerypipeline_update,ER=y.rawquerypipeline_castRay,AR=y.rawquerypipeline_castRayAndGetNormal,XR=y.rawquerypipeline_intersectionsWithRay,IR=y.rawquerypipeline_intersectionWithShape,DR=y.rawquerypipeline_projectPoint,WR=y.rawquerypipeline_projectPointAndGetFeature,jR=y.rawquerypipeline_intersectionsWithPoint,VR=y.rawquerypipeline_castShape,CR=y.rawquerypipeline_intersectionsWithShape,FR=y.rawquerypipeline_collidersWithAabbIntersectingAabb,qR=y.__wbg_rawdeserializedworld_free,YR=y.rawdeserializedworld_takeGravity,GR=y.rawdeserializedworld_takeIntegrationParameters,UR=y.rawdeserializedworld_takeIslandManager,ZR=y.rawdeserializedworld_takeBroadPhase,kR=y.rawdeserializedworld_takeNarrowPhase,JR=y.rawdeserializedworld_takeBodies,BR=y.rawdeserializedworld_takeColliders,KR=y.rawdeserializedworld_takeImpulseJoints,QR=y.rawdeserializedworld_takeMultibodyJoints,_R=y.__wbg_rawserializationpipeline_free,$R=y.rawserializationpipeline_new,eL=y.rawserializationpipeline_serializeAll,tL=y.rawserializationpipeline_deserializeAll,nL=y.rawcolliderset_isHandleValid,iL=y.rawkinematiccharactercontroller_offset,sL=y.rawintegrationparameters_normalizedAllowedLinearError,rL=y.rawintegrationparameters_numAdditionalFrictionIterations,oL=y.rawintegrationparameters_numInternalPgsIterations,aL=y.rawrigidbodyset_len,lL=y.rawshapecontact_distance,dL=y.rawrayintersection_featureType,cL=y.rawraycolliderintersection_colliderHandle,uL=y.rawrayintersection_time_of_impact,pL=y.rawraycolliderintersection_featureType,fL=y.rawraycolliderhit_colliderHandle,hL=y.rawraycolliderintersection_time_of_impact,mL=y.rawcollidershapecasthit_colliderHandle,bL=y.rawraycolliderhit_timeOfImpact,vL=y.rawshapecasthit_time_of_impact,yL=y.rawrotation_y,wL=y.rawrotation_z,gL=y.rawvector_x,xL=y.rawvector_y,TL=y.rawvector_z,SL=y.rawcontactforceevent_collider1,PL=y.rawintegrationparameters_normalizedPredictionDistance,RL=y.reserve_memory,LL=y.__wbg_rawquerypipeline_free,NL=y.rawrayintersection_featureId,ML=y.rawraycolliderintersection_featureId,OL=y.rawkinematiccharactercontroller_up,zL=y.rawshapecontact_normal2,HL=y.rawshapecontact_point1,EL=y.rawshapecontact_point2,AL=y.rawrayintersection_normal,XL=y.rawraycolliderintersection_normal,IL=y.rawshapecontact_normal1,DL=y.rawcollidershapecasthit_normal1,WL=y.rawcollidershapecasthit_normal2,jL=y.rawshapecasthit_witness2,VL=y.rawintegrationparameters_set_numAdditionalFrictionIterations,CL=y.rawintegrationparameters_set_numInternalPgsIterations,FL=y.rawvector_set_y,qL=y.__wbg_rawcontactpair_free,YL=y.__wbg_rawrotation_free,GL=y.__wbg_rawsdpmatrix3_free,UL=y.__wbg_rawvector_free,ZL=y.__wbg_rawraycolliderintersection_free,kL=y.__wbindgen_export_0,JL=y.__wbindgen_add_to_stack_pointer,BL=y.__wbindgen_export_1,KL=y.__wbindgen_export_2,QL=Object.freeze(Object.defineProperty({__proto__:null,__wbg_rawbroadphase_free:Jx,__wbg_rawccdsolver_free:sw,__wbg_rawcharactercollision_free:Cv,__wbg_rawcolliderset_free:mS,__wbg_rawcollidershapecasthit_free:UP,__wbg_rawcontactforceevent_free:bR,__wbg_rawcontactmanifold_free:OS,__wbg_rawcontactpair_free:qL,__wbg_rawdebugrenderpipeline_free:cR,__wbg_rawdeserializedworld_free:qR,__wbg_rawdynamicraycastvehiclecontroller_free:ay,__wbg_raweventqueue_free:mR,__wbg_rawgenericjoint_free:tg,__wbg_rawimpulsejointset_free:Rw,__wbg_rawintegrationparameters_free:Aw,__wbg_rawislandmanager_free:_w,__wbg_rawkinematiccharactercontroller_free:fv,__wbg_rawmultibodyjointset_free:wg,__wbg_rawnarrowphase_free:SS,__wbg_rawphysicspipeline_free:LR,__wbg_rawpidcontroller_free:Kv,__wbg_rawpointcolliderprojection_free:iP,__wbg_rawpointprojection_free:eP,__wbg_rawquerypipeline_free:LL,__wbg_rawraycolliderhit_free:cP,__wbg_rawraycolliderintersection_free:ZL,__wbg_rawrayintersection_free:dP,__wbg_rawrigidbodyset_free:Fx,__wbg_rawrotation_free:YL,__wbg_rawsdpmatrix3_free:GL,__wbg_rawserializationpipeline_free:_R,__wbg_rawshape_free:uP,__wbg_rawshapecasthit_free:FP,__wbg_rawshapecontact_free:TS,__wbg_rawvector_free:UL,__wbindgen_add_to_stack_pointer:JL,__wbindgen_export_0:kL,__wbindgen_export_1:BL,__wbindgen_export_2:KL,memory:uv,rawbroadphase_new:Bx,rawccdsolver_new:rw,rawcharactercollision_handle:qv,rawcharactercollision_new:Fv,rawcharactercollision_toi:Uv,rawcharactercollision_translationDeltaApplied:Yv,rawcharactercollision_translationDeltaRemaining:Gv,rawcharactercollision_worldNormal1:Jv,rawcharactercollision_worldNormal2:Bv,rawcharactercollision_worldWitness1:Zv,rawcharactercollision_worldWitness2:kv,rawcolliderset_coActiveCollisionTypes:VT,rawcolliderset_coActiveEvents:CT,rawcolliderset_coActiveHooks:jT,rawcolliderset_coCastCollider:GT,rawcolliderset_coCastRay:KT,rawcolliderset_coCastRayAndGetNormal:QT,rawcolliderset_coCastShape:YT,rawcolliderset_coCollisionGroups:DT,rawcolliderset_coCombineVoxelStates:vT,rawcolliderset_coContactCollider:kT,rawcolliderset_coContactForceEventThreshold:FT,rawcolliderset_coContactShape:ZT,rawcolliderset_coContactSkin:zT,rawcolliderset_coContainsPoint:qT,rawcolliderset_coDensity:AT,rawcolliderset_coFriction:HT,rawcolliderset_coFrictionCombineRule:tS,rawcolliderset_coHalfExtents:rT,rawcolliderset_coHalfHeight:dT,rawcolliderset_coHalfspaceNormal:sT,rawcolliderset_coHeightFieldFlags:xT,rawcolliderset_coHeightfieldHeights:TT,rawcolliderset_coHeightfieldNCols:RT,rawcolliderset_coHeightfieldNRows:PT,rawcolliderset_coHeightfieldScale:ST,rawcolliderset_coIndices:wT,rawcolliderset_coIntersectsRay:BT,rawcolliderset_coIntersectsShape:UT,rawcolliderset_coIsEnabled:MT,rawcolliderset_coIsSensor:nT,rawcolliderset_coMass:XT,rawcolliderset_coParent:LT,rawcolliderset_coProjectPoint:JT,rawcolliderset_coPropagateVoxelChange:bT,rawcolliderset_coRadius:aT,rawcolliderset_coRestitution:ET,rawcolliderset_coRestitutionCombineRule:iS,rawcolliderset_coRotation:Qx,rawcolliderset_coRoundRadius:uT,rawcolliderset_coSetActiveCollisionTypes:dS,rawcolliderset_coSetActiveEvents:lS,rawcolliderset_coSetActiveHooks:aS,rawcolliderset_coSetCollisionGroups:rS,rawcolliderset_coSetContactForceEventThreshold:uS,rawcolliderset_coSetContactSkin:OT,rawcolliderset_coSetDensity:pS,rawcolliderset_coSetEnabled:NT,rawcolliderset_coSetFriction:eS,rawcolliderset_coSetFrictionCombineRule:nS,rawcolliderset_coSetHalfExtents:oT,rawcolliderset_coSetHalfHeight:cT,rawcolliderset_coSetMass:fS,rawcolliderset_coSetMassProperties:hS,rawcolliderset_coSetRadius:lT,rawcolliderset_coSetRestitution:$T,rawcolliderset_coSetRestitutionCombineRule:sS,rawcolliderset_coSetRotation:eT,rawcolliderset_coSetRotationWrtParent:tT,rawcolliderset_coSetRoundRadius:pT,rawcolliderset_coSetSensor:_T,rawcolliderset_coSetShape:cS,rawcolliderset_coSetSolverGroups:oS,rawcolliderset_coSetTranslation:_x,rawcolliderset_coSetTranslationWrtParent:$x,rawcolliderset_coSetVoxel:mT,rawcolliderset_coShapeType:iT,rawcolliderset_coSolverGroups:WT,rawcolliderset_coTranslation:Kx,rawcolliderset_coTriMeshFlags:gT,rawcolliderset_coVertices:yT,rawcolliderset_coVolume:IT,rawcolliderset_coVoxelData:fT,rawcolliderset_coVoxelSize:hT,rawcolliderset_contains:yS,rawcolliderset_createCollider:wS,rawcolliderset_forEachColliderHandle:xS,rawcolliderset_isHandleValid:nL,rawcolliderset_len:vS,rawcolliderset_new:bS,rawcolliderset_remove:gS,rawcollidershapecasthit_colliderHandle:mL,rawcollidershapecasthit_normal1:DL,rawcollidershapecasthit_normal2:WL,rawcollidershapecasthit_time_of_impact:ZP,rawcollidershapecasthit_witness1:kP,rawcollidershapecasthit_witness2:JP,rawcontactforceevent_collider1:SL,rawcontactforceevent_collider2:vR,rawcontactforceevent_max_force_direction:gR,rawcontactforceevent_max_force_magnitude:xR,rawcontactforceevent_total_force:yR,rawcontactforceevent_total_force_magnitude:wR,rawcontactmanifold_contact_dist:qS,rawcontactmanifold_contact_fid1:YS,rawcontactmanifold_contact_fid2:GS,rawcontactmanifold_contact_impulse:US,rawcontactmanifold_contact_local_p1:CS,rawcontactmanifold_contact_local_p2:FS,rawcontactmanifold_contact_tangent_impulse_x:ZS,rawcontactmanifold_contact_tangent_impulse_y:kS,rawcontactmanifold_local_n1:IS,rawcontactmanifold_local_n2:DS,rawcontactmanifold_normal:XS,rawcontactmanifold_num_contacts:VS,rawcontactmanifold_num_solver_contacts:JS,rawcontactmanifold_solver_contact_dist:KS,rawcontactmanifold_solver_contact_friction:QS,rawcontactmanifold_solver_contact_point:BS,rawcontactmanifold_solver_contact_restitution:_S,rawcontactmanifold_solver_contact_tangent_velocity:$S,rawcontactmanifold_subshape1:WS,rawcontactmanifold_subshape2:jS,rawcontactpair_collider1:zS,rawcontactpair_collider2:HS,rawcontactpair_contactManifold:AS,rawcontactpair_numContactManifolds:ES,rawdebugrenderpipeline_colors:fR,rawdebugrenderpipeline_new:uR,rawdebugrenderpipeline_render:hR,rawdebugrenderpipeline_vertices:pR,rawdeserializedworld_takeBodies:JR,rawdeserializedworld_takeBroadPhase:ZR,rawdeserializedworld_takeColliders:BR,rawdeserializedworld_takeGravity:YR,rawdeserializedworld_takeImpulseJoints:KR,rawdeserializedworld_takeIntegrationParameters:GR,rawdeserializedworld_takeIslandManager:UR,rawdeserializedworld_takeMultibodyJoints:QR,rawdeserializedworld_takeNarrowPhase:kR,rawdynamicraycastvehiclecontroller_add_wheel:my,rawdynamicraycastvehiclecontroller_chassis:cy,rawdynamicraycastvehiclecontroller_current_vehicle_speed:dy,rawdynamicraycastvehiclecontroller_index_forward_axis:fy,rawdynamicraycastvehiclecontroller_index_up_axis:uy,rawdynamicraycastvehiclecontroller_new:ly,rawdynamicraycastvehiclecontroller_num_wheels:by,rawdynamicraycastvehiclecontroller_set_index_forward_axis:hy,rawdynamicraycastvehiclecontroller_set_index_up_axis:py,rawdynamicraycastvehiclecontroller_set_wheel_axle_cs:Yy,rawdynamicraycastvehiclecontroller_set_wheel_brake:Iy,rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs:wy,rawdynamicraycastvehiclecontroller_set_wheel_direction_cs:Fy,rawdynamicraycastvehiclecontroller_set_wheel_engine_force:Vy,rawdynamicraycastvehiclecontroller_set_wheel_friction_slip:Uy,rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force:Ay,rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel:Sy,rawdynamicraycastvehiclecontroller_set_wheel_radius:Ry,rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness:ky,rawdynamicraycastvehiclecontroller_set_wheel_steering:Wy,rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression:Oy,rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation:Hy,rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length:xy,rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness:Ny,rawdynamicraycastvehiclecontroller_update_vehicle:vy,rawdynamicraycastvehiclecontroller_wheel_axle_cs:qy,rawdynamicraycastvehiclecontroller_wheel_brake:Xy,rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs:yy,rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws:_y,rawdynamicraycastvehiclecontroller_wheel_contact_point_ws:$y,rawdynamicraycastvehiclecontroller_wheel_direction_cs:Cy,rawdynamicraycastvehiclecontroller_wheel_engine_force:jy,rawdynamicraycastvehiclecontroller_wheel_forward_impulse:By,rawdynamicraycastvehiclecontroller_wheel_friction_slip:Gy,rawdynamicraycastvehiclecontroller_wheel_ground_object:iw,rawdynamicraycastvehiclecontroller_wheel_hard_point_ws:tw,rawdynamicraycastvehiclecontroller_wheel_is_in_contact:nw,rawdynamicraycastvehiclecontroller_wheel_max_suspension_force:Ey,rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel:Ty,rawdynamicraycastvehiclecontroller_wheel_radius:Py,rawdynamicraycastvehiclecontroller_wheel_rotation:Jy,rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness:Zy,rawdynamicraycastvehiclecontroller_wheel_side_impulse:Ky,rawdynamicraycastvehiclecontroller_wheel_steering:Dy,rawdynamicraycastvehiclecontroller_wheel_suspension_compression:My,rawdynamicraycastvehiclecontroller_wheel_suspension_force:Qy,rawdynamicraycastvehiclecontroller_wheel_suspension_length:ew,rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation:zy,rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length:gy,rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness:Ly,raweventqueue_clear:RR,raweventqueue_drainCollisionEvents:SR,raweventqueue_drainContactForceEvents:PR,raweventqueue_new:TR,rawgenericjoint_fixed:ag,rawgenericjoint_generic:ng,rawgenericjoint_prismatic:og,rawgenericjoint_revolute:lg,rawgenericjoint_rope:sg,rawgenericjoint_spherical:rg,rawgenericjoint_spring:ig,rawimpulsejointset_contains:zw,rawimpulsejointset_createJoint:Nw,rawimpulsejointset_forEachJointAttachedToRigidBody:Ew,rawimpulsejointset_forEachJointHandle:Hw,rawimpulsejointset_jointAnchor1:uw,rawimpulsejointset_jointAnchor2:pw,rawimpulsejointset_jointBodyHandle1:aw,rawimpulsejointset_jointBodyHandle2:lw,rawimpulsejointset_jointConfigureMotor:Pw,rawimpulsejointset_jointConfigureMotorModel:xw,rawimpulsejointset_jointConfigureMotorPosition:Sw,rawimpulsejointset_jointConfigureMotorVelocity:Tw,rawimpulsejointset_jointContactsEnabled:mw,rawimpulsejointset_jointFrameX1:dw,rawimpulsejointset_jointFrameX2:cw,rawimpulsejointset_jointLimitsEnabled:vw,rawimpulsejointset_jointLimitsMax:ww,rawimpulsejointset_jointLimitsMin:yw,rawimpulsejointset_jointSetAnchor1:fw,rawimpulsejointset_jointSetAnchor2:hw,rawimpulsejointset_jointSetContactsEnabled:bw,rawimpulsejointset_jointSetLimits:gw,rawimpulsejointset_jointType:ow,rawimpulsejointset_len:Ow,rawimpulsejointset_new:Lw,rawimpulsejointset_remove:Mw,rawintegrationparameters_contact_erp:Dw,rawintegrationparameters_dt:Iw,rawintegrationparameters_lengthUnit:Cw,rawintegrationparameters_maxCcdSubsteps:Vw,rawintegrationparameters_minIslandSize:jw,rawintegrationparameters_new:Xw,rawintegrationparameters_normalizedAllowedLinearError:sL,rawintegrationparameters_normalizedPredictionDistance:PL,rawintegrationparameters_numAdditionalFrictionIterations:rL,rawintegrationparameters_numInternalPgsIterations:oL,rawintegrationparameters_numSolverIterations:Ww,rawintegrationparameters_set_contact_natural_frequency:qw,rawintegrationparameters_set_dt:Fw,rawintegrationparameters_set_lengthUnit:Jw,rawintegrationparameters_set_maxCcdSubsteps:kw,rawintegrationparameters_set_minIslandSize:Zw,rawintegrationparameters_set_normalizedAllowedLinearError:Yw,rawintegrationparameters_set_normalizedPredictionDistance:Gw,rawintegrationparameters_set_numAdditionalFrictionIterations:VL,rawintegrationparameters_set_numInternalPgsIterations:CL,rawintegrationparameters_set_numSolverIterations:Uw,rawintegrationparameters_switchToSmallStepsPgsSolver:Kw,rawintegrationparameters_switchToSmallStepsPgsSolverWithoutWarmstart:Qw,rawintegrationparameters_switchToStandardPgsSolver:Bw,rawislandmanager_forEachActiveRigidBodyHandle:eg,rawislandmanager_new:$w,rawkinematiccharactercontroller_autostepEnabled:Pv,rawkinematiccharactercontroller_autostepIncludesDynamicBodies:Sv,rawkinematiccharactercontroller_autostepMaxHeight:xv,rawkinematiccharactercontroller_autostepMinWidth:Tv,rawkinematiccharactercontroller_computeColliderMovement:Iv,rawkinematiccharactercontroller_computedCollision:Vv,rawkinematiccharactercontroller_computedGrounded:Wv,rawkinematiccharactercontroller_computedMovement:Dv,rawkinematiccharactercontroller_disableAutostep:Lv,rawkinematiccharactercontroller_disableSnapToGround:Av,rawkinematiccharactercontroller_enableAutostep:Rv,rawkinematiccharactercontroller_enableSnapToGround:Ev,rawkinematiccharactercontroller_maxSlopeClimbAngle:Nv,rawkinematiccharactercontroller_minSlopeSlideAngle:Ov,rawkinematiccharactercontroller_new:hv,rawkinematiccharactercontroller_normalNudgeFactor:bv,rawkinematiccharactercontroller_numComputedCollisions:jv,rawkinematiccharactercontroller_offset:iL,rawkinematiccharactercontroller_setMaxSlopeClimbAngle:Mv,rawkinematiccharactercontroller_setMinSlopeSlideAngle:zv,rawkinematiccharactercontroller_setNormalNudgeFactor:vv,rawkinematiccharactercontroller_setOffset:yv,rawkinematiccharactercontroller_setSlideEnabled:gv,rawkinematiccharactercontroller_setUp:mv,rawkinematiccharactercontroller_slideEnabled:wv,rawkinematiccharactercontroller_snapToGroundDistance:Hv,rawkinematiccharactercontroller_snapToGroundEnabled:Xv,rawkinematiccharactercontroller_up:OL,rawmultibodyjointset_contains:Sg,rawmultibodyjointset_createJoint:xg,rawmultibodyjointset_forEachJointAttachedToRigidBody:Rg,rawmultibodyjointset_forEachJointHandle:Pg,rawmultibodyjointset_jointAnchor1:pg,rawmultibodyjointset_jointAnchor2:fg,rawmultibodyjointset_jointContactsEnabled:hg,rawmultibodyjointset_jointFrameX1:cg,rawmultibodyjointset_jointFrameX2:ug,rawmultibodyjointset_jointLimitsEnabled:bg,rawmultibodyjointset_jointLimitsMax:yg,rawmultibodyjointset_jointLimitsMin:vg,rawmultibodyjointset_jointSetContactsEnabled:mg,rawmultibodyjointset_jointType:dg,rawmultibodyjointset_new:gg,rawmultibodyjointset_remove:Tg,rawnarrowphase_contact_pair:LS,rawnarrowphase_contact_pairs_with:RS,rawnarrowphase_intersection_pair:MS,rawnarrowphase_intersection_pairs_with:NS,rawnarrowphase_new:PS,rawphysicspipeline_new:NR,rawphysicspipeline_step:MR,rawphysicspipeline_stepWithEvents:OR,rawpidcontroller_angular_correction:oy,rawpidcontroller_apply_angular_correction:sy,rawpidcontroller_apply_linear_correction:iy,rawpidcontroller_linear_correction:ry,rawpidcontroller_new:Qv,rawpidcontroller_reset_integrals:ny,rawpidcontroller_set_axes_mask:ty,rawpidcontroller_set_kd:ey,rawpidcontroller_set_ki:$v,rawpidcontroller_set_kp:_v,rawpointcolliderprojection_colliderHandle:sP,rawpointcolliderprojection_featureId:lP,rawpointcolliderprojection_featureType:aP,rawpointcolliderprojection_isInside:oP,rawpointcolliderprojection_point:rP,rawpointprojection_isInside:nP,rawpointprojection_point:tP,rawquerypipeline_castRay:ER,rawquerypipeline_castRayAndGetNormal:AR,rawquerypipeline_castShape:VR,rawquerypipeline_collidersWithAabbIntersectingAabb:FR,rawquerypipeline_intersectionWithShape:IR,rawquerypipeline_intersectionsWithPoint:jR,rawquerypipeline_intersectionsWithRay:XR,rawquerypipeline_intersectionsWithShape:CR,rawquerypipeline_new:zR,rawquerypipeline_projectPoint:DR,rawquerypipeline_projectPointAndGetFeature:WR,rawquerypipeline_update:HR,rawraycolliderhit_colliderHandle:fL,rawraycolliderhit_timeOfImpact:bL,rawraycolliderintersection_colliderHandle:cL,rawraycolliderintersection_featureId:ML,rawraycolliderintersection_featureType:pL,rawraycolliderintersection_normal:XL,rawraycolliderintersection_time_of_impact:hL,rawrayintersection_featureId:NL,rawrayintersection_featureType:dL,rawrayintersection_normal:AL,rawrayintersection_time_of_impact:uL,rawrigidbodyset_contains:Ux,rawrigidbodyset_createRigidBody:Yx,rawrigidbodyset_forEachRigidBodyHandle:Zx,rawrigidbodyset_len:aL,rawrigidbodyset_new:qx,rawrigidbodyset_propagateModifiedBodyPositionsToColliders:kx,rawrigidbodyset_rbAddForce:Ox,rawrigidbodyset_rbAddForceAtPoint:Ax,rawrigidbodyset_rbAddTorque:Hx,rawrigidbodyset_rbAdditionalSolverIterations:Ix,rawrigidbodyset_rbAngularDamping:gx,rawrigidbodyset_rbAngvel:Yg,rawrigidbodyset_rbApplyImpulse:zx,rawrigidbodyset_rbApplyImpulseAtPoint:Xx,rawrigidbodyset_rbApplyTorqueImpulse:Ex,rawrigidbodyset_rbBodyType:hx,rawrigidbodyset_rbCollider:fx,rawrigidbodyset_rbDominanceGroup:Bg,rawrigidbodyset_rbEffectiveAngularInertia:lx,rawrigidbodyset_rbEffectiveInvMass:tx,rawrigidbodyset_rbEffectiveWorldInvInertiaSqrt:ax,rawrigidbodyset_rbEnableCcd:Qg,rawrigidbodyset_rbGravityScale:Rx,rawrigidbodyset_rbInvMass:ex,rawrigidbodyset_rbInvPrincipalInertiaSqrt:sx,rawrigidbodyset_rbIsCcdEnabled:cx,rawrigidbodyset_rbIsDynamic:yx,rawrigidbodyset_rbIsEnabled:Px,rawrigidbodyset_rbIsFixed:bx,rawrigidbodyset_rbIsKinematic:vx,rawrigidbodyset_rbIsMoving:zg,rawrigidbodyset_rbIsSleeping:Og,rawrigidbodyset_rbLinearDamping:wx,rawrigidbodyset_rbLinvel:qg,rawrigidbodyset_rbLocalCom:nx,rawrigidbodyset_rbLockRotations:kg,rawrigidbodyset_rbLockTranslations:Ug,rawrigidbodyset_rbMass:$g,rawrigidbodyset_rbNextRotation:Eg,rawrigidbodyset_rbNextTranslation:Hg,rawrigidbodyset_rbNumColliders:px,rawrigidbodyset_rbPrincipalInertia:ox,rawrigidbodyset_rbPrincipalInertiaLocalFrame:rx,rawrigidbodyset_rbRecomputeMassPropertiesFromColliders:Vg,rawrigidbodyset_rbResetForces:Nx,rawrigidbodyset_rbResetTorques:Mx,rawrigidbodyset_rbRotation:Ng,rawrigidbodyset_rbSetAdditionalMass:Cg,rawrigidbodyset_rbSetAdditionalMassProperties:Fg,rawrigidbodyset_rbSetAdditionalSolverIterations:Dx,rawrigidbodyset_rbSetAngularDamping:Tx,rawrigidbodyset_rbSetAngvel:Dg,rawrigidbodyset_rbSetBodyType:mx,rawrigidbodyset_rbSetDominanceGroup:Kg,rawrigidbodyset_rbSetEnabled:Sx,rawrigidbodyset_rbSetEnabledRotations:Jg,rawrigidbodyset_rbSetEnabledTranslations:Zg,rawrigidbodyset_rbSetGravityScale:Lx,rawrigidbodyset_rbSetLinearDamping:xx,rawrigidbodyset_rbSetLinvel:Ig,rawrigidbodyset_rbSetNextKinematicRotation:jg,rawrigidbodyset_rbSetNextKinematicTranslation:Wg,rawrigidbodyset_rbSetRotation:Xg,rawrigidbodyset_rbSetSoftCcdPrediction:_g,rawrigidbodyset_rbSetTranslation:Ag,rawrigidbodyset_rbSetUserData:jx,rawrigidbodyset_rbSleep:Mg,rawrigidbodyset_rbSoftCcdPrediction:ux,rawrigidbodyset_rbTranslation:Lg,rawrigidbodyset_rbUserData:Wx,rawrigidbodyset_rbUserForce:Vx,rawrigidbodyset_rbUserTorque:Cx,rawrigidbodyset_rbVelocityAtPoint:Gg,rawrigidbodyset_rbWakeUp:dx,rawrigidbodyset_rbWorldCom:ix,rawrigidbodyset_remove:Gx,rawrotation_identity:KP,rawrotation_new:BP,rawrotation_w:_P,rawrotation_x:QP,rawrotation_y:yL,rawrotation_z:wL,rawsdpmatrix3_elements:dR,rawserializationpipeline_deserializeAll:tL,rawserializationpipeline_new:$R,rawserializationpipeline_serializeAll:eL,rawshape_ball:hP,rawshape_capsule:bP,rawshape_castRay:VP,rawshape_castRayAndGetNormal:CP,rawshape_castShape:AP,rawshape_cone:wP,rawshape_contactShape:IP,rawshape_containsPoint:DP,rawshape_convexHull:OP,rawshape_convexMesh:HP,rawshape_cuboid:pP,rawshape_cylinder:vP,rawshape_halfspace:mP,rawshape_heightfield:RP,rawshape_intersectsRay:jP,rawshape_intersectsShape:XP,rawshape_polyline:SP,rawshape_projectPoint:WP,rawshape_roundCone:gP,rawshape_roundConvexHull:zP,rawshape_roundConvexMesh:EP,rawshape_roundCuboid:fP,rawshape_roundCylinder:yP,rawshape_roundTriangle:MP,rawshape_segment:LP,rawshape_triangle:NP,rawshape_trimesh:PP,rawshape_voxels:xP,rawshape_voxelsFromPoints:TP,rawshapecasthit_normal1:YP,rawshapecasthit_normal2:GP,rawshapecasthit_time_of_impact:vL,rawshapecasthit_witness1:qP,rawshapecasthit_witness2:jL,rawshapecontact_distance:lL,rawshapecontact_normal1:IL,rawshapecontact_normal2:zL,rawshapecontact_point1:HL,rawshapecontact_point2:EL,rawvector_new:eR,rawvector_set_x:tR,rawvector_set_y:FL,rawvector_set_z:nR,rawvector_x:gL,rawvector_xyz:iR,rawvector_xzy:oR,rawvector_y:xL,rawvector_yxz:sR,rawvector_yzx:aR,rawvector_z:TL,rawvector_zero:$P,rawvector_zxy:rR,rawvector_zyx:lR,reserve_memory:RL,version:pv},Symbol.toStringTag,{value:"Module"}));Mb(QL);class _L{constructor(e,t,n){this.x=e,this.y=t,this.z=n}}class Z{static new(e,t,n){return new _L(e,t,n)}static intoRaw(e){return new q(e.x,e.y,e.z)}static zeros(){return Z.new(0,0,0)}static fromRaw(e){if(!e)return null;let t=Z.new(e.x,e.y,e.z);return e.free(),t}static copy(e,t){e.x=t.x,e.y=t.y,e.z=t.z}}class bp{constructor(e,t,n,s){this.x=e,this.y=t,this.z=n,this.w=s}}class ot{static identity(){return new bp(0,0,0,1)}static fromRaw(e){if(!e)return null;let t=new bp(e.x,e.y,e.z,e.w);return e.free(),t}static intoRaw(e){return new ct(e.x,e.y,e.z,e.w)}static copy(e,t){e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w}}class $L{get m11(){return this.elements[0]}get m12(){return this.elements[1]}get m21(){return this.m12}get m13(){return this.elements[2]}get m31(){return this.m13}get m22(){return this.elements[3]}get m23(){return this.elements[4]}get m32(){return this.m23}get m33(){return this.elements[5]}constructor(e){this.elements=e}}class vp{static fromRaw(e){const t=new $L(e.elements());return e.free(),t}}var yi;(function(i){i[i.Dynamic=0]="Dynamic",i[i.Fixed=1]="Fixed",i[i.KinematicPositionBased=2]="KinematicPositionBased",i[i.KinematicVelocityBased=3]="KinematicVelocityBased"})(yi||(yi={}));class yp{constructor(e,t,n){this.rawSet=e,this.colliderSet=t,this.handle=n}finalizeDeserialization(e){this.colliderSet=e}isValid(){return this.rawSet.contains(this.handle)}lockTranslations(e,t){return this.rawSet.rbLockTranslations(this.handle,e,t)}lockRotations(e,t){return this.rawSet.rbLockRotations(this.handle,e,t)}setEnabledTranslations(e,t,n,s){return this.rawSet.rbSetEnabledTranslations(this.handle,e,t,n,s)}restrictTranslations(e,t,n,s){this.setEnabledTranslations(e,t,n,s)}setEnabledRotations(e,t,n,s){return this.rawSet.rbSetEnabledRotations(this.handle,e,t,n,s)}restrictRotations(e,t,n,s){this.setEnabledRotations(e,t,n,s)}dominanceGroup(){return this.rawSet.rbDominanceGroup(this.handle)}setDominanceGroup(e){this.rawSet.rbSetDominanceGroup(this.handle,e)}additionalSolverIterations(){return this.rawSet.rbAdditionalSolverIterations(this.handle)}setAdditionalSolverIterations(e){this.rawSet.rbSetAdditionalSolverIterations(this.handle,e)}enableCcd(e){this.rawSet.rbEnableCcd(this.handle,e)}setSoftCcdPrediction(e){this.rawSet.rbSetSoftCcdPrediction(this.handle,e)}softCcdPrediction(){return this.rawSet.rbSoftCcdPrediction(this.handle)}translation(){let e=this.rawSet.rbTranslation(this.handle);return Z.fromRaw(e)}rotation(){let e=this.rawSet.rbRotation(this.handle);return ot.fromRaw(e)}nextTranslation(){let e=this.rawSet.rbNextTranslation(this.handle);return Z.fromRaw(e)}nextRotation(){let e=this.rawSet.rbNextRotation(this.handle);return ot.fromRaw(e)}setTranslation(e,t){this.rawSet.rbSetTranslation(this.handle,e.x,e.y,e.z,t)}setLinvel(e,t){let n=Z.intoRaw(e);this.rawSet.rbSetLinvel(this.handle,n,t),n.free()}gravityScale(){return this.rawSet.rbGravityScale(this.handle)}setGravityScale(e,t){this.rawSet.rbSetGravityScale(this.handle,e,t)}setRotation(e,t){this.rawSet.rbSetRotation(this.handle,e.x,e.y,e.z,e.w,t)}setAngvel(e,t){let n=Z.intoRaw(e);this.rawSet.rbSetAngvel(this.handle,n,t),n.free()}setNextKinematicTranslation(e){this.rawSet.rbSetNextKinematicTranslation(this.handle,e.x,e.y,e.z)}setNextKinematicRotation(e){this.rawSet.rbSetNextKinematicRotation(this.handle,e.x,e.y,e.z,e.w)}linvel(){return Z.fromRaw(this.rawSet.rbLinvel(this.handle))}velocityAtPoint(e){const t=Z.intoRaw(e);let n=Z.fromRaw(this.rawSet.rbVelocityAtPoint(this.handle,t));return t.free(),n}angvel(){return Z.fromRaw(this.rawSet.rbAngvel(this.handle))}mass(){return this.rawSet.rbMass(this.handle)}effectiveInvMass(){return Z.fromRaw(this.rawSet.rbEffectiveInvMass(this.handle))}invMass(){return this.rawSet.rbInvMass(this.handle)}localCom(){return Z.fromRaw(this.rawSet.rbLocalCom(this.handle))}worldCom(){return Z.fromRaw(this.rawSet.rbWorldCom(this.handle))}invPrincipalInertiaSqrt(){return Z.fromRaw(this.rawSet.rbInvPrincipalInertiaSqrt(this.handle))}principalInertia(){return Z.fromRaw(this.rawSet.rbPrincipalInertia(this.handle))}principalInertiaLocalFrame(){return ot.fromRaw(this.rawSet.rbPrincipalInertiaLocalFrame(this.handle))}effectiveWorldInvInertiaSqrt(){return vp.fromRaw(this.rawSet.rbEffectiveWorldInvInertiaSqrt(this.handle))}effectiveAngularInertia(){return vp.fromRaw(this.rawSet.rbEffectiveAngularInertia(this.handle))}sleep(){this.rawSet.rbSleep(this.handle)}wakeUp(){this.rawSet.rbWakeUp(this.handle)}isCcdEnabled(){return this.rawSet.rbIsCcdEnabled(this.handle)}numColliders(){return this.rawSet.rbNumColliders(this.handle)}collider(e){return this.colliderSet.get(this.rawSet.rbCollider(this.handle,e))}setEnabled(e){this.rawSet.rbSetEnabled(this.handle,e)}isEnabled(){return this.rawSet.rbIsEnabled(this.handle)}bodyType(){return this.rawSet.rbBodyType(this.handle)}setBodyType(e,t){return this.rawSet.rbSetBodyType(this.handle,e,t)}isSleeping(){return this.rawSet.rbIsSleeping(this.handle)}isMoving(){return this.rawSet.rbIsMoving(this.handle)}isFixed(){return this.rawSet.rbIsFixed(this.handle)}isKinematic(){return this.rawSet.rbIsKinematic(this.handle)}isDynamic(){return this.rawSet.rbIsDynamic(this.handle)}linearDamping(){return this.rawSet.rbLinearDamping(this.handle)}angularDamping(){return this.rawSet.rbAngularDamping(this.handle)}setLinearDamping(e){this.rawSet.rbSetLinearDamping(this.handle,e)}recomputeMassPropertiesFromColliders(){this.rawSet.rbRecomputeMassPropertiesFromColliders(this.handle,this.colliderSet.raw)}setAdditionalMass(e,t){this.rawSet.rbSetAdditionalMass(this.handle,e,t)}setAdditionalMassProperties(e,t,n,s,r){let o=Z.intoRaw(t),a=Z.intoRaw(n),l=ot.intoRaw(s);this.rawSet.rbSetAdditionalMassProperties(this.handle,e,o,a,l,r),o.free(),a.free(),l.free()}setAngularDamping(e){this.rawSet.rbSetAngularDamping(this.handle,e)}resetForces(e){this.rawSet.rbResetForces(this.handle,e)}resetTorques(e){this.rawSet.rbResetTorques(this.handle,e)}addForce(e,t){const n=Z.intoRaw(e);this.rawSet.rbAddForce(this.handle,n,t),n.free()}applyImpulse(e,t){const n=Z.intoRaw(e);this.rawSet.rbApplyImpulse(this.handle,n,t),n.free()}addTorque(e,t){const n=Z.intoRaw(e);this.rawSet.rbAddTorque(this.handle,n,t),n.free()}applyTorqueImpulse(e,t){const n=Z.intoRaw(e);this.rawSet.rbApplyTorqueImpulse(this.handle,n,t),n.free()}addForceAtPoint(e,t,n){const s=Z.intoRaw(e),r=Z.intoRaw(t);this.rawSet.rbAddForceAtPoint(this.handle,s,r,n),s.free(),r.free()}applyImpulseAtPoint(e,t,n){const s=Z.intoRaw(e),r=Z.intoRaw(t);this.rawSet.rbApplyImpulseAtPoint(this.handle,s,r,n),s.free(),r.free()}userForce(){return Z.fromRaw(this.rawSet.rbUserForce(this.handle))}userTorque(){return Z.fromRaw(this.rawSet.rbUserTorque(this.handle))}}class $n{constructor(e){this.enabled=!0,this.status=e,this.translation=Z.zeros(),this.rotation=ot.identity(),this.gravityScale=1,this.linvel=Z.zeros(),this.mass=0,this.massOnly=!1,this.centerOfMass=Z.zeros(),this.translationsEnabledX=!0,this.translationsEnabledY=!0,this.angvel=Z.zeros(),this.principalAngularInertia=Z.zeros(),this.angularInertiaLocalFrame=ot.identity(),this.translationsEnabledZ=!0,this.rotationsEnabledX=!0,this.rotationsEnabledY=!0,this.rotationsEnabledZ=!0,this.linearDamping=0,this.angularDamping=0,this.canSleep=!0,this.sleeping=!1,this.ccdEnabled=!1,this.softCcdPrediction=0,this.dominanceGroup=0,this.additionalSolverIterations=0}static dynamic(){return new $n(yi.Dynamic)}static kinematicPositionBased(){return new $n(yi.KinematicPositionBased)}static kinematicVelocityBased(){return new $n(yi.KinematicVelocityBased)}static fixed(){return new $n(yi.Fixed)}static newDynamic(){return new $n(yi.Dynamic)}static newKinematicPositionBased(){return new $n(yi.KinematicPositionBased)}static newKinematicVelocityBased(){return new $n(yi.KinematicVelocityBased)}static newStatic(){return new $n(yi.Fixed)}setDominanceGroup(e){return this.dominanceGroup=e,this}setAdditionalSolverIterations(e){return this.additionalSolverIterations=e,this}setEnabled(e){return this.enabled=e,this}setTranslation(e,t,n){if(typeof e!="number"||typeof t!="number"||typeof n!="number")throw TypeError("The translation components must be numbers.");return this.translation={x:e,y:t,z:n},this}setRotation(e){return ot.copy(this.rotation,e),this}setGravityScale(e){return this.gravityScale=e,this}setAdditionalMass(e){return this.mass=e,this.massOnly=!0,this}setLinvel(e,t,n){if(typeof e!="number"||typeof t!="number"||typeof n!="number")throw TypeError("The linvel components must be numbers.");return this.linvel={x:e,y:t,z:n},this}setAngvel(e){return Z.copy(this.angvel,e),this}setAdditionalMassProperties(e,t,n,s){return this.mass=e,Z.copy(this.centerOfMass,t),Z.copy(this.principalAngularInertia,n),ot.copy(this.angularInertiaLocalFrame,s),this.massOnly=!1,this}enabledTranslations(e,t,n){return this.translationsEnabledX=e,this.translationsEnabledY=t,this.translationsEnabledZ=n,this}restrictTranslations(e,t,n){return this.enabledTranslations(e,t,n)}lockTranslations(){return this.enabledTranslations(!1,!1,!1)}enabledRotations(e,t,n){return this.rotationsEnabledX=e,this.rotationsEnabledY=t,this.rotationsEnabledZ=n,this}restrictRotations(e,t,n){return this.enabledRotations(e,t,n)}lockRotations(){return this.restrictRotations(!1,!1,!1)}setLinearDamping(e){return this.linearDamping=e,this}setAngularDamping(e){return this.angularDamping=e,this}setCanSleep(e){return this.canSleep=e,this}setSleeping(e){return this.sleeping=e,this}setCcdEnabled(e){return this.ccdEnabled=e,this}setSoftCcdPrediction(e){return this.softCcdPrediction=e,this}setUserData(e){return this.userData=e,this}}class H0{constructor(){this.fconv=new Float64Array(1),this.uconv=new Uint32Array(this.fconv.buffer),this.data=new Array,this.size=0}set(e,t){let n=this.index(e);for(;this.data.length<=n;)this.data.push(null);this.data[n]==null&&(this.size+=1),this.data[n]=t}len(){return this.size}delete(e){let t=this.index(e);t<this.data.length&&(this.data[t]!=null&&(this.size-=1),this.data[t]=null)}clear(){this.data=new Array}get(e){let t=this.index(e);return t<this.data.length?this.data[t]:null}forEach(e){for(const t of this.data)t!=null&&e(t)}getAll(){return this.data.filter(e=>e!=null)}index(e){return this.fconv[0]=e,this.uconv[0]}}class eN{free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}constructor(e){this.raw=e||new Yt,this.map=new H0,e&&e.forEachRigidBodyHandle(t=>{this.map.set(t,new yp(e,null,t))})}finalizeDeserialization(e){this.map.forEach(t=>t.finalizeDeserialization(e))}createRigidBody(e,t){let n=Z.intoRaw(t.translation),s=ot.intoRaw(t.rotation),r=Z.intoRaw(t.linvel),o=Z.intoRaw(t.centerOfMass),a=Z.intoRaw(t.angvel),l=Z.intoRaw(t.principalAngularInertia),d=ot.intoRaw(t.angularInertiaLocalFrame),c=this.raw.createRigidBody(t.enabled,n,s,t.gravityScale,t.mass,t.massOnly,o,r,a,l,d,t.translationsEnabledX,t.translationsEnabledY,t.translationsEnabledZ,t.rotationsEnabledX,t.rotationsEnabledY,t.rotationsEnabledZ,t.linearDamping,t.angularDamping,t.status,t.canSleep,t.sleeping,t.softCcdPrediction,t.ccdEnabled,t.dominanceGroup,t.additionalSolverIterations);n.free(),s.free(),r.free(),o.free(),a.free(),l.free(),d.free();const u=new yp(this.raw,e,c);return u.userData=t.userData,this.map.set(c,u),u}remove(e,t,n,s,r){for(let o=0;o<this.raw.rbNumColliders(e);o+=1)n.unmap(this.raw.rbCollider(e,o));s.forEachJointHandleAttachedToRigidBody(e,o=>s.unmap(o)),r.forEachJointHandleAttachedToRigidBody(e,o=>r.unmap(o)),this.raw.remove(e,t.raw,n.raw,s.raw,r.raw),this.map.delete(e)}len(){return this.map.len()}contains(e){return this.get(e)!=null}get(e){return this.map.get(e)}forEach(e){this.map.forEach(e)}forEachActiveRigidBody(e,t){e.forEachActiveRigidBodyHandle(n=>{t(this.get(n))})}getAll(){return this.map.getAll()}}class tN{constructor(e){this.raw=e||new Es}free(){this.raw&&this.raw.free(),this.raw=void 0}get dt(){return this.raw.dt}get contact_erp(){return this.raw.contact_erp}get lengthUnit(){return this.raw.lengthUnit}get normalizedAllowedLinearError(){return this.raw.normalizedAllowedLinearError}get normalizedPredictionDistance(){return this.raw.normalizedPredictionDistance}get numSolverIterations(){return this.raw.numSolverIterations}get numAdditionalFrictionIterations(){return this.raw.numAdditionalFrictionIterations}get numInternalPgsIterations(){return this.raw.numInternalPgsIterations}get minIslandSize(){return this.raw.minIslandSize}get maxCcdSubsteps(){return this.raw.maxCcdSubsteps}set dt(e){this.raw.dt=e}set contact_natural_frequency(e){this.raw.contact_natural_frequency=e}set lengthUnit(e){this.raw.lengthUnit=e}set normalizedAllowedLinearError(e){this.raw.normalizedAllowedLinearError=e}set normalizedPredictionDistance(e){this.raw.normalizedPredictionDistance=e}set numSolverIterations(e){this.raw.numSolverIterations=e}set numAdditionalFrictionIterations(e){this.raw.numAdditionalFrictionIterations=e}set numInternalPgsIterations(e){this.raw.numInternalPgsIterations=e}set minIslandSize(e){this.raw.minIslandSize=e}set maxCcdSubsteps(e){this.raw.maxCcdSubsteps=e}switchToStandardPgsSolver(){this.raw.switchToStandardPgsSolver()}switchToSmallStepsPgsSolver(){this.raw.switchToSmallStepsPgsSolver()}switchToSmallStepsPgsSolverWithoutWarmstart(){this.raw.switchToSmallStepsPgsSolverWithoutWarmstart()}}var Ln;(function(i){i[i.Revolute=0]="Revolute",i[i.Fixed=1]="Fixed",i[i.Prismatic=2]="Prismatic",i[i.Rope=3]="Rope",i[i.Spring=4]="Spring",i[i.Spherical=5]="Spherical",i[i.Generic=6]="Generic"})(Ln||(Ln={}));var wp;(function(i){i[i.AccelerationBased=0]="AccelerationBased",i[i.ForceBased=1]="ForceBased"})(wp||(wp={}));var gp;(function(i){i[i.LinX=1]="LinX",i[i.LinY=2]="LinY",i[i.LinZ=4]="LinZ",i[i.AngX=8]="AngX",i[i.AngY=16]="AngY",i[i.AngZ=32]="AngZ"})(gp||(gp={}));class Pi{constructor(e,t,n){this.rawSet=e,this.bodySet=t,this.handle=n}static newTyped(e,t,n){switch(e.jointType(n)){case di.Revolute:return new oN(e,t,n);case di.Prismatic:return new rN(e,t,n);case di.Fixed:return new nN(e,t,n);case di.Spring:return new sN(e,t,n);case di.Rope:return new iN(e,t,n);case di.Spherical:return new lN(e,t,n);case di.Generic:return new aN(e,t,n);default:return new Pi(e,t,n)}}finalizeDeserialization(e){this.bodySet=e}isValid(){return this.rawSet.contains(this.handle)}body1(){return this.bodySet.get(this.rawSet.jointBodyHandle1(this.handle))}body2(){return this.bodySet.get(this.rawSet.jointBodyHandle2(this.handle))}type(){return this.rawSet.jointType(this.handle)}frameX1(){return ot.fromRaw(this.rawSet.jointFrameX1(this.handle))}frameX2(){return ot.fromRaw(this.rawSet.jointFrameX2(this.handle))}anchor1(){return Z.fromRaw(this.rawSet.jointAnchor1(this.handle))}anchor2(){return Z.fromRaw(this.rawSet.jointAnchor2(this.handle))}setAnchor1(e){const t=Z.intoRaw(e);this.rawSet.jointSetAnchor1(this.handle,t),t.free()}setAnchor2(e){const t=Z.intoRaw(e);this.rawSet.jointSetAnchor2(this.handle,t),t.free()}setContactsEnabled(e){this.rawSet.jointSetContactsEnabled(this.handle,e)}contactsEnabled(){return this.rawSet.jointContactsEnabled(this.handle)}}class u3 extends Pi{limitsEnabled(){return this.rawSet.jointLimitsEnabled(this.handle,this.rawAxis())}limitsMin(){return this.rawSet.jointLimitsMin(this.handle,this.rawAxis())}limitsMax(){return this.rawSet.jointLimitsMax(this.handle,this.rawAxis())}setLimits(e,t){this.rawSet.jointSetLimits(this.handle,this.rawAxis(),e,t)}configureMotorModel(e){this.rawSet.jointConfigureMotorModel(this.handle,this.rawAxis(),e)}configureMotorVelocity(e,t){this.rawSet.jointConfigureMotorVelocity(this.handle,this.rawAxis(),e,t)}configureMotorPosition(e,t,n){this.rawSet.jointConfigureMotorPosition(this.handle,this.rawAxis(),e,t,n)}configureMotor(e,t,n,s){this.rawSet.jointConfigureMotor(this.handle,this.rawAxis(),e,t,n,s)}}class nN extends Pi{}class iN extends Pi{}class sN extends Pi{}class rN extends u3{rawAxis(){return R0.LinX}}class oN extends u3{rawAxis(){return R0.AngX}}class aN extends Pi{}class lN extends Pi{}class ci{constructor(){}static fixed(e,t,n,s){let r=new ci;return r.anchor1=e,r.anchor2=n,r.frame1=t,r.frame2=s,r.jointType=Ln.Fixed,r}static spring(e,t,n,s,r){let o=new ci;return o.anchor1=s,o.anchor2=r,o.length=e,o.stiffness=t,o.damping=n,o.jointType=Ln.Spring,o}static rope(e,t,n){let s=new ci;return s.anchor1=t,s.anchor2=n,s.length=e,s.jointType=Ln.Rope,s}static generic(e,t,n,s){let r=new ci;return r.anchor1=e,r.anchor2=t,r.axis=n,r.axesMask=s,r.jointType=Ln.Generic,r}static spherical(e,t){let n=new ci;return n.anchor1=e,n.anchor2=t,n.jointType=Ln.Spherical,n}static prismatic(e,t,n){let s=new ci;return s.anchor1=e,s.anchor2=t,s.axis=n,s.jointType=Ln.Prismatic,s}static revolute(e,t,n){let s=new ci;return s.anchor1=e,s.anchor2=t,s.axis=n,s.jointType=Ln.Revolute,s}intoRaw(){let e=Z.intoRaw(this.anchor1),t=Z.intoRaw(this.anchor2),n,s,r=!1,o=0,a=0;switch(this.jointType){case Ln.Fixed:let l=ot.intoRaw(this.frame1),d=ot.intoRaw(this.frame2);s=vn.fixed(e,l,t,d),l.free(),d.free();break;case Ln.Spring:s=vn.spring(this.length,this.stiffness,this.damping,e,t);break;case Ln.Rope:s=vn.rope(this.length,e,t);break;case Ln.Prismatic:n=Z.intoRaw(this.axis),this.limitsEnabled&&(r=!0,o=this.limits[0],a=this.limits[1]),s=vn.prismatic(e,t,n,r,o,a),n.free();break;case Ln.Generic:n=Z.intoRaw(this.axis);let c=this.axesMask;s=vn.generic(e,t,n,c);break;case Ln.Spherical:s=vn.spherical(e,t);break;case Ln.Revolute:n=Z.intoRaw(this.axis),s=vn.revolute(e,t,n),n.free();break}return e.free(),t.free(),s}}class dN{free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}constructor(e){this.raw=e||new Zi,this.map=new H0,e&&e.forEachJointHandle(t=>{this.map.set(t,Pi.newTyped(e,null,t))})}finalizeDeserialization(e){this.map.forEach(t=>t.finalizeDeserialization(e))}createJoint(e,t,n,s,r){const o=t.intoRaw(),a=this.raw.createJoint(o,n,s,r);o.free();let l=Pi.newTyped(this.raw,e,a);return this.map.set(a,l),l}remove(e,t){this.raw.remove(e,t),this.unmap(e)}forEachJointHandleAttachedToRigidBody(e,t){this.raw.forEachJointAttachedToRigidBody(e,t)}unmap(e){this.map.delete(e)}len(){return this.map.len()}contains(e){return this.get(e)!=null}get(e){return this.map.get(e)}forEach(e){this.map.forEach(e)}getAll(){return this.map.getAll()}}class As{constructor(e,t){this.rawSet=e,this.handle=t}static newTyped(e,t){switch(e.jointType(t)){case di.Revolute:return new pN(e,t);case di.Prismatic:return new uN(e,t);case di.Fixed:return new cN(e,t);case di.Spherical:return new fN(e,t);default:return new As(e,t)}}isValid(){return this.rawSet.contains(this.handle)}setContactsEnabled(e){this.rawSet.jointSetContactsEnabled(this.handle,e)}contactsEnabled(){return this.rawSet.jointContactsEnabled(this.handle)}}class p3 extends As{}class cN extends As{}class uN extends p3{rawAxis(){return R0.LinX}}class pN extends p3{rawAxis(){return R0.AngX}}class fN extends As{}class hN{free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}constructor(e){this.raw=e||new Ji,this.map=new H0,e&&e.forEachJointHandle(t=>{this.map.set(t,As.newTyped(this.raw,t))})}createJoint(e,t,n,s){const r=e.intoRaw(),o=this.raw.createJoint(r,t,n,s);r.free();let a=As.newTyped(this.raw,o);return this.map.set(o,a),a}remove(e,t){this.raw.remove(e,t),this.map.delete(e)}unmap(e){this.map.delete(e)}len(){return this.map.len()}contains(e){return this.get(e)!=null}get(e){return this.map.get(e)}forEach(e){this.map.forEach(e)}forEachJointHandleAttachedToRigidBody(e,t){this.raw.forEachJointAttachedToRigidBody(e,t)}getAll(){return this.map.getAll()}}var Ka;(function(i){i[i.Average=0]="Average",i[i.Min=1]="Min",i[i.Multiply=2]="Multiply",i[i.Max=3]="Max"})(Ka||(Ka={}));class mN{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new tc}}class bN{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new ki}forEachActiveRigidBodyHandle(e){this.raw.forEachActiveRigidBodyHandle(e)}}class vN{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new Hs}}class yN{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new hs,this.tempManifold=new wN(null)}contactPairsWith(e,t){this.raw.contact_pairs_with(e,t)}intersectionPairsWith(e,t){this.raw.intersection_pairs_with(e,t)}contactPair(e,t,n){const s=this.raw.contact_pair(e,t);if(s){const r=s.collider1()!=e;let o;for(o=0;o<s.numContactManifolds();++o)this.tempManifold.raw=s.contactManifold(o),this.tempManifold.raw&&n(this.tempManifold,r),this.tempManifold.free();s.free()}}intersectionPair(e,t){return this.raw.intersection_pair(e,t)}}class wN{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e}normal(){return Z.fromRaw(this.raw.normal())}localNormal1(){return Z.fromRaw(this.raw.local_n1())}localNormal2(){return Z.fromRaw(this.raw.local_n2())}subshape1(){return this.raw.subshape1()}subshape2(){return this.raw.subshape2()}numContacts(){return this.raw.num_contacts()}localContactPoint1(e){return Z.fromRaw(this.raw.contact_local_p1(e))}localContactPoint2(e){return Z.fromRaw(this.raw.contact_local_p2(e))}contactDist(e){return this.raw.contact_dist(e)}contactFid1(e){return this.raw.contact_fid1(e)}contactFid2(e){return this.raw.contact_fid2(e)}contactImpulse(e){return this.raw.contact_impulse(e)}contactTangentImpulseX(e){return this.raw.contact_tangent_impulse_x(e)}contactTangentImpulseY(e){return this.raw.contact_tangent_impulse_y(e)}numSolverContacts(){return this.raw.num_solver_contacts()}solverContactPoint(e){return Z.fromRaw(this.raw.solver_contact_point(e))}solverContactDist(e){return this.raw.solver_contact_dist(e)}solverContactFriction(e){return this.raw.solver_contact_friction(e)}solverContactRestitution(e){return this.raw.solver_contact_restitution(e)}solverContactTangentVelocity(e){return Z.fromRaw(this.raw.solver_contact_tangent_velocity(e))}}class go{constructor(e,t,n,s,r){this.distance=e,this.point1=t,this.point2=n,this.normal1=s,this.normal2=r}static fromRaw(e){if(!e)return null;const t=new go(e.distance(),Z.fromRaw(e.point1()),Z.fromRaw(e.point2()),Z.fromRaw(e.normal1()),Z.fromRaw(e.normal2()));return e.free(),t}}var xo;(function(i){i[i.Vertex=0]="Vertex",i[i.Edge=1]="Edge",i[i.Face=2]="Face",i[i.Unknown=3]="Unknown"})(xo||(xo={}));class E0{constructor(e,t){this.point=e,this.isInside=t}static fromRaw(e){if(!e)return null;const t=new E0(Z.fromRaw(e.point()),e.isInside());return e.free(),t}}class Qa{constructor(e,t,n,s,r){this.featureType=xo.Unknown,this.featureId=void 0,this.collider=e,this.point=t,this.isInside=n,r!==void 0&&(this.featureId=r),s!==void 0&&(this.featureType=s)}static fromRaw(e,t){if(!t)return null;const n=new Qa(e.get(t.colliderHandle()),Z.fromRaw(t.point()),t.isInside(),t.featureType(),t.featureId());return t.free(),n}}class A0{constructor(e,t,n,s){this.featureType=xo.Unknown,this.featureId=void 0,this.timeOfImpact=e,this.normal=t,s!==void 0&&(this.featureId=s),n!==void 0&&(this.featureType=n)}static fromRaw(e){if(!e)return null;const t=new A0(e.time_of_impact(),Z.fromRaw(e.normal()),e.featureType(),e.featureId());return e.free(),t}}class _a{constructor(e,t,n,s,r){this.featureType=xo.Unknown,this.featureId=void 0,this.collider=e,this.timeOfImpact=t,this.normal=n,r!==void 0&&(this.featureId=r),s!==void 0&&(this.featureType=s)}static fromRaw(e,t){if(!t)return null;const n=new _a(e.get(t.colliderHandle()),t.time_of_impact(),Z.fromRaw(t.normal()),t.featureType(),t.featureId());return t.free(),n}}class uu{constructor(e,t){this.collider=e,this.timeOfImpact=t}static fromRaw(e,t){if(!t)return null;const n=new uu(e.get(t.colliderHandle()),t.timeOfImpact());return t.free(),n}}class Mo{constructor(e,t,n,s,r){this.time_of_impact=e,this.witness1=t,this.witness2=n,this.normal1=s,this.normal2=r}static fromRaw(e,t){if(!t)return null;const n=new Mo(t.time_of_impact(),Z.fromRaw(t.witness1()),Z.fromRaw(t.witness2()),Z.fromRaw(t.normal1()),Z.fromRaw(t.normal2()));return t.free(),n}}class X0 extends Mo{constructor(e,t,n,s,r,o){super(t,n,s,r,o),this.collider=e}static fromRaw(e,t){if(!t)return null;const n=new X0(e.get(t.colliderHandle()),t.time_of_impact(),Z.fromRaw(t.witness1()),Z.fromRaw(t.witness2()),Z.fromRaw(t.normal1()),Z.fromRaw(t.normal2()));return t.free(),n}}class dn{static fromRaw(e,t){const n=e.coShapeType(t);let s,r,o,a,l,d,c;switch(n){case fn.Ball:return new f3(e.coRadius(t));case fn.Cuboid:return s=e.coHalfExtents(t),new h3(s.x,s.y,s.z);case fn.RoundCuboid:return s=e.coHalfExtents(t),r=e.coRoundRadius(t),new m3(s.x,s.y,s.z,r);case fn.Capsule:return l=e.coHalfHeight(t),d=e.coRadius(t),new b3(l,d);case fn.Segment:return o=e.coVertices(t),new v3(Z.new(o[0],o[1],o[2]),Z.new(o[3],o[4],o[5]));case fn.Polyline:return o=e.coVertices(t),a=e.coIndices(t),new g3(o,a);case fn.Triangle:return o=e.coVertices(t),new y3(Z.new(o[0],o[1],o[2]),Z.new(o[3],o[4],o[5]),Z.new(o[6],o[7],o[8]));case fn.RoundTriangle:return o=e.coVertices(t),r=e.coRoundRadius(t),new w3(Z.new(o[0],o[1],o[2]),Z.new(o[3],o[4],o[5]),Z.new(o[6],o[7],o[8]),r);case fn.HalfSpace:return c=Z.fromRaw(e.coHalfspaceNormal(t)),new gN(c);case fn.Voxels:const u=e.coVoxelData(t),p=e.coVoxelSize(t);return new x3(u,p);case fn.TriMesh:o=e.coVertices(t),a=e.coIndices(t);const h=e.coTriMeshFlags(t);return new T3(o,a,h);case fn.HeightField:const v=e.coHeightfieldScale(t),x=e.coHeightfieldHeights(t),m=e.coHeightfieldNRows(t),f=e.coHeightfieldNCols(t),N=e.coHeightFieldFlags(t);return new S3(m,f,x,v,N);case fn.ConvexPolyhedron:return o=e.coVertices(t),a=e.coIndices(t),new nc(o,a);case fn.RoundConvexPolyhedron:return o=e.coVertices(t),a=e.coIndices(t),r=e.coRoundRadius(t),new ic(o,a,r);case fn.Cylinder:return l=e.coHalfHeight(t),d=e.coRadius(t),new P3(l,d);case fn.RoundCylinder:return l=e.coHalfHeight(t),d=e.coRadius(t),r=e.coRoundRadius(t),new R3(l,d,r);case fn.Cone:return l=e.coHalfHeight(t),d=e.coRadius(t),new L3(l,d);case fn.RoundCone:return l=e.coHalfHeight(t),d=e.coRadius(t),r=e.coRoundRadius(t),new N3(l,d,r);default:throw new Error("unknown shape type: "+n)}}castShape(e,t,n,s,r,o,a,l,d,c){let u=Z.intoRaw(e),p=ot.intoRaw(t),h=Z.intoRaw(n),v=Z.intoRaw(r),x=ot.intoRaw(o),m=Z.intoRaw(a),f=this.intoRaw(),N=s.intoRaw(),O=Mo.fromRaw(null,f.castShape(u,p,h,N,v,x,m,l,d,c));return u.free(),p.free(),h.free(),v.free(),x.free(),m.free(),f.free(),N.free(),O}intersectsShape(e,t,n,s,r){let o=Z.intoRaw(e),a=ot.intoRaw(t),l=Z.intoRaw(s),d=ot.intoRaw(r),c=this.intoRaw(),u=n.intoRaw(),p=c.intersectsShape(o,a,u,l,d);return o.free(),a.free(),l.free(),d.free(),c.free(),u.free(),p}contactShape(e,t,n,s,r,o){let a=Z.intoRaw(e),l=ot.intoRaw(t),d=Z.intoRaw(s),c=ot.intoRaw(r),u=this.intoRaw(),p=n.intoRaw(),h=go.fromRaw(u.contactShape(a,l,p,d,c,o));return a.free(),l.free(),d.free(),c.free(),u.free(),p.free(),h}containsPoint(e,t,n){let s=Z.intoRaw(e),r=ot.intoRaw(t),o=Z.intoRaw(n),a=this.intoRaw(),l=a.containsPoint(s,r,o);return s.free(),r.free(),o.free(),a.free(),l}projectPoint(e,t,n,s){let r=Z.intoRaw(e),o=ot.intoRaw(t),a=Z.intoRaw(n),l=this.intoRaw(),d=E0.fromRaw(l.projectPoint(r,o,a,s));return r.free(),o.free(),a.free(),l.free(),d}intersectsRay(e,t,n,s){let r=Z.intoRaw(t),o=ot.intoRaw(n),a=Z.intoRaw(e.origin),l=Z.intoRaw(e.dir),d=this.intoRaw(),c=d.intersectsRay(r,o,a,l,s);return r.free(),o.free(),a.free(),l.free(),d.free(),c}castRay(e,t,n,s,r){let o=Z.intoRaw(t),a=ot.intoRaw(n),l=Z.intoRaw(e.origin),d=Z.intoRaw(e.dir),c=this.intoRaw(),u=c.castRay(o,a,l,d,s,r);return o.free(),a.free(),l.free(),d.free(),c.free(),u}castRayAndGetNormal(e,t,n,s,r){let o=Z.intoRaw(t),a=ot.intoRaw(n),l=Z.intoRaw(e.origin),d=Z.intoRaw(e.dir),c=this.intoRaw(),u=A0.fromRaw(c.castRayAndGetNormal(o,a,l,d,s,r));return o.free(),a.free(),l.free(),d.free(),c.free(),u}}var en;(function(i){i[i.Ball=0]="Ball",i[i.Cuboid=1]="Cuboid",i[i.Capsule=2]="Capsule",i[i.Segment=3]="Segment",i[i.Polyline=4]="Polyline",i[i.Triangle=5]="Triangle",i[i.TriMesh=6]="TriMesh",i[i.HeightField=7]="HeightField",i[i.ConvexPolyhedron=9]="ConvexPolyhedron",i[i.Cylinder=10]="Cylinder",i[i.Cone=11]="Cone",i[i.RoundCuboid=12]="RoundCuboid",i[i.RoundTriangle=13]="RoundTriangle",i[i.RoundCylinder=14]="RoundCylinder",i[i.RoundCone=15]="RoundCone",i[i.RoundConvexPolyhedron=16]="RoundConvexPolyhedron",i[i.HalfSpace=17]="HalfSpace",i[i.Voxels=18]="Voxels"})(en||(en={}));var xp;(function(i){i[i.FIX_INTERNAL_EDGES=1]="FIX_INTERNAL_EDGES"})(xp||(xp={}));var $a;(function(i){i[i.DELETE_BAD_TOPOLOGY_TRIANGLES=4]="DELETE_BAD_TOPOLOGY_TRIANGLES",i[i.ORIENTED=8]="ORIENTED",i[i.MERGE_DUPLICATE_VERTICES=16]="MERGE_DUPLICATE_VERTICES",i[i.DELETE_DEGENERATE_TRIANGLES=32]="DELETE_DEGENERATE_TRIANGLES",i[i.DELETE_DUPLICATE_TRIANGLES=64]="DELETE_DUPLICATE_TRIANGLES",i[i.FIX_INTERNAL_EDGES=144]="FIX_INTERNAL_EDGES"})($a||($a={}));class f3 extends dn{constructor(e){super(),this.type=en.Ball,this.radius=e}intoRaw(){return qe.ball(this.radius)}}class gN extends dn{constructor(e){super(),this.type=en.HalfSpace,this.normal=e}intoRaw(){let e=Z.intoRaw(this.normal),t=qe.halfspace(e);return e.free(),t}}class h3 extends dn{constructor(e,t,n){super(),this.type=en.Cuboid,this.halfExtents=Z.new(e,t,n)}intoRaw(){return qe.cuboid(this.halfExtents.x,this.halfExtents.y,this.halfExtents.z)}}class m3 extends dn{constructor(e,t,n,s){super(),this.type=en.RoundCuboid,this.halfExtents=Z.new(e,t,n),this.borderRadius=s}intoRaw(){return qe.roundCuboid(this.halfExtents.x,this.halfExtents.y,this.halfExtents.z,this.borderRadius)}}class b3 extends dn{constructor(e,t){super(),this.type=en.Capsule,this.halfHeight=e,this.radius=t}intoRaw(){return qe.capsule(this.halfHeight,this.radius)}}class v3 extends dn{constructor(e,t){super(),this.type=en.Segment,this.a=e,this.b=t}intoRaw(){let e=Z.intoRaw(this.a),t=Z.intoRaw(this.b),n=qe.segment(e,t);return e.free(),t.free(),n}}class y3 extends dn{constructor(e,t,n){super(),this.type=en.Triangle,this.a=e,this.b=t,this.c=n}intoRaw(){let e=Z.intoRaw(this.a),t=Z.intoRaw(this.b),n=Z.intoRaw(this.c),s=qe.triangle(e,t,n);return e.free(),t.free(),n.free(),s}}class w3 extends dn{constructor(e,t,n,s){super(),this.type=en.RoundTriangle,this.a=e,this.b=t,this.c=n,this.borderRadius=s}intoRaw(){let e=Z.intoRaw(this.a),t=Z.intoRaw(this.b),n=Z.intoRaw(this.c),s=qe.roundTriangle(e,t,n,this.borderRadius);return e.free(),t.free(),n.free(),s}}class g3 extends dn{constructor(e,t){super(),this.type=en.Polyline,this.vertices=e,this.indices=t??new Uint32Array(0)}intoRaw(){return qe.polyline(this.vertices,this.indices)}}class x3 extends dn{constructor(e,t){super(),this.type=en.Voxels,this.data=e,this.voxelSize=t}intoRaw(){let e=Z.intoRaw(this.voxelSize),t;return this.data instanceof Int32Array?t=qe.voxels(e,this.data):t=qe.voxelsFromPoints(e,this.data),e.free(),t}}class T3 extends dn{constructor(e,t,n){super(),this.type=en.TriMesh,this.vertices=e,this.indices=t,this.flags=n}intoRaw(){return qe.trimesh(this.vertices,this.indices,this.flags)}}class nc extends dn{constructor(e,t){super(),this.type=en.ConvexPolyhedron,this.vertices=e,this.indices=t}intoRaw(){return this.indices?qe.convexMesh(this.vertices,this.indices):qe.convexHull(this.vertices)}}class ic extends dn{constructor(e,t,n){super(),this.type=en.RoundConvexPolyhedron,this.vertices=e,this.indices=t,this.borderRadius=n}intoRaw(){return this.indices?qe.roundConvexMesh(this.vertices,this.indices,this.borderRadius):qe.roundConvexHull(this.vertices,this.borderRadius)}}class S3 extends dn{constructor(e,t,n,s,r){super(),this.type=en.HeightField,this.nrows=e,this.ncols=t,this.heights=n,this.scale=s,this.flags=r}intoRaw(){let e=Z.intoRaw(this.scale),t=qe.heightfield(this.nrows,this.ncols,this.heights,e,this.flags);return e.free(),t}}class P3 extends dn{constructor(e,t){super(),this.type=en.Cylinder,this.halfHeight=e,this.radius=t}intoRaw(){return qe.cylinder(this.halfHeight,this.radius)}}class R3 extends dn{constructor(e,t,n){super(),this.type=en.RoundCylinder,this.borderRadius=n,this.halfHeight=e,this.radius=t}intoRaw(){return qe.roundCylinder(this.halfHeight,this.radius,this.borderRadius)}}class L3 extends dn{constructor(e,t){super(),this.type=en.Cone,this.halfHeight=e,this.radius=t}intoRaw(){return qe.cone(this.halfHeight,this.radius)}}class N3 extends dn{constructor(e,t,n){super(),this.type=en.RoundCone,this.halfHeight=e,this.radius=t,this.borderRadius=n}intoRaw(){return qe.roundCone(this.halfHeight,this.radius,this.borderRadius)}}class xN{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new Cb}step(e,t,n,s,r,o,a,l,d,c,u,p){let h=Z.intoRaw(e);u?this.raw.stepWithEvents(h,t.raw,n.raw,s.raw,r.raw,o.raw,a.raw,l.raw,d.raw,c.raw,u.raw,p,p?p.filterContactPair:null,p?p.filterIntersectionPair:null):this.raw.step(h,t.raw,n.raw,s.raw,r.raw,o.raw,a.raw,l.raw,d.raw,c.raw),h.free()}}var Tp;(function(i){i[i.EXCLUDE_FIXED=1]="EXCLUDE_FIXED",i[i.EXCLUDE_KINEMATIC=2]="EXCLUDE_KINEMATIC",i[i.EXCLUDE_DYNAMIC=4]="EXCLUDE_DYNAMIC",i[i.EXCLUDE_SENSORS=8]="EXCLUDE_SENSORS",i[i.EXCLUDE_SOLIDS=16]="EXCLUDE_SOLIDS",i[i.ONLY_DYNAMIC=3]="ONLY_DYNAMIC",i[i.ONLY_KINEMATIC=5]="ONLY_KINEMATIC",i[i.ONLY_FIXED=6]="ONLY_FIXED"})(Tp||(Tp={}));class TN{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new du}update(e){this.raw.update(e.raw)}castRay(e,t,n,s,r,o,a,l,d,c){let u=Z.intoRaw(n.origin),p=Z.intoRaw(n.dir),h=uu.fromRaw(t,this.raw.castRay(e.raw,t.raw,u,p,s,r,o,a,l,d,c));return u.free(),p.free(),h}castRayAndGetNormal(e,t,n,s,r,o,a,l,d,c){let u=Z.intoRaw(n.origin),p=Z.intoRaw(n.dir),h=_a.fromRaw(t,this.raw.castRayAndGetNormal(e.raw,t.raw,u,p,s,r,o,a,l,d,c));return u.free(),p.free(),h}intersectionsWithRay(e,t,n,s,r,o,a,l,d,c,u){let p=Z.intoRaw(n.origin),h=Z.intoRaw(n.dir),v=x=>o(_a.fromRaw(t,x));this.raw.intersectionsWithRay(e.raw,t.raw,p,h,s,r,v,a,l,d,c,u),p.free(),h.free()}intersectionWithShape(e,t,n,s,r,o,a,l,d,c){let u=Z.intoRaw(n),p=ot.intoRaw(s),h=r.intoRaw(),v=this.raw.intersectionWithShape(e.raw,t.raw,u,p,h,o,a,l,d,c);return u.free(),p.free(),h.free(),v}projectPoint(e,t,n,s,r,o,a,l,d){let c=Z.intoRaw(n),u=Qa.fromRaw(t,this.raw.projectPoint(e.raw,t.raw,c,s,r,o,a,l,d));return c.free(),u}projectPointAndGetFeature(e,t,n,s,r,o,a,l){let d=Z.intoRaw(n),c=Qa.fromRaw(t,this.raw.projectPointAndGetFeature(e.raw,t.raw,d,s,r,o,a,l));return d.free(),c}intersectionsWithPoint(e,t,n,s,r,o,a,l,d){let c=Z.intoRaw(n);this.raw.intersectionsWithPoint(e.raw,t.raw,c,s,r,o,a,l,d),c.free()}castShape(e,t,n,s,r,o,a,l,d,c,u,p,h,v){let x=Z.intoRaw(n),m=ot.intoRaw(s),f=Z.intoRaw(r),N=o.intoRaw(),O=X0.fromRaw(t,this.raw.castShape(e.raw,t.raw,x,m,f,N,a,l,d,c,u,p,h,v));return x.free(),m.free(),f.free(),N.free(),O}intersectionsWithShape(e,t,n,s,r,o,a,l,d,c,u){let p=Z.intoRaw(n),h=ot.intoRaw(s),v=r.intoRaw();this.raw.intersectionsWithShape(e.raw,t.raw,p,h,v,o,a,l,d,c,u),p.free(),h.free(),v.free()}collidersWithAabbIntersectingAabb(e,t,n){let s=Z.intoRaw(e),r=Z.intoRaw(t);this.raw.collidersWithAabbIntersectingAabb(s,r,n),s.free(),r.free()}}class Sp{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new qb}serializeAll(e,t,n,s,r,o,a,l,d){let c=Z.intoRaw(e);const u=this.raw.serializeAll(c,t.raw,n.raw,s.raw,r.raw,o.raw,a.raw,l.raw,d.raw);return c.free(),u}deserializeAll(e){return To.fromRaw(this.raw.deserializeAll(e))}}class SN{constructor(e,t){this.vertices=e,this.colors=t}}class PN{free(){this.raw&&this.raw.free(),this.raw=void 0,this.vertices=void 0,this.colors=void 0}constructor(e){this.raw=e||new Db}render(e,t,n,s,r,o,a){this.raw.render(e.raw,t.raw,n.raw,s.raw,r.raw,o,t.castClosure(a)),this.vertices=this.raw.vertices(),this.colors=this.raw.colors()}}class RN{}class LN{constructor(e,t,n,s,r){this.params=t,this.bodies=n,this.colliders=s,this.queries=r,this.raw=new Vb(e),this.rawCharacterCollision=new c3,this._applyImpulsesToDynamicBodies=!1,this._characterMass=null}free(){this.raw&&(this.raw.free(),this.rawCharacterCollision.free()),this.raw=void 0,this.rawCharacterCollision=void 0}up(){return this.raw.up()}setUp(e){let t=Z.intoRaw(e);return this.raw.setUp(t)}applyImpulsesToDynamicBodies(){return this._applyImpulsesToDynamicBodies}setApplyImpulsesToDynamicBodies(e){this._applyImpulsesToDynamicBodies=e}characterMass(){return this._characterMass}setCharacterMass(e){this._characterMass=e}offset(){return this.raw.offset()}setOffset(e){this.raw.setOffset(e)}normalNudgeFactor(){return this.raw.normalNudgeFactor()}setNormalNudgeFactor(e){this.raw.setNormalNudgeFactor(e)}slideEnabled(){return this.raw.slideEnabled()}setSlideEnabled(e){this.raw.setSlideEnabled(e)}autostepMaxHeight(){return this.raw.autostepMaxHeight()}autostepMinWidth(){return this.raw.autostepMinWidth()}autostepIncludesDynamicBodies(){return this.raw.autostepIncludesDynamicBodies()}autostepEnabled(){return this.raw.autostepEnabled()}enableAutostep(e,t,n){this.raw.enableAutostep(e,t,n)}disableAutostep(){return this.raw.disableAutostep()}maxSlopeClimbAngle(){return this.raw.maxSlopeClimbAngle()}setMaxSlopeClimbAngle(e){this.raw.setMaxSlopeClimbAngle(e)}minSlopeSlideAngle(){return this.raw.minSlopeSlideAngle()}setMinSlopeSlideAngle(e){this.raw.setMinSlopeSlideAngle(e)}snapToGroundDistance(){return this.raw.snapToGroundDistance()}enableSnapToGround(e){this.raw.enableSnapToGround(e)}disableSnapToGround(){this.raw.disableSnapToGround()}snapToGroundEnabled(){return this.raw.snapToGroundEnabled()}computeColliderMovement(e,t,n,s,r){let o=Z.intoRaw(t);this.raw.computeColliderMovement(this.params.dt,this.bodies.raw,this.colliders.raw,this.queries.raw,e.handle,o,this._applyImpulsesToDynamicBodies,this._characterMass,n,s,this.colliders.castClosure(r)),o.free()}computedMovement(){return Z.fromRaw(this.raw.computedMovement())}computedGrounded(){return this.raw.computedGrounded()}numComputedCollisions(){return this.raw.numComputedCollisions()}computedCollision(e,t){if(this.raw.computedCollision(e,this.rawCharacterCollision)){let n=this.rawCharacterCollision;return t=t??new RN,t.translationDeltaApplied=Z.fromRaw(n.translationDeltaApplied()),t.translationDeltaRemaining=Z.fromRaw(n.translationDeltaRemaining()),t.toi=n.toi(),t.witness1=Z.fromRaw(n.worldWitness1()),t.witness2=Z.fromRaw(n.worldWitness2()),t.normal1=Z.fromRaw(n.worldNormal1()),t.normal2=Z.fromRaw(n.worldNormal2()),t.collider=this.colliders.get(n.handle()),t}else return null}}var Pp;(function(i){i[i.None=0]="None",i[i.LinX=1]="LinX",i[i.LinY=2]="LinY",i[i.LinZ=4]="LinZ",i[i.AngX=8]="AngX",i[i.AngY=16]="AngY",i[i.AngZ=32]="AngZ",i[i.AllLin=7]="AllLin",i[i.AllAng=56]="AllAng",i[i.All=63]="All"})(Pp||(Pp={}));class NN{constructor(e,t,n,s,r,o){this.params=e,this.bodies=t,this.raw=new Fb(n,s,r,o)}free(){this.raw&&this.raw.free(),this.raw=void 0}setKp(e,t){this.raw.set_kp(e,t)}setKi(e,t){this.raw.set_kp(e,t)}setKd(e,t){this.raw.set_kp(e,t)}setAxes(e){this.raw.set_axes_mask(e)}resetIntegrals(){this.raw.reset_integrals()}applyLinearCorrection(e,t,n){let s=Z.intoRaw(t),r=Z.intoRaw(n);this.raw.apply_linear_correction(this.params.dt,this.bodies.raw,e.handle,s,r),s.free(),r.free()}applyAngularCorrection(e,t,n){let s=ot.intoRaw(t),r=Z.intoRaw(n);this.raw.apply_angular_correction(this.params.dt,this.bodies.raw,e.handle,s,r),s.free(),r.free()}linearCorrection(e,t,n){let s=Z.intoRaw(t),r=Z.intoRaw(n),o=this.raw.linear_correction(this.params.dt,this.bodies.raw,e.handle,s,r);return s.free(),r.free(),Z.fromRaw(o)}angularCorrection(e,t,n){let s=ot.intoRaw(t),r=Z.intoRaw(n),o=this.raw.angular_correction(this.params.dt,this.bodies.raw,e.handle,s,r);return s.free(),r.free(),Z.fromRaw(o)}}class MN{constructor(e,t,n,s){this.raw=new Wb(e.handle),this.bodies=t,this.colliders=n,this.queries=s,this._chassis=e}free(){this.raw&&this.raw.free(),this.raw=void 0}updateVehicle(e,t,n,s){this.raw.update_vehicle(e,this.bodies.raw,this.colliders.raw,this.queries.raw,t,n,this.colliders.castClosure(s))}currentVehicleSpeed(){return this.raw.current_vehicle_speed()}chassis(){return this._chassis}get indexUpAxis(){return this.raw.index_up_axis()}set indexUpAxis(e){this.raw.set_index_up_axis(e)}get indexForwardAxis(){return this.raw.index_forward_axis()}set setIndexForwardAxis(e){this.raw.set_index_forward_axis(e)}addWheel(e,t,n,s,r){let o=Z.intoRaw(e),a=Z.intoRaw(t),l=Z.intoRaw(n);this.raw.add_wheel(o,a,l,s,r),o.free(),a.free(),l.free()}numWheels(){return this.raw.num_wheels()}wheelChassisConnectionPointCs(e){return Z.fromRaw(this.raw.wheel_chassis_connection_point_cs(e))}setWheelChassisConnectionPointCs(e,t){let n=Z.intoRaw(t);this.raw.set_wheel_chassis_connection_point_cs(e,n),n.free()}wheelSuspensionRestLength(e){return this.raw.wheel_suspension_rest_length(e)}setWheelSuspensionRestLength(e,t){this.raw.set_wheel_suspension_rest_length(e,t)}wheelMaxSuspensionTravel(e){return this.raw.wheel_max_suspension_travel(e)}setWheelMaxSuspensionTravel(e,t){this.raw.set_wheel_max_suspension_travel(e,t)}wheelRadius(e){return this.raw.wheel_radius(e)}setWheelRadius(e,t){this.raw.set_wheel_radius(e,t)}wheelSuspensionStiffness(e){return this.raw.wheel_suspension_stiffness(e)}setWheelSuspensionStiffness(e,t){this.raw.set_wheel_suspension_stiffness(e,t)}wheelSuspensionCompression(e){return this.raw.wheel_suspension_compression(e)}setWheelSuspensionCompression(e,t){this.raw.set_wheel_suspension_compression(e,t)}wheelSuspensionRelaxation(e){return this.raw.wheel_suspension_relaxation(e)}setWheelSuspensionRelaxation(e,t){this.raw.set_wheel_suspension_relaxation(e,t)}wheelMaxSuspensionForce(e){return this.raw.wheel_max_suspension_force(e)}setWheelMaxSuspensionForce(e,t){this.raw.set_wheel_max_suspension_force(e,t)}wheelBrake(e){return this.raw.wheel_brake(e)}setWheelBrake(e,t){this.raw.set_wheel_brake(e,t)}wheelSteering(e){return this.raw.wheel_steering(e)}setWheelSteering(e,t){this.raw.set_wheel_steering(e,t)}wheelEngineForce(e){return this.raw.wheel_engine_force(e)}setWheelEngineForce(e,t){this.raw.set_wheel_engine_force(e,t)}wheelDirectionCs(e){return Z.fromRaw(this.raw.wheel_direction_cs(e))}setWheelDirectionCs(e,t){let n=Z.intoRaw(t);this.raw.set_wheel_direction_cs(e,n),n.free()}wheelAxleCs(e){return Z.fromRaw(this.raw.wheel_axle_cs(e))}setWheelAxleCs(e,t){let n=Z.intoRaw(t);this.raw.set_wheel_axle_cs(e,n),n.free()}wheelFrictionSlip(e){return this.raw.wheel_friction_slip(e)}setWheelFrictionSlip(e,t){this.raw.set_wheel_friction_slip(e,t)}wheelSideFrictionStiffness(e){return this.raw.wheel_side_friction_stiffness(e)}setWheelSideFrictionStiffness(e,t){this.raw.set_wheel_side_friction_stiffness(e,t)}wheelRotation(e){return this.raw.wheel_rotation(e)}wheelForwardImpulse(e){return this.raw.wheel_forward_impulse(e)}wheelSideImpulse(e){return this.raw.wheel_side_impulse(e)}wheelSuspensionForce(e){return this.raw.wheel_suspension_force(e)}wheelContactNormal(e){return Z.fromRaw(this.raw.wheel_contact_normal_ws(e))}wheelContactPoint(e){return Z.fromRaw(this.raw.wheel_contact_point_ws(e))}wheelSuspensionLength(e){return this.raw.wheel_suspension_length(e)}wheelHardPoint(e){return Z.fromRaw(this.raw.wheel_hard_point_ws(e))}wheelIsInContact(e){return this.raw.wheel_is_in_contact(e)}wheelGroundObject(e){return this.colliders.get(this.raw.wheel_ground_object(e))}}class To{free(){this.integrationParameters.free(),this.islands.free(),this.broadPhase.free(),this.narrowPhase.free(),this.bodies.free(),this.colliders.free(),this.impulseJoints.free(),this.multibodyJoints.free(),this.ccdSolver.free(),this.queryPipeline.free(),this.physicsPipeline.free(),this.serializationPipeline.free(),this.debugRenderPipeline.free(),this.characterControllers.forEach(e=>e.free()),this.pidControllers.forEach(e=>e.free()),this.vehicleControllers.forEach(e=>e.free()),this.integrationParameters=void 0,this.islands=void 0,this.broadPhase=void 0,this.narrowPhase=void 0,this.bodies=void 0,this.colliders=void 0,this.ccdSolver=void 0,this.impulseJoints=void 0,this.multibodyJoints=void 0,this.queryPipeline=void 0,this.physicsPipeline=void 0,this.serializationPipeline=void 0,this.debugRenderPipeline=void 0,this.characterControllers=void 0,this.pidControllers=void 0,this.vehicleControllers=void 0}constructor(e,t,n,s,r,o,a,l,d,c,u,p,h,v){this.gravity=e,this.integrationParameters=new tN(t),this.islands=new bN(n),this.broadPhase=new vN(s),this.narrowPhase=new yN(r),this.bodies=new eN(o),this.colliders=new ON(a),this.impulseJoints=new dN(l),this.multibodyJoints=new hN(d),this.ccdSolver=new mN(c),this.queryPipeline=new TN(u),this.physicsPipeline=new xN(p),this.serializationPipeline=new Sp(h),this.debugRenderPipeline=new PN(v),this.characterControllers=new Set,this.pidControllers=new Set,this.vehicleControllers=new Set,this.impulseJoints.finalizeDeserialization(this.bodies),this.bodies.finalizeDeserialization(this.colliders),this.colliders.finalizeDeserialization(this.bodies)}static fromRaw(e){return e?new To(Z.fromRaw(e.takeGravity()),e.takeIntegrationParameters(),e.takeIslandManager(),e.takeBroadPhase(),e.takeNarrowPhase(),e.takeBodies(),e.takeColliders(),e.takeImpulseJoints(),e.takeMultibodyJoints()):null}takeSnapshot(){return this.serializationPipeline.serializeAll(this.gravity,this.integrationParameters,this.islands,this.broadPhase,this.narrowPhase,this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints)}static restoreSnapshot(e){return new Sp().deserializeAll(e)}debugRender(e,t){return this.debugRenderPipeline.render(this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints,this.narrowPhase,e,t),new SN(this.debugRenderPipeline.vertices,this.debugRenderPipeline.colors)}step(e,t){this.physicsPipeline.step(this.gravity,this.integrationParameters,this.islands,this.broadPhase,this.narrowPhase,this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints,this.ccdSolver,e,t),this.queryPipeline.update(this.colliders)}propagateModifiedBodyPositionsToColliders(){this.bodies.raw.propagateModifiedBodyPositionsToColliders(this.colliders.raw)}updateSceneQueries(){this.propagateModifiedBodyPositionsToColliders(),this.queryPipeline.update(this.colliders)}get timestep(){return this.integrationParameters.dt}set timestep(e){this.integrationParameters.dt=e}get lengthUnit(){return this.integrationParameters.lengthUnit}set lengthUnit(e){this.integrationParameters.lengthUnit=e}get numSolverIterations(){return this.integrationParameters.numSolverIterations}set numSolverIterations(e){this.integrationParameters.numSolverIterations=e}get numAdditionalFrictionIterations(){return this.integrationParameters.numAdditionalFrictionIterations}set numAdditionalFrictionIterations(e){this.integrationParameters.numAdditionalFrictionIterations=e}get numInternalPgsIterations(){return this.integrationParameters.numInternalPgsIterations}set numInternalPgsIterations(e){this.integrationParameters.numInternalPgsIterations=e}switchToStandardPgsSolver(){this.integrationParameters.switchToStandardPgsSolver()}switchToSmallStepsPgsSolver(){this.integrationParameters.switchToSmallStepsPgsSolver()}switchToSmallStepsPgsSolverWithoutWarmstart(){this.integrationParameters.switchToSmallStepsPgsSolverWithoutWarmstart()}createRigidBody(e){return this.bodies.createRigidBody(this.colliders,e)}createCharacterController(e){let t=new LN(e,this.integrationParameters,this.bodies,this.colliders,this.queryPipeline);return this.characterControllers.add(t),t}removeCharacterController(e){this.characterControllers.delete(e),e.free()}createPidController(e,t,n,s){let r=new NN(this.integrationParameters,this.bodies,e,t,n,s);return this.pidControllers.add(r),r}removePidController(e){this.pidControllers.delete(e),e.free()}createVehicleController(e){let t=new MN(e,this.bodies,this.colliders,this.queryPipeline);return this.vehicleControllers.add(t),t}removeVehicleController(e){this.vehicleControllers.delete(e),e.free()}createCollider(e,t){let n=t?t.handle:void 0;return this.colliders.createCollider(this.bodies,e,n)}createImpulseJoint(e,t,n,s){return this.impulseJoints.createJoint(this.bodies,e,t.handle,n.handle,s)}createMultibodyJoint(e,t,n,s){return this.multibodyJoints.createJoint(e,t.handle,n.handle,s)}getRigidBody(e){return this.bodies.get(e)}getCollider(e){return this.colliders.get(e)}getImpulseJoint(e){return this.impulseJoints.get(e)}getMultibodyJoint(e){return this.multibodyJoints.get(e)}removeRigidBody(e){this.bodies&&this.bodies.remove(e.handle,this.islands,this.colliders,this.impulseJoints,this.multibodyJoints)}removeCollider(e,t){this.colliders&&this.colliders.remove(e.handle,this.islands,this.bodies,t)}removeImpulseJoint(e,t){this.impulseJoints&&this.impulseJoints.remove(e.handle,t)}removeMultibodyJoint(e,t){this.impulseJoints&&this.multibodyJoints.remove(e.handle,t)}forEachCollider(e){this.colliders.forEach(e)}forEachRigidBody(e){this.bodies.forEach(e)}forEachActiveRigidBody(e){this.bodies.forEachActiveRigidBody(this.islands,e)}castRay(e,t,n,s,r,o,a,l){return this.queryPipeline.castRay(this.bodies,this.colliders,e,t,n,s,r,o?o.handle:null,a?a.handle:null,this.colliders.castClosure(l))}castRayAndGetNormal(e,t,n,s,r,o,a,l){return this.queryPipeline.castRayAndGetNormal(this.bodies,this.colliders,e,t,n,s,r,o?o.handle:null,a?a.handle:null,this.colliders.castClosure(l))}intersectionsWithRay(e,t,n,s,r,o,a,l,d){this.queryPipeline.intersectionsWithRay(this.bodies,this.colliders,e,t,n,s,r,o,a?a.handle:null,l?l.handle:null,this.colliders.castClosure(d))}intersectionWithShape(e,t,n,s,r,o,a,l){let d=this.queryPipeline.intersectionWithShape(this.bodies,this.colliders,e,t,n,s,r,o?o.handle:null,a?a.handle:null,this.colliders.castClosure(l));return d!=null?this.colliders.get(d):null}projectPoint(e,t,n,s,r,o,a){return this.queryPipeline.projectPoint(this.bodies,this.colliders,e,t,n,s,r?r.handle:null,o?o.handle:null,this.colliders.castClosure(a))}projectPointAndGetFeature(e,t,n,s,r,o){return this.queryPipeline.projectPointAndGetFeature(this.bodies,this.colliders,e,t,n,s?s.handle:null,r?r.handle:null,this.colliders.castClosure(o))}intersectionsWithPoint(e,t,n,s,r,o,a){this.queryPipeline.intersectionsWithPoint(this.bodies,this.colliders,e,this.colliders.castClosure(t),n,s,r?r.handle:null,o?o.handle:null,this.colliders.castClosure(a))}castShape(e,t,n,s,r,o,a,l,d,c,u,p){return this.queryPipeline.castShape(this.bodies,this.colliders,e,t,n,s,r,o,a,l,d,c?c.handle:null,u?u.handle:null,this.colliders.castClosure(p))}intersectionsWithShape(e,t,n,s,r,o,a,l,d){this.queryPipeline.intersectionsWithShape(this.bodies,this.colliders,e,t,n,this.colliders.castClosure(s),r,o,a?a.handle:null,l?l.handle:null,this.colliders.castClosure(d))}collidersWithAabbIntersectingAabb(e,t,n){this.queryPipeline.collidersWithAabbIntersectingAabb(e,t,this.colliders.castClosure(n))}contactPairsWith(e,t){this.narrowPhase.contactPairsWith(e.handle,this.colliders.castClosure(t))}intersectionPairsWith(e,t){this.narrowPhase.intersectionPairsWith(e.handle,this.colliders.castClosure(t))}contactPair(e,t,n){this.narrowPhase.contactPair(e.handle,t.handle,n)}intersectionPair(e,t){return this.narrowPhase.intersectionPair(e.handle,t.handle)}}var sc;(function(i){i[i.NONE=0]="NONE",i[i.COLLISION_EVENTS=1]="COLLISION_EVENTS",i[i.CONTACT_FORCE_EVENTS=2]="CONTACT_FORCE_EVENTS"})(sc||(sc={}));var rc;(function(i){i[i.NONE=0]="NONE",i[i.FILTER_CONTACT_PAIRS=1]="FILTER_CONTACT_PAIRS",i[i.FILTER_INTERSECTION_PAIRS=2]="FILTER_INTERSECTION_PAIRS"})(rc||(rc={}));var Rp;(function(i){i[i.EMPTY=0]="EMPTY",i[i.COMPUTE_IMPULSE=1]="COMPUTE_IMPULSE"})(Rp||(Rp={}));var oc;(function(i){i[i.DYNAMIC_DYNAMIC=1]="DYNAMIC_DYNAMIC",i[i.DYNAMIC_KINEMATIC=12]="DYNAMIC_KINEMATIC",i[i.DYNAMIC_FIXED=2]="DYNAMIC_FIXED",i[i.KINEMATIC_KINEMATIC=52224]="KINEMATIC_KINEMATIC",i[i.KINEMATIC_FIXED=8704]="KINEMATIC_FIXED",i[i.FIXED_FIXED=32]="FIXED_FIXED",i[i.DEFAULT=15]="DEFAULT",i[i.ALL=60943]="ALL"})(oc||(oc={}));class Lp{constructor(e,t,n,s){this.colliderSet=e,this.handle=t,this._parent=n,this._shape=s}finalizeDeserialization(e){this.handle!=null&&(this._parent=e.get(this.colliderSet.raw.coParent(this.handle)))}ensureShapeIsCached(){this._shape||(this._shape=dn.fromRaw(this.colliderSet.raw,this.handle))}get shape(){return this.ensureShapeIsCached(),this._shape}clearShapeCache(){this._shape=null}isValid(){return this.colliderSet.raw.contains(this.handle)}translation(){return Z.fromRaw(this.colliderSet.raw.coTranslation(this.handle))}rotation(){return ot.fromRaw(this.colliderSet.raw.coRotation(this.handle))}isSensor(){return this.colliderSet.raw.coIsSensor(this.handle)}setSensor(e){this.colliderSet.raw.coSetSensor(this.handle,e)}setShape(e){let t=e.intoRaw();this.colliderSet.raw.coSetShape(this.handle,t),t.free(),this._shape=e}setEnabled(e){this.colliderSet.raw.coSetEnabled(this.handle,e)}isEnabled(){return this.colliderSet.raw.coIsEnabled(this.handle)}setRestitution(e){this.colliderSet.raw.coSetRestitution(this.handle,e)}setFriction(e){this.colliderSet.raw.coSetFriction(this.handle,e)}frictionCombineRule(){return this.colliderSet.raw.coFrictionCombineRule(this.handle)}setFrictionCombineRule(e){this.colliderSet.raw.coSetFrictionCombineRule(this.handle,e)}restitutionCombineRule(){return this.colliderSet.raw.coRestitutionCombineRule(this.handle)}setRestitutionCombineRule(e){this.colliderSet.raw.coSetRestitutionCombineRule(this.handle,e)}setCollisionGroups(e){this.colliderSet.raw.coSetCollisionGroups(this.handle,e)}setSolverGroups(e){this.colliderSet.raw.coSetSolverGroups(this.handle,e)}contactSkin(){return this.colliderSet.raw.coContactSkin(this.handle)}setContactSkin(e){return this.colliderSet.raw.coSetContactSkin(this.handle,e)}activeHooks(){return this.colliderSet.raw.coActiveHooks(this.handle)}setActiveHooks(e){this.colliderSet.raw.coSetActiveHooks(this.handle,e)}activeEvents(){return this.colliderSet.raw.coActiveEvents(this.handle)}setActiveEvents(e){this.colliderSet.raw.coSetActiveEvents(this.handle,e)}activeCollisionTypes(){return this.colliderSet.raw.coActiveCollisionTypes(this.handle)}setContactForceEventThreshold(e){return this.colliderSet.raw.coSetContactForceEventThreshold(this.handle,e)}contactForceEventThreshold(){return this.colliderSet.raw.coContactForceEventThreshold(this.handle)}setActiveCollisionTypes(e){this.colliderSet.raw.coSetActiveCollisionTypes(this.handle,e)}setDensity(e){this.colliderSet.raw.coSetDensity(this.handle,e)}setMass(e){this.colliderSet.raw.coSetMass(this.handle,e)}setMassProperties(e,t,n,s){let r=Z.intoRaw(t),o=Z.intoRaw(n),a=ot.intoRaw(s);this.colliderSet.raw.coSetMassProperties(this.handle,e,r,o,a),r.free(),o.free(),a.free()}setTranslation(e){this.colliderSet.raw.coSetTranslation(this.handle,e.x,e.y,e.z)}setTranslationWrtParent(e){this.colliderSet.raw.coSetTranslationWrtParent(this.handle,e.x,e.y,e.z)}setRotation(e){this.colliderSet.raw.coSetRotation(this.handle,e.x,e.y,e.z,e.w)}setRotationWrtParent(e){this.colliderSet.raw.coSetRotationWrtParent(this.handle,e.x,e.y,e.z,e.w)}shapeType(){return this.colliderSet.raw.coShapeType(this.handle)}halfExtents(){return Z.fromRaw(this.colliderSet.raw.coHalfExtents(this.handle))}setHalfExtents(e){const t=Z.intoRaw(e);this.colliderSet.raw.coSetHalfExtents(this.handle,t)}radius(){return this.colliderSet.raw.coRadius(this.handle)}setRadius(e){this.colliderSet.raw.coSetRadius(this.handle,e)}roundRadius(){return this.colliderSet.raw.coRoundRadius(this.handle)}setRoundRadius(e){this.colliderSet.raw.coSetRoundRadius(this.handle,e)}halfHeight(){return this.colliderSet.raw.coHalfHeight(this.handle)}setHalfHeight(e){this.colliderSet.raw.coSetHalfHeight(this.handle,e)}setVoxel(e,t,n,s){this.colliderSet.raw.coSetVoxel(this.handle,e,t,n,s),this._shape=null}propagateVoxelChange(e,t,n,s,r,o,a){this.colliderSet.raw.coPropagateVoxelChange(this.handle,e.handle,t,n,s,r,o,a),this._shape=null}combineVoxelStates(e,t,n,s){this.colliderSet.raw.coCombineVoxelStates(this.handle,e.handle,t,n,s),this._shape=null}vertices(){return this.colliderSet.raw.coVertices(this.handle)}indices(){return this.colliderSet.raw.coIndices(this.handle)}heightfieldHeights(){return this.colliderSet.raw.coHeightfieldHeights(this.handle)}heightfieldScale(){let e=this.colliderSet.raw.coHeightfieldScale(this.handle);return Z.fromRaw(e)}heightfieldNRows(){return this.colliderSet.raw.coHeightfieldNRows(this.handle)}heightfieldNCols(){return this.colliderSet.raw.coHeightfieldNCols(this.handle)}parent(){return this._parent}friction(){return this.colliderSet.raw.coFriction(this.handle)}restitution(){return this.colliderSet.raw.coRestitution(this.handle)}density(){return this.colliderSet.raw.coDensity(this.handle)}mass(){return this.colliderSet.raw.coMass(this.handle)}volume(){return this.colliderSet.raw.coVolume(this.handle)}collisionGroups(){return this.colliderSet.raw.coCollisionGroups(this.handle)}solverGroups(){return this.colliderSet.raw.coSolverGroups(this.handle)}containsPoint(e){let t=Z.intoRaw(e),n=this.colliderSet.raw.coContainsPoint(this.handle,t);return t.free(),n}projectPoint(e,t){let n=Z.intoRaw(e),s=E0.fromRaw(this.colliderSet.raw.coProjectPoint(this.handle,n,t));return n.free(),s}intersectsRay(e,t){let n=Z.intoRaw(e.origin),s=Z.intoRaw(e.dir),r=this.colliderSet.raw.coIntersectsRay(this.handle,n,s,t);return n.free(),s.free(),r}castShape(e,t,n,s,r,o,a,l){let d=Z.intoRaw(e),c=Z.intoRaw(n),u=ot.intoRaw(s),p=Z.intoRaw(r),h=t.intoRaw(),v=Mo.fromRaw(this.colliderSet,this.colliderSet.raw.coCastShape(this.handle,d,h,c,u,p,o,a,l));return d.free(),c.free(),u.free(),p.free(),h.free(),v}castCollider(e,t,n,s,r,o){let a=Z.intoRaw(e),l=Z.intoRaw(n),d=X0.fromRaw(this.colliderSet,this.colliderSet.raw.coCastCollider(this.handle,a,t.handle,l,s,r,o));return a.free(),l.free(),d}intersectsShape(e,t,n){let s=Z.intoRaw(t),r=ot.intoRaw(n),o=e.intoRaw(),a=this.colliderSet.raw.coIntersectsShape(this.handle,o,s,r);return s.free(),r.free(),o.free(),a}contactShape(e,t,n,s){let r=Z.intoRaw(t),o=ot.intoRaw(n),a=e.intoRaw(),l=go.fromRaw(this.colliderSet.raw.coContactShape(this.handle,a,r,o,s));return r.free(),o.free(),a.free(),l}contactCollider(e,t){return go.fromRaw(this.colliderSet.raw.coContactCollider(this.handle,e.handle,t))}castRay(e,t,n){let s=Z.intoRaw(e.origin),r=Z.intoRaw(e.dir),o=this.colliderSet.raw.coCastRay(this.handle,s,r,t,n);return s.free(),r.free(),o}castRayAndGetNormal(e,t,n){let s=Z.intoRaw(e.origin),r=Z.intoRaw(e.dir),o=A0.fromRaw(this.colliderSet.raw.coCastRayAndGetNormal(this.handle,s,r,t,n));return s.free(),r.free(),o}}var pr;(function(i){i[i.Density=0]="Density",i[i.Mass=1]="Mass",i[i.MassProps=2]="MassProps"})(pr||(pr={}));class Ut{constructor(e){this.enabled=!0,this.shape=e,this.massPropsMode=pr.Density,this.density=1,this.friction=.5,this.restitution=0,this.rotation=ot.identity(),this.translation=Z.zeros(),this.isSensor=!1,this.collisionGroups=4294967295,this.solverGroups=4294967295,this.frictionCombineRule=Ka.Average,this.restitutionCombineRule=Ka.Average,this.activeCollisionTypes=oc.DEFAULT,this.activeEvents=sc.NONE,this.activeHooks=rc.NONE,this.mass=0,this.centerOfMass=Z.zeros(),this.contactForceEventThreshold=0,this.contactSkin=0,this.principalAngularInertia=Z.zeros(),this.angularInertiaLocalFrame=ot.identity()}static ball(e){const t=new f3(e);return new Ut(t)}static capsule(e,t){const n=new b3(e,t);return new Ut(n)}static segment(e,t){const n=new v3(e,t);return new Ut(n)}static triangle(e,t,n){const s=new y3(e,t,n);return new Ut(s)}static roundTriangle(e,t,n,s){const r=new w3(e,t,n,s);return new Ut(r)}static polyline(e,t){const n=new g3(e,t);return new Ut(n)}static voxels(e,t){const n=new x3(e,t);return new Ut(n)}static trimesh(e,t,n){const s=new T3(e,t,n);return new Ut(s)}static cuboid(e,t,n){const s=new h3(e,t,n);return new Ut(s)}static roundCuboid(e,t,n,s){const r=new m3(e,t,n,s);return new Ut(r)}static heightfield(e,t,n,s,r){const o=new S3(e,t,n,s,r);return new Ut(o)}static cylinder(e,t){const n=new P3(e,t);return new Ut(n)}static roundCylinder(e,t,n){const s=new R3(e,t,n);return new Ut(s)}static cone(e,t){const n=new L3(e,t);return new Ut(n)}static roundCone(e,t,n){const s=new N3(e,t,n);return new Ut(s)}static convexHull(e){const t=new nc(e,null);return new Ut(t)}static convexMesh(e,t){const n=new nc(e,t);return new Ut(n)}static roundConvexHull(e,t){const n=new ic(e,null,t);return new Ut(n)}static roundConvexMesh(e,t,n){const s=new ic(e,t,n);return new Ut(s)}setTranslation(e,t,n){if(typeof e!="number"||typeof t!="number"||typeof n!="number")throw TypeError("The translation components must be numbers.");return this.translation={x:e,y:t,z:n},this}setRotation(e){return ot.copy(this.rotation,e),this}setSensor(e){return this.isSensor=e,this}setEnabled(e){return this.enabled=e,this}setContactSkin(e){return this.contactSkin=e,this}setDensity(e){return this.massPropsMode=pr.Density,this.density=e,this}setMass(e){return this.massPropsMode=pr.Mass,this.mass=e,this}setMassProperties(e,t,n,s){return this.massPropsMode=pr.MassProps,this.mass=e,Z.copy(this.centerOfMass,t),Z.copy(this.principalAngularInertia,n),ot.copy(this.angularInertiaLocalFrame,s),this}setRestitution(e){return this.restitution=e,this}setFriction(e){return this.friction=e,this}setFrictionCombineRule(e){return this.frictionCombineRule=e,this}setRestitutionCombineRule(e){return this.restitutionCombineRule=e,this}setCollisionGroups(e){return this.collisionGroups=e,this}setSolverGroups(e){return this.solverGroups=e,this}setActiveHooks(e){return this.activeHooks=e,this}setActiveEvents(e){return this.activeEvents=e,this}setActiveCollisionTypes(e){return this.activeCollisionTypes=e,this}setContactForceEventThreshold(e){return this.contactForceEventThreshold=e,this}}class ON{free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}constructor(e){this.raw=e||new kt,this.map=new H0,e&&e.forEachColliderHandle(t=>{this.map.set(t,new Lp(this,t,null))})}castClosure(e){return t=>{if(e)return e(this.get(t))}}finalizeDeserialization(e){this.map.forEach(t=>t.finalizeDeserialization(e))}createCollider(e,t,n){let s=n!=null&&n!=null;if(s&&isNaN(n))throw Error("Cannot create a collider with a parent rigid-body handle that is not a number.");let r=t.shape.intoRaw(),o=Z.intoRaw(t.translation),a=ot.intoRaw(t.rotation),l=Z.intoRaw(t.centerOfMass),d=Z.intoRaw(t.principalAngularInertia),c=ot.intoRaw(t.angularInertiaLocalFrame),u=this.raw.createCollider(t.enabled,r,o,a,t.massPropsMode,t.mass,l,d,c,t.density,t.friction,t.restitution,t.frictionCombineRule,t.restitutionCombineRule,t.isSensor,t.collisionGroups,t.solverGroups,t.activeCollisionTypes,t.activeHooks,t.activeEvents,t.contactForceEventThreshold,t.contactSkin,s,s?n:0,e.raw);r.free(),o.free(),a.free(),l.free(),d.free(),c.free();let p=s?e.get(n):null,h=new Lp(this,u,p,t.shape);return this.map.set(u,h),h}remove(e,t,n,s){this.raw.remove(e,t.raw,n.raw,s),this.unmap(e)}unmap(e){this.map.delete(e)}get(e){return this.map.get(e)}len(){return this.map.len()}contains(e){return this.get(e)!=null}forEach(e){this.map.forEach(e)}getAll(){return this.map.getAll()}}const zN=2236962,HN=2,EN=1,AN=3,Np=1/60,XN=!0,IN="high-performance",DN=vi,WN=new T(0,-9.81,0),jN="assets/sunset.exr",VN=.35,CN=1,FN=16777215,qN=.5,YN=16777215,GN=1.5,UN=[-1,2.5,1],ZN=!0,kN=-.001,JN=.5,BN=50,KN=-5,QN=5,_N=5,$N=-5,Mp=1024;class M3{static TIMESTEP=Np;constructor({containerElement:e,camera:t}){this.#e=e,this.#r=t,this.#o.integrationParameters.numSolverIterations=HN,this.#o.integrationParameters.numAdditionalFrictionIterations=EN,this.#o.integrationParameters.numInternalPgsIterations=AN,this.#o.timestep=Np,this.#t.add(new u9(FN,qN));const n=new Z2(YN,GN);n.shadow.mapSize.set(Mp,Mp),n.position.set(...UN),n.castShadow=ZN,n.shadow.bias=kN,n.shadow.camera.near=JN,n.shadow.camera.far=BN,n.shadow.camera.left=KN,n.shadow.camera.right=QN,n.shadow.camera.top=_N,n.shadow.camera.bottom=$N,this.#t.add(n),e.appendChild(this.#a.domElement)}#e;#t=new Gu;#n=new Gu;#a=new am({antialias:XN,powerPreference:IN});#o=new To(WN);#r=null;async initialize(e,t,n){const s=new Kd(this.#a);s.compileEquirectangularShader(),this.#t.environment=await new Promise((r,o)=>new Rb().load(jN,a=>r(s.fromEquirectangular(a).texture),void 0,o)),this.#t.background=new tt(zN),this.#t.environmentIntensity=VN,this.#a.toneMapping=v2,this.#a.toneMappingExposure=CN,this.#a.outputColorSpace=yn,this.#a.setSize(e,t),this.#a.setPixelRatio(n),this.#a.shadowMap.enabled=!0,this.#a.shadowMap.type=DN,this.#e.appendChild(this.#a.domElement)}createFixedBody(){const e=$n.fixed();return this.#o.createRigidBody(e)}createKinematicBody(){const e=$n.kinematicPositionBased();return this.#o.createRigidBody(e)}createDynamicBody(){const e=$n.dynamic();return this.#o.createRigidBody(e)}createCuboidCollider({width:e,height:t,depth:n,userData:s,position:r,rotation:o,sensor:a,friction:l,restitution:d,density:c},u=this.createFixedBody()){const p=Ut.cuboid(e/2,t/2,n/2);r!==void 0&&p.setTranslation(...r),o!==void 0&&p.setRotation(new _e().setFromEuler(new zt(...o))),a!==void 0&&p.setSensor(a);const h=this.#o.createCollider(p,u);return l!==void 0&&h.setFriction(l),d!==void 0&&h.setRestitution(d),c!==void 0&&h.setDensity(c),s!==void 0&&(h.userData=s),h}createCuboidColliderFromBoundingBox({mesh:e,height:t,userData:n,rotation:s,sensor:r},o){e.geometry.computeBoundingBox();const a=e.geometry.boundingBox;e.matrixWorld.decompose(e.position,e.quaternion,e.scale);const d=a.max.x-a.min.x,c=a.max.z-a.min.z,u=a.min.x,p=a.min.y,h=a.min.z;return this.createCuboidCollider({width:d,height:t,depth:c,rotation:s,sensor:r,position:[u+d/2,p-t/2,h+c/2],userData:n},o)}createTrimeshCollider({vertices:e,indices:t,userData:n,position:s,rotation:r,sensor:o,friction:a,restitution:l,density:d},c=this.createFixedBody()){const u=Ut.trimesh(e,t,$a.ORIENTED|$a.FIX_INTERNAL_EDGES);s!==void 0&&u.setTranslation(...s),r!==void 0&&u.setRotation(new _e().setFromEuler(new zt(...r))),o!==void 0&&u.setSensor(o);const p=this.#o.createCollider(u,c);return a!==void 0&&p.setFriction(a),l!==void 0&&p.setRestitution(l),d!==void 0&&p.setDensity(d),n!==void 0&&(p.userData=n),p}createCylinderCollider({radius:e,height:t,userData:n,position:s,rotation:r,sensor:o,friction:a,restitution:l,density:d},c=this.createFixedBody()){const u=Ut.cylinder(t/2,e);s!==void 0&&u.setTranslation(...s),r!==void 0&&u.setRotation(new _e().setFromEuler(new zt(...r))),o!==void 0&&u.setSensor(o);const p=this.#o.createCollider(u,c);return a!==void 0&&p.setFriction(a),l!==void 0&&p.setRestitution(l),d!==void 0&&p.setDensity(d),n!==void 0&&(p.userData=n),p}createConvexHullCollider({vertices:e,indices:t,userData:n,position:s,rotation:r,sensor:o,friction:a,restitution:l,density:d},c=this.createFixedBody()){const u=Ut.convexHull(e,t);s!==void 0&&u.setTranslation(...s),r!==void 0&&u.setRotation(new _e().setFromEuler(new zt(...r))),o!==void 0&&u.setSensor(o);const p=this.#o.createCollider(u,c);return a!==void 0&&p.setFriction(a),l!==void 0&&p.setRestitution(l),d!==void 0&&p.setDensity(d),n!==void 0&&(p.userData=n),p}connectBodiesWithSphericalJoint({body1:e,body2:t,anchor1:n,anchor2:s}){const r=ci.spherical(n,s);return this.#o.createImpulseJoint(r,e,t)}connectBodiesWithRevoluteJoint({body1:e,body2:t,anchor1:n,anchor2:s,axis:r}){const o=ci.revolute(n,s,r);return this.#o.createImpulseJoint(o,e,t)}connectBodiesWithFixedJoint({body1:e,body2:t,anchor1:n,anchor2:s,frame1:r,frame2:o}){const a=ci.fixed(n,r,s,o);return this.#o.createImpulseJoint(a,e,t)}addObject(e){e.traverse(t=>{t.isMesh&&(t.castShadow=!0,t.receiveShadow=!0)}),this.#t.add(e)}render(){this.#a.render(this.#t,this.#r)}step(){this.#o.step()}resize(e,t,n){this.#a.setSize(e,t),this.#a.setPixelRatio(n),this.#r.isPerspectiveCamera&&(this.#r.aspect=e/t,this.#r.updateProjectionMatrix())}set timestep(e){this.#o.timestep=e}get timestep(){return this.#o.timestep}get triangles(){return this.#a.info.render.triangles}get children(){return this.#t.children}forEachCollision(e){this.#o.forEachCollider(t=>this.#o.intersectionPairsWith(t,n=>{t.userData.objectType!==void 0&&n.userData.objectType!==void 0&&e(t.userData,n.userData)}))}forEachCollider(e){this.#o.forEachCollider(t=>{t.isEnabled()&&e(t)})}loadModel(e){return new Om().loadAsync(e)}async save(){return{world:await eM(this.#o.takeSnapshot())}}async load(e){this.#o=To.restoreSnapshot(await tM(e.world))}get worldBodies(){return this.#o.bodies}get worldColliders(){return this.#o.colliders}get worldJoints(){return this.#o.impulseJoints}get camera(){return this.#r}get containerElement(){return this.#e}get css3DScene(){return this.#n}removeWorldBody(e){this.#o.removeRigidBody(e)}removeWorldCollider(e){this.#o.removeCollider(e)}}async function eM(i){const e=new Blob([i]).stream(),t=new CompressionStream("gzip"),n=await new Response(e.pipeThrough(t)).blob();return await new Promise((r,o)=>{const a=new FileReader;a.onloadend=()=>r(a.result.split(",")[1]),a.onerror=()=>o(a.error),a.readAsDataURL(n)})}async function tM(i){const t=(await(await fetch(`data:application/gzip;base64,${i}`)).blob()).stream().pipeThrough(new DecompressionStream("gzip")),n=await new Response(t).arrayBuffer();return new Uint8Array(n)}const nM=[0,.535,-.3725],ai=[0,.6425,-.3],ma=.6,Op=.7,iM=.9,Qr=.7,zp=.0065,ba=.1,_r=0,$r=0,sM=.1,Hp=-.31,Dl=.4525,Wl=.005,Ep=.05,os=.075,rM=6,eo=7,oM=0,aM=0,Ap=.75,Xp=0,lM="#555";class dM{constructor({scene:e}){this.#e=e}#e;initialize(){const e=new ti(ma,Qr,zp),t=new zr({transparent:!0,opacity:sM}),n=new Kt(e,t);n.position.set(...ai),this.#e.addObject(n);const s=this.#e.createFixedBody();this.#e.createCuboidCollider({width:Op,height:iM,depth:ba,friction:_r,restitution:$r,position:nM},s),this.#e.createCuboidCollider({width:ma,height:Qr,depth:zp,friction:_r,restitution:$r,position:ai},s),this.#e.createCuboidCollider({width:.05,height:Qr,depth:ba,friction:_r,restitution:$r,position:[ai[0]-ma/2-.025,ai[1],ai[2]]},s),this.#e.createCuboidCollider({width:.05,height:Qr,depth:ba,friction:_r,restitution:$r,position:[ai[0]+ma/2+.025,ai[1],ai[2]]},s),this.#e.createCuboidCollider({width:Op,height:.05,depth:ba,friction:_r,restitution:$r,position:[ai[0],ai[1]+Qr/2+.025,ai[2]]},s),cM({scene:this.#e,wallBody:s})}}function cM({scene:i,wallBody:e}){const n=-eo*os/2+os/2;for(let r=0;r<eo;r++)s(n-os/2,Dl-os,r,-1,Wl/2,Ap,Xp);for(let r=0;r<eo;r++)s(n-.075/2,Dl-os/2,r,-1,Wl/2,Ap,Xp);for(let r=0;r<rM;r++)for(let o=0;o<(r%2===0?eo:eo-1);o++)s(n,Dl,o,r,Wl,oM,aM);function s(r,o,a,l,d,c,u){const p=r+a*os+(l%2===0?0:os/2),h=o+l*os,v=new x0(d,d,Ep,8),x=new zr({color:lM}),m=new Kt(v,x);m.position.set(p,h,Hp),m.rotation.set(Math.PI/2,Math.PI/4,0),i.addObject(m),i.createCuboidCollider({width:d/8,height:Ep,depth:d/8,friction:c,restitution:u,position:[p,h,Hp],rotation:[Math.PI/2,Math.PI/4,0]},e)}}const e0=3,ac=new T(0,0,0),Ip=new T(1,1,1),uM=-.005,Dp=10,pM=50,lc=35,jl=1,fM=16755200,hM=.03,mM=.1,bM=.00725,vM="./assets/buttons.glb",t0=3,ar=[{color:16777215,background:16711680}],So=ar.length;class Tn{static MAX_INSTANCES=e0;static TYPES=t0;static COLORS=So;static#e;static#t;static#n=[];static#a=[];static async initialize({scene:e}){const{materials:t,geometries:n}=await yM({scene:e});this.#e=wM({scene:e,interactiveObjects:this.#a,materials:t,geometries:n,onClick:({color:s,type:r,instanceId:o})=>{const a=this.#t[s][r].find(l=>l.index===o);a.isPressing||(a.isPressing=!0),a.enabled&&this.onPress(a)}}),this.#t=[],gM({scene:e,instances:this.#t,bulbLights:this.#n})}static update(){const e=new Be,t=new T,n=new _e,s=new T;this.#a.forEach(r=>{const{color:o,type:a}=r.userData,l=this.#t[o][a];for(const d of l){if(d.isPressing)if(d.framePressStart===-1)d.framePressStart=0,r.getMatrixAt(d.index,e),e.decompose(t,n,s);else{const c=this.#n[o][a][d.index];if(d.framePressStart++,d.framePressStart<Dp){const u=new T(0,uM,0),p=d.framePressStart/Dp,h=u.multiplyScalar(p);h.applyQuaternion(d.initialRotation);const v=d.initialPosition.clone().add(h);d.buttonPosition.copy(v),d.enabled&&(c.intensity=p*lc)}else c.intensity=jl,d.isPressing=!1,d.framePressStart=-1,d.buttonPosition.copy(d.initialPosition)}if(d.isBlinking){if(d.frameBlinkStart===-1)d.frameBlinkStart=0;else if(d.frameBlinkStart++,d.frameBlinkStart>=pM){const c=this.#n[o][a][d.index];d.frameBlinkStart=0,d.blinkingOn=!d.blinkingOn,d.blinkingOn?c.intensity=lc:c.intensity=jl}!d.blinkingOn&&!d.enabled&&(d.isBlinking=!1,d.frameBlinkStart=void 0)}}});for(let r=0;r<So;r++)for(let o=0;o<t0;o++){for(const a of this.#t[r][o])a.used&&SM({instance:a,meshes:this.#e[r][o]});this.#e[r][o].forEach(a=>a.instanceMatrix.needsUpdate=!0)}}static load(e){e.forEach((t,n)=>{t.forEach((s,r)=>{s.forEach((o,a)=>{const l=this.#t[n][r][a];l.used=!0,l.enabled=o.enabled,l.isPressing=o.isPressing,l.isBlinking=o.isBlinking,l.frameBlinkStart=o.frameBlinkStart,l.blinkingOn=o.blinkingOn,l.framePressStart=o.framePressStart,l.buttonPosition.fromArray(o.position)})})})}static save(){return this.#t.map(e=>e.map(t=>t.map(n=>({enabled:n.enabled,isPressing:n.isPressing,isBlinking:n.isBlinking,frameBlinkStart:n.frameBlinkStart,blinkingOn:n.blinkingOn,framePressStart:n.framePressStart,position:n.buttonPosition.toArray()}))))}static addButton({type:e,color:t,position:n,rotation:s}){const r=this.#t[t][e].find(a=>!a.used);r.used=!0,r.enabled=!0;const o=this.#n[t][e][r.index];return o.visible=!0,o.intensity=jl,TM({instance:r,position:n,rotation:s,bulbLight:o}),r}static enable({type:e,color:t,index:n},s){const r=this.#t[t][e].find(o=>o.index===n);r.enabled=s}static blink({type:e,color:t,index:n},s){const r=this.#t[t][e].find(o=>o.index===n);r.isBlinking=s}static get interactiveObjects(){return this.#a}}async function yM({scene:i}){const t=(await i.loadModel(vM)).scene.children,n=[],s=[];for(let r=0;r<So;r++){const o=t[0],a=o.children[1].material.clone();a.color.setHex(ar[r].color);const l=o.children[2].material.clone();l.color.setHex(ar[r].background);const d=t[2],c=d.children[0].material.clone();c.color.setHex(ar[r].color);const u=d.children[1].material.clone();u.color.setHex(ar[r].background);const p=t[1],h=p.children[1].material.clone();h.color.setHex(ar[r].background),n.push([[o.children[0].material,a,l],[d.children[0].material,c,u],[p.children[0].material,h]]),s.push([[o.children[0].geometry,o.children[1].geometry,o.children[2].geometry],[d.children[0].geometry,d.children[1].geometry,d.children[2].geometry],[p.children[0].geometry,p.children[1].geometry]])}return{materials:n,geometries:s}}function wM({scene:i,materials:e,geometries:t,interactiveObjects:n,onClick:s}){const r=[];for(let o=0;o<So;o++){const a=[];for(let l=0;l<t0;l++){const d=[];for(let c=0;c<e[o][l].length;c++){const u=new Is(t[o][l][c],e[o][l][c],e0);for(let p=0;p<e0;p++)u.setMatrixAt(p,ac);u.active=c>0,u.userData={color:o,type:l,onClick:p=>s({color:o,type:l,instanceId:p})},i.addObject(u),d.push(u),n.push(u)}a.push(d)}r.push(a)}return r}function gM({scene:i,instances:e,bulbLights:t}){for(let n=0;n<So;n++){e[n]=[],t[n]=[];for(let s=0;s<t0;s++){e[n][s]=[],t[n][s]=[];for(let r=e[n][s].length;r<e0;r++){xM({type:s,color:n,instances:e});const o=new U2(fM,lc,hM,mM);o.castShadow=!1,t[n][s][r]=o,o.visible=!1,i.addObject(o)}}}}function xM({type:i,color:e,instances:t}){const s={index:t[e][i].length,type:i,color:e,position:new T,buttonPosition:new T,rotation:new _e,initialPosition:new T,initialRotation:new _e,matrix:new Be,used:!1,enabled:!1,isPressing:!1,isBlinking:!1,frameBlinkStart:-1,blinkingOn:!1,framePressStart:-1};return t[e][i].push(s),s}function TM({instance:i,position:e,rotation:t,bulbLight:n}){i.position.fromArray([e.x,e.y,e.z]),i.rotation.setFromEuler(new zt(t.x,t.y,t.z)),i.initialPosition.fromArray([e.x,e.y,e.z]),i.initialRotation.setFromEuler(new zt(t.x,t.y,t.z)),i.buttonPosition.fromArray([e.x,e.y,e.z]),n.position.fromArray([e.x,e.y+bM,e.z]),n.rotation.set(t.x,t.y,t.z)}function SM({instance:i,meshes:e}){i.matrix.compose(i.position,i.rotation,i.used?Ip:ac),e[0].setMatrixAt(i.index,i.matrix),i.matrix.compose(i.buttonPosition,i.rotation,i.used?Ip:ac);for(let t=1;t<e.length;t++)e[t].setMatrixAt(i.index,i.matrix)}const sr=[0,.16125,1.25],Vl=[2*Math.PI+Math.PI/10,0,0],Wp=[-.2,0,.2],jp=[-.4,.4];class PM{#e=[];#t;#n;#a;#o;#r;constructor({onPressDropButton:e,onPressActionButton:t,onPressStartButton:n}){this.#a=e,this.#o=t,this.#r=n}async initialize(){for(let e=0;e<Wp.length;e++)this.#e[e]=Tn.addButton({type:0,color:0,position:new T(Wp[e],sr[1],sr[2]),rotation:new T().fromArray(Vl)}),Tn.enable(this.#e[e],!1);this.#n=Tn.addButton({type:2,color:0,position:new T(jp[0],sr[1],sr[2]),rotation:new T().fromArray(Vl)}),Tn.enable(this.#n,!1),this.#t=Tn.addButton({type:1,color:0,position:new T(jp[1],sr[1],sr[2]),rotation:new T().fromArray(Vl)}),Tn.onPress=e=>{if(e===this.#t)this.#r();else if(this.#e.includes(e)){const t=this.#e.indexOf(e);this.#a(t)}else e===this.#n&&this.#o()},Tn.blink(this.#t,!0)}update(){}setDropButtonsOn(){for(const e of this.#e)Tn.on(e)}disableStartButton(){Tn.enable(this.#t,!1);for(const e of this.#e)Tn.enable(e,!0)}enableActionButton(){Tn.enable(this.#n,!0)}disableActionButton(){Tn.enable(this.#n,!1)}get interactiveObjects(){return Tn.interactiveObjects}}const Vp=Math.PI/60,RM=.1,O3=.001,LM=1e-4,Cp=.003,NM=.3,MM="./assets/pusher.glb",OM="door",zM="platform",HM="delivery-position",EM=5460902,Po=0,dc=1.5,z3=10,Mn={MOVING:Symbol.for("pusher-moving"),PREPARING_DELIVERY:Symbol.for("pusher-preparing-delivery"),OPENING_DOOR:Symbol.for("pusher-opening-door"),DELIVERING_BONUS:Symbol.for("pusher-delivering-bonus"),CLOSING_DOOR:Symbol.for("pusher-closing-door")},ui={IDLE:Symbol.for("pusher-lights-idle"),ACTIVATING:Symbol.for("pusher-lights-activating"),ROTATING:Symbol.for("pusher-lights-rotating"),DELIVERING:Symbol.for("pusher-lights-delivering")};class AM{constructor({scene:e,depositBonus:t}){this.#e=e,this.#r=t}#e;#t;#n;#a;#o;#r;#c;#i=new T;#s=new T;#d={state:Mn.MOVING,nextState:null,rewards:[],phase:0,platform:{},door:{position:0},lights:{state:ui.IDLE,nextState:null,frameLastRefresh:-1,headIndex:0,bulbs:[]}};async initialize(){const{parts:e,deliveryPosition:t,lightBulbsMaterials:n}=await jM({scene:this.#e});this.#t=e,this.#o=t,this.#c=n,VM({scene:this.#e,parts:e}),CM({lightBulbsMaterials:this.#c,lights:this.#d.lights}),this.#n=e.get(OM),this.#a=e.get(zM),e.forEach(({body:s,meshes:r})=>{r.forEach(({data:o})=>this.#e.addObject(o)),s.setEnabled(!0)})}update(){if(XM({pusher:this.#d}),IM({pusher:this.#d}),this.#d.state===Mn.DELIVERING_BONUS){const e=this.#d.rewards.shift();this.#r({reward:e,position:this.#o})}this.#i.setZ(Math.sin(this.#d.phase)*RM),this.#s.setZ(this.#d.door.position),this.#a.body.setNextKinematicTranslation(this.#i),this.#n.body.setNextKinematicTranslation(this.#i.sub(this.#s)),this.#t.forEach(({meshes:e,body:t})=>{e.forEach(({data:n})=>{n.position.copy(t.translation()),n.quaternion.copy(t.rotation())})}),this.#d.lights.state!==ui.IDLE&&this.#d.lights.bulbs.forEach((e,t)=>{this.#c[t].emissiveIntensity=e.intensity}),this.#d.nextState&&(this.#d.state=this.#d.nextState),this.#d.lights.nextState&&(this.#d.lights.state=this.#d.lights.nextState)}deliverBonus(e){this.#d.rewards.push(e),this.#d.state===Mn.MOVING&&(this.#d.state=Mn.PREPARING_DELIVERY)}get phase(){return this.#d.phase}save(){return{state:this.#d.state.description,nextState:this.#d.nextState?this.#d.nextState.description:null,phase:this.#d.phase,rewards:[...this.#d.rewards],platformBodyHandle:this.#a.body.handle,doorBodyHandle:this.#n.body.handle,door:{position:this.#d.door.position},lights:{state:this.#d.lights.state.description,nextState:this.#d.lights.nextState?this.#d.lights.nextState.description:null,frameLastRefresh:this.#d.lights.frameLastRefresh,headIndex:this.#d.lights.headIndex,bulbs:this.#d.lights.bulbs.map(e=>({intensity:e.intensity}))}}}load(e){this.#d.state=Symbol.for(e.state),this.#d.nextState=e.nextState?Symbol.for(e.nextState):null,this.#d.rewards=e.rewards,this.#d.phase=e.phase,this.#a.body=this.#e.worldBodies.get(e.platformBodyHandle),this.#n.body=this.#e.worldBodies.get(e.doorBodyHandle),this.#d.door.position=e.door.position,this.#d.lights.state=Symbol.for(e.lights.state),this.#d.lights.nextState=e.lights.nextState?Symbol.for(e.lights.nextState):null,this.#d.lights.frameLastRefresh=e.lights.frameLastRefresh,this.#d.lights.headIndex=e.lights.headIndex,this.#d.lights.bulbs=e.lights.bulbs.map(t=>({intensity:t.intensity}))}}function XM({pusher:i}){switch(i.nextState=null,i.state){case Mn.MOVING:i.phase=(i.phase+Vp)%(Math.PI*2);break;case Mn.PREPARING_DELIVERY:i.phase=(i.phase+Vp)%(Math.PI*2),i.lights.state===ui.IDLE&&(i.lights.state=ui.ACTIVATING),i.phase>Math.PI*1.5&&i.phase<Math.PI*1.5+O3&&(i.nextState=Mn.OPENING_DOOR);break;case Mn.OPENING_DOOR:i.door.position=i.door.position+Cp,i.door.position>NM&&(i.nextState=Mn.DELIVERING_BONUS);break;case Mn.DELIVERING_BONUS:i.nextState=Mn.CLOSING_DOOR;break;case Mn.CLOSING_DOOR:i.door.position>LM?i.door.position=i.door.position-Cp:(i.door.position=0,i.rewards.length>1?i.nextState=Mn.PREPARING_DELIVERY:i.nextState=Mn.MOVING);break}}function IM({pusher:i}){switch(i.lights.nextState=null,i.lights.state){case ui.IDLE:break;case ui.ACTIVATING:i.lights.frameLastRefresh=0,i.lights.nextState=ui.ROTATING;break;case ui.ROTATING:DM(i),i.state===Mn.DELIVERING_BONUS&&(i.lights.nextState=ui.DELIVERING);break;case ui.DELIVERING:WM(i),i.state===Mn.MOVING&&i.phase<Math.PI&&i.phase>.5*Math.PI-O3&&(i.lights.bulbs.forEach(e=>{e.intensity=Po}),i.lights.headIndex=0,i.lights.frameLastRefresh=-1,i.lights.nextState=ui.IDLE);break}}function DM(i){i.lights.frameLastRefresh++,i.lights.frameLastRefresh>z3&&(i.lights.frameLastRefresh=0,i.lights.bulbs.forEach((e,t)=>{e.intensity=t>=i.lights.headIndex*9&&t<(i.lights.headIndex+1)*9?dc:Po}),i.lights.headIndex=(i.lights.headIndex+2)%3)}function WM(i){if(i.lights.frameLastRefresh++,i.lights.frameLastRefresh>z3){const e=i.lights.bulbs[0].intensity;i.lights.frameLastRefresh=0,i.lights.bulbs.forEach(t=>{t.intensity=e==dc?Po:dc})}}async function jM({scene:i}){const t=(await i.loadModel(MM)).scene,n=new Map,s=new T,r=[];return t.traverse(o=>{if(o.isMesh){const{material:a}=o,l=a.userData,d=l.name;if(l.collider){const c=va(n,d);c.kinematic=c.kinematic||l.kinematic,c.meshes.push({friction:l.friction,restitution:l.restitution,kinematic:l.kinematic,cuboid:l.cuboid,rotation:l.rotation?new T().fromArray(l.rotation):void 0,size:l.size?new T().fromArray(l.size):void 0,data:o})}l.light?(r[o.material.userData.index]=o.material,va(n,d).meshes.push({data:o})):va(n,d).meshes.push({data:o})}else o.userData.collider?va(n,o.userData.name).colliders.push({friction:o.userData.friction,restitution:o.userData.restitution,kinematic:o.userData.kinematic,position:o.position,rotation:new T().fromArray(o.userData.rotation),size:new T().fromArray(o.userData.size)}):o.name===HM&&s.copy(o.position)}),{parts:n,lightBulbsMaterials:r,deliveryPosition:s}}function va(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[],colliders:[]},i.set(e,t)),t}function VM({scene:i,parts:e}){let t=0;e.forEach(n=>{const{meshes:s,kinematic:r,colliders:o}=n,a=n.body=r?i.createKinematicBody():i.createFixedBody();a.setEnabled(!1),s.forEach(({data:l,friction:d,restitution:c,cuboid:u})=>{if(u){const p=l.geometry.boundingBox,h=new T().addVectors(p.min,p.max).multiplyScalar(.5).toArray(),v=new T(p.max.x-p.min.x,p.max.y-p.min.y,p.max.z-p.min.z);i.createCuboidCollider({position:h,width:v.x,height:v.y,depth:v.z,friction:d,restitution:c},a).setCollisionGroups(1<<t%16<<16|1<<t%16),t++}}),o.forEach(({friction:l,restitution:d,position:c,rotation:u,size:p})=>{i.createCuboidCollider({position:c,width:p.x,height:p.y,depth:p.z,rotation:u,friction:l,restitution:d},a).setCollisionGroups(1<<t%16<<16|1<<t%16),t++})})}function CM({lightBulbsMaterials:i,lights:e}){i.forEach((t,n)=>{t.emissive.setHex(EM),t.emissiveIntensity=Po,e.bulbs[n]={intensity:Po}})}const n0="coin",i0=1280,Va=.03,pu=.007,Fp=.025,qp=.001,FM=[-.1125,0,.1125],Yp=[0,.9,-.32+pu/2],qM=[0,0,0],YM=[0,0,0,1],GM=new T(0,0,0),UM=new T(0,0,0),H3=new T(0,0,0),ZM=new T(1,1,1),kM=new zt(Math.PI/2,0,0),JM=.1,BM=1,KM=.5,QM=.5,_M=0,$M="./assets/coin.glb",eO=8;let cc=.2,uc=1;class Xt{static TYPE=n0;static MAX_INSTANCES=i0;static RADIUS=Va;static DEPTH=pu;static#e;static#t=[];static#n=[];static#a=[];static#o=0;static#r;static async initialize({scene:e,onSpawnedCoin:t}){this.#e=e,this.#r=t;const{materials:n,geometries:s}=await tO({scene:e});this.#t=nO({scene:e,materials:n,geometries:s}),this.#n=[],iO({scene:e,instances:this.#n})}static getCoin({index:e}){return this.#n[e]}static update(){if(this.#a.length&&(this.#o++,this.#o>=eO)){const{slot:e}=this.#a.shift(),t=this.#n.find(n=>!n.used);t.used=!0,ya({instance:t,slot:e}),t.body.setEnabled(!0),this.#r(t),this.#o=0}for(const e of this.#n)if(e.used){const t=e.body.linvel();e.linearSpeed=t.x*t.x+t.y*t.y+t.z*t.z,e.pendingImpulse&&e.body.mass()>0&&(e.body.applyImpulse(e.pendingImpulse,!0),e.pendingImpulse=null),Cl({instance:e,meshes:this.#t})}}static dropCoin({slot:e}){this.#a.push({slot:e})}static dropCoins({count:e}){let t;for(let n=0;n<e;n++){let s;do s=Math.floor(Math.random()*3);while(s===t);t=s,this.#a.push({slot:s})}}static depositCoin({position:e,rotation:t=new T(0,0,0),impulse:n}){const s=this.#n.find(r=>!r.used);return s.used=!0,ya({instance:s,position:e,rotation:t}),s.body.setEnabled(!0),n&&(s.pendingImpulse=n.clone()),s}static depositCoins({position:e,count:t}){e.x=-.3;for(let n=0;n<t;n++){const s=this.#n.find(o=>!o.used);s.used=!0,e.x+=Va*2,e.x>.3&&(e.x=-.3,e.z-=Va*2);const r=new T(0,0,0);ya({instance:s,position:e,rotation:r}),s.body.setEnabled(!0)}}static recycle(e){e.used=!1,e.linearSpeed=0,e.body.setEnabled(!1),ya({instance:e,hidden:!0}),Cl({instance:e,meshes:this.#t,forceRefresh:!0})}static get dynamicBodies(){return this.#n.filter(e=>e.used).map(e=>({object:e,objects:this,body:e.body}))}static get usedCoins(){return this.#n.filter(e=>e.used).length}static save(){return this.#n.map(e=>({position:e.position.toArray(),rotation:e.rotation.toArray(),used:e.used,bodyHandle:this.#n[e.index].body.handle,linearSpeed:e.linearSpeed,pendingImpulse:e.pendingImpulse?e.pendingImpulse.toArray():null}))}static load(e){e.forEach((t,n)=>{const s=this.#e.worldBodies.get(t.bodyHandle);this.#n[n]={...this.#n[n],position:new T().fromArray(t.position),rotation:new _e().fromArray(t.rotation),used:t.used,body:s,linearSpeed:t.linearSpeed,pendingImpulse:t.pendingImpulse?new T().fromArray(t.pendingImpulse):null};for(let r=0;r<s.numColliders();r++){const o=s.collider(r);o.userData={objectType:n0,index:n}}Cl({instance:this.#n[n],meshes:this.#t,forceRefresh:!0})})}static enableCcd(e,t){e&&e.body&&e.body.enableCcd(t)}static get friction(){return cc}static set friction(e){cc=e,this.#n.forEach(t=>{t.body.collider(0).setFriction(e)})}static get density(){return uc}static set density(e){uc=e,this.#n.forEach(t=>{t.body.collider(0).setDensity(e)})}}async function tO({scene:i}){const e=await i.loadModel($M);e.scene.traverse(a=>{a.isMesh&&(a.castShadow=!0,a.receiveShadow=!0)});const t=e.scene.children[0],n=t.children[0].material,s=t.children[1].material,r=t.children[0].geometry,o=t.children[1].geometry;return s.metalness=.35,n.metalness=.2,{materials:[n,s],geometries:[r,o]}}function nO({scene:i,materials:e,geometries:t}){const n=[];for(let s=0;s<e.length;s++){const r=new Is(t[s],e[s],i0);for(let o=0;o<i0;o++)r.setMatrixAt(o,H3);r.castShadow=!0,r.receiveShadow=!0,i.addObject(r),n.push(r)}return n}function iO({scene:i,instances:e}){for(let t=e.length;t<i0;t++)sO({scene:i,instances:e})}function sO({scene:i,instances:e}){const t=i.createDynamicBody();t.setEnabled(!1),t.setSoftCcdPrediction(JM),t.setAngularDamping(KM),t.setLinearDamping(QM),t.setAdditionalSolverIterations(BM);const n=e.length;i.createCylinderCollider({userData:{objectType:n0,index:n},radius:Va,height:pu,friction:cc,restitution:_M,density:uc},t);const s={objectType:n0,index:n,position:new T,rotation:new _e,body:t,matrix:new Be,used:!1,pendingImpulse:null,linearSpeed:0};return e.push(s),s}function ya({instance:i,hidden:e,position:t,rotation:n,slot:s=1}){if(e)i.position.fromArray(qM),i.rotation.fromArray(YM),i.body.setLinvel(GM,!1),i.body.setAngvel(UM,!1);else{if(t)i.position.copy(t);else{const r=Math.random();i.position.fromArray([FM[s]+(r<.5?-Fp:Fp)*Math.random()+(r<.5?-qp:qp),Yp[1],Yp[2]])}if(n)i.rotation.setFromEuler(new zt(n.x,n.y,n.z));else{const r=kM.clone();r.x+=Math.random()<=.5?Math.PI:0,i.rotation.setFromEuler(r)}}i.body.setTranslation(i.position),i.body.setRotation(i.rotation)}function Cl({instance:i,meshes:e,forceRefresh:t}){i.position.copy(i.body.translation()),i.rotation.copy(i.body.rotation()),i.matrix.compose(i.position,i.rotation,i.used?ZM:H3),(i.used||t)&&e.forEach(n=>{n.setMatrixAt(i.index,i.matrix),n.instanceMatrix.needsUpdate=!0})}const s0="token",r0=16,rO=.0375,oO=.0075,Fl=[0,.5,.55],o0=.6,Gp=.1,aO=[0,0,0],lO=[0,0,0,1],dO=new T(0,0,0),cO=new T(0,0,0),E3=new T(0,0,0),uO=new T(1,1,1),ql=new zt(0,0,0),pO=.1,fO=0,hO=0,mO=0,bO=.3,vO=.2,yO=.5,wO="./assets/token.glb",pc=[{color:255,background:16777215},{color:32768,background:16777215},{color:0,background:16777215},{color:16711935,background:16777215},{color:16711680,background:16777215},{color:16777215,background:16777215}],Ms=pc.length;class Qn{static TYPE=s0;static MAX_INSTANCES=r0;static TYPES=Ms;static#e;static#t;static#n;static async initialize({scene:e}){this.#e=e;const{materials:t,geometries:n}=await gO({scene:e});this.#t=xO({scene:e,materials:t,geometries:n}),this.#n=[],TO({scene:e,instances:this.#n})}static getToken({type:e,index:t}){return this.#n[e][t]}static update(){for(let e=0;e<Ms;e++){for(const t of this.#n[e])t.used&&Yl({instance:t,meshes:this.#t[e]});this.#t[e].forEach(t=>t.instanceMatrix.needsUpdate=!0)}}static dropToken({type:e}){const t=this.#n[e].find(n=>!n.used);t.used=!0,wa({instance:t}),t.body.setEnabled(!0)}static depositTokens({position:e,count:t}){for(let n=0;n<t;n++){const s=this.#n[Math.floor(Math.random()*(Ms-1))].find(o=>!o.used);s.used=!0,e.x=Math.random()*o0-o0/2;const r=new T(0,0,0);wa({instance:s,position:e,rotation:r}),s.body.setEnabled(!0)}}static depositToken({position:e,rotation:t}){const n=this.#n[Math.floor(Math.random()*(Ms-1))].find(s=>!s.used);return n.used=!0,wa({instance:n,position:e,rotation:t}),n.body.setEnabled(!0),n}static recycle(e){e.used=!1,e.body.setEnabled(!1),wa({instance:e,hidden:!0}),Yl({instance:e,meshes:this.#t[e.type]})}static get dynamicBodies(){const e=[];for(let t=0;t<Ms;t++)for(const n of this.#n[t])n.used&&e.push({object:n,objects:this,body:n.body});return e}static save(){return this.#n.map(e=>e.map(t=>({position:t.position.toArray(),rotation:t.rotation.toArray(),used:t.used,bodyHandle:this.#n[t.type][t.index].body.handle})))}static load(e){e.forEach((t,n)=>{t.forEach((s,r)=>{const o=this.#e.worldBodies.get(s.bodyHandle),a=this.#n[n][r];this.#n[n][r]={...a,position:new T().fromArray(s.position),rotation:new _e().fromArray(s.rotation),used:s.used,body:o};for(let l=0;l<o.numColliders();l++){const d=o.collider(l);d.userData={objectType:s0,type:n,index:r}}Yl({instance:this.#n[n][r],meshes:this.#t[n]})})})}}async function gO({scene:i}){const t=(await i.loadModel(wO)).scene.children,n=[],s=[];for(let r=0;r<t.length;r++){const o=t[r],a=o.children[0].material.clone();a.color.setHex(pc[r].color);const l=o.children[1].material.clone();l.color.setHex(pc[r].background),n.push([a,l]),s.push([o.children[0].geometry,o.children[1].geometry])}return{materials:n,geometries:s}}function xO({scene:i,materials:e,geometries:t}){const n=[];for(let s=0;s<Ms;s++){const r=[];for(let o=0;o<e[s].length;o++){const a=new Is(t[s][o],e[s][o],r0);for(let l=0;l<r0;l++)a.setMatrixAt(l,E3);i.addObject(a),r.push(a)}n.push(r)}return n}function TO({scene:i,instances:e}){for(let t=0;t<Ms;t++){e[t]=[];for(let n=e[t].length;n<r0;n++)SO({scene:i,type:t,instances:e})}}function SO({scene:i,type:e,instances:t}){const n=i.createDynamicBody();n.setEnabled(!1),n.setSoftCcdPrediction(pO),n.setAngularDamping(hO),n.setLinearDamping(mO),n.setAdditionalSolverIterations(fO);const s=t[e].length;i.createCylinderCollider({userData:{objectType:s0,type:e,index:s},radius:rO,height:oO,friction:bO,restitution:vO,density:yO},n);const r={objectType:s0,index:s,type:e,position:new T,rotation:new _e,body:n,matrix:new Be,used:!1};return t[e].push(r),r}function wa({instance:i,hidden:e,position:t,rotation:n}){e?(i.position.fromArray(aO),i.rotation.fromArray(lO),i.body.setLinvel(dO,!1),i.body.setAngvel(cO,!1)):(t?i.position.copy(t):i.position.fromArray([Fl[0]+Math.random()*o0-o0/2,Fl[1],Fl[2]+Math.random()*Gp-Gp/2]),n?i.rotation.setFromEuler(new zt(n.x,n.y,n.z)):i.rotation.setFromEuler(new zt(ql.x+Math.random()*Math.PI*2,ql.y+Math.random()*Math.PI*2,ql.z+Math.random()*Math.PI*2))),i.body.setTranslation(i.position),i.body.setRotation(i.rotation)}function Yl({instance:i,meshes:e}){i.position.copy(i.body.translation()),i.rotation.copy(i.body.rotation()),i.matrix.compose(i.position,i.rotation,i.used?uO:E3),e.forEach(t=>t.setMatrixAt(i.index,i.matrix))}const a0="card",l0=8,PO=.11,RO=.175,LO=.005,Gl=[0,.6,.5],d0=.2,Up=.2,NO=[0,0,0],MO=[0,0,0,1],OO=new T(0,0,0),zO=new T(0,0,0),A3=new T(0,0,0),HO=new T(1,1,1),Ul=new zt(0,0,0),EO=.1,AO=0,XO=0,IO=0,DO=.1,WO=.1,jO=.8,VO="./assets/card.glb",fc=[{color:16777215,background:12775},{color:16777215,background:47106},{color:16777215,background:16761095},{color:16777215,background:12189716},{color:16777215,background:5505255},{color:16777215,background:15155712},{color:0,background:16777215}],fr=fc.length;class Zn{static TYPE=a0;static MAX_INSTANCES=l0;static TYPES=fr;static#e;static#t;static#n;static async initialize({scene:e}){this.#e=e;const{materials:t,geometries:n}=await CO({scene:e});this.#t=FO({scene:e,materials:t,geometries:n}),this.#n=[],qO({scene:e,instances:this.#n})}static getCard({type:e,index:t}){return this.#n[e][t]}static update(){for(let e=0;e<fr;e++){for(const t of this.#n[e])t.used&&xa({instance:t,meshes:this.#t[e]});this.#t[e].forEach(t=>t.instanceMatrix.needsUpdate=!0)}}static depositCard({type:e,position:t,rotation:n}){const s=this.#n[e].find(r=>!r.used);return s.used=!0,ga({instance:s,position:t,rotation:n}),s.body.setEnabled(!0),xa({instance:s,meshes:this.#t[e]}),s}static dropCard({type:e}){const t=this.#n[e].find(n=>!n.used);t.used=!0,ga({instance:t}),t.body.setEnabled(!0)}static depositCards({position:e,count:t}){for(let n=0;n<t;n++){const s=this.#n[Math.floor(Math.random()*(fr-1))].find(o=>!o.used);s.used=!0,e.x=Math.random()*d0-d0/2;const r=new T(0,0,0);ga({instance:s,position:e,rotation:r}),s.body.setEnabled(!0)}}static recycle(e){e.used=!1,e.body.setEnabled(!1),ga({instance:e,hidden:!0}),xa({instance:e,meshes:this.#t[e.type]})}static get dynamicBodies(){const e=[];for(let t=0;t<fr;t++)for(const n of this.#n[t])n.used&&e.push({object:n,objects:this,body:n.body});return e}static save(){return this.#n.map(e=>e.map(t=>({position:t.position.toArray(),rotation:t.rotation.toArray(),used:t.used,bodyHandle:this.#n[t.type][t.index].body.handle})))}static load(e){e.forEach((t,n)=>{t.forEach((s,r)=>{const o=this.#e.worldBodies.get(s.bodyHandle),a=this.#n[n][r];this.#n[n][r]={...a,position:new T().fromArray(s.position),rotation:new _e().fromArray(s.rotation),used:s.used,body:o};for(let l=0;l<o.numColliders();l++){const d=o.collider(l);d.userData={objectType:a0,type:n,index:r}}xa({instance:this.#n[n][r],meshes:this.#t[n]})})})}}async function CO({scene:i}){const t=(await i.loadModel(VO)).scene.children,n=[],s=[];for(let r=0;r<t.length;r++){const o=t[r],a=o.children[0].material.clone();a.color.setHex(fc[r].color);const l=o.children[1].material.clone();l.color.setHex(fc[r].background),n.push([a,l]),s.push([o.children[0].geometry,o.children[1].geometry])}return{materials:n,geometries:s}}function FO({scene:i,materials:e,geometries:t}){const n=[];for(let s=0;s<fr;s++){const r=[];for(let o=0;o<e[s].length;o++){const a=new Is(t[s][o],e[s][o],l0);for(let l=0;l<l0;l++)a.setMatrixAt(l,A3);i.addObject(a),r.push(a)}n.push(r)}return n}function qO({scene:i,instances:e}){for(let t=0;t<fr;t++){e[t]=[];for(let n=e[t].length;n<l0;n++)YO({scene:i,type:t,instances:e})}}function YO({scene:i,type:e,instances:t}){const n=i.createDynamicBody();n.setEnabled(!1),n.setSoftCcdPrediction(EO),n.setAngularDamping(XO),n.setLinearDamping(IO),n.setAdditionalSolverIterations(AO);const s=t[e].length;i.createCuboidCollider({userData:{objectType:a0,type:e,index:s},width:RO,height:LO,depth:PO,friction:DO,restitution:WO,density:jO},n);const r={objectType:a0,index:s,type:e,position:new T,rotation:new _e,body:n,matrix:new Be,used:!1};return t[e].push(r),r}function ga({instance:i,hidden:e,position:t,rotation:n}){e?(i.position.fromArray(NO),i.rotation.fromArray(MO),i.body.setLinvel(OO,!1),i.body.setAngvel(zO,!1)):(t?i.position.copy(t):i.position.fromArray([Gl[0]+Math.random()*d0-d0/2,Gl[1],Gl[2]+Math.random()*Up-Up/2]),n?i.rotation.setFromEuler(new zt(n.x,n.y,n.z)):i.rotation.setFromEuler(new zt(Ul.x+Math.random()*Math.PI*2,Ul.y+Math.random()*Math.PI*2,Ul.z+Math.random()*Math.PI*2))),i.body.setTranslation(i.position),i.body.setRotation(i.rotation)}function xa({instance:i,meshes:e}){i.position.copy(i.body.translation()),i.rotation.copy(i.body.rotation()),i.matrix.compose(i.position,i.rotation,i.used?HO:A3),e.forEach(t=>t.setMatrixAt(i.index,i.matrix))}const c0="ingot",u0=8,Zl=[0,.6,.5],p0=.2,Zp=.2,GO=[0,0,0],UO=[0,0,0,1],ZO=new T(0,0,0),kO=new T(0,0,0),X3=new T(0,0,0),JO=new T(1,1,1),kl=new zt(0,0,0),BO=.1,KO=0,QO=0,_O=0,$O=.05,ez=0,tz=2,nz="./assets/ingot.glb";class Wi{static TYPE=c0;static MAX_INSTANCES=u0;static#e;static#t;static#n;static async initialize({scene:e}){this.#e=e;const{materials:t,geometries:n}=await iz({scene:e});this.#t=rz({scene:e,materials:t,geometries:n}),this.#n=[];const s=sz(this.#t[0].geometry);oz({scene:e,instances:this.#n,colliderData:s})}static getIngot({index:e}){return this.#n[e]}static update(){for(const e of this.#n)e.used&&Bl({instance:e,meshes:this.#t});this.#t.forEach(e=>e.instanceMatrix.needsUpdate=!0)}static dropIngot(){const e=this.#n.find(t=>!t.used);e.used=!0,Jl({instance:e}),e.body.setEnabled(!0)}static depositIngots({position:e,count:t}){for(let n=0;n<t;n++){const s=this.#n.find(o=>!o.used);s.used=!0,e.x=Math.random()*p0-p0/2;const r=new T(0,0,0);Jl({instance:s,position:e,rotation:r}),s.body.setEnabled(!0)}}static recycle(e){e.used=!1,e.body.setEnabled(!1),Jl({instance:e,hidden:!0}),Bl({instance:e,meshes:this.#t})}static get dynamicBodies(){const e=[];for(const t of this.#n)t.used&&e.push({object:t,objects:this,body:t.body});return e}static save(){return this.#n.map(e=>({position:e.position.toArray(),rotation:e.rotation.toArray(),used:e.used,bodyHandle:this.#n[e.index].body.handle}))}static load(e){e.forEach((t,n)=>{const s=this.#e.worldBodies.get(t.bodyHandle),r=this.#n[n];this.#n[n]={...r,position:new T().fromArray(t.position),rotation:new _e().fromArray(t.rotation),used:t.used,body:s};for(let o=0;o<s.numColliders();o++){const a=s.collider(o);a.userData={objectType:c0,index:n}}Bl({instance:this.#n[n],meshes:this.#t})})}}async function iz({scene:i}){const t=(await i.loadModel(nz)).scene.children[0].children,n=t[0].material,s=t[1].material;return{materials:[n,s],geometries:[t[0].geometry,t[1].geometry]}}function sz(i){const e=i.attributes.position,t=[],n=[],s=i.index;for(let r=0;r<e.count;r++)t.push(e.getX(r),e.getY(r),e.getZ(r));for(let r=0;r<s.count;r++)n.push(s.getX(r));return{vertices:t,indices:n}}function rz({scene:i,materials:e,geometries:t}){const n=[];for(let s=0;s<e.length;s++){const r=new Is(t[s],e[s],u0);for(let o=0;o<u0;o++)r.setMatrixAt(o,X3);i.addObject(r),n.push(r)}return n}function oz({scene:i,instances:e,colliderData:t}){for(let n=e.length;n<u0;n++)az({scene:i,instances:e,colliderData:t})}function az({scene:i,instances:e,colliderData:{vertices:t,indices:n}}){const s=i.createDynamicBody();s.setEnabled(!1),s.setSoftCcdPrediction(BO),s.setAngularDamping(QO),s.setLinearDamping(_O),s.setAdditionalSolverIterations(KO);const r=e.length;i.createConvexHullCollider({userData:{objectType:c0,index:r},vertices:t,indices:n,friction:$O,restitution:ez,density:tz},s);const o={objectType:c0,index:r,position:new T,rotation:new _e,body:s,matrix:new Be,used:!1};return e.push(o),o}function Jl({instance:i,hidden:e,position:t,rotation:n}){e?(i.position.fromArray(GO),i.rotation.fromArray(UO),i.body.setLinvel(ZO,!1),i.body.setAngvel(kO,!1)):(t?i.position.copy(t):i.position.fromArray([Zl[0]+Math.random()*p0-p0/2,Zl[1],Zl[2]+Math.random()*Zp-Zp/2]),n?i.rotation.setFromEuler(new zt(n.x,n.y,n.z)):i.rotation.setFromEuler(new zt(kl.x+Math.random()*Math.PI*2,kl.y+Math.random()*Math.PI*2,kl.z+Math.random()*Math.PI*2))),i.body.setTranslation(i.position),i.body.setRotation(i.rotation)}function Bl({instance:i,meshes:e}){i.position.copy(i.body.translation()),i.rotation.copy(i.body.rotation()),i.matrix.compose(i.position,i.rotation,i.used?JO:X3),e.forEach(t=>t.setMatrixAt(i.index,i.matrix))}const fu=24,lz=.04,dz=.055,cz=.002,uz=[0,0,0],pz=[0,0,0,1],I3=new T(0,0,0);new T(1,1,1);const fz="./assets/digit.glb",f0=11,lo=[{color:16777215,background:0},{color:0,background:16777215},{color:65280,background:0}],Ro=lo.length;class rn{static MAX_INSTANCES=fu;static TYPES=f0;static COLORS=Ro;static WIDTH=lz;static HEIGHT=dz;static DEPTH=cz;static#e;static#t;static async initialize({scene:e}){const{materials:t,geometries:n}=await hz({scene:e});this.#e=mz({scene:e,materials:t,geometries:n}),this.#t=[],bz({instances:this.#t})}static update(){for(let e=0;e<Ro;e++)for(let t=0;t<f0;t++){for(const n of this.#t[e][t])n.used&&Jp({instance:n,meshes:this.#e[e][t]});this.#e[e][t].forEach(n=>n.instanceMatrix.needsUpdate=!0)}}static addDigit({type:e,color:t,position:n,rotation:s,scale:r}){const o=this.#t[t][e].find(a=>!a.used);return o.used=!0,o.initialPosition=n,o.initialRotation=s,o.initialScale=r,kp({instance:o,position:n,rotation:s,scale:r}),o}static setVisible(e,t){kp({instance:e,hidden:!t,position:e.initialPosition,rotation:e.initialRotation,scale:e.initialScale}),Jp({instance:e,meshes:this.#e[e.color][e.type]})}static getBackgroundColor(e){return lo[e].background}}async function hz({scene:i}){const t=(await i.loadModel(fz)).scene.children,n=[],s=[];for(let r=0;r<Ro;r++){const o=[],a=[];for(let c=0;c<t.length-1;c++){const u=t[c],p=u.children[0].material.clone();p.color.setHex(lo[r].color);const h=u.children[1].material.clone();h.color.setHex(lo[r].background),o.push([p,h]),a.push([u.children[0].geometry,u.children[1].geometry])}const l=t[t.length-1],d=l.material.clone();d.color.setHex(lo[r].background),o.push([d]),a.push([l.geometry]),n.push(o),s.push(a)}return{materials:n,geometries:s}}function mz({scene:i,materials:e,geometries:t}){const n=[];for(let s=0;s<Ro;s++){const r=[];for(let o=0;o<f0;o++){const a=[];for(let l=0;l<e[s][o].length;l++){const d=new Is(t[s][o][l],e[s][o][l],fu);i.addObject(d),a.push(d)}r.push(a)}n.push(r)}return n}function bz({instances:i}){for(let e=0;e<Ro;e++){i[e]=[];for(let t=0;t<f0;t++){i[e][t]=[];for(let n=i[e][t].length;n<fu;n++)vz({type:t,color:e,instances:i})}}}function vz({type:i,color:e,instances:t}){const s={index:t[e][i].length,type:i,color:e,position:new T,rotation:new _e,scale:new T(1,1,1),matrix:new Be,used:!1};return t[e][i].push(s),s}function kp({instance:i,hidden:e,position:t,rotation:n,scale:s}){e?(i.position.fromArray(uz),i.rotation.fromArray(pz),i.scale.fromArray(I3)):(i.position.fromArray([t.x,t.y,t.z]),i.rotation.setFromEuler(new zt(n.x,n.y,n.z)),i.scale.fromArray([s.x,s.y,s.z]))}function Jp({instance:i,meshes:e}){i.matrix.compose(i.position,i.rotation,i.used?i.scale:I3),e.forEach(t=>t.setMatrixAt(i.index,i.matrix))}class yz{constructor({scene:e}){this.#e=e,this.#t=new WeakMap}#e;#t;initialize(){}update(){const e=new WeakMap;this.#e.forEachCollision((t,n)=>{if(t.onIntersect!==void 0||n.onIntersect!==void 0){Bp(e,t,n),Bp(e,n,t);let s=!1;this.#t.has(t)&&this.#t.get(t).has(n)&&(s=!0),!s&&t.onIntersect!==void 0&&t.onIntersect(n)}}),this.#t=e}}function Bp(i,e,t){i.has(e)||i.set(e,new WeakSet),i.get(e).add(t)}const wz=10,Kn=.015,gz=10;class Ta{constructor({scene:e,position:t,rotation:n,scale:s,digitsCount:r,color:o}){this.#e=e,this.#t=r,this.#n=o,this.#a=t,this.#o=n,this.#r=s||[1,1,1]}#e;#t;#n;#a;#o;#r;#c=[];#i=0;async initialize(){for(let e=0;e<this.#t;e++){this.#c[e]=[];for(let t=0;t<gz;t++){const n=this.#a[0]+e*rn.WIDTH*this.#r[0],s=this.#a[1],r=this.#a[2];this.#c[e][t]=rn.addDigit({type:t,color:this.#n,position:new T(n,s,r),rotation:new T(Math.PI/2+this.#o[0],this.#o[1],this.#o[2]),scale:new T(this.#r[0],this.#r[2],this.#r[1])})}}this.#s()}#s(){const e=new cs,t=this.#t*rn.WIDTH,n=new zr({color:rn.getBackgroundColor(this.#n),roughness:.5,metalness:0}),s=new Kt(new ti((t+2*Kn)*this.#r[0],Kn*this.#r[1],rn.DEPTH*this.#r[2]),n);s.position.set((t/2-rn.WIDTH/2)*this.#r[0],(rn.HEIGHT/2+Kn/2)*this.#r[1],0);const r=new Kt(new ti((t+2*Kn)*this.#r[0],Kn*this.#r[1],rn.DEPTH*this.#r[2]),n);r.position.set((t/2-rn.WIDTH/2)*this.#r[0],(-.055/2-Kn/2)*this.#r[1],0);const o=new Kt(new ti(Kn*this.#r[0],(rn.HEIGHT+2*Kn)*this.#r[1],rn.DEPTH*this.#r[2]),n);o.position.set((-Kn/2-rn.WIDTH/2)*this.#r[0],0,0);const a=new Kt(new ti(Kn*this.#r[0],(rn.HEIGHT+2*Kn)*this.#r[1],rn.DEPTH*this.#r[2]),n);a.position.set((t+Kn/2-rn.WIDTH/2)*this.#r[0],0,0),e.add(s),e.add(r),e.add(o),e.add(a),this.#e.addObject(e),e.position.fromArray(this.#a),e.rotation.fromArray([this.#o[0],this.#o[1],this.#o[2]])}set(e){const t=String(Math.max(0,e)).padStart(this.#t,"0").split("");for(let n=0;n<this.#t;n++)for(let s=0;s<10;s++){const r=this.#c[n][s];rn.setVisible(r,s==t[n])}}update(){this.#i++,this.#i>wz&&(rn.update(),this.#i=0)}}const xz=8,Tz=0,Sz=[-.35,1.115,-.33],Pz=[0,0,0],Rz=4,Lz=0,Nz=[.79,1.115,-.33],Mz=[0,0,0],Oz=6,zz=0,Hz=[.15,1.115,-.33],Ez=[0,0,0],Az=4,Xz=0,Iz=[-.8275,.22,.77],Dz=[0,0,0],Wz=[.7,.7,1];class jz{constructor({scene:e,cabinet:t,state:n}){this.#e=e,this.#t=t,this.#n=n}#e;#t;#n;#a;#o;#r;#c;async initialize(){this.#a=new Ta({scene:this.#e,position:Sz,rotation:Pz,digitsCount:xz,color:Tz}),await this.#a.initialize(),this.#o=new Ta({scene:this.#e,position:Hz,rotation:Ez,digitsCount:Oz,color:zz}),await this.#o.initialize(),this.#r=new Ta({scene:this.#e,position:Nz,rotation:Mz,digitsCount:Rz,color:Lz}),await this.#r.initialize(),this.#c=new Ta({scene:this.#e,position:Iz,rotation:Dz,scale:Wz,digitsCount:Az,color:Xz}),await this.#c.initialize()}update(){this.#a.set(this.#n.score),this.#o.set(this.#n.points),this.#r.set(this.#n.coins),this.#c.set(this.#t.coinsInPlay),this.#a.update(),this.#r.update(),this.#c.update(),this.#o.update()}}const D3=15198183,Vz=16777215,W3=.1,Cz=.25,Fz=16777215,j3=0,qz=.25,h0=5,Yz=6,Kl=[0,.335,-.27],Gz=.6,Uz=.01,Kp=.04,Zz=-.22,Qp=.22,kz=.075,Jz=1/5,Bz=5,Kz=5,_p="sensor-gate",Qz="./assets/sensor-gate.glb",Bt={OFF:Symbol.for("sensor-gate-off"),ACTIVATING:Symbol.for("sensor-gate-activating"),FLASHING_ON:Symbol.for("sensor-gate-flashing-on"),FLASHING_OFF:Symbol.for("sensor-gate-flashing-off"),LOCKED_ON:Symbol.for("sensor-gate-locked-on")},on={IDLE:Symbol.for("sensor-letter-idle"),ACTIVATING:Symbol.for("sensor-letter-activating"),FLASHING_ON:Symbol.for("sensor-letter-flashing-on"),FLASHING_OFF:Symbol.for("sensor-letter-flashing-off"),AWAITING_BONUS_DELIVERY:Symbol.for("sensor-letter-awaiting-bonus-delivery"),AWAITING_BONUS_DELIVERED:Symbol.for("sensor-letter-awaiting-bonus-delivered")};class _z{constructor({scene:e,onBonusWon:t,onCoinFallen:n}){this.#e=e,this.#t=t,this.#n=n}#e;#t;#n;#a;#o;#r={state:on.IDLE,nextState:null,frameFlashStart:-1,flashCount:0,letters:[{state:Bt.OFF,nextState:null,frameFlashStart:-1,flashCount:0},{state:Bt.OFF,nextState:null,frameFlashStart:-1,flashCount:0},{state:Bt.OFF,nextState:null,frameFlashStart:-1,flashCount:0},{state:Bt.OFF,nextState:null,frameFlashStart:-1,flashCount:0},{state:Bt.OFF,nextState:null,frameFlashStart:-1,flashCount:0},{state:Bt.OFF,nextState:null,frameFlashStart:-1,flashCount:0}]};async initialize(){this.#a=await tH({scene:this.#e}),this.#o=this.#e.createCuboidCollider({width:Gz,height:Uz,depth:Kp,position:[Kl[0],Kl[1],Kl[2]-Kp],sensor:!0,userData:{objectType:_p,onIntersect:e=>$p({userData:e,sensor:this.#r,onCoinFallen:this.#n})}})}update(){this.#r.letters.forEach(e=>eH({letter:e})),this.#r.state===on.IDLE&&this.#r.letters.every(e=>e.state===Bt.LOCKED_ON)&&(this.#r.state=on.ACTIVATING),$z({sensor:this.#r}),this.#r.state===on.AWAITING_BONUS_DELIVERED&&(this.#r.letters.forEach(e=>e.state=Bt.OFF),this.#t()),this.#r.letters.forEach((e,t)=>{const n=this.#a[t];e.state===Bt.FLASHING_ON||this.#r.state===on.FLASHING_ON||this.#r.state===on.AWAITING_BONUS_DELIVERY||this.#r.state===on.IDLE&&e.state===Bt.LOCKED_ON?(n.color.setHex(Vz),n.opacity=Cz,n.emissiveIntensity=qz):(n.color.setHex(D3),n.opacity=W3,n.emissiveIntensity=j3)}),this.#r.nextState&&(this.#r.state=this.#r.nextState),this.#r.letters.forEach(e=>{e.nextState&&(e.state=e.nextState)})}save(){return{colliderHandle:this.#o.handle,sensor:{state:this.#r.state.description,nextState:this.#r.nextState?this.#r.nextState.description:null,frameFlashStart:this.#r.frameFlashStart,flashCount:this.#r.flashCount,letters:this.#r.letters.map(e=>({state:e.state.description,nextState:e.nextState?e.nextState.description:null,frameFlashStart:e.frameFlashStart,flashCount:e.flashCount}))}}}load(e){this.#o=this.#e.worldColliders.get(e.colliderHandle),this.#o.userData={objectType:_p,onIntersect:t=>$p({sensor:this.#r,userData:t,onCoinFallen:this.#n})},this.#r.state=Symbol.for(e.sensor.state),this.#r.nextState=e.sensor.nextState?Symbol.for(e.sensor.nextState):null,this.#r.frameFlashStart=e.sensor.frameFlashStart,this.#r.flashCount=e.sensor.flashCount,this.#r.letters.forEach((t,n)=>{t.state=Symbol.for(e.sensor.letters[n].state),t.nextState=e.sensor.letters[n].nextState?Symbol.for(e.sensor.letters[n].nextState):null,t.frameFlashStart=e.sensor.letters[n].frameFlashStart,t.flashCount=e.sensor.letters[n].flashCount})}}function $p({sensor:i,userData:e,onCoinFallen:t}){if(e.objectType===Xt.TYPE){const n=Xt.getCoin(e);if(n){t(n);const s=n.position.x;if(s>Zz&&s<Qp){const r=Math.floor((s+Qp)/kz),o=i.letters[r];i.state===on.IDLE&&o.state===Bt.OFF&&(o.state=Bt.ACTIVATING)}}}}function $z({sensor:i}){switch(i.nextState=null,i.state){case on.ACTIVATING:i.frameFlashStart=0,i.nextState=on.FLASHING_ON;break;case on.FLASHING_ON:i.frameFlashStart++,i.frameFlashStart>h0&&(i.frameFlashStart=0,i.flashCount<Bz?i.nextState=on.FLASHING_OFF:i.nextState=on.AWAITING_BONUS_DELIVERY);break;case on.FLASHING_OFF:i.frameFlashStart++,i.frameFlashStart>h0&&(i.frameFlashStart=0,i.flashCount++,i.nextState=on.FLASHING_ON);break;case on.AWAITING_BONUS_DELIVERY:i.flashCount=0,i.frameFlashStart=-1,i.nextState=on.AWAITING_BONUS_DELIVERED;break;case on.AWAITING_BONUS_DELIVERED:i.nextState=on.IDLE;break}}function eH({letter:i}){switch(i.nextState=null,i.state){case Bt.OFF:break;case Bt.ACTIVATING:Math.random()<Jz?(i.nextState=Bt.FLASHING_ON,i.frameFlashStart=0):i.nextState=Bt.OFF;break;case Bt.FLASHING_ON:i.frameFlashStart++,i.frameFlashStart>h0&&(i.frameFlashStart=0,i.flashCount<Kz?i.nextState=Bt.FLASHING_OFF:i.nextState=Bt.LOCKED_ON);break;case Bt.FLASHING_OFF:i.frameFlashStart++,i.frameFlashStart>h0&&(i.frameFlashStart=0,i.flashCount++,i.nextState=Bt.FLASHING_ON);break;case Bt.LOCKED_ON:i.flashCount=0,i.frameFlashStart=-1;break}}async function tH({scene:i}){const t=(await i.loadModel(Qz)).scene.children[0],n=[];for(let s=0;s<Yz;s++){const r=t.children[s].material;r.color.setHex(D3),r.transparent=!0,r.opacity=W3,r.emissiveIntensity=j3,r.emissive.setHex(Fz),t.children[s].material=r,n.push(r)}return i.addObject(t),n}const Sa=8,ef=Math.PI/20,nH=Math.PI/10,iH=Math.PI/90,sH=Math.PI/60,rH=10,tf=3,oH=100,aH="./assets/reels-box.glb",hu=.2,lH=1,dH=16502858,cH=16502858,I0=0,uH=1.5,pH=5,fH=10,mn={IDLE:Symbol.for("reels-box-idle"),ACTIVATING:Symbol.for("reels-box-activating"),SPINNING_REELS:Symbol.for("reels-box-spinning-reels"),STOPPING:Symbol.for("reels-box-stopping"),PREPARING_BONUS_DELIVERY:Symbol.for("reels-box-preparing-bonus-delivery"),DELIVERING_BONUS:Symbol.for("reels-box-delivering-bonus")},Cn={IDLE:Symbol.for("reel-idle"),STARTING:Symbol.for("reel-starting"),ACCELERATING:Symbol.for("reel-accelerating"),SPINNING:Symbol.for("reel-spinning"),DECELERATING:Symbol.for("reel-decelerating")},Nn={IDLE:Symbol.for("reels-box-lights-idle"),ACTIVATING:Symbol.for("reels-box-lights-activating"),STARTING_ROTATING:Symbol.for("reels-box-lights-starting-rotating"),ROTATING:Symbol.for("reels-box-lights-rotating"),STARTING_BLINKING:Symbol.for("reels-box-lights-starting-blinking"),BLINKING:Symbol.for("reels-box-lights-blinking"),STOPPING_BLINKING:Symbol.for("reels-box-lights-stopping-blinking")};class hH{constructor({scene:e,onBonusWon:t}){this.#e=e,this.#a=t}#e;#t;#n;#a;#o={state:mn.IDLE,nextState:null,pendingSpins:0,frameActive:-1,reels:[{state:Cn.IDLE,nextState:null,index:0,rotation:0,previousRotation:0,currentSpeed:0,targetIndex:-1,targetRotation:-1},{state:Cn.IDLE,nextState:null,index:0,rotation:0,previousRotation:0,currentSpeed:0,targetIndex:-1,targetRotation:-1},{state:Cn.IDLE,nextState:null,index:0,rotation:0,previousRotation:0,currentSpeed:0,targetIndex:-1,targetRotation:-1}],lights:{state:Nn.IDLE,nextState:null,headIndex:0,frameLastRefresh:-1,bulbs:[]}};async initialize(){const e=this.#e,{reelsMeshes:t,lightBulbsMaterials:n}=await yH({scene:e});this.#n=t,this.#t=n,wH({lightBulbsMaterials:n,lights:this.#o.lights})}update(){const e=this.#o,{state:t,reels:n,lights:s}=e;t!==mn.IDLE&&(mH({reelsBox:e}),vH({reelsBox:e}),n.forEach(r=>bH({reel:r})),n.forEach((r,o)=>this.#n[o].rotation.x=r.rotation),t===mn.DELIVERING_BONUS&&this.#a(n.map(r=>r.index))),s.state!==Nn.IDLE&&s.bulbs.forEach((r,o)=>{this.#t[o].emissiveIntensity=r.intensity,this.#t[o].opacity=r.opacity}),e.nextState&&(e.state=e.nextState),n.forEach(r=>{r.nextState&&(r.state=r.nextState)}),s.nextState&&(s.state=s.nextState)}spinReels(){this.#o.state===mn.IDLE?this.#o.state=mn.ACTIVATING:this.#o.pendingSpins++}save(){return{state:this.#o.state.description,nextState:this.#o.nextState?this.#o.nextState.description:null,pendingSpins:this.#o.pendingSpins,frameActive:this.#o.frameActive,reels:this.#o.reels.map(e=>({state:e.state.description,nextState:e.nextState?e.nextState.description:null,index:e.index,rotation:e.rotation,previousRotation:e.previousRotation,currentSpeed:e.currentSpeed,targetIndex:e.targetIndex,targetRotation:e.targetRotation})),lights:{state:this.#o.lights.state.description,headIndex:this.#o.lights.headIndex,frameLastRefresh:this.#o.lights.frameLastRefresh,bulbs:this.#o.lights.bulbs.map(e=>({intensity:e.intensity}))}}}load(e){this.#o.state=Symbol.for(e.state),this.#o.nextState=e.nextState?Symbol.for(e.nextState):null,this.#o.pendingSpins=e.pendingSpins,this.#o.frameActive=e.frameActive,this.#o.reels.forEach((t,n)=>{t.state=Symbol.for(e.reels[n].state),t.nextState=e.reels[n].nextState?Symbol.for(e.reels[n].nextState):null,t.index=e.reels[n].index,t.rotation=e.reels[n].rotation,t.targetIndex=e.reels[n].targetIndex,t.targetRotation=e.reels[n].targetRotation,t.previousRotation=e.reels[n].previousRotation,t.currentSpeed=e.reels[n].currentSpeed,this.#n[n].rotation.x=t.rotation}),this.#o.lights.state=Symbol.for(e.lights.state),this.#o.lights.headIndex=e.lights.headIndex,this.#o.lights.frameLastRefresh=e.lights.frameLastRefresh,this.#o.lights.bulbs.forEach((t,n)=>{t.intensity=e.lights.bulbs[n].intensity})}}function mH({reelsBox:i}){switch(i.nextState=null,i.state){case mn.ACTIVATING:i.reels.forEach(e=>e.state=Cn.STARTING),i.nextState=mn.SPINNING_REELS,i.lights.state=Nn.ACTIVATING;break;case mn.SPINNING_REELS:i.reels.every(e=>e.state===Cn.IDLE)&&(i.frameActive=0,i.nextState=mn.STOPPING);break;case mn.STOPPING:i.frameActive++,i.frameActive>oH&&(i.frameActive=0,i.nextState=mn.PREPARING_BONUS_DELIVERY);break;case mn.PREPARING_BONUS_DELIVERY:i.nextState=mn.DELIVERING_BONUS;break;case mn.DELIVERING_BONUS:i.pendingSpins>0?(i.pendingSpins--,i.nextState=mn.ACTIVATING):i.nextState=mn.IDLE;break}}function bH({reel:i}){switch(i.nextState=null,i.state){case Cn.IDLE:break;case Cn.STARTING:i.targetIndex=Math.floor(Math.random()*Sa);const e=Math.floor(Math.random()*(rH-tf+1))+tf,t=i.targetIndex-i.index+(i.targetIndex<=i.index?Sa:0);i.targetRotation=i.rotation+e*Math.PI*2+t*(Math.PI*2/Sa),i.previousRotation=i.rotation,i.currentSpeed=0,i.nextState=Cn.ACCELERATING;break;case Cn.ACCELERATING:i.currentSpeed<nH&&(i.currentSpeed+=iH),(i.rotation-i.previousRotation>Math.PI||i.targetRotation-i.rotation<0)&&(i.nextState=Cn.SPINNING),i.rotation+=i.currentSpeed;break;case Cn.SPINNING:i.targetRotation-i.rotation<Math.PI&&(i.nextState=Cn.DECELERATING),i.rotation+=i.currentSpeed;break;case Cn.DECELERATING:i.currentSpeed>ef?i.currentSpeed-=sH:i.currentSpeed=ef,i.targetRotation-i.rotation<0?(i.index=i.targetIndex,i.rotation=i.index*(Math.PI*2/Sa),i.previousRotation=i.rotation,i.targetIndex=-1,i.targetRotation=-1,i.currentSpeed=0,i.nextState=Cn.IDLE):i.rotation+=i.currentSpeed;break}}function vH({reelsBox:i}){switch(i.lights.nextState=null,i.lights.state){case Nn.IDLE:break;case Nn.ACTIVATING:i.lights.nextState=Nn.STARTING_ROTATING;break;case Nn.STARTING_ROTATING:i.lights.frameLastRefresh=0,i.lights.nextState=Nn.ROTATING;break;case Nn.ROTATING:i.lights.frameLastRefresh++,i.lights.frameLastRefresh>fH&&(i.lights.headIndex=(i.lights.headIndex+1)%3,i.lights.bulbs.forEach((e,t)=>{Pa(e,t%3===i.lights.headIndex||(t+1)%3===i.lights.headIndex)}),i.lights.frameLastRefresh=0),i.state===mn.STOPPING&&(i.lights.nextState=Nn.STARTING_BLINKING);break;case Nn.STARTING_BLINKING:i.lights.bulbs.forEach((e,t)=>Pa(e,t%2===0)),i.lights.headIndex=0,i.lights.frameLastRefresh=0,i.lights.nextState=Nn.BLINKING;break;case Nn.BLINKING:i.lights.frameLastRefresh++,i.lights.frameLastRefresh>pH&&(i.lights.bulbs.forEach(e=>Pa(e,e.intensity===I0)),i.lights.frameLastRefresh=0),i.state===mn.PREPARING_BONUS_DELIVERY&&(i.lights.nextState=Nn.STOPPING_BLINKING);break;case Nn.STOPPING_BLINKING:i.lights.bulbs.forEach(e=>Pa(e,!1)),i.lights.frameLastRefresh=-1,i.lights.nextState=Nn.IDLE;break}}async function yH({scene:i}){const e=[],t=[],n=await i.loadModel(aH);return n.scene.traverse(s=>{s.isMesh&&(s.userData.reel?e[s.userData.index]=s:s.material.userData.light&&(t[s.material.userData.index]=s.material=new F2({color:dH,emissive:cH,emissiveIntensity:I0,opacity:hu,transparent:!0})))}),i.addObject(n.scene),{reelsMeshes:e,lightBulbsMaterials:t}}function wH({lightBulbsMaterials:i,lights:e}){i.forEach((t,n)=>{e.bulbs[n]={intensity:I0,opacity:hu,frameLastRefresh:-1}})}function Pa(i,e){e?(i.intensity=uH,i.opacity=lH):(i.intensity=I0,i.opacity=hu)}const gH="./assets/excavator.glb",xH=new T(0,1,0),TH="beacon-light-bulb",SH="beacon-light-mirror",hc="rotating-platform",PH="drop-position",RH="beacon-light-position",LH="joint-rotating-platform",NH="joint-arm-rotating-platform",MH="joint-arms",OH="joint-jaws",zH="joint-jaw-1",HH="joint-jaw-2",EH="joint-jaw-3",AH="joint-jaw-4",St=5e4,At=2e4,XH=.1,IH=Math.PI/3,DH=.2,WH=1.5,jH=16760737,VH=.5,CH=.1,Ql=0,FH=10,qH=.3,YH=1,nf=.06,GH=65537,st={IDLE:Symbol.for("excavator-idle"),ACTIVATING:Symbol.for("excavator-activating"),OPENING_JAWS:Symbol.for("excavator-opening-jaws"),MOVING_DOWN:Symbol.for("excavator-moving-down"),CLOSING_JAWS:Symbol.for("excavator-closing-jaws"),PICKING:Symbol.for("excavator-picking"),MOVING_UP:Symbol.for("excavator-moving-up"),MOVING_TO_DROP_ZONE:Symbol.for("excavator-moving-to-drop-zone"),EXTENDING_ARMS:Symbol.for("excavator-extending-arms"),DROPPING:Symbol.for("excavator-dropping"),CLOSING_JAWS_AFTER_DROPPING:Symbol.for("excavator-closing-jaws-after-dropping"),RETRACTING_ARMS:Symbol.for("excavator-retracting-arms"),MOVING_TO_BASE:Symbol.for("excavator-moving-to-base"),PREPARING_IDLE:Symbol.for("excavator-preparing-idle")};class UH{#e;#t;#n;#a;#o;#r;#c;#i;#s;#d={state:st.IDLE,pendingPicks:0,beaconLightAngle:0};constructor({scene:e,onPick:t,canActivate:n,onGetObject:s,onRecycleObject:r}){this.#e=e,this.#t=n,this.#n=t,this.#o=s,this.#a=r}async initialize(){const e=this.#e,{parts:t,joints:n,dropPosition:s,beaconLightPosition:r}=await kH({scene:e});this.#r=s,this.#i=r;const{trapSensor:o}=JH({scene:e,parts:t,joints:n,trapSensor:this.#s,onRecycleObject:a=>{this.#o(a)&&this.#a(a)}});this.#s=o,t.forEach(({body:a,meshes:l})=>{l.forEach(({data:d})=>this.#e.addObject(d)),a.setEnabled(!0)}),t.get(hc).body.setEnabledRotations(!1,!1,!1),Object.assign(this.#d,{parts:t,joints:n}),this.#l.joint.configureMotor(0,1,St,At),this.#b.joint.configureMotor(0,3.7,St,At),this.#g.joint.configureMotor(0,0,1,0),this.#c=new G2(jH,Ql,DH,IH,VH,CH),this.#c.position.copy(this.#i),this.#e.addObject(this.#c),this.#e.addObject(this.#c.target)}update(){ZH({excavator:this.#d,joints:{platformJoint:this.#p,platformArmJoint:this.#l,armsJoint:this.#b,jaw1Joint:this.#m,jaw2Joint:this.#h,jaw3Joint:this.#v,jaw4Joint:this.#y},canActivate:()=>this.#t(this)});const{state:e,parts:t}=this.#d,n=this.#T.meshes[0].data.material;if(e!==st.IDLE){e===st.PICKING&&this.#n(this.#r),e===st.MOVING_TO_DROP_ZONE&&this.#f.body.setEnabledRotations(!1,!0,!1),e===st.EXTENDING_ARMS&&this.#f.body.setEnabledRotations(!1,!1,!1),e===st.MOVING_TO_BASE&&this.#f.body.setEnabledRotations(!1,!0,!1),e===st.CLOSING_JAWS_AFTER_DROPPING&&this.#f.body.setEnabledRotations(!1,!1,!1),n.emissiveIntensity=FH,n.opacity=YH,this.#c.intensity=WH;const s=new _e().setFromAxisAngle(xH,this.#d.beaconLightAngle);this.#S.body.setNextKinematicTranslation(new T(0,0,0).sub(this.#i).applyQuaternion(s).add(this.#i)),this.#S.body.setNextKinematicRotation(s),this.#c.target.position.set(this.#c.position.x+Math.sin(this.#d.beaconLightAngle),this.#c.position.y,this.#c.position.z+Math.cos(this.#d.beaconLightAngle))}else n.emissiveIntensity=Ql,n.opacity=qH,this.#c.intensity=Ql;t.forEach(({meshes:s,body:r})=>s.forEach(({data:o})=>{o.position.copy(r.translation()),o.quaternion.copy(r.rotation())})),this.#d.nextState&&(this.#d.state=this.#d.nextState)}save(){const e={},t={};return this.#d.joints.forEach((n,s)=>{e[s]={jointHandle:n.joint.handle}}),this.#d.parts.forEach((n,s)=>{const{body:r}=n;t[s]={bodyHandle:r.handle}}),{state:this.#d.state.description,nextState:this.#d.nextState?this.#d.nextState.description:null,pendingPicks:this.#d.pendingPicks,beaconLightAngle:this.#d.beaconLightAngle,joints:e,parts:t,trapSensorHandle:this.#s.handle}}load(e){this.#d.parts.forEach(t=>{t.meshes.forEach(({data:n})=>{n.traverse(s=>{if(s.isMesh){const r=s.material.userData,o=s.material.name;if(r.sensor){const a=e.trapSensorHandle,l=this.#e.worldColliders.get(a);l.userData={objectType:o,onIntersect:this.#a},this.#s=l}}})})}),this.#d.state=Symbol.for(e.state),this.#d.nextState=e.nextState?Symbol.for(e.nextState):null,this.#d.pendingPicks=e.pendingPicks,this.#d.beaconLightAngle=e.beaconLightAngle,this.#d.joints.forEach((t,n)=>{const s=e.joints[n];s&&(t.joint=this.#e.worldJoints.get(s.jointHandle),t.params.body1=t.joint.body1(),t.params.body2=t.joint.body2())}),this.#d.parts.forEach((t,n)=>{const s=e.parts[n];s&&(t.body=this.#e.worldBodies.get(s.bodyHandle))})}get active(){return this.#d.state!==st.IDLE&&this.#d.state!==st.ACTIVATING}pick(){this.#d.state===st.IDLE?this.#d.state=st.ACTIVATING:this.#d.pendingPicks++}get joints(){const e=[];return this.#d.joints.forEach(t=>{const{joint:n,params:s}=t;e.push({joint:n,jointData:s})}),e}get#p(){return this.#d.joints.get(LH)}get#l(){return this.#d.joints.get(NH)}get#b(){return this.#d.joints.get(MH)}get#g(){return this.#d.joints.get(OH)}get#m(){return this.#d.joints.get(zH)}get#h(){return this.#d.joints.get(HH)}get#v(){return this.#d.joints.get(EH)}get#y(){return this.#d.joints.get(AH)}get#f(){return this.#d.parts.get(hc)}get#T(){return this.#d.parts.get(TH)}get#S(){return this.#d.parts.get(SH)}}function ZH({excavator:i,joints:e,canActivate:t}){i.nextState=null;const{platformJoint:n,platformArmJoint:s,armsJoint:r,jaw1Joint:o,jaw2Joint:a,jaw3Joint:l,jaw4Joint:d}=e;switch(i.state){case st.IDLE:break;case st.ACTIVATING:t()&&(o.joint.configureMotor(-.5,-2.5,St,At),a.joint.configureMotor(.5,2.5,St,At),l.joint.configureMotor(-.5,-2.5,St,At),d.joint.configureMotor(.5,2.5,St,At),i.nextState=st.OPENING_JAWS);break;case st.OPENING_JAWS:Ct(o)<-.5&&Ct(a)>.5&&Ct(l)<-.5&&Ct(d)>.5&&(s.joint.configureMotor(-.7,1,St,At),r.joint.configureMotor(.5,3,St,At),i.nextState=st.MOVING_DOWN);break;case st.MOVING_DOWN:Ct(s)<-.7&&Ct(r)>.5&&(o.joint.configureMotor(0,2.5,St,At),a.joint.configureMotor(0,-2.5,St,At),l.joint.configureMotor(0,2.5,St,At),d.joint.configureMotor(0,-2.5,St,At),i.nextState=st.CLOSING_JAWS);break;case st.CLOSING_JAWS:Ct(o)>-.01&&Ct(a)<.01&&Ct(l)>-.01&&Ct(d)<.01&&(i.nextState=st.PICKING);break;case st.PICKING:s.joint.configureMotor(.5,1,St,At),r.joint.configureMotor(-.2,4,St,At),i.nextState=st.MOVING_UP;break;case st.MOVING_UP:Ct(s)>.5&&(n.joint.configureMotor(-2,-3,St,St),i.nextState=st.MOVING_TO_DROP_ZONE);break;case st.MOVING_TO_DROP_ZONE:Ct(n)<-2&&(s.joint.configureMotor(-.3,1,St,At),r.joint.configureMotor(.9,8,St,At),i.nextState=st.EXTENDING_ARMS);break;case st.EXTENDING_ARMS:Ct(r)>.8&&(o.joint.configureMotor(-.5,-2.5,St,At),a.joint.configureMotor(.5,2.5,St,At),l.joint.configureMotor(-.5,-2.5,St,At),d.joint.configureMotor(.5,2.5,St,At),i.nextState=st.DROPPING);break;case st.DROPPING:Ct(o)<-.5&&Ct(a)>.5&&Ct(l)<-.5&&Ct(d)>.5&&(s.joint.configureMotor(.5,.7,St,At),r.joint.configureMotor(-.3,3.45,St,At),i.nextState=st.RETRACTING_ARMS);break;case st.RETRACTING_ARMS:Ct(s)>.4&&Ct(r)<.5&&(n.joint.configureMotor(0,-.7,St,St),i.nextState=st.MOVING_TO_BASE);break;case st.MOVING_TO_BASE:Ct(n)>-.01&&(s.joint.configureMotor(0,1,St,At),r.joint.configureMotor(0,3.7,St,At),i.nextState=st.CLOSING_JAWS_AFTER_DROPPING);break;case st.CLOSING_JAWS_AFTER_DROPPING:Ct(s)<.1&&Ct(r)>-.1&&(i.pendingPicks>0?(i.pendingPicks--,i.nextState=st.ACTIVATING):i.beaconLightAngle>0&&i.beaconLightAngle<nf&&(i.beaconLightAngle=0,o.joint.configureMotor(0,2.5,St,At),a.joint.configureMotor(0,-2.5,St,At),l.joint.configureMotor(0,2.5,St,At),d.joint.configureMotor(0,-2.5,St,At),i.nextState=st.PREPARING_IDLE));break;case st.PREPARING_IDLE:Ct(o)>-.01&&Ct(a)<.01&&Ct(l)>-.01&&Ct(d)<.01&&(i.pendingPicks>0?(i.pendingPicks--,i.nextState=st.ACTIVATING):i.nextState=st.IDLE);break}i.state!==st.IDLE&&i.state!==st.PREPARING_IDLE&&(i.beaconLightAngle=(i.beaconLightAngle+nf)%(2*Math.PI))}function Ct(i){const e=i.params.axis,t=new _e().copy(i.params.body1.rotation()),n=new _e().copy(i.params.body2.rotation()),s=t.invert().multiply(n),r=e.clone().normalize();return 2*Math.atan2(r.x*s.x+r.y*s.y+r.z*s.z,s.w)}async function kH({scene:i}){const t=(await i.loadModel(gH)).scene,n=new Map,s=new Map,r=new T,o=new T;return t.traverse(a=>{if(a.isMesh){const{material:l,geometry:d}=a,c=l.userData,u=c.name;if(c.collider||c.sensor){const p=d.index,h=d.attributes.position,v=[],x=[];for(let f=0;f<h.count;f++)v.push(h.getX(f),h.getY(f),h.getZ(f));for(let f=0;f<p.count;f++)x.push(p.getX(f));const m=sf(n,u);m.sensor=c.sensor,m.friction=c.friction,m.restitution=c.restitution,m.fixed=c.fixed,m.kinematic=c.kinematic,m.contactSkin=c.contactSkin,m.meshes.push({data:a,vertices:v,indices:x})}else{const p=a.userData.name,h=sf(n,p);h.meshes.push({data:a}),h.light=c.light}}else if(a.userData.joint){const{userData:l,position:d}=a;s.set(a.name,{position:d,axis:l.axis===void 0?void 0:new T().fromArray(l.axis),pair:[l["name-1"],l["name-2"]],limits:l.limits})}else a.name==PH?r.copy(a.position):a.name===RH&&o.copy(a.position)}),{parts:n,joints:s,dropPosition:r,beaconLightPosition:o}}function sf(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[]},i.set(e,t)),t}function JH({scene:i,parts:e,joints:t,onRecycleObject:n}){let s,r=0;e.forEach((a,l)=>{const{meshes:d,sensor:c,friction:u,restitution:p,fixed:h,kinematic:v,light:x,contactSkin:m}=a,f=a.body=h?i.createFixedBody():v?i.createKinematicBody():i.createDynamicBody();f.setEnabled(!1);const N=[],O=[];let P=0;if(d.forEach(j=>{x||(c?s=i.createCuboidColliderFromBoundingBox({mesh:j.data,height:XH,userData:{objectType:l,onIntersect:n},sensor:c},f):j.vertices&&(N.push(...j.vertices),O.push(...j.indices.map(D=>D+P)),P+=Math.max(...j.indices)+1))}),N.length>0){const j=i.createTrimeshCollider({vertices:N,indices:O,friction:u,restitution:p},f);j.setContactSkin(m),h?j.setCollisionGroups(GH):(j.setCollisionGroups(1<<r%16<<16|1<<r%16),r++)}});const o=e.get(hc);return o.body.setEnabledRotations(!1,!0,!1),o.body.setEnabledTranslations(!1,!1,!1),t.forEach(a=>{const{position:l,axis:d,pair:c,limits:u}=a;if(a.params={body1:e.get(c[0]).body,body2:e.get(c[1]).body,anchor1:l,anchor2:l,axis:d},d===void 0){const p=new _e;Object.assign(a.params,{frame1:p,frame2:p}),a.joint=i.connectBodiesWithFixedJoint(a.params)}else Object.assign(a.params,{axis:d}),a.joint=i.connectBodiesWithRevoluteJoint(a.params),a.joint.setLimits(...u)}),{trapSensor:s}}const BH="./assets/tower.glb",KH="stand",QH="turret",_H="init-position",mc=.1,V3=0,$H=Math.PI/7,rf=.002,of=.02,af=10,eE=5e-5,tE=new T(0,0,-1),nE=new T(0,1,0),iE=65537,sE=65280,rE=0,oE=2,On={IDLE:Symbol.for("tower-idle"),ACTIVATING:Symbol.for("tower-activating"),SHOOTING_COINS:Symbol.for("tower-shooting-coins"),SHOOTING_COIN:Symbol.for("tower-shooting-coin"),MOVING_DOWN:Symbol.for("tower-moving-down")};class lf{#e;#t;#n;#a;#o;#r;#c;#i=new T;#s;#d=new T;#p;#l={state:On.IDLE,pendingShots:0,parts:null,position:V3,oscillationCount:0,phase:0,frameLastShot:-1,lightOn:!1};constructor({scene:e,canActivate:t,onShootCoin:n,offsetX:s=0,oscillationDirection:r=-1}){this.#e=e,this.#o=t,this.#r=n,this.#n=s,this.#a=r}async initialize(){const e=this.#e,{parts:t,initPosition:n,lightMaterial:s}=await lE({scene:e,offsetX:this.#n});dE({scene:e,parts:t}),this.#t=n,this.#p=s,t.forEach(({meshes:r})=>r.forEach(({data:o})=>this.#e.addObject(o))),Object.assign(this.#l,{parts:t}),this.#c=this.#l.parts.get(QH),this.#s=this.#l.parts.get(KH)}update(){aE({tower:this.#l,canActivate:()=>this.#o(this)});const{state:e,parts:t,phase:n,position:s,lightOn:r}=this.#l;if(e!==On.IDLE){const o=new _e().setFromAxisAngle(nE,Math.sin(n)*$H*this.#a);if(e===On.SHOOTING_COIN){const a=this.#t.clone().setY(this.#t.y+mc),l=tE.clone().applyQuaternion(o).normalize().multiplyScalar(eE);this.#r({position:a,impulse:l})}this.#c.body.setNextKinematicTranslation(this.#i.set(0,0,0).sub(this.#t).applyQuaternion(o).add(this.#t).setY(s)),this.#c.body.setNextKinematicRotation(o),this.#s.body.setNextKinematicTranslation(this.#d.setY(s)),this.#p.emissiveIntensity=r?oE:rE,t.forEach(({meshes:a,body:l})=>a.forEach(({data:d})=>{d.position.copy(l.translation()),d.quaternion.copy(l.rotation())})),this.#l.nextState&&(this.#l.state=this.#l.nextState)}}shootCoins(){this.#l.state===On.IDLE?this.#l.state=On.ACTIVATING:this.#l.pendingShots++}save(){const e={};return this.#l.parts.forEach(({body:t},n)=>{e[n]={bodyHandle:t.handle}}),{state:this.#l.state.description,nextState:this.#l.nextState?this.#l.nextState.description:null,parts:e,position:this.#l.position,oscillationCount:this.#l.oscillationCount,pendingShots:this.#l.pendingShots,phase:this.#l.phase,frameLastShot:this.#l.frameLastShot,lightOn:this.#l.lightOn}}load(e){this.#l.state=Symbol.for(e.state),this.#l.nextState=e.nextState?Symbol.for(e.nextState):null,this.#l.oscillationCount=e.oscillationCount,this.#l.pendingShots=e.pendingShots,this.#l.phase=e.phase,this.#l.frameLastShot=e.frameLastShot,this.#l.lightOn=e.lightOn,this.#l.position=e.position,this.#l.parts.forEach((t,n)=>{const s=e.parts[n];s&&(t.body=this.#e.worldBodies.get(s.bodyHandle))})}get active(){return this.#l.state!==On.IDLE&&this.#l.state!==On.ACTIVATING}}function aE({tower:i,canActivate:e}){switch(i.nextState=null,i.state){case On.ACTIVATING:e()&&(i.phase=0,i.position<mc?i.position+=rf:(i.frameLastShot=0,i.position=mc,i.nextState=On.SHOOTING_COINS));break;case On.SHOOTING_COINS:i.oscillationCount<1?(i.phase+=of,i.oscillationCount=Math.floor(i.phase/(2*Math.PI)),i.frameLastShot++,i.frameLastShot>af/5&&(i.lightOn=!1),i.frameLastShot>af&&(i.nextState=On.SHOOTING_COIN)):i.pendingShots?(i.pendingShots--,i.phase+=of,i.oscillationCount=0):(i.phase=0,i.oscillationCount=0,i.nextState=On.MOVING_DOWN);break;case On.SHOOTING_COIN:i.frameLastShot=0,i.lightOn=!0,i.nextState=On.SHOOTING_COINS;break;case On.MOVING_DOWN:i.position>0?i.position-=rf:(i.position=V3,i.frameLastShot=-1,i.nextState=On.IDLE);break}}async function lE({scene:i,offsetX:e}){const n=(await i.loadModel(BH)).scene,s=new Map,r=new T;let o;return n.traverse(a=>{if(a.isMesh){const{material:l,geometry:d}=a;for(let u=0;u<d.index.count;u++){const p=d.attributes.position;p.setX(u,p.getX(u)+e)}const c=l.userData;if(c.collider){const u=c.name,p=d.index,h=d.attributes.position,v=[],x=[];for(let f=0;f<h.count;f++)v.push(h.getX(f),h.getY(f),h.getZ(f));for(let f=0;f<p.count;f++)x.push(p.getX(f));const m=df(s,u);m.friction=c.friction,m.restitution=c.restitution,m.fixed=c.fixed,m.meshes.push({data:a,vertices:v,indices:x})}else{const u=a.userData.name;df(s,u).meshes.push({data:a})}c.light&&(o=a.material,o.emissive.setHex(sE))}else if(a.name==_H){const l=a.position;l.x+=e,r.copy(a.position)}}),{parts:s,lightMaterial:o,initPosition:r}}function df(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[]},i.set(e,t)),t}function dE({scene:i,parts:e}){let t=0;e.forEach((n,s)=>{const{meshes:r,friction:o,restitution:a,fixed:l}=n,d=n.body=l?i.createFixedBody():i.createKinematicBody(),c=[],u=[];let p=0;r.forEach(v=>{v.vertices&&(c.push(...v.vertices),u.push(...v.indices.map(x=>x+p)),p+=Math.max(...v.indices)+1)});const h=i.createTrimeshCollider({vertices:c,indices:u,friction:o,restitution:a},d);l?h.setCollisionGroups(iE):(h.setCollisionGroups(1<<t%16<<16|1<<t%16),t++)})}const cE=.02,cf=.01,uf=.003,pf=.13,uE="./assets/coin-roller.glb",pE="launcher",fE="trap-door",hE="doors",C3="trap",mE="init-position",bE=["slot-3","slot-2","slot-1"],vE=3e-5,yE=new T(0,0,-1).multiplyScalar(vE),wE=.09,gE=new T(Math.PI/2,0,Math.PI/2),F3=0,xE=.25-F3,TE=0,SE=.03,PE=16777215,RE=16711935,q3=0,LE=1,NE=2,Y3=30,ME=8,OE=65537,pt={IDLE:Symbol.for("coin-roller-idle"),ACTIVATING:Symbol.for("coin-roller-activating"),INITIALIZING:Symbol.for("coin-roller-initializing"),INITIALIZING_COIN:Symbol.for("coin-roller-initializing-coin"),OPENING_DOORS:Symbol.for("coin-roller-opening-doors"),MOVING_LAUNCHER:Symbol.for("coin-roller-moving-launcher"),TRIGGERING_COIN:Symbol.for("coin-roller-triggering-coin"),DELIVERING_COIN:Symbol.for("coin-roller-delivering-coin"),MOVING_COIN:Symbol.for("coin-roller-moving-coin"),OPENING_TRAP:Symbol.for("coin-roller-opening-trap"),CLOSING_TRAP:Symbol.for("coin-roller-closing-trap"),MOVING_LAUNCHER_TO_BASE:Symbol.for("coin-roller-moving-launcher-to-base"),CLOSING_DOORS:Symbol.for("coin-roller-closing-doors")};class zE{#e;#t;#n;#a;#o;#r;#c=new Map;#i=[];#s=new T;#d=new T;#p=new T;#l={state:pt.IDLE,nextState:null,pendingShots:0,launcherPhase:0,trapPosition:0,doorsPosition:0,lights:[],lightsHeadIndex:-1,lightsDirection:1,lightsRefreshes:-1};constructor({scene:e,onInitializeCoin:t,onRecycleCoin:n,onBonusWon:s,onGetCoin:r}){this.#e=e,this.#t=t,this.#n=(o,a)=>{const{state:l,coin:d}=this.#l;if(d&&o.objectType===d.objectType&&o.index===d.index&&l===pt.MOVING_COIN){const c=bE.indexOf(a);n(d),this.#l.coin=null,s(c)}},this.#a=()=>{n(this.#l.coin),this.#l.coin=null},this.#o=r}async initialize(){const e=this.#e,{parts:t,lightsMaterials:n,initPosition:s}=await AE({scene:e,sensorColliders:this.#c});this.#r=s,this.#i=n,XE({scene:e,parts:t,sensorColliders:this.#c,onBonusWon:this.#n,onCoinLost:this.#a}),IE({lightsMaterials:n,lights:this.#l.lights}),t.forEach(({body:r,meshes:o})=>{o.forEach(({data:a})=>this.#e.addObject(a)),r.setEnabled(!0)}),Object.assign(this.#l,{parts:t}),this.#l.launcher=this.#l.parts.get(pE),this.#l.launcher.body.setEnabledRotations(!1,!1,!1),this.#l.launcher.body.setEnabledTranslations(!1,!1,!1),this.#l.trap=this.#l.parts.get(fE),this.#l.doors=this.#l.parts.get(hE)}update(){HE({coinRoller:this.#l}),EE({coinRoller:this.#l});const{parts:e,state:t,launcher:n,trap:s,coin:r,doors:o,lights:a}=this.#l;t!==pt.IDLE&&(this.#s.setX(-Math.cos(this.#l.launcherPhase)*pf+pf),this.#d.z=this.#l.trapPosition,this.#p.x=this.#l.doorsPosition,n.body.setNextKinematicTranslation(this.#s),s.body.setNextKinematicTranslation(this.#d),o.body.setNextKinematicTranslation(this.#p),t===pt.INITIALIZING&&(this.#l.coin=this.#t({position:this.#r,rotation:gE}),this.#l.coin.body.setEnabledTranslations(!1,!0,!0)),t===pt.MOVING_LAUNCHER&&(r.body.setEnabledTranslations(!0,!0,!0),r.body.setEnabledRotations(!1,!1,!1),r.body.sleep(),r.body.setNextKinematicTranslation(this.#s)),t===pt.DELIVERING_COIN&&(r.body.setEnabledRotations(!0,!0,!0),r.body.applyImpulse(yE)),a.forEach((l,d)=>{const c=this.#i[d];l.on?c.emissiveIntensity=Math.max(q3,LE*(1-l.refreshes/Y3)):c.emissiveIntensity=0}),e.forEach(({meshes:l,body:d})=>{l.forEach(({data:c})=>{c.position.copy(d.translation()),c.quaternion.copy(d.rotation())})}),this.#l.nextState&&(this.#l.state=this.#l.nextState))}shootCoin(){this.#l.state===pt.IDLE?this.#l.state=pt.ACTIVATING:this.#l.pendingShots++}triggerCoin(){this.#l.state===pt.MOVING_LAUNCHER&&(this.#l.state=pt.TRIGGERING_COIN)}save(){const e={};return this.#c.forEach((t,n)=>e[n]=t.handle),{state:this.#l.state.description,nextState:this.#l.nextState?this.#l.nextState.description:null,sensorCollidersHandles:e,coinIndex:this.#l.coin?this.#l.coin.index:null,launcherBodyHandle:this.#l.launcher.body.handle,trapBodyHandle:this.#l.trap.body.handle,doorsBodyHandle:this.#l.doors.body.handle,launcherPhase:this.#l.launcherPhase,trapPosition:this.#l.trapPosition,doorsPosition:this.#l.doorsPosition,pendingShots:this.#l.pendingShots,lights:this.#l.lights.map(t=>({on:t.on,refreshes:t.refreshes})),lightsHeadIndex:this.#l.lightsHeadIndex,lightsDirection:this.#l.lightsDirection,lightsRefreshes:this.#l.lightsRefreshes}}load(e){this.#l.parts.forEach((t,n)=>{t.meshes.forEach(({data:s})=>{s.traverse(r=>{if(r.isMesh){const o=r.material.userData,a=n;if(o.sensor){const l=e.sensorCollidersHandles[n],d=this.#e.worldColliders.get(l);d.userData={objectType:a,onIntersect:c=>{n===C3?this.#a():this.#n(c,a)}},this.#c.set(a,d)}}})})}),this.#l.state=Symbol.for(e.state),this.#l.nextState=e.nextState?Symbol.for(e.nextState):null,this.#l.launcherPhase=e.launcherPhase,this.#l.pendingShots=e.pendingShots,this.#l.launcher.body=this.#e.worldBodies.get(e.launcherBodyHandle),this.#l.trap.body=this.#e.worldBodies.get(e.trapBodyHandle),this.#l.doors.body=this.#e.worldBodies.get(e.doorsBodyHandle),this.#l.trapPosition=e.trapPosition,this.#l.doorsPosition=e.doorsPosition,e.coinIndex&&(this.#l.coin=this.#o({index:e.coinIndex})),this.#l.lights=e.lights.map(t=>({on:t.on,refreshes:t.refreshes})),this.#l.lightsHeadIndex=e.lightsHeadIndex,this.#l.lightsDirection=e.lightsDirection,this.#l.lightsRefreshes=e.lightsRefreshes}}function HE({coinRoller:i}){switch(i.nextState=null,i.state){case pt.IDLE:break;case pt.ACTIVATING:i.lightsRefreshes=0,i.lightsHeadIndex=0,i.nextState=pt.OPENING_DOORS;break;case pt.OPENING_DOORS:i.doorsPosition+=uf,i.doorsPosition>SE&&(i.nextState=pt.INITIALIZING);break;case pt.INITIALIZING:i.nextState=pt.INITIALIZING_COIN;break;case pt.INITIALIZING_COIN:i.coin.position.z<wE&&(i.nextState=pt.MOVING_LAUNCHER);break;case pt.MOVING_LAUNCHER:Ss({coinRoller:i});break;case pt.TRIGGERING_COIN:Ss({coinRoller:i}),i.nextState=pt.DELIVERING_COIN;break;case pt.DELIVERING_COIN:Ss({coinRoller:i}),i.nextState=pt.MOVING_COIN;break;case pt.MOVING_COIN:Ss({coinRoller:i}),i.coin&&i.coin.linearSpeed<1e-4?i.nextState=pt.OPENING_TRAP:i.coin||(i.nextState=pt.MOVING_LAUNCHER_TO_BASE);break;case pt.OPENING_TRAP:i.launcherPhase>.05&&Ss({coinRoller:i}),i.trapPosition+=cf,i.trapPosition>xE&&(i.nextState=pt.CLOSING_TRAP);break;case pt.CLOSING_TRAP:i.launcherPhase>.05&&Ss({coinRoller:i}),i.trapPosition-=cf,i.trapPosition<F3&&(i.trapPosition=0,i.nextState=pt.MOVING_LAUNCHER_TO_BASE);break;case pt.MOVING_LAUNCHER_TO_BASE:i.launcherPhase>.05?Ss({coinRoller:i}):(i.launcherPhase=0,i.pendingShots?(i.pendingShots--,i.nextState=pt.ACTIVATING):i.nextState=pt.CLOSING_DOORS);break;case pt.CLOSING_DOORS:i.doorsPosition-=uf,i.doorsPosition<TE&&(i.doorsPosition=0,i.lightsRefreshes=-1,i.lightsHeadIndex=-1,i.lightsDirection=1,i.nextState=pt.IDLE);break}}function EE({coinRoller:i}){const{lights:e,lightsHeadIndex:t,lightsDirection:n}=i,s=e.length,r=ME;i.state===pt.IDLE||i.state===pt.CLOSING_DOORS?e.forEach(o=>{o.on=!1,o.refreshes=-1}):i.lightsRefreshes!==-1&&(i.lightsRefreshes++,i.lightsRefreshes>NE&&(i.lightsRefreshes=0,i.lightsHeadIndex+=n,i.lightsHeadIndex>s?(i.lightsDirection=-1,i.lightsHeadIndex=s-1):i.lightsHeadIndex<0&&(i.lightsDirection=1,i.lightsHeadIndex=0)),e.forEach((o,a)=>{const l=n>0?t-r:t,d=n>0?t:t+r;a>=l&&a<=d?(o.on=!0,o.refreshes=0):o.refreshes>-1&&o.refreshes<Y3?o.refreshes++:(o.on=!1,o.refreshes=-1)}))}function Ss({coinRoller:i}){i.launcherPhase=(i.launcherPhase+cE)%(Math.PI*2)}async function AE({scene:i}){const t=(await i.loadModel(uE)).scene,n=new Map,s=[],r=new T;return t.traverse(o=>{if(o.isMesh){const{material:a,geometry:l}=o,d=a.userData;if(d.collider||d.sensor){const c=d.name,u=l.index,p=l.attributes.position,h=[],v=[];for(let m=0;m<p.count;m++)h.push(p.getX(m),p.getY(m),p.getZ(m));for(let m=0;m<u.count;m++)v.push(u.getX(m));const x=ff(n,c);x.sensor=d.sensor,x.friction=d.friction,x.restitution=d.restitution,x.kinematic=d.kinematic,x.meshes.push({data:o,vertices:h,indices:v})}else{const c=o.userData.name;ff(n,c).meshes.push({data:o}),o.material.userData.light&&(s[o.material.userData.index]=o.material=new F2({color:PE,emissive:RE,emissiveIntensity:q3}))}}else o.name==mE&&r.copy(o.position)}),{parts:n,lightsMaterials:s,initPosition:r}}function ff(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[]},i.set(e,t)),t}function XE({scene:i,parts:e,sensorColliders:t,onBonusWon:n,onCoinLost:s}){let r=0;e.forEach((o,a)=>{const{meshes:l,friction:d,restitution:c,sensor:u,kinematic:p}=o;let h;p?(h=o.body=i.createKinematicBody(),o.position=0):h=o.body=i.createFixedBody(),h.setEnabled(!1);const v=[],x=[];let m=0;if(l.forEach(f=>{f.vertices&&(v.push(...f.vertices),x.push(...f.indices.map(N=>N+m)),m+=Math.max(...f.indices)+1)}),v.length>0){const f=i.createTrimeshCollider({vertices:v,indices:x,friction:d,restitution:c,sensor:u,userData:{objectType:a,onIntersect:N=>{a===C3?s():n(N,a)}}},h);p?(f.setCollisionGroups(1<<r%16<<16|1<<r%16),r++):f.setCollisionGroups(OE),h.setSoftCcdPrediction(.01),u&&t.set(a,f)}})}function IE({lightsMaterials:i,lights:e}){i.forEach((t,n)=>{e[n]={on:!1,refreshes:-1}})}const DE="./assets/stacker.glb",WE="drop-position",jE="pivot-position",VE="arm-protection-lid-pivot-position",CE=new T(0,0,0),FE=.006,qE=new T(1,0,0),YE=new T(0,1,0),Ra=.02,hf=5e-4,_l=5e-4,mf=.003,bf=.001,$l=Math.PI/18,vf=Math.PI/9,yf=.1,wf=4,gf=.135,GE=new T(0,0,1e-5),bc=0,lr=.08,xf=.15,vc=0,Tf=-.025,ed=6,Rs=0,Ca=0,G3=0,Sf=.005,Pf=-.03,U3=0,Rf=-.01,yc=0,Lf=.15,Nf=.225,La=Math.PI*2,wc=0,Mf=-Math.PI/3,Z3=0,td=1,UE=7,nd=5,ZE=80,kE="base",JE="support",BE="arm",KE="arm-protection",QE="arm-protection-lid",_E="arm-door",m0=0,to=5,$E=16711935,eA=35,tA=10,me={IDLE:Symbol.for("stacker-idle"),ACTIVATING:Symbol.for("stacker-activating"),RAISING_STACKER_TO_CLEANUP_POSITION:Symbol.for("stacker-raising-stacker-to-cleanup-position"),RAISING_BASE_TO_CLEANUP_POSITION:Symbol.for("stacker-raising-base-to-cleanup-position"),CLOSING_ARM_DOOR:Symbol.for("stacker-closing-arm-door"),RAISING_ARM_PROTECTION_LID:Symbol.for("stacker-raising-arm-protection-lid"),LOWERING_ARM_PROTECTION_LID:Symbol.for("stacker-lowering-arm-protection-lid"),LOWERING_SUPPORT_TO_READY_POSITION:Symbol.for("stacker-lowering-support-to-ready-position"),LOWERING_BASE_TO_READY_POSITION:Symbol.for("stacker-lowering-base-to-ready-position"),CLEANING_UP_BASE_LEFT:Symbol.for("stacker-cleaning-up-base-left"),CLEANING_UP_BASE_RIGHT:Symbol.for("stacker-cleaning-up-base-right"),RAISING_STACKER:Symbol.for("stacker-raising-stacker"),OPENING_ARM_DOOR:Symbol.for("stacker-opening-arm-door"),MOVING_ARM_TO_CIRCUMFERENCE_POSITION:Symbol.for("stacker-moving-arm-to-circumference-position"),INITIALIZING_COIN:Symbol.for("stacker-initializing-coin"),PUSHING_COIN:Symbol.for("stacker-pushing-coin"),ROTATING_BASE:Symbol.for("stacker-rotating-base"),MOVING_ARM_TO_CENTER_POSITION:Symbol.for("stacker-moving-arm-to-center-position"),LOWERING_BASE:Symbol.for("stacker-lowering-base"),MOVING_ARM_BACK_TO_CIRCUMFERENCE_POSITION:Symbol.for("stacker-retracting-arm"),FINISHING_LEVEL:Symbol.for("stacker-finishing-level"),MOVING_ARM_TO_INITIAL_POSITION:Symbol.for("stacker-moving-arm-to-initial-position"),ALIGNING_COINS:Symbol.for("stacker-aligning-coins"),LOWERING_STACKER:Symbol.for("stacker-lowering-stacker"),RESETTING_BASE_ROTATION:Symbol.for("stacker-resetting-base-rotation"),PREPARING_IDLE:Symbol.for("stacker-preparing-idle")},jn={IDLE:Symbol.for("stacker-lights-idle"),ACTIVATING:Symbol.for("stacker-lights-activating"),BLINKING:Symbol.for("stacker-lights-blinking"),ROTATING:Symbol.for("stacker-lights-rotating"),DELIVERING:Symbol.for("stacker-lights-delivering"),PREPARING_IDLE:Symbol.for("stacker-lights-preparing-idle")};class nA{#e;#t;#n;#a;#o;#r;#c;#i={parts:null,level:Z3,coin:null,coins:[],nextState:null,stacks:-1,levels:-1,pendingDeliveries:[],state:me.IDLE,position:yc,supportPosition:U3,basePosition:G3,armPosition:bc,armDoorPosition:vc,armProtectionLidAngle:wc,rotations:Ca,rotationDirection:1,baseAngle:Rs,lights:{state:jn.IDLE,frameLastRefresh:-1,bulbs:[],nextState:null}};constructor({scene:e,canActivate:t,onInitializeCoin:n}){this.#e=e,this.#n=t,this.#a=n}async initialize(){const e=this.#e,{parts:t,dropPosition:n,pivotPosition:s,armProtectionLidPivotPosition:r,lightBulbsMaterials:o}=await rA({scene:e});this.#o=n,this.#r=s,this.#c=r,this.#t=o,oA({scene:e,parts:t}),aA({lightBulbsMaterials:o,lights:this.#i.lights}),t.forEach(({body:a,meshes:l})=>{l.forEach(({data:d})=>this.#e.addObject(d)),a.setEnabled(!0)}),Object.assign(this.#i,{parts:t})}update(){iA({stacker:this.#i,canActivate:()=>this.#n(this)}),sA({stacker:this.#i});const{parts:e,state:t,lights:n}=this.#i;if(t!==me.IDLE){const s=e.get(kE),r=e.get(JE),o=e.get(BE),a=e.get(KE),l=e.get(QE),d=e.get(_E);if(t===me.RAISING_STACKER_TO_CLEANUP_POSITION||t===me.RAISING_STACKER||t===me.LOWERING_STACKER){const c=new T().copy(s.body.translation()),u=new T().copy(r.body.translation()),p=new T().copy(s.body.translation()),h=new T().copy(o.body.translation()),v=new T().copy(d.body.translation()),x=new T().copy(a.body.translation()),m=new T().copy(l.body.translation());c.setY(this.#i.position),this.#i.position+this.#i.supportPosition,u.setY(this.#i.position+this.#i.supportPosition);let f=this.#i.position+this.#i.supportPosition+this.#i.basePosition;f<0&&(f=0),p.setY(f),h.setY(this.#i.position+this.#i.armPosition),v.setY(this.#i.position+this.#i.armPosition+this.#i.armDoorPosition),x.setY(this.#i.position+this.#i.armPosition),m.setY(this.#i.position+this.#i.armPosition),r.body.setNextKinematicTranslation(u),s.body.setNextKinematicTranslation(p),o.body.setNextKinematicTranslation(h),a.body.setNextKinematicTranslation(x),l.body.setNextKinematicTranslation(m),d.body.setNextKinematicTranslation(v)}if(t===me.LOWERING_SUPPORT_TO_READY_POSITION){const c=new T().copy(r.body.translation()),u=new T().copy(s.body.translation());c.setY(this.#i.position+this.#i.supportPosition),u.setY(this.#i.position+this.#i.supportPosition+this.#i.basePosition),s.body.setNextKinematicTranslation(u),r.body.setNextKinematicTranslation(c)}if((t===me.LOWERING_STACKER||t===me.RESETTING_BASE_ROTATION||t===me.PREPARING_IDLE)&&this.#i.coins.forEach(c=>{c.body.setAngvel(new T(0,0,0),!1),c.body.setLinvel(new T(0,0,0),!1),c.body.sleep()}),t===me.RAISING_BASE_TO_CLEANUP_POSITION||t===me.RAISING_BASE||t===me.LOWERING_BASE||t===me.LOWERING_BASE_TO_READY_POSITION){const c=new T().copy(s.body.translation());c.setY(this.#i.position+this.#i.supportPosition+this.#i.basePosition),s.body.setNextKinematicTranslation(c)}if(t===me.MOVING_ARM_TO_CIRCUMFERENCE_POSITION||t===me.MOVING_ARM_TO_CENTER_POSITION||t===me.MOVING_ARM_BACK_TO_CIRCUMFERENCE_POSITION||t===me.MOVING_ARM_TO_INITIAL_POSITION){const c=new T().copy(o.body.translation());c.setZ(this.#i.armPosition),o.body.setNextKinematicTranslation(c)}if(t===me.CLOSING_ARM_DOOR||t===me.OPENING_ARM_DOOR){const c=new T().copy(d.body.translation());c.setY(this.#i.position+this.#i.armPosition+this.#i.armDoorPosition),d.body.setNextKinematicTranslation(c)}if(t===me.CLEANING_UP_BASE_LEFT||t===me.CLEANING_UP_BASE_RIGHT||t===me.ROTATING_BASE||t===me.ALIGNING_COINS||t===me.RESETTING_BASE_ROTATION){const c=new _e().setFromAxisAngle(YE,this.#i.baseAngle),u=new T().sub(this.#r).applyQuaternion(c).add(this.#r);u.setY(this.#i.position+this.#i.supportPosition+this.#i.basePosition),s.body.setNextKinematicTranslation(u),s.body.setNextKinematicRotation(c);const p=new T().sub(this.#r).applyQuaternion(c).add(this.#r);p.setY(this.#i.position+this.#i.supportPosition),r.body.setNextKinematicTranslation(p),r.body.setNextKinematicRotation(c)}if(t===me.RAISING_ARM_PROTECTION_LID||t===me.LOWERING_ARM_PROTECTION_LID){let c=new T().setY(this.#i.position+this.#i.armPosition);const u=this.#c.clone().setY(this.#c.y+this.#i.position),p=new _e().setFromAxisAngle(qE,this.#i.armProtectionLidAngle);c=c.sub(u).applyQuaternion(p).add(u),l.body.setNextKinematicTranslation(c),l.body.setNextKinematicRotation(p)}if(t===me.INITIALIZING_COIN){const c=this.#o.clone();c.setZ(c.z+this.#i.armPosition-lr),c.setY(c.y+this.#i.position),this.#i.coin=this.#a({position:c,rotation:CE}),this.#i.coins.push(this.#i.coin)}t===me.PUSHING_COIN&&this.#i.coin.body.applyImpulse(GE,!0),e.forEach(({meshes:c,body:u})=>{c.forEach(({data:p})=>{p.position.copy(u.translation()),p.quaternion.copy(u.rotation())})})}n.state!==jn.IDLE&&n.bulbs.forEach((s,r)=>{this.#t[r].emissiveIntensity=s.intensity}),this.#i.nextState&&(this.#i.state=this.#i.nextState),this.#i.lights.nextState&&(this.#i.lights.state=this.#i.lights.nextState)}deliver({stacks:e=td,levels:t=nd}={stacks:td,levels:nd}){t=Math.max(nd,Math.min(ZE,t)),e=Math.max(td,Math.min(UE,e)),this.#i.state===me.IDLE?(this.#i.stacks=e,this.#i.levels=t,this.#i.state=me.ACTIVATING):this.#i.pendingDeliveries.push({stacks:e,levels:t})}save(){const e={};this.#i.parts.forEach(({body:n},s)=>{e[s]={bodyHandle:n.handle}});const t=this.#i.coins.map(n=>n.body.handle);return{state:this.#i.state.description,parts:e,position:this.#i.position,supportPosition:this.#i.supportPosition,basePosition:this.#i.basePosition,armPosition:this.#i.armPosition,armDoorPosition:this.#i.armDoorPosition,armProtectionLidAngle:this.#i.armProtectionLidAngle,rotations:this.#i.rotations,rotationDirection:this.#i.rotationDirection,baseAngle:this.#i.baseAngle,level:this.#i.level,stacks:this.#i.stacks,levels:this.#i.levels,pendingDeliveries:this.#i.pendingDeliveries.map(n=>({stacks:n.stacks,levels:n.levels})),nextState:this.#i.nextState?this.#i.nextState.description:null,coinHandle:this.#i.coin?this.#i.coin.handle:null,coinsHandles:t,lights:{state:this.#i.lights.state.description,nextState:this.#i.lights.nextState?this.#i.lights.nextState.description:null,frameLastRefresh:this.#i.lights.frameLastRefresh,bulbs:this.#i.lights.bulbs.map(n=>({intensity:n.intensity}))}}}load(e){this.#i.state=Symbol.for(e.state),this.#i.position=e.position,this.#i.supportPosition=e.supportPosition,this.#i.basePosition=e.basePosition,this.#i.armPosition=e.armPosition,this.#i.armDoorPosition=e.armDoorPosition,this.#i.armProtectionLidAngle=e.armProtectionLidAngle,this.#i.rotations=e.rotations,this.#i.rotationDirection=e.rotationDirection,this.#i.baseAngle=e.baseAngle,this.#i.level=e.level,this.#i.stacks=e.stacks,this.#i.levels=e.levels,this.#i.pendingDeliveries=e.pendingDeliveries.map(t=>({stacks:t.stacks,levels:t.levels})),this.#i.nextState=e.nextState?Symbol.for(e.nextState):null,e.coinHandle?this.#i.coin=this.#e.worldBodies.get(e.coinHandle):this.#i.coin=null,this.#i.coins=[],e.coinsHandles.forEach(t=>this.#i.coins.push(this.#e.worldBodies.get(t))),this.#i.parts.forEach((t,n)=>{const s=e.parts[n];s&&(t.body=this.#e.worldBodies.get(s.bodyHandle))}),this.#i.lights.state=Symbol.for(e.lights.state),this.#i.lights.nextState=e.lights.nextState?Symbol.for(e.lights.nextState):null,this.#i.lights.frameLastRefresh=e.lights.frameLastRefresh,this.#i.lights.bulbs=e.lights.bulbs.map(t=>({intensity:t.intensity}))}get active(){return this.#i.state!==me.IDLE&&this.#i.state!==me.ACTIVATING}}function iA({stacker:i,canActivate:e}){let t;switch(i.nextState=null,i.state){case me.IDLE:break;case me.ACTIVATING:e()&&(i.nextState=me.RAISING_STACKER_TO_CLEANUP_POSITION,i.lights.state=jn.ACTIVATING);break;case me.RAISING_STACKER_TO_CLEANUP_POSITION:i.position+=mf,i.position>Lf&&(i.position=Lf,i.nextState=me.RAISING_BASE_TO_CLEANUP_POSITION);break;case me.RAISING_BASE_TO_CLEANUP_POSITION:i.basePosition+=_l,i.basePosition>Sf&&(i.basePosition=Sf,i.nextState=me.CLEANING_UP_BASE_LEFT);break;case me.CLEANING_UP_BASE_LEFT:i.baseAngle-=vf,i.baseAngle<-wf*La&&(i.baseAngle=Rs,i.nextState=me.CLEANING_UP_BASE_RIGHT);break;case me.CLEANING_UP_BASE_RIGHT:i.baseAngle+=vf,i.baseAngle>wf*La&&(i.baseAngle=Rs,i.nextState=me.RAISING_STACKER);break;case me.RAISING_STACKER:i.position+=mf,i.position>Nf&&(i.position=Nf,i.nextState=me.RAISING_ARM_PROTECTION_LID);break;case me.RAISING_ARM_PROTECTION_LID:i.armProtectionLidAngle-=yf,i.armProtectionLidAngle<Mf&&(i.armProtectionLidAngle=Mf,i.nextState=me.LOWERING_ARM_PROTECTION_LID);break;case me.LOWERING_ARM_PROTECTION_LID:i.armProtectionLidAngle+=yf,i.armProtectionLidAngle>wc&&(i.armProtectionLidAngle=wc,i.nextState=me.LOWERING_SUPPORT_TO_READY_POSITION);break;case me.LOWERING_SUPPORT_TO_READY_POSITION:i.supportPosition-=bf,i.supportPosition<Rf&&(i.supportPosition=Rf,i.nextState=me.LOWERING_BASE_TO_READY_POSITION);break;case me.LOWERING_BASE_TO_READY_POSITION:i.basePosition-=_l,i.basePosition<Pf&&(i.basePosition=Pf,i.nextState=me.OPENING_ARM_DOOR);break;case me.OPENING_ARM_DOOR:i.armDoorPosition-=hf,i.armDoorPosition<Tf&&(i.armDoorPosition=Tf,i.stacks==1?i.nextState=me.MOVING_ARM_TO_CENTER_POSITION:i.nextState=me.MOVING_ARM_TO_CIRCUMFERENCE_POSITION);break;case me.MOVING_ARM_TO_CIRCUMFERENCE_POSITION:i.armPosition+=Ra,i.armPosition>lr&&(i.armPosition=lr,i.nextState=me.INITIALIZING_COIN);break;case me.INITIALIZING_COIN:i.nextState=me.PUSHING_COIN;break;case me.PUSHING_COIN:i.coin.position.y<gf+i.position&&(i.stacks==1?i.nextState=me.LOWERING_BASE:i.armPosition===lr?(i.stacks==2||i.stacks==3?i.rotations+=3:i.stacks==4?i.rotations+=2:i.stacks==5?i.rotations%3==0?i.rotations+=i.rotationDirection==1?2:1:i.rotations+=i.rotationDirection==1?1:2:i.rotations++,i.nextState=me.ROTATING_BASE):i.nextState=me.LOWERING_BASE);break;case me.ROTATING_BASE:i.baseAngle+=$l*i.rotationDirection,t=La/ed*i.rotations*i.rotationDirection,(i.rotationDirection==1&&i.baseAngle>t||i.rotationDirection==-1&&i.baseAngle<t)&&(i.baseAngle=t,i.rotations==ed?(i.rotations=Ca,i.baseAngle=Rs,i.stacks==2||i.stacks==6?i.nextState=me.LOWERING_BASE:i.nextState=me.MOVING_ARM_TO_CENTER_POSITION):i.nextState=me.INITIALIZING_COIN);break;case me.MOVING_ARM_TO_CENTER_POSITION:i.armPosition+=Ra,i.armPosition>xf&&(i.armPosition=xf,i.nextState=me.INITIALIZING_COIN);break;case me.LOWERING_BASE:i.basePosition-=_l,gf+i.position-i.coin.position.y>FE&&(i.rotationDirection=-i.rotationDirection,i.stacks==1?i.nextState=me.FINISHING_LEVEL:i.nextState=me.MOVING_ARM_BACK_TO_CIRCUMFERENCE_POSITION);break;case me.MOVING_ARM_BACK_TO_CIRCUMFERENCE_POSITION:i.armPosition-=Ra,i.armPosition<lr&&(i.armPosition=lr,i.nextState=me.FINISHING_LEVEL);break;case me.FINISHING_LEVEL:i.level++,i.level<i.levels?i.nextState=me.INITIALIZING_COIN:(i.level=Z3,i.levels=-1,i.nextState=me.MOVING_ARM_TO_INITIAL_POSITION);break;case me.MOVING_ARM_TO_INITIAL_POSITION:i.armPosition-=Ra,i.armPosition<bc&&(i.armPosition=bc,i.nextState=me.CLOSING_ARM_DOOR);break;case me.CLOSING_ARM_DOOR:i.armDoorPosition+=hf,i.armDoorPosition>vc&&(i.armDoorPosition=vc,i.stacks==2||i.stacks==3||i.stacks==5?i.nextState=me.ALIGNING_COINS:i.nextState=me.LOWERING_STACKER);break;case me.ALIGNING_COINS:i.baseAngle-=$l,t=-La/ed*(i.stacks==5?2:1.5),i.baseAngle<t&&(i.baseAngle=t,i.nextState=me.LOWERING_STACKER);break;case me.LOWERING_STACKER:i.position-=bf,i.position<yc&&(i.position=yc,i.basePosition=G3,i.supportPosition=U3,i.stacks==2||i.stacks==3||i.stacks==5?i.nextState=me.RESETTING_BASE_ROTATION:(i.rotations=Ca,i.baseAngle=Rs,i.nextState=me.PREPARING_IDLE));break;case me.RESETTING_BASE_ROTATION:i.baseAngle+=$l,i.baseAngle>Rs&&(i.baseAngle=Rs,i.rotations=Ca,i.rotationDirection=1,i.nextState=me.PREPARING_IDLE);break;case me.PREPARING_IDLE:if(i.coin=null,i.coins=[],i.pendingDeliveries.length>0){const{stacks:n,levels:s}=i.pendingDeliveries.shift();i.stacks=n,i.levels=s,i.nextState=me.ACTIVATING}else i.stacks=-1,i.nextState=me.IDLE;break}}function sA({stacker:i}){switch(i.lights.nextState=null,i.lights.state){case jn.IDLE:break;case jn.ACTIVATING:i.lights.frameLastRefresh=0,i.lights.nextState=jn.BLINKING;break;case jn.BLINKING:i.lights.frameLastRefresh++,i.lights.frameLastRefresh>eA&&(i.lights.frameLastRefresh=0,i.lights.bulbs.forEach(e=>{e.intensity=e.intensity>m0?0:to})),i.state===me.INITIALIZING_COIN&&(i.lights.nextState=jn.ROTATING);break;case jn.ROTATING:i.lights.bulbs.forEach((e,t)=>{i.stacks===1?e.intensity=(t+i.level)%4<2?0:to:e.intensity=t%4<2?0:to}),i.state===me.LOWERING_STACKER&&(i.lights.nextState=jn.DELIVERING);break;case jn.DELIVERING:i.lights.frameLastRefresh++,i.lights.frameLastRefresh>tA&&(i.lights.frameLastRefresh=0,i.lights.bulbs.forEach(e=>{e.intensity=e.intensity==to?0:to})),i.state===me.PREPARING_IDLE&&(i.lights.nextState=jn.PREPARING_IDLE);break;case jn.PREPARING_IDLE:i.lights.bulbs.forEach(e=>{e.intensity=m0}),i.lights.frameLastRefresh=-1,i.lights.nextState=jn.IDLE;break}}async function rA({scene:i}){const t=(await i.loadModel(DE)).scene,n=new Map,s=new T,r=new T,o=new T,a=[];return t.traverse(l=>{if(l.isMesh){const{material:d,geometry:c}=l,u=d.userData;if(u.collider){const p=u.name,h=c.index,v=c.attributes.position,x=[],m=[];for(let N=0;N<v.count;N++)x.push(v.getX(N),v.getY(N),v.getZ(N));for(let N=0;N<h.count;N++)m.push(h.getX(N));const f=id(n,p);f.friction=u.friction,f.restitution=u.restitution,f.kinematic=u.kinematic,f.cuboid=u.cuboid,f.cylinder=u.cylinder,f.meshes.push({data:l,vertices:x,indices:m})}else{l.material.userData.light&&(a[l.material.userData.index]=l.material);const p=l.userData.name;id(n,p).meshes.push({data:l})}}else if(l.userData.collider){const d=l.userData.name;id(n,d).colliders.push({position:l.position,radius:l.userData.radius,height:l.userData.height})}else l.name==WE?s.copy(l.position):l.name==jE?r.copy(l.position):l.name==VE&&o.copy(l.position)}),{parts:n,dropPosition:s,pivotPosition:r,armProtectionLidPivotPosition:o,lightBulbsMaterials:a}}function id(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[],colliders:[]},i.set(e,t)),t}function oA({scene:i,parts:e}){let t=0;e.forEach(n=>{const{meshes:s,colliders:r,friction:o,restitution:a,kinematic:l,cuboid:d,cylinder:c}=n,u=n.body=l?i.createKinematicBody():i.createFixedBody();if(u.setEnabled(!1),d||c){const p=s[0].data.geometry.boundingBox,h=new T().addVectors(p.min,p.max).multiplyScalar(.5).toArray(),v=new T(p.max.x-p.min.x,p.max.y-p.min.y,p.max.z-p.min.z);let x;d?x=i.createCuboidCollider({position:h,width:v.x,height:v.y,depth:v.z,friction:o,restitution:a},u):x=i.createCylinderCollider({position:h,radius:v.x/2,height:v.y,friction:o,restitution:a},u),x.setCollisionGroups(1<<t%16<<16|1<<t%16),t++}else{const p=[],h=[];let v=0;s.forEach(x=>{x.vertices&&(p.push(...x.vertices),h.push(...x.indices.map(m=>m+v)),v+=Math.max(...x.indices)+1)}),p.length>0&&(i.createTrimeshCollider({vertices:p,indices:h,friction:o,restitution:a},u).setCollisionGroups(1<<t%16<<16|1<<t%16),t++)}r.forEach(p=>{const{radius:h,position:v,height:x}=p;i.createCylinderCollider({radius:h,height:x,position:v,friction:o,restitution:a},u).setCollisionGroups(1<<t%16<<16|1<<t%16),t++})})}function aA({lightBulbsMaterials:i,lights:e}){i.forEach((t,n)=>{t.emissive.setHex($E),t.emissiveIntensity=m0,e.bulbs[n]={intensity:m0}})}const lA="./assets/mini-stacker.glb",dA="drop-position",cA="pivot-position",uA="arm-protection-lid-pivot-position",Na=new T(0,0,0),pA=.006,fA=new T(1,0,0),hA=new T(0,1,0),Of=.02,zf=5e-4,sd=5e-4,Hf=.003,Ef=.001,Af=Math.PI/9,Xf=.1,If=3,Df=.14,mA=new T(0,0,1e-5),gc=0,Wf=.08,xc=0,jf=-.025,Fa=0,k3=0,Vf=.005,Cf=-.03,J3=0,Ff=-.01,Tc=0,qf=.15,Yf=.225,Gf=Math.PI*2,Sc=0,Uf=-Math.PI/3,B3=0,rd=5,bA=80,vA="base",yA="support",wA="arm",gA="arm-protection",xA="arm-protection-lid",TA="arm-door",b0=0,Ma=5,SA=16711935,PA=35,RA=10,Me={IDLE:Symbol.for("stacker-idle"),ACTIVATING:Symbol.for("stacker-activating"),RAISING_STACKER_TO_CLEANUP_POSITION:Symbol.for("stacker-raising-stacker-to-cleanup-position"),RAISING_BASE_TO_CLEANUP_POSITION:Symbol.for("stacker-raising-base-to-cleanup-position"),CLOSING_ARM_DOOR:Symbol.for("stacker-closing-arm-door"),RAISING_ARM_PROTECTION_LID:Symbol.for("stacker-raising-arm-protection-lid"),LOWERING_ARM_PROTECTION_LID:Symbol.for("stacker-lowering-arm-protection-lid"),LOWERING_SUPPORT_TO_READY_POSITION:Symbol.for("stacker-lowering-support-to-ready-position"),LOWERING_BASE_TO_READY_POSITION:Symbol.for("stacker-lowering-base-to-ready-position"),CLEANING_UP_BASE_LEFT:Symbol.for("stacker-cleaning-up-base-left"),CLEANING_UP_BASE_RIGHT:Symbol.for("stacker-cleaning-up-base-right"),RAISING_STACKER:Symbol.for("stacker-raising-stacker"),OPENING_ARM_DOOR:Symbol.for("stacker-opening-arm-door"),MOVING_ARM_TO_DROP_POSITION:Symbol.for("stacker-moving-arm-to-drop-position"),INITIALIZING_COIN:Symbol.for("stacker-initializing-coin"),PUSHING_COIN:Symbol.for("stacker-pushing-coin"),LOWERING_BASE:Symbol.for("stacker-lowering-base"),FINISHING_LEVEL:Symbol.for("stacker-finishing-level"),MOVING_ARM_TO_INITIAL_POSITION:Symbol.for("stacker-moving-arm-to-initial-position"),LOWERING_STACKER:Symbol.for("stacker-lowering-stacker"),PREPARING_IDLE:Symbol.for("stacker-preparing-idle")},Vn={IDLE:Symbol.for("stacker-lights-idle"),ACTIVATING:Symbol.for("stacker-lights-activating"),BLINKING:Symbol.for("stacker-lights-blinking"),ROTATING:Symbol.for("stacker-lights-rotating"),DELIVERING:Symbol.for("stacker-lights-delivering"),PREPARING_IDLE:Symbol.for("stacker-lights-preparing-idle")};class Zf{#e;#t;#n;#a;#o;#r;#c;#i;#s={parts:null,level:B3,coin:null,coins:[],nextState:null,levels:-1,pendingDeliveries:[],state:Me.IDLE,position:Tc,supportPosition:J3,basePosition:k3,armPosition:gc,armDoorPosition:xc,armProtectionLidAngle:Sc,baseAngle:Fa,lights:{state:Vn.IDLE,frameLastRefresh:-1,bulbs:[],nextState:null}};constructor({scene:e,canActivate:t,onInitializeCoin:n,offsetX:s=0}){this.#e=e,this.#i=s,this.#n=t,this.#a=n}async initialize(){const e=this.#e,{parts:t,dropPosition:n,pivotPosition:s,armProtectionLidPivotPosition:r,lightBulbsMaterials:o}=await MA({scene:e,offsetX:this.#i});this.#o=n,this.#r=s,this.#c=r,this.#t=o,OA({scene:e,parts:t,offsetX:this.#i}),zA({lightBulbsMaterials:o,lights:this.#s.lights}),t.forEach(({body:a,meshes:l})=>{l.forEach(({data:d})=>this.#e.addObject(d)),a.setEnabled(!0)}),Object.assign(this.#s,{parts:t})}update(){LA({stacker:this.#s,canActivate:()=>this.#n(this)}),NA({stacker:this.#s});const{parts:e,state:t,lights:n}=this.#s;if(t!==Me.IDLE){const s=e.get(vA),r=e.get(yA),o=e.get(wA),a=e.get(gA),l=e.get(xA),d=e.get(TA);if(t===Me.RAISING_STACKER_TO_CLEANUP_POSITION||t===Me.RAISING_STACKER||t===Me.LOWERING_STACKER){const c=new T().copy(s.body.translation()),u=new T().copy(r.body.translation()),p=new T().copy(s.body.translation()),h=new T().copy(o.body.translation()),v=new T().copy(d.body.translation()),x=new T().copy(a.body.translation()),m=new T().copy(l.body.translation());c.setY(this.#s.position),this.#s.position+this.#s.supportPosition,u.setY(this.#s.position+this.#s.supportPosition);let f=this.#s.position+this.#s.supportPosition+this.#s.basePosition;f<0&&(f=0),p.setY(f),h.setY(this.#s.position+this.#s.armPosition),v.setY(this.#s.position+this.#s.armPosition+this.#s.armDoorPosition),x.setY(this.#s.position+this.#s.armPosition),m.setY(this.#s.position+this.#s.armPosition),r.body.setNextKinematicTranslation(u),s.body.setNextKinematicTranslation(p),o.body.setNextKinematicTranslation(h),a.body.setNextKinematicTranslation(x),l.body.setNextKinematicTranslation(m),d.body.setNextKinematicTranslation(v)}if(t===Me.LOWERING_SUPPORT_TO_READY_POSITION){const c=new T().copy(r.body.translation()),u=new T().copy(s.body.translation());c.setY(this.#s.position+this.#s.supportPosition),u.setY(this.#s.position+this.#s.supportPosition+this.#s.basePosition),s.body.setNextKinematicTranslation(u),r.body.setNextKinematicTranslation(c)}if((t===Me.LOWERING_STACKER||t===Me.PREPARING_IDLE)&&this.#s.coins.forEach(c=>{c.body.setAngvel(new T(0,0,0),!1),c.body.setLinvel(new T(0,0,0),!1),c.body.sleep()}),t===Me.RAISING_BASE_TO_CLEANUP_POSITION||t===Me.RAISING_BASE||t===Me.LOWERING_BASE||t===Me.LOWERING_BASE_TO_READY_POSITION){const c=new T().copy(s.body.translation());c.setY(this.#s.position+this.#s.supportPosition+this.#s.basePosition),s.body.setNextKinematicTranslation(c)}if(t===Me.MOVING_ARM_TO_DROP_POSITION||t===Me.MOVING_ARM_TO_INITIAL_POSITION){const c=new T().copy(o.body.translation());c.setZ(this.#s.armPosition),o.body.setNextKinematicTranslation(c)}if(t===Me.CLOSING_ARM_DOOR||t===Me.OPENING_ARM_DOOR){const c=new T().copy(d.body.translation());c.setY(this.#s.position+this.#s.armPosition+this.#s.armDoorPosition),d.body.setNextKinematicTranslation(c)}if(t===Me.CLEANING_UP_BASE_LEFT||t===Me.CLEANING_UP_BASE_RIGHT){const c=new _e().setFromAxisAngle(hA,this.#s.baseAngle),u=new T().sub(this.#r).applyQuaternion(c).add(this.#r);u.setY(this.#s.position+this.#s.supportPosition+this.#s.basePosition),s.body.setNextKinematicTranslation(u),s.body.setNextKinematicRotation(c);const p=new T().sub(this.#r).applyQuaternion(c).add(this.#r);p.setY(this.#s.position+this.#s.supportPosition),r.body.setNextKinematicTranslation(p),r.body.setNextKinematicRotation(c)}if(t===Me.RAISING_ARM_PROTECTION_LID||t===Me.LOWERING_ARM_PROTECTION_LID){let c=new T().setY(this.#s.position+this.#s.armPosition);const u=this.#c.clone().setY(this.#c.y+this.#s.position),p=new _e().setFromAxisAngle(fA,this.#s.armProtectionLidAngle);c=c.sub(u).applyQuaternion(p).add(u),l.body.setNextKinematicTranslation(c),l.body.setNextKinematicRotation(p)}if(t===Me.INITIALIZING_COIN){const c=this.#o.clone();c.setZ(c.z+this.#s.armPosition),c.setY(c.y+this.#s.position),this.#s.coin=this.#a({position:c,rotation:Na}),this.#s.coins.push(this.#s.coin)}if(t===Me.PUSHING_COIN&&this.#s.coin.body.applyImpulse(mA,!0),t===Me.LOWERING_BASE){this.#s.coin.body.setRotation(new _e(Na.x,Na.y,Na.z,1),!1);const c=this.#s.coin.body.translation();this.#s.coin.body.setTranslation(new T(this.#i,c.y,this.#r.z),!1)}e.forEach(({meshes:c,body:u})=>{c.forEach(({data:p})=>{p.position.copy(u.translation()),p.quaternion.copy(u.rotation())})})}n.state!==Vn.IDLE&&n.bulbs.forEach((s,r)=>{this.#t[r].emissiveIntensity=s.intensity}),this.#s.nextState&&(this.#s.state=this.#s.nextState),this.#s.lights.nextState&&(this.#s.lights.state=this.#s.lights.nextState)}deliver({levels:e=rd}={levels:rd}){e=Math.max(rd,Math.min(bA,e)),this.#s.state===Me.IDLE?(this.#s.levels=e,this.#s.state=Me.ACTIVATING):this.#s.pendingDeliveries.push({levels:e})}save(){const e={};this.#s.parts.forEach(({body:n},s)=>{e[s]={bodyHandle:n.handle}});const t=this.#s.coins.map(n=>n.body.handle);return{state:this.#s.state.description,parts:e,position:this.#s.position,supportPosition:this.#s.supportPosition,basePosition:this.#s.basePosition,armPosition:this.#s.armPosition,armDoorPosition:this.#s.armDoorPosition,armProtectionLidAngle:this.#s.armProtectionLidAngle,baseAngle:this.#s.baseAngle,level:this.#s.level,levels:this.#s.levels,pendingDeliveries:this.#s.pendingDeliveries.map(n=>({levels:n.levels})),nextState:this.#s.nextState?this.#s.nextState.description:null,coinHandle:this.#s.coin?this.#s.coin.handle:null,coinsHandles:t,lights:{state:this.#s.lights.state.description,nextState:this.#s.lights.nextState?this.#s.lights.nextState.description:null,frameLastRefresh:this.#s.lights.frameLastRefresh,bulbs:this.#s.lights.bulbs.map(n=>({intensity:n.intensity}))}}}load(e){this.#s.state=Symbol.for(e.state),this.#s.position=e.position,this.#s.supportPosition=e.supportPosition,this.#s.basePosition=e.basePosition,this.#s.armPosition=e.armPosition,this.#s.armDoorPosition=e.armDoorPosition,this.#s.armProtectionLidAngle=e.armProtectionLidAngle,this.#s.baseAngle=e.baseAngle,this.#s.level=e.level,this.#s.levels=e.levels,this.#s.pendingDeliveries=e.pendingDeliveries.map(t=>({levels:t.levels})),this.#s.nextState=e.nextState?Symbol.for(e.nextState):null,e.coinHandle?this.#s.coin=this.#e.worldBodies.get(e.coinHandle):this.#s.coin=null,this.#s.coins=[],e.coinsHandles.forEach(t=>this.#s.coins.push(this.#e.worldBodies.get(t))),this.#s.parts.forEach((t,n)=>{const s=e.parts[n];s&&(t.body=this.#e.worldBodies.get(s.bodyHandle))}),this.#s.lights.state=Symbol.for(e.lights.state),this.#s.lights.nextState=e.lights.nextState?Symbol.for(e.lights.nextState):null,this.#s.lights.frameLastRefresh=e.lights.frameLastRefresh,this.#s.lights.bulbs=e.lights.bulbs.map(t=>({intensity:t.intensity}))}get active(){return this.#s.state!==Me.IDLE&&this.#s.state!==Me.ACTIVATING}}function LA({stacker:i,canActivate:e}){switch(i.nextState=null,i.state){case Me.IDLE:break;case Me.ACTIVATING:e()&&(i.nextState=Me.RAISING_STACKER_TO_CLEANUP_POSITION,i.lights.state=Vn.ACTIVATING);break;case Me.RAISING_STACKER_TO_CLEANUP_POSITION:i.position+=Hf,i.position>qf&&(i.position=qf,i.nextState=Me.RAISING_BASE_TO_CLEANUP_POSITION);break;case Me.RAISING_BASE_TO_CLEANUP_POSITION:i.basePosition+=sd,i.basePosition>Vf&&(i.basePosition=Vf,i.nextState=Me.CLEANING_UP_BASE_LEFT);break;case Me.CLEANING_UP_BASE_LEFT:i.baseAngle-=Af,i.baseAngle<-If*Gf&&(i.baseAngle=Fa,i.nextState=Me.CLEANING_UP_BASE_RIGHT);break;case Me.CLEANING_UP_BASE_RIGHT:i.baseAngle+=Af,i.baseAngle>If*Gf&&(i.baseAngle=Fa,i.nextState=Me.RAISING_STACKER);break;case Me.RAISING_STACKER:i.position+=Hf,i.position>Yf&&(i.position=Yf,i.nextState=Me.RAISING_ARM_PROTECTION_LID);break;case Me.RAISING_ARM_PROTECTION_LID:i.armProtectionLidAngle-=Xf,i.armProtectionLidAngle<Uf&&(i.armProtectionLidAngle=Uf,i.nextState=Me.LOWERING_ARM_PROTECTION_LID);break;case Me.LOWERING_ARM_PROTECTION_LID:i.armProtectionLidAngle+=Xf,i.armProtectionLidAngle>Sc&&(i.armProtectionLidAngle=Sc,i.nextState=Me.LOWERING_SUPPORT_TO_READY_POSITION);break;case Me.LOWERING_SUPPORT_TO_READY_POSITION:i.supportPosition-=Ef,i.supportPosition<Ff&&(i.supportPosition=Ff,i.nextState=Me.LOWERING_BASE_TO_READY_POSITION);break;case Me.LOWERING_BASE_TO_READY_POSITION:i.basePosition-=sd,i.basePosition<Cf&&(i.basePosition=Cf,i.nextState=Me.OPENING_ARM_DOOR);break;case Me.OPENING_ARM_DOOR:i.armDoorPosition-=zf,i.armDoorPosition<jf&&(i.armDoorPosition=jf,i.nextState=Me.MOVING_ARM_TO_DROP_POSITION);break;case Me.MOVING_ARM_TO_DROP_POSITION:i.armPosition+=Of,i.armPosition>Wf&&(i.armPosition=Wf,i.nextState=Me.INITIALIZING_COIN);break;case Me.INITIALIZING_COIN:i.nextState=Me.PUSHING_COIN;break;case Me.PUSHING_COIN:i.coin.position.y<Df+i.position&&(i.nextState=Me.LOWERING_BASE);break;case Me.LOWERING_BASE:i.basePosition-=sd,Df+i.position-i.coin.position.y>pA&&(i.nextState=Me.FINISHING_LEVEL);break;case Me.FINISHING_LEVEL:i.level++,i.level<i.levels?i.nextState=Me.INITIALIZING_COIN:(i.level=B3,i.levels=-1,i.nextState=Me.MOVING_ARM_TO_INITIAL_POSITION);break;case Me.MOVING_ARM_TO_INITIAL_POSITION:i.armPosition-=Of,i.armPosition<gc&&(i.armPosition=gc,i.nextState=Me.CLOSING_ARM_DOOR);break;case Me.CLOSING_ARM_DOOR:i.armDoorPosition+=zf,i.armDoorPosition>xc&&(i.armDoorPosition=xc,i.nextState=Me.LOWERING_STACKER);break;case Me.LOWERING_STACKER:i.position-=Ef,i.position<Tc&&(i.position=Tc,i.basePosition=k3,i.supportPosition=J3,i.baseAngle=Fa,i.nextState=Me.PREPARING_IDLE);break;case Me.PREPARING_IDLE:if(i.coin=null,i.coins=[],i.pendingDeliveries.length>0){const{levels:t}=i.pendingDeliveries.shift();i.levels=t,i.nextState=Me.ACTIVATING}else i.nextState=Me.IDLE;break}}function NA({stacker:i}){switch(i.lights.nextState=null,i.lights.state){case Vn.IDLE:break;case Vn.ACTIVATING:i.lights.frameLastRefresh=0,i.lights.nextState=Vn.BLINKING;break;case Vn.BLINKING:i.lights.frameLastRefresh++,i.lights.frameLastRefresh>PA&&(i.lights.frameLastRefresh=0,i.lights.bulbs.forEach(e=>{e.intensity=e.intensity>b0?0:Ma})),i.state===Me.INITIALIZING_COIN&&(i.lights.nextState=Vn.ROTATING);break;case Vn.ROTATING:i.lights.bulbs.forEach((e,t)=>{e.intensity=(t+i.level)%2<1?0:Ma}),i.state===Me.LOWERING_STACKER&&(i.lights.nextState=Vn.DELIVERING);break;case Vn.DELIVERING:i.lights.frameLastRefresh++,i.lights.frameLastRefresh>RA&&(i.lights.frameLastRefresh=0,i.lights.bulbs.forEach(e=>{e.intensity=e.intensity==Ma?0:Ma})),i.state===Me.PREPARING_IDLE&&(i.lights.nextState=Vn.PREPARING_IDLE);break;case Vn.PREPARING_IDLE:i.lights.bulbs.forEach(e=>{e.intensity=b0}),i.lights.frameLastRefresh=-1,i.lights.nextState=Vn.IDLE;break}}async function MA({scene:i,offsetX:e}){const n=(await i.loadModel(lA)).scene,s=new Map,r=new T,o=new T,a=new T,l=[];return n.traverse(d=>{if(d.isMesh){const{material:c,geometry:u}=d;for(let h=0;h<u.index.count;h++){const v=u.attributes.position;v.setX(h,v.getX(h)+e)}const p=c.userData;if(p.collider){const h=p.name,v=u.index,x=u.attributes.position,m=[],f=[];for(let O=0;O<x.count;O++)m.push(x.getX(O),x.getY(O),x.getZ(O));for(let O=0;O<v.count;O++)f.push(v.getX(O));const N=od(s,h);N.friction=p.friction,N.restitution=p.restitution,N.kinematic=p.kinematic,N.cuboid=p.cuboid,N.cylinder=p.cylinder,N.meshes.push({data:d,vertices:m,indices:f})}else{d.material.userData.light&&(l[d.material.userData.index]=d.material);const h=d.userData.name;od(s,h).meshes.push({data:d})}}else if(d.userData.collider){const c=d.userData.name,u=od(s,c),p=d.position.clone();p.x+=e,u.colliders.push({position:d.position,radius:d.userData.radius,height:d.userData.height})}else if(d.name==dA){const c=d.position.clone();c.x+=e,r.copy(c)}else if(d.name==cA){const c=d.position.clone();c.x+=e,o.copy(c)}else if(d.name==uA){const c=d.position.clone();c.x+=e,a.copy(c)}}),{parts:s,dropPosition:r,pivotPosition:o,armProtectionLidPivotPosition:a,lightBulbsMaterials:l}}function od(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[],colliders:[]},i.set(e,t)),t}function OA({scene:i,parts:e,offsetX:t}){let n=0;e.forEach(s=>{const{meshes:r,colliders:o,friction:a,restitution:l,kinematic:d,cuboid:c,cylinder:u}=s,p=s.body=d?i.createKinematicBody():i.createFixedBody();if(p.setEnabled(!1),c||u){const h=r[0].data.geometry.boundingBox,v=new T().addVectors(h.min,h.max).multiplyScalar(.5);v.x+=t;const x=new T(h.max.x-h.min.x,h.max.y-h.min.y,h.max.z-h.min.z);let m;c?m=i.createCuboidCollider({position:v.toArray(),width:x.x,height:x.y,depth:x.z,friction:a,restitution:l},p):m=i.createCylinderCollider({position:v.toArray(),radius:x.x/2,height:x.y,friction:a,restitution:l},p),m.setCollisionGroups(1<<n%16<<16|1<<n%16),n++}else{const h=[],v=[];let x=0;r.forEach(m=>{m.vertices&&(h.push(...m.vertices),v.push(...m.indices.map(f=>f+x)),x+=Math.max(...m.indices)+1)}),h.length>0&&(i.createTrimeshCollider({vertices:h,indices:v,friction:a,restitution:l},p).setCollisionGroups(1<<n%16<<16|1<<n%16),n++)}o.forEach(h=>{const{radius:v,position:x,height:m}=h;x.x+=t,i.createCylinderCollider({radius:v,height:m,position:x,friction:a,restitution:l},p).setCollisionGroups(1<<n%16<<16|1<<n%16),n++})})}function zA({lightBulbsMaterials:i,lights:e}){i.forEach((t,n)=>{t.emissive.setHex(SA),t.emissiveIntensity=b0,e.bulbs[n]={intensity:b0}})}const HA="./assets/sweepers.glb",EA="left-base",AA="right-base",K3="left-sweeper",XA="right-sweeper",IA="left-door",DA="right-door",WA="left-flap",jA="right-flap",VA="left-pivot-position",CA="right-pivot-position",FA="left-door-pivot-position",qA="right-door-pivot-position",ls=new T(0,1,0),Oa=new T(0,0,1),v0=26.5*(Math.PI/180),YA=new _e().setFromAxisAngle(ls,-v0),GA=new _e().setFromAxisAngle(ls,v0),kf=.05,za=.002,Jf=.08,Bf=.07,Kf=.01,Qf=Math.PI/2,_f=.01,$f=.001,e2=Math.PI,t2=Math.PI/2,UA=.0075,ZA=.03,n2=.05,Pc=0,Rc=0,Lc=0,kA=0,Nc=0,Mc=0,Oc=0,JA=16711680,zc=0,i2=2,BA=20,dt={IDLE:Symbol.for("sweepers-idle"),ACTIVATING:Symbol.for("sweepers-activating"),OPENING_DOORS:Symbol.for("sweepers-opening-doors"),MOVING_BASE:Symbol.for("sweepers-moving-base"),ROTATING_BASE:Symbol.for("sweepers-rotating-base"),TRANSLATING_BASE:Symbol.for("sweepers-translating-base"),ROTATING_SWEEPERS:Symbol.for("sweepers-rotating-sweepers"),DEPLOYING_FLAPS:Symbol.for("sweepers-deploying-flaps"),SWEEPING:Symbol.for("sweepers-sweeping"),SWEEPING_BACK:Symbol.for("sweepers-sweeping-back"),RETRACTING_FLAPS:Symbol.for("sweepers-retracting-flaps"),ROTATING_SWEEPERS_BACK:Symbol.for("sweepers-rotating-sweepers-back"),TRANSLATING_BASE_BACK:Symbol.for("sweepers-translating-base-back"),ROTATING_BASE_BACK:Symbol.for("sweepers-rotating-base-back"),MOVING_BASE_BACK:Symbol.for("sweepers-moving-base-back"),CLOSING_DOORS:Symbol.for("sweepers-closing-doors")},ds={IDLE:Symbol.for("sweepers-lights-idle"),ACTIVATING:Symbol.for("sweepers-lights-activating"),BLINKING:Symbol.for("sweepers-lights-blinking")};class KA{#e;#t;#n;#a;#o;#r;#c;#i;#s;#d;#p;#l;#b;#g;#m=new T;#h=new T;#v=new _e;#y=new _e;#f=new T;#T=new T;#S=new T;#P=new T;#w=new _e;#L=new _e;#R=new _e;#x=new _e;#N=new _e;#z=new _e;#H=new T;#E=new T;#A=new T;#X=new T;#I=new T;#D=new T;#M=new _e;#O=new _e;#W=new T;#j=new T;#V;#C;#u={parts:null,state:dt.IDLE,position:Pc,rotation:Rc,translation:Lc,sweepersRotationZ:kA,sweepersRotationY:Nc,doorsRotation:Mc,flapsPosition:Oc,level:0,pendingSweeps:[],nextState:null,lights:{state:ds.IDLE,leftOn:!1,rightOn:!1,frameLastRefresh:-1}};constructor({scene:e,canActivate:t}){this.#e=e,this.#t=t}async initialize(){const e=this.#e,{parts:t,leftPivotPosition:n,rightPivotPosition:s,leftDoorPivotPosition:r,rightDoorPivotPosition:o,leftLightMaterial:a,rightLightMaterial:l}=await $A({scene:e});this.#n=n,this.#a=s,this.#o=r,this.#r=o,this.#V=a,this.#C=l,eX({scene:e,parts:t}),t.forEach(({body:d,meshes:c})=>{c.forEach(({data:u})=>this.#e.addObject(u)),d.setEnabled(!0)}),Object.assign(this.#u,{parts:t}),this.#c=t.get(EA),this.#i=t.get(AA),this.#p=t.get(K3),this.#l=t.get(XA),this.#s=t.get(IA),this.#d=t.get(DA),this.#b=t.get(WA),this.#g=t.get(jA)}update(){QA({sweepers:this.#u,canActivate:()=>this.#t(this)}),_A({sweepers:this.#u,lights:this.#u.lights});const{parts:e,state:t}=this.#u;t!==dt.IDLE&&(this.#m.set(this.#u.position,0,0),this.#h.set(-this.#u.position,0,0),this.#v.setFromAxisAngle(ls,-this.#u.rotation),this.#y.setFromAxisAngle(ls,this.#u.rotation),this.#L.setFromAxisAngle(ls,-this.#u.sweepersRotationY),this.#R.setFromAxisAngle(Oa,this.#u.sweepersRotationZ),this.#N.setFromAxisAngle(ls,this.#u.sweepersRotationY),this.#z.setFromAxisAngle(Oa,-this.#u.sweepersRotationZ),this.#w.setFromAxisAngle(ls,-this.#u.rotation).multiply(this.#L).multiply(this.#R),this.#x.setFromAxisAngle(ls,this.#u.rotation).multiply(this.#N).multiply(this.#z),this.#f.set(this.#u.translation,0,0).applyQuaternion(this.#v),this.#T.set(-this.#u.translation,0,0).applyQuaternion(this.#y),this.#E.set(-this.#u.flapsPosition,0,0),this.#W.set(this.#u.flapsPosition,0,0),this.#S.copy(this.#m).sub(this.#n).applyQuaternion(this.#w).add(this.#n).add(this.#f),this.#P.copy(this.#h).sub(this.#a).applyQuaternion(this.#x).add(this.#a).add(this.#T),this.#A.copy(this.#m).sub(this.#n).add(this.#E).applyQuaternion(this.#w).add(this.#n).add(this.#f),this.#j.copy(this.#h).sub(this.#a).add(this.#W).applyQuaternion(this.#x).add(this.#a).add(this.#T),this.#m.sub(this.#n).applyQuaternion(this.#v).add(this.#n).add(this.#f),this.#h.sub(this.#a).applyQuaternion(this.#y).add(this.#a).add(this.#T),this.#H.copy(Oa).applyQuaternion(YA),this.#M.setFromAxisAngle(this.#H,this.#u.doorsRotation),this.#I.set(0,0,0).sub(this.#o).applyQuaternion(this.#M).add(this.#o),this.#X.copy(Oa).applyQuaternion(GA),this.#O.setFromAxisAngle(this.#X,-this.#u.doorsRotation),this.#D.set(0,0,0).sub(this.#r).applyQuaternion(this.#O).add(this.#r),this.#c.body.setNextKinematicTranslation(this.#m),this.#i.body.setNextKinematicTranslation(this.#h),this.#p.body.setNextKinematicTranslation(this.#S),this.#l.body.setNextKinematicTranslation(this.#P),this.#b.body.setNextKinematicTranslation(this.#A),this.#g.body.setNextKinematicTranslation(this.#j),this.#b.body.setNextKinematicRotation(this.#w),this.#g.body.setNextKinematicRotation(this.#x),this.#s.body.setNextKinematicTranslation(this.#I),this.#d.body.setNextKinematicTranslation(this.#D),this.#c.body.setNextKinematicRotation(this.#v),this.#i.body.setNextKinematicRotation(this.#y),this.#p.body.setNextKinematicRotation(this.#w),this.#l.body.setNextKinematicRotation(this.#x),this.#s.body.setNextKinematicRotation(this.#M),this.#d.body.setNextKinematicRotation(this.#O),e.forEach(({meshes:n,body:s})=>{n.forEach(({data:r})=>{r.position.copy(s.translation()),r.quaternion.copy(s.rotation())})}),this.#u.lights.state===ds.BLINKING&&(this.#V.emissiveIntensity=this.#u.lights.leftOn?i2:zc,this.#C.emissiveIntensity=this.#u.lights.rightOn?i2:zc)),this.#u.nextState&&(this.#u.state=this.#u.nextState),this.#u.lights.nextState&&(this.#u.lights.state=this.#u.lights.nextState)}sweepFloor({level:e}={level:0}){e=Math.max(0,Math.min(10,e))/10,this.#u.state===dt.IDLE?(this.#u.level=e,this.#u.state=dt.ACTIVATING):this.#u.pendingSweeps.push({level:e})}save(){const e={};return this.#u.parts.forEach(({body:t},n)=>{e[n]={bodyHandle:t.handle}}),{state:this.#u.state.description,nextState:this.#u.nextState?this.#u.nextState.description:null,parts:e,position:this.#u.position,rotation:this.#u.rotation,translation:this.#u.translation,sweepersRotationZ:this.#u.sweepersRotationZ,sweepersRotationY:this.#u.sweepersRotationY,doorsRotation:this.#u.doorsRotation,pendingSweeps:this.#u.pendingSweeps.map(t=>({level:t.level})),lights:{state:this.#u.lights.state.description,nextState:this.#u.lights.nextState?this.#u.lights.nextState.description:null,leftOn:this.#u.lights.leftOn,rightOn:this.#u.lights.rightOn,frameLastRefresh:this.#u.lights.frameLastRefresh}}}load(e){this.#u.state=Symbol.for(e.state),this.#u.nextState=e.nextState?Symbol.for(e.nextState):null,this.#u.position=e.position,this.#u.rotation=e.rotation,this.#u.translation=e.translation,this.#u.sweepersRotationZ=e.sweepersRotationZ,this.#u.sweepersRotationY=e.sweepersRotationY,this.#u.doorsRotation=e.doorsRotation,this.#u.pendingSweeps=e.pendingSweeps.map(t=>({level:t.level})),this.#u.lights.state=Symbol.for(e.lights.state),this.#u.lights.nextState=e.lights.nextState?Symbol.for(e.lights.nextState):null,this.#u.lights.leftOn=e.lights.leftOn,this.#u.lights.rightOn=e.lights.rightOn,this.#u.lights.frameLastRefresh=e.lights.frameLastRefresh,this.#u.parts.forEach((t,n)=>{const s=e.parts[n];s&&(t.body=this.#e.worldBodies.get(s.bodyHandle))})}get active(){return this.#u.state!==dt.IDLE&&this.#u.state!==dt.ACTIVATING}}function QA({sweepers:i,canActivate:e}){switch(i.nextState=null,i.state){case dt.IDLE:break;case dt.ACTIVATING:e()&&(i.nextState=dt.OPENING_DOORS);break;case dt.OPENING_DOORS:i.doorsRotation+=kf,i.doorsRotation>Qf&&(i.doorsRotation=Qf,i.nextState=dt.MOVING_BASE);break;case dt.MOVING_BASE:i.position+=za,i.position>Jf&&(i.position=Jf,i.nextState=dt.ROTATING_BASE);break;case dt.ROTATING_BASE:i.rotation+=Kf,i.rotation>v0&&(i.rotation=v0,i.nextState=dt.TRANSLATING_BASE);break;case dt.TRANSLATING_BASE:i.translation+=za,i.translation>Bf&&(i.translation=Bf,i.nextState=dt.ROTATING_SWEEPERS);break;case dt.ROTATING_SWEEPERS:i.sweepersRotationZ+=n2,i.sweepersRotationZ>t2&&(i.sweepersRotationZ=t2,i.nextState=dt.DEPLOYING_FLAPS);break;case dt.DEPLOYING_FLAPS:i.flapsPosition+=$f,i.flapsPosition>_f*i.level&&(i.flapsPosition=_f*i.level,i.nextState=dt.SWEEPING,i.lights.state=ds.ACTIVATING);break;case dt.SWEEPING:i.sweepersRotationY+=UA,i.sweepersRotationY>e2&&(i.sweepersRotationY=e2,i.nextState=dt.RETRACTING_FLAPS);break;case dt.RETRACTING_FLAPS:i.flapsPosition-=$f,i.flapsPosition<Oc&&(i.flapsPosition=Oc,i.nextState=dt.ROTATING_SWEEPERS_BACK);break;case dt.ROTATING_SWEEPERS_BACK:i.sweepersRotationZ-=n2,i.sweepersRotationZ<0&&(i.sweepersRotationZ=0,i.nextState=dt.SWEEPING_BACK);break;case dt.SWEEPING_BACK:if(i.sweepersRotationY-=ZA,i.sweepersRotationY<Nc)if(i.sweepersRotationY=Nc,i.pendingSweeps.length){const{level:t}=i.pendingSweeps.shift();i.level=t,i.nextState=dt.OPENING_DOORS}else i.nextState=dt.TRANSLATING_BASE_BACK;break;case dt.TRANSLATING_BASE_BACK:i.translation-=za,i.translation<Lc&&(i.translation=Lc,i.nextState=dt.ROTATING_BASE_BACK);break;case dt.ROTATING_BASE_BACK:i.rotation-=Kf,i.rotation<Rc&&(i.rotation=Rc,i.nextState=dt.MOVING_BASE_BACK);break;case dt.MOVING_BASE_BACK:i.position-=za,i.position<Pc&&(i.position=Pc,i.nextState=dt.CLOSING_DOORS);break;case dt.CLOSING_DOORS:i.doorsRotation-=kf,i.doorsRotation<Mc&&(i.doorsRotation=Mc,i.nextState=dt.IDLE);break}}function _A({sweepers:i,lights:e}){switch(e.nextState=null,e.state){case ds.IDLE:break;case ds.ACTIVATING:e.frameLastRefresh=0,e.leftOn=!0,e.rightOn=!1,e.nextState=ds.BLINKING;break;case ds.BLINKING:e.frameLastRefresh++,e.frameLastRefresh>BA&&(e.frameLastRefresh=0,e.leftOn=!e.leftOn,e.rightOn=!e.rightOn),i.state==dt.TRANSLATING_BASE_BACK&&(e.leftOn=!1,e.rightOn=!1,e.frameLastRefresh=-1,e.nextState=ds.IDLE);break}}async function $A({scene:i}){const t=(await i.loadModel(HA)).scene,n=new Map,s=new T,r=new T,o=new T,a=new T;let l,d;return t.traverse(c=>{if(c.isMesh){const{material:u,geometry:p}=c,h=u.userData;if(h.collider){const v=h.name,x=p.index,m=p.attributes.position,f=[],N=[];for(let P=0;P<m.count;P++)f.push(m.getX(P),m.getY(P),m.getZ(P));for(let P=0;P<x.count;P++)N.push(x.getX(P));const O=s2(n,v);O.friction=h.friction,O.restitution=h.restitution,O.kinematic=h.kinematic,O.cuboid=h.cuboid,O.meshes.push({data:c,vertices:f,indices:N})}else s2(n,c.userData.name).meshes.push({data:c}),h.light&&(h.name==K3?l=u:d=u,u.emissive.setHex(JA),u.emissiveIntensity=zc)}else c.name==VA?s.copy(c.position):c.name==CA?r.copy(c.position):c.name==FA?o.copy(c.position):c.name==qA&&a.copy(c.position)}),{parts:n,leftPivotPosition:s,rightPivotPosition:r,leftDoorPivotPosition:o,rightDoorPivotPosition:a,leftLightMaterial:l,rightLightMaterial:d}}function s2(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[],colliders:[]},i.set(e,t)),t}function eX({scene:i,parts:e}){let t=0;e.forEach(n=>{const{meshes:s,friction:r,restitution:o,kinematic:a,cuboid:l}=n,d=n.body=a?i.createKinematicBody():i.createFixedBody();if(d.setEnabled(!1),l){const c=s[0].data.geometry.boundingBox,u=new T().addVectors(c.min,c.max).multiplyScalar(.5).toArray(),p=new T(c.max.x-c.min.x,c.max.y-c.min.y,c.max.z-c.min.z);let h;l&&(h=i.createCuboidCollider({position:u,width:p.x,height:p.y,depth:p.z,friction:r,restitution:o},d)),h.setCollisionGroups(1<<t%16<<16|1<<t%16),t++}else{const c=[],u=[];let p=0;s.forEach(h=>{h.vertices&&(c.push(...h.vertices),u.push(...h.indices.map(v=>v+p)),p+=Math.max(...h.indices)+1)}),c.length>0&&(i.createTrimeshCollider({vertices:c,indices:u,friction:r,restitution:o},d).setCollisionGroups(1<<t%16<<16|1<<t%16),t++)}})}const r2=new T,tX=new _e,o2=new T;class nX extends Zt{constructor(e=document.createElement("div")){super(),this.isCSS3DObject=!0,this.element=e,this.element.style.position="absolute",this.element.style.pointerEvents="auto",this.element.style.userSelect="none",this.element.setAttribute("draggable",!1),this.addEventListener("removed",function(){this.traverse(function(t){t.element instanceof t.element.ownerDocument.defaultView.Element&&t.element.parentNode!==null&&t.element.remove()})})}copy(e,t){return super.copy(e,t),this.element=e.element.cloneNode(!0),this}}const bi=new Be,iX=new Be;class sX{constructor(e={}){const t=this;let n,s,r,o;const a={camera:{style:""},objects:new WeakMap},l=e.element!==void 0?e.element:document.createElement("div");l.style.overflow="hidden",this.domElement=l;const d=document.createElement("div");d.style.transformOrigin="0 0",d.style.pointerEvents="none",l.appendChild(d);const c=document.createElement("div");c.style.transformStyle="preserve-3d",d.appendChild(c),this.getSize=function(){return{width:n,height:s}},this.render=function(m,f){const N=f.projectionMatrix.elements[5]*o;f.view&&f.view.enabled?(d.style.transform=`translate( ${-f.view.offsetX*(n/f.view.width)}px, ${-f.view.offsetY*(s/f.view.height)}px )`,d.style.transform+=`scale( ${f.view.fullWidth/f.view.width}, ${f.view.fullHeight/f.view.height} )`):d.style.transform="",m.matrixWorldAutoUpdate===!0&&m.updateMatrixWorld(),f.parent===null&&f.matrixWorldAutoUpdate===!0&&f.updateMatrixWorld();let O,P;f.isOrthographicCamera&&(O=-(f.right+f.left)/2,P=(f.top+f.bottom)/2);const j=f.view&&f.view.enabled?f.view.height/f.view.fullHeight:1,D=f.isOrthographicCamera?`scale( ${j} )scale(`+N+")translate("+u(O)+"px,"+u(P)+"px)"+p(f.matrixWorldInverse):`scale( ${j} )translateZ(`+N+"px)"+p(f.matrixWorldInverse),G=(f.isPerspectiveCamera?"perspective("+N+"px) ":"")+D+"translate("+r+"px,"+o+"px)";a.camera.style!==G&&(c.style.transform=G,a.camera.style=G),x(m,m,f)},this.setSize=function(m,f){n=m,s=f,r=n/2,o=s/2,l.style.width=m+"px",l.style.height=f+"px",d.style.width=m+"px",d.style.height=f+"px",c.style.width=m+"px",c.style.height=f+"px"};function u(m){return Math.abs(m)<1e-10?0:m}function p(m){const f=m.elements;return"matrix3d("+u(f[0])+","+u(-f[1])+","+u(f[2])+","+u(f[3])+","+u(f[4])+","+u(-f[5])+","+u(f[6])+","+u(f[7])+","+u(f[8])+","+u(-f[9])+","+u(f[10])+","+u(f[11])+","+u(f[12])+","+u(-f[13])+","+u(f[14])+","+u(f[15])+")"}function h(m){const f=m.elements;return"translate(-50%,-50%)"+("matrix3d("+u(f[0])+","+u(f[1])+","+u(f[2])+","+u(f[3])+","+u(-f[4])+","+u(-f[5])+","+u(-f[6])+","+u(-f[7])+","+u(f[8])+","+u(f[9])+","+u(f[10])+","+u(f[11])+","+u(f[12])+","+u(f[13])+","+u(f[14])+","+u(f[15])+")")}function v(m){m.isCSS3DObject&&(m.element.style.display="none");for(let f=0,N=m.children.length;f<N;f++)v(m.children[f])}function x(m,f,N,O){if(m.visible===!1){v(m);return}if(m.isCSS3DObject){const P=m.layers.test(N.layers)===!0,j=m.element;if(j.style.display=P===!0?"":"none",P===!0){m.onBeforeRender(t,f,N);let D;m.isCSS3DSprite?(bi.copy(N.matrixWorldInverse),bi.transpose(),m.rotation2D!==0&&bi.multiply(iX.makeRotationZ(m.rotation2D)),m.matrixWorld.decompose(r2,tX,o2),bi.setPosition(r2),bi.scale(o2),bi.elements[3]=0,bi.elements[7]=0,bi.elements[11]=0,bi.elements[15]=1,D=h(bi)):D=h(m.matrixWorld);const V=a.objects.get(m);if(V===void 0||V.style!==D){j.style.transform=D;const G={style:D};a.objects.set(m,G)}j.parentNode!==c&&c.appendChild(j),m.onAfterRender(t,f,N)}}for(let P=0,j=m.children.length;P<j;P++)x(m.children[P],f,N)}}}const rX="./assets/screen.glb",oX="display",aX=.442,lX=.319;class dX{#e;#t;#n;#a;constructor({scene:e}){this.#e=e,this.#t=document.createElement("iframe"),this.#t.style.width=`${aX*1e3}px`,this.#t.style.height=`${lX*1e3}px`,this.#t.style.border="none",this.#n=new sX,this.#n.setSize(window.innerWidth,window.innerHeight),this.#n.domElement.style.position="absolute",this.#n.domElement.style.top=0,e.containerElement.appendChild(this.#n.domElement)}async initialize(){const{screenPosition:e,screenRotation:t}=await cX({scene:this.#e});return this.#a=new nX(this.#t),this.#a.position.copy(e),this.#a.rotation.copy(t),this.#a.scale.set(.001,.001,.001),this.#e.css3DScene.add(this.#a),new Promise(n=>{addEventListener("message",()=>n(),{once:!0}),this.#t.src="views/index.html",this.update()})}update(){const e=this.#e.camera.position.clone(),t=this.#a.position.clone(),n=new T(0,0,1);n.applyQuaternion(this.#a.quaternion);const r=e.sub(t).normalize().dot(n);this.#a.visible=r>0,this.#n.render(this.#e.css3DScene,this.#e.camera)}resize(e,t){this.#n&&this.#n.setSize(e,t)}showDemoMode(){this.#t.contentWindow.postMessage({type:"showDemoMode"},"*")}showRunStart(e){this.#t.contentWindow.postMessage({type:"showRunStart",...e},"*")}showRunComplete(e){this.#t.contentWindow.postMessage({type:"showRunComplete",...e},"*")}}async function cX({scene:i}){const t=(await i.loadModel(rX)).scene;let n,s;return t.traverse(r=>{r.name===oX&&(n=r.position,s=r.rotation)}),i.addObject(t),{screenPosition:n,screenRotation:s}}const uX="./assets/card-reader.glb",pX="init-position",Hc=0,a2=.05,l2=.175,d2=.125,Ec=-.01,c2=0,u2=.001,p2=.0025,f2=5,fX=15198183,hX=65314,mX=14540253,bX=.05,Q3=0,Ft={IDLE:Symbol.for("card-reader-idle"),ACTIVATING:Symbol.for("card-reader-activating"),RETRIEVING_CARD:Symbol.for("card-reader-retrieving-card"),READING_CARD:Symbol.for("card-reader-reading-card"),RAISING_CARD:Symbol.for("card-reader-raising-card"),PUSHING_CARD:Symbol.for("card-reader-pushing-card"),RETRACTING_CARD:Symbol.for("card-reader-retracting-card"),LOWERING_CARD:Symbol.for("card-reader-lowering-card"),PREPARING_IDLE:Symbol.for("card-reader-preparing-idle")};class vX{#e;#t;#n;#a;#o;#r;#c;#i=new T;#s=new _e;#d;#p={state:Ft.IDLE,cardPositionY:Ec,cardPositionZ:Hc,cardValidated:!1,pendingCardTypes:[],nextState:null,lights:{on:!1,frameLastRefresh:-1}};constructor({scene:e,onRetrieveCard:t,onRecycleCard:n,onReadCard:s}){this.#e=e,this.#n=t,this.#a=n,this.#o=s}async initialize(){const e=this.#e,{parts:t,initPosition:n,lightsMaterials:s}=await wX({scene:e});this.#t=n,this.#d=s,t.forEach(({meshes:r})=>r.forEach(({data:o})=>this.#e.addObject(o))),Object.assign(this.#p,{parts:t})}update(){yX({cardReader:this.#p});const{parts:e,state:t}=this.#p;t!==Ft.IDLE&&(t===Ft.RETRIEVING_CARD&&(this.#s.setFromAxisAngle(new T(0,1,0),Math.PI/2),this.#r=this.#n({type:this.#c,position:this.#i,rotation:this.#s})),t===Ft.PREPARING_IDLE&&(this.#r.body.collider(0).setEnabled(!0),this.#a(this.#r),this.#r=null),t===Ft.READING_CARD&&this.#o(this.#r),this.#d.forEach(n=>{this.#p.lights.on?(n.color.setHex(hX),n.emissiveIntensity=bX):(n.color.setHex(fX),n.emissiveIntensity=Q3)}),this.#r&&(this.#i.copy(this.#t),this.#i.z+=this.#p.cardPositionZ,this.#i.y+=this.#p.cardPositionY,this.#r.body.setTranslation(this.#i),this.#r.body.setRotation(this.#s),this.#r.body.collider(0).setEnabled(!1))),this.#p.nextState&&(this.#p.state=this.#p.nextState)}readCard(e){this.#p.state===Ft.IDLE?(this.#c=e.type,this.#p.state=Ft.ACTIVATING):this.#p.pendingCardTypes.push(e.type)}save(){}load(e){}}function yX({cardReader:i}){switch(i.nextState=null,i.state){case Ft.IDLE:break;case Ft.ACTIVATING:i.nextState=Ft.RETRIEVING_CARD;break;case Ft.RETRIEVING_CARD:i.nextState=Ft.RAISING_CARD;break;case Ft.RAISING_CARD:i.cardPositionY+=u2,i.cardPositionY>=c2&&(i.cardPositionY=c2,i.nextState=Ft.PUSHING_CARD);break;case Ft.PUSHING_CARD:i.cardPositionZ+=p2,i.cardValidated&&i.cardPositionZ>=d2?(i.cardPositionZ=d2,i.nextState=Ft.RETRACTING_CARD):!i.cardValidated&&i.cardPositionZ>=l2&&(i.cardPositionZ=l2,i.nextState=Ft.RETRACTING_CARD),i.cardValidated&&(i.lights.frameLastRefresh++,i.lights.frameLastRefresh>f2&&(i.lights.frameLastRefresh=0,i.lights.on=!i.lights.on));break;case Ft.RETRACTING_CARD:i.cardPositionZ-=p2,i.cardValidated&&i.cardPositionZ<=Hc?(i.cardPositionZ=Hc,i.lights.on=!1,i.lights.frameLastRefresh=-1,i.nextState=Ft.READING_CARD):!i.cardValidated&&i.cardPositionZ<=a2&&(i.cardPositionZ=a2,i.cardValidated=!0,i.nextState=Ft.PUSHING_CARD),i.cardValidated?(i.lights.frameLastRefresh++,i.lights.frameLastRefresh>f2&&(i.lights.frameLastRefresh=0,i.lights.on=!i.lights.on)):i.lights.on=!0;break;case Ft.READING_CARD:i.nextState=Ft.LOWERING_CARD;break;case Ft.LOWERING_CARD:i.cardPositionY-=u2,i.cardPositionY<=Ec&&(i.cardPositionY=Ec,i.nextState=Ft.PREPARING_IDLE);break;case Ft.PREPARING_IDLE:i.cardValidated=!1,i.nextState=Ft.IDLE}}async function wX({scene:i}){const t=(await i.loadModel(uX)).scene,n=new Map,s=new T,r=[];return t.traverse(o=>{if(o.isMesh){gX(n,o.userData.name).meshes.push({data:o});const{material:l}=o;l.userData.light&&(l.emissive.setHex(mX),l.emissiveIntensity=Q3,r[l.userData.index]=l)}else o.name==pX&&s.copy(o.position)}),{parts:n,initPosition:s,lightsMaterials:r}}function gX(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[]},i.set(e,t)),t}const xX="./assets/token-slot.glb",TX="insert-position",SX=0,ad={IDLE:Symbol.for("token-slot-idle"),ACTIVATING:Symbol.for("token-slot-activating")};class PX{#e;#t;#n;#a={state:ad.IDLE,cardPosition:SX,pendingTokens:[],nextState:null};constructor({scene:e,onTokenInserted:t}){this.#e=e,this.#n=t}async initialize(){const e=this.#e,{parts:t,insertPosition:n}=await LX({scene:e});this.#t=n,t.forEach(({meshes:s})=>s.forEach(({data:r})=>this.#e.addObject(r))),Object.assign(this.#a,{parts:t})}update(){RX({tokenSlot:this.#a});const{parts:e,state:t}=this.#a;this.#a.nextState&&(this.#a.state=this.#a.nextState)}insertToken(e){this.#a.state===ad.IDLE?this.#a.state=ad.ACTIVATING:this.#a.pendingTokens.push(e)}save(){}load(e){}}function RX({tokenSlot:i}){i.nextState=null,i.state}async function LX({scene:i}){const t=(await i.loadModel(xX)).scene,n=new Map,s=new T;return t.traverse(r=>{r.isMesh?NX(n,r.name).meshes.push({data:r}):r.name==TX&&s.copy(r.position)}),{parts:n,insertPosition:s}}function NX(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[]},i.set(e,t)),t}const MX=5e3,_3=[{description:"Win 150 points",passed:(i,e)=>i.score-e.scoreStart>=150,message:(i,e)=>"Remaining points: "+(150-(i.score-e.scoreStart))},{description:"Win 200 points",passed:(i,e)=>i.score-e.scoreStart>=200,message:(i,e)=>"Remaining points: "+(200-(i.score-e.scoreStart))},{description:"Win 250 points",passed:(i,e)=>i.score-e.scoreStart>=250,message:(i,e)=>"Remaining points: "+(250-(i.score-e.scoreStart))}],bn={IDLE:Symbol.for("runs-idle"),STARTING_RUNS:Symbol.for("runs-starting-runs"),STARTING_RUN:Symbol.for("runs-starting-run"),RUNNING:Symbol.for("runs-running"),COMPLETED_RUN:Symbol.for("runs-completed-run")};class OX{#e;#t;#n={state:bn.IDLE,step:-1,timeRunCompleted:-1};constructor({state:e,screen:t}){this.#e=e,this.#t=t}initialize(){}load(e){this.#n.state=Symbol.for(e.state),this.#n.data=e.data,this.#n.step=e.step,this.#n.timeRunCompleted=e.timeRunCompleted}save(){return{state:this.#n.state.description,data:this.#n.data,step:this.#n.step,timeRunCompleted:this.#n.timeRunCompleted}}start(){this.#n.state===bn.IDLE&&(this.#n.state=bn.STARTING_RUNS)}update(e){const t=_3[this.#n.step];zX({run:this.#n,state:this.#e,currentRun:t,time:e}),this.#n.state===bn.IDLE?this.#t.showDemoMode():(this.#n.data&&(this.#n.state===bn.STARTING_RUN||this.#n.state===bn.RUNNING)&&this.#t.showRunStart({description:t.description,content:t.message(this.#e,this.#n.data)}),this.#n.state===bn.COMPLETED_RUN&&this.#t.showRunComplete())}get started(){return this.#n.state!==bn.IDLE&&this.#n.state!==bn.STARTING_RUNS}}function zX({run:i,state:e,currentRun:t,time:n}){switch(i.state){case bn.STARTING_RUNS:i.step=0,e.coins=100,i.state=bn.STARTING_RUN;break;case bn.STARTING_RUN:i.data={scoreStart:e.score},i.state=bn.RUNNING;break;case bn.RUNNING:t.passed(e,i.data)&&(i.timeRunCompleted=n,i.state=bn.COMPLETED_RUN);break;case bn.COMPLETED_RUN:n-i.timeRunCompleted>MX&&(i.step++,i.timeRunCompleted=-1,i.step<_3.length?i.state=bn.STARTING_RUN:i.state=bn.IDLE);break}}const HX=-1,EX="./assets/cabinet.glb",AX=.2,XX=65537;class IX{DEBUG_AUTOPLAY=!1;DEBUG_HIDE_CABINET=!1;constructor({scene:e}){this.#e=e}#e;#t={state:{score:0,points:0,coins:0}};#n;#a={"left-trap":e=>{const t=this.#R(e);t&&Ha(t)},"right-trap":e=>{const t=this.#R(e);t&&Ha(t)},gutter:e=>{const t=this.#R(e);t&&(Ha(t),this.#w.started&&(t.objectType===Xt.TYPE&&(this.#t.state.score++,this.#t.state.points++,this.#t.state.coins++),t.objectType===Qn.TYPE&&(this.#t.state.score+=5,this.#t.state.points+=5),t.objectType===Zn.TYPE&&this.#S.readCard(t)))}};#o=new Map;#r;#c;#i;#s;#d;#p;#l;#b;#g;#m;#h;#v;#y;#f;#T;#S;#P;#w;#L;async initialize(){const e=this.#e,{parts:t}=await DX({scene:e,DEBUG_HIDE_CABINET:this.DEBUG_HIDE_CABINET});this.#L=t;const{sensorColliders:n}=WX({scene:e,sensorListeners:this.#a,parts:t});this.#n=n;const s=new dM({scene:e});this.#r=new PM({onPressDropButton:r=>{this.#t.state.coins&&(Xt.dropCoin({slot:r}),this.#t.state.coins--)},onPressActionButton:()=>{this.#m.triggerCoin()},onPressStartButton:()=>{this.#r.disableStartButton(),this.#w.start()}}),this.#c=new AM({scene:e,depositBonus:({reward:r,position:o})=>{Xt.depositCoins({position:o,count:r.coinCount}),Qn.depositTokens({position:o,count:r.tokenCount}),Zn.depositCards({position:o,count:r.cardCount}),Wi.depositIngots({position:o,count:r.ingotCount})}}),this.#i=new jz({scene:e,cabinet:this,state:this.#t.state}),this.#d=new yz({scene:e}),this.#s=new _z({scene:e,onCoinFallen:r=>{Xt.enableCcd(r,!1)},onBonusWon:()=>{const r=Math.random();this.DEBUG_AUTOPLAY?this.#c.deliverBonus({coinCount:10,cardCount:Math.random()<.5?1:0,tokenCount:Math.random()<.5?1:0,ingotCount:Math.random()<.5?1:0}):r<.14?this.#p.spinReels():r<.28?this.#l.pick():r<.43?(this.#r.enableActionButton(),this.#m.shootCoin()):r<.57?(this.#b.shootCoins(),this.#g.shootCoins()):r<.71?(this.#v.deliver({levels:30}),this.#y.deliver({levels:30})):r<.86?this.#f.sweepFloor({level:5}):this.#h.deliver({stacks:7,levels:15})}}),this.#p=new hH({scene:e,onBonusWon:r=>{this.#c.deliverBonus({coinCount:Math.floor(5*Math.random())+10,cardCount:Math.random()<.5?1:0,tokenCount:Math.random()<.5?1:0,ingotCount:Math.random()<.25?1:0})}}),this.#l=new UH({scene:e,canActivate:r=>this.#x(r),onPick:r=>{const o=[];for(let a=0;a<30+Math.floor(Math.random()*10);a++){const l={x:(Math.random()-.5)*Math.PI/4,y:(Math.random()-.5)*Math.PI/4,z:(Math.random()-.5)*Math.PI/4},d={x:r.x+(Math.random()-.5)*.02,y:r.y,z:r.z+(Math.random()-.5)*.02};o.push(Xt.depositCoin({position:d,rotation:l}))}return Math.random()<.25&&o.push(Qn.depositToken({position:{x:r.x+(Math.random()-.5)*.02,y:r.y,z:r.z+(Math.random()-.5)*.02},rotation:{x:(Math.random()-.5)*Math.PI/4,y:(Math.random()-.5)*Math.PI/4,z:(Math.random()-.5)*Math.PI/4}})),o},onGetObject:r=>this.#R(r),onRecycleObject:r=>{const o=this.#R(r);o&&Ha(o)}}),this.#b=new lf({scene:e,offsetX:-.25,oscillationDirection:1,canActivate:r=>this.#x(r),onShootCoin:({position:r,impulse:o})=>{Xt.depositCoin({position:r,impulse:o})}}),this.#g=new lf({scene:e,offsetX:.25,oscillationDirection:-1,canActivate:r=>this.#x(r),onShootCoin:({position:r,impulse:o})=>{Xt.depositCoin({position:r,impulse:o})}}),this.#m=new zE({scene:e,onInitializeCoin:({position:r,rotation:o})=>Xt.depositCoin({position:r,rotation:o}),onGetCoin:r=>Xt.getCoin(r),onRecycleCoin:r=>{Xt.recycle(r),this.#r.disableActionButton()},onBonusWon:r=>{Xt.dropCoins({count:Math.pow(r+1,2)*5}),this.#r.disableActionButton()}}),this.#h=new nA({scene:e,canActivate:r=>this.#x(r),onInitializeCoin:({position:r,rotation:o,impulse:a})=>Xt.depositCoin({position:r,rotation:o,impulse:a})}),this.#v=new Zf({scene:e,canActivate:r=>this.#x(r),onInitializeCoin:({position:r,rotation:o,impulse:a})=>Xt.depositCoin({position:r,rotation:o,impulse:a}),offsetX:-.4}),this.#y=new Zf({scene:e,canActivate:r=>this.#x(r),onInitializeCoin:({position:r,rotation:o,impulse:a})=>Xt.depositCoin({position:r,rotation:o,impulse:a}),offsetX:.4}),this.#f=new KA({scene:e,canActivate:r=>this.#x(r)}),this.#T=new dX({scene:e}),this.#S=new vX({scene:e,onRetrieveCard:({type:r,position:o,rotation:a})=>Zn.depositCard({type:r,position:o,rotation:a}),onRecycleCard:r=>{Zn.recycle(r)},onReadCard:r=>{this.#w.started&&(this.#t.state.score+=50,this.#t.state.points+=50)}}),this.#P=new PX({scene:e,onTokenInserted:r=>{}}),this.#w=new OX({state:this.#t.state,screen:this.#T}),this.#o.set(this.#v,new Set([this.#f])),this.#o.set(this.#y,new Set([this.#f])),this.#o.set(this.#h,new Set([this.#f,this.#l])),this.#o.set(this.#f,null),this.#o.set(this.#l,new Set([this.#f,this.#h])),this.#o.set(this.#b,new Set([this.#f])),this.#o.set(this.#g,new Set([this.#f])),await Promise.all([Zn.initialize({scene:e}),Xt.initialize({scene:e,onSpawnedCoin:r=>{Xt.enableCcd(r,!0)}}),Qn.initialize({scene:e}),Tn.initialize({scene:e}),rn.initialize({scene:e}),Wi.initialize({scene:e})]),await Promise.all([s.initialize(),this.#d.initialize(),this.#r.initialize(),this.#c.initialize(),this.#i.initialize(),this.#s.initialize(),this.#p.initialize(),this.#l.initialize(),this.#b.initialize(),this.#g.initialize(),this.#m.initialize(),this.#h.initialize(),this.#v.initialize(),this.#y.initialize(),this.#f.initialize(),this.#T.initialize(),this.#S.initialize(),this.#P.initialize(),this.#w.initialize()]),setTimeout(()=>{setTimeout(()=>{},105e3)},500)}update(e){Zn.update(),Xt.update(),Qn.update(),Tn.update(),rn.update(),Wi.update(),this.#c.update(),this.#d.update(),this.#i.update(),this.#r.update(),this.#s.update(),this.#p.update(),this.#f.update(),this.#l.update(),this.#b.update(),this.#g.update(),this.#m.update(),this.#h.update(),this.#v.update(),this.#y.update(),this.#T.update(),this.#S.update(),this.#P.update(),this.#w.update(e),this.dynamicBodies.forEach(({object:t,objects:n})=>{t.position.y<HX&&(console.warn("object recycled",t,structuredClone(t.position),structuredClone(t.rotation)),n.recycle(t))}),this.DEBUG_AUTOPLAY&&this.#N()}resize(e,t){this.#T.resize(e,t)}get interactiveObjects(){return this.#r.interactiveObjects}get joints(){return this.#l.joints}get coinsInPlay(){return Xt.usedCoins}get dynamicBodies(){return[...Xt.dynamicBodies,...Qn.dynamicBodies,...Zn.dynamicBodies]}async save(){const e={};this.#n.forEach((n,s)=>e[s]=n.handle);const t={};return t.cards=Zn.save(),t.coins=Xt.save(),t.tokens=Qn.save(),t.buttons=Tn.save(),t.ingots=Wi.save(),Object.assign(t,{state:this.#t.state,sensorCollidersHandles:e,pusher:this.#c.save(),sensorGate:this.#s.save(),reelsBox:this.#p.save(),excavator:this.#l.save(),leftTower:this.#b.save(),rightTower:this.#g.save(),coinRoller:this.#m.save(),stacker:this.#h.save(),leftStacker:this.#v.save(),rightStacker:this.#y.save(),sweepers:this.#f.save(),cardReader:this.#S.save(),tokenSlot:this.#P.save(),runs:this.#w.save(),scene:await this.#e.save()}),t}async load(e){await this.#e.load(e.scene),Zn.load(e.cards),Xt.load(e.coins),Qn.load(e.tokens),Tn.load(e.buttons),Wi.load(e.ingots),this.#n=new Map,this.#L.forEach(t=>{t.meshes.forEach(({data:n})=>{n.traverse(s=>{if(s.isMesh){const r=s.material.userData,o=s.material.name;if(r.sensor){const a=e.sensorCollidersHandles[o],l=this.#e.worldColliders.get(a);l.userData={objectType:o,onIntersect:this.#a[o]},this.#n.set(o,l)}}})})}),this.#t.state.score=e.state.score,this.#t.state.points=e.state.points,this.#t.state.coins=e.state.coins,this.#c.load(e.pusher),this.#s.load(e.sensorGate),this.#p.load(e.reelsBox),this.#l.load(e.excavator),this.#b.load(e.leftTower),this.#g.load(e.rightTower),this.#m.load(e.coinRoller),this.#h.load(e.stacker),this.#v.load(e.leftStacker),this.#y.load(e.rightStacker),this.#f.load(e.sweepers),this.#S.load(e.cardReader),this.#P.load(e.tokenSlot),this.#w.load(e.runs)}#R(e){if(e.objectType===Xt.TYPE)return Xt.getCoin(e);if(e.objectType===Qn.TYPE)return Qn.getToken(e);if(e.objectType===Zn.TYPE)return Zn.getCard(e);if(e.objectType===Wi.TYPE)return Wi.getIngot(e)}#x(e){const t=this.#o.get(e);return t?!Array.from(t).filter(s=>s!==e).find(s=>s.active):!Array.from(this.#o.keys()).filter(s=>s!==e).find(s=>s.active)}#N(){this.#c.phase>2&&this.#c.phase<2.05&&this.#c.phase>this.lastPhase&&Xt.dropCoins({count:30}),this.lastPhase=this.#c.phase}}function Ha(i){i.objectType===Xt.TYPE&&Xt.recycle(i),i.objectType===Qn.TYPE&&Qn.recycle(i),i.objectType===Zn.TYPE&&Zn.recycle(i),i.objectType===Wi.TYPE&&Wi.recycle(i)}async function DX({scene:i,DEBUG_HIDE_CABINET:e}){const n=(await i.loadModel(EX)).scene,s=new Map;return n.traverse(r=>{if(r.isMesh){const{material:o,geometry:a}=r,l=o.userData,d=l.name;if(l.collider||l.sensor){const c=a.index,u=a.attributes.position,p=[],h=[];for(let x=0;x<u.count;x++)p.push(u.getX(x),u.getY(x),u.getZ(x));for(let x=0;x<c.count;x++)h.push(c.getX(x));const v=h2(s,d);v.sensor=l.sensor,v.friction=l.friction,v.restitution=l.restitution,v.meshes.push({data:r,vertices:p,indices:h})}else{const c=r.userData.name;h2(s,c).meshes.push({data:r})}}}),e||i.addObject(n),{parts:s}}function WX({scene:i,parts:e,sensorListeners:t}){const n=new Map;return e.forEach((s,r)=>{const{meshes:o,sensor:a,friction:l,restitution:d}=s,c=i.createFixedBody(),u=[],p=[];let h=0;o.forEach(v=>{if(a){const x=i.createCuboidColliderFromBoundingBox({mesh:v.data,height:AX,userData:{objectType:r,onIntersect:t[r]},sensor:a},c);n.set(r,x)}else v.vertices&&(u.push(...v.vertices),p.push(...v.indices.map(x=>x+h)),h+=Math.max(...v.indices)+1)}),u.length>0&&i.createTrimeshCollider({vertices:u,indices:p,friction:l,restitution:d},c).setCollisionGroups(XX)}),{sensorColliders:n}}function h2(i,e){let t;return i.has(e)?t=i.get(e):(t={meshes:[]},i.set(e,t)),t}class jX{constructor({scene:e,camera:t,interactiveObjects:n}){this.#e=e,this.#t=t,this.#n=n}#e;#t;#n;#a;#o;#r=new et;#c=new S9;initialize(e,t){this.#a=e,this.#o=t,addEventListener("mousemove",n=>{this.#r.x=n.clientX/this.#a*2-1,this.#r.y=-(n.clientY/this.#o)*2+1,this.#c.setFromCamera(this.#r,this.#t);const s=this.#c.intersectObjects(this.#e.children);s.length&&this.#n.includes(s[0].object)?document.body.style.cursor="pointer":document.body.style.cursor="default"}),addEventListener("click",n=>{this.#c.setFromCamera(this.#r,this.#t);const s=this.#c.intersectObjects(this.#e.children);s.length&&this.#n.includes(s[0].object)&&(n.defaultPrevented||(s[0].object.userData.onClick(s[0].instanceId),n.preventDefault()))})}update(){}resize(e,t){this.#a=e,this.#o=t,this.#t.aspect=this.#a/this.#o,this.#t.updateProjectionMatrix(),this.#c.setFromCamera(this.#r,this.#t)}}const VX=[0,2,4.95],CX=20,FX=.01,qX=100,YX=[0,.5,0];class GX{constructor(e){const t=new Xn(CX,e,FX,qX);return t.position.set(...VX),t.lookAt(...YX),t}}const UX=301083.33333331766,ZX=JSON.parse('{"cards":[[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.37e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.373e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.38e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.383e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.39e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.393e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.4e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.403e-321}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.41e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.413e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.42e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.423e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.43e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.433e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.44e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.443e-321}],[{"position":[-0.03457546979188919,0.1837483048439026,0.3364780843257904],"rotation":[0.02840525284409523,0.014914726838469505,0.01480294018983841,0.999375581741333],"used":true,"bodyHandle":6.45e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.452e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.457e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.46e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.467e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.47e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.477e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.48e-321}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.487e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.49e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.497e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.5e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.507e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.51e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.517e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.52e-321}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.527e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.53e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.536e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.54e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.546e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.55e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.556e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.56e-321}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.566e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.57e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.576e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.58e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.586e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.59e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.596e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.6e-321}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.606e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.61e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.616e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.62e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.625e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.63e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.635e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.64e-321}]],"coins":[{"position":[-0.22134657204151154,0.18069493770599365,0.3429982364177704],"rotation":[0.00775387417525053,-0.6284064054489136,-0.005567912012338638,0.7778266668319702],"used":true,"bodyHandle":4.4e-323,"linearSpeed":1.5861358490266805e-7,"pendingImpulse":null},{"position":[0.10927265137434006,0.2528650760650635,-0.15367871522903442],"rotation":[0.5985854268074036,-0.005224298685789108,0.801037073135376,-0.0027779536321759224],"used":true,"bodyHandle":5e-323,"linearSpeed":0.08020006797223968,"pendingImpulse":null},{"position":[0.2953202426433563,0.17444151639938354,0.47625717520713806],"rotation":[0.0031566321849823,-0.5567322969436646,-0.00009779707761481404,0.8306859135627747],"used":true,"bodyHandle":5.4e-323,"linearSpeed":1.1432698112460849e-11,"pendingImpulse":null},{"position":[0.268401563167572,0.2531137466430664,-0.15368564426898956],"rotation":[0.0022875885479152203,-0.830135703086853,0.002407951047644019,-0.5575515031814575],"used":true,"bodyHandle":6e-323,"linearSpeed":0.08006707278054108,"pendingImpulse":null},{"position":[0.19244708120822906,0.1851658821105957,0.48885875940322876],"rotation":[0.0028721338603645563,-0.9754832983016968,0.00660661980509758,-0.21995538473129272],"used":true,"bodyHandle":6.4e-323,"linearSpeed":1.9870062830840777e-7,"pendingImpulse":null},{"position":[0.10936842858791351,0.24741406738758087,-0.1536577194929123],"rotation":[-0.002613779390230775,0.8970325589179993,0.0021253228187561035,-0.44195154309272766],"used":true,"bodyHandle":7e-323,"linearSpeed":0.07908482062513622,"pendingImpulse":null},{"position":[0.06727634370326996,0.17383946478366852,0.5084084272384644],"rotation":[0.002949298359453678,-0.6642224788665771,-0.002916316967457533,-0.7475234866142273],"used":true,"bodyHandle":7.4e-323,"linearSpeed":5.0116325559464426e-9,"pendingImpulse":null},{"position":[-0.2092105597257614,0.18549679219722748,0.43485984206199646],"rotation":[-0.5633864402770996,-0.0019292833749204874,0.8261786103248596,0.004569501616060734],"used":true,"bodyHandle":8e-323,"linearSpeed":0.0000015534790625674783,"pendingImpulse":null},{"position":[-0.19922763109207153,0.18471136689186096,0.6356219053268433],"rotation":[0.6190025210380554,-0.02156004123389721,0.784970223903656,0.013882538303732872],"used":true,"bodyHandle":8.4e-323,"linearSpeed":2.560490506119176e-7,"pendingImpulse":null},{"position":[-0.2755049169063568,0.17950692772865295,0.4742633104324341],"rotation":[-0.5993509888648987,0.0010545409750193357,-0.8004854917526245,-0.0004124150436837226],"used":true,"bodyHandle":9e-323,"linearSpeed":6.736625958661812e-8,"pendingImpulse":null},{"position":[-0.22373391687870026,0.17416852712631226,0.5174105763435364],"rotation":[-0.0022854150738567114,0.9959836602210999,0.000038822327041998506,-0.08950573205947876],"used":true,"bodyHandle":9.4e-323,"linearSpeed":6.23339687595512e-9,"pendingImpulse":null},{"position":[0.2174203246831894,0.18304739892482758,0.2812706530094147],"rotation":[0.7994296550750732,-0.012350394390523434,-0.6006131172180176,0.004852259065955877],"used":true,"bodyHandle":1e-322,"linearSpeed":2.0211350265466786e-10,"pendingImpulse":null},{"position":[0.32513779401779175,0.18823179602622986,0.29545140266418457],"rotation":[-0.0017721026670187712,-0.6082843542098999,0.0032064393162727356,-0.7937106490135193],"used":true,"bodyHandle":1.04e-322,"linearSpeed":8.571642186006494e-9,"pendingImpulse":null},{"position":[0.24757207930088043,0.17439962923526764,0.5778154134750366],"rotation":[0.005802092608064413,0.8481436371803284,-0.00140572024974972,0.5297325253486633],"used":true,"bodyHandle":1.1e-322,"linearSpeed":8.278244007990733e-12,"pendingImpulse":null},{"position":[0.09150710701942444,0.18490980565547943,0.5117158889770508],"rotation":[0.011726425029337406,-0.9905227422714233,0.009161620400846004,0.13654008507728577],"used":true,"bodyHandle":1.14e-322,"linearSpeed":0.0000010706202320333376,"pendingImpulse":null},{"position":[0.3681447207927704,0.18550118803977966,0.5484142303466797],"rotation":[0.0009314660564996302,0.4293741285800934,-0.0008678522426635027,-0.9031257629394531],"used":true,"bodyHandle":1.2e-322,"linearSpeed":1.8306888231276755e-8,"pendingImpulse":null},{"position":[-0.27645331621170044,0.17414969205856323,0.7781453132629395],"rotation":[-0.0010970403673127294,0.9693955183029175,0.003846141742542386,-0.24547165632247925],"used":true,"bodyHandle":1.24e-322,"linearSpeed":2.982076651631022e-10,"pendingImpulse":null},{"position":[0.06029585003852844,0.17899391055107117,0.4476785659790039],"rotation":[0.9085060954093933,0.06727612018585205,0.4112861156463623,-0.030567137524485588],"used":true,"bodyHandle":1.3e-322,"linearSpeed":0.000006166266042722108,"pendingImpulse":null},{"position":[0.19996127486228943,0.18722327053546906,0.5763477683067322],"rotation":[-0.0439101867377758,-0.8165906071662903,-0.01145142037421465,-0.5754306316375732],"used":true,"bodyHandle":1.33e-322,"linearSpeed":1.4396563333261626e-7,"pendingImpulse":null},{"position":[0.5340511202812195,0.18024344742298126,0.4628647565841675],"rotation":[0.0019035019213333726,-0.8063066601753235,-0.003972985316067934,-0.5914813280105591],"used":true,"bodyHandle":1.4e-322,"linearSpeed":8.962440561485878e-9,"pendingImpulse":null},{"position":[-0.0794924795627594,0.18695133924484253,0.210882306098938],"rotation":[0.5430353879928589,0.0013101020595058799,0.8396222591400146,0.012051365338265896],"used":true,"bodyHandle":1.43e-322,"linearSpeed":4.308479617187176e-7,"pendingImpulse":null},{"position":[0.1262020468711853,0.17408081889152527,0.5020303726196289],"rotation":[0.034757472574710846,0.002830849727615714,-0.9993909001350403,0.0012856748653575778],"used":true,"bodyHandle":1.5e-322,"linearSpeed":3.0038683051659656e-9,"pendingImpulse":null},{"position":[-0.0005681946640834212,0.17045113444328308,0.5985581278800964],"rotation":[-0.004459931515157223,0.43984994292259216,0.00020949238387402147,0.8980602025985718],"used":true,"bodyHandle":1.53e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.14415210485458374,0.1789703220129013,0.43195125460624695],"rotation":[-0.14036935567855835,0.000610878923907876,-0.9900147318840027,-0.012919516302645206],"used":true,"bodyHandle":1.6e-322,"linearSpeed":6.590395861251451e-7,"pendingImpulse":null},{"position":[-0.25162577629089355,0.17667271196842194,0.20976297557353973],"rotation":[-0.0036908930633217096,-0.06157716363668442,0.005666443612426519,-0.9980794191360474],"used":true,"bodyHandle":1.63e-322,"linearSpeed":1.774500854361599e-8,"pendingImpulse":null},{"position":[0.0607396736741066,0.17041504383087158,0.6340970993041992],"rotation":[-0.005197474732995033,-0.4620281755924225,-0.0017395003233104944,0.8868482708930969],"used":true,"bodyHandle":1.7e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.2807093858718872,0.17961683869361877,0.35418039560317993],"rotation":[0.00041819995385594666,0.9057120084762573,-0.005627587903290987,0.4238559305667877],"used":true,"bodyHandle":1.73e-322,"linearSpeed":1.0612712724496878e-8,"pendingImpulse":null},{"position":[0.08328711986541748,0.17671272158622742,0.4494420289993286],"rotation":[0.003097090171650052,-0.1082136258482933,-0.057998184114694595,-0.9924295544624329],"used":true,"bodyHandle":1.8e-322,"linearSpeed":9.844294794943947e-7,"pendingImpulse":null},{"position":[-0.33769628405570984,0.18480397760868073,0.5001156330108643],"rotation":[-0.0032051890157163143,-0.2484985888004303,0.006142882164567709,-0.9686074256896973],"used":true,"bodyHandle":1.83e-322,"linearSpeed":5.85783892549216e-9,"pendingImpulse":null},{"position":[-0.05679812654852867,0.1763276308774948,0.26116690039634705],"rotation":[-0.7478867769241333,-0.0031737755052745342,-0.6637952327728271,0.005586870014667511],"used":true,"bodyHandle":1.9e-322,"linearSpeed":1.3688894329111316e-9,"pendingImpulse":null},{"position":[0.3241848945617676,0.1800297349691391,0.5940506458282471],"rotation":[0.00030254924786277115,-0.9873323440551758,0.005924655590206385,0.15855459868907928],"used":true,"bodyHandle":1.93e-322,"linearSpeed":5.045954368084771e-10,"pendingImpulse":null},{"position":[-0.3073745369911194,0.17925496399402618,0.3895486891269684],"rotation":[-0.007361200638115406,0.2983332872390747,0.007882189936935902,0.9544007778167725],"used":true,"bodyHandle":2e-322,"linearSpeed":1.4818203886464901e-8,"pendingImpulse":null},{"position":[0.05153261497616768,0.18898245692253113,0.4463265836238861],"rotation":[0.9324980974197388,0.07356871664524078,0.35226720571517944,-0.030704928562045097],"used":true,"bodyHandle":2.03e-322,"linearSpeed":0.00018307101109211327,"pendingImpulse":null},{"position":[0.061326637864112854,0.17013494670391083,0.7044287919998169],"rotation":[-0.000913270516321063,-0.3891124725341797,-0.001610409701243043,0.9211883544921875],"used":true,"bodyHandle":2.08e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.17183084785938263,0.17413802444934845,0.5491091012954712],"rotation":[-0.9690175652503967,-0.0041955579072237015,-0.24656033515930176,0.013976778835058212],"used":true,"bodyHandle":2.1e-322,"linearSpeed":4.347899650079309e-9,"pendingImpulse":null},{"position":[-0.0005203417968004942,0.1702413111925125,0.7405399084091187],"rotation":[0.00125441187992692,-0.899711549282074,-0.002406687242910266,-0.4364764988422394],"used":true,"bodyHandle":2.17e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.21327176690101624,0.24741549789905548,0.05815755948424339],"rotation":[-0.001785194268450141,-0.987958550453186,0.0026327921077609062,0.15468597412109375],"used":true,"bodyHandle":2.2e-322,"linearSpeed":0.0792187584317757,"pendingImpulse":null},{"position":[-0.06068858876824379,0.17031633853912354,0.7060900926589966],"rotation":[-0.0041990880854427814,-0.9974028468132019,0.009019576944410801,-0.07133351266384125],"used":true,"bodyHandle":2.27e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.16796237230300903,0.17908209562301636,0.5499757528305054],"rotation":[0.027995703741908073,0.45200398564338684,-0.0006937721045687795,0.8915761709213257],"used":true,"bodyHandle":2.3e-322,"linearSpeed":9.319655362533595e-9,"pendingImpulse":null},{"position":[-0.060606177896261215,0.17060568928718567,0.6343513131141663],"rotation":[0.005893716588616371,0.4668070673942566,0.0044011445716023445,-0.8843286037445068],"used":true,"bodyHandle":2.37e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.2896285951137543,0.17971479892730713,0.5355000495910645],"rotation":[-0.00031448795925825834,0.7283807396888733,-0.0029837237671017647,0.6851660013198853],"used":true,"bodyHandle":2.4e-322,"linearSpeed":0.000003393941205695113,"pendingImpulse":null},{"position":[-0.28210631012916565,0.17417660355567932,0.526034414768219],"rotation":[0.0009618591866455972,0.4153613746166229,-0.0003407076874282211,-0.9096559286117554],"used":true,"bodyHandle":2.47e-322,"linearSpeed":2.326166120425906e-9,"pendingImpulse":null},{"position":[0.20585517585277557,0.1801336407661438,0.6749845147132874],"rotation":[0.46775713562965393,0.0018496847478672862,0.8838484883308411,0.003428084310144186],"used":true,"bodyHandle":2.5e-322,"linearSpeed":1.7166001767432007e-8,"pendingImpulse":null},{"position":[-0.20433904230594635,0.17972369492053986,0.43377310037612915],"rotation":[0.0023028883151710033,0.9932273030281067,0.0018036066321656108,-0.11615072935819626],"used":true,"bodyHandle":2.57e-322,"linearSpeed":0.0000015511000011740244,"pendingImpulse":null},{"position":[0.20058685541152954,0.18434639275074005,0.21824005246162415],"rotation":[-0.02285468764603138,0.15192076563835144,-0.1211034506559372,0.9806791543960571],"used":true,"bodyHandle":2.6e-322,"linearSpeed":7.808017846754268e-9,"pendingImpulse":null},{"position":[-0.33841806650161743,0.17943385243415833,0.4397018849849701],"rotation":[0.011815380305051804,-0.5686985850334167,-0.0040357052348554134,-0.8224511742591858],"used":true,"bodyHandle":2.67e-322,"linearSpeed":4.964769284077731e-8,"pendingImpulse":null},{"position":[-0.16966186463832855,0.18263757228851318,0.3117194175720215],"rotation":[0.004029346164315939,-0.9474702477455139,-0.0016652552876621485,-0.31981417536735535],"used":true,"bodyHandle":2.7e-322,"linearSpeed":0.0000012393776635498272,"pendingImpulse":null},{"position":[0.05390559509396553,0.18105992674827576,0.21001945436000824],"rotation":[0.8651941418647766,0.008917811326682568,-0.5012417435646057,-0.01078371237963438],"used":true,"bodyHandle":2.77e-322,"linearSpeed":3.203275681916368e-7,"pendingImpulse":null},{"position":[0.0005265502259135246,0.16930660605430603,0.6730520129203796],"rotation":[0.0005541174323298037,-0.09644215553998947,0.004453107714653015,-0.9953284859657288],"used":true,"bodyHandle":2.8e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0007500292267650366,0.17142991721630096,0.599775493144989],"rotation":[-0.005491502117365599,-0.40682244300842285,-0.0004533783649094403,-0.9134906530380249],"used":true,"bodyHandle":2.87e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.14300505816936493,0.17426443099975586,0.37046629190444946],"rotation":[0.004958172794431448,-0.6543791890144348,-0.0016809572698548436,-0.7561483383178711],"used":true,"bodyHandle":2.9e-322,"linearSpeed":9.469454544078236e-11,"pendingImpulse":null},{"position":[0.3061034083366394,0.17433634400367737,0.5360596179962158],"rotation":[0.0011867671273648739,-0.7249943017959595,0.002776901703327894,0.6887481808662415],"used":true,"bodyHandle":2.96e-322,"linearSpeed":9.973696681215139e-12,"pendingImpulse":null},{"position":[-0.155770942568779,0.17860521376132965,0.3964728116989136],"rotation":[-0.9783334732055664,-0.01173044927418232,0.20667871832847595,-0.0031539045739918947],"used":true,"bodyHandle":3e-322,"linearSpeed":5.762739802401249e-8,"pendingImpulse":null},{"position":[-0.06193675473332405,0.1718289703130722,0.6349528431892395],"rotation":[0.001495947944931686,0.31731656193733215,-0.0036041915882378817,-0.9483116269111633],"used":true,"bodyHandle":3.06e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.12612278759479523,0.17935216426849365,0.44859468936920166],"rotation":[0.022801639512181282,-0.004957564640790224,-0.999708890914917,-0.006135098170489073],"used":true,"bodyHandle":3.1e-322,"linearSpeed":6.658309353295196e-7,"pendingImpulse":null},{"position":[-0.243681401014328,0.18351341784000397,0.580740749835968],"rotation":[0.16178393363952637,0.03022572211921215,0.9856369495391846,0.03784237056970596],"used":true,"bodyHandle":3.16e-322,"linearSpeed":1.3407472460282013e-7,"pendingImpulse":null},{"position":[0.004375825636088848,0.24743810296058655,0.028331872075796127],"rotation":[0.35376355051994324,0.0010413636919111013,-0.9353318214416504,0.002159528434276581],"used":true,"bodyHandle":3.2e-322,"linearSpeed":0.0790814516445552,"pendingImpulse":null},{"position":[0.00127350352704525,0.17649297416210175,0.24260228872299194],"rotation":[-0.013734950684010983,0.8568989634513855,-0.008081565611064434,0.5152380466461182],"used":true,"bodyHandle":3.26e-322,"linearSpeed":2.7895513595198725e-9,"pendingImpulse":null},{"position":[0.083542600274086,0.1784449815750122,0.38697952032089233],"rotation":[-0.00018247697153128684,-0.7781445384025574,-0.007339671719819307,0.6280422210693359],"used":true,"bodyHandle":3.3e-322,"linearSpeed":1.7275626063790774e-8,"pendingImpulse":null},{"position":[-0.27590855956077576,0.18752939999103546,0.2850847542285919],"rotation":[0.0021861440036445856,-0.19267365336418152,-0.054920218884944916,0.9797223210334778],"used":true,"bodyHandle":3.36e-322,"linearSpeed":3.1891312922489197e-7,"pendingImpulse":null},{"position":[-0.001293156761676073,0.25300922989845276,0.035301320254802704],"rotation":[0.0012560785980895162,0.9137337803840637,0.00031763906008563936,0.4063113033771515],"used":true,"bodyHandle":3.4e-322,"linearSpeed":0.08022768169611671,"pendingImpulse":null},{"position":[-0.01728150248527527,0.18896283209323883,0.20880365371704102],"rotation":[-0.45773836970329285,0.048659197986125946,0.8851680755615234,-0.0677143782377243],"used":true,"bodyHandle":3.46e-322,"linearSpeed":0.000012851560419052788,"pendingImpulse":null},{"position":[-0.06559716910123825,0.179519385099411,0.42221489548683167],"rotation":[0.0009496387792751193,-0.5775752663612366,0.0035251465160399675,0.8163292407989502],"used":true,"bodyHandle":3.5e-322,"linearSpeed":0.000004888687718429152,"pendingImpulse":null},{"position":[-0.06089361757040024,0.17203906178474426,0.7051014304161072],"rotation":[-0.0034064073115587234,-0.941396176815033,0.006982902996242046,-0.3372134268283844],"used":true,"bodyHandle":3.56e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.17126832902431488,0.18827322125434875,0.2089083343744278],"rotation":[0.11142007261514664,0.02248617820441723,0.9891437888145447,0.09313657134771347],"used":true,"bodyHandle":3.6e-322,"linearSpeed":0.00001525465042088554,"pendingImpulse":null},{"position":[-0.2512281835079193,0.19253893196582794,0.2976098656654358],"rotation":[-0.37219852209091187,-0.0004524397081695497,-0.927859902381897,-0.023325864225625992],"used":true,"bodyHandle":3.66e-322,"linearSpeed":0.0000017695404036083804,"pendingImpulse":null},{"position":[-0.06620260328054428,0.17951683700084686,0.5412914752960205],"rotation":[0.9631369709968567,0.004013298079371452,-0.2689751386642456,0.00182158756069839],"used":true,"bodyHandle":3.7e-322,"linearSpeed":0.00004694412755162342,"pendingImpulse":null},{"position":[0.0008825774420984089,0.1716555655002594,0.7401056289672852],"rotation":[0.000035941728128818795,-0.6580317616462708,0.00005470879114000127,-0.752990186214447],"used":true,"bodyHandle":3.75e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.2807615101337433,0.1863817572593689,0.20792677998542786],"rotation":[-0.4583120048046112,-0.15278290212154388,-0.8754824995994568,0.011740279383957386],"used":true,"bodyHandle":3.8e-322,"linearSpeed":0.000003296641085164562,"pendingImpulse":null},{"position":[0.19616220891475677,0.17428407073020935,0.342657208442688],"rotation":[-0.5956609845161438,0.007811260409653187,0.8031976819038391,0.0006362854037433863],"used":true,"bodyHandle":3.85e-322,"linearSpeed":1.8252860556268175e-11,"pendingImpulse":null},{"position":[0.06081254780292511,0.17160841822624207,0.7049129009246826],"rotation":[0.006086565088480711,-0.5072342753410339,-0.0005465027643367648,0.8617865443229675],"used":true,"bodyHandle":3.9e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.45237380266189575,0.17403842508792877,0.45879483222961426],"rotation":[0.18073301017284393,-0.0019137157360091805,-0.9835216999053955,-0.004113262984901667],"used":true,"bodyHandle":3.95e-322,"linearSpeed":1.2300358052311945e-10,"pendingImpulse":null},{"position":[0.06096426770091057,0.1717330664396286,0.635136604309082],"rotation":[0.002147708786651492,-0.09847179055213928,-0.003831199835985899,0.995130181312561],"used":true,"bodyHandle":4e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.15976083278656006,0.18273532390594482,0.30710819363594055],"rotation":[0.8727860450744629,0.0032725969795137644,-0.488052099943161,-0.006244444288313389],"used":true,"bodyHandle":4.05e-322,"linearSpeed":2.9906277633396106e-9,"pendingImpulse":null},{"position":[0.05180273950099945,0.2531839609146118,0.0032110263127833605],"rotation":[-0.0021249763667583466,-0.1447705775499344,0.0031463210470974445,-0.9894579648971558],"used":true,"bodyHandle":4.1e-322,"linearSpeed":0.0802590553752373,"pendingImpulse":null},{"position":[0.15114738047122955,0.1908227503299713,0.733462393283844],"rotation":[0.0017166316974908113,0.37977877259254456,0.0017455470515415072,-0.9250741004943848],"used":true,"bodyHandle":4.15e-322,"linearSpeed":6.241236592039919e-9,"pendingImpulse":null},{"position":[0.4733288884162903,0.1853228509426117,0.45848366618156433],"rotation":[-0.6629001498222351,0.0096902409568429,-0.7486300468444824,0.004749620333313942],"used":true,"bodyHandle":4.2e-322,"linearSpeed":1.2597722021576756e-7,"pendingImpulse":null},{"position":[-0.0001477231562603265,0.17192895710468292,0.6669524908065796],"rotation":[-0.0028266364242881536,-0.16124342381954193,0.0035428619012236595,0.9869042634963989],"used":true,"bodyHandle":4.25e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.1778256744146347,0.17987309396266937,0.8404508233070374],"rotation":[0.012125332839787006,0.23635464906692505,0.0025354656390845776,-0.9715878963470459],"used":true,"bodyHandle":4.3e-322,"linearSpeed":3.5959448098839557e-9,"pendingImpulse":null},{"position":[-0.0005021043471060693,0.17388133704662323,0.6025510430335999],"rotation":[-0.0032520017120987177,0.746712863445282,0.0032568140886723995,0.6651305556297302],"used":true,"bodyHandle":4.35e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.20525550842285156,0.2519972324371338,-0.15277232229709625],"rotation":[0.0653834342956543,-0.9463199973106384,0.03186491131782532,-0.3149413466453552],"used":true,"bodyHandle":4.4e-322,"linearSpeed":0.08038884414115155,"pendingImpulse":null},{"position":[-0.16634869575500488,0.17436355352401733,0.8425801396369934],"rotation":[-0.004941896535456181,-0.18320530652999878,0.001021281466819346,0.983061671257019],"used":true,"bodyHandle":4.45e-322,"linearSpeed":6.671815765566712e-10,"pendingImpulse":null},{"position":[-0.38898053765296936,0.17399834096431732,0.4701867699623108],"rotation":[0.9989185929298401,-0.0002884042332880199,0.04626062884926796,-0.00463030906394124],"used":true,"bodyHandle":4.5e-322,"linearSpeed":4.212804657193878e-9,"pendingImpulse":null},{"position":[-0.2704501450061798,0.17413748800754547,0.6119935512542725],"rotation":[-0.73296058177948,0.000139059207867831,-0.6802416443824768,-0.0063280025497078896],"used":true,"bodyHandle":4.55e-322,"linearSpeed":4.1389861964059834e-10,"pendingImpulse":null},{"position":[-0.45828789472579956,0.17354965209960938,0.5190484523773193],"rotation":[0.23725095391273499,0.012333251535892487,-0.9713683724403381,-0.001839754986576736],"used":true,"bodyHandle":4.6e-322,"linearSpeed":3.7599237381428844e-10,"pendingImpulse":null},{"position":[-0.3464142382144928,0.17974866926670074,0.5690767765045166],"rotation":[0.008371634408831596,-0.1736297458410263,0.0015310036251321435,-0.9847742915153503],"used":true,"bodyHandle":4.64e-322,"linearSpeed":6.98083902623828e-8,"pendingImpulse":null},{"position":[-0.43098872900009155,0.19019880890846252,0.5291649699211121],"rotation":[-0.014810065738856792,-0.9341034889221191,0.06026393175125122,-0.3515673279762268],"used":true,"bodyHandle":4.7e-322,"linearSpeed":1.5031077915103333e-7,"pendingImpulse":null},{"position":[0.24940626323223114,0.17679378390312195,0.2637798488140106],"rotation":[0.9656814336776733,0.0013838340528309345,-0.25972405076026917,0.0008671392570249736],"used":true,"bodyHandle":4.74e-322,"linearSpeed":5.931870952936941e-13,"pendingImpulse":null},{"position":[-0.11888140439987183,0.17429515719413757,0.5788881182670593],"rotation":[0.0005525739397853613,-0.9293364882469177,-0.0015461163129657507,0.3692302405834198],"used":true,"bodyHandle":4.8e-322,"linearSpeed":2.1268977559502829e-10,"pendingImpulse":null},{"position":[0.07292915135622025,0.19289377331733704,0.36782413721084595],"rotation":[-0.7807145118713379,-0.03884197026491165,0.6227120757102966,-0.03472355753183365],"used":true,"bodyHandle":4.84e-322,"linearSpeed":1.5436828181663e-7,"pendingImpulse":null},{"position":[-0.34157294034957886,0.1850881427526474,0.4381324350833893],"rotation":[-0.012689245864748955,0.8237006664276123,-0.0011234816629439592,0.5668816566467285],"used":true,"bodyHandle":4.9e-322,"linearSpeed":7.075758935130334e-8,"pendingImpulse":null},{"position":[0.1394871473312378,0.17985710501670837,0.36961326003074646],"rotation":[-0.9321066737174988,-0.010546724312007427,-0.3619992434978485,0.004726584535092115],"used":true,"bodyHandle":4.94e-322,"linearSpeed":9.944855800080079e-9,"pendingImpulse":null},{"position":[0.05921686440706253,0.17305482923984528,0.635871171951294],"rotation":[-0.0004447645624168217,-0.08087406307458878,-0.004756649024784565,0.996712863445282],"used":true,"bodyHandle":5e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05808614194393158,0.17347994446754456,0.7038549780845642],"rotation":[0.002646572422236204,-0.22785107791423798,-0.0033816948998719454,0.9736865162849426],"used":true,"bodyHandle":5.04e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.10040043294429779,0.25409141182899475,0.1112702265381813],"rotation":[0.0035901216324418783,-0.6340537667274475,0.008090530522167683,-0.7732382416725159],"used":true,"bodyHandle":5.1e-322,"linearSpeed":0.0793106136586596,"pendingImpulse":null},{"position":[0.001957692438736558,0.24819567799568176,0.10813732445240021],"rotation":[-0.0016760212602093816,-0.991754949092865,0.012036613188683987,-0.12757115066051483],"used":true,"bodyHandle":5.14e-322,"linearSpeed":0.07909153905707537,"pendingImpulse":null},{"position":[0.14499595761299133,0.24727536737918854,-0.1040993481874466],"rotation":[0.0009774051140993834,-0.9981904029846191,0.00010559174552327022,0.060124654322862625],"used":true,"bodyHandle":5.2e-322,"linearSpeed":0.07915592210960035,"pendingImpulse":null},{"position":[0.30779334902763367,0.1740821897983551,0.367102712392807],"rotation":[0.0006219206261448562,-0.8670890927314758,0.0031580685172230005,-0.4981426000595093],"used":true,"bodyHandle":5.24e-322,"linearSpeed":9.771023947946548e-11,"pendingImpulse":null},{"position":[-0.19198720157146454,0.1871749460697174,0.22872796654701233],"rotation":[0.08418653905391693,0.9957744479179382,-0.025215905159711838,0.026645207777619362],"used":true,"bodyHandle":5.3e-322,"linearSpeed":0.000007447236587279822,"pendingImpulse":null},{"position":[0.1648501753807068,0.18249236047267914,0.24455183744430542],"rotation":[-0.001438674284145236,-0.8823191523551941,0.0025241163093596697,-0.470642626285553],"used":true,"bodyHandle":5.34e-322,"linearSpeed":1.235911773153401e-9,"pendingImpulse":null},{"position":[-0.2835235595703125,0.18548431992530823,0.4069114625453949],"rotation":[0.005710338708013296,-0.9519803524017334,-0.002408370841294527,-0.30609631538391113],"used":true,"bodyHandle":5.4e-322,"linearSpeed":8.193380861283987e-8,"pendingImpulse":null},{"position":[-0.05942497029900551,0.18200701475143433,0.24641357362270355],"rotation":[0.15420740842819214,0.015186766162514687,0.9879217743873596,-0.00005476867954712361],"used":true,"bodyHandle":5.43e-322,"linearSpeed":1.2978577356149514e-7,"pendingImpulse":null},{"position":[0.28093066811561584,0.1880849003791809,0.2571156620979309],"rotation":[-0.9154791831970215,0.003953487612307072,0.40233686566352844,0.002678582677617669],"used":true,"bodyHandle":5.5e-322,"linearSpeed":5.157299268247748e-9,"pendingImpulse":null},{"position":[-0.2819545269012451,0.18288876116275787,0.2771914303302765],"rotation":[0.07251163572072983,0.01207195594906807,-0.9956469535827637,-0.057301152497529984],"used":true,"bodyHandle":5.53e-322,"linearSpeed":2.4051642222998107e-7,"pendingImpulse":null},{"position":[0.5504358410835266,0.17473489046096802,0.3422807455062866],"rotation":[0.6605808138847351,0.0009363076533190906,0.7507526874542236,0.001556989154778421],"used":true,"bodyHandle":5.6e-322,"linearSpeed":7.009824380246104e-17,"pendingImpulse":null},{"position":[0.04919932037591934,0.25311484932899475,0.07167673856019974],"rotation":[0.005348255857825279,0.3751105070114136,-0.0004089653375558555,0.9269645810127258],"used":true,"bodyHandle":5.63e-322,"linearSpeed":0.07989353782347244,"pendingImpulse":null},{"position":[-0.15908533334732056,0.18845006823539734,0.2939862608909607],"rotation":[-0.004223793279379606,0.581596314907074,0.002255914732813835,0.8134633898735046],"used":true,"bodyHandle":5.7e-322,"linearSpeed":5.578040825986229e-7,"pendingImpulse":null},{"position":[-0.000373712187865749,0.17378836870193481,0.7374017834663391],"rotation":[0.004345222841948271,-0.5702281594276428,-0.013354657217860222,-0.8213663101196289],"used":true,"bodyHandle":5.73e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.231855571269989,0.17964692413806915,0.5178967714309692],"rotation":[0.9710052013397217,0.0009440560825169086,0.2390490472316742,-0.0018657057080417871],"used":true,"bodyHandle":5.8e-322,"linearSpeed":0.000001939693160272194,"pendingImpulse":null},{"position":[-0.05795532837510109,0.17335927486419678,0.7032278776168823],"rotation":[0.0031229332089424133,-0.7501938343048096,0.000683906371705234,-0.6612101793289185],"used":true,"bodyHandle":5.83e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5688236355781555,0.17419324815273285,0.7878693342208862],"rotation":[0.961384654045105,-0.0002499697438906878,-0.27520695328712463,-0.0008006221032701433],"used":true,"bodyHandle":5.9e-322,"linearSpeed":3.8473470871501755e-17,"pendingImpulse":null},{"position":[0.21848323941230774,0.25318750739097595,0.06085095554590225],"rotation":[-0.0032804941292852163,-0.16562870144844055,-0.0014703688211739063,0.9861816167831421],"used":true,"bodyHandle":5.93e-322,"linearSpeed":0.08032412053264676,"pendingImpulse":null},{"position":[-0.08641239255666733,0.192817822098732,0.20905180275440216],"rotation":[-0.19918619096279144,0.009907810017466545,0.9798876643180847,0.006842030677944422],"used":true,"bodyHandle":6e-322,"linearSpeed":3.0290725230423024e-7,"pendingImpulse":null},{"position":[-0.058319251984357834,0.17374132573604584,0.6359731554985046],"rotation":[-0.010691686533391476,0.6654293537139893,-0.00021232842118479311,-0.7463842630386353],"used":true,"bodyHandle":6.03e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0025936386082321405,0.17345155775547028,0.671766996383667],"rotation":[0.0057619656436145306,-0.2117696851491928,0.0046001276932656765,-0.9772917628288269],"used":true,"bodyHandle":6.1e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.000029867427656427026,0.17560002207756042,0.6032844185829163],"rotation":[-0.00026577641256153584,-0.976926863193512,-0.006426497362554073,-0.21347709000110626],"used":true,"bodyHandle":6.13e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.09425368160009384,0.2528975009918213,0.029015371575951576],"rotation":[-0.00465566199272871,-0.8453969359397888,-0.0001815039140637964,-0.5341181755065918],"used":true,"bodyHandle":6.2e-322,"linearSpeed":0.08095215353016527,"pendingImpulse":null},{"position":[0.07315244525671005,0.17390616238117218,0.3845600187778473],"rotation":[-0.0019041229970753193,0.03471190109848976,0.0014541968703269958,-0.9993944764137268],"used":true,"bodyHandle":6.23e-322,"linearSpeed":2.8238779389370403e-11,"pendingImpulse":null},{"position":[0.27512627840042114,0.18246735632419586,0.26765501499176025],"rotation":[0.0018154054414480925,0.18142199516296387,-0.0006837411201559007,0.9834033846855164],"used":true,"bodyHandle":6.27e-322,"linearSpeed":9.976552430240041e-10,"pendingImpulse":null},{"position":[0.28137537837028503,0.177026629447937,0.20988400280475616],"rotation":[-0.799120306968689,0.0006517086294479668,0.601170539855957,0.0005737080937251449],"used":true,"bodyHandle":6.3e-322,"linearSpeed":2.1335537541648583e-11,"pendingImpulse":null},{"position":[-0.09434857964515686,0.24784544110298157,0.0908314436674118],"rotation":[0.00009219975618179888,0.9856721758842468,-0.004695574287325144,0.16860687732696533],"used":true,"bodyHandle":6.37e-322,"linearSpeed":0.07922657688483879,"pendingImpulse":null},{"position":[0.15769274532794952,0.2531222999095917,0.08333558589220047],"rotation":[-0.25482678413391113,-0.003184341825544834,0.9669811725616455,-0.0007756309350952506],"used":true,"bodyHandle":6.4e-322,"linearSpeed":0.08044828041945702,"pendingImpulse":null},{"position":[-0.07439935207366943,0.17461927235126495,0.36304157972335815],"rotation":[-0.9953557252883911,-0.0011454987106844783,0.09617333859205246,0.004034463781863451],"used":true,"bodyHandle":6.47e-322,"linearSpeed":1.835009911643856e-9,"pendingImpulse":null},{"position":[-0.35164356231689453,0.18186242878437042,0.34836772084236145],"rotation":[-0.79554283618927,-0.029792357236146927,-0.6050241589546204,0.013027685694396496],"used":true,"bodyHandle":6.5e-322,"linearSpeed":4.355190483273908e-8,"pendingImpulse":null},{"position":[-0.05800701305270195,0.17523279786109924,0.6363505721092224],"rotation":[-0.0031352913938462734,0.6733744144439697,0.0007706744945608079,-0.7392945885658264],"used":true,"bodyHandle":6.57e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.10728910565376282,0.17649787664413452,0.2090693712234497],"rotation":[-0.7003323435783386,0.0009722133399918675,-0.7138034701347351,-0.0042729368433356285],"used":true,"bodyHandle":6.6e-322,"linearSpeed":1.8420722628801934e-10,"pendingImpulse":null},{"position":[-0.061147622764110565,0.1771777868270874,0.7046448588371277],"rotation":[-0.013428234495222569,-0.518500804901123,0.012115327641367912,-0.8548858165740967],"used":true,"bodyHandle":6.67e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.00010458756878506392,0.17476259171962738,0.737926185131073],"rotation":[-0.013044225983321667,-0.946569561958313,-0.005229342728853226,-0.32219329476356506],"used":true,"bodyHandle":6.7e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05786651372909546,0.174404576420784,0.7038488388061523],"rotation":[0.004125823732465506,0.20662838220596313,-0.00042680412298068404,0.9784107208251953],"used":true,"bodyHandle":6.77e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.23533987998962402,0.180094376206398,0.44646766781806946],"rotation":[0.00018745698616839945,0.266101598739624,0.0018484215252101421,0.9639431834220886],"used":true,"bodyHandle":6.8e-322,"linearSpeed":3.1148856053757545e-8,"pendingImpulse":null},{"position":[-0.21354638040065765,0.24747741222381592,0.09220200031995773],"rotation":[0.004964431747794151,0.7951524257659912,-0.006357876118272543,-0.6063558459281921],"used":true,"bodyHandle":6.87e-322,"linearSpeed":0.07920900800282253,"pendingImpulse":null},{"position":[-0.17165637016296387,0.17702864110469818,0.291255384683609],"rotation":[0.0014354950981214643,0.2597186863422394,-0.0011993370717391372,-0.9656825065612793],"used":true,"bodyHandle":6.9e-322,"linearSpeed":4.1149801956661934e-8,"pendingImpulse":null},{"position":[-0.11695311963558197,0.17706406116485596,0.26884129643440247],"rotation":[0.8919919729232788,0.00027265018434263766,-0.452051043510437,0.00007243638538056985],"used":true,"bodyHandle":6.97e-322,"linearSpeed":4.320554384143949e-10,"pendingImpulse":null},{"position":[0.04794048145413399,0.24741841852664948,0.06994577497243881],"rotation":[-0.0028475315775722265,-0.9918640851974487,-0.002335069701075554,-0.12724776566028595],"used":true,"bodyHandle":7e-322,"linearSpeed":0.07916152680469034,"pendingImpulse":null},{"position":[-0.12979449331760406,0.18550753593444824,0.538051426410675],"rotation":[0.0012725447304546833,-0.1468787044286728,0.002682670019567013,0.9891499876976013],"used":true,"bodyHandle":7.07e-322,"linearSpeed":0.000006895653317438476,"pendingImpulse":null},{"position":[0.05862198770046234,0.1767272800207138,0.6327646374702454],"rotation":[-0.005164484027773142,-0.6483757495880127,-0.004758941940963268,0.7612881660461426],"used":true,"bodyHandle":7.1e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.10000114887952805,0.24819453060626984,0.1073765903711319],"rotation":[-0.00963546708226204,-0.7608527541160583,0.004670729395002127,0.6488361358642578],"used":true,"bodyHandle":7.16e-322,"linearSpeed":0.0790758992234474,"pendingImpulse":null},{"position":[-0.5712922811508179,0.1797095090150833,0.7906442284584045],"rotation":[-0.0028614101465791464,-0.9804257154464722,-0.005969812627881765,0.19677798449993134],"used":true,"bodyHandle":7.2e-322,"linearSpeed":6.913573558181443e-14,"pendingImpulse":null},{"position":[-0.05071641132235527,0.2532523274421692,0.07124429196119308],"rotation":[0.5242350101470947,-0.006395558826625347,-0.8515480756759644,0.001605029683560133],"used":true,"bodyHandle":7.26e-322,"linearSpeed":0.08042054253862538,"pendingImpulse":null},{"position":[0.10739365965127945,0.18444223701953888,0.38650500774383545],"rotation":[-0.016001656651496887,0.4785078465938568,-0.01924220286309719,-0.8777264952659607],"used":true,"bodyHandle":7.3e-322,"linearSpeed":4.88162458333807e-8,"pendingImpulse":null},{"position":[0.0002475806977599859,0.17703498899936676,0.6731938123703003],"rotation":[0.006951996590942144,-0.3686999976634979,0.007053697016090155,0.929495632648468],"used":true,"bodyHandle":7.36e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.00028108517290093005,0.1763128936290741,0.5989984273910522],"rotation":[0.0078197680413723,0.9998196363449097,-0.002207718091085553,0.017165016382932663],"used":true,"bodyHandle":7.4e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.22839686274528503,0.1863309144973755,0.3202260732650757],"rotation":[-0.9761505126953125,-0.00822159368544817,-0.21651600301265717,-0.013538502156734467],"used":true,"bodyHandle":7.46e-322,"linearSpeed":2.4393355983020577e-7,"pendingImpulse":null},{"position":[0.05787723883986473,0.17543472349643707,0.63527911901474],"rotation":[-0.0055102137848734856,-0.4133003056049347,-0.007389448117464781,0.9105480909347534],"used":true,"bodyHandle":7.5e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.10605161637067795,0.18202772736549377,0.2089931070804596],"rotation":[0.4005832076072693,-0.005514773074537516,-0.9161935448646545,-0.009591152891516685],"used":true,"bodyHandle":7.56e-322,"linearSpeed":1.4652125098520964e-8,"pendingImpulse":null},{"position":[-0.5690659880638123,0.1742434948682785,0.5248857736587524],"rotation":[-0.003478172468021512,0.04450857266783714,-0.002694536466151476,0.9989992380142212],"used":true,"bodyHandle":7.6e-322,"linearSpeed":1.3756995582781245e-10,"pendingImpulse":null},{"position":[0.5715878009796143,0.17434661090373993,0.7905410528182983],"rotation":[0.9999135732650757,0.0033049907069653273,-0.008585984818637371,0.00938552338629961],"used":true,"bodyHandle":7.66e-322,"linearSpeed":1.3214329484290324e-9,"pendingImpulse":null},{"position":[-0.15388669073581696,0.24714253842830658,0.08026513457298279],"rotation":[-0.0007164319395087659,-0.12967489659786224,0.006440425291657448,-0.9915353655815125],"used":true,"bodyHandle":7.7e-322,"linearSpeed":0.07912829604141497,"pendingImpulse":null},{"position":[-0.002315726364031434,0.2539505660533905,0.10499680787324905],"rotation":[0.010172718204557896,0.701155960559845,-0.005327417049556971,-0.7129154801368713],"used":true,"bodyHandle":7.76e-322,"linearSpeed":0.07992283486331161,"pendingImpulse":null},{"position":[0.05851256847381592,0.1796579658985138,0.7035236954689026],"rotation":[0.021568387746810913,0.8055976629257202,0.008823873475193977,0.5920044779777527],"used":true,"bodyHandle":7.8e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.18894867599010468,0.17684607207775116,0.26693740487098694],"rotation":[0.002210776088759303,0.1053193211555481,0.002311799908056855,-0.9944332838058472],"used":true,"bodyHandle":7.86e-322,"linearSpeed":1.4169242317831232e-11,"pendingImpulse":null},{"position":[0.15589672327041626,0.24713945388793945,0.016515500843524933],"rotation":[-0.6864399909973145,0.0017750225961208344,0.7271761298179626,-0.0034533869475126266],"used":true,"bodyHandle":7.9e-322,"linearSpeed":0.07914256169133563,"pendingImpulse":null},{"position":[0.0007403484778478742,0.17717976868152618,0.7373567819595337],"rotation":[-0.005343190860003233,-0.9826095700263977,0.0019973537418991327,-0.18559612333774567],"used":true,"bodyHandle":7.95e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.059698838740587234,0.17496836185455322,0.7045602202415466],"rotation":[-0.002866505878046155,-0.10001228004693985,0.005252516828477383,-0.9949681758880615],"used":true,"bodyHandle":8e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.22191211581230164,0.17861758172512054,0.3161017596721649],"rotation":[-0.016144288703799248,0.4621477425098419,-0.019734814763069153,0.8864362835884094],"used":true,"bodyHandle":8.05e-322,"linearSpeed":7.893721181808212e-11,"pendingImpulse":null},{"position":[0.269579142332077,0.25878432393074036,0.04803171753883362],"rotation":[-0.655360996723175,0.003382336348295212,0.755305826663971,0.0018900884315371513],"used":true,"bodyHandle":8.1e-322,"linearSpeed":0.08072394625102253,"pendingImpulse":null},{"position":[0.05455360561609268,0.17640753090381622,0.2099330574274063],"rotation":[0.6626858711242676,0.003583426820114255,-0.7488884329795837,-0.0007576342322863638],"used":true,"bodyHandle":8.15e-322,"linearSpeed":6.142500485931251e-9,"pendingImpulse":null},{"position":[-0.14674623310565948,0.258341908454895,0.08498482406139374],"rotation":[-0.9716149568557739,0.012531088665127754,0.2362017184495926,0.004003680776804686],"used":true,"bodyHandle":8.2e-322,"linearSpeed":0.08047061997831147,"pendingImpulse":null},{"position":[-0.14033032953739166,0.18272508680820465,0.26001083850860596],"rotation":[0.4377666413784027,0.0010013337014243007,-0.8990806937217712,0.003639495698735118],"used":true,"bodyHandle":8.25e-322,"linearSpeed":2.6261016931830214e-8,"pendingImpulse":null},{"position":[0.22251495718955994,0.184268057346344,0.21008138358592987],"rotation":[0.2652362287044525,-0.06839282810688019,-0.9567552804946899,-0.09793630987405777],"used":true,"bodyHandle":8.3e-322,"linearSpeed":1.9903160880259847e-9,"pendingImpulse":null},{"position":[-0.0611935593187809,0.1767539083957672,0.63390052318573],"rotation":[-0.003183635650202632,0.05099596828222275,-0.01577138900756836,-0.9985692501068115],"used":true,"bodyHandle":8.35e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0022218350786715746,0.17586980760097504,0.6689018607139587],"rotation":[-0.0002217744622612372,0.08572150021791458,0.0023604463785886765,-0.9963163137435913],"used":true,"bodyHandle":8.4e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.21103249490261078,0.25680625438690186,0.055544376373291016],"rotation":[0.04193510115146637,0.634821355342865,-0.03598635643720627,-0.7706804275512695],"used":true,"bodyHandle":8.45e-322,"linearSpeed":0.08292847371502317,"pendingImpulse":null},{"position":[-0.210442453622818,0.25015267729759216,0.04759650677442551],"rotation":[0.02016325667500496,0.9256488084793091,-0.054233256727457047,-0.37393391132354736],"used":true,"bodyHandle":8.5e-322,"linearSpeed":0.08048893337336713,"pendingImpulse":null},{"position":[-0.23075297474861145,0.18094375729560852,0.2321152240037918],"rotation":[-0.6678295731544495,0.06621135771274567,-0.7409150004386902,-0.025781115517020226],"used":true,"bodyHandle":8.55e-322,"linearSpeed":0.000039973314955811145,"pendingImpulse":null},{"position":[0.2696247398853302,0.24733057618141174,0.08553970605134964],"rotation":[-0.6161859035491943,-0.0024196302983909845,-0.7875892519950867,-0.003496210789307952],"used":true,"bodyHandle":8.6e-322,"linearSpeed":0.07915784044544227,"pendingImpulse":null},{"position":[-0.07484853267669678,0.247549369931221,-0.054252829402685165],"rotation":[-0.0008965953602455556,0.47156864404678345,-0.00006671083247056231,-0.8818288445472717],"used":true,"bodyHandle":8.65e-322,"linearSpeed":0.0791515463436607,"pendingImpulse":null},{"position":[-0.21213819086551666,0.18306864798069,0.24620899558067322],"rotation":[-0.0424109511077404,-0.20867082476615906,0.06490056961774826,-0.9749079942703247],"used":true,"bodyHandle":8.7e-322,"linearSpeed":0.000022515371397675496,"pendingImpulse":null},{"position":[0.0005691256956197321,0.178993821144104,0.6018995642662048],"rotation":[-0.0030740213114768267,-0.9980425834655762,0.005510390270501375,0.06221906468272209],"used":true,"bodyHandle":8.74e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.16636314988136292,0.17685896158218384,0.20930016040802002],"rotation":[0.9967118501663208,-0.003250124864280224,0.08095647394657135,-0.0009960971074178815],"used":true,"bodyHandle":8.8e-322,"linearSpeed":2.0639621577194518e-8,"pendingImpulse":null},{"position":[0.15705113112926483,0.25270915031433105,0.01854398287832737],"rotation":[-0.9610458016395569,-0.0018145531648769975,0.2763420343399048,-0.004755476024001837],"used":true,"bodyHandle":8.84e-322,"linearSpeed":0.08037245195153903,"pendingImpulse":null},{"position":[-0.05878249183297157,0.1787976175546646,0.636566698551178],"rotation":[0.0019511001883074641,0.16979318857192993,-0.0053114392794668674,-0.9854634404182434],"used":true,"bodyHandle":8.9e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.14692872762680054,0.25141221284866333,-0.013504746370017529],"rotation":[0.015745967626571655,-0.9876797795295715,-0.06560999900102615,-0.1411946415901184],"used":true,"bodyHandle":8.94e-322,"linearSpeed":0.07923218548574557,"pendingImpulse":null},{"position":[-0.059687819331884384,0.1789911389350891,0.7040749192237854],"rotation":[0.005515787284821272,0.1829974502325058,0.002160927513614297,-0.9830955266952515],"used":true,"bodyHandle":9e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.10319814831018448,0.24743248522281647,0.04631049185991287],"rotation":[0.0019463686039671302,0.8824947476387024,-0.0019077472388744354,0.4703144133090973],"used":true,"bodyHandle":9.04e-322,"linearSpeed":0.07900384211525997,"pendingImpulse":null},{"position":[-0.001038566930219531,0.1785127818584442,0.7401220798492432],"rotation":[0.02413586899638176,-0.926218569278717,0.0007905077654868364,-0.3762127161026001],"used":true,"bodyHandle":9.1e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.06144436076283455,0.1762986183166504,0.705376923084259],"rotation":[0.014039800502359867,0.9076119065284729,0.010267565958201885,0.4194498062133789],"used":true,"bodyHandle":9.14e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.29966166615486145,0.1881805956363678,0.24379417300224304],"rotation":[0.03113011084496975,0.8761112093925476,-0.1899195909500122,-0.44203001260757446],"used":true,"bodyHandle":9.2e-322,"linearSpeed":1.4434625431479107e-7,"pendingImpulse":null},{"position":[0.060828886926174164,0.1835670918226242,0.6339018940925598],"rotation":[-0.0068734982050955296,-0.9967048764228821,-0.013024242594838142,0.07976530492305756],"used":true,"bodyHandle":9.24e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.15289172530174255,0.2527208924293518,0.08335196226835251],"rotation":[0.577642023563385,-0.006589182186871767,0.8162196278572083,0.008478764444589615],"used":true,"bodyHandle":9.3e-322,"linearSpeed":0.07989148209503472,"pendingImpulse":null},{"position":[-0.0025391431991010904,0.17867746949195862,0.6684491634368896],"rotation":[-0.0005629350198432803,-0.9638673663139343,-0.004870253149420023,0.2663373351097107],"used":true,"bodyHandle":9.34e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.15570344030857086,0.24742461740970612,0.08002689480781555],"rotation":[-0.26911139488220215,0.0002695113653317094,-0.9631047248840332,0.0028713063802570105],"used":true,"bodyHandle":9.4e-322,"linearSpeed":0.07914329389249208,"pendingImpulse":null},{"position":[0.00026908074505627155,0.1812049150466919,0.6014514565467834],"rotation":[-0.004709757398813963,0.9929322004318237,-0.0006822511204518378,-0.11858785152435303],"used":true,"bodyHandle":9.44e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0582868754863739,0.18058019876480103,0.6363827586174011],"rotation":[-0.01211579516530037,-0.997969388961792,-0.010909806936979294,0.06157374382019043],"used":true,"bodyHandle":9.5e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.040249813348054886,0.24746011197566986,0.06688965111970901],"rotation":[0.0006547148805111647,0.926280677318573,-0.0043045165948569775,-0.3768092095851898],"used":true,"bodyHandle":9.54e-322,"linearSpeed":0.07904546414084945,"pendingImpulse":null},{"position":[-0.21015718579292297,0.24933023750782013,-0.0034990841522812843],"rotation":[0.11340024322271347,-0.03881722688674927,-0.9927827715873718,-0.0039956821128726006],"used":true,"bodyHandle":9.6e-322,"linearSpeed":0.07828395551821814,"pendingImpulse":null},{"position":[0.24507293105125427,0.18729166686534882,0.2100239098072052],"rotation":[-0.07917972654104233,-0.9603352546691895,0.002796282060444355,0.26735547184944153],"used":true,"bodyHandle":9.63e-322,"linearSpeed":3.047958407784036e-9,"pendingImpulse":null},{"position":[0.05826627090573311,0.1789633184671402,0.7041265368461609],"rotation":[0.0074135921895504,0.8842184543609619,0.006571739912033081,0.46696844696998596],"used":true,"bodyHandle":9.7e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.21063083410263062,0.2532194256782532,0.11990029364824295],"rotation":[-0.011247777380049229,-0.6323040723800659,-0.005967358592897654,-0.7746157050132751],"used":true,"bodyHandle":9.73e-322,"linearSpeed":0.08018582167629222,"pendingImpulse":null},{"position":[0.0011313443537801504,0.1803036779165268,0.7403109073638916],"rotation":[0.006862889975309372,-0.9378586411476135,0.0038872703444212675,-0.3469279408454895],"used":true,"bodyHandle":9.8e-322,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.1643369048833847,0.2476189285516739,-0.09984384477138519],"rotation":[0.8665570020675659,0.0005097193643450737,0.49906477332115173,-0.003608953207731247],"used":true,"bodyHandle":9.83e-322,"linearSpeed":0.07912976115118361,"pendingImpulse":null},{"position":[0.059266265481710434,0.24747924506664276,0.00671094935387373],"rotation":[0.1625337153673172,-0.001191613613627851,0.9867005348205566,0.001850683125667274],"used":true,"bodyHandle":9.9e-322,"linearSpeed":0.07908996342918627,"pendingImpulse":null},{"position":[0.21749965846538544,0.24714846909046173,-0.00437465263530612],"rotation":[0.0010065996320918202,0.9948769807815552,0.002905091969296336,0.10104592889547348],"used":true,"bodyHandle":9.93e-322,"linearSpeed":0.07915000433041983,"pendingImpulse":null},{"position":[0.4951004087924957,0.17460951209068298,0.8211514353752136],"rotation":[-0.004034513141959906,-0.9897632598876953,0.00028169475262984633,-0.142661452293396],"used":true,"bodyHandle":1e-321,"linearSpeed":4.725822815853574e-12,"pendingImpulse":null},{"position":[-0.05858367308974266,0.18414685130119324,0.7035828232765198],"rotation":[-0.0072510153986513615,-0.18946322798728943,0.026214800775051117,-0.9815109968185425],"used":true,"bodyHandle":1.003e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.09924431145191193,0.25320908427238464,0.03982061892747879],"rotation":[0.0016475860029459,0.19379092752933502,0.0019767319317907095,-0.9810394644737244],"used":true,"bodyHandle":1.01e-321,"linearSpeed":0.08031660316430117,"pendingImpulse":null},{"position":[0.15529188513755798,0.25837695598602295,0.017009975388646126],"rotation":[-0.2890952527523041,0.0036384135019034147,0.9572776556015015,-0.005490892566740513],"used":true,"bodyHandle":1.013e-321,"linearSpeed":0.08136083771507231,"pendingImpulse":null},{"position":[-0.06174132227897644,0.18360182642936707,0.6346995830535889],"rotation":[-0.000700698175933212,-0.25716477632522583,-0.005519703961908817,-0.9663515686988831],"used":true,"bodyHandle":1.02e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.09570981562137604,0.2474205046892166,0.03164680302143097],"rotation":[0.00022582404199056327,-0.8976978063583374,-0.002822322305291891,0.4406026005744934],"used":true,"bodyHandle":1.023e-321,"linearSpeed":0.07928378207939164,"pendingImpulse":null},{"position":[-0.01595182530581951,0.2532379925251007,-0.03492455929517746],"rotation":[-0.6797636151313782,0.003230299334973097,0.7334228157997131,-0.0013756129192188382],"used":true,"bodyHandle":1.03e-321,"linearSpeed":0.0805701249263688,"pendingImpulse":null},{"position":[0.002415786264464259,0.18085476756095886,0.6715179085731506],"rotation":[-0.006401419639587402,0.7024445533752441,-0.0022638007067143917,-0.7117059826850891],"used":true,"bodyHandle":1.033e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.04663999006152153,0.24762915074825287,-0.002425829414278269],"rotation":[0.7023117542266846,-0.0007246508612297475,-0.7118687629699707,0.0007308544591069221],"used":true,"bodyHandle":1.04e-321,"linearSpeed":0.07924106932286101,"pendingImpulse":null},{"position":[-0.00029642117442563176,0.1820850819349289,0.602772057056427],"rotation":[0.004646754823625088,-0.9908362030982971,-0.0019167856080457568,-0.134975403547287],"used":true,"bodyHandle":1.042e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.058560460805892944,0.1806395947933197,0.636089563369751],"rotation":[-0.0026072426699101925,-0.20379985868930817,-0.005019364878535271,-0.978996217250824],"used":true,"bodyHandle":1.047e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.15538112819194794,0.25205790996551514,0.021039403975009918],"rotation":[-0.06558959931135178,-0.1911933869123459,-0.033831555396318436,-0.9787739515304565],"used":true,"bodyHandle":1.05e-321,"linearSpeed":0.07941229406380268,"pendingImpulse":null},{"position":[-0.5434560179710388,0.1792205423116684,0.7337711453437805],"rotation":[0.2899165749549866,0.004589706193655729,0.9570409059524536,-0.00008770947169978172],"used":true,"bodyHandle":1.057e-321,"linearSpeed":1.4793817072377474e-7,"pendingImpulse":null},{"position":[0.49843084812164307,0.17442522943019867,0.7601303458213806],"rotation":[-0.0020495597273111343,0.4195108711719513,-0.0016179295489564538,0.9077465534210205],"used":true,"bodyHandle":1.06e-321,"linearSpeed":6.093736174109207e-10,"pendingImpulse":null},{"position":[-0.27027568221092224,0.24721723794937134,0.08592988550662994],"rotation":[0.4703594446182251,-0.0038314913399517536,-0.882463276386261,0.002421285957098007],"used":true,"bodyHandle":1.067e-321,"linearSpeed":0.07921240874710668,"pendingImpulse":null},{"position":[0.2699812948703766,0.25309422612190247,0.09160447865724564],"rotation":[0.0019386452622711658,-0.4721985459327698,0.004238415509462357,-0.8814799189567566],"used":true,"bodyHandle":1.07e-321,"linearSpeed":0.08031247835320236,"pendingImpulse":null},{"position":[-0.06106490269303322,0.18163467943668365,0.7060931324958801],"rotation":[0.0019408337539061904,-0.28427186608314514,-0.01336594671010971,-0.9586486220359802],"used":true,"bodyHandle":1.077e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.2699914574623108,0.24723227322101593,0.026535987854003906],"rotation":[0.003392255399376154,0.7069537043571472,0.000462854077341035,-0.7072515487670898],"used":true,"bodyHandle":1.08e-321,"linearSpeed":0.0791290163651877,"pendingImpulse":null},{"position":[-0.000005678535671904683,0.1839301586151123,0.7366571426391602],"rotation":[0.010530691593885422,-0.8171762824058533,0.004405367188155651,-0.5762748122215271],"used":true,"bodyHandle":1.087e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.2698017358779907,0.24715963006019592,-0.03280605375766754],"rotation":[0.9312960505485535,-0.0027519373688846827,0.3642321527004242,0.0038737026043236256],"used":true,"bodyHandle":1.09e-321,"linearSpeed":0.07913823298553702,"pendingImpulse":null},{"position":[0.061266813427209854,0.18364955484867096,0.7061474323272705],"rotation":[0.00932470615953207,0.6728507876396179,-0.0014857021160423756,0.7397179007530212],"used":true,"bodyHandle":1.097e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.2696368992328644,0.25263747572898865,0.09916933625936508],"rotation":[-0.0014022823888808489,-0.9998055100440979,0.006133612710982561,0.01869131624698639],"used":true,"bodyHandle":1.1e-321,"linearSpeed":0.08150800583937633,"pendingImpulse":null},{"position":[-0.011436155065894127,0.24742771685123444,-0.04913907125592232],"rotation":[0.0000731754262233153,0.533278226852417,0.0017506064614281058,-0.8459380865097046],"used":true,"bodyHandle":1.107e-321,"linearSpeed":0.0791950871995756,"pendingImpulse":null},{"position":[0.06114599481225014,0.17864519357681274,0.6339886784553528],"rotation":[-0.00821324810385704,-0.5822505354881287,-0.0001304305187659338,0.8129678964614868],"used":true,"bodyHandle":1.11e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.5569131970405579,0.17806552350521088,0.7608318328857422],"rotation":[0.9958720803260803,0.02594658173620701,0.07362405955791473,0.04631545767188072],"used":true,"bodyHandle":1.117e-321,"linearSpeed":2.527714273234861e-8,"pendingImpulse":null},{"position":[-0.0019394801929593086,0.1834314614534378,0.6720746755599976],"rotation":[0.009868699125945568,-0.9066742658615112,-0.002935472410172224,0.42170587182044983],"used":true,"bodyHandle":1.12e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.26992130279541016,0.2525913417339325,-0.03164122626185417],"rotation":[-0.9976137280464172,0.003277971874922514,-0.06882953643798828,-0.004306559916585684],"used":true,"bodyHandle":1.126e-321,"linearSpeed":0.08062178415817164,"pendingImpulse":null},{"position":[0.10424622148275375,0.24741590023040771,-0.03147711977362633],"rotation":[0.38290852308273315,0.0018476134864613414,0.923780083656311,-0.002818620065227151],"used":true,"bodyHandle":1.13e-321,"linearSpeed":0.07914621921635741,"pendingImpulse":null},{"position":[0.00041144777787849307,0.1844126135110855,0.598525881767273],"rotation":[-0.018920663744211197,0.9728806018829346,-0.0036092614755034447,0.2305046170949936],"used":true,"bodyHandle":1.136e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.059696536511182785,0.18558332324028015,0.6353746056556702],"rotation":[-0.006800476927310228,-0.24783016741275787,0.0027389908209443092,0.9687756896018982],"used":true,"bodyHandle":1.14e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05825149267911911,0.18172182142734528,0.7037838697433472],"rotation":[0.008244676515460014,-0.006425234954804182,-0.0035865269601345062,0.99993896484375],"used":true,"bodyHandle":1.146e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0008864167029969394,0.1824662983417511,0.7401553392410278],"rotation":[-0.0022947690449655056,-0.9979302287101746,-0.00151494808960706,0.06424771994352341],"used":true,"bodyHandle":1.15e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05889229476451874,0.1810620129108429,0.7038953900337219],"rotation":[-0.005997879896312952,-0.9790574908256531,-0.009423592127859592,-0.20327727496623993],"used":true,"bodyHandle":1.156e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.038460101932287216,0.25328564643859863,-0.061037328094244],"rotation":[0.0002432593028061092,-0.8521855473518372,-0.0023004692047834396,-0.523234486579895],"used":true,"bodyHandle":1.16e-321,"linearSpeed":0.08031405839713993,"pendingImpulse":null},{"position":[-0.060855235904455185,0.18218286335468292,0.6335530281066895],"rotation":[-0.0010579262161627412,-0.32465556263923645,-0.006196795497089624,-0.94581139087677],"used":true,"bodyHandle":1.166e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.2130586951971054,0.25272291898727417,-0.004790527280420065],"rotation":[-0.8088786602020264,-0.0010560216614976525,0.5879662036895752,0.0031473562121391296],"used":true,"bodyHandle":1.17e-321,"linearSpeed":0.08045996481418256,"pendingImpulse":null},{"position":[0.0011021987302228808,0.18405035138130188,0.6678138375282288],"rotation":[-0.0034338885452598333,0.4096818268299103,0.0038922582753002644,-0.9122136831283569],"used":true,"bodyHandle":1.176e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.000047178746171994135,0.1855507642030716,0.6017984747886658],"rotation":[0.008582385256886482,-0.46238529682159424,-0.002654539654031396,-0.886633574962616],"used":true,"bodyHandle":1.18e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05882079526782036,0.18585392832756042,0.635802686214447],"rotation":[0.007425609044730663,0.13573485612869263,-0.00498859491199255,-0.9907047748565674],"used":true,"bodyHandle":1.186e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.058982230722904205,0.18630893528461456,0.7034047245979309],"rotation":[0.017600996419787407,-0.8473201990127563,-0.01677779108285904,-0.5305253267288208],"used":true,"bodyHandle":1.19e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5714110732078552,0.17980363965034485,0.5237924456596375],"rotation":[-0.5032557249069214,0.0057291253469884396,0.8641166687011719,-0.0018046466866508126],"used":true,"bodyHandle":1.196e-321,"linearSpeed":1.7188452055473266e-8,"pendingImpulse":null},{"position":[-0.3282672166824341,0.1741424947977066,0.4407992660999298],"rotation":[0.0028258792590349913,-0.9999776482582092,0.003773608710616827,0.004728313069790602],"used":true,"bodyHandle":1.2e-321,"linearSpeed":2.96496417504608e-11,"pendingImpulse":null},{"position":[0.0001553635811433196,0.18604804575443268,0.7381845116615295],"rotation":[0.00013050850247964263,-0.9827293157577515,-0.0033492064103484154,-0.18501871824264526],"used":true,"bodyHandle":1.206e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.1623895913362503,0.2472989410161972,-0.044377151876688004],"rotation":[-0.005246744025498629,-0.42293646931648254,0.00211125030182302,0.9061416983604431],"used":true,"bodyHandle":1.21e-321,"linearSpeed":0.07910293891805392,"pendingImpulse":null},{"position":[-0.26243987679481506,0.18508173525333405,0.4619295001029968],"rotation":[0.19156858325004578,0.004102021921426058,0.9814674854278564,0.0024892070796340704],"used":true,"bodyHandle":1.215e-321,"linearSpeed":9.783527971279114e-8,"pendingImpulse":null},{"position":[-0.26202192902565,0.1741001456975937,0.4705764651298523],"rotation":[0.5751243233680725,-0.0011890421155840158,0.8180633783340454,0.0017311506671831012],"used":true,"bodyHandle":1.22e-321,"linearSpeed":8.448773981849967e-10,"pendingImpulse":null},{"position":[0.16244502365589142,0.2530379295349121,-0.04286694899201393],"rotation":[0.003273589536547661,-0.7917301654815674,0.006368197966367006,-0.6108289361000061],"used":true,"bodyHandle":1.225e-321,"linearSpeed":0.08049066542447722,"pendingImpulse":null},{"position":[0.060227904468774796,0.18475328385829926,0.7058107852935791],"rotation":[0.01046404056251049,0.6076971292495728,0.002484565367922187,0.794096052646637],"used":true,"bodyHandle":1.23e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05835177004337311,0.1821567416191101,0.6360862851142883],"rotation":[-0.005364835262298584,-0.8130910396575928,-0.001303351717069745,0.5821103453636169],"used":true,"bodyHandle":1.235e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.10379955172538757,0.25319549441337585,-0.0324392095208168],"rotation":[-0.9589439630508423,-0.003596303518861532,0.28356271982192993,-0.0023941427934914827],"used":true,"bodyHandle":1.24e-321,"linearSpeed":0.08028065413443385,"pendingImpulse":null},{"position":[-0.0018351550679653883,0.18572935461997986,0.6726479530334473],"rotation":[0.007705168332904577,-0.8476882576942444,-0.00023620910360477865,0.5304387211799622],"used":true,"bodyHandle":1.245e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.21434201300144196,0.2585706114768982,-0.008832765743136406],"rotation":[0.3479446470737457,0.0022960961796343327,-0.9375106692314148,-0.0017280497122555971],"used":true,"bodyHandle":1.25e-321,"linearSpeed":0.08142517755738486,"pendingImpulse":null},{"position":[-0.2707694172859192,0.2525917589664459,0.0356559194624424],"rotation":[-0.8829964399337769,0.006828813813626766,-0.46932438015937805,0.0023038266226649284],"used":true,"bodyHandle":1.255e-321,"linearSpeed":0.08135357080313259,"pendingImpulse":null},{"position":[0.00016687539755366743,0.18656310439109802,0.6025838851928711],"rotation":[-0.001378775923512876,0.904370129108429,-0.006397067103534937,0.4266987144947052],"used":true,"bodyHandle":1.26e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.06172671541571617,0.18749864399433136,0.6349039077758789],"rotation":[0.02081383764743805,-0.169650599360466,-0.011030816473066807,0.9852226376533508],"used":true,"bodyHandle":1.265e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.061570413410663605,0.18665365874767303,0.7052353620529175],"rotation":[0.0020179871935397387,0.5954257845878601,0.008228338323533535,0.8033656477928162],"used":true,"bodyHandle":1.27e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0002598915307316929,0.18770624697208405,0.7380675077438354],"rotation":[-0.0009447447955608368,-0.4831278920173645,-0.010840827599167824,-0.8754821419715881],"used":true,"bodyHandle":1.275e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05896233022212982,0.1879475861787796,0.7039684057235718],"rotation":[0.010833666659891605,-0.9292138814926147,-0.0030053339432924986,0.369371235370636],"used":true,"bodyHandle":1.28e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.26994454860687256,0.24714204668998718,0.026346642524003983],"rotation":[-0.0029420105274766684,-0.9898214340209961,-0.0004511270672082901,-0.1422833651304245],"used":true,"bodyHandle":1.285e-321,"linearSpeed":0.07899574712721535,"pendingImpulse":null},{"position":[-0.05938279628753662,0.18723808228969574,0.6361706256866455],"rotation":[0.0017640189034864306,0.2920825481414795,0.0009506699861958623,-0.9563910365104675],"used":true,"bodyHandle":1.29e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0025188857689499855,0.18734101951122284,0.6686502695083618],"rotation":[0.00851853471249342,0.24116788804531097,-0.014023096300661564,-0.9703447222709656],"used":true,"bodyHandle":1.294e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0010656784288585186,0.18947362899780273,0.5990387797355652],"rotation":[0.020715514197945595,-0.7085468769073486,-0.005907936487346888,-0.7053348422050476],"used":true,"bodyHandle":1.3e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.06185629218816757,0.18964675068855286,0.6344057321548462],"rotation":[-0.00017854363250080496,0.5584274530410767,-0.003909335937350988,-0.829544186592102],"used":true,"bodyHandle":1.304e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.061836205422878265,0.18914131820201874,0.7056797742843628],"rotation":[0.011393974535167217,-0.698308527469635,-0.003855787217617035,0.7156957387924194],"used":true,"bodyHandle":1.31e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.5760483145713806,0.17389027774333954,0.39629635214805603],"rotation":[0.0634457990527153,0.0010354305850341916,-0.9979842901229858,0.000918085512239486],"used":true,"bodyHandle":1.314e-321,"linearSpeed":1.9204721916176807e-11,"pendingImpulse":null},{"position":[-0.0009237034828402102,0.19065047800540924,0.7406597137451172],"rotation":[0.00036299467319622636,-0.6860619187355042,0.00109039805829525,-0.7275422215461731],"used":true,"bodyHandle":1.32e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05832406505942345,0.18874706327915192,0.7044283151626587],"rotation":[0.004644296132028103,0.4776143729686737,-0.00200104434043169,0.8785550594329834],"used":true,"bodyHandle":1.324e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05891195684671402,0.19129614531993866,0.6350297927856445],"rotation":[-0.012345115654170513,-0.47676604986190796,0.0015618872130289674,0.8789421319961548],"used":true,"bodyHandle":1.33e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0027706061955541372,0.19145426154136658,0.6687241196632385],"rotation":[0.003928568679839373,-0.6172976493835449,0.0025540851056575775,0.7867157459259033],"used":true,"bodyHandle":1.334e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.00026978892856277525,0.19536347687244415,0.6021669507026672],"rotation":[-0.00926180649548769,0.806835949420929,0.004509476013481617,0.5906856656074524],"used":true,"bodyHandle":1.34e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05830885469913483,0.1896553486585617,0.6364219784736633],"rotation":[0.004820144269615412,0.5691968202590942,-0.010187196545302868,0.8221240043640137],"used":true,"bodyHandle":1.344e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.026998907327651978,0.17459414899349213,0.8141847848892212],"rotation":[0.005533612333238125,-0.32399189472198486,0.009995452128350735,0.9459908604621887],"used":true,"bodyHandle":1.35e-321,"linearSpeed":2.858070657610532e-14,"pendingImpulse":null},{"position":[0.061481233686208725,0.19196727871894836,0.70639967918396],"rotation":[-0.00024550023954361677,-0.4592420756816864,0.001175565179437399,0.8883103132247925],"used":true,"bodyHandle":1.354e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0003127700765617192,0.18939118087291718,0.7373450994491577],"rotation":[-0.0032983897253870964,0.17767535150051117,0.004878522362560034,-0.9840714931488037],"used":true,"bodyHandle":1.36e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.51754230260849,0.17409639060497284,0.6818364262580872],"rotation":[0.29464927315711975,-0.005083935800939798,0.9555919170379639,0.00020217278506606817],"used":true,"bodyHandle":1.364e-321,"linearSpeed":1.1133026521347959e-9,"pendingImpulse":null},{"position":[-0.2019864171743393,0.2501816749572754,-0.04577723890542984],"rotation":[0.006270167417824268,-0.8012675642967224,0.048254720866680145,-0.59632408618927],"used":true,"bodyHandle":1.37e-321,"linearSpeed":0.07912946482983813,"pendingImpulse":null},{"position":[-0.06067810207605362,0.19094252586364746,0.7045956254005432],"rotation":[0.0014692661352455616,-0.9191480875015259,-0.004071163944900036,0.39388829469680786],"used":true,"bodyHandle":1.374e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.059791482985019684,0.19165632128715515,0.6359434127807617],"rotation":[0.006595461629331112,-0.8086938858032227,-0.009664327837526798,-0.5881133079528809],"used":true,"bodyHandle":1.38e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0011605382896959782,0.1897246390581131,0.6722425818443298],"rotation":[-0.009235881268978119,-0.06291571259498596,-0.003966654650866985,-0.9979681968688965],"used":true,"bodyHandle":1.383e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0004282289883121848,0.1909199208021164,0.599263072013855],"rotation":[0.005281985737383366,-0.20481716096401215,-0.009003311395645142,-0.978744626045227],"used":true,"bodyHandle":1.39e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.061826191842556,0.1924351304769516,0.6341477036476135],"rotation":[0.002482342766597867,-0.7929880023002625,0.0015753275947645307,-0.6092300415039062],"used":true,"bodyHandle":1.393e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05891840532422066,0.1939285546541214,0.7031075358390808],"rotation":[0.0002795213949866593,-0.9996728301048279,-0.0008418806246481836,0.025560354813933372],"used":true,"bodyHandle":1.4e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.2690981328487396,0.24722690880298615,-0.032684460282325745],"rotation":[-0.787899374961853,-0.002765933983027935,-0.6157957911491394,0.0015992430271580815],"used":true,"bodyHandle":1.403e-321,"linearSpeed":0.07893501746617931,"pendingImpulse":null},{"position":[0.00068674236536026,0.19330868124961853,0.740273654460907],"rotation":[0.004634372424334288,0.25603774189949036,-0.001929720863699913,-0.9666537642478943],"used":true,"bodyHandle":1.41e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.09709063172340393,0.25335678458213806,-0.06351740658283234],"rotation":[-0.00135462183970958,0.7588179111480713,0.0006346939480863512,-0.6513010263442993],"used":true,"bodyHandle":1.413e-321,"linearSpeed":0.07983787558268841,"pendingImpulse":null},{"position":[0.06120818480849266,0.1909552663564682,0.7051044702529907],"rotation":[0.002410463523119688,-0.31068623065948486,-0.004104206338524818,0.9505005478858948],"used":true,"bodyHandle":1.42e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.06045064330101013,0.19335398077964783,0.6340258121490479],"rotation":[-0.006391602102667093,0.46519985795021057,-0.006985887885093689,0.8851549625396729],"used":true,"bodyHandle":1.423e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.002904280787333846,0.19269819557666779,0.6691633462905884],"rotation":[0.0009716751519590616,-0.8465619683265686,-0.0016938893822953105,0.532286524772644],"used":true,"bodyHandle":1.43e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5184425711631775,0.17895935475826263,0.3443143367767334],"rotation":[0.00784678291529417,-0.4486647844314575,0.0044883787631988525,-0.8936543464660645],"used":true,"bodyHandle":1.433e-321,"linearSpeed":4.529229110818062e-9,"pendingImpulse":null},{"position":[-0.0004063239030074328,0.19287258386611938,0.6007968783378601],"rotation":[-0.0022959597408771515,0.9164144992828369,0.00047870728303678334,0.40022361278533936],"used":true,"bodyHandle":1.44e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.5785980224609375,0.17921863496303558,0.3940947651863098],"rotation":[0.20920708775520325,-0.0024321796372532845,-0.9778668284416199,-0.001720378058962524],"used":true,"bodyHandle":1.443e-321,"linearSpeed":1.6321263886370083e-10,"pendingImpulse":null},{"position":[0.05858537554740906,0.1950305849313736,0.6361641883850098],"rotation":[0.018190525472164154,-0.21336834132671356,-0.019913561642169952,0.9765994548797607],"used":true,"bodyHandle":1.45e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05837220698595047,0.19409526884555817,0.7036575675010681],"rotation":[-0.00339911668561399,-0.9291015863418579,-0.0011629100190475583,0.36980709433555603],"used":true,"bodyHandle":1.453e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0006960333557799459,0.19380229711532593,0.7373581528663635],"rotation":[-0.015272917225956917,0.4751368761062622,-0.013275394216179848,-0.8796791434288025],"used":true,"bodyHandle":1.457e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.061654120683670044,0.1970362365245819,0.7060070633888245],"rotation":[0.002839961089193821,0.009955703280866146,-0.005874587222933769,-0.9999291300773621],"used":true,"bodyHandle":1.46e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.060282573103904724,0.19531938433647156,0.6371257305145264],"rotation":[-0.0011679150629788637,-0.6474058628082275,-0.005872162990272045,-0.7621219158172607],"used":true,"bodyHandle":1.467e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0023092504125088453,0.1949758380651474,0.6687657237052917],"rotation":[-0.0005393875762820244,-0.4613127112388611,-0.0024286718107759953,-0.8872341513633728],"used":true,"bodyHandle":1.47e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5160158276557922,0.1739296168088913,0.34874072670936584],"rotation":[-0.9936086535453796,-0.0009073367109522223,0.11250178515911102,-0.009185262024402618],"used":true,"bodyHandle":1.477e-321,"linearSpeed":9.290958598103223e-11,"pendingImpulse":null},{"position":[-0.0008630936499685049,0.19802062213420868,0.5994902849197388],"rotation":[0.0028746796306222677,-0.733230710029602,0.004179244861006737,-0.6799610257148743],"used":true,"bodyHandle":1.48e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.26996272802352905,0.2474181205034256,-0.15311087667942047],"rotation":[-0.9973798990249634,-0.00036192836705595255,-0.07226485013961792,-0.0033007238525897264],"used":true,"bodyHandle":1.487e-321,"linearSpeed":0.07913511487034845,"pendingImpulse":null},{"position":[-0.059250663965940475,0.1968967318534851,0.6358460783958435],"rotation":[-0.006610326003283262,-0.008257392793893814,-0.007208200171589851,-0.9999181032180786],"used":true,"bodyHandle":1.49e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.06026024743914604,0.1947317272424698,0.7032040953636169],"rotation":[-0.009981129318475723,0.25236785411834717,-0.00002537993532314431,-0.9675799012184143],"used":true,"bodyHandle":1.497e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0004152418696321547,0.1964333951473236,0.7370967864990234],"rotation":[0.013281076215207577,0.5899488925933838,0.007937016896903515,-0.8072923421859741],"used":true,"bodyHandle":1.5e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.06079048663377762,0.19641374051570892,0.7054987549781799],"rotation":[0.0021888825576752424,-0.8950336575508118,0.0022582602687180042,0.44598761200904846],"used":true,"bodyHandle":1.507e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0586504228413105,0.19697119295597076,0.6360446214675903],"rotation":[0.00513162836432457,0.6237067580223083,-0.00312000117264688,0.7816354036331177],"used":true,"bodyHandle":1.51e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0005617051501758397,0.19664917886257172,0.6736132502555847],"rotation":[0.004665346350520849,-0.35306647419929504,0.0035384967923164368,0.9355798959732056],"used":true,"bodyHandle":1.517e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.4803769290447235,0.17426633834838867,0.7597514390945435],"rotation":[0.00202864408493042,0.5016545057296753,-0.0008677031146362424,0.8650652766227722],"used":true,"bodyHandle":1.52e-321,"linearSpeed":5.573777936682957e-10,"pendingImpulse":null},{"position":[-0.0006733587943017483,0.19811953604221344,0.6020572185516357],"rotation":[-0.004288151860237122,0.5909697413444519,-0.0013406506041064858,0.806681215763092],"used":true,"bodyHandle":1.527e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.06068022921681404,0.19890667498111725,0.6353304386138916],"rotation":[0.0197898056358099,0.7041239142417908,-0.0017047408036887646,0.7097992300987244],"used":true,"bodyHandle":1.53e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.06137561425566673,0.1977640688419342,0.7061942219734192],"rotation":[0.002709366846829653,-0.47828543186187744,-0.004269804805517197,0.8781898021697998],"used":true,"bodyHandle":1.537e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0006842479924671352,0.1993788778781891,0.737933874130249],"rotation":[-0.006101458799093962,-0.09895619004964828,-0.009462394751608372,-0.9950280785560608],"used":true,"bodyHandle":1.54e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05895910784602165,0.20144355297088623,0.703998327255249],"rotation":[0.0022185228299349546,0.4017801880836487,0.009315639734268188,-0.9156860709190369],"used":true,"bodyHandle":1.546e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.06163204833865166,0.20092594623565674,0.634053647518158],"rotation":[0.021737081930041313,-0.5610821843147278,0.013457919470965862,-0.8273652195930481],"used":true,"bodyHandle":1.55e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0006267067510634661,0.19895362854003906,0.6676688194274902],"rotation":[-0.003482771571725607,-0.7520220279693604,-0.0015066470950841904,-0.6591270565986633],"used":true,"bodyHandle":1.556e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0002751863212324679,0.20374539494514465,0.6019827723503113],"rotation":[0.0007493561715818942,-0.15230683982372284,-0.009023820981383324,-0.9882917404174805],"used":true,"bodyHandle":1.56e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05961843952536583,0.19852721691131592,0.6358354091644287],"rotation":[-0.007675456814467907,-0.33870068192481995,-0.023302845656871796,-0.9405742287635803],"used":true,"bodyHandle":1.566e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.060710251331329346,0.19837144017219543,0.7038304209709167],"rotation":[-0.0002305787493241951,-0.09357970207929611,0.0009691689629107714,-0.9956112504005432],"used":true,"bodyHandle":1.57e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5129116773605347,0.18453967571258545,0.34779468178749084],"rotation":[-0.0035619137343019247,-0.834428608417511,0.005562370177358389,0.551076352596283],"used":true,"bodyHandle":1.576e-321,"linearSpeed":1.3027262576435798e-9,"pendingImpulse":null},{"position":[0.5663601160049438,0.17432984709739685,0.5240171551704407],"rotation":[-0.9938661456108093,-0.0006071081734262407,0.1105876937508583,0.00023392451112158597],"used":true,"bodyHandle":1.58e-321,"linearSpeed":5.719981224758071e-12,"pendingImpulse":null},{"position":[-0.0005837062490172684,0.1999361217021942,0.7371004223823547],"rotation":[0.0016756069380789995,0.6639142036437988,0.0007051907014101744,-0.7478065490722656],"used":true,"bodyHandle":1.586e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.5785178542137146,0.18475574254989624,0.38814273476600647],"rotation":[-0.005084541160613298,-0.547520637512207,-0.00011922009434783831,0.8367766737937927],"used":true,"bodyHandle":1.59e-321,"linearSpeed":2.787569256159161e-10,"pendingImpulse":null},{"position":[0.05851442366838455,0.2003997564315796,0.7037609815597534],"rotation":[0.009669899009168148,-0.9984688758850098,0.0014785537496209145,0.054443977773189545],"used":true,"bodyHandle":1.596e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0587770938873291,0.2036096304655075,0.6364500522613525],"rotation":[0.016631830483675003,0.3074047863483429,-0.010377318598330021,0.9513768553733826],"used":true,"bodyHandle":1.6e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.003081549657508731,0.2005852907896042,0.6718666553497314],"rotation":[0.00022286739840637892,-0.4460557699203491,0.00030561647145077586,0.8950050473213196],"used":true,"bodyHandle":1.606e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.5749033689498901,0.19058524072170258,0.3872239589691162],"rotation":[-0.0036882259882986546,-0.8475353717803955,0.002004022477194667,0.5307222604751587],"used":true,"bodyHandle":1.61e-321,"linearSpeed":1.207296785137565e-10,"pendingImpulse":null},{"position":[0.0006854532985016704,0.20164594054222107,0.5988606810569763],"rotation":[-0.00508858310058713,-0.46329107880592346,0.0012178663164377213,0.8861907124519348],"used":true,"bodyHandle":1.616e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.06149298697710037,0.20100858807563782,0.6337519288063049],"rotation":[0.006700801197439432,-0.6636232733726501,-0.018619298934936523,0.747805118560791],"used":true,"bodyHandle":1.62e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.061990123242139816,0.20197194814682007,0.7050856351852417],"rotation":[0.0016735026147216558,-0.9613134264945984,-0.0032064428087323904,-0.27543315291404724],"used":true,"bodyHandle":1.625e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.00022484699729830027,0.20300592482089996,0.7385720014572144],"rotation":[0.0017405811231583357,0.7502581477165222,0.00450871791690588,-0.6611272692680359],"used":true,"bodyHandle":1.63e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.062326475977897644,0.20285025238990784,0.70453280210495],"rotation":[0.007972356863319874,-0.3486892282962799,-0.00409473292529583,-0.9371955394744873],"used":true,"bodyHandle":1.635e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.5826529264450073,0.17994606494903564,0.5194457769393921],"rotation":[0.28178760409355164,0.0022916696034371853,0.9594714641571045,0.0022309066262096167],"used":true,"bodyHandle":1.64e-321,"linearSpeed":2.3004156505362142e-10,"pendingImpulse":null},{"position":[-0.06125224754214287,0.2025754153728485,0.6342072486877441],"rotation":[0.014970165677368641,-0.17613232135772705,0.0014956536469981074,-0.9842515587806702],"used":true,"bodyHandle":1.645e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.002308596856892109,0.20213645696640015,0.6720107793807983],"rotation":[0.01571991667151451,-0.3636772930622101,-0.004622403532266617,-0.9313808679580688],"used":true,"bodyHandle":1.65e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5138625502586365,0.19001822173595428,0.3463934361934662],"rotation":[0.29174816608428955,0.009335135109722614,0.9564434289932251,0.003422813257202506],"used":true,"bodyHandle":1.655e-321,"linearSpeed":1.4628253741192542e-9,"pendingImpulse":null},{"position":[-0.00020989692711737007,0.20446471869945526,0.602557897567749],"rotation":[0.0012923204340040684,0.27979499101638794,-0.0023990035988390446,-0.9600558876991272],"used":true,"bodyHandle":1.66e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05956174060702324,0.20412637293338776,0.6360802054405212],"rotation":[-0.00297616608440876,-0.32285651564598083,-0.010281573981046677,-0.9463873505592346],"used":true,"bodyHandle":1.665e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05879458039999008,0.20526577532291412,0.7038180232048035],"rotation":[-0.004895366262644529,0.18880264461040497,0.01616518199443817,-0.9818697571754456],"used":true,"bodyHandle":1.67e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.00008063315181061625,0.20428144931793213,0.7404084205627441],"rotation":[0.0005070719635114074,0.7520761489868164,0.0034047176595777273,-0.6590671539306641],"used":true,"bodyHandle":1.675e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05876535177230835,0.2056940793991089,0.7040911316871643],"rotation":[0.0056009539403021336,-0.8977940082550049,0.0001334455155301839,0.4403799772262573],"used":true,"bodyHandle":1.68e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.060296185314655304,0.20551832020282745,0.6348786354064941],"rotation":[0.004758029710501432,-0.5423096418380737,-0.012945062480866909,0.8400654196739197],"used":true,"bodyHandle":1.685e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0030238358303904533,0.2050204575061798,0.6689736247062683],"rotation":[-0.0035297309514135122,-0.7444430589675903,0.005186483729630709,0.6676564812660217],"used":true,"bodyHandle":1.69e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0011710294056683779,0.20679475367069244,0.5988900065422058],"rotation":[0.0033441546838730574,-0.2507023215293884,-0.00028985607787035406,0.9680584669113159],"used":true,"bodyHandle":1.695e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.060424789786338806,0.20669415593147278,0.6362780928611755],"rotation":[0.014440921135246754,0.15336646139621735,-0.007528979796916246,0.9880351424217224],"used":true,"bodyHandle":1.7e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.06117212027311325,0.20421911776065826,0.7049767971038818],"rotation":[0.006119620054960251,-0.9840747714042664,0.001474974793381989,-0.17764323949813843],"used":true,"bodyHandle":1.705e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0010956496698781848,0.2071065455675125,0.7393262982368469],"rotation":[-0.0006312921759672463,0.31672877073287964,0.007857297547161579,-0.948483407497406],"used":true,"bodyHandle":1.71e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0621936209499836,0.20614582300186157,0.7047963738441467],"rotation":[-0.01042298972606659,-0.3079618811607361,0.01142025738954544,-0.9512730240821838],"used":true,"bodyHandle":1.714e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.06089017540216446,0.20589721202850342,0.6346003413200378],"rotation":[-0.0013670232146978378,0.12314330041408539,-0.009565514512360096,-0.9923418760299683],"used":true,"bodyHandle":1.72e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0010182575788348913,0.206836998462677,0.673133909702301],"rotation":[-0.0022819258738309145,-0.449214905500412,0.005657315254211426,-0.8934028744697571],"used":true,"bodyHandle":1.724e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.00003365367592778057,0.20945580303668976,0.602497935295105],"rotation":[0.006602052599191666,-0.022899873554706573,0.006183577701449394,-0.9996967911720276],"used":true,"bodyHandle":1.73e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.059796325862407684,0.20861312747001648,0.6358646750450134],"rotation":[0.004254462197422981,-0.3647611141204834,-0.008332930505275726,-0.9310540556907654],"used":true,"bodyHandle":1.734e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.058503326028585434,0.20865345001220703,0.7039243578910828],"rotation":[-0.009528489783406258,-0.4470601975917816,-0.03223364055156708,-0.893872082233429],"used":true,"bodyHandle":1.74e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0001494716270826757,0.2084372490644455,0.7389200329780579],"rotation":[-0.0038491222076117992,-0.13369128108024597,-0.021329136565327644,-0.9907859563827515],"used":true,"bodyHandle":1.744e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5622149109840393,0.1851152926683426,0.805535078048706],"rotation":[0.8071154356002808,-0.010124157182872295,0.5902975797653198,-0.003309260355308652],"used":true,"bodyHandle":1.75e-321,"linearSpeed":5.144735818939013e-13,"pendingImpulse":null},{"position":[0.059302981942892075,0.20844312012195587,0.7052137851715088],"rotation":[0.00019713822985067964,-0.8427611589431763,-0.006397469900548458,0.5382495522499084],"used":true,"bodyHandle":1.754e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.06232595443725586,0.20859864354133606,0.6351802349090576],"rotation":[0.0011007669381797314,-0.5967692732810974,-0.009090742096304893,0.8023605346679688],"used":true,"bodyHandle":1.76e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.001575604546815157,0.2086285948753357,0.6682072877883911],"rotation":[0.007984220050275326,-0.8541978597640991,-0.0024424497969448566,0.519881010055542],"used":true,"bodyHandle":1.764e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0009361416450701654,0.21120409667491913,0.6014514565467834],"rotation":[-0.003526753978803754,0.3142865002155304,-0.0034766646567732096,0.9493152499198914],"used":true,"bodyHandle":1.77e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05924402177333832,0.2104663848876953,0.6361960768699646],"rotation":[0.004907893482595682,-0.02519349940121174,-0.004371635615825653,0.9996609091758728],"used":true,"bodyHandle":1.774e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05875537544488907,0.21074189245700836,0.7043063640594482],"rotation":[0.023604560643434525,-0.9911895394325256,0.010614793747663498,0.1298980712890625],"used":true,"bodyHandle":1.78e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0009962973417714238,0.2114877998828888,0.7388657927513123],"rotation":[-0.011162374168634415,-0.897142231464386,-0.0008274511783383787,-0.4416000545024872],"used":true,"bodyHandle":1.784e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.06200578436255455,0.21147914230823517,0.7052754163742065],"rotation":[0.02017439901828766,0.6190175414085388,0.00002593504177639261,-0.785118043422699],"used":true,"bodyHandle":1.79e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5388356447219849,0.19039477407932281,0.7254680395126343],"rotation":[0.0005443174159154296,0.9782565236091614,-0.007375984452664852,0.20726661384105682],"used":true,"bodyHandle":1.793e-321,"linearSpeed":2.5175566757703887e-8,"pendingImpulse":null},{"position":[-0.5428417921066284,0.17384764552116394,0.7312474250793457],"rotation":[-0.004835862200707197,0.017668088898062706,0.003939475864171982,0.9998244643211365],"used":true,"bodyHandle":1.8e-321,"linearSpeed":5.540775938035746e-9,"pendingImpulse":null},{"position":[-0.062306057661771774,0.21030700206756592,0.6339659690856934],"rotation":[0.016189368441700935,-0.9990121126174927,0.0010060147615149617,0.04137227311730385],"used":true,"bodyHandle":1.803e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0016391753451898694,0.21089383959770203,0.6719875931739807],"rotation":[0.0042288885451853275,-0.12415125966072083,-0.006256629712879658,-0.9922345280647278],"used":true,"bodyHandle":1.81e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0005065101431682706,0.21363745629787445,0.5991014242172241],"rotation":[0.010282325558364391,0.8895210027694702,-0.0034526644740253687,-0.45676541328430176],"used":true,"bodyHandle":1.813e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05973925441503525,0.21157677471637726,0.6358830332756042],"rotation":[0.012363764457404613,-0.9557392001152039,-0.005510056857019663,0.29390355944633484],"used":true,"bodyHandle":1.82e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.5100700855255127,0.180031418800354,0.8224011659622192],"rotation":[0.0037711262702941895,0.8427547812461853,-0.00707732979208231,0.5382380485534668],"used":true,"bodyHandle":1.823e-321,"linearSpeed":1.0160827199617178e-10,"pendingImpulse":null},{"position":[0.000049551716074347496,0.2635405659675598,0.6007812023162842],"rotation":[-0.00915086455643177,0.1420488804578781,0.0026251196395605803,-0.9898138642311096],"used":true,"bodyHandle":1.83e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.060666389763355255,0.25982269644737244,0.6366360187530518],"rotation":[-0.023944318294525146,-0.7544354200363159,-0.008332081139087677,-0.6558844447135925],"used":true,"bodyHandle":1.833e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.571290910243988,0.17836809158325195,0.44063296914100647],"rotation":[-0.9819193482398987,0.06698845326900482,0.17696207761764526,-0.005594104528427124],"used":true,"bodyHandle":1.84e-321,"linearSpeed":1.7704554197890505e-9,"pendingImpulse":null},{"position":[-0.05966111645102501,0.2134166955947876,0.7036613821983337],"rotation":[-0.00366159132681787,0.5099532604217529,0.019960492849349976,-0.8599626421928406],"used":true,"bodyHandle":1.843e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5245963931083679,0.1741078794002533,0.4842676520347595],"rotation":[-0.9947174191474915,0.003334837732836604,0.10257711261510849,-0.001997327897697687],"used":true,"bodyHandle":1.85e-321,"linearSpeed":7.688120578144218e-11,"pendingImpulse":null},{"position":[-0.0005296203889884055,0.21322734653949738,0.7396265268325806],"rotation":[-0.009166885167360306,-0.7497982382774353,-0.00810062326490879,-0.6615533828735352],"used":true,"bodyHandle":1.853e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.007348466664552689,0.17915767431259155,0.8354016542434692],"rotation":[0.059756066650152206,-0.5574132204055786,0.04568643867969513,0.8268206715583801],"used":true,"bodyHandle":1.86e-321,"linearSpeed":3.4878768904960913e-13,"pendingImpulse":null},{"position":[0.06130284443497658,0.2119593769311905,0.7055999636650085],"rotation":[-0.007134838029742241,-0.3124431073665619,0.0038128485903143883,0.9499019980430603],"used":true,"bodyHandle":1.863e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.06009877845644951,0.2133461982011795,0.6364754438400269],"rotation":[0.01113662589341402,-0.16649165749549866,-0.007926743477582932,0.9859480857849121],"used":true,"bodyHandle":1.87e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.002906471723690629,0.2131279557943344,0.67073655128479],"rotation":[-0.01060427911579609,-0.8465691804885864,0.007655811496078968,0.532118022441864],"used":true,"bodyHandle":1.873e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.00013486930401995778,0.21538692712783813,0.6024636030197144],"rotation":[-0.0017521693371236324,-0.44873732328414917,-0.0008780641364865005,0.8936615586280823],"used":true,"bodyHandle":1.877e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.49373191595077515,0.1797904670238495,0.7762392163276672],"rotation":[0.006912940181791782,-0.2430488020181656,0.004056447185575962,0.9699809551239014],"used":true,"bodyHandle":1.88e-321,"linearSpeed":4.0902089827842274e-8,"pendingImpulse":null},{"position":[0.06174665689468384,0.21559105813503265,0.6347382068634033],"rotation":[-0.002385663101449609,-0.9815548658370972,-0.009782780893146992,0.19091510772705078],"used":true,"bodyHandle":1.887e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05844547227025032,0.21592918038368225,0.704014778137207],"rotation":[0.008551917970180511,-0.43960776925086975,-0.008259516209363937,0.8981111645698547],"used":true,"bodyHandle":1.89e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0003212936862837523,0.21466733515262604,0.7400843501091003],"rotation":[0.004091857932507992,-0.8933297395706177,-0.0027536589186638594,0.4493747055530548],"used":true,"bodyHandle":1.897e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05939209833741188,0.2148331254720688,0.7043821811676025],"rotation":[0.00044076290214434266,0.5633600950241089,0.004232268314808607,-0.8262004852294922],"used":true,"bodyHandle":1.9e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.06190038472414017,0.21469679474830627,0.6335082650184631],"rotation":[0.010524649173021317,-0.9931421279907227,0.011193128302693367,0.11589917540550232],"used":true,"bodyHandle":1.907e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.002104147570207715,0.21591193974018097,0.6699180006980896],"rotation":[0.006436104886233807,-0.35947951674461365,0.0024684348609298468,-0.9331275224685669],"used":true,"bodyHandle":1.91e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0005235273856669664,0.21710924804210663,0.5997395515441895],"rotation":[0.0028684213757514954,0.8914872407913208,-0.006714559625834227,-0.4529868960380554],"used":true,"bodyHandle":1.917e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.5021880865097046,0.18554410338401794,0.6501662135124207],"rotation":[0.007309040520340204,-0.8174610137939453,0.012461600825190544,0.5758026242256165],"used":true,"bodyHandle":1.92e-321,"linearSpeed":3.297085811744057e-8,"pendingImpulse":null},{"position":[-0.060398202389478683,0.21674954891204834,0.6360263228416443],"rotation":[0.016738206148147583,-0.9651946425437927,-0.001834655413404107,0.2609899640083313],"used":true,"bodyHandle":1.927e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.060971010476350784,0.2174549102783203,0.7063599824905396],"rotation":[-0.007138282060623169,-0.24043314158916473,0.004291505552828312,-0.9706299901008606],"used":true,"bodyHandle":1.93e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.5799967050552368,0.17431074380874634,0.45627859234809875],"rotation":[0.22772198915481567,0.0003355648077558726,0.9737149477005005,0.0046621146611869335],"used":true,"bodyHandle":1.937e-321,"linearSpeed":1.4366902395576107e-10,"pendingImpulse":null},{"position":[-0.0009701566305011511,0.21715933084487915,0.7391319274902344],"rotation":[-0.0007464924128726125,-0.9990286827087402,-0.004950868431478739,0.04377845674753189],"used":true,"bodyHandle":1.94e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05962904542684555,0.2168833166360855,0.7046083211898804],"rotation":[-0.011630643159151077,-0.8467891216278076,-0.0028436530847102404,0.5317940711975098],"used":true,"bodyHandle":1.947e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5420693159103394,0.18476349115371704,0.731349527835846],"rotation":[0.39473575353622437,0.004070461727678776,0.9187813401222229,0.0028064248617738485],"used":true,"bodyHandle":1.95e-321,"linearSpeed":1.4582528567101788e-7,"pendingImpulse":null},{"position":[-0.5652679204940796,0.17415644228458405,0.3778403401374817],"rotation":[-0.0014814483001828194,0.6221550107002258,0.005471402313560247,0.7828734517097473],"used":true,"bodyHandle":1.956e-321,"linearSpeed":1.914476977732129e-12,"pendingImpulse":null},{"position":[-0.06078403443098068,0.2564922273159027,0.6367448568344116],"rotation":[-0.018804986029863358,-0.46590712666511536,0.007936087436974049,-0.8845981359481812],"used":true,"bodyHandle":1.96e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.059312839061021805,0.2172648161649704,0.636703610420227],"rotation":[0.003695820691064,-0.9214789867401123,-0.001188534777611494,0.3884088695049286],"used":true,"bodyHandle":1.966e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0031338059343397617,0.2176118642091751,0.670454204082489],"rotation":[-0.008446459658443928,-0.6564531326293945,0.009316645562648773,0.7542619705200195],"used":true,"bodyHandle":1.97e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.45199477672576904,0.17431002855300903,0.6839616894721985],"rotation":[0.005467139184474945,0.9908162355422974,0.008942954242229462,0.13480812311172485],"used":true,"bodyHandle":1.976e-321,"linearSpeed":1.661607624376552e-11,"pendingImpulse":null},{"position":[0.00008460198296234012,0.22015148401260376,0.6005344390869141],"rotation":[-0.010169056244194508,-0.2876890003681183,-0.007595867849886417,0.9576396942138672],"used":true,"bodyHandle":1.98e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.5931422710418701,0.17977096140384674,0.45483288168907166],"rotation":[0.0050680930726230145,0.7601377964019775,-0.003104118863120675,0.6497346758842468],"used":true,"bodyHandle":1.986e-321,"linearSpeed":3.75972864230668e-9,"pendingImpulse":null},{"position":[0.00011940499098272994,0.25936198234558105,0.7376229763031006],"rotation":[-0.013973507098853588,-0.9632368087768555,0.020650843158364296,0.26749423146247864],"used":true,"bodyHandle":1.99e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.5025303959846497,0.17980830371379852,0.6503171324729919],"rotation":[0.007654454093426466,-0.9591329097747803,-0.0004752719250973314,-0.28285178542137146],"used":true,"bodyHandle":1.996e-321,"linearSpeed":3.496938702284281e-8,"pendingImpulse":null},{"position":[-0.16898509860038757,0.17463868856430054,0.783745527267456],"rotation":[0.9429646730422974,-0.0007882338832132518,-0.3328869938850403,-0.0017865633126348257],"used":true,"bodyHandle":2e-321,"linearSpeed":7.995475055823841e-10,"pendingImpulse":null},{"position":[-0.5700373649597168,0.17966347932815552,0.3736542761325836],"rotation":[-0.0003844119200948626,0.3160499930381775,0.008021177724003792,0.9487085342407227],"used":true,"bodyHandle":2.006e-321,"linearSpeed":2.703169675321603e-10,"pendingImpulse":null},{"position":[0.062344107776880264,0.21988345682621002,0.6358856558799744],"rotation":[0.0033728850539773703,-0.39223793148994446,0.0007852559210732579,0.9198572039604187],"used":true,"bodyHandle":2.01e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.24361591041088104,0.19218476116657257,0.7221102118492126],"rotation":[0.00887400284409523,0.8619770407676697,-0.02179444022476673,0.5064007639884949],"used":true,"bodyHandle":2.016e-321,"linearSpeed":1.2073949829108085e-7,"pendingImpulse":null},{"position":[0.06097044795751572,0.21922194957733154,0.7045486569404602],"rotation":[-0.006965984124690294,-0.37314823269844055,-0.0016609117155894637,0.9277440905570984],"used":true,"bodyHandle":2.02e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5525594353675842,0.1869412660598755,0.4362899363040924],"rotation":[-0.7760076522827148,0.07174333930015564,0.6258981227874756,0.030273910611867905],"used":true,"bodyHandle":2.026e-321,"linearSpeed":1.635343114138872e-9,"pendingImpulse":null},{"position":[0.4904254674911499,0.17427152395248413,0.6284553408622742],"rotation":[-0.30168813467025757,0.004925228655338287,-0.9533928036689758,0.0014334094012156129],"used":true,"bodyHandle":2.03e-321,"linearSpeed":1.833457032838373e-9,"pendingImpulse":null},{"position":[0.00033304793760180473,0.22027485072612762,0.7403603196144104],"rotation":[0.008240298368036747,-0.8273921012878418,-0.00790282990783453,0.5615085959434509],"used":true,"bodyHandle":2.036e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05952626094222069,0.21887092292308807,0.7047121524810791],"rotation":[-0.002813674509525299,-0.07282847166061401,0.007864919491112232,-0.9973095059394836],"used":true,"bodyHandle":2.04e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.06035207584500313,0.2189464271068573,0.6356799602508545],"rotation":[0.00482956413179636,-0.9237164258956909,-0.010766535066068172,-0.38289517164230347],"used":true,"bodyHandle":2.045e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.5237211585044861,0.17992638051509857,0.5212646722793579],"rotation":[0.004812426865100861,-0.8858193755149841,-0.003457549726590514,0.4639924466609955],"used":true,"bodyHandle":2.05e-321,"linearSpeed":1.7537850266870614e-8,"pendingImpulse":null},{"position":[0.33247876167297363,0.17430423200130463,0.6949970722198486],"rotation":[-0.3534277081489563,-0.003158341161906719,-0.9354546070098877,0.0018596132285892963],"used":true,"bodyHandle":2.055e-321,"linearSpeed":1.3098915310916579e-9,"pendingImpulse":null},{"position":[-0.5579901337623596,0.18193180859088898,0.4368269145488739],"rotation":[0.0426461398601532,0.30380764603614807,0.06422959268093109,-0.9496087431907654],"used":true,"bodyHandle":2.06e-321,"linearSpeed":1.7768580483347855e-9,"pendingImpulse":null},{"position":[0.5059707164764404,0.17415769398212433,0.53522127866745],"rotation":[-0.543044924736023,-0.0026369744446128607,0.8396957516670227,0.0024975836277008057],"used":true,"bodyHandle":2.065e-321,"linearSpeed":1.9223895039933512e-10,"pendingImpulse":null},{"position":[0.0009652743465267122,0.21967647969722748,0.6715683937072754],"rotation":[0.010587114840745926,-0.008142826147377491,-0.0002491935738362372,-0.9999107122421265],"used":true,"bodyHandle":2.07e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.462216854095459,0.1785142570734024,0.7079364061355591],"rotation":[0.8784828186035156,-0.03262421861290932,0.4758763611316681,-0.02729921042919159],"used":true,"bodyHandle":2.075e-321,"linearSpeed":9.73208496127162e-11,"pendingImpulse":null},{"position":[-0.5208066701889038,0.17966507375240326,0.488290399312973],"rotation":[0.00040463966433890164,-0.973602294921875,0.0035010294523090124,0.22822365164756775],"used":true,"bodyHandle":2.08e-321,"linearSpeed":1.3996945895622164e-8,"pendingImpulse":null},{"position":[0.4618475139141083,0.17406070232391357,0.5757773518562317],"rotation":[-0.9999893307685852,0.0008519592811353505,-0.004111087881028652,0.0019263424910604954],"used":true,"bodyHandle":2.085e-321,"linearSpeed":5.861192461157278e-9,"pendingImpulse":null},{"position":[0.0005894298665225506,0.22286175191402435,0.6011857986450195],"rotation":[0.009488477371633053,0.9002730846405029,-0.0057843346148729324,-0.4351838529109955],"used":true,"bodyHandle":2.09e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.062153540551662445,0.22075572609901428,0.6341380476951599],"rotation":[0.012442880310118198,-0.9995412826538086,-0.0016203593695536256,0.027564456686377525],"used":true,"bodyHandle":2.095e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.34614840149879456,0.18543554842472076,0.5684075951576233],"rotation":[-0.009631830267608166,-0.30179139971733093,0.002584629226475954,0.9533218145370483],"used":true,"bodyHandle":2.1e-321,"linearSpeed":5.878289893945182e-8,"pendingImpulse":null},{"position":[-0.5742017030715942,0.18529489636421204,0.3723440170288086],"rotation":[-0.004666708875447512,0.32592543959617615,-0.007518577855080366,-0.9453540444374084],"used":true,"bodyHandle":2.105e-321,"linearSpeed":1.0483458967267114e-9,"pendingImpulse":null},{"position":[0.4096108675003052,0.18174578249454498,0.5999277830123901],"rotation":[-0.2331029325723648,0.019229000434279442,-0.9716323614120483,0.03498274087905884],"used":true,"bodyHandle":2.11e-321,"linearSpeed":0.00009859617627273892,"pendingImpulse":null},{"position":[-0.05955260246992111,0.22220514714717865,0.7054010629653931],"rotation":[-0.010788984596729279,-0.6346030235290527,0.0033411416225135326,-0.7727557420730591],"used":true,"bodyHandle":2.115e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.4684349298477173,0.18386240303516388,0.7099794745445251],"rotation":[0.0428902804851532,0.20401321351528168,-0.010164104402065277,0.9779753088951111],"used":true,"bodyHandle":2.12e-321,"linearSpeed":2.387136114240684e-9,"pendingImpulse":null},{"position":[0.0003015684778802097,0.2592911422252655,0.6689118146896362],"rotation":[0.04681207984685898,-0.4154079556465149,0.02097056806087494,-0.908187747001648],"used":true,"bodyHandle":2.124e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.487260639667511,0.17368167638778687,0.6244043111801147],"rotation":[0.005484772380441427,0.8518494367599487,0.005808117799460888,0.5237257480621338],"used":true,"bodyHandle":2.13e-321,"linearSpeed":4.8204726009616285e-8,"pendingImpulse":null},{"position":[-0.0000022582244127988815,0.22130709886550903,0.7399256825447083],"rotation":[-0.004550072364509106,-0.9981745481491089,0.0012560707982629538,0.06021043658256531],"used":true,"bodyHandle":2.134e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5001647472381592,0.18529164791107178,0.4070587754249573],"rotation":[-0.0014521159464493394,-0.750488817691803,0.004645731300115585,0.6608651876449585],"used":true,"bodyHandle":2.14e-321,"linearSpeed":1.5145013574634022e-9,"pendingImpulse":null},{"position":[-0.23817093670368195,0.18522794544696808,0.5185707211494446],"rotation":[0.0014190395595505834,0.9887808561325073,0.0004375048156362027,-0.14936576783657074],"used":true,"bodyHandle":2.144e-321,"linearSpeed":0.000009960266855437934,"pendingImpulse":null},{"position":[0.05978847295045853,0.22198711335659027,0.7052501440048218],"rotation":[0.002048717811703682,0.1693921983242035,-0.00507019367069006,0.9855335354804993],"used":true,"bodyHandle":2.15e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.13707050681114197,0.1740557849407196,0.7770992517471313],"rotation":[0.0007195408688858151,-0.8667354583740234,0.0025979182682931423,0.4987607002258301],"used":true,"bodyHandle":2.154e-321,"linearSpeed":5.296294170549533e-11,"pendingImpulse":null},{"position":[-0.33255645632743835,0.18524695932865143,0.6702439188957214],"rotation":[0.11910314112901688,-0.0027173704002052546,-0.9928758144378662,-0.0021622551139444113],"used":true,"bodyHandle":2.16e-321,"linearSpeed":1.8890225686563848e-7,"pendingImpulse":null},{"position":[0.059058573096990585,0.22167396545410156,0.6367270946502686],"rotation":[0.003740561893209815,-0.6627885103225708,0.002097062999382615,0.7487943768501282],"used":true,"bodyHandle":2.164e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5156935453414917,0.17421172559261322,0.5518329739570618],"rotation":[-0.0028775788377970457,0.10329800099134445,0.0006303105619736016,0.9946460723876953],"used":true,"bodyHandle":2.17e-321,"linearSpeed":1.8570602920809458e-10,"pendingImpulse":null},{"position":[-0.518596351146698,0.1796962320804596,0.5507396459579468],"rotation":[0.0043090819381177425,0.8915016055107117,0.00030090464861132205,0.4529968202114105],"used":true,"bodyHandle":2.174e-321,"linearSpeed":3.865829280433457e-9,"pendingImpulse":null},{"position":[-0.0013584954431280494,0.22324725985527039,0.6691816449165344],"rotation":[-0.004713178146630526,-0.7625099420547485,0.01532791368663311,0.6467776894569397],"used":true,"bodyHandle":2.18e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.00028785562608391047,0.22467558085918427,0.6007822751998901],"rotation":[-0.013616989366710186,-0.30131739377975464,-0.011226890608668327,0.9533605575561523],"used":true,"bodyHandle":2.184e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5989723205566406,0.1745809018611908,0.44609126448631287],"rotation":[-0.014112597331404686,-0.9976725578308105,0.004575892351567745,-0.06655269116163254],"used":true,"bodyHandle":2.19e-321,"linearSpeed":4.875587046514668e-11,"pendingImpulse":null},{"position":[0.06128956004977226,0.2236851453781128,0.6353824138641357],"rotation":[0.003869985230267048,-0.17783504724502563,0.003424015361815691,0.9840466976165771],"used":true,"bodyHandle":2.194e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.059150293469429016,0.22426365315914154,0.7039215564727783],"rotation":[-0.0005898519302718341,0.2525559961795807,-0.00888524018228054,0.9675412774085999],"used":true,"bodyHandle":2.2e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.001156384707428515,0.2244945764541626,0.7402680516242981],"rotation":[-0.000944777624681592,-0.7537492513656616,0.00017455189663451165,0.65716153383255],"used":true,"bodyHandle":2.204e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05986056849360466,0.22418226301670074,0.7048290967941284],"rotation":[-0.007079240866005421,-0.7938657402992249,-0.005183747038245201,-0.6080296635627747],"used":true,"bodyHandle":2.21e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.06157800555229187,0.2229657769203186,0.6345256567001343],"rotation":[0.0076794857159256935,-0.9852800369262695,-0.004114558920264244,0.1707259565591812],"used":true,"bodyHandle":2.213e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0011226529022678733,0.22422939538955688,0.6723698377609253],"rotation":[0.013579740189015865,-0.23763646185398102,0.005951430182904005,-0.9712410569190979],"used":true,"bodyHandle":2.22e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.001497947727330029,0.22659684717655182,0.6011499762535095],"rotation":[0.0019457465969026089,0.31873995065689087,-0.011677867732942104,-0.9477682709693909],"used":true,"bodyHandle":2.223e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.497872918844223,0.18013907968997955,0.7621722221374512],"rotation":[-0.001183479791507125,0.1618051528930664,-0.0012215205933898687,0.9868212342262268],"used":true,"bodyHandle":2.23e-321,"linearSpeed":2.163520919356844e-8,"pendingImpulse":null},{"position":[0.5574325919151306,0.18393096327781677,0.7619600296020508],"rotation":[-0.049916286021471024,0.7078390717506409,-0.018216239288449287,0.7043722867965698],"used":true,"bodyHandle":2.233e-321,"linearSpeed":2.872097115142968e-7,"pendingImpulse":null},{"position":[-0.06343872100114822,0.2254743129014969,0.6308615207672119],"rotation":[0.008918431587517262,-0.9744077324867249,-0.006692280527204275,0.22451119124889374],"used":true,"bodyHandle":2.24e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0593959204852581,0.22672171890735626,0.7073085308074951],"rotation":[-0.00670197606086731,-0.42459604144096375,-0.0008916408405639231,-0.9053575992584229],"used":true,"bodyHandle":2.243e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.3720828592777252,0.19132819771766663,0.4845815598964691],"rotation":[0.30101141333580017,0.012205920182168484,-0.9535424113273621,-0.00007572676986455917],"used":true,"bodyHandle":2.25e-321,"linearSpeed":0.000018153355704045402,"pendingImpulse":null},{"position":[-0.0007733178790658712,0.2261890172958374,0.7399335503578186],"rotation":[-0.008144835941493511,-0.8452757000923157,0.0018211186397820711,0.5342652201652527],"used":true,"bodyHandle":2.253e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.33069556951522827,0.17839589715003967,0.737026035785675],"rotation":[0.05109215900301933,-0.6518891453742981,-0.03345808759331703,0.7558509707450867],"used":true,"bodyHandle":2.26e-321,"linearSpeed":1.8372838009807238e-7,"pendingImpulse":null},{"position":[0.06116243451833725,0.22626248002052307,0.7052532434463501],"rotation":[-0.004882138688117266,-0.09613759815692902,-0.006288283038884401,0.9953361749649048],"used":true,"bodyHandle":2.263e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5560278296470642,0.18544016778469086,0.5046132206916809],"rotation":[0.8698074221611023,0.0015237361658364534,0.49337491393089294,0.0037333564832806587],"used":true,"bodyHandle":2.27e-321,"linearSpeed":3.3837981435040223e-8,"pendingImpulse":null},{"position":[0.05999786779284477,0.2266409546136856,0.6357406377792358],"rotation":[-0.008607818745076656,0.8678492903709412,0.00823245756328106,0.4966847896575928],"used":true,"bodyHandle":2.273e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.4553335905075073,0.1748385727405548,0.8375966548919678],"rotation":[0.9957302808761597,-0.00017291263793595135,0.09230496734380722,-0.0009494086261838675],"used":true,"bodyHandle":2.28e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.002356482669711113,0.22747480869293213,0.6690747141838074],"rotation":[-0.013326935470104218,-0.7450892925262451,0.011863712221384048,0.6667259335517883],"used":true,"bodyHandle":2.283e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.00008702391642145813,0.22990141808986664,0.5992708802223206],"rotation":[0.0024059126153588295,-0.715846598148346,0.011869549751281738,0.698152482509613],"used":true,"bodyHandle":2.288e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05756520479917526,0.2293345034122467,0.6369255185127258],"rotation":[-0.0014301053015515208,0.947395384311676,0.0036866087466478348,0.32004109025001526],"used":true,"bodyHandle":2.29e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05946650728583336,0.22885103523731232,0.7042710185050964],"rotation":[-0.003864926751703024,-0.7844275832176208,-0.005077298264950514,0.6201875805854797],"used":true,"bodyHandle":2.297e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.02433870919048786,0.1803516000509262,0.8205065131187439],"rotation":[0.5009933114051819,0.03334301337599754,0.859847903251648,-0.09249633550643921],"used":true,"bodyHandle":2.3e-321,"linearSpeed":3.884599416202027e-13,"pendingImpulse":null},{"position":[0.0008479418465867639,0.22849610447883606,0.740905225276947],"rotation":[0.0021534613333642483,-0.954423189163208,0.007834305055439472,-0.2983459532260895],"used":true,"bodyHandle":2.307e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05935182049870491,0.22955024242401123,0.7075474858283997],"rotation":[-0.007789418566972017,-0.9884843826293945,-0.003392748534679413,-0.15108422935009003],"used":true,"bodyHandle":2.31e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05004804581403732,0.18064479529857635,0.8309593200683594],"rotation":[-0.8488566875457764,-0.07189157605171204,-0.5194587707519531,0.06660748273134232],"used":true,"bodyHandle":2.317e-321,"linearSpeed":2.9878689508795677e-13,"pendingImpulse":null},{"position":[-0.061498139053583145,0.22835272550582886,0.6350442171096802],"rotation":[-0.008013195358216763,-0.7340715527534485,-0.00972211267799139,-0.6789552569389343],"used":true,"bodyHandle":2.32e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0005343853263184428,0.2300264537334442,0.672672688961029],"rotation":[0.02191142365336418,-0.06255946308374405,0.007212191354483366,-0.9977745413780212],"used":true,"bodyHandle":2.327e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0004559439548756927,0.2324148267507553,0.6015149354934692],"rotation":[-0.0028109538834542036,0.9071018099784851,-0.004786033183336258,-0.4208746552467346],"used":true,"bodyHandle":2.33e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.061056818813085556,0.2618057131767273,0.7049313187599182],"rotation":[-0.00685575557872653,-0.668228805065155,0.005468172021210194,-0.7439041137695312],"used":true,"bodyHandle":2.337e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.4676412045955658,0.17801539599895477,0.7152087092399597],"rotation":[0.050366614013910294,0.6567104458808899,-0.027188271284103394,-0.75196772813797],"used":true,"bodyHandle":2.34e-321,"linearSpeed":0.0000022868681228226022,"pendingImpulse":null},{"position":[0.4051600694656372,0.1892443746328354,0.4531252086162567],"rotation":[-0.09533973038196564,-0.05032411590218544,-0.0529455728828907,-0.9927610158920288],"used":true,"bodyHandle":2.347e-321,"linearSpeed":0.00002065846621076938,"pendingImpulse":null},{"position":[-0.061893150210380554,0.23072880506515503,0.6344423294067383],"rotation":[0.0025129325222223997,-0.8963437676429749,-0.004124737344682217,-0.44333356618881226],"used":true,"bodyHandle":2.35e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.06003075838088989,0.2312249094247818,0.7057603597640991],"rotation":[-0.0030353637412190437,-0.9852545261383057,0.0007185345748439431,-0.17106638848781586],"used":true,"bodyHandle":2.357e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.4426119327545166,0.1966085433959961,0.5280925631523132],"rotation":[-0.37449347972869873,0.06192425265908241,0.9250916838645935,0.011193531565368176],"used":true,"bodyHandle":2.36e-321,"linearSpeed":4.282431277501841e-7,"pendingImpulse":null},{"position":[0.5179139375686646,0.18574382364749908,0.5072565674781799],"rotation":[-0.4448253810405731,-0.003640592796728015,0.895609974861145,-0.00014614243991672993],"used":true,"bodyHandle":2.367e-321,"linearSpeed":1.085638740710185e-8,"pendingImpulse":null},{"position":[-0.43761199712753296,0.20139265060424805,0.6211963295936584],"rotation":[-0.6052798628807068,0.6029407382011414,0.3666481375694275,0.36833128333091736],"used":true,"bodyHandle":2.37e-321,"linearSpeed":0.0010196105981530607,"pendingImpulse":null},{"position":[-0.26245200634002686,0.184782937169075,0.7770511507987976],"rotation":[-0.14747489988803864,0.0051116375252604485,-0.9890239834785461,-0.007519251201301813],"used":true,"bodyHandle":2.376e-321,"linearSpeed":7.501362290981248e-8,"pendingImpulse":null},{"position":[-0.00039173284312710166,0.23217052221298218,0.739401638507843],"rotation":[-0.00863628089427948,-0.9620395302772522,0.0024760656524449587,0.2727622389793396],"used":true,"bodyHandle":2.38e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.19164077937602997,0.1746443659067154,0.8234304785728455],"rotation":[-0.6569579243659973,0.001204845728352666,0.7539182901382446,-0.003460845910012722],"used":true,"bodyHandle":2.386e-321,"linearSpeed":1.0712624057755699e-11,"pendingImpulse":null},{"position":[0.41395893692970276,0.17651717364788055,0.5946614742279053],"rotation":[-0.27366623282432556,-0.032683536410331726,0.961051881313324,-0.020444320514798164],"used":true,"bodyHandle":2.39e-321,"linearSpeed":0.00007357559624834322,"pendingImpulse":null},{"position":[0.060407061129808426,0.2310589700937271,0.704355001449585],"rotation":[-0.011110419407486916,-0.029958058148622513,-0.006788722239434719,0.9994663596153259],"used":true,"bodyHandle":2.396e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.36241304874420166,0.17470572888851166,0.643968403339386],"rotation":[0.00037547393003478646,0.268476665019989,0.0016483779763802886,-0.9632846713066101],"used":true,"bodyHandle":2.4e-321,"linearSpeed":4.525647467030519e-13,"pendingImpulse":null},{"position":[0.4783371686935425,0.1797066032886505,0.5589737892150879],"rotation":[0.0052296556532382965,0.0529148168861866,-0.0013753847451880574,0.9985843896865845],"used":true,"bodyHandle":2.406e-321,"linearSpeed":4.5863531165408987e-7,"pendingImpulse":null},{"position":[0.13847987353801727,0.17959316074848175,0.7975119948387146],"rotation":[0.2972791790962219,-0.001374799176119268,0.9547814130783081,-0.003946560900658369],"used":true,"bodyHandle":2.41e-321,"linearSpeed":7.838342314523163e-9,"pendingImpulse":null},{"position":[0.05992990732192993,0.2315399944782257,0.6362434029579163],"rotation":[0.0010787518694996834,0.8643217086791992,0.03575315326452255,0.5016656517982483],"used":true,"bodyHandle":2.416e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.42222005128860474,0.17415963113307953,0.5279806852340698],"rotation":[0.0037292425986379385,0.8737926483154297,0.0030202334746718407,-0.4862750470638275],"used":true,"bodyHandle":2.42e-321,"linearSpeed":7.131573706896637e-11,"pendingImpulse":null},{"position":[-0.2694036066532135,0.18290530145168304,0.6837844252586365],"rotation":[0.002980886260047555,-0.5334829092025757,-0.042692407965660095,0.8447273969650269],"used":true,"bodyHandle":2.426e-321,"linearSpeed":2.4873839225232707e-7,"pendingImpulse":null},{"position":[0.3265805244445801,0.17432725429534912,0.5955466628074646],"rotation":[-0.8953230381011963,-0.0021864408627152443,-0.44539618492126465,-0.0037586423568427563],"used":true,"bodyHandle":2.43e-321,"linearSpeed":1.1033543860446133e-11,"pendingImpulse":null},{"position":[0.0006501615862362087,0.2325996458530426,0.6687564849853516],"rotation":[-0.02801324427127838,-0.46211346983909607,0.0069836340844631195,0.886350691318512],"used":true,"bodyHandle":2.436e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.2936290502548218,0.17402999103069305,0.6445404291152954],"rotation":[-0.9539461135864258,-0.0025518767070025206,0.2999425530433655,0.0038274084217846394],"used":true,"bodyHandle":2.44e-321,"linearSpeed":7.552970969719871e-9,"pendingImpulse":null},{"position":[0.0005047674058005214,0.23339369893074036,0.6011499166488647],"rotation":[-0.011253304779529572,-0.07915856689214706,0.007516560144722462,0.9967701435089111],"used":true,"bodyHandle":2.446e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.47462958097457886,0.17907187342643738,0.6103332042694092],"rotation":[-0.8364840149879456,-0.020325923338532448,0.546912431716919,0.027713634073734283],"used":true,"bodyHandle":2.45e-321,"linearSpeed":0.000026765375374980592,"pendingImpulse":null},{"position":[0.061028312891721725,0.23413340747356415,0.6356914639472961],"rotation":[-0.010973409749567509,0.9037373065948486,-0.011441848240792751,0.42779386043548584],"used":true,"bodyHandle":2.456e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.060247838497161865,0.2332182675600052,0.7047684192657471],"rotation":[-0.013731750659644604,0.18776024878025055,-0.007712118793278933,0.9820886850357056],"used":true,"bodyHandle":2.46e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.19828996062278748,0.18010251224040985,0.7934959530830383],"rotation":[0.7360895276069641,-0.001239292323589325,-0.6768770217895508,0.0028426588978618383],"used":true,"bodyHandle":2.465e-321,"linearSpeed":7.360778065728275e-9,"pendingImpulse":null},{"position":[-0.0004955773474648595,0.2339143604040146,0.739793062210083],"rotation":[-0.008062575943768024,-0.9997087717056274,0.011360141448676586,0.01970270834863186],"used":true,"bodyHandle":2.47e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.058949340134859085,0.23467542231082916,0.7072876691818237],"rotation":[-0.002925387118011713,-0.5082162618637085,0.004388795699924231,-0.8612133264541626],"used":true,"bodyHandle":2.475e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.15715070068836212,0.18822965025901794,0.4709556996822357],"rotation":[-0.05228646099567413,-0.6989247798919678,-0.007175134960561991,0.7132452130317688],"used":true,"bodyHandle":2.48e-321,"linearSpeed":0.0007569895243990203,"pendingImpulse":null},{"position":[-0.06255700439214706,0.23401866853237152,0.6351124048233032],"rotation":[-0.006931839510798454,-0.3822825849056244,-0.004017409402877092,-0.9240107536315918],"used":true,"bodyHandle":2.485e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.5255664587020874,0.17437151074409485,0.4790957272052765],"rotation":[-0.9311676621437073,-0.0018146185902878642,-0.36457595229148865,0.002776222536340356],"used":true,"bodyHandle":2.49e-321,"linearSpeed":1.9535950883989959e-10,"pendingImpulse":null},{"position":[-0.5158631801605225,0.17470121383666992,0.6788135170936584],"rotation":[0.0020096132066100836,0.26879534125328064,0.0008555284002795815,-0.9631947875022888],"used":true,"bodyHandle":2.495e-321,"linearSpeed":8.267466518376509e-8,"pendingImpulse":null},{"position":[-0.5022391080856323,0.17415107786655426,0.4150042235851288],"rotation":[-0.4803203046321869,0.0012861542636528611,0.877078115940094,-0.00497955409809947],"used":true,"bodyHandle":2.5e-321,"linearSpeed":1.2288872752370384e-11,"pendingImpulse":null},{"position":[0.2966107428073883,0.1857629418373108,0.5686749219894409],"rotation":[0.45465654134750366,-0.00009829425835050642,0.8906665444374084,-0.0006687208078801632],"used":true,"bodyHandle":2.505e-321,"linearSpeed":3.477045721176775e-9,"pendingImpulse":null},{"position":[-0.3271888494491577,0.17442677915096283,0.7479742765426636],"rotation":[-0.3201109766960144,0.003012188011780381,0.9473751783370972,0.0003538328455761075],"used":true,"bodyHandle":2.51e-321,"linearSpeed":6.740922641959452e-10,"pendingImpulse":null},{"position":[-0.18336796760559082,0.1888425499200821,0.5761885046958923],"rotation":[0.9972832798957825,0.012844652868807316,0.054737433791160583,-0.04759015515446663],"used":true,"bodyHandle":2.515e-321,"linearSpeed":5.47809332666101e-7,"pendingImpulse":null},{"position":[-0.17680959403514862,0.18903961777687073,0.6402822136878967],"rotation":[0.8318626284599304,-0.020532658323645592,-0.5538285970687866,-0.029270971193909645],"used":true,"bodyHandle":2.52e-321,"linearSpeed":0.0000012320824759099257,"pendingImpulse":null},{"position":[-0.12970876693725586,0.19173045456409454,0.44901546835899353],"rotation":[0.0017955503426492214,0.569122314453125,-0.02690553478896618,0.8218106031417847],"used":true,"bodyHandle":2.525e-321,"linearSpeed":0.0000889216172865172,"pendingImpulse":null},{"position":[-0.0020180160645395517,0.2351941466331482,0.668955385684967],"rotation":[0.021787885576486588,0.21684378385543823,-0.0023953306954354048,-0.9759601950645447],"used":true,"bodyHandle":2.53e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.5174307823181152,0.17443816363811493,0.4026905298233032],"rotation":[-0.9192526340484619,-0.0002671154506970197,0.39366236329078674,0.0020876487251371145],"used":true,"bodyHandle":2.535e-321,"linearSpeed":1.7711663555919448e-12,"pendingImpulse":null},{"position":[-0.00020289882377255708,0.23739154636859894,0.5990311503410339],"rotation":[0.007959473878145218,0.4835702180862427,-0.0073016248643398285,-0.8752388954162598],"used":true,"bodyHandle":2.54e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5003314018249512,0.17952969670295715,0.4094901978969574],"rotation":[-0.4125813841819763,0.003300586249679327,0.9109058976173401,-0.004017417319118977],"used":true,"bodyHandle":2.544e-321,"linearSpeed":1.2117844087737313e-9,"pendingImpulse":null},{"position":[-0.061445627361536026,0.2362683266401291,0.6348534822463989],"rotation":[-0.008851534686982632,-0.619032621383667,-0.0012778558302670717,-0.7853142619132996],"used":true,"bodyHandle":2.55e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05940796807408333,0.2368573397397995,0.7054229378700256],"rotation":[0.0006509918603114784,-0.835473358631134,0.00471832137554884,-0.5495103597640991],"used":true,"bodyHandle":2.554e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.43392330408096313,0.1796291023492813,0.5151377320289612],"rotation":[-0.01470943819731474,-0.004090243484824896,0.9998810887336731,0.0021465630270540714],"used":true,"bodyHandle":2.56e-321,"linearSpeed":1.530727949420455e-8,"pendingImpulse":null},{"position":[-0.16810952126979828,0.17404800653457642,0.7023577690124512],"rotation":[0.0014885551063343883,0.7598631978034973,-0.004657873883843422,-0.6500645279884338],"used":true,"bodyHandle":2.564e-321,"linearSpeed":1.0477474811010476e-8,"pendingImpulse":null},{"position":[0.15534083545207977,0.17418064177036285,0.7209651470184326],"rotation":[0.33272796869277954,-0.002031223615631461,0.9430205225944519,-0.0004829523677472025],"used":true,"bodyHandle":2.57e-321,"linearSpeed":2.8776458756862732e-11,"pendingImpulse":null},{"position":[-0.3259398341178894,0.18021756410598755,0.7489869594573975],"rotation":[0.001293854438699782,0.9607884883880615,-0.0036758710630238056,0.27725473046302795],"used":true,"bodyHandle":2.574e-321,"linearSpeed":1.2687186450643603e-8,"pendingImpulse":null},{"position":[0.30466988682746887,0.17905956506729126,0.6506305932998657],"rotation":[-0.9959198236465454,0.004234935622662306,0.08893492072820663,0.014711514115333557],"used":true,"bodyHandle":2.58e-321,"linearSpeed":4.082125701123795e-7,"pendingImpulse":null},{"position":[0.00022904539946466684,0.23653385043144226,0.7392521500587463],"rotation":[-0.0016902572242543101,-0.8771276473999023,0.016684355214238167,-0.47996440529823303],"used":true,"bodyHandle":2.584e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.2893870174884796,0.18867629766464233,0.4133155643939972],"rotation":[0.03044252283871174,-0.2215425968170166,-0.04439518600702286,-0.9736637473106384],"used":true,"bodyHandle":2.59e-321,"linearSpeed":2.3180457845767174e-7,"pendingImpulse":null},{"position":[-0.059295542538166046,0.25811412930488586,0.7051836252212524],"rotation":[0.02471883036196232,0.33694741129875183,-0.006413152441382408,-0.9411770701408386],"used":true,"bodyHandle":2.594e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.47084662318229675,0.18652579188346863,0.6188820600509644],"rotation":[-0.34682580828666687,0.03984307497739792,0.9293675422668457,-0.12000126391649246],"used":true,"bodyHandle":2.6e-321,"linearSpeed":0.0000023958364235300975,"pendingImpulse":null},{"position":[0.2765082120895386,0.1833326667547226,0.7631327509880066],"rotation":[-0.04017360135912895,0.1606937050819397,-0.03307236731052399,0.9856316447257996],"used":true,"bodyHandle":2.604e-321,"linearSpeed":9.135987047935364e-7,"pendingImpulse":null},{"position":[0.3661397397518158,0.17420221865177155,0.5498886704444885],"rotation":[0.548119306564331,-0.0028679389506578445,-0.8363900184631348,0.002963661914691329],"used":true,"bodyHandle":2.61e-321,"linearSpeed":1.9368447048272408e-11,"pendingImpulse":null},{"position":[-0.3511548638343811,0.19339898228645325,0.34980982542037964],"rotation":[0.11271633207798004,-0.21894049644470215,0.008981678634881973,-0.9691643118858337],"used":true,"bodyHandle":2.614e-321,"linearSpeed":9.118589398471544e-8,"pendingImpulse":null},{"position":[0.2674177587032318,0.1741664558649063,0.7003049850463867],"rotation":[0.0036568099167197943,-0.8783836364746094,-0.00005720213448512368,-0.47794222831726074],"used":true,"bodyHandle":2.62e-321,"linearSpeed":2.272487493940921e-10,"pendingImpulse":null},{"position":[0.061439286917448044,0.2363280951976776,0.7023308277130127],"rotation":[0.024760138243436813,0.13399364054203033,-0.015644004568457603,0.9905493259429932],"used":true,"bodyHandle":2.623e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05882377177476883,0.23701463639736176,0.6363860964775085],"rotation":[-0.0014853447210043669,0.029201235622167587,0.004373353905975819,0.9995629191398621],"used":true,"bodyHandle":2.63e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.11434991657733917,0.17444558441638947,0.7615845203399658],"rotation":[0.001361035741865635,-0.6590730547904968,0.0034857946448028088,-0.7520696520805359],"used":true,"bodyHandle":2.633e-321,"linearSpeed":2.82722560330908e-11,"pendingImpulse":null},{"position":[-0.1628185361623764,0.1839008629322052,0.8091243505477905],"rotation":[-0.2849966883659363,0.05792529508471489,0.9567614793777466,0.0053884475491940975],"used":true,"bodyHandle":2.64e-321,"linearSpeed":3.060295986889683e-7,"pendingImpulse":null},{"position":[-0.26698535680770874,0.1782592535018921,0.6534350514411926],"rotation":[0.05350092798471451,0.618318498134613,0.027341056615114212,0.7836276888847351],"used":true,"bodyHandle":2.643e-321,"linearSpeed":1.8185730185917e-7,"pendingImpulse":null},{"position":[-0.4604176878929138,0.17475377023220062,0.3730301260948181],"rotation":[-0.46627098321914673,-0.0015958851436153054,-0.8846405148506165,-0.00021956139244139194],"used":true,"bodyHandle":2.65e-321,"linearSpeed":2.6593850908175367e-10,"pendingImpulse":null},{"position":[-0.10908109694719315,0.17474903166294098,0.8207789659500122],"rotation":[-0.5787984132766724,-0.0018732284661382437,-0.8154680728912354,-0.000808997021522373],"used":true,"bodyHandle":2.653e-321,"linearSpeed":7.726764256024798e-12,"pendingImpulse":null},{"position":[-0.3239077627658844,0.1747700721025467,0.8180466294288635],"rotation":[0.0019649057649075985,-0.8258387446403503,0.00039033161010593176,-0.563902735710144],"used":true,"bodyHandle":2.66e-321,"linearSpeed":7.931832555866333e-10,"pendingImpulse":null},{"position":[0.5163040161132812,0.18021300435066223,0.39914724230766296],"rotation":[-0.0771317258477211,-0.0008553738589398563,0.9970203638076782,-0.0005390064907260239],"used":true,"bodyHandle":2.663e-321,"linearSpeed":1.1049740370058048e-11,"pendingImpulse":null},{"position":[-0.27559253573417664,0.1791638731956482,0.7810265421867371],"rotation":[0.663850724697113,0.001950340811163187,-0.7478368878364563,-0.006195825058966875],"used":true,"bodyHandle":2.67e-321,"linearSpeed":3.3046387130315984e-8,"pendingImpulse":null},{"position":[-0.11812131851911545,0.18017297983169556,0.7596133351325989],"rotation":[-0.005184642039239407,-0.7164677381515503,0.0021936537232249975,0.6975975036621094],"used":true,"bodyHandle":2.673e-321,"linearSpeed":3.1453713156629303e-10,"pendingImpulse":null},{"position":[-0.45771411061286926,0.1819540411233902,0.5476465821266174],"rotation":[-0.803972601890564,0.006360197439789772,-0.5938558578491211,0.030376262962818146],"used":true,"bodyHandle":2.68e-321,"linearSpeed":2.262237662181433e-7,"pendingImpulse":null},{"position":[0.46491411328315735,0.17434082925319672,0.43140435218811035],"rotation":[-0.1570204645395279,-0.0008752711582928896,0.9875916242599487,0.002565860515460372],"used":true,"bodyHandle":2.683e-321,"linearSpeed":1.2764446141565737e-10,"pendingImpulse":null},{"position":[0.1666025072336197,0.1857258677482605,0.793005645275116],"rotation":[-0.0052084773778915405,0.9578120708465576,0.00047704612370580435,0.28734782338142395],"used":true,"bodyHandle":2.69e-321,"linearSpeed":1.4713948165417996e-8,"pendingImpulse":null},{"position":[-0.22953566908836365,0.18835383653640747,0.8067532777786255],"rotation":[0.009914754889905453,0.028534846380352974,-0.9988664388656616,-0.0367853082716465],"used":true,"bodyHandle":2.693e-321,"linearSpeed":1.6300863096015879e-7,"pendingImpulse":null},{"position":[-0.34475693106651306,0.1916998326778412,0.40039780735969543],"rotation":[0.33615249395370483,-0.012776407413184643,0.9416602253913879,-0.010692602023482323],"used":true,"bodyHandle":2.7e-321,"linearSpeed":1.8229833697892644e-7,"pendingImpulse":null},{"position":[-0.0019175003981217742,0.23793207108974457,0.6717307567596436],"rotation":[-0.026101233437657356,-0.697161853313446,0.01458105631172657,0.7162900567054749],"used":true,"bodyHandle":2.703e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.017010627314448357,0.18932512402534485,0.3299477994441986],"rotation":[0.5454105138778687,-0.016797911375761032,0.8376020193099976,-0.025844544172286987],"used":true,"bodyHandle":2.707e-321,"linearSpeed":3.605107967166544e-7,"pendingImpulse":null},{"position":[0.2782147526741028,0.17771470546722412,0.7659298777580261],"rotation":[-0.02857930213212967,0.45078182220458984,-0.045176729559898376,0.8910319805145264],"used":true,"bodyHandle":2.71e-321,"linearSpeed":1.6039317303624633e-7,"pendingImpulse":null},{"position":[0.3308185040950775,0.1747484654188156,0.8131087422370911],"rotation":[-0.5917509198188782,0.0004998589283786714,-0.806118369102478,-0.0019383133621886373],"used":true,"bodyHandle":2.717e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.5156416296958923,0.18948185443878174,0.5527470707893372],"rotation":[-0.04161909967660904,0.2784898281097412,-0.05660263076424599,-0.9578661322593689],"used":true,"bodyHandle":2.72e-321,"linearSpeed":3.026857214523722e-8,"pendingImpulse":null},{"position":[-0.26652929186820984,0.17464280128479004,0.7168282866477966],"rotation":[0.0017492111073806882,0.98258376121521,0.0013764736941084266,-0.18580687046051025],"used":true,"bodyHandle":2.727e-321,"linearSpeed":2.0478893112763087e-11,"pendingImpulse":null},{"position":[-0.4786148965358734,0.1864047348499298,0.5468876957893372],"rotation":[-0.015413251705467701,0.9687087535858154,0.016745107248425484,0.24715478718280792],"used":true,"bodyHandle":2.73e-321,"linearSpeed":5.747096371253613e-8,"pendingImpulse":null},{"position":[0.14582763612270355,0.17957842350006104,0.7289682626724243],"rotation":[0.8080679774284363,0.0010948025155812502,0.5890880227088928,-0.0005293494905345142],"used":true,"bodyHandle":2.737e-321,"linearSpeed":5.639419210452347e-9,"pendingImpulse":null},{"position":[0.43572914600372314,0.18520648777484894,0.5085887908935547],"rotation":[-0.0012881251750513911,-0.5007616877555847,-0.0003490678791422397,-0.8655841946601868],"used":true,"bodyHandle":2.74e-321,"linearSpeed":1.830100538921122e-8,"pendingImpulse":null},{"position":[0.09926709532737732,0.17416878044605255,0.5580042004585266],"rotation":[-0.7806156277656555,0.0017191976075991988,-0.6250088810920715,0.00044084122055210173],"used":true,"bodyHandle":2.747e-321,"linearSpeed":3.755049506341071e-9,"pendingImpulse":null},{"position":[-0.32541948556900024,0.17963998019695282,0.6809037923812866],"rotation":[-0.319791704416275,0.0026112759951502085,0.9474804997444153,0.0026597001124173403],"used":true,"bodyHandle":2.75e-321,"linearSpeed":4.079492781289494e-8,"pendingImpulse":null},{"position":[0.4714091122150421,0.17982597649097443,0.4400608241558075],"rotation":[0.004211516585201025,0.6592815518379211,0.0003371351631358266,0.7518842220306396],"used":true,"bodyHandle":2.757e-321,"linearSpeed":2.0369252350441197e-8,"pendingImpulse":null},{"position":[-0.00003958809611503966,0.2393137812614441,0.5975635647773743],"rotation":[-0.0005081857088953257,0.6329978108406067,0.005409343633800745,0.7741344571113586],"used":true,"bodyHandle":2.76e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.14042241871356964,0.18391281366348267,0.5809645652770996],"rotation":[0.02478010021150112,0.03334733471274376,-0.9990173578262329,-0.015436661429703236],"used":true,"bodyHandle":2.767e-321,"linearSpeed":6.253007151037476e-8,"pendingImpulse":null},{"position":[-0.3188377916812897,0.1741851270198822,0.6895776987075806],"rotation":[-0.9304341077804565,0.0029076484497636557,0.36644744873046875,-0.0003753472992684692],"used":true,"bodyHandle":2.77e-321,"linearSpeed":2.1209530457237393e-10,"pendingImpulse":null},{"position":[0.43660780787467957,0.19071896374225616,0.5206897854804993],"rotation":[-0.002660585567355156,-0.41263189911842346,-0.0031550098210573196,-0.9108884930610657],"used":true,"bodyHandle":2.777e-321,"linearSpeed":1.5068391259098146e-8,"pendingImpulse":null},{"position":[-0.20754466950893402,0.177720308303833,0.6962621808052063],"rotation":[-0.7982105016708374,-0.03344722464680672,0.6000400185585022,-0.04114861041307449],"used":true,"bodyHandle":2.78e-321,"linearSpeed":0.0000050337939182634545,"pendingImpulse":null},{"position":[0.1412886083126068,0.1851346641778946,0.7354944944381714],"rotation":[0.0012550678802654147,0.6286078691482544,0.00051594473188743,-0.7777212262153625],"used":true,"bodyHandle":2.787e-321,"linearSpeed":4.961939073998775e-9,"pendingImpulse":null},{"position":[0.2409925013780594,0.18630701303482056,0.7124882340431213],"rotation":[0.591627299785614,-0.021958548575639725,-0.8058933019638062,-0.0055546946823596954],"used":true,"bodyHandle":2.79e-321,"linearSpeed":2.2713635251051402e-7,"pendingImpulse":null},{"position":[0.4671740233898163,0.17470836639404297,0.36991918087005615],"rotation":[-0.00032178795663639903,0.08555617928504944,0.0015874899690970778,0.9963319897651672],"used":true,"bodyHandle":2.796e-321,"linearSpeed":1.2701523685978127e-13,"pendingImpulse":null},{"position":[0.3526461720466614,0.17396220564842224,0.490856409072876],"rotation":[-0.0883786678314209,0.0040601505897939205,0.9960780739784241,0.0010946596739813685],"used":true,"bodyHandle":2.8e-321,"linearSpeed":4.1412915485765354e-9,"pendingImpulse":null},{"position":[0.06102122366428375,0.23891757428646088,0.6359999775886536],"rotation":[-0.006888007279485464,0.6717469692230225,0.010930951684713364,0.740667998790741],"used":true,"bodyHandle":2.806e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.09659696370363235,0.17899633944034576,0.5604418516159058],"rotation":[0.004162113182246685,-0.5288770794868469,-0.002345704473555088,0.8486849665641785],"used":true,"bodyHandle":2.81e-321,"linearSpeed":1.918162871918625e-7,"pendingImpulse":null},{"position":[-0.45538851618766785,0.17711150646209717,0.5420248508453369],"rotation":[0.03302592411637306,-0.2867080569267273,-0.0010481163626536727,0.9574480056762695],"used":true,"bodyHandle":2.816e-321,"linearSpeed":1.0866536357242947e-7,"pendingImpulse":null},{"position":[0.4065825343132019,0.1740323305130005,0.4204194247722626],"rotation":[-0.006340376101434231,-0.8091579675674438,-0.0025429679080843925,-0.5875514149665833],"used":true,"bodyHandle":2.82e-321,"linearSpeed":7.204730254013388e-10,"pendingImpulse":null},{"position":[0.2678075134754181,0.17959874868392944,0.7023916840553284],"rotation":[0.5032742619514465,-0.0004720064753200859,-0.8641238212585449,0.0021788764279335737],"used":true,"bodyHandle":2.826e-321,"linearSpeed":6.193501748951227e-8,"pendingImpulse":null},{"position":[-0.3286443054676056,0.17460845410823822,0.6314181685447693],"rotation":[0.9978104829788208,0.0014374254969879985,0.0661093071103096,-0.0013198786182329059],"used":true,"bodyHandle":2.83e-321,"linearSpeed":6.710218611663682e-11,"pendingImpulse":null},{"position":[0.16635671257972717,0.17391963303089142,0.5460192561149597],"rotation":[-0.010201792232692242,-0.8052745461463928,-0.006154780741780996,-0.5927822589874268],"used":true,"bodyHandle":2.836e-321,"linearSpeed":9.431382841953703e-11,"pendingImpulse":null},{"position":[0.3064005672931671,0.17994683980941772,0.5341750383377075],"rotation":[-0.23748695850372314,0.0010428167879581451,-0.9713874459266663,0.0023029993753880262],"used":true,"bodyHandle":2.84e-321,"linearSpeed":6.125907551473511e-10,"pendingImpulse":null},{"position":[0.13062453269958496,0.18871332705020905,0.49340853095054626],"rotation":[0.9945194721221924,-0.06457582116127014,0.06342541426420212,0.052326418459415436],"used":true,"bodyHandle":2.846e-321,"linearSpeed":1.3553039365344933e-7,"pendingImpulse":null},{"position":[0.2165403962135315,0.1769377738237381,0.7333275675773621],"rotation":[-0.022869722917675972,0.3280980885028839,-0.03536996245384216,0.9437041878700256],"used":true,"bodyHandle":2.85e-321,"linearSpeed":3.7518493777680186e-8,"pendingImpulse":null},{"position":[0.23713283240795135,0.17427672445774078,0.4597947895526886],"rotation":[0.004525783006101847,-0.8300323486328125,-0.0007853832794353366,0.5576962828636169],"used":true,"bodyHandle":2.856e-321,"linearSpeed":2.1897751102489245e-9,"pendingImpulse":null},{"position":[-0.2281682789325714,0.1743461787700653,0.8160563111305237],"rotation":[-0.0003353031352162361,-0.6189426183700562,-0.0002609534130897373,0.7854360342025757],"used":true,"bodyHandle":2.86e-321,"linearSpeed":6.189390482829654e-11,"pendingImpulse":null},{"position":[0.41118454933166504,0.18001672625541687,0.44289547204971313],"rotation":[0.0003040484734810889,-0.27148526906967163,-0.0008122033905237913,-0.9624422192573547],"used":true,"bodyHandle":2.866e-321,"linearSpeed":5.378402945709477e-7,"pendingImpulse":null},{"position":[-0.39586156606674194,0.17731089890003204,0.5294191837310791],"rotation":[0.9414350390434265,-4.674366209656e-7,-0.3337039053440094,0.04839136078953743],"used":true,"bodyHandle":2.87e-321,"linearSpeed":8.34813007115041e-8,"pendingImpulse":null},{"position":[-0.4711720943450928,0.18115809559822083,0.6405404806137085],"rotation":[-0.025864064693450928,-0.9081183075904846,-0.07210291177034378,-0.41164711117744446],"used":true,"bodyHandle":2.875e-321,"linearSpeed":0.000040694749515247285,"pendingImpulse":null},{"position":[0.4128681421279907,0.17469200491905212,0.46842512488365173],"rotation":[-0.5241713523864746,0.0030086033511906862,-0.8515982627868652,0.003968928474932909],"used":true,"bodyHandle":2.88e-321,"linearSpeed":1.4825697287837608e-7,"pendingImpulse":null},{"position":[0.192373588681221,0.17966097593307495,0.6096509695053101],"rotation":[-0.009174756705760956,-0.9984939694404602,-0.0020411713048815727,0.05405069515109062],"used":true,"bodyHandle":2.885e-321,"linearSpeed":1.0346701625630618e-7,"pendingImpulse":null},{"position":[-0.3379354178905487,0.19059419631958008,0.49872887134552],"rotation":[-0.0012539599556475878,-0.49009183049201965,-0.006147812586277723,0.8716481924057007],"used":true,"bodyHandle":2.89e-321,"linearSpeed":1.3469402832880696e-8,"pendingImpulse":null},{"position":[0.3690246641635895,0.17979313433170319,0.5485464334487915],"rotation":[-0.000862983288243413,-0.7569342851638794,0.0014548006001859903,0.6534887552261353],"used":true,"bodyHandle":2.895e-321,"linearSpeed":1.8273205148299831e-9,"pendingImpulse":null},{"position":[-0.23440958559513092,0.17979823052883148,0.823516845703125],"rotation":[0.6112329363822937,0.0017849410651251674,-0.791439950466156,0.003721589455381036],"used":true,"bodyHandle":2.9e-321,"linearSpeed":1.1592725342482742e-8,"pendingImpulse":null},{"position":[0.2916778326034546,0.18018168210983276,0.47463154792785645],"rotation":[0.005542007740586996,-0.37472379207611084,0.00016723568842280656,0.9271199107170105],"used":true,"bodyHandle":2.905e-321,"linearSpeed":7.774782630558739e-11,"pendingImpulse":null},{"position":[-0.12587055563926697,0.18483848869800568,0.41537371277809143],"rotation":[0.003886539489030838,0.5228272676467896,-0.00799645483493805,0.8523921966552734],"used":true,"bodyHandle":2.91e-321,"linearSpeed":0.000001008641616895565,"pendingImpulse":null},{"position":[0.06583452969789505,0.18918289244174957,0.5078076720237732],"rotation":[0.0001383651833748445,-0.31867238879203796,0.04483264312148094,0.9468040466308594],"used":true,"bodyHandle":2.915e-321,"linearSpeed":0.000002554923505595286,"pendingImpulse":null},{"position":[0.06497614830732346,0.19483742117881775,0.5077208280563354],"rotation":[-0.04472367838025093,0.8921946883201599,0.00675933575257659,0.4493805468082428],"used":true,"bodyHandle":2.92e-321,"linearSpeed":0.000004119897587895444,"pendingImpulse":null},{"position":[0.36591091752052307,0.1742333173751831,0.3765885531902313],"rotation":[0.1977432370185852,-0.0003227024571970105,0.9802461862564087,-0.0038499082438647747],"used":true,"bodyHandle":2.925e-321,"linearSpeed":1.8049004789206287e-11,"pendingImpulse":null},{"position":[0.18132391571998596,0.1740514636039734,0.47855132818222046],"rotation":[-0.9348373413085938,-0.00006039825893822126,-0.35507091879844666,-0.0019341999432072043],"used":true,"bodyHandle":2.93e-321,"linearSpeed":3.790904919680741e-10,"pendingImpulse":null},{"position":[0.24294903874397278,0.18007461726665497,0.5107985734939575],"rotation":[-0.0037453623954206705,0.9447208642959595,-0.0010649902978911996,0.3278525471687317],"used":true,"bodyHandle":2.935e-321,"linearSpeed":1.7903493493313937e-8,"pendingImpulse":null},{"position":[-0.14397522807121277,0.17471085488796234,0.6327338814735413],"rotation":[0.0016070310957729816,-0.7568037509918213,0.0005942955031059682,0.6536398530006409],"used":true,"bodyHandle":2.94e-321,"linearSpeed":1.7666057450075922e-8,"pendingImpulse":null},{"position":[0.1353287398815155,0.17467749118804932,0.604961097240448],"rotation":[-0.5318645238876343,-0.0016080085188150406,-0.8468264937400818,0.0015343648847192526],"used":true,"bodyHandle":2.945e-321,"linearSpeed":8.054797273501772e-10,"pendingImpulse":null},{"position":[-0.1802792251110077,0.18485869467258453,0.5055235624313354],"rotation":[-0.004564284346997738,-0.6347984671592712,0.014944136142730713,-0.7725197076797485],"used":true,"bodyHandle":2.95e-321,"linearSpeed":0.000011858033884925865,"pendingImpulse":null},{"position":[0.19718700647354126,0.1742016226053238,0.616550087928772],"rotation":[-0.8137808442115784,0.0014465806307271123,-0.5811694264411926,-0.0008907064911909401],"used":true,"bodyHandle":2.955e-321,"linearSpeed":2.723686457435544e-10,"pendingImpulse":null},{"position":[0.3547762632369995,0.17941392958164215,0.4909544289112091],"rotation":[0.3447202742099762,-0.00068720179842785,-0.9387040138244629,-0.0014742137864232063],"used":true,"bodyHandle":2.96e-321,"linearSpeed":9.149689301094488e-7,"pendingImpulse":null},{"position":[-0.39511242508888245,0.18318283557891846,0.5317352414131165],"rotation":[-0.03254791349172592,0.9411719441413879,-0.03995382413268089,0.3339754343032837],"used":true,"bodyHandle":2.964e-321,"linearSpeed":1.909153465546428e-7,"pendingImpulse":null},{"position":[0.20699813961982727,0.17438331246376038,0.6750748157501221],"rotation":[-0.0027844200376421213,-0.5041832327842712,0.001443070825189352,0.8635909557342529],"used":true,"bodyHandle":2.97e-321,"linearSpeed":1.2369476782005175e-9,"pendingImpulse":null},{"position":[-0.32178112864494324,0.17426374554634094,0.5728802680969238],"rotation":[0.00435362383723259,-0.6289680600166321,0.003963585011661053,-0.77740877866745],"used":true,"bodyHandle":2.974e-321,"linearSpeed":2.0446855940200427e-9,"pendingImpulse":null},{"position":[0.18871772289276123,0.17944197356700897,0.4844268262386322],"rotation":[0.0009158003958873451,-0.8994430899620056,0.001556533039547503,-0.4370342195034027],"used":true,"bodyHandle":2.98e-321,"linearSpeed":2.011082563922479e-7,"pendingImpulse":null},{"position":[0.1269906908273697,0.17958782613277435,0.5038690567016602],"rotation":[0.0017752634594216943,-0.7356253862380981,0.0033040863927453756,0.6773781180381775],"used":true,"bodyHandle":2.984e-321,"linearSpeed":2.0052313818842428e-7,"pendingImpulse":null},{"position":[-0.1746729463338852,0.17408980429172516,0.4847126305103302],"rotation":[-0.9324596524238586,0.00318556884303689,-0.36123543977737427,-0.0042179422453045845],"used":true,"bodyHandle":2.99e-321,"linearSpeed":1.0116360552801093e-8,"pendingImpulse":null},{"position":[0.20098894834518433,0.18770526349544525,0.3526248633861542],"rotation":[-0.038596756756305695,0.3483341634273529,-0.013465325348079205,0.9364786148071289],"used":true,"bodyHandle":2.994e-321,"linearSpeed":3.6110098210672475e-8,"pendingImpulse":null},{"position":[0.34790244698524475,0.17968052625656128,0.3728344440460205],"rotation":[-0.9862278699874878,0.0011999733978882432,0.16538380086421967,0.001176841207779944],"used":true,"bodyHandle":3e-321,"linearSpeed":1.885249007186704e-9,"pendingImpulse":null},{"position":[-0.24200551211833954,0.17747600376605988,0.5790420174598694],"rotation":[-0.04760101065039635,-0.44326043128967285,-0.01251427736133337,0.8950405716896057],"used":true,"bodyHandle":3.004e-321,"linearSpeed":3.856798808425899e-8,"pendingImpulse":null},{"position":[0.530361533164978,0.17907391488552094,0.7079026699066162],"rotation":[0.905415952205658,0.0053905313834548,-0.42152389883995056,-0.050104040652513504],"used":true,"bodyHandle":3.01e-321,"linearSpeed":7.552903942068463e-8,"pendingImpulse":null},{"position":[0.3370794653892517,0.1740371286869049,0.43340376019477844],"rotation":[0.6781507134437561,0.004334101919084787,0.7349086403846741,0.0014373435406014323],"used":true,"bodyHandle":3.014e-321,"linearSpeed":6.60049265143418e-10,"pendingImpulse":null},{"position":[-0.48670923709869385,0.1865048110485077,0.6394566297531128],"rotation":[0.057983238250017166,0.561410129070282,0.05578219145536423,0.8236169815063477],"used":true,"bodyHandle":3.02e-321,"linearSpeed":0.000036686946798957724,"pendingImpulse":null},{"position":[0.32781991362571716,0.18491584062576294,0.42781519889831543],"rotation":[-0.7871646881103516,0.0009871036745607853,0.6166617274284363,-0.009953191503882408],"used":true,"bodyHandle":3.024e-321,"linearSpeed":5.541519976911558e-8,"pendingImpulse":null},{"position":[-0.3388226330280304,0.1739274561405182,0.5067915916442871],"rotation":[-0.7336491942405701,0.000684272323269397,0.6795249581336975,0.0020525739528238773],"used":true,"bodyHandle":3.03e-321,"linearSpeed":1.140800841256995e-12,"pendingImpulse":null},{"position":[0.3412639796733856,0.1794583648443222,0.4331069588661194],"rotation":[0.004054548684507608,-0.9530673027038574,0.006668932735919952,-0.3026577830314636],"used":true,"bodyHandle":3.034e-321,"linearSpeed":4.107368558423331e-8,"pendingImpulse":null},{"position":[-0.29389557242393494,0.18551389873027802,0.5397905707359314],"rotation":[0.47112876176834106,-0.0014627045020461082,-0.8820626735687256,-0.0009250981383956969],"used":true,"bodyHandle":3.04e-321,"linearSpeed":0.0000031551136652322687,"pendingImpulse":null},{"position":[-0.11886917799711227,0.18004269897937775,0.5793502926826477],"rotation":[-0.0013196690706536174,0.7503867745399475,-0.00024248933186754584,0.6609975695610046],"used":true,"bodyHandle":3.043e-321,"linearSpeed":5.4387405069629135e-8,"pendingImpulse":null},{"position":[0.25623461604118347,0.1800815612077713,0.5675625801086426],"rotation":[-0.5361040830612183,-0.0006036777631379664,0.8441218733787537,0.007100249640643597],"used":true,"bodyHandle":3.05e-321,"linearSpeed":6.0471255282124e-10,"pendingImpulse":null},{"position":[0.20189644396305084,0.17414359748363495,0.40413686633110046],"rotation":[0.35020577907562256,-0.006877976469695568,-0.9366461634635925,0.0015827215975150466],"used":true,"bodyHandle":3.053e-321,"linearSpeed":2.5666017005280564e-8,"pendingImpulse":null},{"position":[-0.48864230513572693,0.19120724499225616,0.6462881565093994],"rotation":[-0.06545176357030869,0.723064661026001,0.049186524003744125,-0.685911238193512],"used":true,"bodyHandle":3.06e-321,"linearSpeed":0.00005958320716390711,"pendingImpulse":null},{"position":[0.0663529708981514,0.17921726405620575,0.5081998705863953],"rotation":[-0.9692921042442322,-0.0023994208313524723,0.24583403766155243,-0.0057220133021473885],"used":true,"bodyHandle":3.063e-321,"linearSpeed":1.3794652476521208e-7,"pendingImpulse":null},{"position":[0.1473587155342102,0.18012675642967224,0.6638416647911072],"rotation":[-0.001302998629398644,0.983877420425415,-0.002442591590806842,-0.1788226068019867],"used":true,"bodyHandle":3.07e-321,"linearSpeed":1.249331004781331e-8,"pendingImpulse":null},{"position":[0.2850091755390167,0.17993943393230438,0.41404053568840027],"rotation":[-0.23235554993152618,-0.0014459058875218034,0.9726297855377197,-0.00006979766476433724],"used":true,"bodyHandle":3.073e-321,"linearSpeed":1.1344230931098492e-8,"pendingImpulse":null},{"position":[0.25838130712509155,0.18067483603954315,0.6372801661491394],"rotation":[0.0657273605465889,-0.1592479944229126,-0.09248121082782745,-0.9806973338127136],"used":true,"bodyHandle":3.08e-321,"linearSpeed":0.00015124373513943795,"pendingImpulse":null},{"position":[0.20250587165355682,0.1795629858970642,0.39584437012672424],"rotation":[0.021257199347019196,-0.1914081871509552,0.005665184929966927,-0.9812638759613037],"used":true,"bodyHandle":3.083e-321,"linearSpeed":5.0085358982858747e-8,"pendingImpulse":null},{"position":[-0.07105495780706406,0.18525007367134094,0.4810796082019806],"rotation":[-0.0027111677918583155,-0.6487223505973816,0.0022913182619959116,0.761016845703125],"used":true,"bodyHandle":3.09e-321,"linearSpeed":0.0000012043516701222092,"pendingImpulse":null},{"position":[-0.39514365792274475,0.1904611587524414,0.4709790050983429],"rotation":[-0.731911301612854,0.008294657804071903,-0.6813377141952515,-0.003995424602180719],"used":true,"bodyHandle":3.093e-321,"linearSpeed":0.0000010646274008267266,"pendingImpulse":null},{"position":[-0.3791593909263611,0.1740463674068451,0.5652704238891602],"rotation":[-0.007405901327729225,0.20410417020320892,-0.00220901845023036,0.9789186120033264],"used":true,"bodyHandle":3.1e-321,"linearSpeed":1.8374156358441666e-11,"pendingImpulse":null},{"position":[-0.05938020721077919,0.26078200340270996,0.7053477764129639],"rotation":[0.02859596349298954,0.13922454416751862,-0.0008233740227296948,-0.9898475408554077],"used":true,"bodyHandle":3.103e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.060541387647390366,0.23930136859416962,0.7050238251686096],"rotation":[0.008544688113033772,-0.03045704960823059,-0.008769095875322819,0.9994610548019409],"used":true,"bodyHandle":3.11e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.21769464015960693,0.18734845519065857,0.617400050163269],"rotation":[-0.07347515225410461,0.2023453563451767,0.06075841560959816,-0.9746620655059814],"used":true,"bodyHandle":3.113e-321,"linearSpeed":0.00003146942841199351,"pendingImpulse":null},{"position":[-0.20955981314182281,0.1832316666841507,0.6963403224945068],"rotation":[-0.1599067896604538,-0.020767932757735252,-0.9857154488563538,0.0486161969602108],"used":true,"bodyHandle":3.12e-321,"linearSpeed":0.0000035825637574473655,"pendingImpulse":null},{"position":[-0.00006867769116070122,0.23887999355793,0.7386485934257507],"rotation":[-0.0010817309375852346,-0.9091495871543884,0.011465227231383324,-0.416310578584671],"used":true,"bodyHandle":3.122e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.20492064952850342,0.17401669919490814,0.7649396061897278],"rotation":[-0.004436511546373367,-0.9129292964935303,0.0029065932612866163,0.40808331966400146],"used":true,"bodyHandle":3.127e-321,"linearSpeed":3.575814160705134e-12,"pendingImpulse":null},{"position":[0.25394538044929504,0.17438097298145294,0.7995991706848145],"rotation":[-0.005925058387219906,-0.1595701426267624,-0.0030578766018152237,0.9871640801429749],"used":true,"bodyHandle":3.13e-321,"linearSpeed":1.7368747465299909e-9,"pendingImpulse":null},{"position":[0.46756047010421753,0.1741778403520584,0.49028274416923523],"rotation":[0.0025355766993016005,0.6003002524375916,-0.001814505667425692,0.7997685670852661],"used":true,"bodyHandle":3.137e-321,"linearSpeed":4.442830642388994e-10,"pendingImpulse":null},{"position":[0.48727864027023315,0.185464009642601,0.5580769777297974],"rotation":[0.0017427692655473948,-0.6552509069442749,-0.004787108860909939,0.7553941011428833],"used":true,"bodyHandle":3.14e-321,"linearSpeed":1.343052629898814e-7,"pendingImpulse":null},{"position":[0.1479727327823639,0.1744212955236435,0.6625250577926636],"rotation":[0.0023993337526917458,-0.7095770835876465,0.00045834018965251744,-0.7046235203742981],"used":true,"bodyHandle":3.147e-321,"linearSpeed":1.4248508366070972e-10,"pendingImpulse":null},{"position":[0.20669326186180115,0.18408048152923584,0.379641592502594],"rotation":[0.8381690979003906,0.020162353292107582,0.5440613627433777,0.03260689228773117],"used":true,"bodyHandle":3.15e-321,"linearSpeed":6.418883398899197e-8,"pendingImpulse":null},{"position":[-0.06692162156105042,0.17413024604320526,0.5409173369407654],"rotation":[0.00235960865393281,-0.9505329728126526,0.0006510782986879349,0.3106139600276947],"used":true,"bodyHandle":3.157e-321,"linearSpeed":0.000006867170082639103,"pendingImpulse":null},{"position":[0.18698982894420624,0.19029387831687927,0.46041974425315857],"rotation":[0.009022064507007599,-0.782681941986084,0.012795199640095234,-0.6222249269485474],"used":true,"bodyHandle":3.16e-321,"linearSpeed":0.0000011381157383975192,"pendingImpulse":null},{"position":[-0.18143486976623535,0.1829656958580017,0.5783277750015259],"rotation":[-0.0217474102973938,-0.7156118154525757,-0.04446391388773918,-0.6967422366142273],"used":true,"bodyHandle":3.167e-321,"linearSpeed":3.625846052403661e-7,"pendingImpulse":null},{"position":[-0.12162315100431442,0.179804727435112,0.5163970589637756],"rotation":[-0.6817761659622192,-0.007809387054294348,0.7315140962600708,0.0027232144493609667],"used":true,"bodyHandle":3.17e-321,"linearSpeed":0.000007011093977133507,"pendingImpulse":null},{"position":[0.37381625175476074,0.18480952084064484,0.39117756485939026],"rotation":[-0.017357762902975082,0.13514918088912964,0.08222560584545135,-0.9872549176216125],"used":true,"bodyHandle":3.177e-321,"linearSpeed":2.104653717681676e-7,"pendingImpulse":null},{"position":[-0.3971652090549469,0.1847289800643921,0.4676666557788849],"rotation":[-0.49313730001449585,0.006124046165496111,-0.869913637638092,-0.005323088727891445],"used":true,"bodyHandle":3.18e-321,"linearSpeed":0.0000014251877473660843,"pendingImpulse":null},{"position":[-0.4015142321586609,0.17934589087963104,0.47013893723487854],"rotation":[-0.0015337445074692369,-0.9590104222297668,-0.0024318897631019354,0.2833561599254608],"used":true,"bodyHandle":3.187e-321,"linearSpeed":2.7237447906632855e-7,"pendingImpulse":null},{"position":[-0.12246967107057571,0.1742393523454666,0.5121539235115051],"rotation":[-0.7654001712799072,-0.004548631142824888,0.6435289978981018,0.0034913644194602966],"used":true,"bodyHandle":3.19e-321,"linearSpeed":6.045855781162106e-8,"pendingImpulse":null},{"position":[-0.17613601684570312,0.17905309796333313,0.4865983724594116],"rotation":[-0.013122733682394028,0.00025611367891542614,-0.9998754262924194,-0.00877288170158863],"used":true,"bodyHandle":3.197e-321,"linearSpeed":0.000004725908750859577,"pendingImpulse":null},{"position":[0.14869791269302368,0.1844821274280548,0.4316352605819702],"rotation":[0.0023828160483390093,0.11782725155353546,0.018725495785474777,-0.992854654788971],"used":true,"bodyHandle":3.2e-321,"linearSpeed":0.0000022729941092778156,"pendingImpulse":null},{"position":[-0.5005123019218445,0.18544872105121613,0.47364702820777893],"rotation":[0.07814952731132507,-0.005406227428466082,-0.9969183206558228,0.004154026508331299],"used":true,"bodyHandle":3.206e-321,"linearSpeed":3.6926621465812335e-8,"pendingImpulse":null},{"position":[-0.14667971432209015,0.1797076016664505,0.7024532556533813],"rotation":[-0.6757513880729675,-0.0022800168953835964,-0.73709636926651,-0.006609377916902304],"used":true,"bodyHandle":3.21e-321,"linearSpeed":0.000002551999162606653,"pendingImpulse":null},{"position":[-0.4447108507156372,0.1821412593126297,0.42963525652885437],"rotation":[-0.12251782417297363,-0.6308943033218384,0.021853044629096985,0.7658226490020752],"used":true,"bodyHandle":3.216e-321,"linearSpeed":1.137700659626519e-7,"pendingImpulse":null},{"position":[0.12900960445404053,0.17386755347251892,0.4280158281326294],"rotation":[-0.876532256603241,0.0007562298560515046,-0.48133161664009094,-0.003250231733545661],"used":true,"bodyHandle":3.22e-321,"linearSpeed":1.6593561063245335e-8,"pendingImpulse":null},{"position":[0.2798795700073242,0.17426808178424835,0.41905295848846436],"rotation":[-0.32167837023735046,0.001050079707056284,-0.9468472599983215,0.0014726294903084636],"used":true,"bodyHandle":3.226e-321,"linearSpeed":4.713883326160321e-10,"pendingImpulse":null},{"position":[0.030081355944275856,0.19571475684642792,0.24996165931224823],"rotation":[-0.7504196763038635,0.005858246237039566,-0.6603073477745056,0.028812609612941742],"used":true,"bodyHandle":3.23e-321,"linearSpeed":1.1266109054817008e-7,"pendingImpulse":null},{"position":[-0.06791960448026657,0.18528205156326294,0.5419611930847168],"rotation":[-0.5470772981643677,-0.0029006267432123423,0.8370659351348877,-0.004306019749492407],"used":true,"bodyHandle":3.236e-321,"linearSpeed":0.000042891941900204316,"pendingImpulse":null},{"position":[0.0568869411945343,0.18411026895046234,0.4465864300727844],"rotation":[0.00114257144741714,-0.028169073164463043,-0.07626461982727051,-0.996688961982727],"used":true,"bodyHandle":3.24e-321,"linearSpeed":0.00006687538667911401,"pendingImpulse":null},{"position":[-0.38840317726135254,0.17421893775463104,0.4044540822505951],"rotation":[-0.5380969047546387,0.001972701633349061,0.842868983745575,-0.004431527107954025],"used":true,"bodyHandle":3.246e-321,"linearSpeed":1.1729177250928244e-9,"pendingImpulse":null},{"position":[0.24896873533725739,0.1742275059223175,0.36874356865882874],"rotation":[0.9218855500221252,0.0015987401129677892,0.3874587118625641,-0.00043476230348460376],"used":true,"bodyHandle":3.25e-321,"linearSpeed":1.2351065149786883e-9,"pendingImpulse":null},{"position":[-0.38734909892082214,0.17970289289951324,0.40095391869544983],"rotation":[-0.3620297312736511,0.003983064088970423,0.9321523308753967,-0.0032517777290195227],"used":true,"bodyHandle":3.256e-321,"linearSpeed":2.8895803417665193e-8,"pendingImpulse":null},{"position":[0.02040824480354786,0.20140939950942993,0.39911699295043945],"rotation":[-0.6933812499046326,0.12920783460140228,-0.13070601224899292,0.6967378258705139],"used":true,"bodyHandle":3.26e-321,"linearSpeed":2.7432879573842957e-8,"pendingImpulse":null},{"position":[-0.06603222340345383,0.18527290225028992,0.4174799919128418],"rotation":[-0.498041033744812,-0.00448601646348834,-0.8671402931213379,0.001682525733485818],"used":true,"bodyHandle":3.266e-321,"linearSpeed":0.000009414944584191116,"pendingImpulse":null},{"position":[-0.07137274742126465,0.17414939403533936,0.48106569051742554],"rotation":[0.0015835217200219631,0.7146652936935425,-0.0037329853512346745,-0.6994548439979553],"used":true,"bodyHandle":3.27e-321,"linearSpeed":7.650706131046928e-9,"pendingImpulse":null},{"position":[0.08449260890483856,0.18838953971862793,0.38353922963142395],"rotation":[0.662140429019928,0.035769734531641006,0.7476105690002441,-0.03699980303645134],"used":true,"bodyHandle":3.276e-321,"linearSpeed":1.3842230942843589e-7,"pendingImpulse":null},{"position":[-0.32190513610839844,0.17871102690696716,0.2937493920326233],"rotation":[0.8774684071540833,0.01677812822163105,-0.4778416156768799,-0.03788232058286667],"used":true,"bodyHandle":3.28e-321,"linearSpeed":4.013140994544493e-9,"pendingImpulse":null},{"position":[-0.36723610758781433,0.18625633418560028,0.37927305698394775],"rotation":[0.9983432292938232,0.013098844327032566,0.05457153171300888,-0.012698435224592686],"used":true,"bodyHandle":3.286e-321,"linearSpeed":6.186478590263287e-8,"pendingImpulse":null},{"position":[0.1948331594467163,0.1835787445306778,0.5484868288040161],"rotation":[0.0300357174128294,0.9979181289672852,0.033109571784734726,-0.04648619517683983],"used":true,"bodyHandle":3.29e-321,"linearSpeed":2.805398003313583e-7,"pendingImpulse":null},{"position":[-0.35285988450050354,0.17653408646583557,0.3512936234474182],"rotation":[0.9889222979545593,0.030928783118724823,-0.14404980838298798,0.018044937402009964],"used":true,"bodyHandle":3.295e-321,"linearSpeed":3.445883956233643e-8,"pendingImpulse":null},{"position":[0.3083464503288269,0.17679674923419952,0.26232028007507324],"rotation":[0.7625778317451477,0.0007289400091394782,0.6468959450721741,0.00031707395100966096],"used":true,"bodyHandle":3.3e-321,"linearSpeed":7.290664261043446e-12,"pendingImpulse":null},{"position":[-0.07084783911705017,0.17955279350280762,0.4809871315956116],"rotation":[-0.06204014644026756,0.0031309672631323338,0.9980685710906982,-0.00061623944202438],"used":true,"bodyHandle":3.305e-321,"linearSpeed":5.396171536742591e-7,"pendingImpulse":null},{"position":[-0.1269836723804474,0.1740517020225525,0.4500638246536255],"rotation":[-0.0015772219048812985,-0.8556869626045227,0.005186261143535376,-0.517465353012085],"used":true,"bodyHandle":3.31e-321,"linearSpeed":1.7605417785289736e-8,"pendingImpulse":null},{"position":[-0.202914297580719,0.17923758924007416,0.6354210376739502],"rotation":[0.9923794269561768,-0.016126589849591255,-0.12189184874296188,-0.008083213120698929],"used":true,"bodyHandle":3.315e-321,"linearSpeed":2.75786400735822e-7,"pendingImpulse":null},{"position":[-0.29314571619033813,0.1763601005077362,0.2614924907684326],"rotation":[-0.004210194107145071,0.6740036010742188,0.003338996786624193,-0.73870849609375],"used":true,"bodyHandle":3.32e-321,"linearSpeed":3.5730736457586074e-10,"pendingImpulse":null},{"position":[-0.06571198254823685,0.17411459982395172,0.4213220477104187],"rotation":[-0.0023216605186462402,0.9398214221000671,0.001004289835691452,0.3416565954685211],"used":true,"bodyHandle":3.325e-321,"linearSpeed":1.2113159990504415e-8,"pendingImpulse":null},{"position":[0.21974331140518188,0.18892554938793182,0.28755488991737366],"rotation":[0.6361578106880188,-0.012155963107943535,-0.7714625000953674,0.0010848206002265215],"used":true,"bodyHandle":3.33e-321,"linearSpeed":6.24921410655953e-10,"pendingImpulse":null},{"position":[0.03456136956810951,0.17471034824848175,0.33997517824172974],"rotation":[-0.001641768030822277,0.002187998965382576,0.00025808217469602823,-0.9999961853027344],"used":true,"bodyHandle":3.335e-321,"linearSpeed":1.1513483522872349e-10,"pendingImpulse":null},{"position":[-0.06897971779108047,0.17918278276920319,0.30449751019477844],"rotation":[0.0006228034617379308,-0.962433397769928,-0.053513456135988235,-0.2661914527416229],"used":true,"bodyHandle":3.34e-321,"linearSpeed":6.992459970702892e-8,"pendingImpulse":null},{"position":[-0.2899602949619293,0.1884380429983139,0.34411460161209106],"rotation":[-0.3587169051170349,0.031716808676719666,0.9329071640968323,0.0006465897313319147],"used":true,"bodyHandle":3.345e-321,"linearSpeed":4.71140047706688e-7,"pendingImpulse":null},{"position":[0.09303762018680573,0.18157504498958588,0.32703638076782227],"rotation":[0.7292752265930176,-0.022732097655534744,0.6835903525352478,-0.018574325367808342],"used":true,"bodyHandle":3.35e-321,"linearSpeed":2.2589440732583585e-9,"pendingImpulse":null},{"position":[-0.17498183250427246,0.18350689113140106,0.3795611560344696],"rotation":[0.025172600522637367,-0.8025982975959778,-0.007444839924573898,-0.595941960811615],"used":true,"bodyHandle":3.355e-321,"linearSpeed":1.652014825961409e-8,"pendingImpulse":null},{"position":[0.09921060502529144,0.18716959655284882,0.32467707991600037],"rotation":[-0.29920679330825806,-0.024996669963002205,0.9537414908409119,0.015085234306752682],"used":true,"bodyHandle":3.36e-321,"linearSpeed":2.2124301592367257e-8,"pendingImpulse":null},{"position":[-0.27148786187171936,0.17424486577510834,0.41230902075767517],"rotation":[-0.4847089946269989,0.00047051339060999453,0.8746739625930786,-0.0015270415460690856],"used":true,"bodyHandle":3.365e-321,"linearSpeed":2.2151633631911628e-10,"pendingImpulse":null},{"position":[-0.3202313780784607,0.17351266741752625,0.3775666654109955],"rotation":[-0.8894594311714172,-0.010723626241087914,-0.4568808972835541,0.0025895056314766407],"used":true,"bodyHandle":3.37e-321,"linearSpeed":1.8650563972117126e-9,"pendingImpulse":null},{"position":[0.04765187203884125,0.17580775916576385,0.2802313566207886],"rotation":[-0.0024921030271798372,-0.6614103317260742,-0.002514444524422288,-0.7500158548355103],"used":true,"bodyHandle":3.374e-321,"linearSpeed":1.0337307774737319e-8,"pendingImpulse":null},{"position":[0.3261391818523407,0.18244343996047974,0.2975870370864868],"rotation":[-0.0003981575428042561,-0.012746067717671394,0.004585000686347485,-0.9999082088470459],"used":true,"bodyHandle":3.38e-321,"linearSpeed":4.56714142644632e-9,"pendingImpulse":null},{"position":[0.02470346726477146,0.20141783356666565,0.39314401149749756],"rotation":[-0.6948224902153015,0.12211709469556808,-0.1237075999379158,0.6978578567504883],"used":true,"bodyHandle":3.384e-321,"linearSpeed":3.9216155539125544e-8,"pendingImpulse":null},{"position":[0.11019571870565414,0.18276360630989075,0.2693674564361572],"rotation":[-0.8464319705963135,-0.0024738754145801067,-0.5324905514717102,0.0008182969759218395],"used":true,"bodyHandle":3.39e-321,"linearSpeed":6.169089825955102e-8,"pendingImpulse":null},{"position":[-0.2272547036409378,0.17440366744995117,0.37199175357818604],"rotation":[-0.0024021819699555635,0.8247211575508118,-0.00005589843567577191,0.5655344128608704],"used":true,"bodyHandle":3.394e-321,"linearSpeed":5.279459394604686e-10,"pendingImpulse":null},{"position":[-0.46518346667289734,0.17968706786632538,0.4648788869380951],"rotation":[-0.005905161611735821,0.2027382105588913,-0.0006733478512614965,0.9792149662971497],"used":true,"bodyHandle":3.4e-321,"linearSpeed":8.305947624592912e-9,"pendingImpulse":null},{"position":[-0.3429586887359619,0.17931820452213287,0.499065637588501],"rotation":[0.0001976694620680064,0.1120770126581192,-0.0063698566518723965,0.9936790466308594],"used":true,"bodyHandle":3.404e-321,"linearSpeed":6.312548177453406e-9,"pendingImpulse":null},{"position":[-0.20708517730236053,0.17397397756576538,0.6347069144248962],"rotation":[-0.000476288580102846,-0.6575717329978943,-0.008083699271082878,0.7533483505249023],"used":true,"bodyHandle":3.41e-321,"linearSpeed":1.341354093093536e-10,"pendingImpulse":null},{"position":[-0.18168805539608002,0.1776336133480072,0.5756502151489258],"rotation":[0.0018079527653753757,0.9311921000480652,0.047533392906188965,0.36141201853752136],"used":true,"bodyHandle":3.414e-321,"linearSpeed":1.3440051171624533e-7,"pendingImpulse":null},{"position":[0.296580970287323,0.1878989338874817,0.6886225938796997],"rotation":[0.32591256499290466,0.03927837684750557,-0.9445618987083435,-0.006401420570909977],"used":true,"bodyHandle":3.42e-321,"linearSpeed":3.535091793717683e-7,"pendingImpulse":null},{"position":[0.21916408836841583,0.18261629343032837,0.7358552813529968],"rotation":[-0.031336475163698196,0.03472768887877464,-0.029910854995250702,0.9984574913978577],"used":true,"bodyHandle":3.424e-321,"linearSpeed":1.6174753525514399e-7,"pendingImpulse":null},{"position":[0.24722923338413239,0.17436112463474274,0.5185045003890991],"rotation":[-0.0021043841261416674,-0.14222995936870575,-0.00025987232220359147,0.9898313283920288],"used":true,"bodyHandle":3.43e-321,"linearSpeed":6.726779399362397e-11,"pendingImpulse":null},{"position":[0.31642216444015503,0.18365830183029175,0.6675822138786316],"rotation":[-0.008735988289117813,0.9236308336257935,0.032652631402015686,-0.3817899227142334],"used":true,"bodyHandle":3.434e-321,"linearSpeed":5.479104846841434e-7,"pendingImpulse":null},{"position":[0.3538535535335541,0.18511052429676056,0.49116063117980957],"rotation":[0.0012209436390548944,0.2154102623462677,-0.0026536460500210524,0.9765192866325378],"used":true,"bodyHandle":3.44e-321,"linearSpeed":0.0000020694650565781132,"pendingImpulse":null},{"position":[0.4154776632785797,0.18645550310611725,0.41421711444854736],"rotation":[0.016070742160081863,0.8287971615791321,0.006293080747127533,0.5592829585075378],"used":true,"bodyHandle":3.444e-321,"linearSpeed":0.0000017406817710339493,"pendingImpulse":null},{"position":[0.17397497594356537,0.17680564522743225,0.20991943776607513],"rotation":[-0.0018164434004575014,-0.5060768723487854,-0.00134085095487535,-0.862485408782959],"used":true,"bodyHandle":3.45e-321,"linearSpeed":3.6846640946251707e-10,"pendingImpulse":null},{"position":[-0.22066234052181244,0.1746934950351715,0.7554123401641846],"rotation":[-0.0010825447971001267,-0.7215183973312378,0.0014551460044458508,-0.6923928260803223],"used":true,"bodyHandle":3.454e-321,"linearSpeed":1.4276832226885016e-8,"pendingImpulse":null},{"position":[-0.27867603302001953,0.17531290650367737,0.33583828806877136],"rotation":[-0.8036376237869263,0.007813331671059132,-0.5949434041976929,0.01215662993490696],"used":true,"bodyHandle":3.46e-321,"linearSpeed":1.743307515740266e-9,"pendingImpulse":null},{"position":[0.0938442200422287,0.17590835690498352,0.32829731702804565],"rotation":[0.9983712434768677,-0.0024708553683012724,-0.049639247357845306,-0.028011342510581017],"used":true,"bodyHandle":3.463e-321,"linearSpeed":1.7630020334528548e-10,"pendingImpulse":null},{"position":[0.03992048650979996,0.1911311149597168,0.231999933719635],"rotation":[0.13219234347343445,-0.020511668175458908,0.9909307956695557,-0.012667384929955006],"used":true,"bodyHandle":3.47e-321,"linearSpeed":3.824401917218311e-7,"pendingImpulse":null},{"position":[-0.015771031379699707,0.1746802031993866,0.37125831842422485],"rotation":[-0.1470736414194107,-0.0014480809913948178,0.9891229867935181,0.0017240161541849375],"used":true,"bodyHandle":3.473e-321,"linearSpeed":5.802025543309031e-10,"pendingImpulse":null},{"position":[0.31885719299316406,0.1854250282049179,0.3560939133167267],"rotation":[-0.0009913836838677526,0.19503739476203918,-0.0022411264944821596,-0.980792760848999],"used":true,"bodyHandle":3.48e-321,"linearSpeed":8.682931448262343e-9,"pendingImpulse":null},{"position":[-0.12598712742328644,0.1736166626214981,0.39113619923591614],"rotation":[-0.2592616379261017,-0.0022444629576057196,-0.9658026695251465,0.0019062793580815196],"used":true,"bodyHandle":3.483e-321,"linearSpeed":5.426358627136887e-10,"pendingImpulse":null},{"position":[-0.2093062400817871,0.17416101694107056,0.4318230152130127],"rotation":[0.002083691069856286,0.1353631317615509,0.00435482757166028,-0.9907842874526978],"used":true,"bodyHandle":3.49e-321,"linearSpeed":0.000001341771877112617,"pendingImpulse":null},{"position":[0.335073322057724,0.17690080404281616,0.3148791491985321],"rotation":[0.6704317927360535,-0.0026919248048216105,0.7419660091400146,0.0005977124674245715],"used":true,"bodyHandle":3.493e-321,"linearSpeed":9.477002803195855e-12,"pendingImpulse":null},{"position":[0.04703383892774582,0.18070198595523834,0.2812098264694214],"rotation":[-0.0033119197469204664,-0.9128577709197998,-0.012832053937017918,-0.40806248784065247],"used":true,"bodyHandle":3.5e-321,"linearSpeed":1.9439769374773362e-7,"pendingImpulse":null},{"position":[-0.24878807365894318,0.1800408661365509,0.39505720138549805],"rotation":[0.3219278156757355,0.0011476604267954826,0.9467575550079346,-0.003348936326801777],"used":true,"bodyHandle":3.503e-321,"linearSpeed":1.5192333514256393e-7,"pendingImpulse":null},{"position":[-0.2898828983306885,0.18277792632579803,0.34497421979904175],"rotation":[-0.8060986399650574,0.026859918609261513,0.5909460783004761,-0.016316359862685204],"used":true,"bodyHandle":3.51e-321,"linearSpeed":3.0355684761355064e-7,"pendingImpulse":null},{"position":[0.11646845191717148,0.1827564388513565,0.20980723202228546],"rotation":[-0.599673867225647,0.003953529521822929,-0.8002343773841858,0.000700358534231782],"used":true,"bodyHandle":3.513e-321,"linearSpeed":5.9475445207573465e-8,"pendingImpulse":null},{"position":[0.11506293714046478,0.17693287134170532,0.2099817842245102],"rotation":[-0.6947959065437317,-0.001327440608292818,0.7192006707191467,0.0027080613654106855],"used":true,"bodyHandle":3.52e-321,"linearSpeed":2.615398243271211e-10,"pendingImpulse":null},{"position":[-0.0025288842152804136,0.1810542345046997,0.230713352560997],"rotation":[0.6785805821418762,-0.020233873277902603,-0.7324008941650391,0.05203656107187271],"used":true,"bodyHandle":3.523e-321,"linearSpeed":2.901221027238493e-7,"pendingImpulse":null},{"position":[0.05729776248335838,0.1861041635274887,0.22202417254447937],"rotation":[-0.8342095017433167,0.0084005082026124,-0.5510315895080566,0.019703112542629242],"used":true,"bodyHandle":3.53e-321,"linearSpeed":0.0000011700557840957856,"pendingImpulse":null},{"position":[-0.013566720299422741,0.1831803172826767,0.20772738754749298],"rotation":[-0.09307540208101273,0.07194894552230835,0.9920511245727539,-0.04466429352760315],"used":true,"bodyHandle":3.533e-321,"linearSpeed":0.000011827259185027143,"pendingImpulse":null},{"position":[-0.10506180673837662,0.24752485752105713,-0.10490570217370987],"rotation":[-0.312161922454834,-0.0015301883686333895,0.9500274062156677,0.0006600954220630229],"used":true,"bodyHandle":3.538e-321,"linearSpeed":0.07909763659432652,"pendingImpulse":null},{"position":[-0.19986936450004578,0.25586169958114624,-0.04607740417122841],"rotation":[0.015898970887064934,0.9836625456809998,-0.04686114564538002,0.17308726906776428],"used":true,"bodyHandle":3.54e-321,"linearSpeed":0.07973683973923121,"pendingImpulse":null},{"position":[0.04871238395571709,0.25250712037086487,-0.15385420620441437],"rotation":[0.0007188572199083865,0.32962027192115784,-0.007275976240634918,-0.9440852403640747],"used":true,"bodyHandle":3.547e-321,"linearSpeed":0.08083759074679071,"pendingImpulse":null},{"position":[-0.21746210753917694,0.2548253536224365,-0.12421562522649765],"rotation":[-0.4238445460796356,0.09385321289300919,-0.897434413433075,0.07847781479358673],"used":true,"bodyHandle":3.55e-321,"linearSpeed":0.07947292746687426,"pendingImpulse":null},{"position":[-0.26995840668678284,0.2524484097957611,-0.02889740839600563],"rotation":[-0.003156481310725212,0.13714097440242767,0.0010392984841018915,0.990545928478241],"used":true,"bodyHandle":3.557e-321,"linearSpeed":0.08136478002266255,"pendingImpulse":null},{"position":[0.16843990981578827,0.25291287899017334,-0.15763401985168457],"rotation":[0.08129244297742844,-0.5713176131248474,-0.028178896754980087,-0.8162068724632263],"used":true,"bodyHandle":3.56e-321,"linearSpeed":0.08048405500264826,"pendingImpulse":null},{"position":[-0.08890687674283981,0.25331372022628784,-0.12348461896181107],"rotation":[0.7302759289741516,-0.001392156700603664,-0.6831508874893188,0.0000830715216579847],"used":true,"bodyHandle":3.567e-321,"linearSpeed":0.07978517218985,"pendingImpulse":null},{"position":[-0.13378386199474335,0.24741420149803162,-0.05035633221268654],"rotation":[0.0012691416777670383,-0.9966683387756348,-0.0018188476096838713,0.0815306082367897],"used":true,"bodyHandle":3.57e-321,"linearSpeed":0.07909165972178085,"pendingImpulse":null},{"position":[-0.2120259553194046,0.25609272718429565,-0.10369588434696198],"rotation":[0.16157281398773193,-0.11284776777029037,0.9789881110191345,-0.05236281454563141],"used":true,"bodyHandle":3.577e-321,"linearSpeed":0.07961837267868227,"pendingImpulse":null},{"position":[0.08424480259418488,0.24740813672542572,-0.09815702587366104],"rotation":[-0.00080338423140347,0.31323322653770447,0.003204264445230365,-0.9496704339981079],"used":true,"bodyHandle":3.58e-321,"linearSpeed":0.07926246160681086,"pendingImpulse":null},{"position":[0.21851861476898193,0.24770833551883698,-0.06324989348649979],"rotation":[-0.000924413267057389,0.9996284246444702,0.0013764597242698073,0.02720746025443077],"used":true,"bodyHandle":3.587e-321,"linearSpeed":0.07890601940636935,"pendingImpulse":null},{"position":[0.047974009066820145,0.24752135574817657,-0.051527705043554306],"rotation":[-0.0011200697626918554,0.6384289264678955,0.0013067804975435138,0.7696787714958191],"used":true,"bodyHandle":3.59e-321,"linearSpeed":0.07918597208902896,"pendingImpulse":null},{"position":[0.2706248462200165,0.2582915127277374,-0.03075491450726986],"rotation":[-0.004359034355729818,-0.9984748363494873,0.003339311806485057,0.054934751242399216],"used":true,"bodyHandle":3.597e-321,"linearSpeed":0.08079162912294727,"pendingImpulse":null},{"position":[-0.2695974111557007,0.2582648694515228,-0.04186982661485672],"rotation":[-0.0011265131179243326,0.14047905802726746,-0.00256775738671422,-0.9900797009468079],"used":true,"bodyHandle":3.6e-321,"linearSpeed":0.08144083915377438,"pendingImpulse":null},{"position":[-0.2029999941587448,0.24721434712409973,-0.1619541198015213],"rotation":[-0.8196631073951721,0.00041535316267982125,-0.572832465171814,0.003889829386025667],"used":true,"bodyHandle":3.607e-321,"linearSpeed":0.07904935309213418,"pendingImpulse":null},{"position":[-0.03167842701077461,0.2587934732437134,-0.15386445820331573],"rotation":[0.6990959644317627,-0.0013362544123083353,0.7150179743766785,0.0035039351787418127],"used":true,"bodyHandle":3.61e-321,"linearSpeed":0.08071927699710535,"pendingImpulse":null},{"position":[-0.2699578106403351,0.25848114490509033,0.020328957587480545],"rotation":[0.613694965839386,-0.00820740032941103,0.7894951701164246,0.0029324854258447886],"used":true,"bodyHandle":3.617e-321,"linearSpeed":0.08152189860040776,"pendingImpulse":null},{"position":[0.17020191252231598,0.258506715297699,-0.09383025765419006],"rotation":[0.005791114643216133,0.8401082158088684,0.0029487614519894123,-0.5423799157142639],"used":true,"bodyHandle":3.62e-321,"linearSpeed":0.0810110902183497,"pendingImpulse":null},{"position":[0.26970374584198,0.25291499495506287,0.02992984838783741],"rotation":[-0.9452568888664246,0.0023723230697214603,-0.32631054520606995,-0.002283889101818204],"used":true,"bodyHandle":3.626e-321,"linearSpeed":0.08021220487672096,"pendingImpulse":null},{"position":[-0.26980751752853394,0.25824931263923645,0.08246315270662308],"rotation":[-0.9320386052131653,0.0010586950229480863,-0.3623340427875519,-0.0041221315041184425],"used":true,"bodyHandle":3.63e-321,"linearSpeed":0.07869155091840113,"pendingImpulse":null},{"position":[-0.1418449431657791,0.24714989960193634,-0.1569698005914688],"rotation":[-0.8576111197471619,0.0022339788265526295,0.5142896175384521,0.0020677042193710804],"used":true,"bodyHandle":3.636e-321,"linearSpeed":0.07907315835974613,"pendingImpulse":null},{"position":[-0.27027684450149536,0.24736584722995758,-0.09006491303443909],"rotation":[-0.8170422315597534,0.0027171175461262465,0.5765712857246399,-0.00010937843762803823],"used":true,"bodyHandle":3.64e-321,"linearSpeed":0.07919046444692561,"pendingImpulse":null},{"position":[0.08482642471790314,0.25310322642326355,-0.09864639490842819],"rotation":[0.0008153971284627914,0.7457564473152161,0.004128590691834688,-0.6662054061889648],"used":true,"bodyHandle":3.646e-321,"linearSpeed":0.08024940446419172,"pendingImpulse":null},{"position":[0.046234264969825745,0.25814658403396606,-0.15369769930839539],"rotation":[-0.734405517578125,-0.002208272460848093,0.6786521673202515,-0.008653122000396252],"used":true,"bodyHandle":3.65e-321,"linearSpeed":0.08101949815916032,"pendingImpulse":null},{"position":[0.270029753446579,0.2531105875968933,-0.0928388312458992],"rotation":[0.0025265286676585674,0.7685069441795349,-0.0008056217920966446,-0.6398358941078186],"used":true,"bodyHandle":3.656e-321,"linearSpeed":0.08050663831428698,"pendingImpulse":null},{"position":[0.21766142547130585,0.2474532425403595,-0.12277394533157349],"rotation":[0.37111273407936096,-0.00024016504175961018,-0.9285581707954407,0.0074170418083667755],"used":true,"bodyHandle":3.66e-321,"linearSpeed":0.07907231603982212,"pendingImpulse":null},{"position":[-0.22926054894924164,0.17695260047912598,0.30389946699142456],"rotation":[0.031016293913125992,-0.2733818292617798,-0.013136573135852814,0.9613156318664551],"used":true,"bodyHandle":3.666e-321,"linearSpeed":4.031238445911258e-9,"pendingImpulse":null},{"position":[-0.1694338619709015,0.17418137192726135,0.35123828053474426],"rotation":[0.006508426740765572,0.15910477936267853,-0.003648158395662904,0.9872335195541382],"used":true,"bodyHandle":3.67e-321,"linearSpeed":9.014866244561317e-9,"pendingImpulse":null},{"position":[-0.12055440247058868,0.1853552609682083,0.34815359115600586],"rotation":[0.03239571303129196,-0.09312532842159271,0.033007875084877014,0.9945796132087708],"used":true,"bodyHandle":3.676e-321,"linearSpeed":0.000015404693429019355,"pendingImpulse":null},{"position":[-0.07367271929979324,0.1886451691389084,0.3130722641944885],"rotation":[0.028929710388183594,-0.10243576020002365,0.013402567245066166,0.9942285418510437],"used":true,"bodyHandle":3.68e-321,"linearSpeed":8.413549628803622e-7,"pendingImpulse":null},{"position":[-0.1254263073205948,0.17656001448631287,0.32927072048187256],"rotation":[0.01663251221179962,-0.07115950435400009,-0.007876669056713581,0.9972951412200928],"used":true,"bodyHandle":3.686e-321,"linearSpeed":6.497900533034268e-9,"pendingImpulse":null},{"position":[-0.01000311691313982,0.17728528380393982,0.301349014043808],"rotation":[0.0002948578039649874,-0.3585750162601471,-0.0015865237219259143,0.9334994554519653],"used":true,"bodyHandle":3.69e-321,"linearSpeed":7.3164632213789656e-9,"pendingImpulse":null},{"position":[0.05139300972223282,0.1848606914281845,0.28127631545066833],"rotation":[0.007362721022218466,0.7140117883682251,0.024452337995171547,0.699667751789093],"used":true,"bodyHandle":3.696e-321,"linearSpeed":4.841973994895824e-7,"pendingImpulse":null},{"position":[0.10539641976356506,0.17694826424121857,0.267625093460083],"rotation":[-0.0003451306838542223,-0.6305292844772339,0.002524705370888114,0.776161253452301],"used":true,"bodyHandle":3.7e-321,"linearSpeed":3.766834136933435e-9,"pendingImpulse":null},{"position":[0.14934802055358887,0.17695313692092896,0.306934118270874],"rotation":[0.005696873180568218,0.27768784761428833,0.0016899885376915336,0.9606529474258423],"used":true,"bodyHandle":3.705e-321,"linearSpeed":1.755142226029423e-10,"pendingImpulse":null},{"position":[0.2598850429058075,0.18535737693309784,0.35492438077926636],"rotation":[-0.004001984838396311,0.08892805874347687,0.0004553317266982049,0.9960299134254456],"used":true,"bodyHandle":3.71e-321,"linearSpeed":7.166567089931478e-9,"pendingImpulse":null},{"position":[0.1444619745016098,0.252936452627182,-0.10133905708789825],"rotation":[-0.00023268502263817936,-0.3158242106437683,-0.00270370626822114,0.9488138556480408],"used":true,"bodyHandle":3.715e-321,"linearSpeed":0.08035821080198725,"pendingImpulse":null},{"position":[-0.2689923346042633,0.25301119685173035,-0.08779260516166687],"rotation":[0.0014231842942535877,0.8362730741500854,0.0005422064568847418,0.5483110547065735],"used":true,"bodyHandle":3.72e-321,"linearSpeed":0.08027191939349035,"pendingImpulse":null},{"position":[-0.03472772240638733,0.2531161308288574,-0.09256034344434738],"rotation":[-0.002440225798636675,-0.5129573345184326,-0.0016035580774769187,0.8584091067314148],"used":true,"bodyHandle":3.725e-321,"linearSpeed":0.0803016524427011,"pendingImpulse":null},{"position":[-0.27008235454559326,0.26354488730430603,-0.15545067191123962],"rotation":[-0.0035058273933827877,0.22754371166229248,-0.006247180514037609,-0.9737414717674255],"used":true,"bodyHandle":3.73e-321,"linearSpeed":0.08194020354499239,"pendingImpulse":null},{"position":[-0.26995283365249634,0.25234025716781616,-0.155281662940979],"rotation":[-0.907210648059845,-0.005900029558688402,0.42062991857528687,-0.00211505894549191],"used":true,"bodyHandle":3.735e-321,"linearSpeed":0.08052417835361904,"pendingImpulse":null},{"position":[0.27033424377441406,0.24742089211940765,-0.09318537265062332],"rotation":[-0.8564442992210388,0.0018692004960030317,0.5162307024002075,-0.002343168016523123],"used":true,"bodyHandle":3.74e-321,"linearSpeed":0.079231132543617,"pendingImpulse":null},{"position":[0.017678100615739822,0.24765454232692719,-0.10321924090385437],"rotation":[-0.002880790503695607,-0.9967178702354431,-0.0001353666593786329,-0.08090205490589142],"used":true,"bodyHandle":3.745e-321,"linearSpeed":0.07907716484743803,"pendingImpulse":null},{"position":[-0.07301049679517746,0.2474641054868698,-0.15475177764892578],"rotation":[0.6888098120689392,-0.0018098001601174474,0.7249387502670288,-0.0012712589232251048],"used":true,"bodyHandle":3.75e-321,"linearSpeed":0.07921485596810264,"pendingImpulse":null},{"position":[-0.04138048365712166,0.24739356338977814,-0.10284807533025742],"rotation":[0.19136179983615875,-0.003678449895232916,-0.9815124869346619,-0.0005709496908821166],"used":true,"bodyHandle":3.755e-321,"linearSpeed":0.07906689274897626,"pendingImpulse":null},{"position":[0.04984110966324806,0.24712389707565308,-0.15363609790802002],"rotation":[-0.7008528709411621,0.00018492277013137937,0.7132840156555176,-0.00556770758703351],"used":true,"bodyHandle":3.76e-321,"linearSpeed":0.0791767648531476,"pendingImpulse":null},{"position":[-0.20584514737129211,0.252789169549942,-0.16224978864192963],"rotation":[-0.012039054185152054,0.7593175768852234,0.004112055990844965,-0.6505957841873169],"used":true,"bodyHandle":3.765e-321,"linearSpeed":0.07951004162501064,"pendingImpulse":null},{"position":[-0.1452285498380661,0.2527024447917938,-0.1569962501525879],"rotation":[-0.8448376059532166,0.0018614290747791529,-0.5350114107131958,-0.0029533214401453733],"used":true,"bodyHandle":3.77e-321,"linearSpeed":0.0803218367950922,"pendingImpulse":null},{"position":[-0.26811936497688293,0.257786363363266,-0.15547528862953186],"rotation":[0.0029359175823628902,-0.22018006443977356,0.006430164910852909,0.9754335880279541],"used":true,"bodyHandle":3.775e-321,"linearSpeed":0.08168508020766156,"pendingImpulse":null},{"position":[-0.0382704883813858,0.25306814908981323,-0.1539798229932785],"rotation":[-0.0008863420225679874,0.009806737303733826,-0.0032328073866665363,0.9999462366104126],"used":true,"bodyHandle":3.78e-321,"linearSpeed":0.0805521083856518,"pendingImpulse":null},{"position":[-0.14546634256839752,0.25840017199516296,-0.1570746898651123],"rotation":[-0.8507511019706726,0.0020112860947847366,-0.525557816028595,-0.002754229586571455],"used":true,"bodyHandle":3.785e-321,"linearSpeed":0.08126757120862334,"pendingImpulse":null},{"position":[-0.2684524655342102,0.2472599893808365,-0.1552494913339615],"rotation":[0.006101653911173344,-0.9962408542633057,0.0011912767076864839,0.0864027813076973],"used":true,"bodyHandle":3.79e-321,"linearSpeed":0.0791135173449662,"pendingImpulse":null},{"position":[-0.011099349707365036,0.24741236865520477,-0.1544700413942337],"rotation":[0.9914035797119141,0.0011891855392605066,0.1308230310678482,0.001682494068518281],"used":true,"bodyHandle":3.794e-321,"linearSpeed":0.07915813484478819,"pendingImpulse":null},{"position":[-0.05970241129398346,0.23967821896076202,0.7057905793190002],"rotation":[0.010843610391020775,-0.20198403298854828,0.012580782175064087,-0.9792479276657104],"used":true,"bodyHandle":3.8e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.06303762644529343,0.2381746917963028,0.6354833841323853],"rotation":[-0.014450916089117527,0.13269464671611786,0.00820955540984869,-0.9910175800323486],"used":true,"bodyHandle":3.804e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0005676219007000327,0.24051640927791595,0.6702311635017395],"rotation":[0.02798900008201599,-0.16898559033870697,0.014562227763235569,-0.9851134419441223],"used":true,"bodyHandle":3.81e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0004799782473128289,0.24315857887268066,0.6001039147377014],"rotation":[-0.00945564266294241,-0.29271385073661804,-0.009927276521921158,-0.9561018347740173],"used":true,"bodyHandle":3.814e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.061101678758859634,0.24175181984901428,0.6363465189933777],"rotation":[-0.019583499059081078,0.018365029245615005,0.0027904941234737635,-0.999635636806488],"used":true,"bodyHandle":3.82e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05920815467834473,0.24175673723220825,0.7058851718902588],"rotation":[0.0033246187958866358,0.07348226010799408,0.0027610163670033216,-0.9972871541976929],"used":true,"bodyHandle":3.824e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.000027975402190349996,0.2417229413986206,0.7387017607688904],"rotation":[-0.011969889514148235,-0.9611673355102539,0.012376764789223671,0.2754286527633667],"used":true,"bodyHandle":3.83e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.06041364371776581,0.2421831488609314,0.7040692567825317],"rotation":[-0.0026733672711998224,-0.7288197875022888,-0.007777219172567129,0.6846561431884766],"used":true,"bodyHandle":3.834e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.059620536863803864,0.2419646978378296,0.6366771459579468],"rotation":[-0.0013681136770173907,0.3239136040210724,0.006558699067682028,0.9460629224777222],"used":true,"bodyHandle":3.84e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0011553531512618065,0.243147611618042,0.6707106232643127],"rotation":[-0.027847951278090477,-0.7171632647514343,0.02016371116042137,0.6960564851760864],"used":true,"bodyHandle":3.844e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0006510327220894396,0.24572429060935974,0.5996100306510925],"rotation":[-0.014796161092817783,0.9629139304161072,-0.004098520614206791,0.2693715989589691],"used":true,"bodyHandle":3.85e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0568898469209671,0.24458171427249908,0.6356850266456604],"rotation":[0.0035553178749978542,-0.29631128907203674,0.008949654176831245,0.9550428986549377],"used":true,"bodyHandle":3.854e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0606662780046463,0.2451501488685608,0.7053070664405823],"rotation":[0.0025141516234725714,-0.5548260807991028,-0.014575084671378136,0.8318348526954651],"used":true,"bodyHandle":3.86e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.00002178980503231287,0.24439193308353424,0.7382946014404297],"rotation":[-0.015153169631958008,-0.9363332986831665,0.011552776210010052,0.3505949079990387],"used":true,"bodyHandle":3.864e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05963588133454323,0.24456003308296204,0.7050710916519165],"rotation":[0.009052827954292297,0.15737566351890564,-0.0007802327163517475,-0.9874969720840454],"used":true,"bodyHandle":3.87e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.06222284585237503,0.24473188817501068,0.6366825103759766],"rotation":[-0.00115114520303905,-0.3462156057357788,0.014176588505506516,-0.9380471110343933],"used":true,"bodyHandle":3.873e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0009133460698649287,0.2462894320487976,0.6708477139472961],"rotation":[0.039932671934366226,0.12797075510025024,-0.0003399873967282474,-0.9909736514091492],"used":true,"bodyHandle":3.88e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0004956757766194642,0.24916495382785797,0.6009149551391602],"rotation":[-0.016855817288160324,-0.6466155648231506,-0.007196451537311077,-0.7625958323478699],"used":true,"bodyHandle":3.883e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.060208823531866074,0.24824292957782745,0.6347064971923828],"rotation":[-0.010592923499643803,-0.1827256977558136,0.0058538890443742275,-0.9830893874168396],"used":true,"bodyHandle":3.89e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05856962129473686,0.24773649871349335,0.7052677869796753],"rotation":[0.017933137714862823,-0.47485437989234924,-0.0006591474520973861,-0.8798813819885254],"used":true,"bodyHandle":3.893e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.00003122915222775191,0.2471996545791626,0.7387543320655823],"rotation":[-0.008378524333238602,-0.9839656352996826,0.021616410464048386,-0.17684485018253326],"used":true,"bodyHandle":3.9e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.060591816902160645,0.2489379495382309,0.7045857906341553],"rotation":[-0.00407995143905282,-0.8537206053733826,-0.01456648949533701,0.5205116868019104],"used":true,"bodyHandle":3.903e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05931594595313072,0.24772422015666962,0.6355448961257935],"rotation":[-0.002331092953681946,0.4145839214324951,0.00419340655207634,0.9099984169006348],"used":true,"bodyHandle":3.91e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0011398998321965337,0.24932628870010376,0.6679455041885376],"rotation":[-0.035282619297504425,-0.6993688344955444,0.024593127891421318,0.7134658694267273],"used":true,"bodyHandle":3.913e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.00020666609634645283,0.2511519491672516,0.6003307700157166],"rotation":[0.009389258921146393,0.5950515866279602,0.006215476430952549,0.8036085963249207],"used":true,"bodyHandle":3.92e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.059246841818094254,0.24973438680171967,0.636204183101654],"rotation":[-0.007909705862402916,0.38653966784477234,0.014508668333292007,0.9221247434616089],"used":true,"bodyHandle":3.923e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.060399074107408524,0.2515876889228821,0.7048717737197876],"rotation":[-0.0004153151821810752,-0.9075296521186829,0.022175341844558716,0.4194018840789795],"used":true,"bodyHandle":3.93e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0002638110308907926,0.2500168979167938,0.7382223606109619],"rotation":[-0.002591110998764634,-0.941339373588562,0.020103536546230316,-0.336852103471756],"used":true,"bodyHandle":3.933e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05937310680747032,0.25121748447418213,0.7059051990509033],"rotation":[0.024223649874329567,0.19186946749687195,-0.005392851307988167,-0.9811065793037415],"used":true,"bodyHandle":3.94e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.06162460520863533,0.2509220242500305,0.6369776725769043],"rotation":[-0.02259676158428192,-0.6747627258300781,0.003447782015427947,-0.7376806139945984],"used":true,"bodyHandle":3.943e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0009856325341388583,0.25307542085647583,0.6695756912231445],"rotation":[0.03525637835264206,-0.3179962635040283,0.016240129247307777,-0.9472970366477966],"used":true,"bodyHandle":3.95e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.000252045807428658,0.2552783489227295,0.6005432605743408],"rotation":[-0.006771051324903965,0.34367087483406067,0.0037329597398638725,-0.9390583038330078],"used":true,"bodyHandle":3.953e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.061551593244075775,0.2530326247215271,0.6369100213050842],"rotation":[-0.01874883845448494,-0.9138363599777222,-0.00940495915710926,-0.4055403470993042],"used":true,"bodyHandle":3.957e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.060776613652706146,0.25435391068458557,0.7036363482475281],"rotation":[0.020905369892716408,0.16166891157627106,-0.004278115462511778,-0.9866143465042114],"used":true,"bodyHandle":3.96e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.00019760470604524016,0.2529189884662628,0.7383416295051575],"rotation":[0.0008682525949552655,-0.901600182056427,0.023268111050128937,-0.43194326758384705],"used":true,"bodyHandle":3.967e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.06052115932106972,0.25485748052597046,0.7040494680404663],"rotation":[-0.0076596662402153015,-0.7412373423576355,0.005369334015995264,-0.6711778044700623],"used":true,"bodyHandle":3.97e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05891580507159233,0.25403183698654175,0.6356868743896484],"rotation":[0.007345322519540787,-0.598669171333313,0.009894982911646366,0.8009016513824463],"used":true,"bodyHandle":3.977e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0009734039776958525,0.2559415102005005,0.6684889197349548],"rotation":[-0.04000058025121689,-0.6125742793083191,0.025168372318148613,0.7889989018440247],"used":true,"bodyHandle":3.98e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.00002035309444181621,0.25928476452827454,0.6008667945861816],"rotation":[0.008505001664161682,-0.2547304928302765,-0.005236058030277491,0.9669605493545532],"used":true,"bodyHandle":3.987e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05896271765232086,0.25705111026763916,0.636081874370575],"rotation":[0.0032071236055344343,-0.5924997329711914,0.012877522967755795,0.8054613471031189],"used":true,"bodyHandle":3.99e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05934601277112961,0.25779521465301514,0.7053443789482117],"rotation":[-0.001186179113574326,-0.5283539891242981,0.007883085869252682,-0.8489867448806763],"used":true,"bodyHandle":3.997e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.00011008710134774446,0.25721219182014465,0.7378160953521729],"rotation":[-0.016408666968345642,-0.9850752949714661,0.018217168748378754,0.1703687310218811],"used":true,"bodyHandle":4e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05848696827888489,0.2615070939064026,0.6360211372375488],"rotation":[-0.0011324731167405844,-0.5882188677787781,0.015355399809777737,0.8085551857948303],"used":true,"bodyHandle":4.007e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.00100125337485224,0.26238590478897095,0.6668794751167297],"rotation":[-0.05202174186706543,-0.42055758833885193,0.02997627481818199,0.9052769541740417],"used":true,"bodyHandle":4.01e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.00008068996976362541,0.26696380972862244,0.6010642051696777],"rotation":[0.004347675945609808,0.5824199318885803,0.005475605372339487,0.812857985496521],"used":true,"bodyHandle":4.017e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05880797654390335,0.2650778889656067,0.6359759569168091],"rotation":[-0.012147657573223114,-0.0605231411755085,0.01095650065690279,0.9980327486991882],"used":true,"bodyHandle":4.02e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.061330024152994156,0.2656955420970917,0.7048945426940918],"rotation":[-0.010089418850839138,-0.893114447593689,-0.0035604401491582394,-0.4497022032737732],"used":true,"bodyHandle":4.027e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0002587021153885871,0.2640203833580017,0.7387179732322693],"rotation":[-0.0005064076976850629,-0.9106374979019165,0.02636081911623478,-0.4123641848564148],"used":true,"bodyHandle":4.03e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05944759398698807,0.2646273374557495,0.7041662931442261],"rotation":[0.0163840614259243,-0.8078417778015137,0.02718460187315941,-0.5885441303253174],"used":true,"bodyHandle":4.037e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39985546469688416,0.16980300843715668,0.7699601054191589],"rotation":[0.004249760415405035,0.01036305446177721,-0.004572718869894743,0.9999268054962158],"used":true,"bodyHandle":4.04e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.40019282698631287,0.16948609054088593,0.7700204253196716],"rotation":[0.006709510460495949,0.008490419015288353,0.00012975370918866247,0.9999414682388306],"used":true,"bodyHandle":4.046e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.060602426528930664,0.26348161697387695,0.6368032097816467],"rotation":[-0.01918129250407219,-0.14031194150447845,0.00485532870516181,-0.9899096488952637],"used":true,"bodyHandle":4.05e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.39994925260543823,0.1721142828464508,0.7697693705558777],"rotation":[-0.0034619662910699844,0.01251130923628807,0.005478226579725742,0.9999006986618042],"used":true,"bodyHandle":4.056e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.400424599647522,0.17160503566265106,0.7696390748023987],"rotation":[-0.001615996821783483,-0.001621657400391996,0.0018427607137709856,0.9999957084655762],"used":true,"bodyHandle":4.06e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0006399688427336514,0.26608312129974365,0.6666272878646851],"rotation":[0.05454780533909798,-0.6111416816711426,0.03674425184726715,-0.7887840270996094],"used":true,"bodyHandle":4.066e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.39925506711006165,0.17313160002231598,0.7695516347885132],"rotation":[-0.0044819386675953865,0.02295716106891632,-0.0077255540527403355,0.9996964931488037],"used":true,"bodyHandle":4.07e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.4003296196460724,0.17368826270103455,0.7693312168121338],"rotation":[0.0022322549484670162,0.0046278187073767185,0.001487639732658863,0.9999856948852539],"used":true,"bodyHandle":4.076e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.00011852757597807795,0.27172866463661194,0.6010738015174866],"rotation":[-0.006384993437677622,0.19352908432483673,-0.0035698069259524345,-0.9810672402381897],"used":true,"bodyHandle":4.08e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.3983784019947052,0.17511925101280212,0.7702113389968872],"rotation":[0.000024990984456962906,0.03254947066307068,-0.0000644829124212265,0.9994701147079468],"used":true,"bodyHandle":4.086e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.3998403251171112,0.17573845386505127,0.7695388793945312],"rotation":[-0.010010053403675556,-0.0004709286440629512,-0.028701409697532654,0.9995377659797668],"used":true,"bodyHandle":4.09e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.06142735481262207,0.26825839281082153,0.6369602084159851],"rotation":[-0.024911295622587204,-0.6563353538513184,-0.008505690842866898,-0.754010021686554],"used":true,"bodyHandle":4.096e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.39851588010787964,0.17675288021564484,0.7700453400611877],"rotation":[-0.001032519736327231,0.025838065892457962,0.004700934514403343,0.9996544718742371],"used":true,"bodyHandle":4.1e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.059564948081970215,0.2692885398864746,0.7034125328063965],"rotation":[0.012433779425919056,-0.906379222869873,0.031179241836071014,-0.42112937569618225],"used":true,"bodyHandle":4.106e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.397874653339386,0.18283160030841827,0.7691790461540222],"rotation":[0.0035755224525928497,-0.05082956328988075,0.0018834143411368132,0.9986991882324219],"used":true,"bodyHandle":4.11e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0005452640471048653,0.2676241397857666,0.7371861338615417],"rotation":[-0.006466304417699575,-0.9681508541107178,0.03715599700808525,-0.2475106567144394],"used":true,"bodyHandle":4.116e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.3982488512992859,0.1798451989889145,0.768543541431427],"rotation":[-0.004264247603714466,0.0326952300965786,0.002020052168518305,0.9994542002677917],"used":true,"bodyHandle":4.12e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.3987998366355896,0.17779463529586792,0.768737256526947],"rotation":[0.013422532938420773,-0.0018834497313946486,-0.010899404063820839,0.9998487234115601],"used":true,"bodyHandle":4.125e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.061508361250162125,0.2703590393066406,0.7050921320915222],"rotation":[-0.007866524159908295,-0.7579164505004883,0.00015376662486232817,-0.6523041725158691],"used":true,"bodyHandle":4.13e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39900702238082886,0.17931689321994781,0.7687980532646179],"rotation":[-0.006484277080744505,-0.0020144255831837654,-0.01824399270117283,0.999810516834259],"used":true,"bodyHandle":4.135e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.3996696472167969,0.18030035495758057,0.7684085965156555],"rotation":[0.001586608705110848,0.04114757850766182,0.0038457433693110943,0.9991443753242493],"used":true,"bodyHandle":4.14e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.058609284460544586,0.2689233124256134,0.6356804370880127],"rotation":[-0.006845633964985609,-0.6404465436935425,0.014849306084215641,0.7678287029266357],"used":true,"bodyHandle":4.145e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.4004018008708954,0.1842043250799179,0.768804669380188],"rotation":[0.010208623483777046,0.01064703706651926,0.00493610417470336,0.999879002571106],"used":true,"bodyHandle":4.15e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.3999885320663452,0.18194584548473358,0.7699055075645447],"rotation":[-0.00302919396199286,0.04345545917749405,-0.0007033414440229535,0.999050498008728],"used":true,"bodyHandle":4.155e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.00003930997627321631,0.2699141800403595,0.6662180423736572],"rotation":[-0.06942728906869888,-0.3169765770435333,0.028936799615621567,0.9454460740089417],"used":true,"bodyHandle":4.16e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.398747980594635,0.18019750714302063,0.7684739828109741],"rotation":[-0.002689054701477289,0.016314243897795677,0.001407160423696041,0.9998623132705688],"used":true,"bodyHandle":4.165e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.3995572328567505,0.18452441692352295,0.768204927444458],"rotation":[-0.007956772111356258,0.053385134786367416,0.006311831064522266,0.9985223412513733],"used":true,"bodyHandle":4.17e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.00007241123239509761,0.27578306198120117,0.6012102961540222],"rotation":[-0.0018449812196195126,0.7992744445800781,0.00943941343575716,0.6008891463279724],"used":true,"bodyHandle":4.175e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.40133383870124817,0.1853734254837036,0.7685426473617554],"rotation":[0.010344668291509151,0.05017564818263054,-0.0035927759017795324,0.9986804127693176],"used":true,"bodyHandle":4.18e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05848817527294159,0.27387765049934387,0.6356827616691589],"rotation":[-0.0178350992500782,-0.21051166951656342,0.009544535540044308,0.9773820042610168],"used":true,"bodyHandle":4.185e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39837297797203064,0.18698939681053162,0.7703442573547363],"rotation":[0.0056776609271764755,0.007166034076362848,-0.005671949125826359,0.9999421238899231],"used":true,"bodyHandle":4.19e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.40105077624320984,0.18905723094940186,0.7694872617721558],"rotation":[-0.0007188644376583397,0.053107865154743195,0.0012313749175518751,0.9985877871513367],"used":true,"bodyHandle":4.195e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.060708366334438324,0.27441614866256714,0.7049526572227478],"rotation":[-0.0013889300171285868,-0.9311581254005432,-0.008054870180785656,0.3645239472389221],"used":true,"bodyHandle":4.2e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.3978256285190582,0.192586749792099,0.7702247500419617],"rotation":[0.010487016290426254,0.004204542376101017,0.005835909862071276,0.9999191164970398],"used":true,"bodyHandle":4.204e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.40207144618034363,0.1880451738834381,0.7702226042747498],"rotation":[0.008618232794106007,0.04460364207625389,-0.011077317409217358,0.998906135559082],"used":true,"bodyHandle":4.21e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.00047018646728247404,0.2725222706794739,0.7363904714584351],"rotation":[-0.014555240049958229,-0.999359667301178,0.03267070651054382,0.0009742123656906188],"used":true,"bodyHandle":4.214e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.4003213346004486,0.18775013089179993,0.7717885971069336],"rotation":[0.007847175002098083,0.005913467612117529,0.0075579616241157055,0.9999231100082397],"used":true,"bodyHandle":4.22e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.4002552628517151,0.19189123809337616,0.7679986953735352],"rotation":[0.005048028193414211,0.05233824625611305,0.008050438947975636,0.9985841512680054],"used":true,"bodyHandle":4.224e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.059311266988515854,0.273362398147583,0.7033111453056335],"rotation":[0.032689232379198074,-0.4315502345561981,0.02044910565018654,-0.901264488697052],"used":true,"bodyHandle":4.23e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.3983239531517029,0.19391615688800812,0.7718108296394348],"rotation":[0.03547195717692375,0.0157446451485157,0.00716281495988369,0.9992209672927856],"used":true,"bodyHandle":4.234e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.40247803926467896,0.19396540522575378,0.7702078819274902],"rotation":[0.01081935130059719,0.06931474804878235,-0.0033704563975334167,0.997530460357666],"used":true,"bodyHandle":4.24e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.060537468641996384,0.2732556462287903,0.637100100517273],"rotation":[-0.02674376778304577,-0.4722627103328705,-0.0038956396747380495,-0.8810434341430664],"used":true,"bodyHandle":4.244e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.3994375765323639,0.18950624763965607,0.7710121273994446],"rotation":[0.0013387077488005161,0.005212101619690657,-0.002066690241917968,0.9999833703041077],"used":true,"bodyHandle":4.25e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.4007866382598877,0.19511371850967407,0.7691531181335449],"rotation":[0.017868859693408012,0.05282367393374443,-0.004597073420882225,0.9984333515167236],"used":true,"bodyHandle":4.254e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0002454012865200639,0.2739073932170868,0.6648495197296143],"rotation":[0.07490690052509308,-0.47676703333854675,0.034612540155649185,-0.8751480579376221],"used":true,"bodyHandle":4.26e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39933231472969055,0.19525668025016785,0.771854817867279],"rotation":[0.003762906650081277,0.012021882459521294,0.002517214510589838,0.9999174475669861],"used":true,"bodyHandle":4.264e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.4004361927509308,0.19846835732460022,0.7712966799736023],"rotation":[0.0070803104899823666,0.04998622089624405,0.00035203201696276665,0.9987246990203857],"used":true,"bodyHandle":4.27e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0000541272820555605,0.2801695466041565,0.6011278629302979],"rotation":[0.0008159151184372604,-0.5465517044067383,-0.008875689469277859,-0.8373779654502869],"used":true,"bodyHandle":4.274e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.40009891986846924,0.19722746312618256,0.7709632515907288],"rotation":[0.018382146954536438,0.017775943502783775,-0.009865748696029186,0.9996243715286255],"used":true,"bodyHandle":4.28e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.4007081985473633,0.19911356270313263,0.7719680070877075],"rotation":[0.0005850777961313725,0.047080665826797485,0.011697633191943169,0.9988224506378174],"used":true,"bodyHandle":4.284e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.06033611297607422,0.27836811542510986,0.6375746726989746],"rotation":[-0.02262572944164276,0.0799846351146698,0.009407036937773228,-0.9964948892593384],"used":true,"bodyHandle":4.29e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.3996890187263489,0.199032261967659,0.7722547650337219],"rotation":[0.011935016140341759,0.05755800008773804,0.015174084343016148,0.998155415058136],"used":true,"bodyHandle":4.293e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.400736540555954,0.20162607729434967,0.7709701061248779],"rotation":[0.006393462419509888,0.06950114667415619,0.010598136112093925,0.9975050687789917],"used":true,"bodyHandle":4.3e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.059496358036994934,0.27812352776527405,0.702580988407135],"rotation":[0.017064040526747704,-0.7817031741142273,0.03409963473677635,-0.6224837899208069],"used":true,"bodyHandle":4.303e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.399188369512558,0.2015068382024765,0.7730222940444946],"rotation":[0.0065664793364703655,0.04867544397711754,0.013517487794160843,0.9987015724182129],"used":true,"bodyHandle":4.31e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.40162193775177,0.2046383023262024,0.7712320685386658],"rotation":[0.0003965754294767976,0.04542055353522301,0.008393545635044575,0.9989326000213623],"used":true,"bodyHandle":4.313e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0005803004023618996,0.27693483233451843,0.7362287640571594],"rotation":[0.006267316173762083,-0.8332257866859436,0.03485817462205887,-0.5517973899841309],"used":true,"bodyHandle":4.32e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.401502788066864,0.20566491782665253,0.7722986936569214],"rotation":[0.00994074996560812,-0.008550525642931461,-0.004547178745269775,0.999903678894043],"used":true,"bodyHandle":4.323e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.3997013568878174,0.20540331304073334,0.7692906260490417],"rotation":[0.004296022932976484,0.05928104370832443,0.011934279464185238,0.998160719871521],"used":true,"bodyHandle":4.33e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.06098783016204834,0.27881908416748047,0.7049326300621033],"rotation":[-0.0013397630536928773,-0.9241546988487244,-0.008875422179698944,0.38191312551498413],"used":true,"bodyHandle":4.333e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.40222787857055664,0.20315305888652802,0.7729393243789673],"rotation":[0.012888572178781033,-0.005892998073250055,-0.0041410294361412525,0.9998909831047058],"used":true,"bodyHandle":4.34e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.40099993348121643,0.20759403705596924,0.7707235217094421],"rotation":[-0.004991690628230572,0.053802795708179474,0.015008360147476196,0.9984262585639954],"used":true,"bodyHandle":4.343e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05840516462922096,0.278247594833374,0.6353287696838379],"rotation":[-0.015549874864518642,-0.5544300079345703,0.020900322124361992,0.8318225145339966],"used":true,"bodyHandle":4.35e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39969736337661743,0.20693233609199524,0.7734254598617554],"rotation":[0.007491669617593288,0.023644335567951202,0.002627055160701275,0.9996889233589172],"used":true,"bodyHandle":4.353e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.4008897840976715,0.20889215171337128,0.7697161436080933],"rotation":[-0.002317685168236494,0.11152555793523788,0.012999659404158592,0.9936738014221191],"used":true,"bodyHandle":4.36e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.397663950920105,0.21207736432552338,0.7695611715316772],"rotation":[-0.00358646921813488,0.04673212394118309,0.018699338659644127,0.9987260103225708],"used":true,"bodyHandle":4.363e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0004641815321519971,0.27825456857681274,0.6639158129692078],"rotation":[-0.0824541449546814,-0.17737460136413574,0.022041574120521545,0.9804354906082153],"used":true,"bodyHandle":4.37e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.40183576941490173,0.20873451232910156,0.7725804448127747],"rotation":[-0.0016718972474336624,0.02958701364696026,-0.005786011461168528,0.999544084072113],"used":true,"bodyHandle":4.372e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.39756497740745544,0.21300680935382843,0.7706246972084045],"rotation":[-0.0024422260466963053,0.048721011728048325,0.0355050191283226,0.9981781840324402],"used":true,"bodyHandle":4.377e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.00022961795912124217,0.2848721146583557,0.5997331738471985],"rotation":[-0.0031746539752930403,0.7407228946685791,0.009209207259118557,0.6717399954795837],"used":true,"bodyHandle":4.38e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.400839626789093,0.21112599968910217,0.7734243273735046],"rotation":[0.0018436404643580317,0.04668574407696724,-0.0007539823418483138,0.9989076256752014],"used":true,"bodyHandle":4.387e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.397258460521698,0.2162124663591385,0.7707542777061462],"rotation":[-0.002656057011336088,0.04690216854214668,0.0014346938114613295,0.9988949298858643],"used":true,"bodyHandle":4.39e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.058127641677856445,0.283029168844223,0.6353635787963867],"rotation":[-0.025230562314391136,-0.09187230467796326,0.008682535029947758,0.9954132437705994],"used":true,"bodyHandle":4.397e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.4008362889289856,0.21389880776405334,0.771165668964386],"rotation":[-0.012314149178564548,0.04149910807609558,-0.011413170956075191,0.9989974498748779],"used":true,"bodyHandle":4.4e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.39702266454696655,0.2189650982618332,0.7694515585899353],"rotation":[-0.003728386713191867,0.043170999735593796,0.00971295963972807,0.9990135431289673],"used":true,"bodyHandle":4.407e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.06128766015172005,0.28388512134552,0.7052027583122253],"rotation":[-0.0022816353011876345,-0.992730438709259,-0.005786236375570297,-0.12019755691289902],"used":true,"bodyHandle":4.41e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.4018140435218811,0.21573342382907867,0.770097553730011],"rotation":[-0.00388320186175406,0.03901948034763336,-0.015283875167369843,0.9991140365600586],"used":true,"bodyHandle":4.417e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.3968110978603363,0.22063718736171722,0.7690268754959106],"rotation":[-0.00046808537445031106,0.03028346225619316,-0.001134200720116496,0.9995406270027161],"used":true,"bodyHandle":4.42e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0009456347906962037,0.28166109323501587,0.7362029552459717],"rotation":[0.014500968158245087,-0.6964032053947449,0.035636525601148605,-0.7166185975074768],"used":true,"bodyHandle":4.427e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39967018365859985,0.21798786520957947,0.7707869410514832],"rotation":[-0.00439046137034893,0.04351107031106949,-0.0169875156134367,0.9988988041877747],"used":true,"bodyHandle":4.43e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.3980720341205597,0.22319376468658447,0.7715177536010742],"rotation":[-0.002374285599216819,0.036173269152641296,0.00002239446621388197,0.999342679977417],"used":true,"bodyHandle":4.437e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.39754951000213623,0.22516851127147675,0.7704680562019348],"rotation":[-0.020909508690238,0.0266262199729681,-0.008992831222712994,0.9993862509727478],"used":true,"bodyHandle":4.44e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0595448762178421,0.28284573554992676,0.7021273374557495],"rotation":[0.026692183688282967,-0.5933676362037659,0.03171590343117714,-0.8038634061813354],"used":true,"bodyHandle":4.447e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.3997371196746826,0.2205681949853897,0.7699105739593506],"rotation":[-0.005158831365406513,0.04920484125614166,-0.021984854713082314,0.9985334277153015],"used":true,"bodyHandle":4.45e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.39693862199783325,0.22776466608047485,0.769975483417511],"rotation":[0.013675547204911709,0.016601575538516045,-0.0026615008246153593,0.9997650384902954],"used":true,"bodyHandle":4.456e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05988029018044472,0.2834944427013397,0.6378765106201172],"rotation":[-0.02410767413675785,-0.4326547086238861,-0.0070879701524972916,-0.9012094140052795],"used":true,"bodyHandle":4.46e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39996299147605896,0.22270120680332184,0.7694499492645264],"rotation":[-0.004426589235663414,0.04640135169029236,-0.02573939599096775,0.9985813498497009],"used":true,"bodyHandle":4.466e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.399484246969223,0.229855477809906,0.769466757774353],"rotation":[-0.004322325810790062,0.014063646085560322,-0.019005069509148598,0.9997110962867737],"used":true,"bodyHandle":4.47e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.4010348618030548,0.2247818112373352,0.7703959941864014],"rotation":[-0.0013286089524626732,0.04109884053468704,-0.021262142807245255,0.998927891254425],"used":true,"bodyHandle":4.476e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.00024220129125751555,0.2828918695449829,0.6627582907676697],"rotation":[0.06918355822563171,-0.6844202280044556,0.05428784713149071,-0.7237647175788879],"used":true,"bodyHandle":4.48e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.3993207514286041,0.23274652659893036,0.7685819864273071],"rotation":[-0.0017137686954811215,0.02315758541226387,-0.011362705379724503,0.9996657371520996],"used":true,"bodyHandle":4.486e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39944106340408325,0.22788693010807037,0.7697545886039734],"rotation":[0.012924798764288425,0.03698068484663963,-0.03364824503660202,0.9986656904220581],"used":true,"bodyHandle":4.49e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0011871742317453027,0.28987959027290344,0.600584089756012],"rotation":[-0.0002474686480127275,-0.2633957862854004,-0.012709190137684345,-0.9646040201187134],"used":true,"bodyHandle":4.496e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.399841845035553,0.23499631881713867,0.767934262752533],"rotation":[0.00017343409126624465,0.0342039130628109,-0.015902318060398102,0.9992883205413818],"used":true,"bodyHandle":4.5e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39980843663215637,0.2301330417394638,0.7710462212562561],"rotation":[-0.01755884848535061,0.012409565970301628,-0.01681719906628132,0.9996273517608643],"used":true,"bodyHandle":4.506e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.060962188988924026,0.2888663411140442,0.6376229524612427],"rotation":[-0.027831461280584335,0.08291852474212646,0.005010196473449469,-0.9961550235748291],"used":true,"bodyHandle":4.51e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.3991977572441101,0.23764105141162872,0.7687260508537292],"rotation":[0.00972879957407713,0.03371695429086685,-0.014597035013139248,0.9992774128913879],"used":true,"bodyHandle":4.516e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.40098363161087036,0.23308061063289642,0.7705153822898865],"rotation":[0.003387337550520897,0.0179380364716053,-0.027553435415029526,0.9994536638259888],"used":true,"bodyHandle":4.52e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.058962419629096985,0.2877292037010193,0.701587438583374],"rotation":[0.03344274312257767,-0.4120582044124603,0.025649400427937508,-0.9101821780204773],"used":true,"bodyHandle":4.526e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.39886027574539185,0.2405053675174713,0.768118679523468],"rotation":[0.004406499210745096,0.03181995823979378,-0.016799189150333405,0.9993427395820618],"used":true,"bodyHandle":4.53e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.40038537979125977,0.23508115112781525,0.7709276676177979],"rotation":[0.00464407354593277,0.014995913952589035,-0.033360131084918976,0.9993200302124023],"used":true,"bodyHandle":4.536e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0010886869858950377,0.28697019815444946,0.7353790998458862],"rotation":[-0.004633253440260887,-0.9748069643974304,0.03789424151182175,-0.21975889801979065],"used":true,"bodyHandle":4.54e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.39930665493011475,0.24300414323806763,0.7671751379966736],"rotation":[0.012203874066472054,0.08680257201194763,-0.016132954508066177,0.9960200786590576],"used":true,"bodyHandle":4.545e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39971914887428284,0.23798809945583344,0.7714622616767883],"rotation":[-0.002414270304143429,0.025638170540332794,-0.03499675914645195,0.9990556240081787],"used":true,"bodyHandle":4.55e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.3994077146053314,0.2458638697862625,0.7673629522323608],"rotation":[0.018792634829878807,0.0415332093834877,-0.019529204815626144,0.9987694025039673],"used":true,"bodyHandle":4.555e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.06149076670408249,0.28890758752822876,0.7051907777786255],"rotation":[-0.0009300642414018512,-0.9985910058021545,-0.008067582733929157,-0.05244193971157074],"used":true,"bodyHandle":4.56e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.3985153138637543,0.23977193236351013,0.7717714309692383],"rotation":[0.0013523402158170938,0.015761103481054306,-0.03928472846746445,0.999102771282196],"used":true,"bodyHandle":4.565e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.4000469446182251,0.24838615953922272,0.7674518823623657],"rotation":[0.026610398665070534,0.0439717099070549,-0.020246706902980804,0.9984729886054993],"used":true,"bodyHandle":4.57e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.058692365884780884,0.28807002305984497,0.6345604658126831],"rotation":[-0.020711161196231842,-0.5820112824440002,0.017997337505221367,0.8127176761627197],"used":true,"bodyHandle":4.575e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.3971324861049652,0.2430446892976761,0.7708517909049988],"rotation":[-0.0035745585337281227,0.006229059770703316,-0.04127703234553337,0.999121904373169],"used":true,"bodyHandle":4.58e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.4013557434082031,0.25127217173576355,0.7690556645393372],"rotation":[0.03514750674366951,0.04652346670627594,-0.018985185772180557,0.9981181621551514],"used":true,"bodyHandle":4.585e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39793387055397034,0.245428666472435,0.7720842361450195],"rotation":[0.0003253816976211965,0.023700358346104622,-0.04104209691286087,0.9988762736320496],"used":true,"bodyHandle":4.59e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.0003799345577135682,0.288053035736084,0.6628183126449585],"rotation":[-0.08654738962650299,-0.22738976776599884,0.027087189257144928,0.9695719480514526],"used":true,"bodyHandle":4.595e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.4009871184825897,0.2546153664588928,0.7688265442848206],"rotation":[0.03785758838057518,0.047224998474121094,-0.017574109137058258,0.9980118274688721],"used":true,"bodyHandle":4.6e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.40231853723526,0.2578013241291046,0.7706741094589233],"rotation":[0.044927388429641724,0.04626637324690819,-0.01797338016331196,0.9977564215660095],"used":true,"bodyHandle":4.605e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39826273918151855,0.2484670728445053,0.7711756825447083],"rotation":[-0.00014798261690884829,0.01702066883444786,-0.04471489414572716,0.9988548159599304],"used":true,"bodyHandle":4.61e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.00027529126964509487,0.29537931084632874,0.6016355752944946],"rotation":[-0.0006712998729199171,0.38083121180534363,0.011296125128865242,0.9245753288269043],"used":true,"bodyHandle":4.615e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.39987727999687195,0.26107102632522583,0.7708399891853333],"rotation":[0.05240710824728012,0.03017427586019039,-0.016411611810326576,0.9980349540710449],"used":true,"bodyHandle":4.62e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39565369486808777,0.25169044733047485,0.7707929015159607],"rotation":[0.0005012836190871894,0.024959344416856766,-0.044254276901483536,0.9987083077430725],"used":true,"bodyHandle":4.624e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05868492275476456,0.29345202445983887,0.6342595815658569],"rotation":[-0.020852703601121902,-0.6031277775764465,0.017797358334064484,0.797173261642456],"used":true,"bodyHandle":4.63e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.40142056345939636,0.26437002420425415,0.7735808491706848],"rotation":[0.05417487397789955,0.03965001553297043,-0.015366540290415287,0.9976255893707275],"used":true,"bodyHandle":4.634e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.3948401212692261,0.25443488359451294,0.7710614800453186],"rotation":[0.0003464908804744482,0.013160303235054016,-0.04192369803786278,0.99903404712677],"used":true,"bodyHandle":4.64e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.4007243514060974,0.26882898807525635,0.7746039628982544],"rotation":[0.048962727189064026,0.021397093310952187,-0.01023155078291893,0.9985189437866211],"used":true,"bodyHandle":4.644e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.06117553636431694,0.2942671477794647,0.7052913308143616],"rotation":[0.0038618845865130424,-0.8545346856117249,-0.007795521058142185,0.5193214416503906],"used":true,"bodyHandle":4.65e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.4016459584236145,0.27309122681617737,0.7736502885818481],"rotation":[0.0649380087852478,0.014913110993802547,-0.01275621633976698,0.9976963400840759],"used":true,"bodyHandle":4.654e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39497390389442444,0.25765150785446167,0.7699029445648193],"rotation":[0.005660617258399725,0.019658163189888,-0.04125852510333061,0.9989390969276428],"used":true,"bodyHandle":4.66e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0013703578151762486,0.29232093691825867,0.7356998920440674],"rotation":[-0.011035910807549953,-0.990143895149231,0.03462844714522362,-0.13525569438934326],"used":true,"bodyHandle":4.664e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.4008159339427948,0.27777233719825745,0.775790810585022],"rotation":[0.05389197915792465,0.011004311963915825,-0.011424782685935497,0.998420774936676],"used":true,"bodyHandle":4.67e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.3946395814418793,0.26095718145370483,0.7698920369148254],"rotation":[0.004991383291780949,0.023047683760523796,-0.037115104496479034,0.9990326762199402],"used":true,"bodyHandle":4.674e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.058402031660079956,0.2930087745189667,0.7005163431167603],"rotation":[0.016967909410595894,-0.7779590487480164,0.037934836000204086,-0.6269391179084778],"used":true,"bodyHandle":4.68e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.40121060609817505,0.2831616997718811,0.775477409362793],"rotation":[0.05221087113022804,0.005026957485824823,-0.012653093785047531,0.9985432624816895],"used":true,"bodyHandle":4.684e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.394409716129303,0.26458391547203064,0.7718271613121033],"rotation":[0.008366992697119713,0.02136104740202427,-0.03642642870545387,0.9990730285644531],"used":true,"bodyHandle":4.69e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.40123698115348816,0.28843140602111816,0.7770923376083374],"rotation":[0.049192875623703,0.005380993243306875,-0.011367380619049072,0.998710036277771],"used":true,"bodyHandle":4.694e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.060629189014434814,0.2942489981651306,0.6381567716598511],"rotation":[-0.029718631878495216,-0.13334612548351288,-0.002221460221335292,-0.9906213283538818],"used":true,"bodyHandle":4.7e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39415717124938965,0.26852840185165405,0.7713736891746521],"rotation":[0.005801332648843527,0.02656189538538456,-0.0350230410695076,0.9990165829658508],"used":true,"bodyHandle":4.704e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.40238144993782043,0.2938874065876007,0.776609480381012],"rotation":[0.0493888333439827,0.002481832867488265,-0.011334476992487907,0.9987122416496277],"used":true,"bodyHandle":4.71e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0005714293220080435,0.29352372884750366,0.662249743938446],"rotation":[0.07060011476278305,-0.7007743120193481,0.05985347554087639,-0.7073531746864319],"used":true,"bodyHandle":4.713e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39560797810554504,0.2728421092033386,0.7713255882263184],"rotation":[0.007122077979147434,0.02814241126179695,-0.03566674515604973,0.9989420175552368],"used":true,"bodyHandle":4.72e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.4034369885921478,0.29941824078559875,0.7784223556518555],"rotation":[0.04924289882183075,-0.0023166558239609003,-0.011697720736265182,0.9987155795097351],"used":true,"bodyHandle":4.723e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.00036538345739245415,0.30108118057250977,0.6016702651977539],"rotation":[-0.005691162776201963,0.13234445452690125,-0.009131074883043766,-0.9911453723907471],"used":true,"bodyHandle":4.73e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.3954680263996124,0.2773483991622925,0.7712498903274536],"rotation":[0.009433590807020664,0.021336602047085762,-0.03510480001568794,0.9991112947463989],"used":true,"bodyHandle":4.733e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.060439057648181915,0.30000975728034973,0.6385238170623779],"rotation":[-0.030541935935616493,-0.19998590648174286,-0.003981585148721933,-0.9793145060539246],"used":true,"bodyHandle":4.74e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.3943445682525635,0.28260719776153564,0.7712555527687073],"rotation":[0.01037225779145956,0.020144663751125336,-0.035818297415971756,0.9991014003753662],"used":true,"bodyHandle":4.743e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.05914735421538353,0.298850953578949,0.7008496522903442],"rotation":[0.023676864802837372,-0.6250519156455994,0.03360816091299057,-0.7794997692108154],"used":true,"bodyHandle":4.75e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39282965660095215,0.2876602113246918,0.7707200050354004],"rotation":[0.014695676974952221,0.024656519293785095,-0.038661401718854904,0.9988399744033813],"used":true,"bodyHandle":4.753e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.39312544465065,0.2930426597595215,0.7725824117660522],"rotation":[0.015796110033988953,0.01303507573902607,-0.038455963134765625,0.9990503787994385],"used":true,"bodyHandle":4.76e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.0015191099373623729,0.29809650778770447,0.7348030209541321],"rotation":[-0.009083217941224575,-0.981246829032898,0.03484464809298515,-0.18936201930046082],"used":true,"bodyHandle":4.763e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.3922438621520996,0.298682302236557,0.77322918176651],"rotation":[0.016003146767616272,0.009240145795047283,-0.0384770967066288,0.9990885853767395],"used":true,"bodyHandle":4.77e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.061622943729162216,0.30003198981285095,0.705653965473175],"rotation":[0.0018855120288208127,-0.977487325668335,-0.008130304515361786,0.2108290195465088],"used":true,"bodyHandle":4.773e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0.05800289660692215,0.2992679476737976,0.6342579126358032],"rotation":[-0.02081269770860672,-0.5964949727058411,0.016513515263795853,0.8021769523620605],"used":true,"bodyHandle":4.78e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[-0.001327153411693871,0.29931384325027466,0.6618473529815674],"rotation":[-0.09234422445297241,0.03113279491662979,0.004193661268800497,0.9952315092086792],"used":true,"bodyHandle":4.783e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.787e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.79e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.797e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.8e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.807e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.81e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.817e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.82e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.827e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.83e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.837e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.84e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.847e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.85e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.857e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.86e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.867e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.87e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.876e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.88e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.886e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.89e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.896e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.9e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.906e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.91e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.916e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.92e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.926e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.93e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.936e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.94e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.946e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.95e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.955e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.96e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.965e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.97e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.975e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.98e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.985e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.99e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.995e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.005e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.01e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.015e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.02e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.025e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.03e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.035e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.04e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.044e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.05e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.054e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.06e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.064e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.07e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.074e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.08e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.084e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.09e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.094e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.1e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.104e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.11e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.114e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.12e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.123e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.13e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.133e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.14e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.143e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.15e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.153e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.16e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.163e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.17e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.173e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.18e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.183e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.19e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.193e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.2e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.203e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.207e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.21e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.217e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.22e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.227e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.23e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.237e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.24e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.247e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.25e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.257e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.26e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.267e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.27e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.277e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.28e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.287e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.29e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.296e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.3e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.306e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.31e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.316e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.32e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.326e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.33e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.336e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.34e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.346e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.35e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.356e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.36e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.366e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.37e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.375e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.38e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.385e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.39e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.395e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.4e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.405e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.41e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.415e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.42e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.425e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.43e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.435e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.44e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.445e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.45e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.454e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.46e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.464e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.47e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.474e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.48e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.484e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.49e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.494e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.5e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.504e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.51e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.514e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.52e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.524e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.53e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.534e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.54e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.543e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.55e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.553e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.56e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.563e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.57e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.573e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.58e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.583e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.59e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.593e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.6e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.603e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.61e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.613e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.618e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.62e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.627e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.63e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.637e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.64e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.647e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.65e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.657e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.66e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.667e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.67e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.677e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.68e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.687e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.69e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.697e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.7e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.706e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.71e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.716e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.72e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.726e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.73e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.736e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.74e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.746e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.75e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.756e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.76e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.766e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.77e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.776e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.78e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.786e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.79e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.795e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.8e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.805e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.81e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.815e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.82e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.825e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.83e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.835e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.84e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.845e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.85e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.855e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.86e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.865e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.87e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.874e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.88e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.884e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.89e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.894e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.9e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.904e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.91e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.914e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.92e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.924e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.93e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.934e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.94e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.944e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.95e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.953e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.96e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.963e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.97e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.973e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.98e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.983e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.99e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.993e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.003e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.01e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.013e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.02e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.023e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.03e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.033e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.037e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.04e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.047e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.05e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.057e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.06e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.067e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.07e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.077e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.08e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.087e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.09e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.097e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.1e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.107e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.11e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.117e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.12e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.126e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.13e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.136e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.14e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.146e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.15e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.156e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.16e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.166e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.17e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.176e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.18e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.186e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.19e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.196e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.2e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.205e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.21e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.215e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.22e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.225e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.23e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.235e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.24e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.245e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.25e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.255e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.26e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.265e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.27e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.275e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.28e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.285e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.29e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.294e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.3e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.304e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.31e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.314e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.32e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.324e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.33e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.334e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.34e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.344e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.35e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.354e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.36e-321,"linearSpeed":0,"pendingImpulse":null},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.364e-321,"linearSpeed":0,"pendingImpulse":null}],"tokens":[[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.645e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.65e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.655e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.66e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.665e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.67e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.675e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.68e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.685e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.69e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.695e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.7e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.704e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.71e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.714e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.72e-321}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.724e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.73e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.734e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.74e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.744e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.75e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.754e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.76e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.764e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.77e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.774e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.78e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.784e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.79e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.793e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.8e-321}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.803e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.81e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.813e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.82e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.823e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.83e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.833e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.84e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.843e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.85e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.853e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.86e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.863e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.868e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.87e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.877e-321}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.88e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.887e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.89e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.897e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.9e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.907e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.91e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.917e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.92e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.927e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.93e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.937e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.94e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.947e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.95e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.956e-321}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.96e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.966e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.97e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.976e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.98e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.986e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.99e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.996e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.006e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.01e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.016e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.02e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.026e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.03e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.035e-321}],[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.04e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.045e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.05e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.055e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.06e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.065e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.07e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.075e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.08e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.085e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.09e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.095e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.1e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.105e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.11e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.115e-321}]],"buttons":[[[{"enabled":false,"isPressing":false,"isBlinking":false,"frameBlinkStart":-1,"blinkingOn":false,"framePressStart":-1,"position":[-0.2,0.16125,1.25]},{"enabled":false,"isPressing":false,"isBlinking":false,"frameBlinkStart":-1,"blinkingOn":false,"framePressStart":-1,"position":[0,0.16125,1.25]},{"enabled":false,"isPressing":false,"isBlinking":false,"frameBlinkStart":-1,"blinkingOn":false,"framePressStart":-1,"position":[0.2,0.16125,1.25]}],[{"enabled":true,"isPressing":false,"isBlinking":true,"frameBlinkStart":44,"blinkingOn":true,"framePressStart":-1,"position":[0.4,0.16125,1.25]},{"enabled":false,"isPressing":false,"isBlinking":false,"frameBlinkStart":-1,"blinkingOn":false,"framePressStart":-1,"position":[0,0,0]},{"enabled":false,"isPressing":false,"isBlinking":false,"frameBlinkStart":-1,"blinkingOn":false,"framePressStart":-1,"position":[0,0,0]}],[{"enabled":false,"isPressing":false,"isBlinking":false,"frameBlinkStart":-1,"blinkingOn":false,"framePressStart":-1,"position":[-0.4,0.16125,1.25]},{"enabled":false,"isPressing":false,"isBlinking":false,"frameBlinkStart":-1,"blinkingOn":false,"framePressStart":-1,"position":[0,0,0]},{"enabled":false,"isPressing":false,"isBlinking":false,"frameBlinkStart":-1,"blinkingOn":false,"framePressStart":-1,"position":[0,0,0]}]]],"ingots":[{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.12e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.124e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.13e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.134e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.14e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.144e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.15e-321},{"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.154e-321}],"state":{"score":0,"points":0,"coins":0},"sensorCollidersHandles":{"gutter":5e-324,"left-trap":1e-323,"right-trap":1.5e-323},"pusher":{"state":"pusher-moving","nextState":null,"phase":2.775073510672102,"rewards":[],"platformBodyHandle":7.17e-321,"doorBodyHandle":7.164e-321,"door":{"position":0},"lights":{"state":"pusher-lights-idle","nextState":null,"frameLastRefresh":-1,"headIndex":0,"bulbs":[{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0}]}},"sensorGate":{"colliderHandle":7.574e-321,"sensor":{"state":"sensor-letter-idle","nextState":null,"frameFlashStart":-1,"flashCount":0,"letters":[{"state":"sensor-gate-locked-on","nextState":null,"frameFlashStart":-1,"flashCount":0},{"state":"sensor-gate-locked-on","nextState":null,"frameFlashStart":-1,"flashCount":0},{"state":"sensor-gate-locked-on","nextState":null,"frameFlashStart":-1,"flashCount":0},{"state":"sensor-gate-off","nextState":null,"frameFlashStart":-1,"flashCount":0},{"state":"sensor-gate-locked-on","nextState":null,"frameFlashStart":-1,"flashCount":0},{"state":"sensor-gate-locked-on","nextState":null,"frameFlashStart":-1,"flashCount":0}]}},"reelsBox":{"state":"reels-box-idle","nextState":null,"pendingSpins":0,"frameActive":-1,"reels":[{"state":"reel-idle","nextState":null,"index":0,"rotation":0,"previousRotation":0,"currentSpeed":0,"targetIndex":-1,"targetRotation":-1},{"state":"reel-idle","nextState":null,"index":0,"rotation":0,"previousRotation":0,"currentSpeed":0,"targetIndex":-1,"targetRotation":-1},{"state":"reel-idle","nextState":null,"index":0,"rotation":0,"previousRotation":0,"currentSpeed":0,"targetIndex":-1,"targetRotation":-1}],"lights":{"state":"reels-box-lights-idle","headIndex":0,"frameLastRefresh":-1,"bulbs":[{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0}]}},"excavator":{"state":"excavator-idle","nextState":null,"pendingPicks":0,"beaconLightAngle":0,"joints":{"joint-jaw-4":{"jointHandle":0},"joint-jaw-1":{"jointHandle":5e-324},"joint-jaw-3":{"jointHandle":1e-323},"joint-jaw-2":{"jointHandle":1.5e-323},"joint-jaws":{"jointHandle":2e-323},"joint-arms":{"jointHandle":2.5e-323},"joint-arm-rotating-platform":{"jointHandle":3e-323},"joint-rotating-platform":{"jointHandle":3.5e-323},"joint-base":{"jointHandle":4e-323}},"parts":{"jaw-1":{"bodyHandle":7.25e-321},"rotating-platform-base":{"bodyHandle":7.253e-321},"arm-rotating-platform":{"bodyHandle":7.26e-321},"rotating-platform":{"bodyHandle":7.263e-321},"arm-jaws":{"bodyHandle":7.27e-321},"jaws":{"bodyHandle":7.273e-321},"base":{"bodyHandle":7.28e-321},"trap-excavator":{"bodyHandle":7.283e-321},"jaw-4":{"bodyHandle":7.287e-321},"jaw-3":{"bodyHandle":7.29e-321},"jaw-2":{"bodyHandle":7.297e-321},"beacon-light-base":{"bodyHandle":7.3e-321},"beacon-light-mirror":{"bodyHandle":7.307e-321},"beacon-light-bulb":{"bodyHandle":7.31e-321}},"trapSensorHandle":7.643e-321},"leftTower":{"state":"tower-idle","nextState":null,"parts":{"turret":{"bodyHandle":7.22e-321},"stand":{"bodyHandle":7.223e-321},"cabinet":{"bodyHandle":7.23e-321}},"position":0,"oscillationCount":0,"pendingShots":0,"phase":0,"frameLastShot":-1,"lightOn":false},"rightTower":{"state":"tower-idle","nextState":null,"parts":{"turret":{"bodyHandle":7.233e-321},"stand":{"bodyHandle":7.24e-321},"cabinet":{"bodyHandle":7.243e-321}},"position":0,"oscillationCount":0,"pendingShots":0,"phase":0,"frameLastShot":-1,"lightOn":false},"coinRoller":{"state":"coin-roller-idle","nextState":null,"sensorCollidersHandles":{"slot-1":7.9e-321,"slot-3":7.91e-321,"slot-2":7.915e-321,"trap":7.93e-321},"coinIndex":null,"launcherBodyHandle":7.446e-321,"trapBodyHandle":7.45e-321,"doorsBodyHandle":7.46e-321,"launcherPhase":0,"trapPosition":0,"doorsPosition":0,"pendingShots":0,"lights":[{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1},{"on":false,"refreshes":-1}],"lightsHeadIndex":-1,"lightsDirection":1,"lightsRefreshes":-1},"stacker":{"state":"stacker-idle","parts":{"base":{"bodyHandle":7.184e-321},"support":{"bodyHandle":7.19e-321},"arm":{"bodyHandle":7.194e-321},"arm-protection":{"bodyHandle":7.2e-321},"arm-protection-lid":{"bodyHandle":7.203e-321},"arm-door":{"bodyHandle":7.21e-321}},"position":0,"supportPosition":0,"basePosition":0,"armPosition":0,"armDoorPosition":0,"armProtectionLidAngle":0,"rotations":0,"rotationDirection":1,"baseAngle":0,"level":0,"stacks":-1,"levels":-1,"pendingDeliveries":[],"nextState":null,"coinHandle":null,"coinsHandles":[],"lights":{"state":"stacker-lights-idle","nextState":null,"frameLastRefresh":-1,"bulbs":[{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0}]}},"leftStacker":{"state":"stacker-idle","parts":{"base":{"bodyHandle":7.317e-321},"arm":{"bodyHandle":7.32e-321},"support":{"bodyHandle":7.327e-321},"arm-protection-lid":{"bodyHandle":7.33e-321},"arm-door":{"bodyHandle":7.337e-321},"arm-protection":{"bodyHandle":7.34e-321}},"position":0,"supportPosition":0,"basePosition":0,"armPosition":0,"armDoorPosition":0,"armProtectionLidAngle":0,"baseAngle":0,"level":0,"levels":-1,"pendingDeliveries":[],"nextState":null,"coinHandle":null,"coinsHandles":[],"lights":{"state":"stacker-lights-idle","nextState":null,"frameLastRefresh":-1,"bulbs":[{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0}]}},"rightStacker":{"state":"stacker-idle","parts":{"base":{"bodyHandle":7.347e-321},"arm":{"bodyHandle":7.35e-321},"support":{"bodyHandle":7.357e-321},"arm-protection-lid":{"bodyHandle":7.36e-321},"arm-door":{"bodyHandle":7.367e-321},"arm-protection":{"bodyHandle":7.37e-321}},"position":0,"supportPosition":0,"basePosition":0,"armPosition":0,"armDoorPosition":0,"armProtectionLidAngle":0,"baseAngle":0,"level":0,"levels":-1,"pendingDeliveries":[],"nextState":null,"coinHandle":null,"coinsHandles":[],"lights":{"state":"stacker-lights-idle","nextState":null,"frameLastRefresh":-1,"bulbs":[{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0},{"intensity":0}]}},"sweepers":{"state":"sweepers-idle","nextState":null,"parts":{"left-sweeper":{"bodyHandle":7.376e-321},"left-base":{"bodyHandle":7.38e-321},"right-base":{"bodyHandle":7.386e-321},"left-door":{"bodyHandle":7.39e-321},"right-door":{"bodyHandle":7.396e-321},"left-flap":{"bodyHandle":7.4e-321},"right-flap":{"bodyHandle":7.406e-321},"right-sweeper":{"bodyHandle":7.41e-321}},"position":0,"rotation":0,"translation":0,"sweepersRotationZ":0,"sweepersRotationY":0,"doorsRotation":0,"pendingSweeps":[],"lights":{"state":"sweepers-lights-idle","nextState":null,"leftOn":false,"rightOn":false,"frameLastRefresh":-1}},"runs":{"state":"runs-idle","step":-1,"timeRunCompleted":-1},"scene":{"world":""}}'),m2={time:UX,cabinet:ZX},kX=M3.TIMESTEP*1e3;class Ni{static DEBUG_MAX_SPEED=!1;static DEBUG_EMPTY_POOL=!1;static DEBUG_COLLIDERS=!1;static DEBUG_FPS=!1;static DEBUG_POLYGONS=!1;static DEBUG_CONTROLS=!1;static DEBUG_AUTOPLAY=!1;static DEBUG_HIDE_CABINET=!1;static#e;static#t=0;static#n;static#a=!1;static#o=!1;static#r;static#c;static pixelRatio=2;static async initialize(){this.#n=document.body;const e=new GX(this.width/this.height);this.#r=new M3({containerElement:this.#n,camera:e}),await this.#r.initialize(this.width,this.height,this.pixelRatio),this.#e=new IX({scene:this.#r}),this.#e.DEBUG_AUTOPLAY=this.DEBUG_AUTOPLAY,this.#e.DEBUG_HIDE_CABINET=this.DEBUG_HIDE_CABINET,await this.#e.initialize(),this.DEBUG_EMPTY_POOL||await this.load(m2),this.#c=new jX({scene:this.#r,camera:e,interactiveObjects:this.#e.interactiveObjects}),this.#c.initialize(this.width,this.height),nr.DEBUG_COLLIDERS=this.DEBUG_COLLIDERS,nr.DEBUG_FPS=this.DEBUG_FPS,nr.DEBUG_POLYGONS=this.DEBUG_POLYGONS,nr.DEBUG_CONTROLS=this.DEBUG_CONTROLS,await nr.initialize({scene:this.#r,camera:e,containerElement:this.#n,joints:this.#e.joints}),new ResizeObserver(()=>this.#s()).observe(this.#n),onkeydown=async n=>{(n.key==="s"||n.key==="S")&&n.ctrlKey&&(n.preventDefault(),console.log(await this.save())),(n.key==="l"||n.key==="L")&&n.ctrlKey&&(n.preventDefault(),await this.load(m2))}}static run(){this.#i()}static#i(){this.#o&&(this.#o=!1,this.#a=!1),this.#a||(this.#e.update(this.#t),this.#c.update(),nr.update(),this.#r.step(),this.#r.render(),this.#t+=kX),this.DEBUG_MAX_SPEED?setTimeout(()=>this.#i(),0):requestAnimationFrame(()=>this.#i())}static async save(){return{time:this.#t,cabinet:await this.#e.save()}}static async load(e){this.#a=!0,this.#t=e.time,await this.#e.load(e.cabinet),this.#a=!1,this.#o=!0}static#s(){this.#r.resize(this.width,this.height,this.pixelRatio),this.#e.resize(this.width,this.height)}static get width(){return this.#n.clientWidth}static get height(){return this.#n.clientHeight}}Ni.DEBUG_EMPTY_POOL=0;Ni.DEBUG_AUTOPLAY=0;Ni.DEBUG_MAX_SPEED=0;Ni.DEBUG_COLLIDERS=0;Ni.DEBUG_HIDE_CABINET=0;Ni.DEBUG_POLYGONS=0;Ni.DEBUG_CONTROLS=1;Ni.DEBUG_FPS=1;await Ni.initialize();Ni.run();
