(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const o of i)if(o.type==="childList")for(const s of o.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&n(s)}).observe(document,{childList:!0,subtree:!0});function t(i){const o={};return i.integrity&&(o.integrity=i.integrity),i.referrerPolicy&&(o.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?o.credentials="include":i.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function n(i){if(i.ep)return;i.ep=!0;const o=t(i);fetch(i.href,o)}})();/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const Cl="176",Tr={ROTATE:0,DOLLY:1,PAN:2},wr={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},Hp=0,Ed=1,Ip=2,hh=1,Np=2,Vn=3,ci=0,dn=1,Wn=2,Pi=0,Sr=1,Rd=2,Pd=3,Ld=4,Op=5,ki=100,Cp=101,Dp=102,_p=103,zp=104,Up=200,jp=201,Fp=202,Vp=203,Ac=204,Hc=205,Xp=206,kp=207,Wp=208,Bp=209,Gp=210,Zp=211,Yp=212,qp=213,Kp=214,Ic=0,Nc=1,Oc=2,Pr=3,Cc=4,Dc=5,_c=6,zc=7,ph=0,Jp=1,Qp=2,Li=0,$p=1,ef=2,tf=3,nf=4,rf=5,of=6,sf=7,Ad="attached",af="detached",fh=300,Lr=301,Ar=302,Uc=303,jc=304,qs=306,Hr=1e3,Mi=1001,Ds=1002,rn=1003,mh=1004,ao=1005,bn=1006,Ms=1007,oi=1008,Gn=1009,bh=1010,yh=1011,go=1012,Dl=1013,Gi=1014,_n=1015,No=1016,_l=1017,zl=1018,wo=1020,gh=35902,wh=1021,xh=1022,Mn=1023,xo=1026,vo=1027,Ul=1028,jl=1029,vh=1030,Fl=1031,Vl=1033,Es=33776,Rs=33777,Ps=33778,Ls=33779,Fc=35840,Vc=35841,Xc=35842,kc=35843,Wc=36196,Bc=37492,Gc=37496,Zc=37808,Yc=37809,qc=37810,Kc=37811,Jc=37812,Qc=37813,$c=37814,el=37815,tl=37816,nl=37817,il=37818,rl=37819,ol=37820,sl=37821,As=36492,al=36494,cl=36495,Th=36283,ll=36284,dl=36285,ul=36286,To=2300,So=2301,pa=2302,Hd=2400,Id=2401,Nd=2402,cf=2500,lf=0,Sh=1,hl=2,df=3200,uf=3201,Mh=0,hf=1,Si="",Gt="srgb",an="srgb-linear",_s="linear",dt="srgb",$i=7680,Od=519,pf=512,ff=513,mf=514,Eh=515,bf=516,yf=517,gf=518,wf=519,pl=35044,Cd="300 es",si=2e3,zs=2001;class Ji{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){const n=this._listeners;return n===void 0?!1:n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){const n=this._listeners;if(n===void 0)return;const i=n[e];if(i!==void 0){const o=i.indexOf(t);o!==-1&&i.splice(o,1)}}dispatchEvent(e){const t=this._listeners;if(t===void 0)return;const n=t[e.type];if(n!==void 0){e.target=this;const i=n.slice(0);for(let o=0,s=i.length;o<s;o++)i[o].call(this,e);e.target=null}}}const Yt=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let Dd=1234567;const Mr=Math.PI/180,Ir=180/Math.PI;function Un(){const r=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(Yt[r&255]+Yt[r>>8&255]+Yt[r>>16&255]+Yt[r>>24&255]+"-"+Yt[e&255]+Yt[e>>8&255]+"-"+Yt[e>>16&15|64]+Yt[e>>24&255]+"-"+Yt[t&63|128]+Yt[t>>8&255]+"-"+Yt[t>>16&255]+Yt[t>>24&255]+Yt[n&255]+Yt[n>>8&255]+Yt[n>>16&255]+Yt[n>>24&255]).toLowerCase()}function Be(r,e,t){return Math.max(e,Math.min(t,r))}function Xl(r,e){return(r%e+e)%e}function xf(r,e,t,n,i){return n+(r-e)*(i-n)/(t-e)}function vf(r,e,t){return r!==e?(t-r)/(e-r):0}function uo(r,e,t){return(1-t)*r+t*e}function Tf(r,e,t,n){return uo(r,e,1-Math.exp(-t*n))}function Sf(r,e=1){return e-Math.abs(Xl(r,e*2)-e)}function Mf(r,e,t){return r<=e?0:r>=t?1:(r=(r-e)/(t-e),r*r*(3-2*r))}function Ef(r,e,t){return r<=e?0:r>=t?1:(r=(r-e)/(t-e),r*r*r*(r*(r*6-15)+10))}function Rf(r,e){return r+Math.floor(Math.random()*(e-r+1))}function Pf(r,e){return r+Math.random()*(e-r)}function Lf(r){return r*(.5-Math.random())}function Af(r){r!==void 0&&(Dd=r);let e=Dd+=1831565813;return e=Math.imul(e^e>>>15,e|1),e^=e+Math.imul(e^e>>>7,e|61),((e^e>>>14)>>>0)/4294967296}function Hf(r){return r*Mr}function If(r){return r*Ir}function Nf(r){return(r&r-1)===0&&r!==0}function Of(r){return Math.pow(2,Math.ceil(Math.log(r)/Math.LN2))}function Cf(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}function Df(r,e,t,n,i){const o=Math.cos,s=Math.sin,a=o(t/2),c=s(t/2),l=o((e+n)/2),d=s((e+n)/2),u=o((e-n)/2),h=s((e-n)/2),f=o((n-e)/2),g=s((n-e)/2);switch(i){case"XYX":r.set(a*d,c*u,c*h,a*l);break;case"YZY":r.set(c*h,a*d,c*u,a*l);break;case"ZXZ":r.set(c*u,c*h,a*d,a*l);break;case"XZX":r.set(a*d,c*g,c*f,a*l);break;case"YXY":r.set(c*f,a*d,c*g,a*l);break;case"ZYZ":r.set(c*g,c*f,a*d,a*l);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}function Dn(r,e){switch(e.constructor){case Float32Array:return r;case Uint32Array:return r/4294967295;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int32Array:return Math.max(r/2147483647,-1);case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function ct(r,e){switch(e.constructor){case Float32Array:return r;case Uint32Array:return Math.round(r*4294967295);case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int32Array:return Math.round(r*2147483647);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}const Rh={DEG2RAD:Mr,RAD2DEG:Ir,generateUUID:Un,clamp:Be,euclideanModulo:Xl,mapLinear:xf,inverseLerp:vf,lerp:uo,damp:Tf,pingpong:Sf,smoothstep:Mf,smootherstep:Ef,randInt:Rf,randFloat:Pf,randFloatSpread:Lf,seededRandom:Af,degToRad:Hf,radToDeg:If,isPowerOfTwo:Nf,ceilPowerOfTwo:Of,floorPowerOfTwo:Cf,setQuaternionFromProperEuler:Df,normalize:ct,denormalize:Dn};class Oe{constructor(e=0,t=0){Oe.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Be(this.x,e.x,t.x),this.y=Be(this.y,e.y,t.y),this}clampScalar(e,t){return this.x=Be(this.x,e,t),this.y=Be(this.y,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Be(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(Be(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),i=Math.sin(t),o=this.x-e.x,s=this.y-e.y;return this.x=o*n-s*i+e.x,this.y=o*i+s*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class je{constructor(e,t,n,i,o,s,a,c,l){je.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],e!==void 0&&this.set(e,t,n,i,o,s,a,c,l)}set(e,t,n,i,o,s,a,c,l){const d=this.elements;return d[0]=e,d[1]=i,d[2]=a,d[3]=t,d[4]=o,d[5]=c,d[6]=n,d[7]=s,d[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,o=this.elements,s=n[0],a=n[3],c=n[6],l=n[1],d=n[4],u=n[7],h=n[2],f=n[5],g=n[8],w=i[0],y=i[3],m=i[6],P=i[1],E=i[4],S=i[7],D=i[2],H=i[5],I=i[8];return o[0]=s*w+a*P+c*D,o[3]=s*y+a*E+c*H,o[6]=s*m+a*S+c*I,o[1]=l*w+d*P+u*D,o[4]=l*y+d*E+u*H,o[7]=l*m+d*S+u*I,o[2]=h*w+f*P+g*D,o[5]=h*y+f*E+g*H,o[8]=h*m+f*S+g*I,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],i=e[2],o=e[3],s=e[4],a=e[5],c=e[6],l=e[7],d=e[8];return t*s*d-t*a*l-n*o*d+n*a*c+i*o*l-i*s*c}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],o=e[3],s=e[4],a=e[5],c=e[6],l=e[7],d=e[8],u=d*s-a*l,h=a*c-d*o,f=l*o-s*c,g=t*u+n*h+i*f;if(g===0)return this.set(0,0,0,0,0,0,0,0,0);const w=1/g;return e[0]=u*w,e[1]=(i*l-d*n)*w,e[2]=(a*n-i*s)*w,e[3]=h*w,e[4]=(d*t-i*c)*w,e[5]=(i*o-a*t)*w,e[6]=f*w,e[7]=(n*c-l*t)*w,e[8]=(s*t-n*o)*w,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,i,o,s,a){const c=Math.cos(o),l=Math.sin(o);return this.set(n*c,n*l,-n*(c*s+l*a)+s+e,-i*l,i*c,-i*(-l*s+c*a)+a+t,0,0,1),this}scale(e,t){return this.premultiply(fa.makeScale(e,t)),this}rotate(e){return this.premultiply(fa.makeRotation(-e)),this}translate(e,t){return this.premultiply(fa.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,n,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return new this.constructor().fromArray(this.elements)}}const fa=new je;function Ph(r){for(let e=r.length-1;e>=0;--e)if(r[e]>=65535)return!0;return!1}function Mo(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}function _f(){const r=Mo("canvas");return r.style.display="block",r}const _d={};function Hs(r){r in _d||(_d[r]=!0,console.warn(r))}function zf(r,e,t){return new Promise(function(n,i){function o(){switch(r.clientWaitSync(e,r.SYNC_FLUSH_COMMANDS_BIT,0)){case r.WAIT_FAILED:i();break;case r.TIMEOUT_EXPIRED:setTimeout(o,t);break;default:n()}}setTimeout(o,t)})}function Uf(r){const e=r.elements;e[2]=.5*e[2]+.5*e[3],e[6]=.5*e[6]+.5*e[7],e[10]=.5*e[10]+.5*e[11],e[14]=.5*e[14]+.5*e[15]}function jf(r){const e=r.elements;e[11]===-1?(e[10]=-e[10]-1,e[14]=-e[14]):(e[10]=-e[10],e[14]=-e[14]+1)}const zd=new je().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),Ud=new je().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function Ff(){const r={enabled:!0,workingColorSpace:an,spaces:{},convert:function(i,o,s){return this.enabled===!1||o===s||!o||!s||(this.spaces[o].transfer===dt&&(i.r=ai(i.r),i.g=ai(i.g),i.b=ai(i.b)),this.spaces[o].primaries!==this.spaces[s].primaries&&(i.applyMatrix3(this.spaces[o].toXYZ),i.applyMatrix3(this.spaces[s].fromXYZ)),this.spaces[s].transfer===dt&&(i.r=Er(i.r),i.g=Er(i.g),i.b=Er(i.b))),i},fromWorkingColorSpace:function(i,o){return this.convert(i,this.workingColorSpace,o)},toWorkingColorSpace:function(i,o){return this.convert(i,o,this.workingColorSpace)},getPrimaries:function(i){return this.spaces[i].primaries},getTransfer:function(i){return i===Si?_s:this.spaces[i].transfer},getLuminanceCoefficients:function(i,o=this.workingColorSpace){return i.fromArray(this.spaces[o].luminanceCoefficients)},define:function(i){Object.assign(this.spaces,i)},_getMatrix:function(i,o,s){return i.copy(this.spaces[o].toXYZ).multiply(this.spaces[s].fromXYZ)},_getDrawingBufferColorSpace:function(i){return this.spaces[i].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(i=this.workingColorSpace){return this.spaces[i].workingColorSpaceConfig.unpackColorSpace}},e=[.64,.33,.3,.6,.15,.06],t=[.2126,.7152,.0722],n=[.3127,.329];return r.define({[an]:{primaries:e,whitePoint:n,transfer:_s,toXYZ:zd,fromXYZ:Ud,luminanceCoefficients:t,workingColorSpaceConfig:{unpackColorSpace:Gt},outputColorSpaceConfig:{drawingBufferColorSpace:Gt}},[Gt]:{primaries:e,whitePoint:n,transfer:dt,toXYZ:zd,fromXYZ:Ud,luminanceCoefficients:t,outputColorSpaceConfig:{drawingBufferColorSpace:Gt}}}),r}const Qe=Ff();function ai(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function Er(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}let er;class Vf{static getDataURL(e,t="image/png"){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let n;if(e instanceof HTMLCanvasElement)n=e;else{er===void 0&&(er=Mo("canvas")),er.width=e.width,er.height=e.height;const i=er.getContext("2d");e instanceof ImageData?i.putImageData(e,0,0):i.drawImage(e,0,0,e.width,e.height),n=er}return n.toDataURL(t)}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const t=Mo("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const i=n.getImageData(0,0,e.width,e.height),o=i.data;for(let s=0;s<o.length;s++)o[s]=ai(o[s]/255)*255;return n.putImageData(i,0,0),t}else if(e.data){const t=e.data.slice(0);for(let n=0;n<t.length;n++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[n]=Math.floor(ai(t[n]/255)*255):t[n]=ai(t[n]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}let Xf=0;class kl{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:Xf++}),this.uuid=Un(),this.data=e,this.dataReady=!0,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let o;if(Array.isArray(i)){o=[];for(let s=0,a=i.length;s<a;s++)i[s].isDataTexture?o.push(ma(i[s].image)):o.push(ma(i[s]))}else o=ma(i);n.url=o}return t||(e.images[this.uuid]=n),n}}function ma(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?Vf.getDataURL(r):r.data?{data:Array.from(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let kf=0;class kt extends Ji{constructor(e=kt.DEFAULT_IMAGE,t=kt.DEFAULT_MAPPING,n=Mi,i=Mi,o=bn,s=oi,a=Mn,c=Gn,l=kt.DEFAULT_ANISOTROPY,d=Si){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:kf++}),this.uuid=Un(),this.name="",this.source=new kl(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=o,this.minFilter=s,this.anisotropy=l,this.format=a,this.internalFormat=null,this.type=c,this.offset=new Oe(0,0),this.repeat=new Oe(1,1),this.center=new Oe(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new je,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=d,this.userData={},this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.isTextureArray=!1,this.pmremVersion=0}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.renderTarget=e.renderTarget,this.isRenderTargetTexture=e.isRenderTargetTexture,this.isTextureArray=e.isTextureArray,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==fh)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case Hr:e.x=e.x-Math.floor(e.x);break;case Mi:e.x=e.x<0?0:1;break;case Ds:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case Hr:e.y=e.y-Math.floor(e.y);break;case Mi:e.y=e.y<0?0:1;break;case Ds:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(e){e===!0&&this.pmremVersion++}}kt.DEFAULT_IMAGE=null;kt.DEFAULT_MAPPING=fh;kt.DEFAULT_ANISOTROPY=1;class it{constructor(e=0,t=0,n=0,i=1){it.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=i}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,o=this.w,s=e.elements;return this.x=s[0]*t+s[4]*n+s[8]*i+s[12]*o,this.y=s[1]*t+s[5]*n+s[9]*i+s[13]*o,this.z=s[2]*t+s[6]*n+s[10]*i+s[14]*o,this.w=s[3]*t+s[7]*n+s[11]*i+s[15]*o,this}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this.w/=e.w,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,i,o;const c=e.elements,l=c[0],d=c[4],u=c[8],h=c[1],f=c[5],g=c[9],w=c[2],y=c[6],m=c[10];if(Math.abs(d-h)<.01&&Math.abs(u-w)<.01&&Math.abs(g-y)<.01){if(Math.abs(d+h)<.1&&Math.abs(u+w)<.1&&Math.abs(g+y)<.1&&Math.abs(l+f+m-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const E=(l+1)/2,S=(f+1)/2,D=(m+1)/2,H=(d+h)/4,I=(u+w)/4,z=(g+y)/4;return E>S&&E>D?E<.01?(n=0,i=.707106781,o=.707106781):(n=Math.sqrt(E),i=H/n,o=I/n):S>D?S<.01?(n=.707106781,i=0,o=.707106781):(i=Math.sqrt(S),n=H/i,o=z/i):D<.01?(n=.707106781,i=.707106781,o=0):(o=Math.sqrt(D),n=I/o,i=z/o),this.set(n,i,o,t),this}let P=Math.sqrt((y-g)*(y-g)+(u-w)*(u-w)+(h-d)*(h-d));return Math.abs(P)<.001&&(P=1),this.x=(y-g)/P,this.y=(u-w)/P,this.z=(h-d)/P,this.w=Math.acos((l+f+m-1)/2),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this.w=t[15],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Be(this.x,e.x,t.x),this.y=Be(this.y,e.y,t.y),this.z=Be(this.z,e.z,t.z),this.w=Be(this.w,e.w,t.w),this}clampScalar(e,t){return this.x=Be(this.x,e,t),this.y=Be(this.y,e,t),this.z=Be(this.z,e,t),this.w=Be(this.w,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Be(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class Wf extends Ji{constructor(e=1,t=1,n={}){super(),this.isRenderTarget=!0,this.width=e,this.height=t,this.depth=n.depth?n.depth:1,this.scissor=new it(0,0,e,t),this.scissorTest=!1,this.viewport=new it(0,0,e,t);const i={width:e,height:t,depth:this.depth};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:bn,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1,multiview:!1},n);const o=new kt(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);o.flipY=!1,o.generateMipmaps=n.generateMipmaps,o.internalFormat=n.internalFormat,this.textures=[];const s=n.count;for(let a=0;a<s;a++)this.textures[a]=o.clone(),this.textures[a].isRenderTargetTexture=!0,this.textures[a].renderTarget=this;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=n.depthTexture,this.samples=n.samples,this.multiview=n.multiview}get texture(){return this.textures[0]}set texture(e){this.textures[0]=e}set depthTexture(e){this._depthTexture!==null&&(this._depthTexture.renderTarget=null),e!==null&&(e.renderTarget=this),this._depthTexture=e}get depthTexture(){return this._depthTexture}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e,this.height=t,this.depth=n;for(let i=0,o=this.textures.length;i<o;i++)this.textures[i].image.width=e,this.textures[i].image.height=t,this.textures[i].image.depth=n;this.dispose()}this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.textures.length=0;for(let t=0,n=e.textures.length;t<n;t++){this.textures[t]=e.textures[t].clone(),this.textures[t].isRenderTargetTexture=!0,this.textures[t].renderTarget=this;const i=Object.assign({},e.textures[t].image);this.textures[t].source=new kl(i)}return this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.resolveDepthBuffer=e.resolveDepthBuffer,this.resolveStencilBuffer=e.resolveStencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Zi extends Wf{constructor(e=1,t=1,n={}){super(e,t,n),this.isWebGLRenderTarget=!0}}class Lh extends kt{constructor(e=null,t=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=rn,this.minFilter=rn,this.wrapR=Mi,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class Bf extends kt{constructor(e=null,t=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=rn,this.minFilter=rn,this.wrapR=Mi,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}let Rt=class{constructor(e=0,t=0,n=0,i=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=i}static slerpFlat(e,t,n,i,o,s,a){let c=n[i+0],l=n[i+1],d=n[i+2],u=n[i+3];const h=o[s+0],f=o[s+1],g=o[s+2],w=o[s+3];if(a===0){e[t+0]=c,e[t+1]=l,e[t+2]=d,e[t+3]=u;return}if(a===1){e[t+0]=h,e[t+1]=f,e[t+2]=g,e[t+3]=w;return}if(u!==w||c!==h||l!==f||d!==g){let y=1-a;const m=c*h+l*f+d*g+u*w,P=m>=0?1:-1,E=1-m*m;if(E>Number.EPSILON){const D=Math.sqrt(E),H=Math.atan2(D,m*P);y=Math.sin(y*H)/D,a=Math.sin(a*H)/D}const S=a*P;if(c=c*y+h*S,l=l*y+f*S,d=d*y+g*S,u=u*y+w*S,y===1-a){const D=1/Math.sqrt(c*c+l*l+d*d+u*u);c*=D,l*=D,d*=D,u*=D}}e[t]=c,e[t+1]=l,e[t+2]=d,e[t+3]=u}static multiplyQuaternionsFlat(e,t,n,i,o,s){const a=n[i],c=n[i+1],l=n[i+2],d=n[i+3],u=o[s],h=o[s+1],f=o[s+2],g=o[s+3];return e[t]=a*g+d*u+c*f-l*h,e[t+1]=c*g+d*h+l*u-a*f,e[t+2]=l*g+d*f+a*h-c*u,e[t+3]=d*g-a*u-c*h-l*f,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t=!0){const n=e._x,i=e._y,o=e._z,s=e._order,a=Math.cos,c=Math.sin,l=a(n/2),d=a(i/2),u=a(o/2),h=c(n/2),f=c(i/2),g=c(o/2);switch(s){case"XYZ":this._x=h*d*u+l*f*g,this._y=l*f*u-h*d*g,this._z=l*d*g+h*f*u,this._w=l*d*u-h*f*g;break;case"YXZ":this._x=h*d*u+l*f*g,this._y=l*f*u-h*d*g,this._z=l*d*g-h*f*u,this._w=l*d*u+h*f*g;break;case"ZXY":this._x=h*d*u-l*f*g,this._y=l*f*u+h*d*g,this._z=l*d*g+h*f*u,this._w=l*d*u-h*f*g;break;case"ZYX":this._x=h*d*u-l*f*g,this._y=l*f*u+h*d*g,this._z=l*d*g-h*f*u,this._w=l*d*u+h*f*g;break;case"YZX":this._x=h*d*u+l*f*g,this._y=l*f*u+h*d*g,this._z=l*d*g-h*f*u,this._w=l*d*u-h*f*g;break;case"XZY":this._x=h*d*u-l*f*g,this._y=l*f*u-h*d*g,this._z=l*d*g+h*f*u,this._w=l*d*u+h*f*g;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+s)}return t===!0&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],o=t[8],s=t[1],a=t[5],c=t[9],l=t[2],d=t[6],u=t[10],h=n+a+u;if(h>0){const f=.5/Math.sqrt(h+1);this._w=.25/f,this._x=(d-c)*f,this._y=(o-l)*f,this._z=(s-i)*f}else if(n>a&&n>u){const f=2*Math.sqrt(1+n-a-u);this._w=(d-c)/f,this._x=.25*f,this._y=(i+s)/f,this._z=(o+l)/f}else if(a>u){const f=2*Math.sqrt(1+a-n-u);this._w=(o-l)/f,this._x=(i+s)/f,this._y=.25*f,this._z=(c+d)/f}else{const f=2*Math.sqrt(1+u-n-a);this._w=(s-i)/f,this._x=(o+l)/f,this._y=(c+d)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(Be(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const i=Math.min(1,t/n);return this.slerp(e,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,i=e._y,o=e._z,s=e._w,a=t._x,c=t._y,l=t._z,d=t._w;return this._x=n*d+s*a+i*l-o*c,this._y=i*d+s*c+o*a-n*l,this._z=o*d+s*l+n*c-i*a,this._w=s*d-n*a-i*c-o*l,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,i=this._y,o=this._z,s=this._w;let a=s*e._w+n*e._x+i*e._y+o*e._z;if(a<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,a=-a):this.copy(e),a>=1)return this._w=s,this._x=n,this._y=i,this._z=o,this;const c=1-a*a;if(c<=Number.EPSILON){const f=1-t;return this._w=f*s+t*this._w,this._x=f*n+t*this._x,this._y=f*i+t*this._y,this._z=f*o+t*this._z,this.normalize(),this}const l=Math.sqrt(c),d=Math.atan2(l,a),u=Math.sin((1-t)*d)/l,h=Math.sin(t*d)/l;return this._w=s*u+this._w*h,this._x=n*u+this._x*h,this._y=i*u+this._y*h,this._z=o*u+this._z*h,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=2*Math.PI*Math.random(),t=2*Math.PI*Math.random(),n=Math.random(),i=Math.sqrt(1-n),o=Math.sqrt(n);return this.set(i*Math.sin(e),i*Math.cos(e),o*Math.sin(t),o*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}},A=class Ah{constructor(e=0,t=0,n=0){Ah.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(jd.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(jd.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,i=this.z,o=e.elements;return this.x=o[0]*t+o[3]*n+o[6]*i,this.y=o[1]*t+o[4]*n+o[7]*i,this.z=o[2]*t+o[5]*n+o[8]*i,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,o=e.elements,s=1/(o[3]*t+o[7]*n+o[11]*i+o[15]);return this.x=(o[0]*t+o[4]*n+o[8]*i+o[12])*s,this.y=(o[1]*t+o[5]*n+o[9]*i+o[13])*s,this.z=(o[2]*t+o[6]*n+o[10]*i+o[14])*s,this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z,o=e.x,s=e.y,a=e.z,c=e.w,l=2*(s*i-a*n),d=2*(a*t-o*i),u=2*(o*n-s*t);return this.x=t+c*l+s*u-a*d,this.y=n+c*d+a*l-o*u,this.z=i+c*u+o*d-s*l,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,i=this.z,o=e.elements;return this.x=o[0]*t+o[4]*n+o[8]*i,this.y=o[1]*t+o[5]*n+o[9]*i,this.z=o[2]*t+o[6]*n+o[10]*i,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Be(this.x,e.x,t.x),this.y=Be(this.y,e.y,t.y),this.z=Be(this.z,e.z,t.z),this}clampScalar(e,t){return this.x=Be(this.x,e,t),this.y=Be(this.y,e,t),this.z=Be(this.z,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Be(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,i=e.y,o=e.z,s=t.x,a=t.y,c=t.z;return this.x=i*c-o*a,this.y=o*s-n*c,this.z=n*a-i*s,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return ba.copy(this).projectOnVector(e),this.sub(ba)}reflect(e){return this.sub(ba.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(Be(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=Math.random()*Math.PI*2,t=Math.random()*2-1,n=Math.sqrt(1-t*t);return this.x=n*Math.cos(e),this.y=t,this.z=n*Math.sin(e),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}};const ba=new A,jd=new Rt;class hi{constructor(e=new A(1/0,1/0,1/0),t=new A(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3)this.expandByPoint(Pn.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++)this.expandByPoint(Pn.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=Pn.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(n!==void 0){const o=n.getAttribute("position");if(t===!0&&o!==void 0&&e.isInstancedMesh!==!0)for(let s=0,a=o.count;s<a;s++)e.isMesh===!0?e.getVertexPosition(s,Pn):Pn.fromBufferAttribute(o,s),Pn.applyMatrix4(e.matrixWorld),this.expandByPoint(Pn);else e.boundingBox!==void 0?(e.boundingBox===null&&e.computeBoundingBox(),zo.copy(e.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),zo.copy(n.boundingBox)),zo.applyMatrix4(e.matrixWorld),this.union(zo)}const i=e.children;for(let o=0,s=i.length;o<s;o++)this.expandByObject(i[o],t);return this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y&&e.z>=this.min.z&&e.z<=this.max.z}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y&&e.max.z>=this.min.z&&e.min.z<=this.max.z}intersectsSphere(e){return this.clampPoint(e.center,Pn),Pn.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(Wr),Uo.subVectors(this.max,Wr),tr.subVectors(e.a,Wr),nr.subVectors(e.b,Wr),ir.subVectors(e.c,Wr),fi.subVectors(nr,tr),mi.subVectors(ir,nr),Oi.subVectors(tr,ir);let t=[0,-fi.z,fi.y,0,-mi.z,mi.y,0,-Oi.z,Oi.y,fi.z,0,-fi.x,mi.z,0,-mi.x,Oi.z,0,-Oi.x,-fi.y,fi.x,0,-mi.y,mi.x,0,-Oi.y,Oi.x,0];return!ya(t,tr,nr,ir,Uo)||(t=[1,0,0,0,1,0,0,0,1],!ya(t,tr,nr,ir,Uo))?!1:(jo.crossVectors(fi,mi),t=[jo.x,jo.y,jo.z],ya(t,tr,nr,ir,Uo))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,Pn).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(Pn).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(Jn[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),Jn[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),Jn[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),Jn[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),Jn[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),Jn[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),Jn[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),Jn[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(Jn),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const Jn=[new A,new A,new A,new A,new A,new A,new A,new A],Pn=new A,zo=new hi,tr=new A,nr=new A,ir=new A,fi=new A,mi=new A,Oi=new A,Wr=new A,Uo=new A,jo=new A,Ci=new A;function ya(r,e,t,n,i){for(let o=0,s=r.length-3;o<=s;o+=3){Ci.fromArray(r,o);const a=i.x*Math.abs(Ci.x)+i.y*Math.abs(Ci.y)+i.z*Math.abs(Ci.z),c=e.dot(Ci),l=t.dot(Ci),d=n.dot(Ci);if(Math.max(-Math.max(c,l,d),Math.min(c,l,d))>a)return!1}return!0}const Gf=new hi,Br=new A,ga=new A;class Yn{constructor(e=new A,t=-1){this.isSphere=!0,this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):Gf.setFromPoints(e).getCenter(n);let i=0;for(let o=0,s=e.length;o<s;o++)i=Math.max(i,n.distanceToSquared(e[o]));return this.radius=Math.sqrt(i),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;Br.subVectors(e,this.center);const t=Br.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t),i=(n-this.radius)*.5;this.center.addScaledVector(Br,i/n),this.radius+=i}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(ga.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(Br.copy(e.center).add(ga)),this.expandByPoint(Br.copy(e.center).sub(ga))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const Qn=new A,wa=new A,Fo=new A,bi=new A,xa=new A,Vo=new A,va=new A;class _r{constructor(e=new A,t=new A(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,Qn)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=Qn.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(Qn.copy(this.origin).addScaledVector(this.direction,t),Qn.distanceToSquared(e))}distanceSqToSegment(e,t,n,i){wa.copy(e).add(t).multiplyScalar(.5),Fo.copy(t).sub(e).normalize(),bi.copy(this.origin).sub(wa);const o=e.distanceTo(t)*.5,s=-this.direction.dot(Fo),a=bi.dot(this.direction),c=-bi.dot(Fo),l=bi.lengthSq(),d=Math.abs(1-s*s);let u,h,f,g;if(d>0)if(u=s*c-a,h=s*a-c,g=o*d,u>=0)if(h>=-g)if(h<=g){const w=1/d;u*=w,h*=w,f=u*(u+s*h+2*a)+h*(s*u+h+2*c)+l}else h=o,u=Math.max(0,-(s*h+a)),f=-u*u+h*(h+2*c)+l;else h=-o,u=Math.max(0,-(s*h+a)),f=-u*u+h*(h+2*c)+l;else h<=-g?(u=Math.max(0,-(-s*o+a)),h=u>0?-o:Math.min(Math.max(-o,-c),o),f=-u*u+h*(h+2*c)+l):h<=g?(u=0,h=Math.min(Math.max(-o,-c),o),f=h*(h+2*c)+l):(u=Math.max(0,-(s*o+a)),h=u>0?o:Math.min(Math.max(-o,-c),o),f=-u*u+h*(h+2*c)+l);else h=s>0?-o:o,u=Math.max(0,-(s*h+a)),f=-u*u+h*(h+2*c)+l;return n&&n.copy(this.origin).addScaledVector(this.direction,u),i&&i.copy(wa).addScaledVector(Fo,h),f}intersectSphere(e,t){Qn.subVectors(e.center,this.origin);const n=Qn.dot(this.direction),i=Qn.dot(Qn)-n*n,o=e.radius*e.radius;if(i>o)return null;const s=Math.sqrt(o-i),a=n-s,c=n+s;return c<0?null:a<0?this.at(c,t):this.at(a,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,i,o,s,a,c;const l=1/this.direction.x,d=1/this.direction.y,u=1/this.direction.z,h=this.origin;return l>=0?(n=(e.min.x-h.x)*l,i=(e.max.x-h.x)*l):(n=(e.max.x-h.x)*l,i=(e.min.x-h.x)*l),d>=0?(o=(e.min.y-h.y)*d,s=(e.max.y-h.y)*d):(o=(e.max.y-h.y)*d,s=(e.min.y-h.y)*d),n>s||o>i||((o>n||isNaN(n))&&(n=o),(s<i||isNaN(i))&&(i=s),u>=0?(a=(e.min.z-h.z)*u,c=(e.max.z-h.z)*u):(a=(e.max.z-h.z)*u,c=(e.min.z-h.z)*u),n>c||a>i)||((a>n||n!==n)&&(n=a),(c<i||i!==i)&&(i=c),i<0)?null:this.at(n>=0?n:i,t)}intersectsBox(e){return this.intersectBox(e,Qn)!==null}intersectTriangle(e,t,n,i,o){xa.subVectors(t,e),Vo.subVectors(n,e),va.crossVectors(xa,Vo);let s=this.direction.dot(va),a;if(s>0){if(i)return null;a=1}else if(s<0)a=-1,s=-s;else return null;bi.subVectors(this.origin,e);const c=a*this.direction.dot(Vo.crossVectors(bi,Vo));if(c<0)return null;const l=a*this.direction.dot(xa.cross(bi));if(l<0||c+l>s)return null;const d=-a*bi.dot(va);return d<0?null:this.at(d/s,o)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class He{constructor(e,t,n,i,o,s,a,c,l,d,u,h,f,g,w,y){He.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],e!==void 0&&this.set(e,t,n,i,o,s,a,c,l,d,u,h,f,g,w,y)}set(e,t,n,i,o,s,a,c,l,d,u,h,f,g,w,y){const m=this.elements;return m[0]=e,m[4]=t,m[8]=n,m[12]=i,m[1]=o,m[5]=s,m[9]=a,m[13]=c,m[2]=l,m[6]=d,m[10]=u,m[14]=h,m[3]=f,m[7]=g,m[11]=w,m[15]=y,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new He().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,i=1/rr.setFromMatrixColumn(e,0).length(),o=1/rr.setFromMatrixColumn(e,1).length(),s=1/rr.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*o,t[5]=n[5]*o,t[6]=n[6]*o,t[7]=0,t[8]=n[8]*s,t[9]=n[9]*s,t[10]=n[10]*s,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,n=e.x,i=e.y,o=e.z,s=Math.cos(n),a=Math.sin(n),c=Math.cos(i),l=Math.sin(i),d=Math.cos(o),u=Math.sin(o);if(e.order==="XYZ"){const h=s*d,f=s*u,g=a*d,w=a*u;t[0]=c*d,t[4]=-c*u,t[8]=l,t[1]=f+g*l,t[5]=h-w*l,t[9]=-a*c,t[2]=w-h*l,t[6]=g+f*l,t[10]=s*c}else if(e.order==="YXZ"){const h=c*d,f=c*u,g=l*d,w=l*u;t[0]=h+w*a,t[4]=g*a-f,t[8]=s*l,t[1]=s*u,t[5]=s*d,t[9]=-a,t[2]=f*a-g,t[6]=w+h*a,t[10]=s*c}else if(e.order==="ZXY"){const h=c*d,f=c*u,g=l*d,w=l*u;t[0]=h-w*a,t[4]=-s*u,t[8]=g+f*a,t[1]=f+g*a,t[5]=s*d,t[9]=w-h*a,t[2]=-s*l,t[6]=a,t[10]=s*c}else if(e.order==="ZYX"){const h=s*d,f=s*u,g=a*d,w=a*u;t[0]=c*d,t[4]=g*l-f,t[8]=h*l+w,t[1]=c*u,t[5]=w*l+h,t[9]=f*l-g,t[2]=-l,t[6]=a*c,t[10]=s*c}else if(e.order==="YZX"){const h=s*c,f=s*l,g=a*c,w=a*l;t[0]=c*d,t[4]=w-h*u,t[8]=g*u+f,t[1]=u,t[5]=s*d,t[9]=-a*d,t[2]=-l*d,t[6]=f*u+g,t[10]=h-w*u}else if(e.order==="XZY"){const h=s*c,f=s*l,g=a*c,w=a*l;t[0]=c*d,t[4]=-u,t[8]=l*d,t[1]=h*u+w,t[5]=s*d,t[9]=f*u-g,t[2]=g*u-f,t[6]=a*d,t[10]=w*u+h}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(Zf,e,Yf)}lookAt(e,t,n){const i=this.elements;return pn.subVectors(e,t),pn.lengthSq()===0&&(pn.z=1),pn.normalize(),yi.crossVectors(n,pn),yi.lengthSq()===0&&(Math.abs(n.z)===1?pn.x+=1e-4:pn.z+=1e-4,pn.normalize(),yi.crossVectors(n,pn)),yi.normalize(),Xo.crossVectors(pn,yi),i[0]=yi.x,i[4]=Xo.x,i[8]=pn.x,i[1]=yi.y,i[5]=Xo.y,i[9]=pn.y,i[2]=yi.z,i[6]=Xo.z,i[10]=pn.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,o=this.elements,s=n[0],a=n[4],c=n[8],l=n[12],d=n[1],u=n[5],h=n[9],f=n[13],g=n[2],w=n[6],y=n[10],m=n[14],P=n[3],E=n[7],S=n[11],D=n[15],H=i[0],I=i[4],z=i[8],M=i[12],T=i[1],C=i[5],B=i[9],k=i[13],Y=i[2],ee=i[6],q=i[10],re=i[14],Z=i[3],ce=i[7],me=i[11],Se=i[15];return o[0]=s*H+a*T+c*Y+l*Z,o[4]=s*I+a*C+c*ee+l*ce,o[8]=s*z+a*B+c*q+l*me,o[12]=s*M+a*k+c*re+l*Se,o[1]=d*H+u*T+h*Y+f*Z,o[5]=d*I+u*C+h*ee+f*ce,o[9]=d*z+u*B+h*q+f*me,o[13]=d*M+u*k+h*re+f*Se,o[2]=g*H+w*T+y*Y+m*Z,o[6]=g*I+w*C+y*ee+m*ce,o[10]=g*z+w*B+y*q+m*me,o[14]=g*M+w*k+y*re+m*Se,o[3]=P*H+E*T+S*Y+D*Z,o[7]=P*I+E*C+S*ee+D*ce,o[11]=P*z+E*B+S*q+D*me,o[15]=P*M+E*k+S*re+D*Se,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],i=e[8],o=e[12],s=e[1],a=e[5],c=e[9],l=e[13],d=e[2],u=e[6],h=e[10],f=e[14],g=e[3],w=e[7],y=e[11],m=e[15];return g*(+o*c*u-i*l*u-o*a*h+n*l*h+i*a*f-n*c*f)+w*(+t*c*f-t*l*h+o*s*h-i*s*f+i*l*d-o*c*d)+y*(+t*l*u-t*a*f-o*s*u+n*s*f+o*a*d-n*l*d)+m*(-i*a*d-t*c*u+t*a*h+i*s*u-n*s*h+n*c*d)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],o=e[3],s=e[4],a=e[5],c=e[6],l=e[7],d=e[8],u=e[9],h=e[10],f=e[11],g=e[12],w=e[13],y=e[14],m=e[15],P=u*y*l-w*h*l+w*c*f-a*y*f-u*c*m+a*h*m,E=g*h*l-d*y*l-g*c*f+s*y*f+d*c*m-s*h*m,S=d*w*l-g*u*l+g*a*f-s*w*f-d*a*m+s*u*m,D=g*u*c-d*w*c-g*a*h+s*w*h+d*a*y-s*u*y,H=t*P+n*E+i*S+o*D;if(H===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const I=1/H;return e[0]=P*I,e[1]=(w*h*o-u*y*o-w*i*f+n*y*f+u*i*m-n*h*m)*I,e[2]=(a*y*o-w*c*o+w*i*l-n*y*l-a*i*m+n*c*m)*I,e[3]=(u*c*o-a*h*o-u*i*l+n*h*l+a*i*f-n*c*f)*I,e[4]=E*I,e[5]=(d*y*o-g*h*o+g*i*f-t*y*f-d*i*m+t*h*m)*I,e[6]=(g*c*o-s*y*o-g*i*l+t*y*l+s*i*m-t*c*m)*I,e[7]=(s*h*o-d*c*o+d*i*l-t*h*l-s*i*f+t*c*f)*I,e[8]=S*I,e[9]=(g*u*o-d*w*o-g*n*f+t*w*f+d*n*m-t*u*m)*I,e[10]=(s*w*o-g*a*o+g*n*l-t*w*l-s*n*m+t*a*m)*I,e[11]=(d*a*o-s*u*o-d*n*l+t*u*l+s*n*f-t*a*f)*I,e[12]=D*I,e[13]=(d*w*i-g*u*i+g*n*h-t*w*h-d*n*y+t*u*y)*I,e[14]=(g*a*i-s*w*i-g*n*c+t*w*c+s*n*y-t*a*y)*I,e[15]=(s*u*i-d*a*i+d*n*c-t*u*c-s*n*h+t*a*h)*I,this}scale(e){const t=this.elements,n=e.x,i=e.y,o=e.z;return t[0]*=n,t[4]*=i,t[8]*=o,t[1]*=n,t[5]*=i,t[9]*=o,t[2]*=n,t[6]*=i,t[10]*=o,t[3]*=n,t[7]*=i,t[11]*=o,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}makeTranslation(e,t,n){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),i=Math.sin(t),o=1-n,s=e.x,a=e.y,c=e.z,l=o*s,d=o*a;return this.set(l*s+n,l*a-i*c,l*c+i*a,0,l*a+i*c,d*a+n,d*c-i*s,0,l*c-i*a,d*c+i*s,o*c*c+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,i,o,s){return this.set(1,n,o,0,e,1,s,0,t,i,1,0,0,0,0,1),this}compose(e,t,n){const i=this.elements,o=t._x,s=t._y,a=t._z,c=t._w,l=o+o,d=s+s,u=a+a,h=o*l,f=o*d,g=o*u,w=s*d,y=s*u,m=a*u,P=c*l,E=c*d,S=c*u,D=n.x,H=n.y,I=n.z;return i[0]=(1-(w+m))*D,i[1]=(f+S)*D,i[2]=(g-E)*D,i[3]=0,i[4]=(f-S)*H,i[5]=(1-(h+m))*H,i[6]=(y+P)*H,i[7]=0,i[8]=(g+E)*I,i[9]=(y-P)*I,i[10]=(1-(h+w))*I,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}decompose(e,t,n){const i=this.elements;let o=rr.set(i[0],i[1],i[2]).length();const s=rr.set(i[4],i[5],i[6]).length(),a=rr.set(i[8],i[9],i[10]).length();this.determinant()<0&&(o=-o),e.x=i[12],e.y=i[13],e.z=i[14],Ln.copy(this);const l=1/o,d=1/s,u=1/a;return Ln.elements[0]*=l,Ln.elements[1]*=l,Ln.elements[2]*=l,Ln.elements[4]*=d,Ln.elements[5]*=d,Ln.elements[6]*=d,Ln.elements[8]*=u,Ln.elements[9]*=u,Ln.elements[10]*=u,t.setFromRotationMatrix(Ln),n.x=o,n.y=s,n.z=a,this}makePerspective(e,t,n,i,o,s,a=si){const c=this.elements,l=2*o/(t-e),d=2*o/(n-i),u=(t+e)/(t-e),h=(n+i)/(n-i);let f,g;if(a===si)f=-(s+o)/(s-o),g=-2*s*o/(s-o);else if(a===zs)f=-s/(s-o),g=-s*o/(s-o);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return c[0]=l,c[4]=0,c[8]=u,c[12]=0,c[1]=0,c[5]=d,c[9]=h,c[13]=0,c[2]=0,c[6]=0,c[10]=f,c[14]=g,c[3]=0,c[7]=0,c[11]=-1,c[15]=0,this}makeOrthographic(e,t,n,i,o,s,a=si){const c=this.elements,l=1/(t-e),d=1/(n-i),u=1/(s-o),h=(t+e)*l,f=(n+i)*d;let g,w;if(a===si)g=(s+o)*u,w=-2*u;else if(a===zs)g=o*u,w=-1*u;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return c[0]=2*l,c[4]=0,c[8]=0,c[12]=-h,c[1]=0,c[5]=2*d,c[9]=0,c[13]=-f,c[2]=0,c[6]=0,c[10]=w,c[14]=-g,c[3]=0,c[7]=0,c[11]=0,c[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}const rr=new A,Ln=new He,Zf=new A(0,0,0),Yf=new A(1,1,1),yi=new A,Xo=new A,pn=new A,Fd=new He,Vd=new Rt;class It{constructor(e=0,t=0,n=0,i=It.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=i}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,i=this._order){return this._x=e,this._y=t,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const i=e.elements,o=i[0],s=i[4],a=i[8],c=i[1],l=i[5],d=i[9],u=i[2],h=i[6],f=i[10];switch(t){case"XYZ":this._y=Math.asin(Be(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-d,f),this._z=Math.atan2(-s,o)):(this._x=Math.atan2(h,l),this._z=0);break;case"YXZ":this._x=Math.asin(-Be(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(a,f),this._z=Math.atan2(c,l)):(this._y=Math.atan2(-u,o),this._z=0);break;case"ZXY":this._x=Math.asin(Be(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(-u,f),this._z=Math.atan2(-s,l)):(this._y=0,this._z=Math.atan2(c,o));break;case"ZYX":this._y=Math.asin(-Be(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(h,f),this._z=Math.atan2(c,o)):(this._x=0,this._z=Math.atan2(-s,l));break;case"YZX":this._z=Math.asin(Be(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(-d,l),this._y=Math.atan2(-u,o)):(this._x=0,this._y=Math.atan2(a,f));break;case"XZY":this._z=Math.asin(-Be(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(h,l),this._y=Math.atan2(a,o)):(this._x=Math.atan2(-d,f),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return Fd.makeRotationFromQuaternion(e),this.setFromRotationMatrix(Fd,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return Vd.setFromEuler(this),this.setFromQuaternion(Vd,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}It.DEFAULT_ORDER="XYZ";class Wl{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let qf=0;const Xd=new A,or=new Rt,$n=new He,ko=new A,Gr=new A,Kf=new A,Jf=new Rt,kd=new A(1,0,0),Wd=new A(0,1,0),Bd=new A(0,0,1),Gd={type:"added"},Qf={type:"removed"},sr={type:"childadded",child:null},Ta={type:"childremoved",child:null};class Tt extends Ji{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:qf++}),this.uuid=Un(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Tt.DEFAULT_UP.clone();const e=new A,t=new It,n=new Rt,i=new A(1,1,1);function o(){n.setFromEuler(t,!1)}function s(){t.setFromQuaternion(n,void 0,!1)}t._onChange(o),n._onChange(s),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new He},normalMatrix:{value:new je}}),this.matrix=new He,this.matrixWorld=new He,this.matrixAutoUpdate=Tt.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Tt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new Wl,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.customDepthMaterial=void 0,this.customDistanceMaterial=void 0,this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return or.setFromAxisAngle(e,t),this.quaternion.multiply(or),this}rotateOnWorldAxis(e,t){return or.setFromAxisAngle(e,t),this.quaternion.premultiply(or),this}rotateX(e){return this.rotateOnAxis(kd,e)}rotateY(e){return this.rotateOnAxis(Wd,e)}rotateZ(e){return this.rotateOnAxis(Bd,e)}translateOnAxis(e,t){return Xd.copy(e).applyQuaternion(this.quaternion),this.position.add(Xd.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(kd,e)}translateY(e){return this.translateOnAxis(Wd,e)}translateZ(e){return this.translateOnAxis(Bd,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4($n.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?ko.copy(e):ko.set(e,t,n);const i=this.parent;this.updateWorldMatrix(!0,!1),Gr.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?$n.lookAt(Gr,ko,this.up):$n.lookAt(ko,Gr,this.up),this.quaternion.setFromRotationMatrix($n),i&&($n.extractRotation(i.matrixWorld),or.setFromRotationMatrix($n),this.quaternion.premultiply(or.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.removeFromParent(),e.parent=this,this.children.push(e),e.dispatchEvent(Gd),sr.child=e,this.dispatchEvent(sr),sr.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(Qf),Ta.child=e,this.dispatchEvent(Ta),Ta.child=null),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),$n.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),$n.multiply(e.parent.matrixWorld)),e.applyMatrix4($n),e.removeFromParent(),e.parent=this,this.children.push(e),e.updateWorldMatrix(!1,!0),e.dispatchEvent(Gd),sr.child=e,this.dispatchEvent(sr),sr.child=null,this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,i=this.children.length;n<i;n++){const s=this.children[n].getObjectByProperty(e,t);if(s!==void 0)return s}}getObjectsByProperty(e,t,n=[]){this[e]===t&&n.push(this);const i=this.children;for(let o=0,s=i.length;o<s;o++)i[o].getObjectsByProperty(e,t,n);return n}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Gr,e,Kf),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Gr,Jf,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].updateMatrixWorld(e)}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),t===!0){const i=this.children;for(let o=0,s=i.length;o<s;o++)i[o].updateWorldMatrix(!1,!0)}}toJSON(e){const t=e===void 0||typeof e=="string",n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.geometryInfo=this._geometryInfo.map(a=>({...a,boundingBox:a.boundingBox?{min:a.boundingBox.min.toArray(),max:a.boundingBox.max.toArray()}:void 0,boundingSphere:a.boundingSphere?{radius:a.boundingSphere.radius,center:a.boundingSphere.center.toArray()}:void 0})),i.instanceInfo=this._instanceInfo.map(a=>({...a})),i.availableInstanceIds=this._availableInstanceIds.slice(),i.availableGeometryIds=this._availableGeometryIds.slice(),i.nextIndexStart=this._nextIndexStart,i.nextVertexStart=this._nextVertexStart,i.geometryCount=this._geometryCount,i.maxInstanceCount=this._maxInstanceCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.matricesTexture=this._matricesTexture.toJSON(e),i.indirectTexture=this._indirectTexture.toJSON(e),this._colorsTexture!==null&&(i.colorsTexture=this._colorsTexture.toJSON(e)),this.boundingSphere!==null&&(i.boundingSphere={center:this.boundingSphere.center.toArray(),radius:this.boundingSphere.radius}),this.boundingBox!==null&&(i.boundingBox={min:this.boundingBox.min.toArray(),max:this.boundingBox.max.toArray()}));function o(a,c){return a[c.uuid]===void 0&&(a[c.uuid]=c.toJSON(e)),c.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(i.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=o(e.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const c=a.shapes;if(Array.isArray(c))for(let l=0,d=c.length;l<d;l++){const u=c[l];o(e.shapes,u)}else o(e.shapes,c)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(o(e.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let c=0,l=this.material.length;c<l;c++)a.push(o(e.materials,this.material[c]));i.material=a}else i.material=o(e.materials,this.material);if(this.children.length>0){i.children=[];for(let a=0;a<this.children.length;a++)i.children.push(this.children[a].toJSON(e).object)}if(this.animations.length>0){i.animations=[];for(let a=0;a<this.animations.length;a++){const c=this.animations[a];i.animations.push(o(e.animations,c))}}if(t){const a=s(e.geometries),c=s(e.materials),l=s(e.textures),d=s(e.images),u=s(e.shapes),h=s(e.skeletons),f=s(e.animations),g=s(e.nodes);a.length>0&&(n.geometries=a),c.length>0&&(n.materials=c),l.length>0&&(n.textures=l),d.length>0&&(n.images=d),u.length>0&&(n.shapes=u),h.length>0&&(n.skeletons=h),f.length>0&&(n.animations=f),g.length>0&&(n.nodes=g)}return n.object=i,n;function s(a){const c=[];for(const l in a){const d=a[l];delete d.metadata,c.push(d)}return c}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let n=0;n<e.children.length;n++){const i=e.children[n];this.add(i.clone())}return this}}Tt.DEFAULT_UP=new A(0,1,0);Tt.DEFAULT_MATRIX_AUTO_UPDATE=!0;Tt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const An=new A,ei=new A,Sa=new A,ti=new A,ar=new A,cr=new A,Zd=new A,Ma=new A,Ea=new A,Ra=new A,Pa=new it,La=new it,Aa=new it;let br=class yr{constructor(e=new A,t=new A,n=new A){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,i){i.subVectors(n,t),An.subVectors(e,t),i.cross(An);const o=i.lengthSq();return o>0?i.multiplyScalar(1/Math.sqrt(o)):i.set(0,0,0)}static getBarycoord(e,t,n,i,o){An.subVectors(i,t),ei.subVectors(n,t),Sa.subVectors(e,t);const s=An.dot(An),a=An.dot(ei),c=An.dot(Sa),l=ei.dot(ei),d=ei.dot(Sa),u=s*l-a*a;if(u===0)return o.set(0,0,0),null;const h=1/u,f=(l*c-a*d)*h,g=(s*d-a*c)*h;return o.set(1-f-g,g,f)}static containsPoint(e,t,n,i){return this.getBarycoord(e,t,n,i,ti)===null?!1:ti.x>=0&&ti.y>=0&&ti.x+ti.y<=1}static getInterpolation(e,t,n,i,o,s,a,c){return this.getBarycoord(e,t,n,i,ti)===null?(c.x=0,c.y=0,"z"in c&&(c.z=0),"w"in c&&(c.w=0),null):(c.setScalar(0),c.addScaledVector(o,ti.x),c.addScaledVector(s,ti.y),c.addScaledVector(a,ti.z),c)}static getInterpolatedAttribute(e,t,n,i,o,s){return Pa.setScalar(0),La.setScalar(0),Aa.setScalar(0),Pa.fromBufferAttribute(e,t),La.fromBufferAttribute(e,n),Aa.fromBufferAttribute(e,i),s.setScalar(0),s.addScaledVector(Pa,o.x),s.addScaledVector(La,o.y),s.addScaledVector(Aa,o.z),s}static isFrontFacing(e,t,n,i){return An.subVectors(n,t),ei.subVectors(e,t),An.cross(ei).dot(i)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,i){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[i]),this}setFromAttributeAndIndices(e,t,n,i){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,i),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return An.subVectors(this.c,this.b),ei.subVectors(this.a,this.b),An.cross(ei).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return yr.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return yr.getBarycoord(e,this.a,this.b,this.c,t)}getInterpolation(e,t,n,i,o){return yr.getInterpolation(e,this.a,this.b,this.c,t,n,i,o)}containsPoint(e){return yr.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return yr.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,i=this.b,o=this.c;let s,a;ar.subVectors(i,n),cr.subVectors(o,n),Ma.subVectors(e,n);const c=ar.dot(Ma),l=cr.dot(Ma);if(c<=0&&l<=0)return t.copy(n);Ea.subVectors(e,i);const d=ar.dot(Ea),u=cr.dot(Ea);if(d>=0&&u<=d)return t.copy(i);const h=c*u-d*l;if(h<=0&&c>=0&&d<=0)return s=c/(c-d),t.copy(n).addScaledVector(ar,s);Ra.subVectors(e,o);const f=ar.dot(Ra),g=cr.dot(Ra);if(g>=0&&f<=g)return t.copy(o);const w=f*l-c*g;if(w<=0&&l>=0&&g<=0)return a=l/(l-g),t.copy(n).addScaledVector(cr,a);const y=d*g-f*u;if(y<=0&&u-d>=0&&f-g>=0)return Zd.subVectors(o,i),a=(u-d)/(u-d+(f-g)),t.copy(i).addScaledVector(Zd,a);const m=1/(y+w+h);return s=w*m,a=h*m,t.copy(n).addScaledVector(ar,s).addScaledVector(cr,a)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}};const Hh={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},gi={h:0,s:0,l:0},Wo={h:0,s:0,l:0};function Ha(r,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?r+(e-r)*6*t:t<1/2?e:t<2/3?r+(e-r)*6*(2/3-t):r}class Ue{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,n)}set(e,t,n){if(t===void 0&&n===void 0){const i=e;i&&i.isColor?this.copy(i):typeof i=="number"?this.setHex(i):typeof i=="string"&&this.setStyle(i)}else this.setRGB(e,t,n);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=Gt){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,Qe.toWorkingColorSpace(this,t),this}setRGB(e,t,n,i=Qe.workingColorSpace){return this.r=e,this.g=t,this.b=n,Qe.toWorkingColorSpace(this,i),this}setHSL(e,t,n,i=Qe.workingColorSpace){if(e=Xl(e,1),t=Be(t,0,1),n=Be(n,0,1),t===0)this.r=this.g=this.b=n;else{const o=n<=.5?n*(1+t):n+t-n*t,s=2*n-o;this.r=Ha(s,o,e+1/3),this.g=Ha(s,o,e),this.b=Ha(s,o,e-1/3)}return Qe.toWorkingColorSpace(this,i),this}setStyle(e,t=Gt){function n(o){o!==void 0&&parseFloat(o)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(e)){let o;const s=i[1],a=i[2];switch(s){case"rgb":case"rgba":if(o=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(o[4]),this.setRGB(Math.min(255,parseInt(o[1],10))/255,Math.min(255,parseInt(o[2],10))/255,Math.min(255,parseInt(o[3],10))/255,t);if(o=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(o[4]),this.setRGB(Math.min(100,parseInt(o[1],10))/100,Math.min(100,parseInt(o[2],10))/100,Math.min(100,parseInt(o[3],10))/100,t);break;case"hsl":case"hsla":if(o=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(o[4]),this.setHSL(parseFloat(o[1])/360,parseFloat(o[2])/100,parseFloat(o[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(e)){const o=i[1],s=o.length;if(s===3)return this.setRGB(parseInt(o.charAt(0),16)/15,parseInt(o.charAt(1),16)/15,parseInt(o.charAt(2),16)/15,t);if(s===6)return this.setHex(parseInt(o,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=Gt){const n=Hh[e.toLowerCase()];return n!==void 0?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=ai(e.r),this.g=ai(e.g),this.b=ai(e.b),this}copyLinearToSRGB(e){return this.r=Er(e.r),this.g=Er(e.g),this.b=Er(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=Gt){return Qe.fromWorkingColorSpace(qt.copy(this),e),Math.round(Be(qt.r*255,0,255))*65536+Math.round(Be(qt.g*255,0,255))*256+Math.round(Be(qt.b*255,0,255))}getHexString(e=Gt){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=Qe.workingColorSpace){Qe.fromWorkingColorSpace(qt.copy(this),t);const n=qt.r,i=qt.g,o=qt.b,s=Math.max(n,i,o),a=Math.min(n,i,o);let c,l;const d=(a+s)/2;if(a===s)c=0,l=0;else{const u=s-a;switch(l=d<=.5?u/(s+a):u/(2-s-a),s){case n:c=(i-o)/u+(i<o?6:0);break;case i:c=(o-n)/u+2;break;case o:c=(n-i)/u+4;break}c/=6}return e.h=c,e.s=l,e.l=d,e}getRGB(e,t=Qe.workingColorSpace){return Qe.fromWorkingColorSpace(qt.copy(this),t),e.r=qt.r,e.g=qt.g,e.b=qt.b,e}getStyle(e=Gt){Qe.fromWorkingColorSpace(qt.copy(this),e);const t=qt.r,n=qt.g,i=qt.b;return e!==Gt?`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(t*255)},${Math.round(n*255)},${Math.round(i*255)})`}offsetHSL(e,t,n){return this.getHSL(gi),this.setHSL(gi.h+e,gi.s+t,gi.l+n)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(gi),e.getHSL(Wo);const n=uo(gi.h,Wo.h,t),i=uo(gi.s,Wo.s,t),o=uo(gi.l,Wo.l,t);return this.setHSL(n,i,o),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const t=this.r,n=this.g,i=this.b,o=e.elements;return this.r=o[0]*t+o[3]*n+o[6]*i,this.g=o[1]*t+o[4]*n+o[7]*i,this.b=o[2]*t+o[5]*n+o[8]*i,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const qt=new Ue;Ue.NAMES=Hh;let $f=0;class Bn extends Ji{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:$f++}),this.uuid=Un(),this.name="",this.type="Material",this.blending=Sr,this.side=ci,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=Ac,this.blendDst=Hc,this.blendEquation=ki,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new Ue(0,0,0),this.blendAlpha=0,this.depthFunc=Pr,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Od,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=$i,this.stencilZFail=$i,this.stencilZPass=$i,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.allowOverride=!0,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const n=e[t];if(n===void 0){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const i=this[t];if(i===void 0){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==Sr&&(n.blending=this.blending),this.side!==ci&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==Ac&&(n.blendSrc=this.blendSrc),this.blendDst!==Hc&&(n.blendDst=this.blendDst),this.blendEquation!==ki&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==Pr&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==Od&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==$i&&(n.stencilFail=this.stencilFail),this.stencilZFail!==$i&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==$i&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function i(o){const s=[];for(const a in o){const c=o[a];delete c.metadata,s.push(c)}return s}if(t){const o=i(e.textures),s=i(e.images);o.length>0&&(n.textures=o),s.length>0&&(n.images=s)}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const i=t.length;n=new Array(i);for(let o=0;o!==i;++o)n[o]=t[o].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}}class Bi extends Bn{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Ue(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new It,this.combine=ph,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const At=new A,Bo=new Oe;let e1=0;class on{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,Object.defineProperty(this,"id",{value:e1++}),this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n,this.usage=pl,this.updateRanges=[],this.gpuType=_n,this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let i=0,o=this.itemSize;i<o;i++)this.array[e+i]=t.array[n+i];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)Bo.fromBufferAttribute(this,t),Bo.applyMatrix3(e),this.setXY(t,Bo.x,Bo.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)At.fromBufferAttribute(this,t),At.applyMatrix3(e),this.setXYZ(t,At.x,At.y,At.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)At.fromBufferAttribute(this,t),At.applyMatrix4(e),this.setXYZ(t,At.x,At.y,At.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)At.fromBufferAttribute(this,t),At.applyNormalMatrix(e),this.setXYZ(t,At.x,At.y,At.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)At.fromBufferAttribute(this,t),At.transformDirection(e),this.setXYZ(t,At.x,At.y,At.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let n=this.array[e*this.itemSize+t];return this.normalized&&(n=Dn(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=ct(n,this.array)),this.array[e*this.itemSize+t]=n,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=Dn(t,this.array)),t}setX(e,t){return this.normalized&&(t=ct(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=Dn(t,this.array)),t}setY(e,t){return this.normalized&&(t=ct(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=Dn(t,this.array)),t}setZ(e,t){return this.normalized&&(t=ct(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=Dn(t,this.array)),t}setW(e,t){return this.normalized&&(t=ct(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=ct(t,this.array),n=ct(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,i){return e*=this.itemSize,this.normalized&&(t=ct(t,this.array),n=ct(n,this.array),i=ct(i,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this}setXYZW(e,t,n,i,o){return e*=this.itemSize,this.normalized&&(t=ct(t,this.array),n=ct(n,this.array),i=ct(i,this.array),o=ct(o,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=o,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==pl&&(e.usage=this.usage),e}}class Ih extends on{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class Bl extends on{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class sn extends on{constructor(e,t,n){super(new Float32Array(e),t,n)}}let t1=0;const xn=new He,Ia=new Tt,lr=new A,fn=new hi,Zr=new hi,jt=new A;class un extends Ji{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:t1++}),this.uuid=Un(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(Ph(e)?Bl:Ih)(e,1):this.index=e,this}setIndirect(e){return this.indirect=e,this}getIndirect(){return this.indirect}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const o=new je().getNormalMatrix(e);n.applyNormalMatrix(o),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(e),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return xn.makeRotationFromQuaternion(e),this.applyMatrix4(xn),this}rotateX(e){return xn.makeRotationX(e),this.applyMatrix4(xn),this}rotateY(e){return xn.makeRotationY(e),this.applyMatrix4(xn),this}rotateZ(e){return xn.makeRotationZ(e),this.applyMatrix4(xn),this}translate(e,t,n){return xn.makeTranslation(e,t,n),this.applyMatrix4(xn),this}scale(e,t,n){return xn.makeScale(e,t,n),this.applyMatrix4(xn),this}lookAt(e){return Ia.lookAt(e),Ia.updateMatrix(),this.applyMatrix4(Ia.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(lr).negate(),this.translate(lr.x,lr.y,lr.z),this}setFromPoints(e){const t=this.getAttribute("position");if(t===void 0){const n=[];for(let i=0,o=e.length;i<o;i++){const s=e[i];n.push(s.x,s.y,s.z||0)}this.setAttribute("position",new sn(n,3))}else{const n=Math.min(e.length,t.count);for(let i=0;i<n;i++){const o=e[i];t.setXYZ(i,o.x,o.y,o.z||0)}e.length>t.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),t.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new hi);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new A(-1/0,-1/0,-1/0),new A(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,i=t.length;n<i;n++){const o=t[n];fn.setFromBufferAttribute(o),this.morphTargetsRelative?(jt.addVectors(this.boundingBox.min,fn.min),this.boundingBox.expandByPoint(jt),jt.addVectors(this.boundingBox.max,fn.max),this.boundingBox.expandByPoint(jt)):(this.boundingBox.expandByPoint(fn.min),this.boundingBox.expandByPoint(fn.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Yn);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new A,1/0);return}if(e){const n=this.boundingSphere.center;if(fn.setFromBufferAttribute(e),t)for(let o=0,s=t.length;o<s;o++){const a=t[o];Zr.setFromBufferAttribute(a),this.morphTargetsRelative?(jt.addVectors(fn.min,Zr.min),fn.expandByPoint(jt),jt.addVectors(fn.max,Zr.max),fn.expandByPoint(jt)):(fn.expandByPoint(Zr.min),fn.expandByPoint(Zr.max))}fn.getCenter(n);let i=0;for(let o=0,s=e.count;o<s;o++)jt.fromBufferAttribute(e,o),i=Math.max(i,n.distanceToSquared(jt));if(t)for(let o=0,s=t.length;o<s;o++){const a=t[o],c=this.morphTargetsRelative;for(let l=0,d=a.count;l<d;l++)jt.fromBufferAttribute(a,l),c&&(lr.fromBufferAttribute(e,l),jt.add(lr)),i=Math.max(i,n.distanceToSquared(jt))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=t.position,i=t.normal,o=t.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new on(new Float32Array(4*n.count),4));const s=this.getAttribute("tangent"),a=[],c=[];for(let z=0;z<n.count;z++)a[z]=new A,c[z]=new A;const l=new A,d=new A,u=new A,h=new Oe,f=new Oe,g=new Oe,w=new A,y=new A;function m(z,M,T){l.fromBufferAttribute(n,z),d.fromBufferAttribute(n,M),u.fromBufferAttribute(n,T),h.fromBufferAttribute(o,z),f.fromBufferAttribute(o,M),g.fromBufferAttribute(o,T),d.sub(l),u.sub(l),f.sub(h),g.sub(h);const C=1/(f.x*g.y-g.x*f.y);isFinite(C)&&(w.copy(d).multiplyScalar(g.y).addScaledVector(u,-f.y).multiplyScalar(C),y.copy(u).multiplyScalar(f.x).addScaledVector(d,-g.x).multiplyScalar(C),a[z].add(w),a[M].add(w),a[T].add(w),c[z].add(y),c[M].add(y),c[T].add(y))}let P=this.groups;P.length===0&&(P=[{start:0,count:e.count}]);for(let z=0,M=P.length;z<M;++z){const T=P[z],C=T.start,B=T.count;for(let k=C,Y=C+B;k<Y;k+=3)m(e.getX(k+0),e.getX(k+1),e.getX(k+2))}const E=new A,S=new A,D=new A,H=new A;function I(z){D.fromBufferAttribute(i,z),H.copy(D);const M=a[z];E.copy(M),E.sub(D.multiplyScalar(D.dot(M))).normalize(),S.crossVectors(H,M);const C=S.dot(c[z])<0?-1:1;s.setXYZW(z,E.x,E.y,E.z,C)}for(let z=0,M=P.length;z<M;++z){const T=P[z],C=T.start,B=T.count;for(let k=C,Y=C+B;k<Y;k+=3)I(e.getX(k+0)),I(e.getX(k+1)),I(e.getX(k+2))}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new on(new Float32Array(t.count*3),3),this.setAttribute("normal",n);else for(let h=0,f=n.count;h<f;h++)n.setXYZ(h,0,0,0);const i=new A,o=new A,s=new A,a=new A,c=new A,l=new A,d=new A,u=new A;if(e)for(let h=0,f=e.count;h<f;h+=3){const g=e.getX(h+0),w=e.getX(h+1),y=e.getX(h+2);i.fromBufferAttribute(t,g),o.fromBufferAttribute(t,w),s.fromBufferAttribute(t,y),d.subVectors(s,o),u.subVectors(i,o),d.cross(u),a.fromBufferAttribute(n,g),c.fromBufferAttribute(n,w),l.fromBufferAttribute(n,y),a.add(d),c.add(d),l.add(d),n.setXYZ(g,a.x,a.y,a.z),n.setXYZ(w,c.x,c.y,c.z),n.setXYZ(y,l.x,l.y,l.z)}else for(let h=0,f=t.count;h<f;h+=3)i.fromBufferAttribute(t,h+0),o.fromBufferAttribute(t,h+1),s.fromBufferAttribute(t,h+2),d.subVectors(s,o),u.subVectors(i,o),d.cross(u),n.setXYZ(h+0,d.x,d.y,d.z),n.setXYZ(h+1,d.x,d.y,d.z),n.setXYZ(h+2,d.x,d.y,d.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)jt.fromBufferAttribute(e,t),jt.normalize(),e.setXYZ(t,jt.x,jt.y,jt.z)}toNonIndexed(){function e(a,c){const l=a.array,d=a.itemSize,u=a.normalized,h=new l.constructor(c.length*d);let f=0,g=0;for(let w=0,y=c.length;w<y;w++){a.isInterleavedBufferAttribute?f=c[w]*a.data.stride+a.offset:f=c[w]*d;for(let m=0;m<d;m++)h[g++]=l[f++]}return new on(h,d,u)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new un,n=this.index.array,i=this.attributes;for(const a in i){const c=i[a],l=e(c,n);t.setAttribute(a,l)}const o=this.morphAttributes;for(const a in o){const c=[],l=o[a];for(let d=0,u=l.length;d<u;d++){const h=l[d],f=e(h,n);c.push(f)}t.morphAttributes[a]=c}t.morphTargetsRelative=this.morphTargetsRelative;const s=this.groups;for(let a=0,c=s.length;a<c;a++){const l=s[a];t.addGroup(l.start,l.count,l.materialIndex)}return t}toJSON(){const e={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const c=this.parameters;for(const l in c)c[l]!==void 0&&(e[l]=c[l]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const c in n){const l=n[c];e.data.attributes[c]=l.toJSON(e.data)}const i={};let o=!1;for(const c in this.morphAttributes){const l=this.morphAttributes[c],d=[];for(let u=0,h=l.length;u<h;u++){const f=l[u];d.push(f.toJSON(e.data))}d.length>0&&(i[c]=d,o=!0)}o&&(e.data.morphAttributes=i,e.data.morphTargetsRelative=this.morphTargetsRelative);const s=this.groups;s.length>0&&(e.data.groups=JSON.parse(JSON.stringify(s)));const a=this.boundingSphere;return a!==null&&(e.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone());const i=e.attributes;for(const l in i){const d=i[l];this.setAttribute(l,d.clone(t))}const o=e.morphAttributes;for(const l in o){const d=[],u=o[l];for(let h=0,f=u.length;h<f;h++)d.push(u[h].clone(t));this.morphAttributes[l]=d}this.morphTargetsRelative=e.morphTargetsRelative;const s=e.groups;for(let l=0,d=s.length;l<d;l++){const u=s[l];this.addGroup(u.start,u.count,u.materialIndex)}const a=e.boundingBox;a!==null&&(this.boundingBox=a.clone());const c=e.boundingSphere;return c!==null&&(this.boundingSphere=c.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const Yd=new He,Di=new _r,Go=new Yn,qd=new A,Zo=new A,Yo=new A,qo=new A,Na=new A,Ko=new A,Kd=new A,Jo=new A;class Ht extends Tt{constructor(e=new un,t=new Bi){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let o=0,s=i.length;o<s;o++){const a=i[o].name||String(o);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=o}}}}getVertexPosition(e,t){const n=this.geometry,i=n.attributes.position,o=n.morphAttributes.position,s=n.morphTargetsRelative;t.fromBufferAttribute(i,e);const a=this.morphTargetInfluences;if(o&&a){Ko.set(0,0,0);for(let c=0,l=o.length;c<l;c++){const d=a[c],u=o[c];d!==0&&(Na.fromBufferAttribute(u,e),s?Ko.addScaledVector(Na,d):Ko.addScaledVector(Na.sub(t),d))}t.add(Ko)}return t}raycast(e,t){const n=this.geometry,i=this.material,o=this.matrixWorld;i!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),Go.copy(n.boundingSphere),Go.applyMatrix4(o),Di.copy(e.ray).recast(e.near),!(Go.containsPoint(Di.origin)===!1&&(Di.intersectSphere(Go,qd)===null||Di.origin.distanceToSquared(qd)>(e.far-e.near)**2))&&(Yd.copy(o).invert(),Di.copy(e.ray).applyMatrix4(Yd),!(n.boundingBox!==null&&Di.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(e,t,Di)))}_computeIntersections(e,t,n){let i;const o=this.geometry,s=this.material,a=o.index,c=o.attributes.position,l=o.attributes.uv,d=o.attributes.uv1,u=o.attributes.normal,h=o.groups,f=o.drawRange;if(a!==null)if(Array.isArray(s))for(let g=0,w=h.length;g<w;g++){const y=h[g],m=s[y.materialIndex],P=Math.max(y.start,f.start),E=Math.min(a.count,Math.min(y.start+y.count,f.start+f.count));for(let S=P,D=E;S<D;S+=3){const H=a.getX(S),I=a.getX(S+1),z=a.getX(S+2);i=Qo(this,m,e,n,l,d,u,H,I,z),i&&(i.faceIndex=Math.floor(S/3),i.face.materialIndex=y.materialIndex,t.push(i))}}else{const g=Math.max(0,f.start),w=Math.min(a.count,f.start+f.count);for(let y=g,m=w;y<m;y+=3){const P=a.getX(y),E=a.getX(y+1),S=a.getX(y+2);i=Qo(this,s,e,n,l,d,u,P,E,S),i&&(i.faceIndex=Math.floor(y/3),t.push(i))}}else if(c!==void 0)if(Array.isArray(s))for(let g=0,w=h.length;g<w;g++){const y=h[g],m=s[y.materialIndex],P=Math.max(y.start,f.start),E=Math.min(c.count,Math.min(y.start+y.count,f.start+f.count));for(let S=P,D=E;S<D;S+=3){const H=S,I=S+1,z=S+2;i=Qo(this,m,e,n,l,d,u,H,I,z),i&&(i.faceIndex=Math.floor(S/3),i.face.materialIndex=y.materialIndex,t.push(i))}}else{const g=Math.max(0,f.start),w=Math.min(c.count,f.start+f.count);for(let y=g,m=w;y<m;y+=3){const P=y,E=y+1,S=y+2;i=Qo(this,s,e,n,l,d,u,P,E,S),i&&(i.faceIndex=Math.floor(y/3),t.push(i))}}}}function n1(r,e,t,n,i,o,s,a){let c;if(e.side===dn?c=n.intersectTriangle(s,o,i,!0,a):c=n.intersectTriangle(i,o,s,e.side===ci,a),c===null)return null;Jo.copy(a),Jo.applyMatrix4(r.matrixWorld);const l=t.ray.origin.distanceTo(Jo);return l<t.near||l>t.far?null:{distance:l,point:Jo.clone(),object:r}}function Qo(r,e,t,n,i,o,s,a,c,l){r.getVertexPosition(a,Zo),r.getVertexPosition(c,Yo),r.getVertexPosition(l,qo);const d=n1(r,e,t,n,Zo,Yo,qo,Kd);if(d){const u=new A;br.getBarycoord(Kd,Zo,Yo,qo,u),i&&(d.uv=br.getInterpolatedAttribute(i,a,c,l,u,new Oe)),o&&(d.uv1=br.getInterpolatedAttribute(o,a,c,l,u,new Oe)),s&&(d.normal=br.getInterpolatedAttribute(s,a,c,l,u,new A),d.normal.dot(n.direction)>0&&d.normal.multiplyScalar(-1));const h={a,b:c,c:l,normal:new A,materialIndex:0};br.getNormal(Zo,Yo,qo,h.normal),d.face=h,d.barycoord=u}return d}class zn extends un{constructor(e=1,t=1,n=1,i=1,o=1,s=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:o,depthSegments:s};const a=this;i=Math.floor(i),o=Math.floor(o),s=Math.floor(s);const c=[],l=[],d=[],u=[];let h=0,f=0;g("z","y","x",-1,-1,n,t,e,s,o,0),g("z","y","x",1,-1,n,t,-e,s,o,1),g("x","z","y",1,1,e,n,t,i,s,2),g("x","z","y",1,-1,e,n,-t,i,s,3),g("x","y","z",1,-1,e,t,n,i,o,4),g("x","y","z",-1,-1,e,t,-n,i,o,5),this.setIndex(c),this.setAttribute("position",new sn(l,3)),this.setAttribute("normal",new sn(d,3)),this.setAttribute("uv",new sn(u,2));function g(w,y,m,P,E,S,D,H,I,z,M){const T=S/I,C=D/z,B=S/2,k=D/2,Y=H/2,ee=I+1,q=z+1;let re=0,Z=0;const ce=new A;for(let me=0;me<q;me++){const Se=me*C-k;for(let Ge=0;Ge<ee;Ge++){const ht=Ge*T-B;ce[w]=ht*P,ce[y]=Se*E,ce[m]=Y,l.push(ce.x,ce.y,ce.z),ce[w]=0,ce[y]=0,ce[m]=H>0?1:-1,d.push(ce.x,ce.y,ce.z),u.push(Ge/I),u.push(1-me/z),re+=1}}for(let me=0;me<z;me++)for(let Se=0;Se<I;Se++){const Ge=h+Se+ee*me,ht=h+Se+ee*(me+1),J=h+(Se+1)+ee*(me+1),oe=h+(Se+1)+ee*me;c.push(Ge,ht,oe),c.push(ht,J,oe),Z+=6}a.addGroup(f,Z,M),f+=Z,h+=re}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new zn(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function Nr(r){const e={};for(const t in r){e[t]={};for(const n in r[t]){const i=r[t][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?i.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[t][n]=null):e[t][n]=i.clone():Array.isArray(i)?e[t][n]=i.slice():e[t][n]=i}}return e}function en(r){const e={};for(let t=0;t<r.length;t++){const n=Nr(r[t]);for(const i in n)e[i]=n[i]}return e}function i1(r){const e=[];for(let t=0;t<r.length;t++)e.push(r[t].clone());return e}function Nh(r){const e=r.getRenderTarget();return e===null?r.outputColorSpace:e.isXRRenderTarget===!0?e.texture.colorSpace:Qe.workingColorSpace}const r1={clone:Nr,merge:en};var o1=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,s1=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class Ai extends Bn{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=o1,this.fragmentShader=s1,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Nr(e.uniforms),this.uniformsGroups=i1(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const i in this.uniforms){const s=this.uniforms[i].value;s&&s.isTexture?t.uniforms[i]={type:"t",value:s.toJSON(e).uuid}:s&&s.isColor?t.uniforms[i]={type:"c",value:s.getHex()}:s&&s.isVector2?t.uniforms[i]={type:"v2",value:s.toArray()}:s&&s.isVector3?t.uniforms[i]={type:"v3",value:s.toArray()}:s&&s.isVector4?t.uniforms[i]={type:"v4",value:s.toArray()}:s&&s.isMatrix3?t.uniforms[i]={type:"m3",value:s.toArray()}:s&&s.isMatrix4?t.uniforms[i]={type:"m4",value:s.toArray()}:t.uniforms[i]={value:s}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}let Oh=class extends Tt{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new He,this.projectionMatrix=new He,this.projectionMatrixInverse=new He,this.coordinateSystem=si}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}};const wi=new A,Jd=new Oe,Qd=new Oe;class nn extends Oh{constructor(e=50,t=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=Ir*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(Mr*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return Ir*2*Math.atan(Math.tan(Mr*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,t,n){wi.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),t.set(wi.x,wi.y).multiplyScalar(-e/wi.z),wi.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(wi.x,wi.y).multiplyScalar(-e/wi.z)}getViewSize(e,t){return this.getViewBounds(e,Jd,Qd),t.subVectors(Qd,Jd)}setViewOffset(e,t,n,i,o,s){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=o,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(Mr*.5*this.fov)/this.zoom,n=2*t,i=this.aspect*n,o=-.5*i;const s=this.view;if(this.view!==null&&this.view.enabled){const c=s.fullWidth,l=s.fullHeight;o+=s.offsetX*i/c,t-=s.offsetY*n/l,i*=s.width/c,n*=s.height/l}const a=this.filmOffset;a!==0&&(o+=e*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(o,o+i,t,t-n,e,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const dr=-90,ur=1;class a1 extends Tt{constructor(e,t,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new nn(dr,ur,e,t);i.layers=this.layers,this.add(i);const o=new nn(dr,ur,e,t);o.layers=this.layers,this.add(o);const s=new nn(dr,ur,e,t);s.layers=this.layers,this.add(s);const a=new nn(dr,ur,e,t);a.layers=this.layers,this.add(a);const c=new nn(dr,ur,e,t);c.layers=this.layers,this.add(c);const l=new nn(dr,ur,e,t);l.layers=this.layers,this.add(l)}updateCoordinateSystem(){const e=this.coordinateSystem,t=this.children.concat(),[n,i,o,s,a,c]=t;for(const l of t)this.remove(l);if(e===si)n.up.set(0,1,0),n.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),o.up.set(0,0,-1),o.lookAt(0,1,0),s.up.set(0,0,1),s.lookAt(0,-1,0),a.up.set(0,1,0),a.lookAt(0,0,1),c.up.set(0,1,0),c.lookAt(0,0,-1);else if(e===zs)n.up.set(0,-1,0),n.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),o.up.set(0,0,1),o.lookAt(0,1,0),s.up.set(0,0,-1),s.lookAt(0,-1,0),a.up.set(0,-1,0),a.lookAt(0,0,1),c.up.set(0,-1,0),c.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);for(const l of t)this.add(l),l.updateMatrixWorld()}update(e,t){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());const[o,s,a,c,l,d]=this.children,u=e.getRenderTarget(),h=e.getActiveCubeFace(),f=e.getActiveMipmapLevel(),g=e.xr.enabled;e.xr.enabled=!1;const w=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0,i),e.render(t,o),e.setRenderTarget(n,1,i),e.render(t,s),e.setRenderTarget(n,2,i),e.render(t,a),e.setRenderTarget(n,3,i),e.render(t,c),e.setRenderTarget(n,4,i),e.render(t,l),n.texture.generateMipmaps=w,e.setRenderTarget(n,5,i),e.render(t,d),e.setRenderTarget(u,h,f),e.xr.enabled=g,n.texture.needsPMREMUpdate=!0}}class Ch extends kt{constructor(e=[],t=Lr,n,i,o,s,a,c,l,d){super(e,t,n,i,o,s,a,c,l,d),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class c1 extends Zi{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const n={width:e,height:e,depth:1},i=[n,n,n,n,n,n];this.texture=new Ch(i,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:!1,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:bn}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new zn(5,5,5),o=new Ai({name:"CubemapFromEquirect",uniforms:Nr(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:dn,blending:Pi});o.uniforms.tEquirect.value=t;const s=new Ht(i,o),a=t.minFilter;return t.minFilter===oi&&(t.minFilter=bn),new a1(1,10,this).update(e,s),t.minFilter=a,s.geometry.dispose(),s.material.dispose(),this}clear(e,t=!0,n=!0,i=!0){const o=e.getRenderTarget();for(let s=0;s<6;s++)e.setRenderTarget(this,s),e.clear(t,n,i);e.setRenderTarget(o)}}class Ei extends Tt{constructor(){super(),this.isGroup=!0,this.type="Group"}}const l1={type:"move"};class Oa{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Ei,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Ei,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new A,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new A),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Ei,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new A,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new A),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const n of e.hand.values())this._getHandJoint(t,n)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let i=null,o=null,s=null;const a=this._targetRay,c=this._grip,l=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(l&&e.hand){s=!0;for(const w of e.hand.values()){const y=t.getJointPose(w,n),m=this._getHandJoint(l,w);y!==null&&(m.matrix.fromArray(y.transform.matrix),m.matrix.decompose(m.position,m.rotation,m.scale),m.matrixWorldNeedsUpdate=!0,m.jointRadius=y.radius),m.visible=y!==null}const d=l.joints["index-finger-tip"],u=l.joints["thumb-tip"],h=d.position.distanceTo(u.position),f=.02,g=.005;l.inputState.pinching&&h>f+g?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!l.inputState.pinching&&h<=f-g&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else c!==null&&e.gripSpace&&(o=t.getPose(e.gripSpace,n),o!==null&&(c.matrix.fromArray(o.transform.matrix),c.matrix.decompose(c.position,c.rotation,c.scale),c.matrixWorldNeedsUpdate=!0,o.linearVelocity?(c.hasLinearVelocity=!0,c.linearVelocity.copy(o.linearVelocity)):c.hasLinearVelocity=!1,o.angularVelocity?(c.hasAngularVelocity=!0,c.angularVelocity.copy(o.angularVelocity)):c.hasAngularVelocity=!1));a!==null&&(i=t.getPose(e.targetRaySpace,n),i===null&&o!==null&&(i=o),i!==null&&(a.matrix.fromArray(i.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),a.matrixWorldNeedsUpdate=!0,i.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(i.linearVelocity)):a.hasLinearVelocity=!1,i.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(i.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(l1)))}return a!==null&&(a.visible=i!==null),c!==null&&(c.visible=o!==null),l!==null&&(l.visible=s!==null),this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const n=new Ei;n.matrixAutoUpdate=!1,n.visible=!1,e.joints[t.jointName]=n,e.add(n)}return e.joints[t.jointName]}}class d1 extends Tt{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new It,this.environmentIntensity=1,this.environmentRotation=new It,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,this.backgroundRotation.copy(e.backgroundRotation),this.environmentIntensity=e.environmentIntensity,this.environmentRotation.copy(e.environmentRotation),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(t.object.backgroundIntensity=this.backgroundIntensity),t.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(t.object.environmentIntensity=this.environmentIntensity),t.object.environmentRotation=this.environmentRotation.toArray(),t}}class u1{constructor(e,t){this.isInterleavedBuffer=!0,this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=pl,this.updateRanges=[],this.version=0,this.uuid=Un()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,n){e*=this.stride,n*=t.stride;for(let i=0,o=this.stride;i<o;i++)this.array[e+i]=t.array[n+i];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Un()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(t,this.stride);return n.setUsage(this.usage),n}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Un()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const $t=new A;class Gl{constructor(e,t,n,i=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=e,this.itemSize=t,this.offset=n,this.normalized=i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,n=this.data.count;t<n;t++)$t.fromBufferAttribute(this,t),$t.applyMatrix4(e),this.setXYZ(t,$t.x,$t.y,$t.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)$t.fromBufferAttribute(this,t),$t.applyNormalMatrix(e),this.setXYZ(t,$t.x,$t.y,$t.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)$t.fromBufferAttribute(this,t),$t.transformDirection(e),this.setXYZ(t,$t.x,$t.y,$t.z);return this}getComponent(e,t){let n=this.array[e*this.data.stride+this.offset+t];return this.normalized&&(n=Dn(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=ct(n,this.array)),this.data.array[e*this.data.stride+this.offset+t]=n,this}setX(e,t){return this.normalized&&(t=ct(t,this.array)),this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.normalized&&(t=ct(t,this.array)),this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.normalized&&(t=ct(t,this.array)),this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.normalized&&(t=ct(t,this.array)),this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){let t=this.data.array[e*this.data.stride+this.offset];return this.normalized&&(t=Dn(t,this.array)),t}getY(e){let t=this.data.array[e*this.data.stride+this.offset+1];return this.normalized&&(t=Dn(t,this.array)),t}getZ(e){let t=this.data.array[e*this.data.stride+this.offset+2];return this.normalized&&(t=Dn(t,this.array)),t}getW(e){let t=this.data.array[e*this.data.stride+this.offset+3];return this.normalized&&(t=Dn(t,this.array)),t}setXY(e,t,n){return e=e*this.data.stride+this.offset,this.normalized&&(t=ct(t,this.array),n=ct(n,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this}setXYZ(e,t,n,i){return e=e*this.data.stride+this.offset,this.normalized&&(t=ct(t,this.array),n=ct(n,this.array),i=ct(i,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this}setXYZW(e,t,n,i,o){return e=e*this.data.stride+this.offset,this.normalized&&(t=ct(t,this.array),n=ct(n,this.array),i=ct(i,this.array),o=ct(o,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this.data.array[e+3]=o,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let o=0;o<this.itemSize;o++)t.push(this.data.array[i+o])}return new on(new this.array.constructor(t),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new Gl(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let o=0;o<this.itemSize;o++)t.push(this.data.array[i+o])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}const $d=new A,e0=new it,t0=new it,h1=new A,n0=new He,$o=new A,Ca=new Yn,i0=new He,Da=new _r;class p1 extends Ht{constructor(e,t){super(e,t),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode=Ad,this.bindMatrix=new He,this.bindMatrixInverse=new He,this.boundingBox=null,this.boundingSphere=null}computeBoundingBox(){const e=this.geometry;this.boundingBox===null&&(this.boundingBox=new hi),this.boundingBox.makeEmpty();const t=e.getAttribute("position");for(let n=0;n<t.count;n++)this.getVertexPosition(n,$o),this.boundingBox.expandByPoint($o)}computeBoundingSphere(){const e=this.geometry;this.boundingSphere===null&&(this.boundingSphere=new Yn),this.boundingSphere.makeEmpty();const t=e.getAttribute("position");for(let n=0;n<t.count;n++)this.getVertexPosition(n,$o),this.boundingSphere.expandByPoint($o)}copy(e,t){return super.copy(e,t),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}raycast(e,t){const n=this.material,i=this.matrixWorld;n!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),Ca.copy(this.boundingSphere),Ca.applyMatrix4(i),e.ray.intersectsSphere(Ca)!==!1&&(i0.copy(i).invert(),Da.copy(e.ray).applyMatrix4(i0),!(this.boundingBox!==null&&Da.intersectsBox(this.boundingBox)===!1)&&this._computeIntersections(e,t,Da)))}getVertexPosition(e,t){return super.getVertexPosition(e,t),this.applyBoneTransform(e,t),t}bind(e,t){this.skeleton=e,t===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new it,t=this.geometry.attributes.skinWeight;for(let n=0,i=t.count;n<i;n++){e.fromBufferAttribute(t,n);const o=1/e.manhattanLength();o!==1/0?e.multiplyScalar(o):e.set(1,0,0,0),t.setXYZW(n,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode===Ad?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode===af?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}applyBoneTransform(e,t){const n=this.skeleton,i=this.geometry;e0.fromBufferAttribute(i.attributes.skinIndex,e),t0.fromBufferAttribute(i.attributes.skinWeight,e),$d.copy(t).applyMatrix4(this.bindMatrix),t.set(0,0,0);for(let o=0;o<4;o++){const s=t0.getComponent(o);if(s!==0){const a=e0.getComponent(o);n0.multiplyMatrices(n.bones[a].matrixWorld,n.boneInverses[a]),t.addScaledVector(h1.copy($d).applyMatrix4(n0),s)}}return t.applyMatrix4(this.bindMatrixInverse)}}class Dh extends Tt{constructor(){super(),this.isBone=!0,this.type="Bone"}}class _h extends kt{constructor(e=null,t=1,n=1,i,o,s,a,c,l=rn,d=rn,u,h){super(null,s,a,c,l,d,i,o,u,h),this.isDataTexture=!0,this.image={data:e,width:t,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const r0=new He,f1=new He;class Zl{constructor(e=[],t=[]){this.uuid=Un(),this.bones=e.slice(0),this.boneInverses=t,this.boneMatrices=null,this.boneTexture=null,this.init()}init(){const e=this.bones,t=this.boneInverses;if(this.boneMatrices=new Float32Array(e.length*16),t.length===0)this.calculateInverses();else if(e.length!==t.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let n=0,i=this.bones.length;n<i;n++)this.boneInverses.push(new He)}}calculateInverses(){this.boneInverses.length=0;for(let e=0,t=this.bones.length;e<t;e++){const n=new He;this.bones[e]&&n.copy(this.bones[e].matrixWorld).invert(),this.boneInverses.push(n)}}pose(){for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&n.matrixWorld.copy(this.boneInverses[e]).invert()}for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&(n.parent&&n.parent.isBone?(n.matrix.copy(n.parent.matrixWorld).invert(),n.matrix.multiply(n.matrixWorld)):n.matrix.copy(n.matrixWorld),n.matrix.decompose(n.position,n.quaternion,n.scale))}}update(){const e=this.bones,t=this.boneInverses,n=this.boneMatrices,i=this.boneTexture;for(let o=0,s=e.length;o<s;o++){const a=e[o]?e[o].matrixWorld:f1;r0.multiplyMatrices(a,t[o]),r0.toArray(n,o*16)}i!==null&&(i.needsUpdate=!0)}clone(){return new Zl(this.bones,this.boneInverses)}computeBoneTexture(){let e=Math.sqrt(this.bones.length*4);e=Math.ceil(e/4)*4,e=Math.max(e,4);const t=new Float32Array(e*e*4);t.set(this.boneMatrices);const n=new _h(t,e,e,Mn,_n);return n.needsUpdate=!0,this.boneMatrices=t,this.boneTexture=n,this}getBoneByName(e){for(let t=0,n=this.bones.length;t<n;t++){const i=this.bones[t];if(i.name===e)return i}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(e,t){this.uuid=e.uuid;for(let n=0,i=e.bones.length;n<i;n++){const o=e.bones[n];let s=t[o];s===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",o),s=new Dh),this.bones.push(s),this.boneInverses.push(new He().fromArray(e.boneInverses[n]))}return this.init(),this}toJSON(){const e={metadata:{version:4.6,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};e.uuid=this.uuid;const t=this.bones,n=this.boneInverses;for(let i=0,o=t.length;i<o;i++){const s=t[i];e.bones.push(s.uuid);const a=n[i];e.boneInverses.push(a.toArray())}return e}}class fl extends on{constructor(e,t,n,i=1){super(e,t,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=i}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}const hr=new He,o0=new He,es=[],s0=new hi,m1=new He,Yr=new Ht,qr=new Yn;class zr extends Ht{constructor(e,t,n){super(e,t),this.isInstancedMesh=!0,this.instanceMatrix=new fl(new Float32Array(n*16),16),this.instanceColor=null,this.morphTexture=null,this.count=n,this.boundingBox=null,this.boundingSphere=null;for(let i=0;i<n;i++)this.setMatrixAt(i,m1)}computeBoundingBox(){const e=this.geometry,t=this.count;this.boundingBox===null&&(this.boundingBox=new hi),e.boundingBox===null&&e.computeBoundingBox(),this.boundingBox.makeEmpty();for(let n=0;n<t;n++)this.getMatrixAt(n,hr),s0.copy(e.boundingBox).applyMatrix4(hr),this.boundingBox.union(s0)}computeBoundingSphere(){const e=this.geometry,t=this.count;this.boundingSphere===null&&(this.boundingSphere=new Yn),e.boundingSphere===null&&e.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let n=0;n<t;n++)this.getMatrixAt(n,hr),qr.copy(e.boundingSphere).applyMatrix4(hr),this.boundingSphere.union(qr)}copy(e,t){return super.copy(e,t),this.instanceMatrix.copy(e.instanceMatrix),e.morphTexture!==null&&(this.morphTexture=e.morphTexture.clone()),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}getColorAt(e,t){t.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,e*16)}getMorphAt(e,t){const n=t.morphTargetInfluences,i=this.morphTexture.source.data.data,o=n.length+1,s=e*o+1;for(let a=0;a<n.length;a++)n[a]=i[s+a]}raycast(e,t){const n=this.matrixWorld,i=this.count;if(Yr.geometry=this.geometry,Yr.material=this.material,Yr.material!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),qr.copy(this.boundingSphere),qr.applyMatrix4(n),e.ray.intersectsSphere(qr)!==!1))for(let o=0;o<i;o++){this.getMatrixAt(o,hr),o0.multiplyMatrices(n,hr),Yr.matrixWorld=o0,Yr.raycast(e,es);for(let s=0,a=es.length;s<a;s++){const c=es[s];c.instanceId=o,c.object=this,t.push(c)}es.length=0}}setColorAt(e,t){this.instanceColor===null&&(this.instanceColor=new fl(new Float32Array(this.instanceMatrix.count*3).fill(1),3)),t.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,t){t.toArray(this.instanceMatrix.array,e*16)}setMorphAt(e,t){const n=t.morphTargetInfluences,i=n.length+1;this.morphTexture===null&&(this.morphTexture=new _h(new Float32Array(i*this.count),i,this.count,Ul,_n));const o=this.morphTexture.source.data.data;let s=0;for(let l=0;l<n.length;l++)s+=n[l];const a=this.geometry.morphTargetsRelative?1:1-s,c=i*e;o[c]=a,o.set(n,c+1)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"}),this.morphTexture!==null&&(this.morphTexture.dispose(),this.morphTexture=null)}}const _a=new A,b1=new A,y1=new je;class Ti{constructor(e=new A(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const i=_a.subVectors(n,t).cross(b1.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const n=e.delta(_a),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const o=-(e.start.dot(this.normal)+this.constant)/i;return o<0||o>1?null:t.copy(e.start).addScaledVector(n,o)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||y1.getNormalMatrix(e),i=this.coplanarPoint(_a).applyMatrix4(e),o=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(o),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const _i=new Yn,ts=new A;class Yl{constructor(e=new Ti,t=new Ti,n=new Ti,i=new Ti,o=new Ti,s=new Ti){this.planes=[e,t,n,i,o,s]}set(e,t,n,i,o,s){const a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(n),a[3].copy(i),a[4].copy(o),a[5].copy(s),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e,t=si){const n=this.planes,i=e.elements,o=i[0],s=i[1],a=i[2],c=i[3],l=i[4],d=i[5],u=i[6],h=i[7],f=i[8],g=i[9],w=i[10],y=i[11],m=i[12],P=i[13],E=i[14],S=i[15];if(n[0].setComponents(c-o,h-l,y-f,S-m).normalize(),n[1].setComponents(c+o,h+l,y+f,S+m).normalize(),n[2].setComponents(c+s,h+d,y+g,S+P).normalize(),n[3].setComponents(c-s,h-d,y-g,S-P).normalize(),n[4].setComponents(c-a,h-u,y-w,S-E).normalize(),t===si)n[5].setComponents(c+a,h+u,y+w,S+E).normalize();else if(t===zs)n[5].setComponents(a,u,w,E).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);return this}intersectsObject(e){if(e.boundingSphere!==void 0)e.boundingSphere===null&&e.computeBoundingSphere(),_i.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;t.boundingSphere===null&&t.computeBoundingSphere(),_i.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(_i)}intersectsSprite(e){return _i.center.set(0,0,0),_i.radius=.7071067811865476,_i.applyMatrix4(e.matrixWorld),this.intersectsSphere(_i)}intersectsSphere(e){const t=this.planes,n=e.center,i=-e.radius;for(let o=0;o<6;o++)if(t[o].distanceToPoint(n)<i)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const i=t[n];if(ts.x=i.normal.x>0?e.max.x:e.min.x,ts.y=i.normal.y>0?e.max.y:e.min.y,ts.z=i.normal.z>0?e.max.z:e.min.z,i.distanceToPoint(ts)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}class Ks extends Bn{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new Ue(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}const Us=new A,js=new A,a0=new He,Kr=new _r,ns=new Yn,za=new A,c0=new A;class ql extends Tt{constructor(e=new un,t=new Ks){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=t,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[0];for(let i=1,o=t.count;i<o;i++)Us.fromBufferAttribute(t,i-1),js.fromBufferAttribute(t,i),n[i]=n[i-1],n[i]+=Us.distanceTo(js);e.setAttribute("lineDistance",new sn(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,o=e.params.Line.threshold,s=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),ns.copy(n.boundingSphere),ns.applyMatrix4(i),ns.radius+=o,e.ray.intersectsSphere(ns)===!1)return;a0.copy(i).invert(),Kr.copy(e.ray).applyMatrix4(a0);const a=o/((this.scale.x+this.scale.y+this.scale.z)/3),c=a*a,l=this.isLineSegments?2:1,d=n.index,h=n.attributes.position;if(d!==null){const f=Math.max(0,s.start),g=Math.min(d.count,s.start+s.count);for(let w=f,y=g-1;w<y;w+=l){const m=d.getX(w),P=d.getX(w+1),E=is(this,e,Kr,c,m,P,w);E&&t.push(E)}if(this.isLineLoop){const w=d.getX(g-1),y=d.getX(f),m=is(this,e,Kr,c,w,y,g-1);m&&t.push(m)}}else{const f=Math.max(0,s.start),g=Math.min(h.count,s.start+s.count);for(let w=f,y=g-1;w<y;w+=l){const m=is(this,e,Kr,c,w,w+1,w);m&&t.push(m)}if(this.isLineLoop){const w=is(this,e,Kr,c,g-1,f,g-1);w&&t.push(w)}}}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let o=0,s=i.length;o<s;o++){const a=i[o].name||String(o);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=o}}}}}function is(r,e,t,n,i,o,s){const a=r.geometry.attributes.position;if(Us.fromBufferAttribute(a,i),js.fromBufferAttribute(a,o),t.distanceSqToSegment(Us,js,za,c0)>n)return;za.applyMatrix4(r.matrixWorld);const l=e.ray.origin.distanceTo(za);if(!(l<e.near||l>e.far))return{distance:l,point:c0.clone().applyMatrix4(r.matrixWorld),index:s,face:null,faceIndex:null,barycoord:null,object:r}}const l0=new A,d0=new A;class Kl extends ql{constructor(e,t){super(e,t),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[];for(let i=0,o=t.count;i<o;i+=2)l0.fromBufferAttribute(t,i),d0.fromBufferAttribute(t,i+1),n[i]=i===0?0:n[i-1],n[i+1]=n[i]+l0.distanceTo(d0);e.setAttribute("lineDistance",new sn(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class g1 extends ql{constructor(e,t){super(e,t),this.isLineLoop=!0,this.type="LineLoop"}}class zh extends Bn{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new Ue(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}const u0=new He,ml=new _r,rs=new Yn,os=new A;class w1 extends Tt{constructor(e=new un,t=new zh){super(),this.isPoints=!0,this.type="Points",this.geometry=e,this.material=t,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,o=e.params.Points.threshold,s=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),rs.copy(n.boundingSphere),rs.applyMatrix4(i),rs.radius+=o,e.ray.intersectsSphere(rs)===!1)return;u0.copy(i).invert(),ml.copy(e.ray).applyMatrix4(u0);const a=o/((this.scale.x+this.scale.y+this.scale.z)/3),c=a*a,l=n.index,u=n.attributes.position;if(l!==null){const h=Math.max(0,s.start),f=Math.min(l.count,s.start+s.count);for(let g=h,w=f;g<w;g++){const y=l.getX(g);os.fromBufferAttribute(u,y),h0(os,y,c,i,e,t,this)}}else{const h=Math.max(0,s.start),f=Math.min(u.count,s.start+s.count);for(let g=h,w=f;g<w;g++)os.fromBufferAttribute(u,g),h0(os,g,c,i,e,t,this)}}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let o=0,s=i.length;o<s;o++){const a=i[o].name||String(o);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=o}}}}}function h0(r,e,t,n,i,o,s){const a=ml.distanceSqToPoint(r);if(a<t){const c=new A;ml.closestPointToPoint(r,c),c.applyMatrix4(n);const l=i.ray.origin.distanceTo(c);if(l<i.near||l>i.far)return;o.push({distance:l,distanceToRay:Math.sqrt(a),point:c,index:e,face:null,faceIndex:null,barycoord:null,object:s})}}class Uh extends kt{constructor(e,t,n=Gi,i,o,s,a=rn,c=rn,l,d=xo){if(d!==xo&&d!==vo)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");super(null,i,o,s,a,c,d,n,l),this.isDepthTexture=!0,this.image={width:e,height:t},this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.source=new kl(Object.assign({},e.image)),this.compareFunction=e.compareFunction,this}toJSON(e){const t=super.toJSON(e);return this.compareFunction!==null&&(t.compareFunction=this.compareFunction),t}}class Js extends un{constructor(e=1,t=1,n=1,i=32,o=1,s=!1,a=0,c=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:i,heightSegments:o,openEnded:s,thetaStart:a,thetaLength:c};const l=this;i=Math.floor(i),o=Math.floor(o);const d=[],u=[],h=[],f=[];let g=0;const w=[],y=n/2;let m=0;P(),s===!1&&(e>0&&E(!0),t>0&&E(!1)),this.setIndex(d),this.setAttribute("position",new sn(u,3)),this.setAttribute("normal",new sn(h,3)),this.setAttribute("uv",new sn(f,2));function P(){const S=new A,D=new A;let H=0;const I=(t-e)/n;for(let z=0;z<=o;z++){const M=[],T=z/o,C=T*(t-e)+e;for(let B=0;B<=i;B++){const k=B/i,Y=k*c+a,ee=Math.sin(Y),q=Math.cos(Y);D.x=C*ee,D.y=-T*n+y,D.z=C*q,u.push(D.x,D.y,D.z),S.set(ee,I,q).normalize(),h.push(S.x,S.y,S.z),f.push(k,1-T),M.push(g++)}w.push(M)}for(let z=0;z<i;z++)for(let M=0;M<o;M++){const T=w[M][z],C=w[M+1][z],B=w[M+1][z+1],k=w[M][z+1];(e>0||M!==0)&&(d.push(T,C,k),H+=3),(t>0||M!==o-1)&&(d.push(C,B,k),H+=3)}l.addGroup(m,H,0),m+=H}function E(S){const D=g,H=new Oe,I=new A;let z=0;const M=S===!0?e:t,T=S===!0?1:-1;for(let B=1;B<=i;B++)u.push(0,y*T,0),h.push(0,T,0),f.push(.5,.5),g++;const C=g;for(let B=0;B<=i;B++){const Y=B/i*c+a,ee=Math.cos(Y),q=Math.sin(Y);I.x=M*q,I.y=y*T,I.z=M*ee,u.push(I.x,I.y,I.z),h.push(0,T,0),H.x=ee*.5+.5,H.y=q*.5*T+.5,f.push(H.x,H.y),g++}for(let B=0;B<i;B++){const k=D+B,Y=C+B;S===!0?d.push(Y,Y+1,k):d.push(Y+1,Y,k),z+=3}l.addGroup(m,z,S===!0?1:2),m+=z}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Js(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}const ss=new A,as=new A,Ua=new A,cs=new br;class x1 extends un{constructor(e=null,t=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:e,thresholdAngle:t},e!==null){const i=Math.pow(10,4),o=Math.cos(Mr*t),s=e.getIndex(),a=e.getAttribute("position"),c=s?s.count:a.count,l=[0,0,0],d=["a","b","c"],u=new Array(3),h={},f=[];for(let g=0;g<c;g+=3){s?(l[0]=s.getX(g),l[1]=s.getX(g+1),l[2]=s.getX(g+2)):(l[0]=g,l[1]=g+1,l[2]=g+2);const{a:w,b:y,c:m}=cs;if(w.fromBufferAttribute(a,l[0]),y.fromBufferAttribute(a,l[1]),m.fromBufferAttribute(a,l[2]),cs.getNormal(Ua),u[0]=`${Math.round(w.x*i)},${Math.round(w.y*i)},${Math.round(w.z*i)}`,u[1]=`${Math.round(y.x*i)},${Math.round(y.y*i)},${Math.round(y.z*i)}`,u[2]=`${Math.round(m.x*i)},${Math.round(m.y*i)},${Math.round(m.z*i)}`,!(u[0]===u[1]||u[1]===u[2]||u[2]===u[0]))for(let P=0;P<3;P++){const E=(P+1)%3,S=u[P],D=u[E],H=cs[d[P]],I=cs[d[E]],z=`${S}_${D}`,M=`${D}_${S}`;M in h&&h[M]?(Ua.dot(h[M].normal)<=o&&(f.push(H.x,H.y,H.z),f.push(I.x,I.y,I.z)),h[M]=null):z in h||(h[z]={index0:l[P],index1:l[E],normal:Ua.clone()})}}for(const g in h)if(h[g]){const{index0:w,index1:y}=h[g];ss.fromBufferAttribute(a,w),as.fromBufferAttribute(a,y),f.push(ss.x,ss.y,ss.z),f.push(as.x,as.y,as.z)}this.setAttribute("position",new sn(f,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}class Qs extends un{constructor(e=1,t=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};const o=e/2,s=t/2,a=Math.floor(n),c=Math.floor(i),l=a+1,d=c+1,u=e/a,h=t/c,f=[],g=[],w=[],y=[];for(let m=0;m<d;m++){const P=m*h-s;for(let E=0;E<l;E++){const S=E*u-o;g.push(S,-P,0),w.push(0,0,1),y.push(E/a),y.push(1-m/c)}}for(let m=0;m<c;m++)for(let P=0;P<a;P++){const E=P+l*m,S=P+l*(m+1),D=P+1+l*(m+1),H=P+1+l*m;f.push(E,S,H),f.push(S,D,H)}this.setIndex(f),this.setAttribute("position",new sn(g,3)),this.setAttribute("normal",new sn(w,3)),this.setAttribute("uv",new sn(y,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Qs(e.width,e.height,e.widthSegments,e.heightSegments)}}class Ur extends Bn{constructor(e){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new Ue(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ue(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Mh,this.normalScale=new Oe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new It,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class qn extends Ur{constructor(e){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Oe(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return Be(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new Ue(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new Ue(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new Ue(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(e)}get anisotropy(){return this._anisotropy}set anisotropy(e){this._anisotropy>0!=e>0&&this.version++,this._anisotropy=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){this._iridescence>0!=e>0&&this.version++,this._iridescence=e}get dispersion(){return this._dispersion}set dispersion(e){this._dispersion>0!=e>0&&this.version++,this._dispersion=e}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=e.anisotropy,this.anisotropyRotation=e.anisotropyRotation,this.anisotropyMap=e.anisotropyMap,this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.dispersion=e.dispersion,this.ior=e.ior,this.iridescence=e.iridescence,this.iridescenceMap=e.iridescenceMap,this.iridescenceIOR=e.iridescenceIOR,this.iridescenceThicknessRange=[...e.iridescenceThicknessRange],this.iridescenceThicknessMap=e.iridescenceThicknessMap,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}}class v1 extends Bn{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=df,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class T1 extends Bn{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}function ls(r,e){return!r||r.constructor===e?r:typeof e.BYTES_PER_ELEMENT=="number"?new e(r):Array.prototype.slice.call(r)}function S1(r){return ArrayBuffer.isView(r)&&!(r instanceof DataView)}function M1(r){function e(i,o){return r[i]-r[o]}const t=r.length,n=new Array(t);for(let i=0;i!==t;++i)n[i]=i;return n.sort(e),n}function p0(r,e,t){const n=r.length,i=new r.constructor(n);for(let o=0,s=0;s!==n;++o){const a=t[o]*e;for(let c=0;c!==e;++c)i[s++]=r[a+c]}return i}function jh(r,e,t,n){let i=1,o=r[0];for(;o!==void 0&&o[n]===void 0;)o=r[i++];if(o===void 0)return;let s=o[n];if(s!==void 0)if(Array.isArray(s))do s=o[n],s!==void 0&&(e.push(o.time),t.push(...s)),o=r[i++];while(o!==void 0);else if(s.toArray!==void 0)do s=o[n],s!==void 0&&(e.push(o.time),s.toArray(t,t.length)),o=r[i++];while(o!==void 0);else do s=o[n],s!==void 0&&(e.push(o.time),t.push(s)),o=r[i++];while(o!==void 0)}class Oo{constructor(e,t,n,i){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=i!==void 0?i:new t.constructor(n),this.sampleValues=t,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(e){const t=this.parameterPositions;let n=this._cachedIndex,i=t[n],o=t[n-1];n:{e:{let s;t:{i:if(!(e<i)){for(let a=n+2;;){if(i===void 0){if(e<o)break i;return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}if(n===a)break;if(o=i,i=t[++n],e<i)break e}s=t.length;break t}if(!(e>=o)){const a=t[1];e<a&&(n=2,o=a);for(let c=n-2;;){if(o===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(n===c)break;if(i=o,o=t[--n-1],e>=o)break e}s=n,n=0;break t}break n}for(;n<s;){const a=n+s>>>1;e<t[a]?s=a:n=a+1}if(i=t[n],o=t[n-1],o===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(i===void 0)return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}this._cachedIndex=n,this.intervalChanged_(n,o,i)}return this.interpolate_(n,o,e,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,i=this.valueSize,o=e*i;for(let s=0;s!==i;++s)t[s]=n[o+s];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class E1 extends Oo{constructor(e,t,n,i){super(e,t,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:Hd,endingEnd:Hd}}intervalChanged_(e,t,n){const i=this.parameterPositions;let o=e-2,s=e+1,a=i[o],c=i[s];if(a===void 0)switch(this.getSettings_().endingStart){case Id:o=e,a=2*t-n;break;case Nd:o=i.length-2,a=t+i[o]-i[o+1];break;default:o=e,a=n}if(c===void 0)switch(this.getSettings_().endingEnd){case Id:s=e,c=2*n-t;break;case Nd:s=1,c=n+i[1]-i[0];break;default:s=e-1,c=t}const l=(n-t)*.5,d=this.valueSize;this._weightPrev=l/(t-a),this._weightNext=l/(c-n),this._offsetPrev=o*d,this._offsetNext=s*d}interpolate_(e,t,n,i){const o=this.resultBuffer,s=this.sampleValues,a=this.valueSize,c=e*a,l=c-a,d=this._offsetPrev,u=this._offsetNext,h=this._weightPrev,f=this._weightNext,g=(n-t)/(i-t),w=g*g,y=w*g,m=-h*y+2*h*w-h*g,P=(1+h)*y+(-1.5-2*h)*w+(-.5+h)*g+1,E=(-1-f)*y+(1.5+f)*w+.5*g,S=f*y-f*w;for(let D=0;D!==a;++D)o[D]=m*s[d+D]+P*s[l+D]+E*s[c+D]+S*s[u+D];return o}}class R1 extends Oo{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const o=this.resultBuffer,s=this.sampleValues,a=this.valueSize,c=e*a,l=c-a,d=(n-t)/(i-t),u=1-d;for(let h=0;h!==a;++h)o[h]=s[l+h]*u+s[c+h]*d;return o}}class P1 extends Oo{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e){return this.copySampleValue_(e-1)}}class jn{constructor(e,t,n,i){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===void 0||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=ls(t,this.TimeBufferType),this.values=ls(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(e){const t=e.constructor;let n;if(t.toJSON!==this.toJSON)n=t.toJSON(e);else{n={name:e.name,times:ls(e.times,Array),values:ls(e.values,Array)};const i=e.getInterpolation();i!==e.DefaultInterpolation&&(n.interpolation=i)}return n.type=e.ValueTypeName,n}InterpolantFactoryMethodDiscrete(e){return new P1(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new R1(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new E1(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case To:t=this.InterpolantFactoryMethodDiscrete;break;case So:t=this.InterpolantFactoryMethodLinear;break;case pa:t=this.InterpolantFactoryMethodSmooth;break}if(t===void 0){const n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(n);return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return To;case this.InterpolantFactoryMethodLinear:return So;case this.InterpolantFactoryMethodSmooth:return pa}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]+=e}return this}scale(e){if(e!==1){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]*=e}return this}trim(e,t){const n=this.times,i=n.length;let o=0,s=i-1;for(;o!==i&&n[o]<e;)++o;for(;s!==-1&&n[s]>t;)--s;if(++s,o!==0||s!==i){o>=s&&(s=Math.max(s,1),o=s-1);const a=this.getValueSize();this.times=n.slice(o,s),this.values=this.values.slice(o*a,s*a)}return this}validate(){let e=!0;const t=this.getValueSize();t-Math.floor(t)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const n=this.times,i=this.values,o=n.length;o===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let s=null;for(let a=0;a!==o;a++){const c=n[a];if(typeof c=="number"&&isNaN(c)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,a,c),e=!1;break}if(s!==null&&s>c){console.error("THREE.KeyframeTrack: Out of order keys.",this,a,c,s),e=!1;break}s=c}if(i!==void 0&&S1(i))for(let a=0,c=i.length;a!==c;++a){const l=i[a];if(isNaN(l)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,a,l),e=!1;break}}return e}optimize(){const e=this.times.slice(),t=this.values.slice(),n=this.getValueSize(),i=this.getInterpolation()===pa,o=e.length-1;let s=1;for(let a=1;a<o;++a){let c=!1;const l=e[a],d=e[a+1];if(l!==d&&(a!==1||l!==e[0]))if(i)c=!0;else{const u=a*n,h=u-n,f=u+n;for(let g=0;g!==n;++g){const w=t[u+g];if(w!==t[h+g]||w!==t[f+g]){c=!0;break}}}if(c){if(a!==s){e[s]=e[a];const u=a*n,h=s*n;for(let f=0;f!==n;++f)t[h+f]=t[u+f]}++s}}if(o>0){e[s]=e[o];for(let a=o*n,c=s*n,l=0;l!==n;++l)t[c+l]=t[a+l];++s}return s!==e.length?(this.times=e.slice(0,s),this.values=t.slice(0,s*n)):(this.times=e,this.values=t),this}clone(){const e=this.times.slice(),t=this.values.slice(),n=this.constructor,i=new n(this.name,e,t);return i.createInterpolant=this.createInterpolant,i}}jn.prototype.ValueTypeName="";jn.prototype.TimeBufferType=Float32Array;jn.prototype.ValueBufferType=Float32Array;jn.prototype.DefaultInterpolation=So;class jr extends jn{constructor(e,t,n){super(e,t,n)}}jr.prototype.ValueTypeName="bool";jr.prototype.ValueBufferType=Array;jr.prototype.DefaultInterpolation=To;jr.prototype.InterpolantFactoryMethodLinear=void 0;jr.prototype.InterpolantFactoryMethodSmooth=void 0;class Fh extends jn{constructor(e,t,n,i){super(e,t,n,i)}}Fh.prototype.ValueTypeName="color";class Or extends jn{constructor(e,t,n,i){super(e,t,n,i)}}Or.prototype.ValueTypeName="number";class L1 extends Oo{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const o=this.resultBuffer,s=this.sampleValues,a=this.valueSize,c=(n-t)/(i-t);let l=e*a;for(let d=l+a;l!==d;l+=4)Rt.slerpFlat(o,0,s,l-a,s,l,c);return o}}class Cr extends jn{constructor(e,t,n,i){super(e,t,n,i)}InterpolantFactoryMethodLinear(e){return new L1(this.times,this.values,this.getValueSize(),e)}}Cr.prototype.ValueTypeName="quaternion";Cr.prototype.InterpolantFactoryMethodSmooth=void 0;class Fr extends jn{constructor(e,t,n){super(e,t,n)}}Fr.prototype.ValueTypeName="string";Fr.prototype.ValueBufferType=Array;Fr.prototype.DefaultInterpolation=To;Fr.prototype.InterpolantFactoryMethodLinear=void 0;Fr.prototype.InterpolantFactoryMethodSmooth=void 0;class Dr extends jn{constructor(e,t,n,i){super(e,t,n,i)}}Dr.prototype.ValueTypeName="vector";class A1{constructor(e="",t=-1,n=[],i=cf){this.name=e,this.tracks=n,this.duration=t,this.blendMode=i,this.uuid=Un(),this.duration<0&&this.resetDuration()}static parse(e){const t=[],n=e.tracks,i=1/(e.fps||1);for(let s=0,a=n.length;s!==a;++s)t.push(I1(n[s]).scale(i));const o=new this(e.name,e.duration,t,e.blendMode);return o.uuid=e.uuid,o}static toJSON(e){const t=[],n=e.tracks,i={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode};for(let o=0,s=n.length;o!==s;++o)t.push(jn.toJSON(n[o]));return i}static CreateFromMorphTargetSequence(e,t,n,i){const o=t.length,s=[];for(let a=0;a<o;a++){let c=[],l=[];c.push((a+o-1)%o,a,(a+1)%o),l.push(0,1,0);const d=M1(c);c=p0(c,1,d),l=p0(l,1,d),!i&&c[0]===0&&(c.push(o),l.push(l[0])),s.push(new Or(".morphTargetInfluences["+t[a].name+"]",c,l).scale(1/n))}return new this(e,-1,s)}static findByName(e,t){let n=e;if(!Array.isArray(e)){const i=e;n=i.geometry&&i.geometry.animations||i.animations}for(let i=0;i<n.length;i++)if(n[i].name===t)return n[i];return null}static CreateClipsFromMorphTargetSequences(e,t,n){const i={},o=/^([\w-]*?)([\d]+)$/;for(let a=0,c=e.length;a<c;a++){const l=e[a],d=l.name.match(o);if(d&&d.length>1){const u=d[1];let h=i[u];h||(i[u]=h=[]),h.push(l)}}const s=[];for(const a in i)s.push(this.CreateFromMorphTargetSequence(a,i[a],t,n));return s}static parseAnimation(e,t){if(console.warn("THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185"),!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(u,h,f,g,w){if(f.length!==0){const y=[],m=[];jh(f,y,m,g),y.length!==0&&w.push(new u(h,y,m))}},i=[],o=e.name||"default",s=e.fps||30,a=e.blendMode;let c=e.length||-1;const l=e.hierarchy||[];for(let u=0;u<l.length;u++){const h=l[u].keys;if(!(!h||h.length===0))if(h[0].morphTargets){const f={};let g;for(g=0;g<h.length;g++)if(h[g].morphTargets)for(let w=0;w<h[g].morphTargets.length;w++)f[h[g].morphTargets[w]]=-1;for(const w in f){const y=[],m=[];for(let P=0;P!==h[g].morphTargets.length;++P){const E=h[g];y.push(E.time),m.push(E.morphTarget===w?1:0)}i.push(new Or(".morphTargetInfluence["+w+"]",y,m))}c=f.length*s}else{const f=".bones["+t[u].name+"]";n(Dr,f+".position",h,"pos",i),n(Cr,f+".quaternion",h,"rot",i),n(Dr,f+".scale",h,"scl",i)}}return i.length===0?null:new this(o,c,i,a)}resetDuration(){const e=this.tracks;let t=0;for(let n=0,i=e.length;n!==i;++n){const o=this.tracks[n];t=Math.max(t,o.times[o.times.length-1])}return this.duration=t,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new this.constructor(this.name,this.duration,e,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function H1(r){switch(r.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Or;case"vector":case"vector2":case"vector3":case"vector4":return Dr;case"color":return Fh;case"quaternion":return Cr;case"bool":case"boolean":return jr;case"string":return Fr}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+r)}function I1(r){if(r.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=H1(r.type);if(r.times===void 0){const t=[],n=[];jh(r.keys,t,n,"value"),r.times=t,r.values=n}return e.parse!==void 0?e.parse(r):new e(r.name,r.times,r.values,r.interpolation)}const Ri={enabled:!1,files:{},add:function(r,e){this.enabled!==!1&&(this.files[r]=e)},get:function(r){if(this.enabled!==!1)return this.files[r]},remove:function(r){delete this.files[r]},clear:function(){this.files={}}};class N1{constructor(e,t,n){const i=this;let o=!1,s=0,a=0,c;const l=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(d){a++,o===!1&&i.onStart!==void 0&&i.onStart(d,s,a),o=!0},this.itemEnd=function(d){s++,i.onProgress!==void 0&&i.onProgress(d,s,a),s===a&&(o=!1,i.onLoad!==void 0&&i.onLoad())},this.itemError=function(d){i.onError!==void 0&&i.onError(d)},this.resolveURL=function(d){return c?c(d):d},this.setURLModifier=function(d){return c=d,this},this.addHandler=function(d,u){return l.push(d,u),this},this.removeHandler=function(d){const u=l.indexOf(d);return u!==-1&&l.splice(u,2),this},this.getHandler=function(d){for(let u=0,h=l.length;u<h;u+=2){const f=l[u],g=l[u+1];if(f.global&&(f.lastIndex=0),f.test(d))return g}return null}}}const O1=new N1;class Vr{constructor(e){this.manager=e!==void 0?e:O1,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(i,o){n.load(e,i,t,o)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}Vr.DEFAULT_MATERIAL_NAME="__DEFAULT";const ni={};class C1 extends Error{constructor(e,t){super(e),this.response=t}}class Vh extends Vr{constructor(e){super(e),this.mimeType="",this.responseType=""}load(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const o=Ri.get(e);if(o!==void 0)return this.manager.itemStart(e),setTimeout(()=>{t&&t(o),this.manager.itemEnd(e)},0),o;if(ni[e]!==void 0){ni[e].push({onLoad:t,onProgress:n,onError:i});return}ni[e]=[],ni[e].push({onLoad:t,onProgress:n,onError:i});const s=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),a=this.mimeType,c=this.responseType;fetch(s).then(l=>{if(l.status===200||l.status===0){if(l.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream>"u"||l.body===void 0||l.body.getReader===void 0)return l;const d=ni[e],u=l.body.getReader(),h=l.headers.get("X-File-Size")||l.headers.get("Content-Length"),f=h?parseInt(h):0,g=f!==0;let w=0;const y=new ReadableStream({start(m){P();function P(){u.read().then(({done:E,value:S})=>{if(E)m.close();else{w+=S.byteLength;const D=new ProgressEvent("progress",{lengthComputable:g,loaded:w,total:f});for(let H=0,I=d.length;H<I;H++){const z=d[H];z.onProgress&&z.onProgress(D)}m.enqueue(S),P()}},E=>{m.error(E)})}}});return new Response(y)}else throw new C1(`fetch for "${l.url}" responded with ${l.status}: ${l.statusText}`,l)}).then(l=>{switch(c){case"arraybuffer":return l.arrayBuffer();case"blob":return l.blob();case"document":return l.text().then(d=>new DOMParser().parseFromString(d,a));case"json":return l.json();default:if(a==="")return l.text();{const u=/charset="?([^;"\s]*)"?/i.exec(a),h=u&&u[1]?u[1].toLowerCase():void 0,f=new TextDecoder(h);return l.arrayBuffer().then(g=>f.decode(g))}}}).then(l=>{Ri.add(e,l);const d=ni[e];delete ni[e];for(let u=0,h=d.length;u<h;u++){const f=d[u];f.onLoad&&f.onLoad(l)}}).catch(l=>{const d=ni[e];if(d===void 0)throw this.manager.itemError(e),l;delete ni[e];for(let u=0,h=d.length;u<h;u++){const f=d[u];f.onError&&f.onError(l)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}class D1 extends Vr{constructor(e){super(e)}load(e,t,n,i){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const o=this,s=Ri.get(e);if(s!==void 0)return o.manager.itemStart(e),setTimeout(function(){t&&t(s),o.manager.itemEnd(e)},0),s;const a=Mo("img");function c(){d(),Ri.add(e,this),t&&t(this),o.manager.itemEnd(e)}function l(u){d(),i&&i(u),o.manager.itemError(e),o.manager.itemEnd(e)}function d(){a.removeEventListener("load",c,!1),a.removeEventListener("error",l,!1)}return a.addEventListener("load",c,!1),a.addEventListener("error",l,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(a.crossOrigin=this.crossOrigin),o.manager.itemStart(e),a.src=e,a}}class _1 extends Vr{constructor(e){super(e)}load(e,t,n,i){const o=new kt,s=new D1(this.manager);return s.setCrossOrigin(this.crossOrigin),s.setPath(this.path),s.load(e,function(a){o.image=a,o.needsUpdate=!0,t!==void 0&&t(o)},n,i),o}}class $s extends Tt{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new Ue(e),this.intensity=t}dispose(){}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(t.object.target=this.target.uuid),t}}const ja=new He,f0=new A,m0=new A;class Jl{constructor(e){this.camera=e,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Oe(512,512),this.mapType=Gn,this.map=null,this.mapPass=null,this.matrix=new He,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Yl,this._frameExtents=new Oe(1,1),this._viewportCount=1,this._viewports=[new it(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,n=this.matrix;f0.setFromMatrixPosition(e.matrixWorld),t.position.copy(f0),m0.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(m0),t.updateMatrixWorld(),ja.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(ja),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(ja)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.intensity=e.intensity,this.bias=e.bias,this.radius=e.radius,this.autoUpdate=e.autoUpdate,this.needsUpdate=e.needsUpdate,this.normalBias=e.normalBias,this.blurSamples=e.blurSamples,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.intensity!==1&&(e.intensity=this.intensity),this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class z1 extends Jl{constructor(){super(new nn(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(e){const t=this.camera,n=Ir*2*e.angle*this.focus,i=this.mapSize.width/this.mapSize.height,o=e.distance||t.far;(n!==t.fov||i!==t.aspect||o!==t.far)&&(t.fov=n,t.aspect=i,t.far=o,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}class U1 extends $s{constructor(e,t,n=0,i=Math.PI/3,o=0,s=2){super(e,t),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(Tt.DEFAULT_UP),this.updateMatrix(),this.target=new Tt,this.distance=n,this.angle=i,this.penumbra=o,this.decay=s,this.map=null,this.shadow=new z1}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}const b0=new He,Jr=new A,Fa=new A;class j1 extends Jl{constructor(){super(new nn(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new Oe(4,2),this._viewportCount=6,this._viewports=[new it(2,1,1,1),new it(0,1,1,1),new it(3,1,1,1),new it(1,1,1,1),new it(3,0,1,1),new it(1,0,1,1)],this._cubeDirections=[new A(1,0,0),new A(-1,0,0),new A(0,0,1),new A(0,0,-1),new A(0,1,0),new A(0,-1,0)],this._cubeUps=[new A(0,1,0),new A(0,1,0),new A(0,1,0),new A(0,1,0),new A(0,0,1),new A(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera,i=this.matrix,o=e.distance||n.far;o!==n.far&&(n.far=o,n.updateProjectionMatrix()),Jr.setFromMatrixPosition(e.matrixWorld),n.position.copy(Jr),Fa.copy(n.position),Fa.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(Fa),n.updateMatrixWorld(),i.makeTranslation(-Jr.x,-Jr.y,-Jr.z),b0.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(b0)}}class Xh extends $s{constructor(e,t,n=0,i=2){super(e,t),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new j1}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}class Ql extends Oh{constructor(e=-1,t=1,n=1,i=-1,o=.1,s=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=i,this.near=o,this.far=s,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,i,o,s){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=o,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let o=n-e,s=n+e,a=i+t,c=i-t;if(this.view!==null&&this.view.enabled){const l=(this.right-this.left)/this.view.fullWidth/this.zoom,d=(this.top-this.bottom)/this.view.fullHeight/this.zoom;o+=l*this.view.offsetX,s=o+l*this.view.width,a-=d*this.view.offsetY,c=a-d*this.view.height}this.projectionMatrix.makeOrthographic(o,s,a,c,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}class F1 extends Jl{constructor(){super(new Ql(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class kh extends $s{constructor(e,t){super(e,t),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(Tt.DEFAULT_UP),this.updateMatrix(),this.target=new Tt,this.shadow=new F1}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}class V1 extends $s{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}}class ho{static extractUrlBase(e){const t=e.lastIndexOf("/");return t===-1?"./":e.slice(0,t+1)}static resolveURL(e,t){return typeof e!="string"||e===""?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}}class X1 extends Vr{constructor(e){super(e),this.isImageBitmapLoader=!0,typeof createImageBitmap>"u"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch>"u"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(e){return this.options=e,this}load(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const o=this,s=Ri.get(e);if(s!==void 0){if(o.manager.itemStart(e),s.then){s.then(l=>{t&&t(l),o.manager.itemEnd(e)}).catch(l=>{i&&i(l)});return}return setTimeout(function(){t&&t(s),o.manager.itemEnd(e)},0),s}const a={};a.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",a.headers=this.requestHeader;const c=fetch(e,a).then(function(l){return l.blob()}).then(function(l){return createImageBitmap(l,Object.assign(o.options,{colorSpaceConversion:"none"}))}).then(function(l){return Ri.add(e,l),t&&t(l),o.manager.itemEnd(e),l}).catch(function(l){i&&i(l),Ri.remove(e),o.manager.itemError(e),o.manager.itemEnd(e)});Ri.add(e,c),o.manager.itemStart(e)}}class k1 extends nn{constructor(e=[]){super(),this.isArrayCamera=!0,this.isMultiViewCamera=!1,this.cameras=e}}const $l="\\[\\]\\.:\\/",W1=new RegExp("["+$l+"]","g"),ed="[^"+$l+"]",B1="[^"+$l.replace("\\.","")+"]",G1=/((?:WC+[\/:])*)/.source.replace("WC",ed),Z1=/(WCOD+)?/.source.replace("WCOD",B1),Y1=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",ed),q1=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",ed),K1=new RegExp("^"+G1+Z1+Y1+q1+"$"),J1=["material","materials","bones","map"];class Q1{constructor(e,t,n){const i=n||lt.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,i)}getValue(e,t){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];i!==void 0&&i.getValue(e,t)}setValue(e,t){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,o=n.length;i!==o;++i)n[i].setValue(e,t)}bind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()}unbind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}}class lt{constructor(e,t,n){this.path=t,this.parsedPath=n||lt.parseTrackName(t),this.node=lt.findNode(e,this.parsedPath.nodeName),this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,n){return e&&e.isAnimationObjectGroup?new lt.Composite(e,t,n):new lt(e,t,n)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(W1,"")}static parseTrackName(e){const t=K1.exec(e);if(t===null)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(i!==void 0&&i!==-1){const o=n.nodeName.substring(i+1);J1.indexOf(o)!==-1&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=o)}if(n.propertyName===null||n.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return n}static findNode(e,t){if(t===void 0||t===""||t==="."||t===-1||t===e.name||t===e.uuid)return e;if(e.skeleton){const n=e.skeleton.getBoneByName(t);if(n!==void 0)return n}if(e.children){const n=function(o){for(let s=0;s<o.length;s++){const a=o[s];if(a.name===t||a.uuid===t)return a;const c=n(a.children);if(c)return c}return null},i=n(e.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){const n=this.resolvedProperty;for(let i=0,o=n.length;i!==o;++i)e[t++]=n[i]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){const n=this.resolvedProperty;for(let i=0,o=n.length;i!==o;++i)n[i]=e[t++]}_setValue_array_setNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,o=n.length;i!==o;++i)n[i]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,o=n.length;i!==o;++i)n[i]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node;const t=this.parsedPath,n=t.objectName,i=t.propertyName;let o=t.propertyIndex;if(e||(e=lt.findNode(this.rootNode,t.nodeName),this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");return}if(n){let l=t.objectIndex;switch(n){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let d=0;d<e.length;d++)if(e[d].name===l){l=d;break}break;case"map":if("map"in e){e=e.map;break}if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}e=e.material.map;break;default:if(e[n]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[n]}if(l!==void 0){if(e[l]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[l]}}const s=e[i];if(s===void 0){const l=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+l+"."+i+" but it wasn't found.",e);return}let a=this.Versioning.None;this.targetObject=e,e.isMaterial===!0?a=this.Versioning.NeedsUpdate:e.isObject3D===!0&&(a=this.Versioning.MatrixWorldNeedsUpdate);let c=this.BindingType.Direct;if(o!==void 0){if(i==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[o]!==void 0&&(o=e.morphTargetDictionary[o])}c=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=o}else s.fromArray!==void 0&&s.toArray!==void 0?(c=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(c=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=i;this.getValue=this.GetterByBindingType[c],this.setValue=this.SetterByBindingTypeAndVersioning[c][a]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}lt.Composite=Q1;lt.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};lt.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};lt.prototype.GetterByBindingType=[lt.prototype._getValue_direct,lt.prototype._getValue_array,lt.prototype._getValue_arrayElement,lt.prototype._getValue_toArray];lt.prototype.SetterByBindingTypeAndVersioning=[[lt.prototype._setValue_direct,lt.prototype._setValue_direct_setNeedsUpdate,lt.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[lt.prototype._setValue_array,lt.prototype._setValue_array_setNeedsUpdate,lt.prototype._setValue_array_setMatrixWorldNeedsUpdate],[lt.prototype._setValue_arrayElement,lt.prototype._setValue_arrayElement_setNeedsUpdate,lt.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[lt.prototype._setValue_fromArray,lt.prototype._setValue_fromArray_setNeedsUpdate,lt.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];const y0=new He;class $1{constructor(e,t,n=0,i=1/0){this.ray=new _r(e,t),this.near=n,this.far=i,this.camera=null,this.layers=new Wl,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,t){this.ray.set(e,t)}setFromCamera(e,t){t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}setFromXRController(e){return y0.identity().extractRotation(e.matrixWorld),this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(y0),this}intersectObject(e,t=!0,n=[]){return bl(e,this,n,t),n.sort(g0),n}intersectObjects(e,t=!0,n=[]){for(let i=0,o=e.length;i<o;i++)bl(e[i],this,n,t);return n.sort(g0),n}}function g0(r,e){return r.distance-e.distance}function bl(r,e,t,n){let i=!0;if(r.layers.test(e.layers)&&r.raycast(e,t)===!1&&(i=!1),i===!0&&n===!0){const o=r.children;for(let s=0,a=o.length;s<a;s++)bl(o[s],e,t,!0)}}class w0{constructor(e=1,t=0,n=0){this.radius=e,this.phi=t,this.theta=n}set(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=Be(this.phi,1e-6,Math.PI-1e-6),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(Be(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class e2 extends Ji{constructor(e,t=null){super(),this.object=e,this.domElement=t,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(e){if(e===void 0){console.warn("THREE.Controls: connect() now requires an element.");return}this.domElement!==null&&this.disconnect(),this.domElement=e}disconnect(){}dispose(){}update(){}}function x0(r,e,t,n){const i=t2(n);switch(t){case wh:return r*e;case Ul:return r*e/i.components*i.byteLength;case jl:return r*e/i.components*i.byteLength;case vh:return r*e*2/i.components*i.byteLength;case Fl:return r*e*2/i.components*i.byteLength;case xh:return r*e*3/i.components*i.byteLength;case Mn:return r*e*4/i.components*i.byteLength;case Vl:return r*e*4/i.components*i.byteLength;case Es:case Rs:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*8;case Ps:case Ls:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*16;case Vc:case kc:return Math.max(r,16)*Math.max(e,8)/4;case Fc:case Xc:return Math.max(r,8)*Math.max(e,8)/2;case Wc:case Bc:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*8;case Gc:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*16;case Zc:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*16;case Yc:return Math.floor((r+4)/5)*Math.floor((e+3)/4)*16;case qc:return Math.floor((r+4)/5)*Math.floor((e+4)/5)*16;case Kc:return Math.floor((r+5)/6)*Math.floor((e+4)/5)*16;case Jc:return Math.floor((r+5)/6)*Math.floor((e+5)/6)*16;case Qc:return Math.floor((r+7)/8)*Math.floor((e+4)/5)*16;case $c:return Math.floor((r+7)/8)*Math.floor((e+5)/6)*16;case el:return Math.floor((r+7)/8)*Math.floor((e+7)/8)*16;case tl:return Math.floor((r+9)/10)*Math.floor((e+4)/5)*16;case nl:return Math.floor((r+9)/10)*Math.floor((e+5)/6)*16;case il:return Math.floor((r+9)/10)*Math.floor((e+7)/8)*16;case rl:return Math.floor((r+9)/10)*Math.floor((e+9)/10)*16;case ol:return Math.floor((r+11)/12)*Math.floor((e+9)/10)*16;case sl:return Math.floor((r+11)/12)*Math.floor((e+11)/12)*16;case As:case al:case cl:return Math.ceil(r/4)*Math.ceil(e/4)*16;case Th:case ll:return Math.ceil(r/4)*Math.ceil(e/4)*8;case dl:case ul:return Math.ceil(r/4)*Math.ceil(e/4)*16}throw new Error(`Unable to determine texture byte length for ${t} format.`)}function t2(r){switch(r){case Gn:case bh:return{byteLength:1,components:1};case go:case yh:case No:return{byteLength:2,components:1};case _l:case zl:return{byteLength:2,components:4};case Gi:case Dl:case _n:return{byteLength:4,components:1};case gh:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${r}.`)}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:Cl}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=Cl);/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function Wh(){let r=null,e=!1,t=null,n=null;function i(o,s){t(o,s),n=r.requestAnimationFrame(i)}return{start:function(){e!==!0&&t!==null&&(n=r.requestAnimationFrame(i),e=!0)},stop:function(){r.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(o){t=o},setContext:function(o){r=o}}}function n2(r){const e=new WeakMap;function t(a,c){const l=a.array,d=a.usage,u=l.byteLength,h=r.createBuffer();r.bindBuffer(c,h),r.bufferData(c,l,d),a.onUploadCallback();let f;if(l instanceof Float32Array)f=r.FLOAT;else if(l instanceof Uint16Array)a.isFloat16BufferAttribute?f=r.HALF_FLOAT:f=r.UNSIGNED_SHORT;else if(l instanceof Int16Array)f=r.SHORT;else if(l instanceof Uint32Array)f=r.UNSIGNED_INT;else if(l instanceof Int32Array)f=r.INT;else if(l instanceof Int8Array)f=r.BYTE;else if(l instanceof Uint8Array)f=r.UNSIGNED_BYTE;else if(l instanceof Uint8ClampedArray)f=r.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+l);return{buffer:h,type:f,bytesPerElement:l.BYTES_PER_ELEMENT,version:a.version,size:u}}function n(a,c,l){const d=c.array,u=c.updateRanges;if(r.bindBuffer(l,a),u.length===0)r.bufferSubData(l,0,d);else{u.sort((f,g)=>f.start-g.start);let h=0;for(let f=1;f<u.length;f++){const g=u[h],w=u[f];w.start<=g.start+g.count+1?g.count=Math.max(g.count,w.start+w.count-g.start):(++h,u[h]=w)}u.length=h+1;for(let f=0,g=u.length;f<g;f++){const w=u[f];r.bufferSubData(l,w.start*d.BYTES_PER_ELEMENT,d,w.start,w.count)}c.clearUpdateRanges()}c.onUploadCallback()}function i(a){return a.isInterleavedBufferAttribute&&(a=a.data),e.get(a)}function o(a){a.isInterleavedBufferAttribute&&(a=a.data);const c=e.get(a);c&&(r.deleteBuffer(c.buffer),e.delete(a))}function s(a,c){if(a.isInterleavedBufferAttribute&&(a=a.data),a.isGLBufferAttribute){const d=e.get(a);(!d||d.version<a.version)&&e.set(a,{buffer:a.buffer,type:a.type,bytesPerElement:a.elementSize,version:a.version});return}const l=e.get(a);if(l===void 0)e.set(a,t(a,c));else if(l.version<a.version){if(l.size!==a.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");n(l.buffer,a,c),l.version=a.version}}return{get:i,remove:o,update:s}}var i2=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,r2=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,o2=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,s2=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,a2=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,c2=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,l2=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,d2=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,u2=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,h2=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,p2=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,f2=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,m2=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,b2=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,y2=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,g2=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,w2=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,x2=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,v2=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,T2=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,S2=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,M2=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,E2=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,R2=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,P2=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,L2=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,A2=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,H2=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,I2=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,N2=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,O2="gl_FragColor = linearToOutputTexel( gl_FragColor );",C2=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,D2=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,_2=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,z2=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,U2=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,j2=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,F2=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,V2=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,X2=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,k2=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,W2=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,B2=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,G2=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,Z2=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,Y2=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,q2=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,K2=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,J2=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,Q2=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,$2=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,em=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,tm=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,nm=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,im=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,rm=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,om=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,sm=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,am=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,cm=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,lm=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,dm=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,um=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,hm=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,pm=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,fm=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,mm=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,bm=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,ym=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,gm=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,wm=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,xm=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,vm=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,Tm=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,Sm=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,Mm=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,Em=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,Rm=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,Pm=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,Lm=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,Am=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,Hm=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,Im=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,Nm=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,Om=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,Cm=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,Dm=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,_m=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,zm=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,Um=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,jm=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,Fm=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,Vm=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,Xm=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,km=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,Wm=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,Bm=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,Gm=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,Zm=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,Ym=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,qm=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,Km=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,Jm=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,Qm=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,$m=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,e3=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,t3=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const n3=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,i3=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,r3=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,o3=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,s3=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,a3=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,c3=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,l3=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,d3=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,u3=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,h3=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,p3=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,f3=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,m3=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,b3=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,y3=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,g3=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,w3=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,x3=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,v3=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,T3=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,S3=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,M3=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,E3=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,R3=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,P3=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,L3=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,A3=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,H3=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,I3=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,N3=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,O3=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,C3=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,D3=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,Xe={alphahash_fragment:i2,alphahash_pars_fragment:r2,alphamap_fragment:o2,alphamap_pars_fragment:s2,alphatest_fragment:a2,alphatest_pars_fragment:c2,aomap_fragment:l2,aomap_pars_fragment:d2,batching_pars_vertex:u2,batching_vertex:h2,begin_vertex:p2,beginnormal_vertex:f2,bsdfs:m2,iridescence_fragment:b2,bumpmap_pars_fragment:y2,clipping_planes_fragment:g2,clipping_planes_pars_fragment:w2,clipping_planes_pars_vertex:x2,clipping_planes_vertex:v2,color_fragment:T2,color_pars_fragment:S2,color_pars_vertex:M2,color_vertex:E2,common:R2,cube_uv_reflection_fragment:P2,defaultnormal_vertex:L2,displacementmap_pars_vertex:A2,displacementmap_vertex:H2,emissivemap_fragment:I2,emissivemap_pars_fragment:N2,colorspace_fragment:O2,colorspace_pars_fragment:C2,envmap_fragment:D2,envmap_common_pars_fragment:_2,envmap_pars_fragment:z2,envmap_pars_vertex:U2,envmap_physical_pars_fragment:q2,envmap_vertex:j2,fog_vertex:F2,fog_pars_vertex:V2,fog_fragment:X2,fog_pars_fragment:k2,gradientmap_pars_fragment:W2,lightmap_pars_fragment:B2,lights_lambert_fragment:G2,lights_lambert_pars_fragment:Z2,lights_pars_begin:Y2,lights_toon_fragment:K2,lights_toon_pars_fragment:J2,lights_phong_fragment:Q2,lights_phong_pars_fragment:$2,lights_physical_fragment:em,lights_physical_pars_fragment:tm,lights_fragment_begin:nm,lights_fragment_maps:im,lights_fragment_end:rm,logdepthbuf_fragment:om,logdepthbuf_pars_fragment:sm,logdepthbuf_pars_vertex:am,logdepthbuf_vertex:cm,map_fragment:lm,map_pars_fragment:dm,map_particle_fragment:um,map_particle_pars_fragment:hm,metalnessmap_fragment:pm,metalnessmap_pars_fragment:fm,morphinstance_vertex:mm,morphcolor_vertex:bm,morphnormal_vertex:ym,morphtarget_pars_vertex:gm,morphtarget_vertex:wm,normal_fragment_begin:xm,normal_fragment_maps:vm,normal_pars_fragment:Tm,normal_pars_vertex:Sm,normal_vertex:Mm,normalmap_pars_fragment:Em,clearcoat_normal_fragment_begin:Rm,clearcoat_normal_fragment_maps:Pm,clearcoat_pars_fragment:Lm,iridescence_pars_fragment:Am,opaque_fragment:Hm,packing:Im,premultiplied_alpha_fragment:Nm,project_vertex:Om,dithering_fragment:Cm,dithering_pars_fragment:Dm,roughnessmap_fragment:_m,roughnessmap_pars_fragment:zm,shadowmap_pars_fragment:Um,shadowmap_pars_vertex:jm,shadowmap_vertex:Fm,shadowmask_pars_fragment:Vm,skinbase_vertex:Xm,skinning_pars_vertex:km,skinning_vertex:Wm,skinnormal_vertex:Bm,specularmap_fragment:Gm,specularmap_pars_fragment:Zm,tonemapping_fragment:Ym,tonemapping_pars_fragment:qm,transmission_fragment:Km,transmission_pars_fragment:Jm,uv_pars_fragment:Qm,uv_pars_vertex:$m,uv_vertex:e3,worldpos_vertex:t3,background_vert:n3,background_frag:i3,backgroundCube_vert:r3,backgroundCube_frag:o3,cube_vert:s3,cube_frag:a3,depth_vert:c3,depth_frag:l3,distanceRGBA_vert:d3,distanceRGBA_frag:u3,equirect_vert:h3,equirect_frag:p3,linedashed_vert:f3,linedashed_frag:m3,meshbasic_vert:b3,meshbasic_frag:y3,meshlambert_vert:g3,meshlambert_frag:w3,meshmatcap_vert:x3,meshmatcap_frag:v3,meshnormal_vert:T3,meshnormal_frag:S3,meshphong_vert:M3,meshphong_frag:E3,meshphysical_vert:R3,meshphysical_frag:P3,meshtoon_vert:L3,meshtoon_frag:A3,points_vert:H3,points_frag:I3,shadow_vert:N3,shadow_frag:O3,sprite_vert:C3,sprite_frag:D3},se={common:{diffuse:{value:new Ue(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new je},alphaMap:{value:null},alphaMapTransform:{value:new je},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new je}},envmap:{envMap:{value:null},envMapRotation:{value:new je},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new je}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new je}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new je},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new je},normalScale:{value:new Oe(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new je},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new je}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new je}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new je}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Ue(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Ue(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new je},alphaTest:{value:0},uvTransform:{value:new je}},sprite:{diffuse:{value:new Ue(16777215)},opacity:{value:1},center:{value:new Oe(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new je},alphaMap:{value:null},alphaMapTransform:{value:new je},alphaTest:{value:0}}},kn={basic:{uniforms:en([se.common,se.specularmap,se.envmap,se.aomap,se.lightmap,se.fog]),vertexShader:Xe.meshbasic_vert,fragmentShader:Xe.meshbasic_frag},lambert:{uniforms:en([se.common,se.specularmap,se.envmap,se.aomap,se.lightmap,se.emissivemap,se.bumpmap,se.normalmap,se.displacementmap,se.fog,se.lights,{emissive:{value:new Ue(0)}}]),vertexShader:Xe.meshlambert_vert,fragmentShader:Xe.meshlambert_frag},phong:{uniforms:en([se.common,se.specularmap,se.envmap,se.aomap,se.lightmap,se.emissivemap,se.bumpmap,se.normalmap,se.displacementmap,se.fog,se.lights,{emissive:{value:new Ue(0)},specular:{value:new Ue(1118481)},shininess:{value:30}}]),vertexShader:Xe.meshphong_vert,fragmentShader:Xe.meshphong_frag},standard:{uniforms:en([se.common,se.envmap,se.aomap,se.lightmap,se.emissivemap,se.bumpmap,se.normalmap,se.displacementmap,se.roughnessmap,se.metalnessmap,se.fog,se.lights,{emissive:{value:new Ue(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Xe.meshphysical_vert,fragmentShader:Xe.meshphysical_frag},toon:{uniforms:en([se.common,se.aomap,se.lightmap,se.emissivemap,se.bumpmap,se.normalmap,se.displacementmap,se.gradientmap,se.fog,se.lights,{emissive:{value:new Ue(0)}}]),vertexShader:Xe.meshtoon_vert,fragmentShader:Xe.meshtoon_frag},matcap:{uniforms:en([se.common,se.bumpmap,se.normalmap,se.displacementmap,se.fog,{matcap:{value:null}}]),vertexShader:Xe.meshmatcap_vert,fragmentShader:Xe.meshmatcap_frag},points:{uniforms:en([se.points,se.fog]),vertexShader:Xe.points_vert,fragmentShader:Xe.points_frag},dashed:{uniforms:en([se.common,se.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Xe.linedashed_vert,fragmentShader:Xe.linedashed_frag},depth:{uniforms:en([se.common,se.displacementmap]),vertexShader:Xe.depth_vert,fragmentShader:Xe.depth_frag},normal:{uniforms:en([se.common,se.bumpmap,se.normalmap,se.displacementmap,{opacity:{value:1}}]),vertexShader:Xe.meshnormal_vert,fragmentShader:Xe.meshnormal_frag},sprite:{uniforms:en([se.sprite,se.fog]),vertexShader:Xe.sprite_vert,fragmentShader:Xe.sprite_frag},background:{uniforms:{uvTransform:{value:new je},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Xe.background_vert,fragmentShader:Xe.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new je}},vertexShader:Xe.backgroundCube_vert,fragmentShader:Xe.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Xe.cube_vert,fragmentShader:Xe.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Xe.equirect_vert,fragmentShader:Xe.equirect_frag},distanceRGBA:{uniforms:en([se.common,se.displacementmap,{referencePosition:{value:new A},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Xe.distanceRGBA_vert,fragmentShader:Xe.distanceRGBA_frag},shadow:{uniforms:en([se.lights,se.fog,{color:{value:new Ue(0)},opacity:{value:1}}]),vertexShader:Xe.shadow_vert,fragmentShader:Xe.shadow_frag}};kn.physical={uniforms:en([kn.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new je},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new je},clearcoatNormalScale:{value:new Oe(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new je},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new je},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new je},sheen:{value:0},sheenColor:{value:new Ue(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new je},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new je},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new je},transmissionSamplerSize:{value:new Oe},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new je},attenuationDistance:{value:0},attenuationColor:{value:new Ue(0)},specularColor:{value:new Ue(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new je},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new je},anisotropyVector:{value:new Oe},anisotropyMap:{value:null},anisotropyMapTransform:{value:new je}}]),vertexShader:Xe.meshphysical_vert,fragmentShader:Xe.meshphysical_frag};const ds={r:0,b:0,g:0},zi=new It,_3=new He;function z3(r,e,t,n,i,o,s){const a=new Ue(0);let c=o===!0?0:1,l,d,u=null,h=0,f=null;function g(E){let S=E.isScene===!0?E.background:null;return S&&S.isTexture&&(S=(E.backgroundBlurriness>0?t:e).get(S)),S}function w(E){let S=!1;const D=g(E);D===null?m(a,c):D&&D.isColor&&(m(D,1),S=!0);const H=r.xr.getEnvironmentBlendMode();H==="additive"?n.buffers.color.setClear(0,0,0,1,s):H==="alpha-blend"&&n.buffers.color.setClear(0,0,0,0,s),(r.autoClear||S)&&(n.buffers.depth.setTest(!0),n.buffers.depth.setMask(!0),n.buffers.color.setMask(!0),r.clear(r.autoClearColor,r.autoClearDepth,r.autoClearStencil))}function y(E,S){const D=g(S);D&&(D.isCubeTexture||D.mapping===qs)?(d===void 0&&(d=new Ht(new zn(1,1,1),new Ai({name:"BackgroundCubeMaterial",uniforms:Nr(kn.backgroundCube.uniforms),vertexShader:kn.backgroundCube.vertexShader,fragmentShader:kn.backgroundCube.fragmentShader,side:dn,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),d.geometry.deleteAttribute("normal"),d.geometry.deleteAttribute("uv"),d.onBeforeRender=function(H,I,z){this.matrixWorld.copyPosition(z.matrixWorld)},Object.defineProperty(d.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(d)),zi.copy(S.backgroundRotation),zi.x*=-1,zi.y*=-1,zi.z*=-1,D.isCubeTexture&&D.isRenderTargetTexture===!1&&(zi.y*=-1,zi.z*=-1),d.material.uniforms.envMap.value=D,d.material.uniforms.flipEnvMap.value=D.isCubeTexture&&D.isRenderTargetTexture===!1?-1:1,d.material.uniforms.backgroundBlurriness.value=S.backgroundBlurriness,d.material.uniforms.backgroundIntensity.value=S.backgroundIntensity,d.material.uniforms.backgroundRotation.value.setFromMatrix4(_3.makeRotationFromEuler(zi)),d.material.toneMapped=Qe.getTransfer(D.colorSpace)!==dt,(u!==D||h!==D.version||f!==r.toneMapping)&&(d.material.needsUpdate=!0,u=D,h=D.version,f=r.toneMapping),d.layers.enableAll(),E.unshift(d,d.geometry,d.material,0,0,null)):D&&D.isTexture&&(l===void 0&&(l=new Ht(new Qs(2,2),new Ai({name:"BackgroundMaterial",uniforms:Nr(kn.background.uniforms),vertexShader:kn.background.vertexShader,fragmentShader:kn.background.fragmentShader,side:ci,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),l.geometry.deleteAttribute("normal"),Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(l)),l.material.uniforms.t2D.value=D,l.material.uniforms.backgroundIntensity.value=S.backgroundIntensity,l.material.toneMapped=Qe.getTransfer(D.colorSpace)!==dt,D.matrixAutoUpdate===!0&&D.updateMatrix(),l.material.uniforms.uvTransform.value.copy(D.matrix),(u!==D||h!==D.version||f!==r.toneMapping)&&(l.material.needsUpdate=!0,u=D,h=D.version,f=r.toneMapping),l.layers.enableAll(),E.unshift(l,l.geometry,l.material,0,0,null))}function m(E,S){E.getRGB(ds,Nh(r)),n.buffers.color.setClear(ds.r,ds.g,ds.b,S,s)}function P(){d!==void 0&&(d.geometry.dispose(),d.material.dispose(),d=void 0),l!==void 0&&(l.geometry.dispose(),l.material.dispose(),l=void 0)}return{getClearColor:function(){return a},setClearColor:function(E,S=1){a.set(E),c=S,m(a,c)},getClearAlpha:function(){return c},setClearAlpha:function(E){c=E,m(a,c)},render:w,addToRenderList:y,dispose:P}}function U3(r,e){const t=r.getParameter(r.MAX_VERTEX_ATTRIBS),n={},i=h(null);let o=i,s=!1;function a(T,C,B,k,Y){let ee=!1;const q=u(k,B,C);o!==q&&(o=q,l(o.object)),ee=f(T,k,B,Y),ee&&g(T,k,B,Y),Y!==null&&e.update(Y,r.ELEMENT_ARRAY_BUFFER),(ee||s)&&(s=!1,S(T,C,B,k),Y!==null&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,e.get(Y).buffer))}function c(){return r.createVertexArray()}function l(T){return r.bindVertexArray(T)}function d(T){return r.deleteVertexArray(T)}function u(T,C,B){const k=B.wireframe===!0;let Y=n[T.id];Y===void 0&&(Y={},n[T.id]=Y);let ee=Y[C.id];ee===void 0&&(ee={},Y[C.id]=ee);let q=ee[k];return q===void 0&&(q=h(c()),ee[k]=q),q}function h(T){const C=[],B=[],k=[];for(let Y=0;Y<t;Y++)C[Y]=0,B[Y]=0,k[Y]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:C,enabledAttributes:B,attributeDivisors:k,object:T,attributes:{},index:null}}function f(T,C,B,k){const Y=o.attributes,ee=C.attributes;let q=0;const re=B.getAttributes();for(const Z in re)if(re[Z].location>=0){const me=Y[Z];let Se=ee[Z];if(Se===void 0&&(Z==="instanceMatrix"&&T.instanceMatrix&&(Se=T.instanceMatrix),Z==="instanceColor"&&T.instanceColor&&(Se=T.instanceColor)),me===void 0||me.attribute!==Se||Se&&me.data!==Se.data)return!0;q++}return o.attributesNum!==q||o.index!==k}function g(T,C,B,k){const Y={},ee=C.attributes;let q=0;const re=B.getAttributes();for(const Z in re)if(re[Z].location>=0){let me=ee[Z];me===void 0&&(Z==="instanceMatrix"&&T.instanceMatrix&&(me=T.instanceMatrix),Z==="instanceColor"&&T.instanceColor&&(me=T.instanceColor));const Se={};Se.attribute=me,me&&me.data&&(Se.data=me.data),Y[Z]=Se,q++}o.attributes=Y,o.attributesNum=q,o.index=k}function w(){const T=o.newAttributes;for(let C=0,B=T.length;C<B;C++)T[C]=0}function y(T){m(T,0)}function m(T,C){const B=o.newAttributes,k=o.enabledAttributes,Y=o.attributeDivisors;B[T]=1,k[T]===0&&(r.enableVertexAttribArray(T),k[T]=1),Y[T]!==C&&(r.vertexAttribDivisor(T,C),Y[T]=C)}function P(){const T=o.newAttributes,C=o.enabledAttributes;for(let B=0,k=C.length;B<k;B++)C[B]!==T[B]&&(r.disableVertexAttribArray(B),C[B]=0)}function E(T,C,B,k,Y,ee,q){q===!0?r.vertexAttribIPointer(T,C,B,Y,ee):r.vertexAttribPointer(T,C,B,k,Y,ee)}function S(T,C,B,k){w();const Y=k.attributes,ee=B.getAttributes(),q=C.defaultAttributeValues;for(const re in ee){const Z=ee[re];if(Z.location>=0){let ce=Y[re];if(ce===void 0&&(re==="instanceMatrix"&&T.instanceMatrix&&(ce=T.instanceMatrix),re==="instanceColor"&&T.instanceColor&&(ce=T.instanceColor)),ce!==void 0){const me=ce.normalized,Se=ce.itemSize,Ge=e.get(ce);if(Ge===void 0)continue;const ht=Ge.buffer,J=Ge.type,oe=Ge.bytesPerElement,we=J===r.INT||J===r.UNSIGNED_INT||ce.gpuType===Dl;if(ce.isInterleavedBufferAttribute){const le=ce.data,Le=le.stride,nt=ce.offset;if(le.isInstancedInterleavedBuffer){for(let Ce=0;Ce<Z.locationSize;Ce++)m(Z.location+Ce,le.meshPerAttribute);T.isInstancedMesh!==!0&&k._maxInstanceCount===void 0&&(k._maxInstanceCount=le.meshPerAttribute*le.count)}else for(let Ce=0;Ce<Z.locationSize;Ce++)y(Z.location+Ce);r.bindBuffer(r.ARRAY_BUFFER,ht);for(let Ce=0;Ce<Z.locationSize;Ce++)E(Z.location+Ce,Se/Z.locationSize,J,me,Le*oe,(nt+Se/Z.locationSize*Ce)*oe,we)}else{if(ce.isInstancedBufferAttribute){for(let le=0;le<Z.locationSize;le++)m(Z.location+le,ce.meshPerAttribute);T.isInstancedMesh!==!0&&k._maxInstanceCount===void 0&&(k._maxInstanceCount=ce.meshPerAttribute*ce.count)}else for(let le=0;le<Z.locationSize;le++)y(Z.location+le);r.bindBuffer(r.ARRAY_BUFFER,ht);for(let le=0;le<Z.locationSize;le++)E(Z.location+le,Se/Z.locationSize,J,me,Se*oe,Se/Z.locationSize*le*oe,we)}}else if(q!==void 0){const me=q[re];if(me!==void 0)switch(me.length){case 2:r.vertexAttrib2fv(Z.location,me);break;case 3:r.vertexAttrib3fv(Z.location,me);break;case 4:r.vertexAttrib4fv(Z.location,me);break;default:r.vertexAttrib1fv(Z.location,me)}}}}P()}function D(){z();for(const T in n){const C=n[T];for(const B in C){const k=C[B];for(const Y in k)d(k[Y].object),delete k[Y];delete C[B]}delete n[T]}}function H(T){if(n[T.id]===void 0)return;const C=n[T.id];for(const B in C){const k=C[B];for(const Y in k)d(k[Y].object),delete k[Y];delete C[B]}delete n[T.id]}function I(T){for(const C in n){const B=n[C];if(B[T.id]===void 0)continue;const k=B[T.id];for(const Y in k)d(k[Y].object),delete k[Y];delete B[T.id]}}function z(){M(),s=!0,o!==i&&(o=i,l(o.object))}function M(){i.geometry=null,i.program=null,i.wireframe=!1}return{setup:a,reset:z,resetDefaultState:M,dispose:D,releaseStatesOfGeometry:H,releaseStatesOfProgram:I,initAttributes:w,enableAttribute:y,disableUnusedAttributes:P}}function j3(r,e,t){let n;function i(l){n=l}function o(l,d){r.drawArrays(n,l,d),t.update(d,n,1)}function s(l,d,u){u!==0&&(r.drawArraysInstanced(n,l,d,u),t.update(d,n,u))}function a(l,d,u){if(u===0)return;e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n,l,0,d,0,u);let f=0;for(let g=0;g<u;g++)f+=d[g];t.update(f,n,1)}function c(l,d,u,h){if(u===0)return;const f=e.get("WEBGL_multi_draw");if(f===null)for(let g=0;g<l.length;g++)s(l[g],d[g],h[g]);else{f.multiDrawArraysInstancedWEBGL(n,l,0,d,0,h,0,u);let g=0;for(let w=0;w<u;w++)g+=d[w]*h[w];t.update(g,n,1)}}this.setMode=i,this.render=o,this.renderInstances=s,this.renderMultiDraw=a,this.renderMultiDrawInstances=c}function F3(r,e,t,n){let i;function o(){if(i!==void 0)return i;if(e.has("EXT_texture_filter_anisotropic")===!0){const I=e.get("EXT_texture_filter_anisotropic");i=r.getParameter(I.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i}function s(I){return!(I!==Mn&&n.convert(I)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_FORMAT))}function a(I){const z=I===No&&(e.has("EXT_color_buffer_half_float")||e.has("EXT_color_buffer_float"));return!(I!==Gn&&n.convert(I)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_TYPE)&&I!==_n&&!z)}function c(I){if(I==="highp"){if(r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.HIGH_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.HIGH_FLOAT).precision>0)return"highp";I="mediump"}return I==="mediump"&&r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.MEDIUM_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let l=t.precision!==void 0?t.precision:"highp";const d=c(l);d!==l&&(console.warn("THREE.WebGLRenderer:",l,"not supported, using",d,"instead."),l=d);const u=t.logarithmicDepthBuffer===!0,h=t.reverseDepthBuffer===!0&&e.has("EXT_clip_control"),f=r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS),g=r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS),w=r.getParameter(r.MAX_TEXTURE_SIZE),y=r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE),m=r.getParameter(r.MAX_VERTEX_ATTRIBS),P=r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS),E=r.getParameter(r.MAX_VARYING_VECTORS),S=r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS),D=g>0,H=r.getParameter(r.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:o,getMaxPrecision:c,textureFormatReadable:s,textureTypeReadable:a,precision:l,logarithmicDepthBuffer:u,reverseDepthBuffer:h,maxTextures:f,maxVertexTextures:g,maxTextureSize:w,maxCubemapSize:y,maxAttributes:m,maxVertexUniforms:P,maxVaryings:E,maxFragmentUniforms:S,vertexTextures:D,maxSamples:H}}function V3(r){const e=this;let t=null,n=0,i=!1,o=!1;const s=new Ti,a=new je,c={value:null,needsUpdate:!1};this.uniform=c,this.numPlanes=0,this.numIntersection=0,this.init=function(u,h){const f=u.length!==0||h||n!==0||i;return i=h,n=u.length,f},this.beginShadows=function(){o=!0,d(null)},this.endShadows=function(){o=!1},this.setGlobalState=function(u,h){t=d(u,h,0)},this.setState=function(u,h,f){const g=u.clippingPlanes,w=u.clipIntersection,y=u.clipShadows,m=r.get(u);if(!i||g===null||g.length===0||o&&!y)o?d(null):l();else{const P=o?0:n,E=P*4;let S=m.clippingState||null;c.value=S,S=d(g,h,E,f);for(let D=0;D!==E;++D)S[D]=t[D];m.clippingState=S,this.numIntersection=w?this.numPlanes:0,this.numPlanes+=P}};function l(){c.value!==t&&(c.value=t,c.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function d(u,h,f,g){const w=u!==null?u.length:0;let y=null;if(w!==0){if(y=c.value,g!==!0||y===null){const m=f+w*4,P=h.matrixWorldInverse;a.getNormalMatrix(P),(y===null||y.length<m)&&(y=new Float32Array(m));for(let E=0,S=f;E!==w;++E,S+=4)s.copy(u[E]).applyMatrix4(P,a),s.normal.toArray(y,S),y[S+3]=s.constant}c.value=y,c.needsUpdate=!0}return e.numPlanes=w,e.numIntersection=0,y}}function X3(r){let e=new WeakMap;function t(s,a){return a===Uc?s.mapping=Lr:a===jc&&(s.mapping=Ar),s}function n(s){if(s&&s.isTexture){const a=s.mapping;if(a===Uc||a===jc)if(e.has(s)){const c=e.get(s).texture;return t(c,s.mapping)}else{const c=s.image;if(c&&c.height>0){const l=new c1(c.height);return l.fromEquirectangularTexture(r,s),e.set(s,l),s.addEventListener("dispose",i),t(l.texture,s.mapping)}else return null}}return s}function i(s){const a=s.target;a.removeEventListener("dispose",i);const c=e.get(a);c!==void 0&&(e.delete(a),c.dispose())}function o(){e=new WeakMap}return{get:n,dispose:o}}const xr=4,v0=[.125,.215,.35,.446,.526,.582],Wi=20,Va=new Ql,T0=new Ue;let Xa=null,ka=0,Wa=0,Ba=!1;const Xi=(1+Math.sqrt(5))/2,pr=1/Xi,S0=[new A(-Xi,pr,0),new A(Xi,pr,0),new A(-pr,0,Xi),new A(pr,0,Xi),new A(0,Xi,-pr),new A(0,Xi,pr),new A(-1,1,-1),new A(1,1,-1),new A(-1,1,1),new A(1,1,1)],k3=new A;class M0{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,i=100,o={}){const{size:s=256,position:a=k3}=o;Xa=this._renderer.getRenderTarget(),ka=this._renderer.getActiveCubeFace(),Wa=this._renderer.getActiveMipmapLevel(),Ba=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(s);const c=this._allocateTargets();return c.depthBuffer=!0,this._sceneToCubeUV(e,n,i,c,a),t>0&&this._blur(c,0,0,t),this._applyPMREM(c),this._cleanup(c),c}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=P0(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=R0(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(Xa,ka,Wa),this._renderer.xr.enabled=Ba,e.scissorTest=!1,us(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===Lr||e.mapping===Ar?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),Xa=this._renderer.getRenderTarget(),ka=this._renderer.getActiveCubeFace(),Wa=this._renderer.getActiveMipmapLevel(),Ba=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:bn,minFilter:bn,generateMipmaps:!1,type:No,format:Mn,colorSpace:an,depthBuffer:!1},i=E0(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=E0(e,t,n);const{_lodMax:o}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=W3(o)),this._blurMaterial=B3(o,e,t)}return i}_compileMaterial(e){const t=new Ht(this._lodPlanes[0],e);this._renderer.compile(t,Va)}_sceneToCubeUV(e,t,n,i,o){const c=new nn(90,1,t,n),l=[1,-1,1,1,1,1],d=[1,1,1,-1,-1,-1],u=this._renderer,h=u.autoClear,f=u.toneMapping;u.getClearColor(T0),u.toneMapping=Li,u.autoClear=!1;const g=new Bi({name:"PMREM.Background",side:dn,depthWrite:!1,depthTest:!1}),w=new Ht(new zn,g);let y=!1;const m=e.background;m?m.isColor&&(g.color.copy(m),e.background=null,y=!0):(g.color.copy(T0),y=!0);for(let P=0;P<6;P++){const E=P%3;E===0?(c.up.set(0,l[P],0),c.position.set(o.x,o.y,o.z),c.lookAt(o.x+d[P],o.y,o.z)):E===1?(c.up.set(0,0,l[P]),c.position.set(o.x,o.y,o.z),c.lookAt(o.x,o.y+d[P],o.z)):(c.up.set(0,l[P],0),c.position.set(o.x,o.y,o.z),c.lookAt(o.x,o.y,o.z+d[P]));const S=this._cubeSize;us(i,E*S,P>2?S:0,S,S),u.setRenderTarget(i),y&&u.render(w,c),u.render(e,c)}w.geometry.dispose(),w.material.dispose(),u.toneMapping=f,u.autoClear=h,e.background=m}_textureToCubeUV(e,t){const n=this._renderer,i=e.mapping===Lr||e.mapping===Ar;i?(this._cubemapMaterial===null&&(this._cubemapMaterial=P0()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=R0());const o=i?this._cubemapMaterial:this._equirectMaterial,s=new Ht(this._lodPlanes[0],o),a=o.uniforms;a.envMap.value=e;const c=this._cubeSize;us(t,0,0,3*c,2*c),n.setRenderTarget(t),n.render(s,Va)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;const i=this._lodPlanes.length;for(let o=1;o<i;o++){const s=Math.sqrt(this._sigmas[o]*this._sigmas[o]-this._sigmas[o-1]*this._sigmas[o-1]),a=S0[(i-o-1)%S0.length];this._blur(e,o-1,o,s,a)}t.autoClear=n}_blur(e,t,n,i,o){const s=this._pingPongRenderTarget;this._halfBlur(e,s,t,n,i,"latitudinal",o),this._halfBlur(s,e,n,n,i,"longitudinal",o)}_halfBlur(e,t,n,i,o,s,a){const c=this._renderer,l=this._blurMaterial;s!=="latitudinal"&&s!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const d=3,u=new Ht(this._lodPlanes[i],l),h=l.uniforms,f=this._sizeLods[n]-1,g=isFinite(o)?Math.PI/(2*f):2*Math.PI/(2*Wi-1),w=o/g,y=isFinite(o)?1+Math.floor(d*w):Wi;y>Wi&&console.warn(`sigmaRadians, ${o}, is too large and will clip, as it requested ${y} samples when the maximum is set to ${Wi}`);const m=[];let P=0;for(let I=0;I<Wi;++I){const z=I/w,M=Math.exp(-z*z/2);m.push(M),I===0?P+=M:I<y&&(P+=2*M)}for(let I=0;I<m.length;I++)m[I]=m[I]/P;h.envMap.value=e.texture,h.samples.value=y,h.weights.value=m,h.latitudinal.value=s==="latitudinal",a&&(h.poleAxis.value=a);const{_lodMax:E}=this;h.dTheta.value=g,h.mipInt.value=E-n;const S=this._sizeLods[i],D=3*S*(i>E-xr?i-E+xr:0),H=4*(this._cubeSize-S);us(t,D,H,3*S,2*S),c.setRenderTarget(t),c.render(u,Va)}}function W3(r){const e=[],t=[],n=[];let i=r;const o=r-xr+1+v0.length;for(let s=0;s<o;s++){const a=Math.pow(2,i);t.push(a);let c=1/a;s>r-xr?c=v0[s-r+xr-1]:s===0&&(c=0),n.push(c);const l=1/(a-2),d=-l,u=1+l,h=[d,d,u,d,u,u,d,d,u,u,d,u],f=6,g=6,w=3,y=2,m=1,P=new Float32Array(w*g*f),E=new Float32Array(y*g*f),S=new Float32Array(m*g*f);for(let H=0;H<f;H++){const I=H%3*2/3-1,z=H>2?0:-1,M=[I,z,0,I+2/3,z,0,I+2/3,z+1,0,I,z,0,I+2/3,z+1,0,I,z+1,0];P.set(M,w*g*H),E.set(h,y*g*H);const T=[H,H,H,H,H,H];S.set(T,m*g*H)}const D=new un;D.setAttribute("position",new on(P,w)),D.setAttribute("uv",new on(E,y)),D.setAttribute("faceIndex",new on(S,m)),e.push(D),i>xr&&i--}return{lodPlanes:e,sizeLods:t,sigmas:n}}function E0(r,e,t){const n=new Zi(r,e,t);return n.texture.mapping=qs,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function us(r,e,t,n,i){r.viewport.set(e,t,n,i),r.scissor.set(e,t,n,i)}function B3(r,e,t){const n=new Float32Array(Wi),i=new A(0,1,0);return new Ai({name:"SphericalGaussianBlur",defines:{n:Wi,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${r}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i}},vertexShader:td(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:Pi,depthTest:!1,depthWrite:!1})}function R0(){return new Ai({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:td(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:Pi,depthTest:!1,depthWrite:!1})}function P0(){return new Ai({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:td(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:Pi,depthTest:!1,depthWrite:!1})}function td(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function G3(r){let e=new WeakMap,t=null;function n(a){if(a&&a.isTexture){const c=a.mapping,l=c===Uc||c===jc,d=c===Lr||c===Ar;if(l||d){let u=e.get(a);const h=u!==void 0?u.texture.pmremVersion:0;if(a.isRenderTargetTexture&&a.pmremVersion!==h)return t===null&&(t=new M0(r)),u=l?t.fromEquirectangular(a,u):t.fromCubemap(a,u),u.texture.pmremVersion=a.pmremVersion,e.set(a,u),u.texture;if(u!==void 0)return u.texture;{const f=a.image;return l&&f&&f.height>0||d&&f&&i(f)?(t===null&&(t=new M0(r)),u=l?t.fromEquirectangular(a):t.fromCubemap(a),u.texture.pmremVersion=a.pmremVersion,e.set(a,u),a.addEventListener("dispose",o),u.texture):null}}}return a}function i(a){let c=0;const l=6;for(let d=0;d<l;d++)a[d]!==void 0&&c++;return c===l}function o(a){const c=a.target;c.removeEventListener("dispose",o);const l=e.get(c);l!==void 0&&(e.delete(c),l.dispose())}function s(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:n,dispose:s}}function Z3(r){const e={};function t(n){if(e[n]!==void 0)return e[n];let i;switch(n){case"WEBGL_depth_texture":i=r.getExtension("WEBGL_depth_texture")||r.getExtension("MOZ_WEBGL_depth_texture")||r.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=r.getExtension("EXT_texture_filter_anisotropic")||r.getExtension("MOZ_EXT_texture_filter_anisotropic")||r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=r.getExtension("WEBGL_compressed_texture_s3tc")||r.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=r.getExtension("WEBGL_compressed_texture_pvrtc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=r.getExtension(n)}return e[n]=i,i}return{has:function(n){return t(n)!==null},init:function(){t("EXT_color_buffer_float"),t("WEBGL_clip_cull_distance"),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture"),t("WEBGL_render_shared_exponent")},get:function(n){const i=t(n);return i===null&&Hs("THREE.WebGLRenderer: "+n+" extension not supported."),i}}}function Y3(r,e,t,n){const i={},o=new WeakMap;function s(u){const h=u.target;h.index!==null&&e.remove(h.index);for(const g in h.attributes)e.remove(h.attributes[g]);h.removeEventListener("dispose",s),delete i[h.id];const f=o.get(h);f&&(e.remove(f),o.delete(h)),n.releaseStatesOfGeometry(h),h.isInstancedBufferGeometry===!0&&delete h._maxInstanceCount,t.memory.geometries--}function a(u,h){return i[h.id]===!0||(h.addEventListener("dispose",s),i[h.id]=!0,t.memory.geometries++),h}function c(u){const h=u.attributes;for(const f in h)e.update(h[f],r.ARRAY_BUFFER)}function l(u){const h=[],f=u.index,g=u.attributes.position;let w=0;if(f!==null){const P=f.array;w=f.version;for(let E=0,S=P.length;E<S;E+=3){const D=P[E+0],H=P[E+1],I=P[E+2];h.push(D,H,H,I,I,D)}}else if(g!==void 0){const P=g.array;w=g.version;for(let E=0,S=P.length/3-1;E<S;E+=3){const D=E+0,H=E+1,I=E+2;h.push(D,H,H,I,I,D)}}else return;const y=new(Ph(h)?Bl:Ih)(h,1);y.version=w;const m=o.get(u);m&&e.remove(m),o.set(u,y)}function d(u){const h=o.get(u);if(h){const f=u.index;f!==null&&h.version<f.version&&l(u)}else l(u);return o.get(u)}return{get:a,update:c,getWireframeAttribute:d}}function q3(r,e,t){let n;function i(h){n=h}let o,s;function a(h){o=h.type,s=h.bytesPerElement}function c(h,f){r.drawElements(n,f,o,h*s),t.update(f,n,1)}function l(h,f,g){g!==0&&(r.drawElementsInstanced(n,f,o,h*s,g),t.update(f,n,g))}function d(h,f,g){if(g===0)return;e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n,f,0,o,h,0,g);let y=0;for(let m=0;m<g;m++)y+=f[m];t.update(y,n,1)}function u(h,f,g,w){if(g===0)return;const y=e.get("WEBGL_multi_draw");if(y===null)for(let m=0;m<h.length;m++)l(h[m]/s,f[m],w[m]);else{y.multiDrawElementsInstancedWEBGL(n,f,0,o,h,0,w,0,g);let m=0;for(let P=0;P<g;P++)m+=f[P]*w[P];t.update(m,n,1)}}this.setMode=i,this.setIndex=a,this.render=c,this.renderInstances=l,this.renderMultiDraw=d,this.renderMultiDrawInstances=u}function K3(r){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(o,s,a){switch(t.calls++,s){case r.TRIANGLES:t.triangles+=a*(o/3);break;case r.LINES:t.lines+=a*(o/2);break;case r.LINE_STRIP:t.lines+=a*(o-1);break;case r.LINE_LOOP:t.lines+=a*o;break;case r.POINTS:t.points+=a*o;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",s);break}}function i(){t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:i,update:n}}function J3(r,e,t){const n=new WeakMap,i=new it;function o(s,a,c){const l=s.morphTargetInfluences,d=a.morphAttributes.position||a.morphAttributes.normal||a.morphAttributes.color,u=d!==void 0?d.length:0;let h=n.get(a);if(h===void 0||h.count!==u){let M=function(){I.dispose(),n.delete(a),a.removeEventListener("dispose",M)};h!==void 0&&h.texture.dispose();const f=a.morphAttributes.position!==void 0,g=a.morphAttributes.normal!==void 0,w=a.morphAttributes.color!==void 0,y=a.morphAttributes.position||[],m=a.morphAttributes.normal||[],P=a.morphAttributes.color||[];let E=0;f===!0&&(E=1),g===!0&&(E=2),w===!0&&(E=3);let S=a.attributes.position.count*E,D=1;S>e.maxTextureSize&&(D=Math.ceil(S/e.maxTextureSize),S=e.maxTextureSize);const H=new Float32Array(S*D*4*u),I=new Lh(H,S,D,u);I.type=_n,I.needsUpdate=!0;const z=E*4;for(let T=0;T<u;T++){const C=y[T],B=m[T],k=P[T],Y=S*D*4*T;for(let ee=0;ee<C.count;ee++){const q=ee*z;f===!0&&(i.fromBufferAttribute(C,ee),H[Y+q+0]=i.x,H[Y+q+1]=i.y,H[Y+q+2]=i.z,H[Y+q+3]=0),g===!0&&(i.fromBufferAttribute(B,ee),H[Y+q+4]=i.x,H[Y+q+5]=i.y,H[Y+q+6]=i.z,H[Y+q+7]=0),w===!0&&(i.fromBufferAttribute(k,ee),H[Y+q+8]=i.x,H[Y+q+9]=i.y,H[Y+q+10]=i.z,H[Y+q+11]=k.itemSize===4?i.w:1)}}h={count:u,texture:I,size:new Oe(S,D)},n.set(a,h),a.addEventListener("dispose",M)}if(s.isInstancedMesh===!0&&s.morphTexture!==null)c.getUniforms().setValue(r,"morphTexture",s.morphTexture,t);else{let f=0;for(let w=0;w<l.length;w++)f+=l[w];const g=a.morphTargetsRelative?1:1-f;c.getUniforms().setValue(r,"morphTargetBaseInfluence",g),c.getUniforms().setValue(r,"morphTargetInfluences",l)}c.getUniforms().setValue(r,"morphTargetsTexture",h.texture,t),c.getUniforms().setValue(r,"morphTargetsTextureSize",h.size)}return{update:o}}function Q3(r,e,t,n){let i=new WeakMap;function o(c){const l=n.render.frame,d=c.geometry,u=e.get(c,d);if(i.get(u)!==l&&(e.update(u),i.set(u,l)),c.isInstancedMesh&&(c.hasEventListener("dispose",a)===!1&&c.addEventListener("dispose",a),i.get(c)!==l&&(t.update(c.instanceMatrix,r.ARRAY_BUFFER),c.instanceColor!==null&&t.update(c.instanceColor,r.ARRAY_BUFFER),i.set(c,l))),c.isSkinnedMesh){const h=c.skeleton;i.get(h)!==l&&(h.update(),i.set(h,l))}return u}function s(){i=new WeakMap}function a(c){const l=c.target;l.removeEventListener("dispose",a),t.remove(l.instanceMatrix),l.instanceColor!==null&&t.remove(l.instanceColor)}return{update:o,dispose:s}}const Bh=new kt,L0=new Uh(1,1),Gh=new Lh,Zh=new Bf,Yh=new Ch,A0=[],H0=[],I0=new Float32Array(16),N0=new Float32Array(9),O0=new Float32Array(4);function Xr(r,e,t){const n=r[0];if(n<=0||n>0)return r;const i=e*t;let o=A0[i];if(o===void 0&&(o=new Float32Array(i),A0[i]=o),e!==0){n.toArray(o,0);for(let s=1,a=0;s!==e;++s)a+=t,r[s].toArray(o,a)}return o}function _t(r,e){if(r.length!==e.length)return!1;for(let t=0,n=r.length;t<n;t++)if(r[t]!==e[t])return!1;return!0}function zt(r,e){for(let t=0,n=e.length;t<n;t++)r[t]=e[t]}function ea(r,e){let t=H0[e];t===void 0&&(t=new Int32Array(e),H0[e]=t);for(let n=0;n!==e;++n)t[n]=r.allocateTextureUnit();return t}function $3(r,e){const t=this.cache;t[0]!==e&&(r.uniform1f(this.addr,e),t[0]=e)}function eb(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(_t(t,e))return;r.uniform2fv(this.addr,e),zt(t,e)}}function tb(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(r.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(_t(t,e))return;r.uniform3fv(this.addr,e),zt(t,e)}}function nb(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(_t(t,e))return;r.uniform4fv(this.addr,e),zt(t,e)}}function ib(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(_t(t,e))return;r.uniformMatrix2fv(this.addr,!1,e),zt(t,e)}else{if(_t(t,n))return;O0.set(n),r.uniformMatrix2fv(this.addr,!1,O0),zt(t,n)}}function rb(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(_t(t,e))return;r.uniformMatrix3fv(this.addr,!1,e),zt(t,e)}else{if(_t(t,n))return;N0.set(n),r.uniformMatrix3fv(this.addr,!1,N0),zt(t,n)}}function ob(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(_t(t,e))return;r.uniformMatrix4fv(this.addr,!1,e),zt(t,e)}else{if(_t(t,n))return;I0.set(n),r.uniformMatrix4fv(this.addr,!1,I0),zt(t,n)}}function sb(r,e){const t=this.cache;t[0]!==e&&(r.uniform1i(this.addr,e),t[0]=e)}function ab(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2i(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(_t(t,e))return;r.uniform2iv(this.addr,e),zt(t,e)}}function cb(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3i(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(_t(t,e))return;r.uniform3iv(this.addr,e),zt(t,e)}}function lb(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4i(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(_t(t,e))return;r.uniform4iv(this.addr,e),zt(t,e)}}function db(r,e){const t=this.cache;t[0]!==e&&(r.uniform1ui(this.addr,e),t[0]=e)}function ub(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2ui(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(_t(t,e))return;r.uniform2uiv(this.addr,e),zt(t,e)}}function hb(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3ui(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(_t(t,e))return;r.uniform3uiv(this.addr,e),zt(t,e)}}function pb(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4ui(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(_t(t,e))return;r.uniform4uiv(this.addr,e),zt(t,e)}}function fb(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i);let o;this.type===r.SAMPLER_2D_SHADOW?(L0.compareFunction=Eh,o=L0):o=Bh,t.setTexture2D(e||o,i)}function mb(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.setTexture3D(e||Zh,i)}function bb(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.setTextureCube(e||Yh,i)}function yb(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.setTexture2DArray(e||Gh,i)}function gb(r){switch(r){case 5126:return $3;case 35664:return eb;case 35665:return tb;case 35666:return nb;case 35674:return ib;case 35675:return rb;case 35676:return ob;case 5124:case 35670:return sb;case 35667:case 35671:return ab;case 35668:case 35672:return cb;case 35669:case 35673:return lb;case 5125:return db;case 36294:return ub;case 36295:return hb;case 36296:return pb;case 35678:case 36198:case 36298:case 36306:case 35682:return fb;case 35679:case 36299:case 36307:return mb;case 35680:case 36300:case 36308:case 36293:return bb;case 36289:case 36303:case 36311:case 36292:return yb}}function wb(r,e){r.uniform1fv(this.addr,e)}function xb(r,e){const t=Xr(e,this.size,2);r.uniform2fv(this.addr,t)}function vb(r,e){const t=Xr(e,this.size,3);r.uniform3fv(this.addr,t)}function Tb(r,e){const t=Xr(e,this.size,4);r.uniform4fv(this.addr,t)}function Sb(r,e){const t=Xr(e,this.size,4);r.uniformMatrix2fv(this.addr,!1,t)}function Mb(r,e){const t=Xr(e,this.size,9);r.uniformMatrix3fv(this.addr,!1,t)}function Eb(r,e){const t=Xr(e,this.size,16);r.uniformMatrix4fv(this.addr,!1,t)}function Rb(r,e){r.uniform1iv(this.addr,e)}function Pb(r,e){r.uniform2iv(this.addr,e)}function Lb(r,e){r.uniform3iv(this.addr,e)}function Ab(r,e){r.uniform4iv(this.addr,e)}function Hb(r,e){r.uniform1uiv(this.addr,e)}function Ib(r,e){r.uniform2uiv(this.addr,e)}function Nb(r,e){r.uniform3uiv(this.addr,e)}function Ob(r,e){r.uniform4uiv(this.addr,e)}function Cb(r,e,t){const n=this.cache,i=e.length,o=ea(t,i);_t(n,o)||(r.uniform1iv(this.addr,o),zt(n,o));for(let s=0;s!==i;++s)t.setTexture2D(e[s]||Bh,o[s])}function Db(r,e,t){const n=this.cache,i=e.length,o=ea(t,i);_t(n,o)||(r.uniform1iv(this.addr,o),zt(n,o));for(let s=0;s!==i;++s)t.setTexture3D(e[s]||Zh,o[s])}function _b(r,e,t){const n=this.cache,i=e.length,o=ea(t,i);_t(n,o)||(r.uniform1iv(this.addr,o),zt(n,o));for(let s=0;s!==i;++s)t.setTextureCube(e[s]||Yh,o[s])}function zb(r,e,t){const n=this.cache,i=e.length,o=ea(t,i);_t(n,o)||(r.uniform1iv(this.addr,o),zt(n,o));for(let s=0;s!==i;++s)t.setTexture2DArray(e[s]||Gh,o[s])}function Ub(r){switch(r){case 5126:return wb;case 35664:return xb;case 35665:return vb;case 35666:return Tb;case 35674:return Sb;case 35675:return Mb;case 35676:return Eb;case 5124:case 35670:return Rb;case 35667:case 35671:return Pb;case 35668:case 35672:return Lb;case 35669:case 35673:return Ab;case 5125:return Hb;case 36294:return Ib;case 36295:return Nb;case 36296:return Ob;case 35678:case 36198:case 36298:case 36306:case 35682:return Cb;case 35679:case 36299:case 36307:return Db;case 35680:case 36300:case 36308:case 36293:return _b;case 36289:case 36303:case 36311:case 36292:return zb}}class jb{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.setValue=gb(t.type)}}class Fb{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=Ub(t.type)}}class Vb{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const i=this.seq;for(let o=0,s=i.length;o!==s;++o){const a=i[o];a.setValue(e,t[a.id],n)}}}const Ga=/(\w+)(\])?(\[|\.)?/g;function C0(r,e){r.seq.push(e),r.map[e.id]=e}function Xb(r,e,t){const n=r.name,i=n.length;for(Ga.lastIndex=0;;){const o=Ga.exec(n),s=Ga.lastIndex;let a=o[1];const c=o[2]==="]",l=o[3];if(c&&(a=a|0),l===void 0||l==="["&&s+2===i){C0(t,l===void 0?new jb(a,r,e):new Fb(a,r,e));break}else{let u=t.map[a];u===void 0&&(u=new Vb(a),C0(t,u)),t=u}}}class Is{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const o=e.getActiveUniform(t,i),s=e.getUniformLocation(t,o.name);Xb(o,s,this)}}setValue(e,t,n,i){const o=this.map[t];o!==void 0&&o.setValue(e,n,i)}setOptional(e,t,n){const i=t[n];i!==void 0&&this.setValue(e,n,i)}static upload(e,t,n,i){for(let o=0,s=t.length;o!==s;++o){const a=t[o],c=n[a.id];c.needsUpdate!==!1&&a.setValue(e,c.value,i)}}static seqWithValue(e,t){const n=[];for(let i=0,o=e.length;i!==o;++i){const s=e[i];s.id in t&&n.push(s)}return n}}function D0(r,e,t){const n=r.createShader(e);return r.shaderSource(n,t),r.compileShader(n),n}const kb=37297;let Wb=0;function Bb(r,e){const t=r.split(`
`),n=[],i=Math.max(e-6,0),o=Math.min(e+6,t.length);for(let s=i;s<o;s++){const a=s+1;n.push(`${a===e?">":" "} ${a}: ${t[s]}`)}return n.join(`
`)}const _0=new je;function Gb(r){Qe._getMatrix(_0,Qe.workingColorSpace,r);const e=`mat3( ${_0.elements.map(t=>t.toFixed(4))} )`;switch(Qe.getTransfer(r)){case _s:return[e,"LinearTransferOETF"];case dt:return[e,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",r),[e,"LinearTransferOETF"]}}function z0(r,e,t){const n=r.getShaderParameter(e,r.COMPILE_STATUS),i=r.getShaderInfoLog(e).trim();if(n&&i==="")return"";const o=/ERROR: 0:(\d+)/.exec(i);if(o){const s=parseInt(o[1]);return t.toUpperCase()+`

`+i+`

`+Bb(r.getShaderSource(e),s)}else return i}function Zb(r,e){const t=Gb(e);return[`vec4 ${r}( vec4 value ) {`,`	return ${t[1]}( vec4( value.rgb * ${t[0]}, value.a ) );`,"}"].join(`
`)}function Yb(r,e){let t;switch(e){case $p:t="Linear";break;case ef:t="Reinhard";break;case tf:t="Cineon";break;case nf:t="ACESFilmic";break;case of:t="AgX";break;case sf:t="Neutral";break;case rf:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+r+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}const hs=new A;function qb(){Qe.getLuminanceCoefficients(hs);const r=hs.x.toFixed(4),e=hs.y.toFixed(4),t=hs.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${r}, ${e}, ${t} );`,"	return dot( weights, rgb );","}"].join(`
`)}function Kb(r){return[r.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",r.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(co).join(`
`)}function Jb(r){const e=[];for(const t in r){const n=r[t];n!==!1&&e.push("#define "+t+" "+n)}return e.join(`
`)}function Qb(r,e){const t={},n=r.getProgramParameter(e,r.ACTIVE_ATTRIBUTES);for(let i=0;i<n;i++){const o=r.getActiveAttrib(e,i),s=o.name;let a=1;o.type===r.FLOAT_MAT2&&(a=2),o.type===r.FLOAT_MAT3&&(a=3),o.type===r.FLOAT_MAT4&&(a=4),t[s]={type:o.type,location:r.getAttribLocation(e,s),locationSize:a}}return t}function co(r){return r!==""}function U0(r,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return r.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function j0(r,e){return r.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const $b=/^[ \t]*#include +<([\w\d./]+)>/gm;function yl(r){return r.replace($b,ty)}const ey=new Map;function ty(r,e){let t=Xe[e];if(t===void 0){const n=ey.get(e);if(n!==void 0)t=Xe[n],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,n);else throw new Error("Can not resolve #include <"+e+">")}return yl(t)}const ny=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function F0(r){return r.replace(ny,iy)}function iy(r,e,t,n){let i="";for(let o=parseInt(e);o<parseInt(t);o++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+o+" ]").replace(/UNROLLED_LOOP_INDEX/g,o);return i}function V0(r){let e=`precision ${r.precision} float;
	precision ${r.precision} int;
	precision ${r.precision} sampler2D;
	precision ${r.precision} samplerCube;
	precision ${r.precision} sampler3D;
	precision ${r.precision} sampler2DArray;
	precision ${r.precision} sampler2DShadow;
	precision ${r.precision} samplerCubeShadow;
	precision ${r.precision} sampler2DArrayShadow;
	precision ${r.precision} isampler2D;
	precision ${r.precision} isampler3D;
	precision ${r.precision} isamplerCube;
	precision ${r.precision} isampler2DArray;
	precision ${r.precision} usampler2D;
	precision ${r.precision} usampler3D;
	precision ${r.precision} usamplerCube;
	precision ${r.precision} usampler2DArray;
	`;return r.precision==="highp"?e+=`
#define HIGH_PRECISION`:r.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:r.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function ry(r){let e="SHADOWMAP_TYPE_BASIC";return r.shadowMapType===hh?e="SHADOWMAP_TYPE_PCF":r.shadowMapType===Np?e="SHADOWMAP_TYPE_PCF_SOFT":r.shadowMapType===Vn&&(e="SHADOWMAP_TYPE_VSM"),e}function oy(r){let e="ENVMAP_TYPE_CUBE";if(r.envMap)switch(r.envMapMode){case Lr:case Ar:e="ENVMAP_TYPE_CUBE";break;case qs:e="ENVMAP_TYPE_CUBE_UV";break}return e}function sy(r){let e="ENVMAP_MODE_REFLECTION";if(r.envMap)switch(r.envMapMode){case Ar:e="ENVMAP_MODE_REFRACTION";break}return e}function ay(r){let e="ENVMAP_BLENDING_NONE";if(r.envMap)switch(r.combine){case ph:e="ENVMAP_BLENDING_MULTIPLY";break;case Jp:e="ENVMAP_BLENDING_MIX";break;case Qp:e="ENVMAP_BLENDING_ADD";break}return e}function cy(r){const e=r.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2,n=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:n,maxMip:t}}function ly(r,e,t,n){const i=r.getContext(),o=t.defines;let s=t.vertexShader,a=t.fragmentShader;const c=ry(t),l=oy(t),d=sy(t),u=ay(t),h=cy(t),f=Kb(t),g=Jb(o),w=i.createProgram();let y,m,P=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(y=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,g].filter(co).join(`
`),y.length>0&&(y+=`
`),m=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,g].filter(co).join(`
`),m.length>0&&(m+=`
`)):(y=[V0(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,g,t.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",t.batching?"#define USE_BATCHING":"",t.batchingColor?"#define USE_BATCHING_COLOR":"",t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.instancingMorph?"#define USE_INSTANCING_MORPH":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+d:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+t.anisotropyMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+c:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(co).join(`
`),m=[V0(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,g,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+l:"",t.envMap?"#define "+d:"",t.envMap?"#define "+u:"",h?"#define CUBEUV_TEXEL_WIDTH "+h.texelWidth:"",h?"#define CUBEUV_TEXEL_HEIGHT "+h.texelHeight:"",h?"#define CUBEUV_MAX_MIP "+h.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.dispersion?"#define USE_DISPERSION":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor||t.batchingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+c:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==Li?"#define TONE_MAPPING":"",t.toneMapping!==Li?Xe.tonemapping_pars_fragment:"",t.toneMapping!==Li?Yb("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",Xe.colorspace_pars_fragment,Zb("linearToOutputTexel",t.outputColorSpace),qb(),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(co).join(`
`)),s=yl(s),s=U0(s,t),s=j0(s,t),a=yl(a),a=U0(a,t),a=j0(a,t),s=F0(s),a=F0(a),t.isRawShaderMaterial!==!0&&(P=`#version 300 es
`,y=[f,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+y,m=["#define varying in",t.glslVersion===Cd?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===Cd?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+m);const E=P+y+s,S=P+m+a,D=D0(i,i.VERTEX_SHADER,E),H=D0(i,i.FRAGMENT_SHADER,S);i.attachShader(w,D),i.attachShader(w,H),t.index0AttributeName!==void 0?i.bindAttribLocation(w,0,t.index0AttributeName):t.morphTargets===!0&&i.bindAttribLocation(w,0,"position"),i.linkProgram(w);function I(C){if(r.debug.checkShaderErrors){const B=i.getProgramInfoLog(w).trim(),k=i.getShaderInfoLog(D).trim(),Y=i.getShaderInfoLog(H).trim();let ee=!0,q=!0;if(i.getProgramParameter(w,i.LINK_STATUS)===!1)if(ee=!1,typeof r.debug.onShaderError=="function")r.debug.onShaderError(i,w,D,H);else{const re=z0(i,D,"vertex"),Z=z0(i,H,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(w,i.VALIDATE_STATUS)+`

Material Name: `+C.name+`
Material Type: `+C.type+`

Program Info Log: `+B+`
`+re+`
`+Z)}else B!==""?console.warn("THREE.WebGLProgram: Program Info Log:",B):(k===""||Y==="")&&(q=!1);q&&(C.diagnostics={runnable:ee,programLog:B,vertexShader:{log:k,prefix:y},fragmentShader:{log:Y,prefix:m}})}i.deleteShader(D),i.deleteShader(H),z=new Is(i,w),M=Qb(i,w)}let z;this.getUniforms=function(){return z===void 0&&I(this),z};let M;this.getAttributes=function(){return M===void 0&&I(this),M};let T=t.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return T===!1&&(T=i.getProgramParameter(w,kb)),T},this.destroy=function(){n.releaseStatesOfProgram(this),i.deleteProgram(w),this.program=void 0},this.type=t.shaderType,this.name=t.shaderName,this.id=Wb++,this.cacheKey=e,this.usedTimes=1,this.program=w,this.vertexShader=D,this.fragmentShader=H,this}let dy=0;class uy{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,i=this._getShaderStage(t),o=this._getShaderStage(n),s=this._getShaderCacheForMaterial(e);return s.has(i)===!1&&(s.add(i),i.usedTimes++),s.has(o)===!1&&(s.add(o),o.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const n of t)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);return n===void 0&&(n=new Set,t.set(e,n)),n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);return n===void 0&&(n=new hy(e),t.set(e,n)),n}}class hy{constructor(e){this.id=dy++,this.code=e,this.usedTimes=0}}function py(r,e,t,n,i,o,s){const a=new Wl,c=new uy,l=new Set,d=[],u=i.logarithmicDepthBuffer,h=i.vertexTextures;let f=i.precision;const g={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function w(M){return l.add(M),M===0?"uv":`uv${M}`}function y(M,T,C,B,k){const Y=B.fog,ee=k.geometry,q=M.isMeshStandardMaterial?B.environment:null,re=(M.isMeshStandardMaterial?t:e).get(M.envMap||q),Z=re&&re.mapping===qs?re.image.height:null,ce=g[M.type];M.precision!==null&&(f=i.getMaxPrecision(M.precision),f!==M.precision&&console.warn("THREE.WebGLProgram.getParameters:",M.precision,"not supported, using",f,"instead."));const me=ee.morphAttributes.position||ee.morphAttributes.normal||ee.morphAttributes.color,Se=me!==void 0?me.length:0;let Ge=0;ee.morphAttributes.position!==void 0&&(Ge=1),ee.morphAttributes.normal!==void 0&&(Ge=2),ee.morphAttributes.color!==void 0&&(Ge=3);let ht,J,oe,we;if(ce){const at=kn[ce];ht=at.vertexShader,J=at.fragmentShader}else ht=M.vertexShader,J=M.fragmentShader,c.update(M),oe=c.getVertexShaderID(M),we=c.getFragmentShaderID(M);const le=r.getRenderTarget(),Le=r.state.buffers.depth.getReversed(),nt=k.isInstancedMesh===!0,Ce=k.isBatchedMesh===!0,Pt=!!M.map,wt=!!M.matcap,Ye=!!re,N=!!M.aoMap,yn=!!M.lightMap,$e=!!M.bumpMap,qe=!!M.normalMap,Me=!!M.displacementMap,mt=!!M.emissiveMap,Te=!!M.metalnessMap,R=!!M.roughnessMap,x=M.anisotropy>0,V=M.clearcoat>0,Q=M.dispersion>0,te=M.iridescence>0,K=M.sheen>0,xe=M.transmission>0,de=x&&!!M.anisotropyMap,Ae=V&&!!M.clearcoatMap,Ie=V&&!!M.clearcoatNormalMap,ne=V&&!!M.clearcoatRoughnessMap,be=te&&!!M.iridescenceMap,Ne=te&&!!M.iridescenceThicknessMap,_e=K&&!!M.sheenColorMap,ye=K&&!!M.sheenRoughnessMap,Ke=!!M.specularMap,Ve=!!M.specularColorMap,ft=!!M.specularIntensityMap,U=xe&&!!M.transmissionMap,ue=xe&&!!M.thicknessMap,G=!!M.gradientMap,$=!!M.alphaMap,pe=M.alphaTest>0,he=!!M.alphaHash,Fe=!!M.extensions;let St=Li;M.toneMapped&&(le===null||le.isXRRenderTarget===!0)&&(St=r.toneMapping);const Zt={shaderID:ce,shaderType:M.type,shaderName:M.name,vertexShader:ht,fragmentShader:J,defines:M.defines,customVertexShaderID:oe,customFragmentShaderID:we,isRawShaderMaterial:M.isRawShaderMaterial===!0,glslVersion:M.glslVersion,precision:f,batching:Ce,batchingColor:Ce&&k._colorsTexture!==null,instancing:nt,instancingColor:nt&&k.instanceColor!==null,instancingMorph:nt&&k.morphTexture!==null,supportsVertexTextures:h,outputColorSpace:le===null?r.outputColorSpace:le.isXRRenderTarget===!0?le.texture.colorSpace:an,alphaToCoverage:!!M.alphaToCoverage,map:Pt,matcap:wt,envMap:Ye,envMapMode:Ye&&re.mapping,envMapCubeUVHeight:Z,aoMap:N,lightMap:yn,bumpMap:$e,normalMap:qe,displacementMap:h&&Me,emissiveMap:mt,normalMapObjectSpace:qe&&M.normalMapType===hf,normalMapTangentSpace:qe&&M.normalMapType===Mh,metalnessMap:Te,roughnessMap:R,anisotropy:x,anisotropyMap:de,clearcoat:V,clearcoatMap:Ae,clearcoatNormalMap:Ie,clearcoatRoughnessMap:ne,dispersion:Q,iridescence:te,iridescenceMap:be,iridescenceThicknessMap:Ne,sheen:K,sheenColorMap:_e,sheenRoughnessMap:ye,specularMap:Ke,specularColorMap:Ve,specularIntensityMap:ft,transmission:xe,transmissionMap:U,thicknessMap:ue,gradientMap:G,opaque:M.transparent===!1&&M.blending===Sr&&M.alphaToCoverage===!1,alphaMap:$,alphaTest:pe,alphaHash:he,combine:M.combine,mapUv:Pt&&w(M.map.channel),aoMapUv:N&&w(M.aoMap.channel),lightMapUv:yn&&w(M.lightMap.channel),bumpMapUv:$e&&w(M.bumpMap.channel),normalMapUv:qe&&w(M.normalMap.channel),displacementMapUv:Me&&w(M.displacementMap.channel),emissiveMapUv:mt&&w(M.emissiveMap.channel),metalnessMapUv:Te&&w(M.metalnessMap.channel),roughnessMapUv:R&&w(M.roughnessMap.channel),anisotropyMapUv:de&&w(M.anisotropyMap.channel),clearcoatMapUv:Ae&&w(M.clearcoatMap.channel),clearcoatNormalMapUv:Ie&&w(M.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:ne&&w(M.clearcoatRoughnessMap.channel),iridescenceMapUv:be&&w(M.iridescenceMap.channel),iridescenceThicknessMapUv:Ne&&w(M.iridescenceThicknessMap.channel),sheenColorMapUv:_e&&w(M.sheenColorMap.channel),sheenRoughnessMapUv:ye&&w(M.sheenRoughnessMap.channel),specularMapUv:Ke&&w(M.specularMap.channel),specularColorMapUv:Ve&&w(M.specularColorMap.channel),specularIntensityMapUv:ft&&w(M.specularIntensityMap.channel),transmissionMapUv:U&&w(M.transmissionMap.channel),thicknessMapUv:ue&&w(M.thicknessMap.channel),alphaMapUv:$&&w(M.alphaMap.channel),vertexTangents:!!ee.attributes.tangent&&(qe||x),vertexColors:M.vertexColors,vertexAlphas:M.vertexColors===!0&&!!ee.attributes.color&&ee.attributes.color.itemSize===4,pointsUvs:k.isPoints===!0&&!!ee.attributes.uv&&(Pt||$),fog:!!Y,useFog:M.fog===!0,fogExp2:!!Y&&Y.isFogExp2,flatShading:M.flatShading===!0,sizeAttenuation:M.sizeAttenuation===!0,logarithmicDepthBuffer:u,reverseDepthBuffer:Le,skinning:k.isSkinnedMesh===!0,morphTargets:ee.morphAttributes.position!==void 0,morphNormals:ee.morphAttributes.normal!==void 0,morphColors:ee.morphAttributes.color!==void 0,morphTargetsCount:Se,morphTextureStride:Ge,numDirLights:T.directional.length,numPointLights:T.point.length,numSpotLights:T.spot.length,numSpotLightMaps:T.spotLightMap.length,numRectAreaLights:T.rectArea.length,numHemiLights:T.hemi.length,numDirLightShadows:T.directionalShadowMap.length,numPointLightShadows:T.pointShadowMap.length,numSpotLightShadows:T.spotShadowMap.length,numSpotLightShadowsWithMaps:T.numSpotLightShadowsWithMaps,numLightProbes:T.numLightProbes,numClippingPlanes:s.numPlanes,numClipIntersection:s.numIntersection,dithering:M.dithering,shadowMapEnabled:r.shadowMap.enabled&&C.length>0,shadowMapType:r.shadowMap.type,toneMapping:St,decodeVideoTexture:Pt&&M.map.isVideoTexture===!0&&Qe.getTransfer(M.map.colorSpace)===dt,decodeVideoTextureEmissive:mt&&M.emissiveMap.isVideoTexture===!0&&Qe.getTransfer(M.emissiveMap.colorSpace)===dt,premultipliedAlpha:M.premultipliedAlpha,doubleSided:M.side===Wn,flipSided:M.side===dn,useDepthPacking:M.depthPacking>=0,depthPacking:M.depthPacking||0,index0AttributeName:M.index0AttributeName,extensionClipCullDistance:Fe&&M.extensions.clipCullDistance===!0&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(Fe&&M.extensions.multiDraw===!0||Ce)&&n.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:M.customProgramCacheKey()};return Zt.vertexUv1s=l.has(1),Zt.vertexUv2s=l.has(2),Zt.vertexUv3s=l.has(3),l.clear(),Zt}function m(M){const T=[];if(M.shaderID?T.push(M.shaderID):(T.push(M.customVertexShaderID),T.push(M.customFragmentShaderID)),M.defines!==void 0)for(const C in M.defines)T.push(C),T.push(M.defines[C]);return M.isRawShaderMaterial===!1&&(P(T,M),E(T,M),T.push(r.outputColorSpace)),T.push(M.customProgramCacheKey),T.join()}function P(M,T){M.push(T.precision),M.push(T.outputColorSpace),M.push(T.envMapMode),M.push(T.envMapCubeUVHeight),M.push(T.mapUv),M.push(T.alphaMapUv),M.push(T.lightMapUv),M.push(T.aoMapUv),M.push(T.bumpMapUv),M.push(T.normalMapUv),M.push(T.displacementMapUv),M.push(T.emissiveMapUv),M.push(T.metalnessMapUv),M.push(T.roughnessMapUv),M.push(T.anisotropyMapUv),M.push(T.clearcoatMapUv),M.push(T.clearcoatNormalMapUv),M.push(T.clearcoatRoughnessMapUv),M.push(T.iridescenceMapUv),M.push(T.iridescenceThicknessMapUv),M.push(T.sheenColorMapUv),M.push(T.sheenRoughnessMapUv),M.push(T.specularMapUv),M.push(T.specularColorMapUv),M.push(T.specularIntensityMapUv),M.push(T.transmissionMapUv),M.push(T.thicknessMapUv),M.push(T.combine),M.push(T.fogExp2),M.push(T.sizeAttenuation),M.push(T.morphTargetsCount),M.push(T.morphAttributeCount),M.push(T.numDirLights),M.push(T.numPointLights),M.push(T.numSpotLights),M.push(T.numSpotLightMaps),M.push(T.numHemiLights),M.push(T.numRectAreaLights),M.push(T.numDirLightShadows),M.push(T.numPointLightShadows),M.push(T.numSpotLightShadows),M.push(T.numSpotLightShadowsWithMaps),M.push(T.numLightProbes),M.push(T.shadowMapType),M.push(T.toneMapping),M.push(T.numClippingPlanes),M.push(T.numClipIntersection),M.push(T.depthPacking)}function E(M,T){a.disableAll(),T.supportsVertexTextures&&a.enable(0),T.instancing&&a.enable(1),T.instancingColor&&a.enable(2),T.instancingMorph&&a.enable(3),T.matcap&&a.enable(4),T.envMap&&a.enable(5),T.normalMapObjectSpace&&a.enable(6),T.normalMapTangentSpace&&a.enable(7),T.clearcoat&&a.enable(8),T.iridescence&&a.enable(9),T.alphaTest&&a.enable(10),T.vertexColors&&a.enable(11),T.vertexAlphas&&a.enable(12),T.vertexUv1s&&a.enable(13),T.vertexUv2s&&a.enable(14),T.vertexUv3s&&a.enable(15),T.vertexTangents&&a.enable(16),T.anisotropy&&a.enable(17),T.alphaHash&&a.enable(18),T.batching&&a.enable(19),T.dispersion&&a.enable(20),T.batchingColor&&a.enable(21),M.push(a.mask),a.disableAll(),T.fog&&a.enable(0),T.useFog&&a.enable(1),T.flatShading&&a.enable(2),T.logarithmicDepthBuffer&&a.enable(3),T.reverseDepthBuffer&&a.enable(4),T.skinning&&a.enable(5),T.morphTargets&&a.enable(6),T.morphNormals&&a.enable(7),T.morphColors&&a.enable(8),T.premultipliedAlpha&&a.enable(9),T.shadowMapEnabled&&a.enable(10),T.doubleSided&&a.enable(11),T.flipSided&&a.enable(12),T.useDepthPacking&&a.enable(13),T.dithering&&a.enable(14),T.transmission&&a.enable(15),T.sheen&&a.enable(16),T.opaque&&a.enable(17),T.pointsUvs&&a.enable(18),T.decodeVideoTexture&&a.enable(19),T.decodeVideoTextureEmissive&&a.enable(20),T.alphaToCoverage&&a.enable(21),M.push(a.mask)}function S(M){const T=g[M.type];let C;if(T){const B=kn[T];C=r1.clone(B.uniforms)}else C=M.uniforms;return C}function D(M,T){let C;for(let B=0,k=d.length;B<k;B++){const Y=d[B];if(Y.cacheKey===T){C=Y,++C.usedTimes;break}}return C===void 0&&(C=new ly(r,T,M,o),d.push(C)),C}function H(M){if(--M.usedTimes===0){const T=d.indexOf(M);d[T]=d[d.length-1],d.pop(),M.destroy()}}function I(M){c.remove(M)}function z(){c.dispose()}return{getParameters:y,getProgramCacheKey:m,getUniforms:S,acquireProgram:D,releaseProgram:H,releaseShaderCache:I,programs:d,dispose:z}}function fy(){let r=new WeakMap;function e(s){return r.has(s)}function t(s){let a=r.get(s);return a===void 0&&(a={},r.set(s,a)),a}function n(s){r.delete(s)}function i(s,a,c){r.get(s)[a]=c}function o(){r=new WeakMap}return{has:e,get:t,remove:n,update:i,dispose:o}}function my(r,e){return r.groupOrder!==e.groupOrder?r.groupOrder-e.groupOrder:r.renderOrder!==e.renderOrder?r.renderOrder-e.renderOrder:r.material.id!==e.material.id?r.material.id-e.material.id:r.z!==e.z?r.z-e.z:r.id-e.id}function X0(r,e){return r.groupOrder!==e.groupOrder?r.groupOrder-e.groupOrder:r.renderOrder!==e.renderOrder?r.renderOrder-e.renderOrder:r.z!==e.z?e.z-r.z:r.id-e.id}function k0(){const r=[];let e=0;const t=[],n=[],i=[];function o(){e=0,t.length=0,n.length=0,i.length=0}function s(u,h,f,g,w,y){let m=r[e];return m===void 0?(m={id:u.id,object:u,geometry:h,material:f,groupOrder:g,renderOrder:u.renderOrder,z:w,group:y},r[e]=m):(m.id=u.id,m.object=u,m.geometry=h,m.material=f,m.groupOrder=g,m.renderOrder=u.renderOrder,m.z=w,m.group=y),e++,m}function a(u,h,f,g,w,y){const m=s(u,h,f,g,w,y);f.transmission>0?n.push(m):f.transparent===!0?i.push(m):t.push(m)}function c(u,h,f,g,w,y){const m=s(u,h,f,g,w,y);f.transmission>0?n.unshift(m):f.transparent===!0?i.unshift(m):t.unshift(m)}function l(u,h){t.length>1&&t.sort(u||my),n.length>1&&n.sort(h||X0),i.length>1&&i.sort(h||X0)}function d(){for(let u=e,h=r.length;u<h;u++){const f=r[u];if(f.id===null)break;f.id=null,f.object=null,f.geometry=null,f.material=null,f.group=null}}return{opaque:t,transmissive:n,transparent:i,init:o,push:a,unshift:c,finish:d,sort:l}}function by(){let r=new WeakMap;function e(n,i){const o=r.get(n);let s;return o===void 0?(s=new k0,r.set(n,[s])):i>=o.length?(s=new k0,o.push(s)):s=o[i],s}function t(){r=new WeakMap}return{get:e,dispose:t}}function yy(){const r={};return{get:function(e){if(r[e.id]!==void 0)return r[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new A,color:new Ue};break;case"SpotLight":t={position:new A,direction:new A,color:new Ue,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new A,color:new Ue,distance:0,decay:0};break;case"HemisphereLight":t={direction:new A,skyColor:new Ue,groundColor:new Ue};break;case"RectAreaLight":t={color:new Ue,position:new A,halfWidth:new A,halfHeight:new A};break}return r[e.id]=t,t}}}function gy(){const r={};return{get:function(e){if(r[e.id]!==void 0)return r[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Oe};break;case"SpotLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Oe};break;case"PointLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Oe,shadowCameraNear:1,shadowCameraFar:1e3};break}return r[e.id]=t,t}}}let wy=0;function xy(r,e){return(e.castShadow?2:0)-(r.castShadow?2:0)+(e.map?1:0)-(r.map?1:0)}function vy(r){const e=new yy,t=gy(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let l=0;l<9;l++)n.probe.push(new A);const i=new A,o=new He,s=new He;function a(l){let d=0,u=0,h=0;for(let M=0;M<9;M++)n.probe[M].set(0,0,0);let f=0,g=0,w=0,y=0,m=0,P=0,E=0,S=0,D=0,H=0,I=0;l.sort(xy);for(let M=0,T=l.length;M<T;M++){const C=l[M],B=C.color,k=C.intensity,Y=C.distance,ee=C.shadow&&C.shadow.map?C.shadow.map.texture:null;if(C.isAmbientLight)d+=B.r*k,u+=B.g*k,h+=B.b*k;else if(C.isLightProbe){for(let q=0;q<9;q++)n.probe[q].addScaledVector(C.sh.coefficients[q],k);I++}else if(C.isDirectionalLight){const q=e.get(C);if(q.color.copy(C.color).multiplyScalar(C.intensity),C.castShadow){const re=C.shadow,Z=t.get(C);Z.shadowIntensity=re.intensity,Z.shadowBias=re.bias,Z.shadowNormalBias=re.normalBias,Z.shadowRadius=re.radius,Z.shadowMapSize=re.mapSize,n.directionalShadow[f]=Z,n.directionalShadowMap[f]=ee,n.directionalShadowMatrix[f]=C.shadow.matrix,P++}n.directional[f]=q,f++}else if(C.isSpotLight){const q=e.get(C);q.position.setFromMatrixPosition(C.matrixWorld),q.color.copy(B).multiplyScalar(k),q.distance=Y,q.coneCos=Math.cos(C.angle),q.penumbraCos=Math.cos(C.angle*(1-C.penumbra)),q.decay=C.decay,n.spot[w]=q;const re=C.shadow;if(C.map&&(n.spotLightMap[D]=C.map,D++,re.updateMatrices(C),C.castShadow&&H++),n.spotLightMatrix[w]=re.matrix,C.castShadow){const Z=t.get(C);Z.shadowIntensity=re.intensity,Z.shadowBias=re.bias,Z.shadowNormalBias=re.normalBias,Z.shadowRadius=re.radius,Z.shadowMapSize=re.mapSize,n.spotShadow[w]=Z,n.spotShadowMap[w]=ee,S++}w++}else if(C.isRectAreaLight){const q=e.get(C);q.color.copy(B).multiplyScalar(k),q.halfWidth.set(C.width*.5,0,0),q.halfHeight.set(0,C.height*.5,0),n.rectArea[y]=q,y++}else if(C.isPointLight){const q=e.get(C);if(q.color.copy(C.color).multiplyScalar(C.intensity),q.distance=C.distance,q.decay=C.decay,C.castShadow){const re=C.shadow,Z=t.get(C);Z.shadowIntensity=re.intensity,Z.shadowBias=re.bias,Z.shadowNormalBias=re.normalBias,Z.shadowRadius=re.radius,Z.shadowMapSize=re.mapSize,Z.shadowCameraNear=re.camera.near,Z.shadowCameraFar=re.camera.far,n.pointShadow[g]=Z,n.pointShadowMap[g]=ee,n.pointShadowMatrix[g]=C.shadow.matrix,E++}n.point[g]=q,g++}else if(C.isHemisphereLight){const q=e.get(C);q.skyColor.copy(C.color).multiplyScalar(k),q.groundColor.copy(C.groundColor).multiplyScalar(k),n.hemi[m]=q,m++}}y>0&&(r.has("OES_texture_float_linear")===!0?(n.rectAreaLTC1=se.LTC_FLOAT_1,n.rectAreaLTC2=se.LTC_FLOAT_2):(n.rectAreaLTC1=se.LTC_HALF_1,n.rectAreaLTC2=se.LTC_HALF_2)),n.ambient[0]=d,n.ambient[1]=u,n.ambient[2]=h;const z=n.hash;(z.directionalLength!==f||z.pointLength!==g||z.spotLength!==w||z.rectAreaLength!==y||z.hemiLength!==m||z.numDirectionalShadows!==P||z.numPointShadows!==E||z.numSpotShadows!==S||z.numSpotMaps!==D||z.numLightProbes!==I)&&(n.directional.length=f,n.spot.length=w,n.rectArea.length=y,n.point.length=g,n.hemi.length=m,n.directionalShadow.length=P,n.directionalShadowMap.length=P,n.pointShadow.length=E,n.pointShadowMap.length=E,n.spotShadow.length=S,n.spotShadowMap.length=S,n.directionalShadowMatrix.length=P,n.pointShadowMatrix.length=E,n.spotLightMatrix.length=S+D-H,n.spotLightMap.length=D,n.numSpotLightShadowsWithMaps=H,n.numLightProbes=I,z.directionalLength=f,z.pointLength=g,z.spotLength=w,z.rectAreaLength=y,z.hemiLength=m,z.numDirectionalShadows=P,z.numPointShadows=E,z.numSpotShadows=S,z.numSpotMaps=D,z.numLightProbes=I,n.version=wy++)}function c(l,d){let u=0,h=0,f=0,g=0,w=0;const y=d.matrixWorldInverse;for(let m=0,P=l.length;m<P;m++){const E=l[m];if(E.isDirectionalLight){const S=n.directional[u];S.direction.setFromMatrixPosition(E.matrixWorld),i.setFromMatrixPosition(E.target.matrixWorld),S.direction.sub(i),S.direction.transformDirection(y),u++}else if(E.isSpotLight){const S=n.spot[f];S.position.setFromMatrixPosition(E.matrixWorld),S.position.applyMatrix4(y),S.direction.setFromMatrixPosition(E.matrixWorld),i.setFromMatrixPosition(E.target.matrixWorld),S.direction.sub(i),S.direction.transformDirection(y),f++}else if(E.isRectAreaLight){const S=n.rectArea[g];S.position.setFromMatrixPosition(E.matrixWorld),S.position.applyMatrix4(y),s.identity(),o.copy(E.matrixWorld),o.premultiply(y),s.extractRotation(o),S.halfWidth.set(E.width*.5,0,0),S.halfHeight.set(0,E.height*.5,0),S.halfWidth.applyMatrix4(s),S.halfHeight.applyMatrix4(s),g++}else if(E.isPointLight){const S=n.point[h];S.position.setFromMatrixPosition(E.matrixWorld),S.position.applyMatrix4(y),h++}else if(E.isHemisphereLight){const S=n.hemi[w];S.direction.setFromMatrixPosition(E.matrixWorld),S.direction.transformDirection(y),w++}}}return{setup:a,setupView:c,state:n}}function W0(r){const e=new vy(r),t=[],n=[];function i(d){l.camera=d,t.length=0,n.length=0}function o(d){t.push(d)}function s(d){n.push(d)}function a(){e.setup(t)}function c(d){e.setupView(t,d)}const l={lightsArray:t,shadowsArray:n,camera:null,lights:e,transmissionRenderTarget:{}};return{init:i,state:l,setupLights:a,setupLightsView:c,pushLight:o,pushShadow:s}}function Ty(r){let e=new WeakMap;function t(i,o=0){const s=e.get(i);let a;return s===void 0?(a=new W0(r),e.set(i,[a])):o>=s.length?(a=new W0(r),s.push(a)):a=s[o],a}function n(){e=new WeakMap}return{get:t,dispose:n}}const Sy=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,My=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function Ey(r,e,t){let n=new Yl;const i=new Oe,o=new Oe,s=new it,a=new v1({depthPacking:uf}),c=new T1,l={},d=t.maxTextureSize,u={[ci]:dn,[dn]:ci,[Wn]:Wn},h=new Ai({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Oe},radius:{value:4}},vertexShader:Sy,fragmentShader:My}),f=h.clone();f.defines.HORIZONTAL_PASS=1;const g=new un;g.setAttribute("position",new on(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const w=new Ht(g,h),y=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=hh;let m=this.type;this.render=function(H,I,z){if(y.enabled===!1||y.autoUpdate===!1&&y.needsUpdate===!1||H.length===0)return;const M=r.getRenderTarget(),T=r.getActiveCubeFace(),C=r.getActiveMipmapLevel(),B=r.state;B.setBlending(Pi),B.buffers.color.setClear(1,1,1,1),B.buffers.depth.setTest(!0),B.setScissorTest(!1);const k=m!==Vn&&this.type===Vn,Y=m===Vn&&this.type!==Vn;for(let ee=0,q=H.length;ee<q;ee++){const re=H[ee],Z=re.shadow;if(Z===void 0){console.warn("THREE.WebGLShadowMap:",re,"has no shadow.");continue}if(Z.autoUpdate===!1&&Z.needsUpdate===!1)continue;i.copy(Z.mapSize);const ce=Z.getFrameExtents();if(i.multiply(ce),o.copy(Z.mapSize),(i.x>d||i.y>d)&&(i.x>d&&(o.x=Math.floor(d/ce.x),i.x=o.x*ce.x,Z.mapSize.x=o.x),i.y>d&&(o.y=Math.floor(d/ce.y),i.y=o.y*ce.y,Z.mapSize.y=o.y)),Z.map===null||k===!0||Y===!0){const Se=this.type!==Vn?{minFilter:rn,magFilter:rn}:{};Z.map!==null&&Z.map.dispose(),Z.map=new Zi(i.x,i.y,Se),Z.map.texture.name=re.name+".shadowMap",Z.camera.updateProjectionMatrix()}r.setRenderTarget(Z.map),r.clear();const me=Z.getViewportCount();for(let Se=0;Se<me;Se++){const Ge=Z.getViewport(Se);s.set(o.x*Ge.x,o.y*Ge.y,o.x*Ge.z,o.y*Ge.w),B.viewport(s),Z.updateMatrices(re,Se),n=Z.getFrustum(),S(I,z,Z.camera,re,this.type)}Z.isPointLightShadow!==!0&&this.type===Vn&&P(Z,z),Z.needsUpdate=!1}m=this.type,y.needsUpdate=!1,r.setRenderTarget(M,T,C)};function P(H,I){const z=e.update(w);h.defines.VSM_SAMPLES!==H.blurSamples&&(h.defines.VSM_SAMPLES=H.blurSamples,f.defines.VSM_SAMPLES=H.blurSamples,h.needsUpdate=!0,f.needsUpdate=!0),H.mapPass===null&&(H.mapPass=new Zi(i.x,i.y)),h.uniforms.shadow_pass.value=H.map.texture,h.uniforms.resolution.value=H.mapSize,h.uniforms.radius.value=H.radius,r.setRenderTarget(H.mapPass),r.clear(),r.renderBufferDirect(I,null,z,h,w,null),f.uniforms.shadow_pass.value=H.mapPass.texture,f.uniforms.resolution.value=H.mapSize,f.uniforms.radius.value=H.radius,r.setRenderTarget(H.map),r.clear(),r.renderBufferDirect(I,null,z,f,w,null)}function E(H,I,z,M){let T=null;const C=z.isPointLight===!0?H.customDistanceMaterial:H.customDepthMaterial;if(C!==void 0)T=C;else if(T=z.isPointLight===!0?c:a,r.localClippingEnabled&&I.clipShadows===!0&&Array.isArray(I.clippingPlanes)&&I.clippingPlanes.length!==0||I.displacementMap&&I.displacementScale!==0||I.alphaMap&&I.alphaTest>0||I.map&&I.alphaTest>0||I.alphaToCoverage===!0){const B=T.uuid,k=I.uuid;let Y=l[B];Y===void 0&&(Y={},l[B]=Y);let ee=Y[k];ee===void 0&&(ee=T.clone(),Y[k]=ee,I.addEventListener("dispose",D)),T=ee}if(T.visible=I.visible,T.wireframe=I.wireframe,M===Vn?T.side=I.shadowSide!==null?I.shadowSide:I.side:T.side=I.shadowSide!==null?I.shadowSide:u[I.side],T.alphaMap=I.alphaMap,T.alphaTest=I.alphaToCoverage===!0?.5:I.alphaTest,T.map=I.map,T.clipShadows=I.clipShadows,T.clippingPlanes=I.clippingPlanes,T.clipIntersection=I.clipIntersection,T.displacementMap=I.displacementMap,T.displacementScale=I.displacementScale,T.displacementBias=I.displacementBias,T.wireframeLinewidth=I.wireframeLinewidth,T.linewidth=I.linewidth,z.isPointLight===!0&&T.isMeshDistanceMaterial===!0){const B=r.properties.get(T);B.light=z}return T}function S(H,I,z,M,T){if(H.visible===!1)return;if(H.layers.test(I.layers)&&(H.isMesh||H.isLine||H.isPoints)&&(H.castShadow||H.receiveShadow&&T===Vn)&&(!H.frustumCulled||n.intersectsObject(H))){H.modelViewMatrix.multiplyMatrices(z.matrixWorldInverse,H.matrixWorld);const k=e.update(H),Y=H.material;if(Array.isArray(Y)){const ee=k.groups;for(let q=0,re=ee.length;q<re;q++){const Z=ee[q],ce=Y[Z.materialIndex];if(ce&&ce.visible){const me=E(H,ce,M,T);H.onBeforeShadow(r,H,I,z,k,me,Z),r.renderBufferDirect(z,null,k,me,H,Z),H.onAfterShadow(r,H,I,z,k,me,Z)}}}else if(Y.visible){const ee=E(H,Y,M,T);H.onBeforeShadow(r,H,I,z,k,ee,null),r.renderBufferDirect(z,null,k,ee,H,null),H.onAfterShadow(r,H,I,z,k,ee,null)}}const B=H.children;for(let k=0,Y=B.length;k<Y;k++)S(B[k],I,z,M,T)}function D(H){H.target.removeEventListener("dispose",D);for(const z in l){const M=l[z],T=H.target.uuid;T in M&&(M[T].dispose(),delete M[T])}}}const Ry={[Ic]:Nc,[Oc]:_c,[Cc]:zc,[Pr]:Dc,[Nc]:Ic,[_c]:Oc,[zc]:Cc,[Dc]:Pr};function Py(r,e){function t(){let U=!1;const ue=new it;let G=null;const $=new it(0,0,0,0);return{setMask:function(pe){G!==pe&&!U&&(r.colorMask(pe,pe,pe,pe),G=pe)},setLocked:function(pe){U=pe},setClear:function(pe,he,Fe,St,Zt){Zt===!0&&(pe*=St,he*=St,Fe*=St),ue.set(pe,he,Fe,St),$.equals(ue)===!1&&(r.clearColor(pe,he,Fe,St),$.copy(ue))},reset:function(){U=!1,G=null,$.set(-1,0,0,0)}}}function n(){let U=!1,ue=!1,G=null,$=null,pe=null;return{setReversed:function(he){if(ue!==he){const Fe=e.get("EXT_clip_control");he?Fe.clipControlEXT(Fe.LOWER_LEFT_EXT,Fe.ZERO_TO_ONE_EXT):Fe.clipControlEXT(Fe.LOWER_LEFT_EXT,Fe.NEGATIVE_ONE_TO_ONE_EXT),ue=he;const St=pe;pe=null,this.setClear(St)}},getReversed:function(){return ue},setTest:function(he){he?le(r.DEPTH_TEST):Le(r.DEPTH_TEST)},setMask:function(he){G!==he&&!U&&(r.depthMask(he),G=he)},setFunc:function(he){if(ue&&(he=Ry[he]),$!==he){switch(he){case Ic:r.depthFunc(r.NEVER);break;case Nc:r.depthFunc(r.ALWAYS);break;case Oc:r.depthFunc(r.LESS);break;case Pr:r.depthFunc(r.LEQUAL);break;case Cc:r.depthFunc(r.EQUAL);break;case Dc:r.depthFunc(r.GEQUAL);break;case _c:r.depthFunc(r.GREATER);break;case zc:r.depthFunc(r.NOTEQUAL);break;default:r.depthFunc(r.LEQUAL)}$=he}},setLocked:function(he){U=he},setClear:function(he){pe!==he&&(ue&&(he=1-he),r.clearDepth(he),pe=he)},reset:function(){U=!1,G=null,$=null,pe=null,ue=!1}}}function i(){let U=!1,ue=null,G=null,$=null,pe=null,he=null,Fe=null,St=null,Zt=null;return{setTest:function(at){U||(at?le(r.STENCIL_TEST):Le(r.STENCIL_TEST))},setMask:function(at){ue!==at&&!U&&(r.stencilMask(at),ue=at)},setFunc:function(at,En,Kn){(G!==at||$!==En||pe!==Kn)&&(r.stencilFunc(at,En,Kn),G=at,$=En,pe=Kn)},setOp:function(at,En,Kn){(he!==at||Fe!==En||St!==Kn)&&(r.stencilOp(at,En,Kn),he=at,Fe=En,St=Kn)},setLocked:function(at){U=at},setClear:function(at){Zt!==at&&(r.clearStencil(at),Zt=at)},reset:function(){U=!1,ue=null,G=null,$=null,pe=null,he=null,Fe=null,St=null,Zt=null}}}const o=new t,s=new n,a=new i,c=new WeakMap,l=new WeakMap;let d={},u={},h=new WeakMap,f=[],g=null,w=!1,y=null,m=null,P=null,E=null,S=null,D=null,H=null,I=new Ue(0,0,0),z=0,M=!1,T=null,C=null,B=null,k=null,Y=null;const ee=r.getParameter(r.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let q=!1,re=0;const Z=r.getParameter(r.VERSION);Z.indexOf("WebGL")!==-1?(re=parseFloat(/^WebGL (\d)/.exec(Z)[1]),q=re>=1):Z.indexOf("OpenGL ES")!==-1&&(re=parseFloat(/^OpenGL ES (\d)/.exec(Z)[1]),q=re>=2);let ce=null,me={};const Se=r.getParameter(r.SCISSOR_BOX),Ge=r.getParameter(r.VIEWPORT),ht=new it().fromArray(Se),J=new it().fromArray(Ge);function oe(U,ue,G,$){const pe=new Uint8Array(4),he=r.createTexture();r.bindTexture(U,he),r.texParameteri(U,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(U,r.TEXTURE_MAG_FILTER,r.NEAREST);for(let Fe=0;Fe<G;Fe++)U===r.TEXTURE_3D||U===r.TEXTURE_2D_ARRAY?r.texImage3D(ue,0,r.RGBA,1,1,$,0,r.RGBA,r.UNSIGNED_BYTE,pe):r.texImage2D(ue+Fe,0,r.RGBA,1,1,0,r.RGBA,r.UNSIGNED_BYTE,pe);return he}const we={};we[r.TEXTURE_2D]=oe(r.TEXTURE_2D,r.TEXTURE_2D,1),we[r.TEXTURE_CUBE_MAP]=oe(r.TEXTURE_CUBE_MAP,r.TEXTURE_CUBE_MAP_POSITIVE_X,6),we[r.TEXTURE_2D_ARRAY]=oe(r.TEXTURE_2D_ARRAY,r.TEXTURE_2D_ARRAY,1,1),we[r.TEXTURE_3D]=oe(r.TEXTURE_3D,r.TEXTURE_3D,1,1),o.setClear(0,0,0,1),s.setClear(1),a.setClear(0),le(r.DEPTH_TEST),s.setFunc(Pr),$e(!1),qe(Ed),le(r.CULL_FACE),N(Pi);function le(U){d[U]!==!0&&(r.enable(U),d[U]=!0)}function Le(U){d[U]!==!1&&(r.disable(U),d[U]=!1)}function nt(U,ue){return u[U]!==ue?(r.bindFramebuffer(U,ue),u[U]=ue,U===r.DRAW_FRAMEBUFFER&&(u[r.FRAMEBUFFER]=ue),U===r.FRAMEBUFFER&&(u[r.DRAW_FRAMEBUFFER]=ue),!0):!1}function Ce(U,ue){let G=f,$=!1;if(U){G=h.get(ue),G===void 0&&(G=[],h.set(ue,G));const pe=U.textures;if(G.length!==pe.length||G[0]!==r.COLOR_ATTACHMENT0){for(let he=0,Fe=pe.length;he<Fe;he++)G[he]=r.COLOR_ATTACHMENT0+he;G.length=pe.length,$=!0}}else G[0]!==r.BACK&&(G[0]=r.BACK,$=!0);$&&r.drawBuffers(G)}function Pt(U){return g!==U?(r.useProgram(U),g=U,!0):!1}const wt={[ki]:r.FUNC_ADD,[Cp]:r.FUNC_SUBTRACT,[Dp]:r.FUNC_REVERSE_SUBTRACT};wt[_p]=r.MIN,wt[zp]=r.MAX;const Ye={[Up]:r.ZERO,[jp]:r.ONE,[Fp]:r.SRC_COLOR,[Ac]:r.SRC_ALPHA,[Gp]:r.SRC_ALPHA_SATURATE,[Wp]:r.DST_COLOR,[Xp]:r.DST_ALPHA,[Vp]:r.ONE_MINUS_SRC_COLOR,[Hc]:r.ONE_MINUS_SRC_ALPHA,[Bp]:r.ONE_MINUS_DST_COLOR,[kp]:r.ONE_MINUS_DST_ALPHA,[Zp]:r.CONSTANT_COLOR,[Yp]:r.ONE_MINUS_CONSTANT_COLOR,[qp]:r.CONSTANT_ALPHA,[Kp]:r.ONE_MINUS_CONSTANT_ALPHA};function N(U,ue,G,$,pe,he,Fe,St,Zt,at){if(U===Pi){w===!0&&(Le(r.BLEND),w=!1);return}if(w===!1&&(le(r.BLEND),w=!0),U!==Op){if(U!==y||at!==M){if((m!==ki||S!==ki)&&(r.blendEquation(r.FUNC_ADD),m=ki,S=ki),at)switch(U){case Sr:r.blendFuncSeparate(r.ONE,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case Rd:r.blendFunc(r.ONE,r.ONE);break;case Pd:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case Ld:r.blendFuncSeparate(r.ZERO,r.SRC_COLOR,r.ZERO,r.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",U);break}else switch(U){case Sr:r.blendFuncSeparate(r.SRC_ALPHA,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case Rd:r.blendFunc(r.SRC_ALPHA,r.ONE);break;case Pd:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case Ld:r.blendFunc(r.ZERO,r.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",U);break}P=null,E=null,D=null,H=null,I.set(0,0,0),z=0,y=U,M=at}return}pe=pe||ue,he=he||G,Fe=Fe||$,(ue!==m||pe!==S)&&(r.blendEquationSeparate(wt[ue],wt[pe]),m=ue,S=pe),(G!==P||$!==E||he!==D||Fe!==H)&&(r.blendFuncSeparate(Ye[G],Ye[$],Ye[he],Ye[Fe]),P=G,E=$,D=he,H=Fe),(St.equals(I)===!1||Zt!==z)&&(r.blendColor(St.r,St.g,St.b,Zt),I.copy(St),z=Zt),y=U,M=!1}function yn(U,ue){U.side===Wn?Le(r.CULL_FACE):le(r.CULL_FACE);let G=U.side===dn;ue&&(G=!G),$e(G),U.blending===Sr&&U.transparent===!1?N(Pi):N(U.blending,U.blendEquation,U.blendSrc,U.blendDst,U.blendEquationAlpha,U.blendSrcAlpha,U.blendDstAlpha,U.blendColor,U.blendAlpha,U.premultipliedAlpha),s.setFunc(U.depthFunc),s.setTest(U.depthTest),s.setMask(U.depthWrite),o.setMask(U.colorWrite);const $=U.stencilWrite;a.setTest($),$&&(a.setMask(U.stencilWriteMask),a.setFunc(U.stencilFunc,U.stencilRef,U.stencilFuncMask),a.setOp(U.stencilFail,U.stencilZFail,U.stencilZPass)),mt(U.polygonOffset,U.polygonOffsetFactor,U.polygonOffsetUnits),U.alphaToCoverage===!0?le(r.SAMPLE_ALPHA_TO_COVERAGE):Le(r.SAMPLE_ALPHA_TO_COVERAGE)}function $e(U){T!==U&&(U?r.frontFace(r.CW):r.frontFace(r.CCW),T=U)}function qe(U){U!==Hp?(le(r.CULL_FACE),U!==C&&(U===Ed?r.cullFace(r.BACK):U===Ip?r.cullFace(r.FRONT):r.cullFace(r.FRONT_AND_BACK))):Le(r.CULL_FACE),C=U}function Me(U){U!==B&&(q&&r.lineWidth(U),B=U)}function mt(U,ue,G){U?(le(r.POLYGON_OFFSET_FILL),(k!==ue||Y!==G)&&(r.polygonOffset(ue,G),k=ue,Y=G)):Le(r.POLYGON_OFFSET_FILL)}function Te(U){U?le(r.SCISSOR_TEST):Le(r.SCISSOR_TEST)}function R(U){U===void 0&&(U=r.TEXTURE0+ee-1),ce!==U&&(r.activeTexture(U),ce=U)}function x(U,ue,G){G===void 0&&(ce===null?G=r.TEXTURE0+ee-1:G=ce);let $=me[G];$===void 0&&($={type:void 0,texture:void 0},me[G]=$),($.type!==U||$.texture!==ue)&&(ce!==G&&(r.activeTexture(G),ce=G),r.bindTexture(U,ue||we[U]),$.type=U,$.texture=ue)}function V(){const U=me[ce];U!==void 0&&U.type!==void 0&&(r.bindTexture(U.type,null),U.type=void 0,U.texture=void 0)}function Q(){try{r.compressedTexImage2D(...arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function te(){try{r.compressedTexImage3D(...arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function K(){try{r.texSubImage2D(...arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function xe(){try{r.texSubImage3D(...arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function de(){try{r.compressedTexSubImage2D(...arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function Ae(){try{r.compressedTexSubImage3D(...arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function Ie(){try{r.texStorage2D(...arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function ne(){try{r.texStorage3D(...arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function be(){try{r.texImage2D(...arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function Ne(){try{r.texImage3D(...arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function _e(U){ht.equals(U)===!1&&(r.scissor(U.x,U.y,U.z,U.w),ht.copy(U))}function ye(U){J.equals(U)===!1&&(r.viewport(U.x,U.y,U.z,U.w),J.copy(U))}function Ke(U,ue){let G=l.get(ue);G===void 0&&(G=new WeakMap,l.set(ue,G));let $=G.get(U);$===void 0&&($=r.getUniformBlockIndex(ue,U.name),G.set(U,$))}function Ve(U,ue){const $=l.get(ue).get(U);c.get(ue)!==$&&(r.uniformBlockBinding(ue,$,U.__bindingPointIndex),c.set(ue,$))}function ft(){r.disable(r.BLEND),r.disable(r.CULL_FACE),r.disable(r.DEPTH_TEST),r.disable(r.POLYGON_OFFSET_FILL),r.disable(r.SCISSOR_TEST),r.disable(r.STENCIL_TEST),r.disable(r.SAMPLE_ALPHA_TO_COVERAGE),r.blendEquation(r.FUNC_ADD),r.blendFunc(r.ONE,r.ZERO),r.blendFuncSeparate(r.ONE,r.ZERO,r.ONE,r.ZERO),r.blendColor(0,0,0,0),r.colorMask(!0,!0,!0,!0),r.clearColor(0,0,0,0),r.depthMask(!0),r.depthFunc(r.LESS),s.setReversed(!1),r.clearDepth(1),r.stencilMask(4294967295),r.stencilFunc(r.ALWAYS,0,4294967295),r.stencilOp(r.KEEP,r.KEEP,r.KEEP),r.clearStencil(0),r.cullFace(r.BACK),r.frontFace(r.CCW),r.polygonOffset(0,0),r.activeTexture(r.TEXTURE0),r.bindFramebuffer(r.FRAMEBUFFER,null),r.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),r.bindFramebuffer(r.READ_FRAMEBUFFER,null),r.useProgram(null),r.lineWidth(1),r.scissor(0,0,r.canvas.width,r.canvas.height),r.viewport(0,0,r.canvas.width,r.canvas.height),d={},ce=null,me={},u={},h=new WeakMap,f=[],g=null,w=!1,y=null,m=null,P=null,E=null,S=null,D=null,H=null,I=new Ue(0,0,0),z=0,M=!1,T=null,C=null,B=null,k=null,Y=null,ht.set(0,0,r.canvas.width,r.canvas.height),J.set(0,0,r.canvas.width,r.canvas.height),o.reset(),s.reset(),a.reset()}return{buffers:{color:o,depth:s,stencil:a},enable:le,disable:Le,bindFramebuffer:nt,drawBuffers:Ce,useProgram:Pt,setBlending:N,setMaterial:yn,setFlipSided:$e,setCullFace:qe,setLineWidth:Me,setPolygonOffset:mt,setScissorTest:Te,activeTexture:R,bindTexture:x,unbindTexture:V,compressedTexImage2D:Q,compressedTexImage3D:te,texImage2D:be,texImage3D:Ne,updateUBOMapping:Ke,uniformBlockBinding:Ve,texStorage2D:Ie,texStorage3D:ne,texSubImage2D:K,texSubImage3D:xe,compressedTexSubImage2D:de,compressedTexSubImage3D:Ae,scissor:_e,viewport:ye,reset:ft}}function Ly(r,e,t,n,i,o,s){const a=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,c=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),l=new Oe,d=new WeakMap;let u;const h=new WeakMap;let f=!1;try{f=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function g(R,x){return f?new OffscreenCanvas(R,x):Mo("canvas")}function w(R,x,V){let Q=1;const te=Te(R);if((te.width>V||te.height>V)&&(Q=V/Math.max(te.width,te.height)),Q<1)if(typeof HTMLImageElement<"u"&&R instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&R instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&R instanceof ImageBitmap||typeof VideoFrame<"u"&&R instanceof VideoFrame){const K=Math.floor(Q*te.width),xe=Math.floor(Q*te.height);u===void 0&&(u=g(K,xe));const de=x?g(K,xe):u;return de.width=K,de.height=xe,de.getContext("2d").drawImage(R,0,0,K,xe),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+te.width+"x"+te.height+") to ("+K+"x"+xe+")."),de}else return"data"in R&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+te.width+"x"+te.height+")."),R;return R}function y(R){return R.generateMipmaps}function m(R){r.generateMipmap(R)}function P(R){return R.isWebGLCubeRenderTarget?r.TEXTURE_CUBE_MAP:R.isWebGL3DRenderTarget?r.TEXTURE_3D:R.isWebGLArrayRenderTarget||R.isCompressedArrayTexture?r.TEXTURE_2D_ARRAY:r.TEXTURE_2D}function E(R,x,V,Q,te=!1){if(R!==null){if(r[R]!==void 0)return r[R];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+R+"'")}let K=x;if(x===r.RED&&(V===r.FLOAT&&(K=r.R32F),V===r.HALF_FLOAT&&(K=r.R16F),V===r.UNSIGNED_BYTE&&(K=r.R8)),x===r.RED_INTEGER&&(V===r.UNSIGNED_BYTE&&(K=r.R8UI),V===r.UNSIGNED_SHORT&&(K=r.R16UI),V===r.UNSIGNED_INT&&(K=r.R32UI),V===r.BYTE&&(K=r.R8I),V===r.SHORT&&(K=r.R16I),V===r.INT&&(K=r.R32I)),x===r.RG&&(V===r.FLOAT&&(K=r.RG32F),V===r.HALF_FLOAT&&(K=r.RG16F),V===r.UNSIGNED_BYTE&&(K=r.RG8)),x===r.RG_INTEGER&&(V===r.UNSIGNED_BYTE&&(K=r.RG8UI),V===r.UNSIGNED_SHORT&&(K=r.RG16UI),V===r.UNSIGNED_INT&&(K=r.RG32UI),V===r.BYTE&&(K=r.RG8I),V===r.SHORT&&(K=r.RG16I),V===r.INT&&(K=r.RG32I)),x===r.RGB_INTEGER&&(V===r.UNSIGNED_BYTE&&(K=r.RGB8UI),V===r.UNSIGNED_SHORT&&(K=r.RGB16UI),V===r.UNSIGNED_INT&&(K=r.RGB32UI),V===r.BYTE&&(K=r.RGB8I),V===r.SHORT&&(K=r.RGB16I),V===r.INT&&(K=r.RGB32I)),x===r.RGBA_INTEGER&&(V===r.UNSIGNED_BYTE&&(K=r.RGBA8UI),V===r.UNSIGNED_SHORT&&(K=r.RGBA16UI),V===r.UNSIGNED_INT&&(K=r.RGBA32UI),V===r.BYTE&&(K=r.RGBA8I),V===r.SHORT&&(K=r.RGBA16I),V===r.INT&&(K=r.RGBA32I)),x===r.RGB&&V===r.UNSIGNED_INT_5_9_9_9_REV&&(K=r.RGB9_E5),x===r.RGBA){const xe=te?_s:Qe.getTransfer(Q);V===r.FLOAT&&(K=r.RGBA32F),V===r.HALF_FLOAT&&(K=r.RGBA16F),V===r.UNSIGNED_BYTE&&(K=xe===dt?r.SRGB8_ALPHA8:r.RGBA8),V===r.UNSIGNED_SHORT_4_4_4_4&&(K=r.RGBA4),V===r.UNSIGNED_SHORT_5_5_5_1&&(K=r.RGB5_A1)}return(K===r.R16F||K===r.R32F||K===r.RG16F||K===r.RG32F||K===r.RGBA16F||K===r.RGBA32F)&&e.get("EXT_color_buffer_float"),K}function S(R,x){let V;return R?x===null||x===Gi||x===wo?V=r.DEPTH24_STENCIL8:x===_n?V=r.DEPTH32F_STENCIL8:x===go&&(V=r.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):x===null||x===Gi||x===wo?V=r.DEPTH_COMPONENT24:x===_n?V=r.DEPTH_COMPONENT32F:x===go&&(V=r.DEPTH_COMPONENT16),V}function D(R,x){return y(R)===!0||R.isFramebufferTexture&&R.minFilter!==rn&&R.minFilter!==bn?Math.log2(Math.max(x.width,x.height))+1:R.mipmaps!==void 0&&R.mipmaps.length>0?R.mipmaps.length:R.isCompressedTexture&&Array.isArray(R.image)?x.mipmaps.length:1}function H(R){const x=R.target;x.removeEventListener("dispose",H),z(x),x.isVideoTexture&&d.delete(x)}function I(R){const x=R.target;x.removeEventListener("dispose",I),T(x)}function z(R){const x=n.get(R);if(x.__webglInit===void 0)return;const V=R.source,Q=h.get(V);if(Q){const te=Q[x.__cacheKey];te.usedTimes--,te.usedTimes===0&&M(R),Object.keys(Q).length===0&&h.delete(V)}n.remove(R)}function M(R){const x=n.get(R);r.deleteTexture(x.__webglTexture);const V=R.source,Q=h.get(V);delete Q[x.__cacheKey],s.memory.textures--}function T(R){const x=n.get(R);if(R.depthTexture&&(R.depthTexture.dispose(),n.remove(R.depthTexture)),R.isWebGLCubeRenderTarget)for(let Q=0;Q<6;Q++){if(Array.isArray(x.__webglFramebuffer[Q]))for(let te=0;te<x.__webglFramebuffer[Q].length;te++)r.deleteFramebuffer(x.__webglFramebuffer[Q][te]);else r.deleteFramebuffer(x.__webglFramebuffer[Q]);x.__webglDepthbuffer&&r.deleteRenderbuffer(x.__webglDepthbuffer[Q])}else{if(Array.isArray(x.__webglFramebuffer))for(let Q=0;Q<x.__webglFramebuffer.length;Q++)r.deleteFramebuffer(x.__webglFramebuffer[Q]);else r.deleteFramebuffer(x.__webglFramebuffer);if(x.__webglDepthbuffer&&r.deleteRenderbuffer(x.__webglDepthbuffer),x.__webglMultisampledFramebuffer&&r.deleteFramebuffer(x.__webglMultisampledFramebuffer),x.__webglColorRenderbuffer)for(let Q=0;Q<x.__webglColorRenderbuffer.length;Q++)x.__webglColorRenderbuffer[Q]&&r.deleteRenderbuffer(x.__webglColorRenderbuffer[Q]);x.__webglDepthRenderbuffer&&r.deleteRenderbuffer(x.__webglDepthRenderbuffer)}const V=R.textures;for(let Q=0,te=V.length;Q<te;Q++){const K=n.get(V[Q]);K.__webglTexture&&(r.deleteTexture(K.__webglTexture),s.memory.textures--),n.remove(V[Q])}n.remove(R)}let C=0;function B(){C=0}function k(){const R=C;return R>=i.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+R+" texture units while this GPU supports only "+i.maxTextures),C+=1,R}function Y(R){const x=[];return x.push(R.wrapS),x.push(R.wrapT),x.push(R.wrapR||0),x.push(R.magFilter),x.push(R.minFilter),x.push(R.anisotropy),x.push(R.internalFormat),x.push(R.format),x.push(R.type),x.push(R.generateMipmaps),x.push(R.premultiplyAlpha),x.push(R.flipY),x.push(R.unpackAlignment),x.push(R.colorSpace),x.join()}function ee(R,x){const V=n.get(R);if(R.isVideoTexture&&Me(R),R.isRenderTargetTexture===!1&&R.version>0&&V.__version!==R.version){const Q=R.image;if(Q===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(Q.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{J(V,R,x);return}}t.bindTexture(r.TEXTURE_2D,V.__webglTexture,r.TEXTURE0+x)}function q(R,x){const V=n.get(R);if(R.version>0&&V.__version!==R.version){J(V,R,x);return}t.bindTexture(r.TEXTURE_2D_ARRAY,V.__webglTexture,r.TEXTURE0+x)}function re(R,x){const V=n.get(R);if(R.version>0&&V.__version!==R.version){J(V,R,x);return}t.bindTexture(r.TEXTURE_3D,V.__webglTexture,r.TEXTURE0+x)}function Z(R,x){const V=n.get(R);if(R.version>0&&V.__version!==R.version){oe(V,R,x);return}t.bindTexture(r.TEXTURE_CUBE_MAP,V.__webglTexture,r.TEXTURE0+x)}const ce={[Hr]:r.REPEAT,[Mi]:r.CLAMP_TO_EDGE,[Ds]:r.MIRRORED_REPEAT},me={[rn]:r.NEAREST,[mh]:r.NEAREST_MIPMAP_NEAREST,[ao]:r.NEAREST_MIPMAP_LINEAR,[bn]:r.LINEAR,[Ms]:r.LINEAR_MIPMAP_NEAREST,[oi]:r.LINEAR_MIPMAP_LINEAR},Se={[pf]:r.NEVER,[wf]:r.ALWAYS,[ff]:r.LESS,[Eh]:r.LEQUAL,[mf]:r.EQUAL,[gf]:r.GEQUAL,[bf]:r.GREATER,[yf]:r.NOTEQUAL};function Ge(R,x){if(x.type===_n&&e.has("OES_texture_float_linear")===!1&&(x.magFilter===bn||x.magFilter===Ms||x.magFilter===ao||x.magFilter===oi||x.minFilter===bn||x.minFilter===Ms||x.minFilter===ao||x.minFilter===oi)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),r.texParameteri(R,r.TEXTURE_WRAP_S,ce[x.wrapS]),r.texParameteri(R,r.TEXTURE_WRAP_T,ce[x.wrapT]),(R===r.TEXTURE_3D||R===r.TEXTURE_2D_ARRAY)&&r.texParameteri(R,r.TEXTURE_WRAP_R,ce[x.wrapR]),r.texParameteri(R,r.TEXTURE_MAG_FILTER,me[x.magFilter]),r.texParameteri(R,r.TEXTURE_MIN_FILTER,me[x.minFilter]),x.compareFunction&&(r.texParameteri(R,r.TEXTURE_COMPARE_MODE,r.COMPARE_REF_TO_TEXTURE),r.texParameteri(R,r.TEXTURE_COMPARE_FUNC,Se[x.compareFunction])),e.has("EXT_texture_filter_anisotropic")===!0){if(x.magFilter===rn||x.minFilter!==ao&&x.minFilter!==oi||x.type===_n&&e.has("OES_texture_float_linear")===!1)return;if(x.anisotropy>1||n.get(x).__currentAnisotropy){const V=e.get("EXT_texture_filter_anisotropic");r.texParameterf(R,V.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(x.anisotropy,i.getMaxAnisotropy())),n.get(x).__currentAnisotropy=x.anisotropy}}}function ht(R,x){let V=!1;R.__webglInit===void 0&&(R.__webglInit=!0,x.addEventListener("dispose",H));const Q=x.source;let te=h.get(Q);te===void 0&&(te={},h.set(Q,te));const K=Y(x);if(K!==R.__cacheKey){te[K]===void 0&&(te[K]={texture:r.createTexture(),usedTimes:0},s.memory.textures++,V=!0),te[K].usedTimes++;const xe=te[R.__cacheKey];xe!==void 0&&(te[R.__cacheKey].usedTimes--,xe.usedTimes===0&&M(x)),R.__cacheKey=K,R.__webglTexture=te[K].texture}return V}function J(R,x,V){let Q=r.TEXTURE_2D;(x.isDataArrayTexture||x.isCompressedArrayTexture)&&(Q=r.TEXTURE_2D_ARRAY),x.isData3DTexture&&(Q=r.TEXTURE_3D);const te=ht(R,x),K=x.source;t.bindTexture(Q,R.__webglTexture,r.TEXTURE0+V);const xe=n.get(K);if(K.version!==xe.__version||te===!0){t.activeTexture(r.TEXTURE0+V);const de=Qe.getPrimaries(Qe.workingColorSpace),Ae=x.colorSpace===Si?null:Qe.getPrimaries(x.colorSpace),Ie=x.colorSpace===Si||de===Ae?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,x.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,x.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,x.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,Ie);let ne=w(x.image,!1,i.maxTextureSize);ne=mt(x,ne);const be=o.convert(x.format,x.colorSpace),Ne=o.convert(x.type);let _e=E(x.internalFormat,be,Ne,x.colorSpace,x.isVideoTexture);Ge(Q,x);let ye;const Ke=x.mipmaps,Ve=x.isVideoTexture!==!0,ft=xe.__version===void 0||te===!0,U=K.dataReady,ue=D(x,ne);if(x.isDepthTexture)_e=S(x.format===vo,x.type),ft&&(Ve?t.texStorage2D(r.TEXTURE_2D,1,_e,ne.width,ne.height):t.texImage2D(r.TEXTURE_2D,0,_e,ne.width,ne.height,0,be,Ne,null));else if(x.isDataTexture)if(Ke.length>0){Ve&&ft&&t.texStorage2D(r.TEXTURE_2D,ue,_e,Ke[0].width,Ke[0].height);for(let G=0,$=Ke.length;G<$;G++)ye=Ke[G],Ve?U&&t.texSubImage2D(r.TEXTURE_2D,G,0,0,ye.width,ye.height,be,Ne,ye.data):t.texImage2D(r.TEXTURE_2D,G,_e,ye.width,ye.height,0,be,Ne,ye.data);x.generateMipmaps=!1}else Ve?(ft&&t.texStorage2D(r.TEXTURE_2D,ue,_e,ne.width,ne.height),U&&t.texSubImage2D(r.TEXTURE_2D,0,0,0,ne.width,ne.height,be,Ne,ne.data)):t.texImage2D(r.TEXTURE_2D,0,_e,ne.width,ne.height,0,be,Ne,ne.data);else if(x.isCompressedTexture)if(x.isCompressedArrayTexture){Ve&&ft&&t.texStorage3D(r.TEXTURE_2D_ARRAY,ue,_e,Ke[0].width,Ke[0].height,ne.depth);for(let G=0,$=Ke.length;G<$;G++)if(ye=Ke[G],x.format!==Mn)if(be!==null)if(Ve){if(U)if(x.layerUpdates.size>0){const pe=x0(ye.width,ye.height,x.format,x.type);for(const he of x.layerUpdates){const Fe=ye.data.subarray(he*pe/ye.data.BYTES_PER_ELEMENT,(he+1)*pe/ye.data.BYTES_PER_ELEMENT);t.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,G,0,0,he,ye.width,ye.height,1,be,Fe)}x.clearLayerUpdates()}else t.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,G,0,0,0,ye.width,ye.height,ne.depth,be,ye.data)}else t.compressedTexImage3D(r.TEXTURE_2D_ARRAY,G,_e,ye.width,ye.height,ne.depth,0,ye.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else Ve?U&&t.texSubImage3D(r.TEXTURE_2D_ARRAY,G,0,0,0,ye.width,ye.height,ne.depth,be,Ne,ye.data):t.texImage3D(r.TEXTURE_2D_ARRAY,G,_e,ye.width,ye.height,ne.depth,0,be,Ne,ye.data)}else{Ve&&ft&&t.texStorage2D(r.TEXTURE_2D,ue,_e,Ke[0].width,Ke[0].height);for(let G=0,$=Ke.length;G<$;G++)ye=Ke[G],x.format!==Mn?be!==null?Ve?U&&t.compressedTexSubImage2D(r.TEXTURE_2D,G,0,0,ye.width,ye.height,be,ye.data):t.compressedTexImage2D(r.TEXTURE_2D,G,_e,ye.width,ye.height,0,ye.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):Ve?U&&t.texSubImage2D(r.TEXTURE_2D,G,0,0,ye.width,ye.height,be,Ne,ye.data):t.texImage2D(r.TEXTURE_2D,G,_e,ye.width,ye.height,0,be,Ne,ye.data)}else if(x.isDataArrayTexture)if(Ve){if(ft&&t.texStorage3D(r.TEXTURE_2D_ARRAY,ue,_e,ne.width,ne.height,ne.depth),U)if(x.layerUpdates.size>0){const G=x0(ne.width,ne.height,x.format,x.type);for(const $ of x.layerUpdates){const pe=ne.data.subarray($*G/ne.data.BYTES_PER_ELEMENT,($+1)*G/ne.data.BYTES_PER_ELEMENT);t.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,$,ne.width,ne.height,1,be,Ne,pe)}x.clearLayerUpdates()}else t.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,ne.width,ne.height,ne.depth,be,Ne,ne.data)}else t.texImage3D(r.TEXTURE_2D_ARRAY,0,_e,ne.width,ne.height,ne.depth,0,be,Ne,ne.data);else if(x.isData3DTexture)Ve?(ft&&t.texStorage3D(r.TEXTURE_3D,ue,_e,ne.width,ne.height,ne.depth),U&&t.texSubImage3D(r.TEXTURE_3D,0,0,0,0,ne.width,ne.height,ne.depth,be,Ne,ne.data)):t.texImage3D(r.TEXTURE_3D,0,_e,ne.width,ne.height,ne.depth,0,be,Ne,ne.data);else if(x.isFramebufferTexture){if(ft)if(Ve)t.texStorage2D(r.TEXTURE_2D,ue,_e,ne.width,ne.height);else{let G=ne.width,$=ne.height;for(let pe=0;pe<ue;pe++)t.texImage2D(r.TEXTURE_2D,pe,_e,G,$,0,be,Ne,null),G>>=1,$>>=1}}else if(Ke.length>0){if(Ve&&ft){const G=Te(Ke[0]);t.texStorage2D(r.TEXTURE_2D,ue,_e,G.width,G.height)}for(let G=0,$=Ke.length;G<$;G++)ye=Ke[G],Ve?U&&t.texSubImage2D(r.TEXTURE_2D,G,0,0,be,Ne,ye):t.texImage2D(r.TEXTURE_2D,G,_e,be,Ne,ye);x.generateMipmaps=!1}else if(Ve){if(ft){const G=Te(ne);t.texStorage2D(r.TEXTURE_2D,ue,_e,G.width,G.height)}U&&t.texSubImage2D(r.TEXTURE_2D,0,0,0,be,Ne,ne)}else t.texImage2D(r.TEXTURE_2D,0,_e,be,Ne,ne);y(x)&&m(Q),xe.__version=K.version,x.onUpdate&&x.onUpdate(x)}R.__version=x.version}function oe(R,x,V){if(x.image.length!==6)return;const Q=ht(R,x),te=x.source;t.bindTexture(r.TEXTURE_CUBE_MAP,R.__webglTexture,r.TEXTURE0+V);const K=n.get(te);if(te.version!==K.__version||Q===!0){t.activeTexture(r.TEXTURE0+V);const xe=Qe.getPrimaries(Qe.workingColorSpace),de=x.colorSpace===Si?null:Qe.getPrimaries(x.colorSpace),Ae=x.colorSpace===Si||xe===de?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,x.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,x.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,x.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,Ae);const Ie=x.isCompressedTexture||x.image[0].isCompressedTexture,ne=x.image[0]&&x.image[0].isDataTexture,be=[];for(let $=0;$<6;$++)!Ie&&!ne?be[$]=w(x.image[$],!0,i.maxCubemapSize):be[$]=ne?x.image[$].image:x.image[$],be[$]=mt(x,be[$]);const Ne=be[0],_e=o.convert(x.format,x.colorSpace),ye=o.convert(x.type),Ke=E(x.internalFormat,_e,ye,x.colorSpace),Ve=x.isVideoTexture!==!0,ft=K.__version===void 0||Q===!0,U=te.dataReady;let ue=D(x,Ne);Ge(r.TEXTURE_CUBE_MAP,x);let G;if(Ie){Ve&&ft&&t.texStorage2D(r.TEXTURE_CUBE_MAP,ue,Ke,Ne.width,Ne.height);for(let $=0;$<6;$++){G=be[$].mipmaps;for(let pe=0;pe<G.length;pe++){const he=G[pe];x.format!==Mn?_e!==null?Ve?U&&t.compressedTexSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+$,pe,0,0,he.width,he.height,_e,he.data):t.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+$,pe,Ke,he.width,he.height,0,he.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):Ve?U&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+$,pe,0,0,he.width,he.height,_e,ye,he.data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+$,pe,Ke,he.width,he.height,0,_e,ye,he.data)}}}else{if(G=x.mipmaps,Ve&&ft){G.length>0&&ue++;const $=Te(be[0]);t.texStorage2D(r.TEXTURE_CUBE_MAP,ue,Ke,$.width,$.height)}for(let $=0;$<6;$++)if(ne){Ve?U&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+$,0,0,0,be[$].width,be[$].height,_e,ye,be[$].data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+$,0,Ke,be[$].width,be[$].height,0,_e,ye,be[$].data);for(let pe=0;pe<G.length;pe++){const Fe=G[pe].image[$].image;Ve?U&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+$,pe+1,0,0,Fe.width,Fe.height,_e,ye,Fe.data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+$,pe+1,Ke,Fe.width,Fe.height,0,_e,ye,Fe.data)}}else{Ve?U&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+$,0,0,0,_e,ye,be[$]):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+$,0,Ke,_e,ye,be[$]);for(let pe=0;pe<G.length;pe++){const he=G[pe];Ve?U&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+$,pe+1,0,0,_e,ye,he.image[$]):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+$,pe+1,Ke,_e,ye,he.image[$])}}}y(x)&&m(r.TEXTURE_CUBE_MAP),K.__version=te.version,x.onUpdate&&x.onUpdate(x)}R.__version=x.version}function we(R,x,V,Q,te,K){const xe=o.convert(V.format,V.colorSpace),de=o.convert(V.type),Ae=E(V.internalFormat,xe,de,V.colorSpace),Ie=n.get(x),ne=n.get(V);if(ne.__renderTarget=x,!Ie.__hasExternalTextures){const be=Math.max(1,x.width>>K),Ne=Math.max(1,x.height>>K);te===r.TEXTURE_3D||te===r.TEXTURE_2D_ARRAY?t.texImage3D(te,K,Ae,be,Ne,x.depth,0,xe,de,null):t.texImage2D(te,K,Ae,be,Ne,0,xe,de,null)}t.bindFramebuffer(r.FRAMEBUFFER,R),qe(x)?a.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,Q,te,ne.__webglTexture,0,$e(x)):(te===r.TEXTURE_2D||te>=r.TEXTURE_CUBE_MAP_POSITIVE_X&&te<=r.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&r.framebufferTexture2D(r.FRAMEBUFFER,Q,te,ne.__webglTexture,K),t.bindFramebuffer(r.FRAMEBUFFER,null)}function le(R,x,V){if(r.bindRenderbuffer(r.RENDERBUFFER,R),x.depthBuffer){const Q=x.depthTexture,te=Q&&Q.isDepthTexture?Q.type:null,K=S(x.stencilBuffer,te),xe=x.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,de=$e(x);qe(x)?a.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,de,K,x.width,x.height):V?r.renderbufferStorageMultisample(r.RENDERBUFFER,de,K,x.width,x.height):r.renderbufferStorage(r.RENDERBUFFER,K,x.width,x.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,xe,r.RENDERBUFFER,R)}else{const Q=x.textures;for(let te=0;te<Q.length;te++){const K=Q[te],xe=o.convert(K.format,K.colorSpace),de=o.convert(K.type),Ae=E(K.internalFormat,xe,de,K.colorSpace),Ie=$e(x);V&&qe(x)===!1?r.renderbufferStorageMultisample(r.RENDERBUFFER,Ie,Ae,x.width,x.height):qe(x)?a.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,Ie,Ae,x.width,x.height):r.renderbufferStorage(r.RENDERBUFFER,Ae,x.width,x.height)}}r.bindRenderbuffer(r.RENDERBUFFER,null)}function Le(R,x){if(x&&x.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(r.FRAMEBUFFER,R),!(x.depthTexture&&x.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const Q=n.get(x.depthTexture);Q.__renderTarget=x,(!Q.__webglTexture||x.depthTexture.image.width!==x.width||x.depthTexture.image.height!==x.height)&&(x.depthTexture.image.width=x.width,x.depthTexture.image.height=x.height,x.depthTexture.needsUpdate=!0),ee(x.depthTexture,0);const te=Q.__webglTexture,K=$e(x);if(x.depthTexture.format===xo)qe(x)?a.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,te,0,K):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,te,0);else if(x.depthTexture.format===vo)qe(x)?a.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,te,0,K):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,te,0);else throw new Error("Unknown depthTexture format")}function nt(R){const x=n.get(R),V=R.isWebGLCubeRenderTarget===!0;if(x.__boundDepthTexture!==R.depthTexture){const Q=R.depthTexture;if(x.__depthDisposeCallback&&x.__depthDisposeCallback(),Q){const te=()=>{delete x.__boundDepthTexture,delete x.__depthDisposeCallback,Q.removeEventListener("dispose",te)};Q.addEventListener("dispose",te),x.__depthDisposeCallback=te}x.__boundDepthTexture=Q}if(R.depthTexture&&!x.__autoAllocateDepthBuffer){if(V)throw new Error("target.depthTexture not supported in Cube render targets");const Q=R.texture.mipmaps;Q&&Q.length>0?Le(x.__webglFramebuffer[0],R):Le(x.__webglFramebuffer,R)}else if(V){x.__webglDepthbuffer=[];for(let Q=0;Q<6;Q++)if(t.bindFramebuffer(r.FRAMEBUFFER,x.__webglFramebuffer[Q]),x.__webglDepthbuffer[Q]===void 0)x.__webglDepthbuffer[Q]=r.createRenderbuffer(),le(x.__webglDepthbuffer[Q],R,!1);else{const te=R.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,K=x.__webglDepthbuffer[Q];r.bindRenderbuffer(r.RENDERBUFFER,K),r.framebufferRenderbuffer(r.FRAMEBUFFER,te,r.RENDERBUFFER,K)}}else{const Q=R.texture.mipmaps;if(Q&&Q.length>0?t.bindFramebuffer(r.FRAMEBUFFER,x.__webglFramebuffer[0]):t.bindFramebuffer(r.FRAMEBUFFER,x.__webglFramebuffer),x.__webglDepthbuffer===void 0)x.__webglDepthbuffer=r.createRenderbuffer(),le(x.__webglDepthbuffer,R,!1);else{const te=R.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,K=x.__webglDepthbuffer;r.bindRenderbuffer(r.RENDERBUFFER,K),r.framebufferRenderbuffer(r.FRAMEBUFFER,te,r.RENDERBUFFER,K)}}t.bindFramebuffer(r.FRAMEBUFFER,null)}function Ce(R,x,V){const Q=n.get(R);x!==void 0&&we(Q.__webglFramebuffer,R,R.texture,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,0),V!==void 0&&nt(R)}function Pt(R){const x=R.texture,V=n.get(R),Q=n.get(x);R.addEventListener("dispose",I);const te=R.textures,K=R.isWebGLCubeRenderTarget===!0,xe=te.length>1;if(xe||(Q.__webglTexture===void 0&&(Q.__webglTexture=r.createTexture()),Q.__version=x.version,s.memory.textures++),K){V.__webglFramebuffer=[];for(let de=0;de<6;de++)if(x.mipmaps&&x.mipmaps.length>0){V.__webglFramebuffer[de]=[];for(let Ae=0;Ae<x.mipmaps.length;Ae++)V.__webglFramebuffer[de][Ae]=r.createFramebuffer()}else V.__webglFramebuffer[de]=r.createFramebuffer()}else{if(x.mipmaps&&x.mipmaps.length>0){V.__webglFramebuffer=[];for(let de=0;de<x.mipmaps.length;de++)V.__webglFramebuffer[de]=r.createFramebuffer()}else V.__webglFramebuffer=r.createFramebuffer();if(xe)for(let de=0,Ae=te.length;de<Ae;de++){const Ie=n.get(te[de]);Ie.__webglTexture===void 0&&(Ie.__webglTexture=r.createTexture(),s.memory.textures++)}if(R.samples>0&&qe(R)===!1){V.__webglMultisampledFramebuffer=r.createFramebuffer(),V.__webglColorRenderbuffer=[],t.bindFramebuffer(r.FRAMEBUFFER,V.__webglMultisampledFramebuffer);for(let de=0;de<te.length;de++){const Ae=te[de];V.__webglColorRenderbuffer[de]=r.createRenderbuffer(),r.bindRenderbuffer(r.RENDERBUFFER,V.__webglColorRenderbuffer[de]);const Ie=o.convert(Ae.format,Ae.colorSpace),ne=o.convert(Ae.type),be=E(Ae.internalFormat,Ie,ne,Ae.colorSpace,R.isXRRenderTarget===!0),Ne=$e(R);r.renderbufferStorageMultisample(r.RENDERBUFFER,Ne,be,R.width,R.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+de,r.RENDERBUFFER,V.__webglColorRenderbuffer[de])}r.bindRenderbuffer(r.RENDERBUFFER,null),R.depthBuffer&&(V.__webglDepthRenderbuffer=r.createRenderbuffer(),le(V.__webglDepthRenderbuffer,R,!0)),t.bindFramebuffer(r.FRAMEBUFFER,null)}}if(K){t.bindTexture(r.TEXTURE_CUBE_MAP,Q.__webglTexture),Ge(r.TEXTURE_CUBE_MAP,x);for(let de=0;de<6;de++)if(x.mipmaps&&x.mipmaps.length>0)for(let Ae=0;Ae<x.mipmaps.length;Ae++)we(V.__webglFramebuffer[de][Ae],R,x,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+de,Ae);else we(V.__webglFramebuffer[de],R,x,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+de,0);y(x)&&m(r.TEXTURE_CUBE_MAP),t.unbindTexture()}else if(xe){for(let de=0,Ae=te.length;de<Ae;de++){const Ie=te[de],ne=n.get(Ie);t.bindTexture(r.TEXTURE_2D,ne.__webglTexture),Ge(r.TEXTURE_2D,Ie),we(V.__webglFramebuffer,R,Ie,r.COLOR_ATTACHMENT0+de,r.TEXTURE_2D,0),y(Ie)&&m(r.TEXTURE_2D)}t.unbindTexture()}else{let de=r.TEXTURE_2D;if((R.isWebGL3DRenderTarget||R.isWebGLArrayRenderTarget)&&(de=R.isWebGL3DRenderTarget?r.TEXTURE_3D:r.TEXTURE_2D_ARRAY),t.bindTexture(de,Q.__webglTexture),Ge(de,x),x.mipmaps&&x.mipmaps.length>0)for(let Ae=0;Ae<x.mipmaps.length;Ae++)we(V.__webglFramebuffer[Ae],R,x,r.COLOR_ATTACHMENT0,de,Ae);else we(V.__webglFramebuffer,R,x,r.COLOR_ATTACHMENT0,de,0);y(x)&&m(de),t.unbindTexture()}R.depthBuffer&&nt(R)}function wt(R){const x=R.textures;for(let V=0,Q=x.length;V<Q;V++){const te=x[V];if(y(te)){const K=P(R),xe=n.get(te).__webglTexture;t.bindTexture(K,xe),m(K),t.unbindTexture()}}}const Ye=[],N=[];function yn(R){if(R.samples>0){if(qe(R)===!1){const x=R.textures,V=R.width,Q=R.height;let te=r.COLOR_BUFFER_BIT;const K=R.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,xe=n.get(R),de=x.length>1;if(de)for(let Ie=0;Ie<x.length;Ie++)t.bindFramebuffer(r.FRAMEBUFFER,xe.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+Ie,r.RENDERBUFFER,null),t.bindFramebuffer(r.FRAMEBUFFER,xe.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+Ie,r.TEXTURE_2D,null,0);t.bindFramebuffer(r.READ_FRAMEBUFFER,xe.__webglMultisampledFramebuffer);const Ae=R.texture.mipmaps;Ae&&Ae.length>0?t.bindFramebuffer(r.DRAW_FRAMEBUFFER,xe.__webglFramebuffer[0]):t.bindFramebuffer(r.DRAW_FRAMEBUFFER,xe.__webglFramebuffer);for(let Ie=0;Ie<x.length;Ie++){if(R.resolveDepthBuffer&&(R.depthBuffer&&(te|=r.DEPTH_BUFFER_BIT),R.stencilBuffer&&R.resolveStencilBuffer&&(te|=r.STENCIL_BUFFER_BIT)),de){r.framebufferRenderbuffer(r.READ_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.RENDERBUFFER,xe.__webglColorRenderbuffer[Ie]);const ne=n.get(x[Ie]).__webglTexture;r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,ne,0)}r.blitFramebuffer(0,0,V,Q,0,0,V,Q,te,r.NEAREST),c===!0&&(Ye.length=0,N.length=0,Ye.push(r.COLOR_ATTACHMENT0+Ie),R.depthBuffer&&R.resolveDepthBuffer===!1&&(Ye.push(K),N.push(K),r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,N)),r.invalidateFramebuffer(r.READ_FRAMEBUFFER,Ye))}if(t.bindFramebuffer(r.READ_FRAMEBUFFER,null),t.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),de)for(let Ie=0;Ie<x.length;Ie++){t.bindFramebuffer(r.FRAMEBUFFER,xe.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+Ie,r.RENDERBUFFER,xe.__webglColorRenderbuffer[Ie]);const ne=n.get(x[Ie]).__webglTexture;t.bindFramebuffer(r.FRAMEBUFFER,xe.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+Ie,r.TEXTURE_2D,ne,0)}t.bindFramebuffer(r.DRAW_FRAMEBUFFER,xe.__webglMultisampledFramebuffer)}else if(R.depthBuffer&&R.resolveDepthBuffer===!1&&c){const x=R.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT;r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,[x])}}}function $e(R){return Math.min(i.maxSamples,R.samples)}function qe(R){const x=n.get(R);return R.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&x.__useRenderToTexture!==!1}function Me(R){const x=s.render.frame;d.get(R)!==x&&(d.set(R,x),R.update())}function mt(R,x){const V=R.colorSpace,Q=R.format,te=R.type;return R.isCompressedTexture===!0||R.isVideoTexture===!0||V!==an&&V!==Si&&(Qe.getTransfer(V)===dt?(Q!==Mn||te!==Gn)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",V)),x}function Te(R){return typeof HTMLImageElement<"u"&&R instanceof HTMLImageElement?(l.width=R.naturalWidth||R.width,l.height=R.naturalHeight||R.height):typeof VideoFrame<"u"&&R instanceof VideoFrame?(l.width=R.displayWidth,l.height=R.displayHeight):(l.width=R.width,l.height=R.height),l}this.allocateTextureUnit=k,this.resetTextureUnits=B,this.setTexture2D=ee,this.setTexture2DArray=q,this.setTexture3D=re,this.setTextureCube=Z,this.rebindTextures=Ce,this.setupRenderTarget=Pt,this.updateRenderTargetMipmap=wt,this.updateMultisampleRenderTarget=yn,this.setupDepthRenderbuffer=nt,this.setupFrameBufferTexture=we,this.useMultisampledRTT=qe}function Ay(r,e){function t(n,i=Si){let o;const s=Qe.getTransfer(i);if(n===Gn)return r.UNSIGNED_BYTE;if(n===_l)return r.UNSIGNED_SHORT_4_4_4_4;if(n===zl)return r.UNSIGNED_SHORT_5_5_5_1;if(n===gh)return r.UNSIGNED_INT_5_9_9_9_REV;if(n===bh)return r.BYTE;if(n===yh)return r.SHORT;if(n===go)return r.UNSIGNED_SHORT;if(n===Dl)return r.INT;if(n===Gi)return r.UNSIGNED_INT;if(n===_n)return r.FLOAT;if(n===No)return r.HALF_FLOAT;if(n===wh)return r.ALPHA;if(n===xh)return r.RGB;if(n===Mn)return r.RGBA;if(n===xo)return r.DEPTH_COMPONENT;if(n===vo)return r.DEPTH_STENCIL;if(n===Ul)return r.RED;if(n===jl)return r.RED_INTEGER;if(n===vh)return r.RG;if(n===Fl)return r.RG_INTEGER;if(n===Vl)return r.RGBA_INTEGER;if(n===Es||n===Rs||n===Ps||n===Ls)if(s===dt)if(o=e.get("WEBGL_compressed_texture_s3tc_srgb"),o!==null){if(n===Es)return o.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===Rs)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===Ps)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===Ls)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(o=e.get("WEBGL_compressed_texture_s3tc"),o!==null){if(n===Es)return o.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===Rs)return o.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===Ps)return o.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===Ls)return o.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(n===Fc||n===Vc||n===Xc||n===kc)if(o=e.get("WEBGL_compressed_texture_pvrtc"),o!==null){if(n===Fc)return o.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===Vc)return o.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===Xc)return o.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===kc)return o.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(n===Wc||n===Bc||n===Gc)if(o=e.get("WEBGL_compressed_texture_etc"),o!==null){if(n===Wc||n===Bc)return s===dt?o.COMPRESSED_SRGB8_ETC2:o.COMPRESSED_RGB8_ETC2;if(n===Gc)return s===dt?o.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:o.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(n===Zc||n===Yc||n===qc||n===Kc||n===Jc||n===Qc||n===$c||n===el||n===tl||n===nl||n===il||n===rl||n===ol||n===sl)if(o=e.get("WEBGL_compressed_texture_astc"),o!==null){if(n===Zc)return s===dt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:o.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===Yc)return s===dt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:o.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===qc)return s===dt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:o.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===Kc)return s===dt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:o.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===Jc)return s===dt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:o.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===Qc)return s===dt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:o.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===$c)return s===dt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:o.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===el)return s===dt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:o.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===tl)return s===dt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:o.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===nl)return s===dt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:o.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===il)return s===dt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:o.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===rl)return s===dt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:o.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===ol)return s===dt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:o.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===sl)return s===dt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:o.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(n===As||n===al||n===cl)if(o=e.get("EXT_texture_compression_bptc"),o!==null){if(n===As)return s===dt?o.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:o.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===al)return o.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===cl)return o.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(n===Th||n===ll||n===dl||n===ul)if(o=e.get("EXT_texture_compression_rgtc"),o!==null){if(n===As)return o.COMPRESSED_RED_RGTC1_EXT;if(n===ll)return o.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===dl)return o.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===ul)return o.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return n===wo?r.UNSIGNED_INT_24_8:r[n]!==void 0?r[n]:null}return{convert:t}}const Hy=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,Iy=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class Ny{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(e,t,n){if(this.texture===null){const i=new kt,o=e.properties.get(i);o.__webglTexture=t.texture,(t.depthNear!==n.depthNear||t.depthFar!==n.depthFar)&&(this.depthNear=t.depthNear,this.depthFar=t.depthFar),this.texture=i}}getMesh(e){if(this.texture!==null&&this.mesh===null){const t=e.cameras[0].viewport,n=new Ai({vertexShader:Hy,fragmentShader:Iy,uniforms:{depthColor:{value:this.texture},depthWidth:{value:t.z},depthHeight:{value:t.w}}});this.mesh=new Ht(new Qs(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class Oy extends Ji{constructor(e,t){super();const n=this;let i=null,o=1,s=null,a="local-floor",c=1,l=null,d=null,u=null,h=null,f=null,g=null;const w=new Ny,y=t.getContextAttributes();let m=null,P=null;const E=[],S=[],D=new Oe;let H=null;const I=new nn;I.viewport=new it;const z=new nn;z.viewport=new it;const M=[I,z],T=new k1;let C=null,B=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(J){let oe=E[J];return oe===void 0&&(oe=new Oa,E[J]=oe),oe.getTargetRaySpace()},this.getControllerGrip=function(J){let oe=E[J];return oe===void 0&&(oe=new Oa,E[J]=oe),oe.getGripSpace()},this.getHand=function(J){let oe=E[J];return oe===void 0&&(oe=new Oa,E[J]=oe),oe.getHandSpace()};function k(J){const oe=S.indexOf(J.inputSource);if(oe===-1)return;const we=E[oe];we!==void 0&&(we.update(J.inputSource,J.frame,l||s),we.dispatchEvent({type:J.type,data:J.inputSource}))}function Y(){i.removeEventListener("select",k),i.removeEventListener("selectstart",k),i.removeEventListener("selectend",k),i.removeEventListener("squeeze",k),i.removeEventListener("squeezestart",k),i.removeEventListener("squeezeend",k),i.removeEventListener("end",Y),i.removeEventListener("inputsourceschange",ee);for(let J=0;J<E.length;J++){const oe=S[J];oe!==null&&(S[J]=null,E[J].disconnect(oe))}C=null,B=null,w.reset(),e.setRenderTarget(m),f=null,h=null,u=null,i=null,P=null,ht.stop(),n.isPresenting=!1,e.setPixelRatio(H),e.setSize(D.width,D.height,!1),n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(J){o=J,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(J){a=J,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l||s},this.setReferenceSpace=function(J){l=J},this.getBaseLayer=function(){return h!==null?h:f},this.getBinding=function(){return u},this.getFrame=function(){return g},this.getSession=function(){return i},this.setSession=async function(J){if(i=J,i!==null){if(m=e.getRenderTarget(),i.addEventListener("select",k),i.addEventListener("selectstart",k),i.addEventListener("selectend",k),i.addEventListener("squeeze",k),i.addEventListener("squeezestart",k),i.addEventListener("squeezeend",k),i.addEventListener("end",Y),i.addEventListener("inputsourceschange",ee),y.xrCompatible!==!0&&await t.makeXRCompatible(),H=e.getPixelRatio(),e.getSize(D),typeof XRWebGLBinding<"u"&&"createProjectionLayer"in XRWebGLBinding.prototype){let we=null,le=null,Le=null;y.depth&&(Le=y.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,we=y.stencil?vo:xo,le=y.stencil?wo:Gi);const nt={colorFormat:t.RGBA8,depthFormat:Le,scaleFactor:o};u=new XRWebGLBinding(i,t),h=u.createProjectionLayer(nt),i.updateRenderState({layers:[h]}),e.setPixelRatio(1),e.setSize(h.textureWidth,h.textureHeight,!1),P=new Zi(h.textureWidth,h.textureHeight,{format:Mn,type:Gn,depthTexture:new Uh(h.textureWidth,h.textureHeight,le,void 0,void 0,void 0,void 0,void 0,void 0,we),stencilBuffer:y.stencil,colorSpace:e.outputColorSpace,samples:y.antialias?4:0,resolveDepthBuffer:h.ignoreDepthValues===!1,resolveStencilBuffer:h.ignoreDepthValues===!1})}else{const we={antialias:y.antialias,alpha:!0,depth:y.depth,stencil:y.stencil,framebufferScaleFactor:o};f=new XRWebGLLayer(i,t,we),i.updateRenderState({baseLayer:f}),e.setPixelRatio(1),e.setSize(f.framebufferWidth,f.framebufferHeight,!1),P=new Zi(f.framebufferWidth,f.framebufferHeight,{format:Mn,type:Gn,colorSpace:e.outputColorSpace,stencilBuffer:y.stencil,resolveDepthBuffer:f.ignoreDepthValues===!1,resolveStencilBuffer:f.ignoreDepthValues===!1})}P.isXRRenderTarget=!0,this.setFoveation(c),l=null,s=await i.requestReferenceSpace(a),ht.setContext(i),ht.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(i!==null)return i.environmentBlendMode},this.getDepthTexture=function(){return w.getDepthTexture()};function ee(J){for(let oe=0;oe<J.removed.length;oe++){const we=J.removed[oe],le=S.indexOf(we);le>=0&&(S[le]=null,E[le].disconnect(we))}for(let oe=0;oe<J.added.length;oe++){const we=J.added[oe];let le=S.indexOf(we);if(le===-1){for(let nt=0;nt<E.length;nt++)if(nt>=S.length){S.push(we),le=nt;break}else if(S[nt]===null){S[nt]=we,le=nt;break}if(le===-1)break}const Le=E[le];Le&&Le.connect(we)}}const q=new A,re=new A;function Z(J,oe,we){q.setFromMatrixPosition(oe.matrixWorld),re.setFromMatrixPosition(we.matrixWorld);const le=q.distanceTo(re),Le=oe.projectionMatrix.elements,nt=we.projectionMatrix.elements,Ce=Le[14]/(Le[10]-1),Pt=Le[14]/(Le[10]+1),wt=(Le[9]+1)/Le[5],Ye=(Le[9]-1)/Le[5],N=(Le[8]-1)/Le[0],yn=(nt[8]+1)/nt[0],$e=Ce*N,qe=Ce*yn,Me=le/(-N+yn),mt=Me*-N;if(oe.matrixWorld.decompose(J.position,J.quaternion,J.scale),J.translateX(mt),J.translateZ(Me),J.matrixWorld.compose(J.position,J.quaternion,J.scale),J.matrixWorldInverse.copy(J.matrixWorld).invert(),Le[10]===-1)J.projectionMatrix.copy(oe.projectionMatrix),J.projectionMatrixInverse.copy(oe.projectionMatrixInverse);else{const Te=Ce+Me,R=Pt+Me,x=$e-mt,V=qe+(le-mt),Q=wt*Pt/R*Te,te=Ye*Pt/R*Te;J.projectionMatrix.makePerspective(x,V,Q,te,Te,R),J.projectionMatrixInverse.copy(J.projectionMatrix).invert()}}function ce(J,oe){oe===null?J.matrixWorld.copy(J.matrix):J.matrixWorld.multiplyMatrices(oe.matrixWorld,J.matrix),J.matrixWorldInverse.copy(J.matrixWorld).invert()}this.updateCamera=function(J){if(i===null)return;let oe=J.near,we=J.far;w.texture!==null&&(w.depthNear>0&&(oe=w.depthNear),w.depthFar>0&&(we=w.depthFar)),T.near=z.near=I.near=oe,T.far=z.far=I.far=we,(C!==T.near||B!==T.far)&&(i.updateRenderState({depthNear:T.near,depthFar:T.far}),C=T.near,B=T.far),I.layers.mask=J.layers.mask|2,z.layers.mask=J.layers.mask|4,T.layers.mask=I.layers.mask|z.layers.mask;const le=J.parent,Le=T.cameras;ce(T,le);for(let nt=0;nt<Le.length;nt++)ce(Le[nt],le);Le.length===2?Z(T,I,z):T.projectionMatrix.copy(I.projectionMatrix),me(J,T,le)};function me(J,oe,we){we===null?J.matrix.copy(oe.matrixWorld):(J.matrix.copy(we.matrixWorld),J.matrix.invert(),J.matrix.multiply(oe.matrixWorld)),J.matrix.decompose(J.position,J.quaternion,J.scale),J.updateMatrixWorld(!0),J.projectionMatrix.copy(oe.projectionMatrix),J.projectionMatrixInverse.copy(oe.projectionMatrixInverse),J.isPerspectiveCamera&&(J.fov=Ir*2*Math.atan(1/J.projectionMatrix.elements[5]),J.zoom=1)}this.getCamera=function(){return T},this.getFoveation=function(){if(!(h===null&&f===null))return c},this.setFoveation=function(J){c=J,h!==null&&(h.fixedFoveation=J),f!==null&&f.fixedFoveation!==void 0&&(f.fixedFoveation=J)},this.hasDepthSensing=function(){return w.texture!==null},this.getDepthSensingMesh=function(){return w.getMesh(T)};let Se=null;function Ge(J,oe){if(d=oe.getViewerPose(l||s),g=oe,d!==null){const we=d.views;f!==null&&(e.setRenderTargetFramebuffer(P,f.framebuffer),e.setRenderTarget(P));let le=!1;we.length!==T.cameras.length&&(T.cameras.length=0,le=!0);for(let Ce=0;Ce<we.length;Ce++){const Pt=we[Ce];let wt=null;if(f!==null)wt=f.getViewport(Pt);else{const N=u.getViewSubImage(h,Pt);wt=N.viewport,Ce===0&&(e.setRenderTargetTextures(P,N.colorTexture,N.depthStencilTexture),e.setRenderTarget(P))}let Ye=M[Ce];Ye===void 0&&(Ye=new nn,Ye.layers.enable(Ce),Ye.viewport=new it,M[Ce]=Ye),Ye.matrix.fromArray(Pt.transform.matrix),Ye.matrix.decompose(Ye.position,Ye.quaternion,Ye.scale),Ye.projectionMatrix.fromArray(Pt.projectionMatrix),Ye.projectionMatrixInverse.copy(Ye.projectionMatrix).invert(),Ye.viewport.set(wt.x,wt.y,wt.width,wt.height),Ce===0&&(T.matrix.copy(Ye.matrix),T.matrix.decompose(T.position,T.quaternion,T.scale)),le===!0&&T.cameras.push(Ye)}const Le=i.enabledFeatures;if(Le&&Le.includes("depth-sensing")&&i.depthUsage=="gpu-optimized"&&u){const Ce=u.getDepthInformation(we[0]);Ce&&Ce.isValid&&Ce.texture&&w.init(e,Ce,i.renderState)}}for(let we=0;we<E.length;we++){const le=S[we],Le=E[we];le!==null&&Le!==void 0&&Le.update(le,oe,l||s)}Se&&Se(J,oe),oe.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:oe}),g=null}const ht=new Wh;ht.setAnimationLoop(Ge),this.setAnimationLoop=function(J){Se=J},this.dispose=function(){}}}const Ui=new It,Cy=new He;function Dy(r,e){function t(y,m){y.matrixAutoUpdate===!0&&y.updateMatrix(),m.value.copy(y.matrix)}function n(y,m){m.color.getRGB(y.fogColor.value,Nh(r)),m.isFog?(y.fogNear.value=m.near,y.fogFar.value=m.far):m.isFogExp2&&(y.fogDensity.value=m.density)}function i(y,m,P,E,S){m.isMeshBasicMaterial||m.isMeshLambertMaterial?o(y,m):m.isMeshToonMaterial?(o(y,m),u(y,m)):m.isMeshPhongMaterial?(o(y,m),d(y,m)):m.isMeshStandardMaterial?(o(y,m),h(y,m),m.isMeshPhysicalMaterial&&f(y,m,S)):m.isMeshMatcapMaterial?(o(y,m),g(y,m)):m.isMeshDepthMaterial?o(y,m):m.isMeshDistanceMaterial?(o(y,m),w(y,m)):m.isMeshNormalMaterial?o(y,m):m.isLineBasicMaterial?(s(y,m),m.isLineDashedMaterial&&a(y,m)):m.isPointsMaterial?c(y,m,P,E):m.isSpriteMaterial?l(y,m):m.isShadowMaterial?(y.color.value.copy(m.color),y.opacity.value=m.opacity):m.isShaderMaterial&&(m.uniformsNeedUpdate=!1)}function o(y,m){y.opacity.value=m.opacity,m.color&&y.diffuse.value.copy(m.color),m.emissive&&y.emissive.value.copy(m.emissive).multiplyScalar(m.emissiveIntensity),m.map&&(y.map.value=m.map,t(m.map,y.mapTransform)),m.alphaMap&&(y.alphaMap.value=m.alphaMap,t(m.alphaMap,y.alphaMapTransform)),m.bumpMap&&(y.bumpMap.value=m.bumpMap,t(m.bumpMap,y.bumpMapTransform),y.bumpScale.value=m.bumpScale,m.side===dn&&(y.bumpScale.value*=-1)),m.normalMap&&(y.normalMap.value=m.normalMap,t(m.normalMap,y.normalMapTransform),y.normalScale.value.copy(m.normalScale),m.side===dn&&y.normalScale.value.negate()),m.displacementMap&&(y.displacementMap.value=m.displacementMap,t(m.displacementMap,y.displacementMapTransform),y.displacementScale.value=m.displacementScale,y.displacementBias.value=m.displacementBias),m.emissiveMap&&(y.emissiveMap.value=m.emissiveMap,t(m.emissiveMap,y.emissiveMapTransform)),m.specularMap&&(y.specularMap.value=m.specularMap,t(m.specularMap,y.specularMapTransform)),m.alphaTest>0&&(y.alphaTest.value=m.alphaTest);const P=e.get(m),E=P.envMap,S=P.envMapRotation;E&&(y.envMap.value=E,Ui.copy(S),Ui.x*=-1,Ui.y*=-1,Ui.z*=-1,E.isCubeTexture&&E.isRenderTargetTexture===!1&&(Ui.y*=-1,Ui.z*=-1),y.envMapRotation.value.setFromMatrix4(Cy.makeRotationFromEuler(Ui)),y.flipEnvMap.value=E.isCubeTexture&&E.isRenderTargetTexture===!1?-1:1,y.reflectivity.value=m.reflectivity,y.ior.value=m.ior,y.refractionRatio.value=m.refractionRatio),m.lightMap&&(y.lightMap.value=m.lightMap,y.lightMapIntensity.value=m.lightMapIntensity,t(m.lightMap,y.lightMapTransform)),m.aoMap&&(y.aoMap.value=m.aoMap,y.aoMapIntensity.value=m.aoMapIntensity,t(m.aoMap,y.aoMapTransform))}function s(y,m){y.diffuse.value.copy(m.color),y.opacity.value=m.opacity,m.map&&(y.map.value=m.map,t(m.map,y.mapTransform))}function a(y,m){y.dashSize.value=m.dashSize,y.totalSize.value=m.dashSize+m.gapSize,y.scale.value=m.scale}function c(y,m,P,E){y.diffuse.value.copy(m.color),y.opacity.value=m.opacity,y.size.value=m.size*P,y.scale.value=E*.5,m.map&&(y.map.value=m.map,t(m.map,y.uvTransform)),m.alphaMap&&(y.alphaMap.value=m.alphaMap,t(m.alphaMap,y.alphaMapTransform)),m.alphaTest>0&&(y.alphaTest.value=m.alphaTest)}function l(y,m){y.diffuse.value.copy(m.color),y.opacity.value=m.opacity,y.rotation.value=m.rotation,m.map&&(y.map.value=m.map,t(m.map,y.mapTransform)),m.alphaMap&&(y.alphaMap.value=m.alphaMap,t(m.alphaMap,y.alphaMapTransform)),m.alphaTest>0&&(y.alphaTest.value=m.alphaTest)}function d(y,m){y.specular.value.copy(m.specular),y.shininess.value=Math.max(m.shininess,1e-4)}function u(y,m){m.gradientMap&&(y.gradientMap.value=m.gradientMap)}function h(y,m){y.metalness.value=m.metalness,m.metalnessMap&&(y.metalnessMap.value=m.metalnessMap,t(m.metalnessMap,y.metalnessMapTransform)),y.roughness.value=m.roughness,m.roughnessMap&&(y.roughnessMap.value=m.roughnessMap,t(m.roughnessMap,y.roughnessMapTransform)),m.envMap&&(y.envMapIntensity.value=m.envMapIntensity)}function f(y,m,P){y.ior.value=m.ior,m.sheen>0&&(y.sheenColor.value.copy(m.sheenColor).multiplyScalar(m.sheen),y.sheenRoughness.value=m.sheenRoughness,m.sheenColorMap&&(y.sheenColorMap.value=m.sheenColorMap,t(m.sheenColorMap,y.sheenColorMapTransform)),m.sheenRoughnessMap&&(y.sheenRoughnessMap.value=m.sheenRoughnessMap,t(m.sheenRoughnessMap,y.sheenRoughnessMapTransform))),m.clearcoat>0&&(y.clearcoat.value=m.clearcoat,y.clearcoatRoughness.value=m.clearcoatRoughness,m.clearcoatMap&&(y.clearcoatMap.value=m.clearcoatMap,t(m.clearcoatMap,y.clearcoatMapTransform)),m.clearcoatRoughnessMap&&(y.clearcoatRoughnessMap.value=m.clearcoatRoughnessMap,t(m.clearcoatRoughnessMap,y.clearcoatRoughnessMapTransform)),m.clearcoatNormalMap&&(y.clearcoatNormalMap.value=m.clearcoatNormalMap,t(m.clearcoatNormalMap,y.clearcoatNormalMapTransform),y.clearcoatNormalScale.value.copy(m.clearcoatNormalScale),m.side===dn&&y.clearcoatNormalScale.value.negate())),m.dispersion>0&&(y.dispersion.value=m.dispersion),m.iridescence>0&&(y.iridescence.value=m.iridescence,y.iridescenceIOR.value=m.iridescenceIOR,y.iridescenceThicknessMinimum.value=m.iridescenceThicknessRange[0],y.iridescenceThicknessMaximum.value=m.iridescenceThicknessRange[1],m.iridescenceMap&&(y.iridescenceMap.value=m.iridescenceMap,t(m.iridescenceMap,y.iridescenceMapTransform)),m.iridescenceThicknessMap&&(y.iridescenceThicknessMap.value=m.iridescenceThicknessMap,t(m.iridescenceThicknessMap,y.iridescenceThicknessMapTransform))),m.transmission>0&&(y.transmission.value=m.transmission,y.transmissionSamplerMap.value=P.texture,y.transmissionSamplerSize.value.set(P.width,P.height),m.transmissionMap&&(y.transmissionMap.value=m.transmissionMap,t(m.transmissionMap,y.transmissionMapTransform)),y.thickness.value=m.thickness,m.thicknessMap&&(y.thicknessMap.value=m.thicknessMap,t(m.thicknessMap,y.thicknessMapTransform)),y.attenuationDistance.value=m.attenuationDistance,y.attenuationColor.value.copy(m.attenuationColor)),m.anisotropy>0&&(y.anisotropyVector.value.set(m.anisotropy*Math.cos(m.anisotropyRotation),m.anisotropy*Math.sin(m.anisotropyRotation)),m.anisotropyMap&&(y.anisotropyMap.value=m.anisotropyMap,t(m.anisotropyMap,y.anisotropyMapTransform))),y.specularIntensity.value=m.specularIntensity,y.specularColor.value.copy(m.specularColor),m.specularColorMap&&(y.specularColorMap.value=m.specularColorMap,t(m.specularColorMap,y.specularColorMapTransform)),m.specularIntensityMap&&(y.specularIntensityMap.value=m.specularIntensityMap,t(m.specularIntensityMap,y.specularIntensityMapTransform))}function g(y,m){m.matcap&&(y.matcap.value=m.matcap)}function w(y,m){const P=e.get(m).light;y.referencePosition.value.setFromMatrixPosition(P.matrixWorld),y.nearDistance.value=P.shadow.camera.near,y.farDistance.value=P.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:i}}function _y(r,e,t,n){let i={},o={},s=[];const a=r.getParameter(r.MAX_UNIFORM_BUFFER_BINDINGS);function c(P,E){const S=E.program;n.uniformBlockBinding(P,S)}function l(P,E){let S=i[P.id];S===void 0&&(g(P),S=d(P),i[P.id]=S,P.addEventListener("dispose",y));const D=E.program;n.updateUBOMapping(P,D);const H=e.render.frame;o[P.id]!==H&&(h(P),o[P.id]=H)}function d(P){const E=u();P.__bindingPointIndex=E;const S=r.createBuffer(),D=P.__size,H=P.usage;return r.bindBuffer(r.UNIFORM_BUFFER,S),r.bufferData(r.UNIFORM_BUFFER,D,H),r.bindBuffer(r.UNIFORM_BUFFER,null),r.bindBufferBase(r.UNIFORM_BUFFER,E,S),S}function u(){for(let P=0;P<a;P++)if(s.indexOf(P)===-1)return s.push(P),P;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function h(P){const E=i[P.id],S=P.uniforms,D=P.__cache;r.bindBuffer(r.UNIFORM_BUFFER,E);for(let H=0,I=S.length;H<I;H++){const z=Array.isArray(S[H])?S[H]:[S[H]];for(let M=0,T=z.length;M<T;M++){const C=z[M];if(f(C,H,M,D)===!0){const B=C.__offset,k=Array.isArray(C.value)?C.value:[C.value];let Y=0;for(let ee=0;ee<k.length;ee++){const q=k[ee],re=w(q);typeof q=="number"||typeof q=="boolean"?(C.__data[0]=q,r.bufferSubData(r.UNIFORM_BUFFER,B+Y,C.__data)):q.isMatrix3?(C.__data[0]=q.elements[0],C.__data[1]=q.elements[1],C.__data[2]=q.elements[2],C.__data[3]=0,C.__data[4]=q.elements[3],C.__data[5]=q.elements[4],C.__data[6]=q.elements[5],C.__data[7]=0,C.__data[8]=q.elements[6],C.__data[9]=q.elements[7],C.__data[10]=q.elements[8],C.__data[11]=0):(q.toArray(C.__data,Y),Y+=re.storage/Float32Array.BYTES_PER_ELEMENT)}r.bufferSubData(r.UNIFORM_BUFFER,B,C.__data)}}}r.bindBuffer(r.UNIFORM_BUFFER,null)}function f(P,E,S,D){const H=P.value,I=E+"_"+S;if(D[I]===void 0)return typeof H=="number"||typeof H=="boolean"?D[I]=H:D[I]=H.clone(),!0;{const z=D[I];if(typeof H=="number"||typeof H=="boolean"){if(z!==H)return D[I]=H,!0}else if(z.equals(H)===!1)return z.copy(H),!0}return!1}function g(P){const E=P.uniforms;let S=0;const D=16;for(let I=0,z=E.length;I<z;I++){const M=Array.isArray(E[I])?E[I]:[E[I]];for(let T=0,C=M.length;T<C;T++){const B=M[T],k=Array.isArray(B.value)?B.value:[B.value];for(let Y=0,ee=k.length;Y<ee;Y++){const q=k[Y],re=w(q),Z=S%D,ce=Z%re.boundary,me=Z+ce;S+=ce,me!==0&&D-me<re.storage&&(S+=D-me),B.__data=new Float32Array(re.storage/Float32Array.BYTES_PER_ELEMENT),B.__offset=S,S+=re.storage}}}const H=S%D;return H>0&&(S+=D-H),P.__size=S,P.__cache={},this}function w(P){const E={boundary:0,storage:0};return typeof P=="number"||typeof P=="boolean"?(E.boundary=4,E.storage=4):P.isVector2?(E.boundary=8,E.storage=8):P.isVector3||P.isColor?(E.boundary=16,E.storage=12):P.isVector4?(E.boundary=16,E.storage=16):P.isMatrix3?(E.boundary=48,E.storage=48):P.isMatrix4?(E.boundary=64,E.storage=64):P.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",P),E}function y(P){const E=P.target;E.removeEventListener("dispose",y);const S=s.indexOf(E.__bindingPointIndex);s.splice(S,1),r.deleteBuffer(i[E.id]),delete i[E.id],delete o[E.id]}function m(){for(const P in i)r.deleteBuffer(i[P]);s=[],i={},o={}}return{bind:c,update:l,dispose:m}}class zy{constructor(e={}){const{canvas:t=_f(),context:n=null,depth:i=!0,stencil:o=!1,alpha:s=!1,antialias:a=!1,premultipliedAlpha:c=!0,preserveDrawingBuffer:l=!1,powerPreference:d="default",failIfMajorPerformanceCaveat:u=!1,reverseDepthBuffer:h=!1}=e;this.isWebGLRenderer=!0;let f;if(n!==null){if(typeof WebGLRenderingContext<"u"&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");f=n.getContextAttributes().alpha}else f=s;const g=new Uint32Array(4),w=new Int32Array(4);let y=null,m=null;const P=[],E=[];this.domElement=t,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.toneMapping=Li,this.toneMappingExposure=1,this.transmissionResolutionScale=1;const S=this;let D=!1;this._outputColorSpace=Gt;let H=0,I=0,z=null,M=-1,T=null;const C=new it,B=new it;let k=null;const Y=new Ue(0);let ee=0,q=t.width,re=t.height,Z=1,ce=null,me=null;const Se=new it(0,0,q,re),Ge=new it(0,0,q,re);let ht=!1;const J=new Yl;let oe=!1,we=!1;const le=new He,Le=new He,nt=new A,Ce=new it,Pt={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let wt=!1;function Ye(){return z===null?Z:1}let N=n;function yn(v,j){return t.getContext(v,j)}try{const v={alpha:!0,depth:i,stencil:o,antialias:a,premultipliedAlpha:c,preserveDrawingBuffer:l,powerPreference:d,failIfMajorPerformanceCaveat:u};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${Cl}`),t.addEventListener("webglcontextlost",$,!1),t.addEventListener("webglcontextrestored",pe,!1),t.addEventListener("webglcontextcreationerror",he,!1),N===null){const j="webgl2";if(N=yn(j,v),N===null)throw yn(j)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(v){throw console.error("THREE.WebGLRenderer: "+v.message),v}let $e,qe,Me,mt,Te,R,x,V,Q,te,K,xe,de,Ae,Ie,ne,be,Ne,_e,ye,Ke,Ve,ft,U;function ue(){$e=new Z3(N),$e.init(),Ve=new Ay(N,$e),qe=new F3(N,$e,e,Ve),Me=new Py(N,$e),qe.reverseDepthBuffer&&h&&Me.buffers.depth.setReversed(!0),mt=new K3(N),Te=new fy,R=new Ly(N,$e,Me,Te,qe,Ve,mt),x=new X3(S),V=new G3(S),Q=new n2(N),ft=new U3(N,Q),te=new Y3(N,Q,mt,ft),K=new Q3(N,te,Q,mt),_e=new J3(N,qe,R),ne=new V3(Te),xe=new py(S,x,V,$e,qe,ft,ne),de=new Dy(S,Te),Ae=new by,Ie=new Ty($e),Ne=new z3(S,x,V,Me,K,f,c),be=new Ey(S,K,qe),U=new _y(N,mt,qe,Me),ye=new j3(N,$e,mt),Ke=new q3(N,$e,mt),mt.programs=xe.programs,S.capabilities=qe,S.extensions=$e,S.properties=Te,S.renderLists=Ae,S.shadowMap=be,S.state=Me,S.info=mt}ue();const G=new Oy(S,N);this.xr=G,this.getContext=function(){return N},this.getContextAttributes=function(){return N.getContextAttributes()},this.forceContextLoss=function(){const v=$e.get("WEBGL_lose_context");v&&v.loseContext()},this.forceContextRestore=function(){const v=$e.get("WEBGL_lose_context");v&&v.restoreContext()},this.getPixelRatio=function(){return Z},this.setPixelRatio=function(v){v!==void 0&&(Z=v,this.setSize(q,re,!1))},this.getSize=function(v){return v.set(q,re)},this.setSize=function(v,j,X=!0){if(G.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}q=v,re=j,t.width=Math.floor(v*Z),t.height=Math.floor(j*Z),X===!0&&(t.style.width=v+"px",t.style.height=j+"px"),this.setViewport(0,0,v,j)},this.getDrawingBufferSize=function(v){return v.set(q*Z,re*Z).floor()},this.setDrawingBufferSize=function(v,j,X){q=v,re=j,Z=X,t.width=Math.floor(v*X),t.height=Math.floor(j*X),this.setViewport(0,0,v,j)},this.getCurrentViewport=function(v){return v.copy(C)},this.getViewport=function(v){return v.copy(Se)},this.setViewport=function(v,j,X,W){v.isVector4?Se.set(v.x,v.y,v.z,v.w):Se.set(v,j,X,W),Me.viewport(C.copy(Se).multiplyScalar(Z).round())},this.getScissor=function(v){return v.copy(Ge)},this.setScissor=function(v,j,X,W){v.isVector4?Ge.set(v.x,v.y,v.z,v.w):Ge.set(v,j,X,W),Me.scissor(B.copy(Ge).multiplyScalar(Z).round())},this.getScissorTest=function(){return ht},this.setScissorTest=function(v){Me.setScissorTest(ht=v)},this.setOpaqueSort=function(v){ce=v},this.setTransparentSort=function(v){me=v},this.getClearColor=function(v){return v.copy(Ne.getClearColor())},this.setClearColor=function(){Ne.setClearColor(...arguments)},this.getClearAlpha=function(){return Ne.getClearAlpha()},this.setClearAlpha=function(){Ne.setClearAlpha(...arguments)},this.clear=function(v=!0,j=!0,X=!0){let W=0;if(v){let F=!1;if(z!==null){const ie=z.texture.format;F=ie===Vl||ie===Fl||ie===jl}if(F){const ie=z.texture.type,ae=ie===Gn||ie===Gi||ie===go||ie===wo||ie===_l||ie===zl,fe=Ne.getClearColor(),ge=Ne.getClearAlpha(),ze=fe.r,De=fe.g,Ee=fe.b;ae?(g[0]=ze,g[1]=De,g[2]=Ee,g[3]=ge,N.clearBufferuiv(N.COLOR,0,g)):(w[0]=ze,w[1]=De,w[2]=Ee,w[3]=ge,N.clearBufferiv(N.COLOR,0,w))}else W|=N.COLOR_BUFFER_BIT}j&&(W|=N.DEPTH_BUFFER_BIT),X&&(W|=N.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),N.clear(W)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",$,!1),t.removeEventListener("webglcontextrestored",pe,!1),t.removeEventListener("webglcontextcreationerror",he,!1),Ne.dispose(),Ae.dispose(),Ie.dispose(),Te.dispose(),x.dispose(),V.dispose(),K.dispose(),ft.dispose(),U.dispose(),xe.dispose(),G.dispose(),G.removeEventListener("sessionstart",gd),G.removeEventListener("sessionend",wd),Ii.stop()};function $(v){v.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),D=!0}function pe(){console.log("THREE.WebGLRenderer: Context Restored."),D=!1;const v=mt.autoReset,j=be.enabled,X=be.autoUpdate,W=be.needsUpdate,F=be.type;ue(),mt.autoReset=v,be.enabled=j,be.autoUpdate=X,be.needsUpdate=W,be.type=F}function he(v){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",v.statusMessage)}function Fe(v){const j=v.target;j.removeEventListener("dispose",Fe),St(j)}function St(v){Zt(v),Te.remove(v)}function Zt(v){const j=Te.get(v).programs;j!==void 0&&(j.forEach(function(X){xe.releaseProgram(X)}),v.isShaderMaterial&&xe.releaseShaderCache(v))}this.renderBufferDirect=function(v,j,X,W,F,ie){j===null&&(j=Pt);const ae=F.isMesh&&F.matrixWorld.determinant()<0,fe=Mp(v,j,X,W,F);Me.setMaterial(W,ae);let ge=X.index,ze=1;if(W.wireframe===!0){if(ge=te.getWireframeAttribute(X),ge===void 0)return;ze=2}const De=X.drawRange,Ee=X.attributes.position;let et=De.start*ze,rt=(De.start+De.count)*ze;ie!==null&&(et=Math.max(et,ie.start*ze),rt=Math.min(rt,(ie.start+ie.count)*ze)),ge!==null?(et=Math.max(et,0),rt=Math.min(rt,ge.count)):Ee!=null&&(et=Math.max(et,0),rt=Math.min(rt,Ee.count));const Lt=rt-et;if(Lt<0||Lt===1/0)return;ft.setup(F,W,fe,X,ge);let Mt,tt=ye;if(ge!==null&&(Mt=Q.get(ge),tt=Ke,tt.setIndex(Mt)),F.isMesh)W.wireframe===!0?(Me.setLineWidth(W.wireframeLinewidth*Ye()),tt.setMode(N.LINES)):tt.setMode(N.TRIANGLES);else if(F.isLine){let Re=W.linewidth;Re===void 0&&(Re=1),Me.setLineWidth(Re*Ye()),F.isLineSegments?tt.setMode(N.LINES):F.isLineLoop?tt.setMode(N.LINE_LOOP):tt.setMode(N.LINE_STRIP)}else F.isPoints?tt.setMode(N.POINTS):F.isSprite&&tt.setMode(N.TRIANGLES);if(F.isBatchedMesh)if(F._multiDrawInstances!==null)Hs("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),tt.renderMultiDrawInstances(F._multiDrawStarts,F._multiDrawCounts,F._multiDrawCount,F._multiDrawInstances);else if($e.get("WEBGL_multi_draw"))tt.renderMultiDraw(F._multiDrawStarts,F._multiDrawCounts,F._multiDrawCount);else{const Re=F._multiDrawStarts,Wt=F._multiDrawCounts,ot=F._multiDrawCount,Rn=ge?Q.get(ge).bytesPerElement:1,Qi=Te.get(W).currentProgram.getUniforms();for(let hn=0;hn<ot;hn++)Qi.setValue(N,"_gl_DrawID",hn),tt.render(Re[hn]/Rn,Wt[hn])}else if(F.isInstancedMesh)tt.renderInstances(et,Lt,F.count);else if(X.isInstancedBufferGeometry){const Re=X._maxInstanceCount!==void 0?X._maxInstanceCount:1/0,Wt=Math.min(X.instanceCount,Re);tt.renderInstances(et,Lt,Wt)}else tt.render(et,Lt)};function at(v,j,X){v.transparent===!0&&v.side===Wn&&v.forceSinglePass===!1?(v.side=dn,v.needsUpdate=!0,_o(v,j,X),v.side=ci,v.needsUpdate=!0,_o(v,j,X),v.side=Wn):_o(v,j,X)}this.compile=function(v,j,X=null){X===null&&(X=v),m=Ie.get(X),m.init(j),E.push(m),X.traverseVisible(function(F){F.isLight&&F.layers.test(j.layers)&&(m.pushLight(F),F.castShadow&&m.pushShadow(F))}),v!==X&&v.traverseVisible(function(F){F.isLight&&F.layers.test(j.layers)&&(m.pushLight(F),F.castShadow&&m.pushShadow(F))}),m.setupLights();const W=new Set;return v.traverse(function(F){if(!(F.isMesh||F.isPoints||F.isLine||F.isSprite))return;const ie=F.material;if(ie)if(Array.isArray(ie))for(let ae=0;ae<ie.length;ae++){const fe=ie[ae];at(fe,X,F),W.add(fe)}else at(ie,X,F),W.add(ie)}),m=E.pop(),W},this.compileAsync=function(v,j,X=null){const W=this.compile(v,j,X);return new Promise(F=>{function ie(){if(W.forEach(function(ae){Te.get(ae).currentProgram.isReady()&&W.delete(ae)}),W.size===0){F(v);return}setTimeout(ie,10)}$e.get("KHR_parallel_shader_compile")!==null?ie():setTimeout(ie,10)})};let En=null;function Kn(v){En&&En(v)}function gd(){Ii.stop()}function wd(){Ii.start()}const Ii=new Wh;Ii.setAnimationLoop(Kn),typeof self<"u"&&Ii.setContext(self),this.setAnimationLoop=function(v){En=v,G.setAnimationLoop(v),v===null?Ii.stop():Ii.start()},G.addEventListener("sessionstart",gd),G.addEventListener("sessionend",wd),this.render=function(v,j){if(j!==void 0&&j.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(D===!0)return;if(v.matrixWorldAutoUpdate===!0&&v.updateMatrixWorld(),j.parent===null&&j.matrixWorldAutoUpdate===!0&&j.updateMatrixWorld(),G.enabled===!0&&G.isPresenting===!0&&(G.cameraAutoUpdate===!0&&G.updateCamera(j),j=G.getCamera()),v.isScene===!0&&v.onBeforeRender(S,v,j,z),m=Ie.get(v,E.length),m.init(j),E.push(m),Le.multiplyMatrices(j.projectionMatrix,j.matrixWorldInverse),J.setFromProjectionMatrix(Le),we=this.localClippingEnabled,oe=ne.init(this.clippingPlanes,we),y=Ae.get(v,P.length),y.init(),P.push(y),G.enabled===!0&&G.isPresenting===!0){const ie=S.xr.getDepthSensingMesh();ie!==null&&ua(ie,j,-1/0,S.sortObjects)}ua(v,j,0,S.sortObjects),y.finish(),S.sortObjects===!0&&y.sort(ce,me),wt=G.enabled===!1||G.isPresenting===!1||G.hasDepthSensing()===!1,wt&&Ne.addToRenderList(y,v),this.info.render.frame++,oe===!0&&ne.beginShadows();const X=m.state.shadowsArray;be.render(X,v,j),oe===!0&&ne.endShadows(),this.info.autoReset===!0&&this.info.reset();const W=y.opaque,F=y.transmissive;if(m.setupLights(),j.isArrayCamera){const ie=j.cameras;if(F.length>0)for(let ae=0,fe=ie.length;ae<fe;ae++){const ge=ie[ae];vd(W,F,v,ge)}wt&&Ne.render(v);for(let ae=0,fe=ie.length;ae<fe;ae++){const ge=ie[ae];xd(y,v,ge,ge.viewport)}}else F.length>0&&vd(W,F,v,j),wt&&Ne.render(v),xd(y,v,j);z!==null&&I===0&&(R.updateMultisampleRenderTarget(z),R.updateRenderTargetMipmap(z)),v.isScene===!0&&v.onAfterRender(S,v,j),ft.resetDefaultState(),M=-1,T=null,E.pop(),E.length>0?(m=E[E.length-1],oe===!0&&ne.setGlobalState(S.clippingPlanes,m.state.camera)):m=null,P.pop(),P.length>0?y=P[P.length-1]:y=null};function ua(v,j,X,W){if(v.visible===!1)return;if(v.layers.test(j.layers)){if(v.isGroup)X=v.renderOrder;else if(v.isLOD)v.autoUpdate===!0&&v.update(j);else if(v.isLight)m.pushLight(v),v.castShadow&&m.pushShadow(v);else if(v.isSprite){if(!v.frustumCulled||J.intersectsSprite(v)){W&&Ce.setFromMatrixPosition(v.matrixWorld).applyMatrix4(Le);const ae=K.update(v),fe=v.material;fe.visible&&y.push(v,ae,fe,X,Ce.z,null)}}else if((v.isMesh||v.isLine||v.isPoints)&&(!v.frustumCulled||J.intersectsObject(v))){const ae=K.update(v),fe=v.material;if(W&&(v.boundingSphere!==void 0?(v.boundingSphere===null&&v.computeBoundingSphere(),Ce.copy(v.boundingSphere.center)):(ae.boundingSphere===null&&ae.computeBoundingSphere(),Ce.copy(ae.boundingSphere.center)),Ce.applyMatrix4(v.matrixWorld).applyMatrix4(Le)),Array.isArray(fe)){const ge=ae.groups;for(let ze=0,De=ge.length;ze<De;ze++){const Ee=ge[ze],et=fe[Ee.materialIndex];et&&et.visible&&y.push(v,ae,et,X,Ce.z,Ee)}}else fe.visible&&y.push(v,ae,fe,X,Ce.z,null)}}const ie=v.children;for(let ae=0,fe=ie.length;ae<fe;ae++)ua(ie[ae],j,X,W)}function xd(v,j,X,W){const F=v.opaque,ie=v.transmissive,ae=v.transparent;m.setupLightsView(X),oe===!0&&ne.setGlobalState(S.clippingPlanes,X),W&&Me.viewport(C.copy(W)),F.length>0&&Do(F,j,X),ie.length>0&&Do(ie,j,X),ae.length>0&&Do(ae,j,X),Me.buffers.depth.setTest(!0),Me.buffers.depth.setMask(!0),Me.buffers.color.setMask(!0),Me.setPolygonOffset(!1)}function vd(v,j,X,W){if((X.isScene===!0?X.overrideMaterial:null)!==null)return;m.state.transmissionRenderTarget[W.id]===void 0&&(m.state.transmissionRenderTarget[W.id]=new Zi(1,1,{generateMipmaps:!0,type:$e.has("EXT_color_buffer_half_float")||$e.has("EXT_color_buffer_float")?No:Gn,minFilter:oi,samples:4,stencilBuffer:o,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:Qe.workingColorSpace}));const ie=m.state.transmissionRenderTarget[W.id],ae=W.viewport||C;ie.setSize(ae.z*S.transmissionResolutionScale,ae.w*S.transmissionResolutionScale);const fe=S.getRenderTarget();S.setRenderTarget(ie),S.getClearColor(Y),ee=S.getClearAlpha(),ee<1&&S.setClearColor(16777215,.5),S.clear(),wt&&Ne.render(X);const ge=S.toneMapping;S.toneMapping=Li;const ze=W.viewport;if(W.viewport!==void 0&&(W.viewport=void 0),m.setupLightsView(W),oe===!0&&ne.setGlobalState(S.clippingPlanes,W),Do(v,X,W),R.updateMultisampleRenderTarget(ie),R.updateRenderTargetMipmap(ie),$e.has("WEBGL_multisampled_render_to_texture")===!1){let De=!1;for(let Ee=0,et=j.length;Ee<et;Ee++){const rt=j[Ee],Lt=rt.object,Mt=rt.geometry,tt=rt.material,Re=rt.group;if(tt.side===Wn&&Lt.layers.test(W.layers)){const Wt=tt.side;tt.side=dn,tt.needsUpdate=!0,Td(Lt,X,W,Mt,tt,Re),tt.side=Wt,tt.needsUpdate=!0,De=!0}}De===!0&&(R.updateMultisampleRenderTarget(ie),R.updateRenderTargetMipmap(ie))}S.setRenderTarget(fe),S.setClearColor(Y,ee),ze!==void 0&&(W.viewport=ze),S.toneMapping=ge}function Do(v,j,X){const W=j.isScene===!0?j.overrideMaterial:null;for(let F=0,ie=v.length;F<ie;F++){const ae=v[F],fe=ae.object,ge=ae.geometry,ze=ae.group;let De=ae.material;De.allowOverride===!0&&W!==null&&(De=W),fe.layers.test(X.layers)&&Td(fe,j,X,ge,De,ze)}}function Td(v,j,X,W,F,ie){v.onBeforeRender(S,j,X,W,F,ie),v.modelViewMatrix.multiplyMatrices(X.matrixWorldInverse,v.matrixWorld),v.normalMatrix.getNormalMatrix(v.modelViewMatrix),F.onBeforeRender(S,j,X,W,v,ie),F.transparent===!0&&F.side===Wn&&F.forceSinglePass===!1?(F.side=dn,F.needsUpdate=!0,S.renderBufferDirect(X,j,W,F,v,ie),F.side=ci,F.needsUpdate=!0,S.renderBufferDirect(X,j,W,F,v,ie),F.side=Wn):S.renderBufferDirect(X,j,W,F,v,ie),v.onAfterRender(S,j,X,W,F,ie)}function _o(v,j,X){j.isScene!==!0&&(j=Pt);const W=Te.get(v),F=m.state.lights,ie=m.state.shadowsArray,ae=F.state.version,fe=xe.getParameters(v,F.state,ie,j,X),ge=xe.getProgramCacheKey(fe);let ze=W.programs;W.environment=v.isMeshStandardMaterial?j.environment:null,W.fog=j.fog,W.envMap=(v.isMeshStandardMaterial?V:x).get(v.envMap||W.environment),W.envMapRotation=W.environment!==null&&v.envMap===null?j.environmentRotation:v.envMapRotation,ze===void 0&&(v.addEventListener("dispose",Fe),ze=new Map,W.programs=ze);let De=ze.get(ge);if(De!==void 0){if(W.currentProgram===De&&W.lightsStateVersion===ae)return Md(v,fe),De}else fe.uniforms=xe.getUniforms(v),v.onBeforeCompile(fe,S),De=xe.acquireProgram(fe,ge),ze.set(ge,De),W.uniforms=fe.uniforms;const Ee=W.uniforms;return(!v.isShaderMaterial&&!v.isRawShaderMaterial||v.clipping===!0)&&(Ee.clippingPlanes=ne.uniform),Md(v,fe),W.needsLights=Rp(v),W.lightsStateVersion=ae,W.needsLights&&(Ee.ambientLightColor.value=F.state.ambient,Ee.lightProbe.value=F.state.probe,Ee.directionalLights.value=F.state.directional,Ee.directionalLightShadows.value=F.state.directionalShadow,Ee.spotLights.value=F.state.spot,Ee.spotLightShadows.value=F.state.spotShadow,Ee.rectAreaLights.value=F.state.rectArea,Ee.ltc_1.value=F.state.rectAreaLTC1,Ee.ltc_2.value=F.state.rectAreaLTC2,Ee.pointLights.value=F.state.point,Ee.pointLightShadows.value=F.state.pointShadow,Ee.hemisphereLights.value=F.state.hemi,Ee.directionalShadowMap.value=F.state.directionalShadowMap,Ee.directionalShadowMatrix.value=F.state.directionalShadowMatrix,Ee.spotShadowMap.value=F.state.spotShadowMap,Ee.spotLightMatrix.value=F.state.spotLightMatrix,Ee.spotLightMap.value=F.state.spotLightMap,Ee.pointShadowMap.value=F.state.pointShadowMap,Ee.pointShadowMatrix.value=F.state.pointShadowMatrix),W.currentProgram=De,W.uniformsList=null,De}function Sd(v){if(v.uniformsList===null){const j=v.currentProgram.getUniforms();v.uniformsList=Is.seqWithValue(j.seq,v.uniforms)}return v.uniformsList}function Md(v,j){const X=Te.get(v);X.outputColorSpace=j.outputColorSpace,X.batching=j.batching,X.batchingColor=j.batchingColor,X.instancing=j.instancing,X.instancingColor=j.instancingColor,X.instancingMorph=j.instancingMorph,X.skinning=j.skinning,X.morphTargets=j.morphTargets,X.morphNormals=j.morphNormals,X.morphColors=j.morphColors,X.morphTargetsCount=j.morphTargetsCount,X.numClippingPlanes=j.numClippingPlanes,X.numIntersection=j.numClipIntersection,X.vertexAlphas=j.vertexAlphas,X.vertexTangents=j.vertexTangents,X.toneMapping=j.toneMapping}function Mp(v,j,X,W,F){j.isScene!==!0&&(j=Pt),R.resetTextureUnits();const ie=j.fog,ae=W.isMeshStandardMaterial?j.environment:null,fe=z===null?S.outputColorSpace:z.isXRRenderTarget===!0?z.texture.colorSpace:an,ge=(W.isMeshStandardMaterial?V:x).get(W.envMap||ae),ze=W.vertexColors===!0&&!!X.attributes.color&&X.attributes.color.itemSize===4,De=!!X.attributes.tangent&&(!!W.normalMap||W.anisotropy>0),Ee=!!X.morphAttributes.position,et=!!X.morphAttributes.normal,rt=!!X.morphAttributes.color;let Lt=Li;W.toneMapped&&(z===null||z.isXRRenderTarget===!0)&&(Lt=S.toneMapping);const Mt=X.morphAttributes.position||X.morphAttributes.normal||X.morphAttributes.color,tt=Mt!==void 0?Mt.length:0,Re=Te.get(W),Wt=m.state.lights;if(oe===!0&&(we===!0||v!==T)){const Qt=v===T&&W.id===M;ne.setState(W,v,Qt)}let ot=!1;W.version===Re.__version?(Re.needsLights&&Re.lightsStateVersion!==Wt.state.version||Re.outputColorSpace!==fe||F.isBatchedMesh&&Re.batching===!1||!F.isBatchedMesh&&Re.batching===!0||F.isBatchedMesh&&Re.batchingColor===!0&&F.colorTexture===null||F.isBatchedMesh&&Re.batchingColor===!1&&F.colorTexture!==null||F.isInstancedMesh&&Re.instancing===!1||!F.isInstancedMesh&&Re.instancing===!0||F.isSkinnedMesh&&Re.skinning===!1||!F.isSkinnedMesh&&Re.skinning===!0||F.isInstancedMesh&&Re.instancingColor===!0&&F.instanceColor===null||F.isInstancedMesh&&Re.instancingColor===!1&&F.instanceColor!==null||F.isInstancedMesh&&Re.instancingMorph===!0&&F.morphTexture===null||F.isInstancedMesh&&Re.instancingMorph===!1&&F.morphTexture!==null||Re.envMap!==ge||W.fog===!0&&Re.fog!==ie||Re.numClippingPlanes!==void 0&&(Re.numClippingPlanes!==ne.numPlanes||Re.numIntersection!==ne.numIntersection)||Re.vertexAlphas!==ze||Re.vertexTangents!==De||Re.morphTargets!==Ee||Re.morphNormals!==et||Re.morphColors!==rt||Re.toneMapping!==Lt||Re.morphTargetsCount!==tt)&&(ot=!0):(ot=!0,Re.__version=W.version);let Rn=Re.currentProgram;ot===!0&&(Rn=_o(W,j,F));let Qi=!1,hn=!1,kr=!1;const yt=Rn.getUniforms(),gn=Re.uniforms;if(Me.useProgram(Rn.program)&&(Qi=!0,hn=!0,kr=!0),W.id!==M&&(M=W.id,hn=!0),Qi||T!==v){Me.buffers.depth.getReversed()?(le.copy(v.projectionMatrix),Uf(le),jf(le),yt.setValue(N,"projectionMatrix",le)):yt.setValue(N,"projectionMatrix",v.projectionMatrix),yt.setValue(N,"viewMatrix",v.matrixWorldInverse);const cn=yt.map.cameraPosition;cn!==void 0&&cn.setValue(N,nt.setFromMatrixPosition(v.matrixWorld)),qe.logarithmicDepthBuffer&&yt.setValue(N,"logDepthBufFC",2/(Math.log(v.far+1)/Math.LN2)),(W.isMeshPhongMaterial||W.isMeshToonMaterial||W.isMeshLambertMaterial||W.isMeshBasicMaterial||W.isMeshStandardMaterial||W.isShaderMaterial)&&yt.setValue(N,"isOrthographic",v.isOrthographicCamera===!0),T!==v&&(T=v,hn=!0,kr=!0)}if(F.isSkinnedMesh){yt.setOptional(N,F,"bindMatrix"),yt.setOptional(N,F,"bindMatrixInverse");const Qt=F.skeleton;Qt&&(Qt.boneTexture===null&&Qt.computeBoneTexture(),yt.setValue(N,"boneTexture",Qt.boneTexture,R))}F.isBatchedMesh&&(yt.setOptional(N,F,"batchingTexture"),yt.setValue(N,"batchingTexture",F._matricesTexture,R),yt.setOptional(N,F,"batchingIdTexture"),yt.setValue(N,"batchingIdTexture",F._indirectTexture,R),yt.setOptional(N,F,"batchingColorTexture"),F._colorsTexture!==null&&yt.setValue(N,"batchingColorTexture",F._colorsTexture,R));const wn=X.morphAttributes;if((wn.position!==void 0||wn.normal!==void 0||wn.color!==void 0)&&_e.update(F,X,Rn),(hn||Re.receiveShadow!==F.receiveShadow)&&(Re.receiveShadow=F.receiveShadow,yt.setValue(N,"receiveShadow",F.receiveShadow)),W.isMeshGouraudMaterial&&W.envMap!==null&&(gn.envMap.value=ge,gn.flipEnvMap.value=ge.isCubeTexture&&ge.isRenderTargetTexture===!1?-1:1),W.isMeshStandardMaterial&&W.envMap===null&&j.environment!==null&&(gn.envMapIntensity.value=j.environmentIntensity),hn&&(yt.setValue(N,"toneMappingExposure",S.toneMappingExposure),Re.needsLights&&Ep(gn,kr),ie&&W.fog===!0&&de.refreshFogUniforms(gn,ie),de.refreshMaterialUniforms(gn,W,Z,re,m.state.transmissionRenderTarget[v.id]),Is.upload(N,Sd(Re),gn,R)),W.isShaderMaterial&&W.uniformsNeedUpdate===!0&&(Is.upload(N,Sd(Re),gn,R),W.uniformsNeedUpdate=!1),W.isSpriteMaterial&&yt.setValue(N,"center",F.center),yt.setValue(N,"modelViewMatrix",F.modelViewMatrix),yt.setValue(N,"normalMatrix",F.normalMatrix),yt.setValue(N,"modelMatrix",F.matrixWorld),W.isShaderMaterial||W.isRawShaderMaterial){const Qt=W.uniformsGroups;for(let cn=0,ha=Qt.length;cn<ha;cn++){const Ni=Qt[cn];U.update(Ni,Rn),U.bind(Ni,Rn)}}return Rn}function Ep(v,j){v.ambientLightColor.needsUpdate=j,v.lightProbe.needsUpdate=j,v.directionalLights.needsUpdate=j,v.directionalLightShadows.needsUpdate=j,v.pointLights.needsUpdate=j,v.pointLightShadows.needsUpdate=j,v.spotLights.needsUpdate=j,v.spotLightShadows.needsUpdate=j,v.rectAreaLights.needsUpdate=j,v.hemisphereLights.needsUpdate=j}function Rp(v){return v.isMeshLambertMaterial||v.isMeshToonMaterial||v.isMeshPhongMaterial||v.isMeshStandardMaterial||v.isShadowMaterial||v.isShaderMaterial&&v.lights===!0}this.getActiveCubeFace=function(){return H},this.getActiveMipmapLevel=function(){return I},this.getRenderTarget=function(){return z},this.setRenderTargetTextures=function(v,j,X){const W=Te.get(v);W.__autoAllocateDepthBuffer=v.resolveDepthBuffer===!1,W.__autoAllocateDepthBuffer===!1&&(W.__useRenderToTexture=!1),Te.get(v.texture).__webglTexture=j,Te.get(v.depthTexture).__webglTexture=W.__autoAllocateDepthBuffer?void 0:X,W.__hasExternalTextures=!0},this.setRenderTargetFramebuffer=function(v,j){const X=Te.get(v);X.__webglFramebuffer=j,X.__useDefaultFramebuffer=j===void 0};const Pp=N.createFramebuffer();this.setRenderTarget=function(v,j=0,X=0){z=v,H=j,I=X;let W=!0,F=null,ie=!1,ae=!1;if(v){const ge=Te.get(v);if(ge.__useDefaultFramebuffer!==void 0)Me.bindFramebuffer(N.FRAMEBUFFER,null),W=!1;else if(ge.__webglFramebuffer===void 0)R.setupRenderTarget(v);else if(ge.__hasExternalTextures)R.rebindTextures(v,Te.get(v.texture).__webglTexture,Te.get(v.depthTexture).__webglTexture);else if(v.depthBuffer){const Ee=v.depthTexture;if(ge.__boundDepthTexture!==Ee){if(Ee!==null&&Te.has(Ee)&&(v.width!==Ee.image.width||v.height!==Ee.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");R.setupDepthRenderbuffer(v)}}const ze=v.texture;(ze.isData3DTexture||ze.isDataArrayTexture||ze.isCompressedArrayTexture)&&(ae=!0);const De=Te.get(v).__webglFramebuffer;v.isWebGLCubeRenderTarget?(Array.isArray(De[j])?F=De[j][X]:F=De[j],ie=!0):v.samples>0&&R.useMultisampledRTT(v)===!1?F=Te.get(v).__webglMultisampledFramebuffer:Array.isArray(De)?F=De[X]:F=De,C.copy(v.viewport),B.copy(v.scissor),k=v.scissorTest}else C.copy(Se).multiplyScalar(Z).floor(),B.copy(Ge).multiplyScalar(Z).floor(),k=ht;if(X!==0&&(F=Pp),Me.bindFramebuffer(N.FRAMEBUFFER,F)&&W&&Me.drawBuffers(v,F),Me.viewport(C),Me.scissor(B),Me.setScissorTest(k),ie){const ge=Te.get(v.texture);N.framebufferTexture2D(N.FRAMEBUFFER,N.COLOR_ATTACHMENT0,N.TEXTURE_CUBE_MAP_POSITIVE_X+j,ge.__webglTexture,X)}else if(ae){const ge=Te.get(v.texture),ze=j;N.framebufferTextureLayer(N.FRAMEBUFFER,N.COLOR_ATTACHMENT0,ge.__webglTexture,X,ze)}else if(v!==null&&X!==0){const ge=Te.get(v.texture);N.framebufferTexture2D(N.FRAMEBUFFER,N.COLOR_ATTACHMENT0,N.TEXTURE_2D,ge.__webglTexture,X)}M=-1},this.readRenderTargetPixels=function(v,j,X,W,F,ie,ae){if(!(v&&v.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let fe=Te.get(v).__webglFramebuffer;if(v.isWebGLCubeRenderTarget&&ae!==void 0&&(fe=fe[ae]),fe){Me.bindFramebuffer(N.FRAMEBUFFER,fe);try{const ge=v.texture,ze=ge.format,De=ge.type;if(!qe.textureFormatReadable(ze)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!qe.textureTypeReadable(De)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}j>=0&&j<=v.width-W&&X>=0&&X<=v.height-F&&N.readPixels(j,X,W,F,Ve.convert(ze),Ve.convert(De),ie)}finally{const ge=z!==null?Te.get(z).__webglFramebuffer:null;Me.bindFramebuffer(N.FRAMEBUFFER,ge)}}},this.readRenderTargetPixelsAsync=async function(v,j,X,W,F,ie,ae){if(!(v&&v.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let fe=Te.get(v).__webglFramebuffer;if(v.isWebGLCubeRenderTarget&&ae!==void 0&&(fe=fe[ae]),fe)if(j>=0&&j<=v.width-W&&X>=0&&X<=v.height-F){Me.bindFramebuffer(N.FRAMEBUFFER,fe);const ge=v.texture,ze=ge.format,De=ge.type;if(!qe.textureFormatReadable(ze))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!qe.textureTypeReadable(De))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");const Ee=N.createBuffer();N.bindBuffer(N.PIXEL_PACK_BUFFER,Ee),N.bufferData(N.PIXEL_PACK_BUFFER,ie.byteLength,N.STREAM_READ),N.readPixels(j,X,W,F,Ve.convert(ze),Ve.convert(De),0);const et=z!==null?Te.get(z).__webglFramebuffer:null;Me.bindFramebuffer(N.FRAMEBUFFER,et);const rt=N.fenceSync(N.SYNC_GPU_COMMANDS_COMPLETE,0);return N.flush(),await zf(N,rt,4),N.bindBuffer(N.PIXEL_PACK_BUFFER,Ee),N.getBufferSubData(N.PIXEL_PACK_BUFFER,0,ie),N.deleteBuffer(Ee),N.deleteSync(rt),ie}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")},this.copyFramebufferToTexture=function(v,j=null,X=0){const W=Math.pow(2,-X),F=Math.floor(v.image.width*W),ie=Math.floor(v.image.height*W),ae=j!==null?j.x:0,fe=j!==null?j.y:0;R.setTexture2D(v,0),N.copyTexSubImage2D(N.TEXTURE_2D,X,0,0,ae,fe,F,ie),Me.unbindTexture()};const Lp=N.createFramebuffer(),Ap=N.createFramebuffer();this.copyTextureToTexture=function(v,j,X=null,W=null,F=0,ie=null){ie===null&&(F!==0?(Hs("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),ie=F,F=0):ie=0);let ae,fe,ge,ze,De,Ee,et,rt,Lt;const Mt=v.isCompressedTexture?v.mipmaps[ie]:v.image;if(X!==null)ae=X.max.x-X.min.x,fe=X.max.y-X.min.y,ge=X.isBox3?X.max.z-X.min.z:1,ze=X.min.x,De=X.min.y,Ee=X.isBox3?X.min.z:0;else{const wn=Math.pow(2,-F);ae=Math.floor(Mt.width*wn),fe=Math.floor(Mt.height*wn),v.isDataArrayTexture?ge=Mt.depth:v.isData3DTexture?ge=Math.floor(Mt.depth*wn):ge=1,ze=0,De=0,Ee=0}W!==null?(et=W.x,rt=W.y,Lt=W.z):(et=0,rt=0,Lt=0);const tt=Ve.convert(j.format),Re=Ve.convert(j.type);let Wt;j.isData3DTexture?(R.setTexture3D(j,0),Wt=N.TEXTURE_3D):j.isDataArrayTexture||j.isCompressedArrayTexture?(R.setTexture2DArray(j,0),Wt=N.TEXTURE_2D_ARRAY):(R.setTexture2D(j,0),Wt=N.TEXTURE_2D),N.pixelStorei(N.UNPACK_FLIP_Y_WEBGL,j.flipY),N.pixelStorei(N.UNPACK_PREMULTIPLY_ALPHA_WEBGL,j.premultiplyAlpha),N.pixelStorei(N.UNPACK_ALIGNMENT,j.unpackAlignment);const ot=N.getParameter(N.UNPACK_ROW_LENGTH),Rn=N.getParameter(N.UNPACK_IMAGE_HEIGHT),Qi=N.getParameter(N.UNPACK_SKIP_PIXELS),hn=N.getParameter(N.UNPACK_SKIP_ROWS),kr=N.getParameter(N.UNPACK_SKIP_IMAGES);N.pixelStorei(N.UNPACK_ROW_LENGTH,Mt.width),N.pixelStorei(N.UNPACK_IMAGE_HEIGHT,Mt.height),N.pixelStorei(N.UNPACK_SKIP_PIXELS,ze),N.pixelStorei(N.UNPACK_SKIP_ROWS,De),N.pixelStorei(N.UNPACK_SKIP_IMAGES,Ee);const yt=v.isDataArrayTexture||v.isData3DTexture,gn=j.isDataArrayTexture||j.isData3DTexture;if(v.isDepthTexture){const wn=Te.get(v),Qt=Te.get(j),cn=Te.get(wn.__renderTarget),ha=Te.get(Qt.__renderTarget);Me.bindFramebuffer(N.READ_FRAMEBUFFER,cn.__webglFramebuffer),Me.bindFramebuffer(N.DRAW_FRAMEBUFFER,ha.__webglFramebuffer);for(let Ni=0;Ni<ge;Ni++)yt&&(N.framebufferTextureLayer(N.READ_FRAMEBUFFER,N.COLOR_ATTACHMENT0,Te.get(v).__webglTexture,F,Ee+Ni),N.framebufferTextureLayer(N.DRAW_FRAMEBUFFER,N.COLOR_ATTACHMENT0,Te.get(j).__webglTexture,ie,Lt+Ni)),N.blitFramebuffer(ze,De,ae,fe,et,rt,ae,fe,N.DEPTH_BUFFER_BIT,N.NEAREST);Me.bindFramebuffer(N.READ_FRAMEBUFFER,null),Me.bindFramebuffer(N.DRAW_FRAMEBUFFER,null)}else if(F!==0||v.isRenderTargetTexture||Te.has(v)){const wn=Te.get(v),Qt=Te.get(j);Me.bindFramebuffer(N.READ_FRAMEBUFFER,Lp),Me.bindFramebuffer(N.DRAW_FRAMEBUFFER,Ap);for(let cn=0;cn<ge;cn++)yt?N.framebufferTextureLayer(N.READ_FRAMEBUFFER,N.COLOR_ATTACHMENT0,wn.__webglTexture,F,Ee+cn):N.framebufferTexture2D(N.READ_FRAMEBUFFER,N.COLOR_ATTACHMENT0,N.TEXTURE_2D,wn.__webglTexture,F),gn?N.framebufferTextureLayer(N.DRAW_FRAMEBUFFER,N.COLOR_ATTACHMENT0,Qt.__webglTexture,ie,Lt+cn):N.framebufferTexture2D(N.DRAW_FRAMEBUFFER,N.COLOR_ATTACHMENT0,N.TEXTURE_2D,Qt.__webglTexture,ie),F!==0?N.blitFramebuffer(ze,De,ae,fe,et,rt,ae,fe,N.COLOR_BUFFER_BIT,N.NEAREST):gn?N.copyTexSubImage3D(Wt,ie,et,rt,Lt+cn,ze,De,ae,fe):N.copyTexSubImage2D(Wt,ie,et,rt,ze,De,ae,fe);Me.bindFramebuffer(N.READ_FRAMEBUFFER,null),Me.bindFramebuffer(N.DRAW_FRAMEBUFFER,null)}else gn?v.isDataTexture||v.isData3DTexture?N.texSubImage3D(Wt,ie,et,rt,Lt,ae,fe,ge,tt,Re,Mt.data):j.isCompressedArrayTexture?N.compressedTexSubImage3D(Wt,ie,et,rt,Lt,ae,fe,ge,tt,Mt.data):N.texSubImage3D(Wt,ie,et,rt,Lt,ae,fe,ge,tt,Re,Mt):v.isDataTexture?N.texSubImage2D(N.TEXTURE_2D,ie,et,rt,ae,fe,tt,Re,Mt.data):v.isCompressedTexture?N.compressedTexSubImage2D(N.TEXTURE_2D,ie,et,rt,Mt.width,Mt.height,tt,Mt.data):N.texSubImage2D(N.TEXTURE_2D,ie,et,rt,ae,fe,tt,Re,Mt);N.pixelStorei(N.UNPACK_ROW_LENGTH,ot),N.pixelStorei(N.UNPACK_IMAGE_HEIGHT,Rn),N.pixelStorei(N.UNPACK_SKIP_PIXELS,Qi),N.pixelStorei(N.UNPACK_SKIP_ROWS,hn),N.pixelStorei(N.UNPACK_SKIP_IMAGES,kr),ie===0&&j.generateMipmaps&&N.generateMipmap(Wt),Me.unbindTexture()},this.copyTextureToTexture3D=function(v,j,X=null,W=null,F=0){return Hs('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(v,j,X,W,F)},this.initRenderTarget=function(v){Te.get(v).__webglFramebuffer===void 0&&R.setupRenderTarget(v)},this.initTexture=function(v){v.isCubeTexture?R.setTextureCube(v,0):v.isData3DTexture?R.setTexture3D(v,0):v.isDataArrayTexture||v.isCompressedArrayTexture?R.setTexture2DArray(v,0):R.setTexture2D(v,0),Me.unbindTexture()},this.resetState=function(){H=0,I=0,z=null,Me.reset(),ft.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return si}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=Qe._getDrawingBufferColorSpace(e),t.unpackColorSpace=Qe._getUnpackColorSpace()}}const Qr=new A,$r=new A,B0=new je;class Uy extends Kl{constructor(e,t=1,n=16711680){const i=new un,o=e.geometry.attributes.normal.count,s=new sn(o*2*3,3);i.setAttribute("position",s),super(i,new Ks({color:n,toneMapped:!1})),this.object=e,this.size=t,this.type="VertexNormalsHelper",this.matrixAutoUpdate=!1,this.isVertexNormalsHelper=!0,this.update()}update(){this.object.updateMatrixWorld(!0),B0.getNormalMatrix(this.object.matrixWorld);const e=this.object.matrixWorld,t=this.geometry.attributes.position,n=this.object.geometry;if(n){const i=n.attributes.position,o=n.attributes.normal;let s=0;for(let a=0,c=i.count;a<c;a++)Qr.fromBufferAttribute(i,a).applyMatrix4(e),$r.fromBufferAttribute(o,a),$r.applyMatrix3(B0).normalize().multiplyScalar(this.size).add(Qr),t.setXYZ(s,Qr.x,Qr.y,Qr.z),s=s+1,t.setXYZ(s,$r.x,$r.y,$r.z),s=s+1}t.needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}class jy{constructor({scene:e}){this.#e=e}#e;initialize(){this.#e.forEachCollider(e=>{const t=new Ks({color:16777215*Math.random()}),n=e.shapeType(),i=e.translation(),o=e.rotation();let s;if(n===1){const a=e.halfExtents();s=new zn(a.x*2,a.y*2,a.z*2)}else if(n===6){const a=e.vertices(),c=e.indices();s=new un,s.setIndex(new Bl(c,1)),s.setAttribute("position",new sn(a,3)),s.computeVertexNormals()}else if(n===10){const a=e.radius(),c=e.halfHeight()*2;s=new Js(a,a,c,6)}else console.warn("Unsupported collider shape:",n);if(s){const a=new Kl(new x1(s),t);a.position.set(i.x,i.y,i.z),a.quaternion.set(o.x,o.y,o.z,o.w),a.material.depthTest=!1,a.material.transparent=!0,a.material.opacity=.5,this.#e.addObject(a);const c=new Ht(s);c.position.copy(i),c.quaternion.copy(o);const l=new Uy(c,.05,65280);l.material.transparent=!0,l.material.opacity=.25,this.#e.addObject(l),this.#t.set(e,{wireframe:a,normalsHelper:l,normalMesh:c})}})}#t=new Map;update(){this.#e.forEachCollider(e=>{const t=this.#t.get(e);if(t){const{wireframe:n,normalsHelper:i,normalMesh:o}=t,s=e.translation(),a=e.rotation();n.position.set(s.x,s.y,s.z),n.quaternion.set(a.x,a.y,a.z,a.w);const c=e.parent().isSleeping();o.position.set(s.x,s.y,s.z),o.quaternion.set(a.x,a.y,a.z,a.w);const l=c?0:65280;i.material.color.setHex(l),i.update()}})}}class Fy{constructor({containerElement:e}){this.#e=document.createElement("div"),this.#e.style.position="absolute",this.#e.style.top="10px",this.#e.style.left="10px",this.#e.style.color="white",this.#e.style.fontSize="20px",this.#e.style.zIndex="1000",this.#e.style.pointerEvents="none",this.#e.style.userSelect="none",this.#e.style.fontFamily="Arial, sans-serif",this.#e.style.backgroundColor="rgba(0, 0, 0, 0.5)",this.#e.style.padding="5px",this.#e.style.borderRadius="5px",this.#e.style.boxShadow="0 0 10px rgba(0, 0, 0, 0.5)",e.appendChild(this.#e)}#e=null;#t=0;initialize(){}update(){const e=performance.now();if(this.#t){const t=e-this.#t;let n=Math.round(1e3/t);this.#e.innerText=`FPS: ${n}`}this.#t=e}}class Vy{constructor({scene:e,containerElement:t}){this.#e=e,this.#t=document.createElement("div"),this.#t.style.position="absolute",this.#t.style.bottom="10px",this.#t.style.left="10px",this.#t.style.color="white",this.#t.style.fontSize="20px",this.#t.style.zIndex="1000",this.#t.style.pointerEvents="none",this.#t.style.userSelect="none",this.#t.style.fontFamily="Arial, sans-serif",this.#t.style.backgroundColor="rgba(0, 0, 0, 0.5)",this.#t.style.padding="5px",this.#t.style.borderRadius="5px",this.#t.style.boxShadow="0 0 10px rgba(0, 0, 0, 0.5)",t.appendChild(this.#t)}#e=null;#t=null;initialize(){}update(){const e=this.#e.triangles;this.#t.innerText=`Polygons: ${Intl.NumberFormat("en-US").format(e)}`}}const G0={type:"change"},nd={type:"start"},qh={type:"end"},ps=new _r,Z0=new Ti,Xy=Math.cos(70*Rh.DEG2RAD),Ct=new A,ln=2*Math.PI,ut={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},Za=1e-6;class ky extends e2{constructor(e,t=null){super(e,t),this.state=ut.NONE,this.target=new A,this.cursor=new A,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.keyRotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:Tr.ROTATE,MIDDLE:Tr.DOLLY,RIGHT:Tr.PAN},this.touches={ONE:wr.ROTATE,TWO:wr.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this._lastPosition=new A,this._lastQuaternion=new Rt,this._lastTargetPosition=new A,this._quat=new Rt().setFromUnitVectors(e.up,new A(0,1,0)),this._quatInverse=this._quat.clone().invert(),this._spherical=new w0,this._sphericalDelta=new w0,this._scale=1,this._panOffset=new A,this._rotateStart=new Oe,this._rotateEnd=new Oe,this._rotateDelta=new Oe,this._panStart=new Oe,this._panEnd=new Oe,this._panDelta=new Oe,this._dollyStart=new Oe,this._dollyEnd=new Oe,this._dollyDelta=new Oe,this._dollyDirection=new A,this._mouse=new Oe,this._performCursorZoom=!1,this._pointers=[],this._pointerPositions={},this._controlActive=!1,this._onPointerMove=By.bind(this),this._onPointerDown=Wy.bind(this),this._onPointerUp=Gy.bind(this),this._onContextMenu=$y.bind(this),this._onMouseWheel=qy.bind(this),this._onKeyDown=Ky.bind(this),this._onTouchStart=Jy.bind(this),this._onTouchMove=Qy.bind(this),this._onMouseDown=Zy.bind(this),this._onMouseMove=Yy.bind(this),this._interceptControlDown=eg.bind(this),this._interceptControlUp=tg.bind(this),this.domElement!==null&&this.connect(this.domElement),this.update()}connect(e){super.connect(e),this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerUp),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.getRootNode().addEventListener("keydown",this._interceptControlDown,{passive:!0,capture:!0}),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerUp),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.stopListenToKeyEvents(),this.domElement.getRootNode().removeEventListener("keydown",this._interceptControlDown,{capture:!0}),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}getPolarAngle(){return this._spherical.phi}getAzimuthalAngle(){return this._spherical.theta}getDistance(){return this.object.position.distanceTo(this.target)}listenToKeyEvents(e){e.addEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=e}stopListenToKeyEvents(){this._domElementKeyEvents!==null&&(this._domElementKeyEvents.removeEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=null)}saveState(){this.target0.copy(this.target),this.position0.copy(this.object.position),this.zoom0=this.object.zoom}reset(){this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(G0),this.update(),this.state=ut.NONE}update(e=null){const t=this.object.position;Ct.copy(t).sub(this.target),Ct.applyQuaternion(this._quat),this._spherical.setFromVector3(Ct),this.autoRotate&&this.state===ut.NONE&&this._rotateLeft(this._getAutoRotationAngle(e)),this.enableDamping?(this._spherical.theta+=this._sphericalDelta.theta*this.dampingFactor,this._spherical.phi+=this._sphericalDelta.phi*this.dampingFactor):(this._spherical.theta+=this._sphericalDelta.theta,this._spherical.phi+=this._sphericalDelta.phi);let n=this.minAzimuthAngle,i=this.maxAzimuthAngle;isFinite(n)&&isFinite(i)&&(n<-Math.PI?n+=ln:n>Math.PI&&(n-=ln),i<-Math.PI?i+=ln:i>Math.PI&&(i-=ln),n<=i?this._spherical.theta=Math.max(n,Math.min(i,this._spherical.theta)):this._spherical.theta=this._spherical.theta>(n+i)/2?Math.max(n,this._spherical.theta):Math.min(i,this._spherical.theta)),this._spherical.phi=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,this._spherical.phi)),this._spherical.makeSafe(),this.enableDamping===!0?this.target.addScaledVector(this._panOffset,this.dampingFactor):this.target.add(this._panOffset),this.target.sub(this.cursor),this.target.clampLength(this.minTargetRadius,this.maxTargetRadius),this.target.add(this.cursor);let o=!1;if(this.zoomToCursor&&this._performCursorZoom||this.object.isOrthographicCamera)this._spherical.radius=this._clampDistance(this._spherical.radius);else{const s=this._spherical.radius;this._spherical.radius=this._clampDistance(this._spherical.radius*this._scale),o=s!=this._spherical.radius}if(Ct.setFromSpherical(this._spherical),Ct.applyQuaternion(this._quatInverse),t.copy(this.target).add(Ct),this.object.lookAt(this.target),this.enableDamping===!0?(this._sphericalDelta.theta*=1-this.dampingFactor,this._sphericalDelta.phi*=1-this.dampingFactor,this._panOffset.multiplyScalar(1-this.dampingFactor)):(this._sphericalDelta.set(0,0,0),this._panOffset.set(0,0,0)),this.zoomToCursor&&this._performCursorZoom){let s=null;if(this.object.isPerspectiveCamera){const a=Ct.length();s=this._clampDistance(a*this._scale);const c=a-s;this.object.position.addScaledVector(this._dollyDirection,c),this.object.updateMatrixWorld(),o=!!c}else if(this.object.isOrthographicCamera){const a=new A(this._mouse.x,this._mouse.y,0);a.unproject(this.object);const c=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),this.object.updateProjectionMatrix(),o=c!==this.object.zoom;const l=new A(this._mouse.x,this._mouse.y,0);l.unproject(this.object),this.object.position.sub(l).add(a),this.object.updateMatrixWorld(),s=Ct.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),this.zoomToCursor=!1;s!==null&&(this.screenSpacePanning?this.target.set(0,0,-1).transformDirection(this.object.matrix).multiplyScalar(s).add(this.object.position):(ps.origin.copy(this.object.position),ps.direction.set(0,0,-1).transformDirection(this.object.matrix),Math.abs(this.object.up.dot(ps.direction))<Xy?this.object.lookAt(this.target):(Z0.setFromNormalAndCoplanarPoint(this.object.up,this.target),ps.intersectPlane(Z0,this.target))))}else if(this.object.isOrthographicCamera){const s=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),s!==this.object.zoom&&(this.object.updateProjectionMatrix(),o=!0)}return this._scale=1,this._performCursorZoom=!1,o||this._lastPosition.distanceToSquared(this.object.position)>Za||8*(1-this._lastQuaternion.dot(this.object.quaternion))>Za||this._lastTargetPosition.distanceToSquared(this.target)>Za?(this.dispatchEvent(G0),this._lastPosition.copy(this.object.position),this._lastQuaternion.copy(this.object.quaternion),this._lastTargetPosition.copy(this.target),!0):!1}_getAutoRotationAngle(e){return e!==null?ln/60*this.autoRotateSpeed*e:ln/60/60*this.autoRotateSpeed}_getZoomScale(e){const t=Math.abs(e*.01);return Math.pow(.95,this.zoomSpeed*t)}_rotateLeft(e){this._sphericalDelta.theta-=e}_rotateUp(e){this._sphericalDelta.phi-=e}_panLeft(e,t){Ct.setFromMatrixColumn(t,0),Ct.multiplyScalar(-e),this._panOffset.add(Ct)}_panUp(e,t){this.screenSpacePanning===!0?Ct.setFromMatrixColumn(t,1):(Ct.setFromMatrixColumn(t,0),Ct.crossVectors(this.object.up,Ct)),Ct.multiplyScalar(e),this._panOffset.add(Ct)}_pan(e,t){const n=this.domElement;if(this.object.isPerspectiveCamera){const i=this.object.position;Ct.copy(i).sub(this.target);let o=Ct.length();o*=Math.tan(this.object.fov/2*Math.PI/180),this._panLeft(2*e*o/n.clientHeight,this.object.matrix),this._panUp(2*t*o/n.clientHeight,this.object.matrix)}else this.object.isOrthographicCamera?(this._panLeft(e*(this.object.right-this.object.left)/this.object.zoom/n.clientWidth,this.object.matrix),this._panUp(t*(this.object.top-this.object.bottom)/this.object.zoom/n.clientHeight,this.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),this.enablePan=!1)}_dollyOut(e){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale/=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_dollyIn(e){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale*=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_updateZoomParameters(e,t){if(!this.zoomToCursor)return;this._performCursorZoom=!0;const n=this.domElement.getBoundingClientRect(),i=e-n.left,o=t-n.top,s=n.width,a=n.height;this._mouse.x=i/s*2-1,this._mouse.y=-(o/a)*2+1,this._dollyDirection.set(this._mouse.x,this._mouse.y,1).unproject(this.object).sub(this.object.position).normalize()}_clampDistance(e){return Math.max(this.minDistance,Math.min(this.maxDistance,e))}_handleMouseDownRotate(e){this._rotateStart.set(e.clientX,e.clientY)}_handleMouseDownDolly(e){this._updateZoomParameters(e.clientX,e.clientX),this._dollyStart.set(e.clientX,e.clientY)}_handleMouseDownPan(e){this._panStart.set(e.clientX,e.clientY)}_handleMouseMoveRotate(e){this._rotateEnd.set(e.clientX,e.clientY),this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const t=this.domElement;this._rotateLeft(ln*this._rotateDelta.x/t.clientHeight),this._rotateUp(ln*this._rotateDelta.y/t.clientHeight),this._rotateStart.copy(this._rotateEnd),this.update()}_handleMouseMoveDolly(e){this._dollyEnd.set(e.clientX,e.clientY),this._dollyDelta.subVectors(this._dollyEnd,this._dollyStart),this._dollyDelta.y>0?this._dollyOut(this._getZoomScale(this._dollyDelta.y)):this._dollyDelta.y<0&&this._dollyIn(this._getZoomScale(this._dollyDelta.y)),this._dollyStart.copy(this._dollyEnd),this.update()}_handleMouseMovePan(e){this._panEnd.set(e.clientX,e.clientY),this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd),this.update()}_handleMouseWheel(e){this._updateZoomParameters(e.clientX,e.clientY),e.deltaY<0?this._dollyIn(this._getZoomScale(e.deltaY)):e.deltaY>0&&this._dollyOut(this._getZoomScale(e.deltaY)),this.update()}_handleKeyDown(e){let t=!1;switch(e.code){case this.keys.UP:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateUp(ln*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,this.keyPanSpeed),t=!0;break;case this.keys.BOTTOM:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateUp(-ln*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,-this.keyPanSpeed),t=!0;break;case this.keys.LEFT:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateLeft(ln*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(this.keyPanSpeed,0),t=!0;break;case this.keys.RIGHT:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateLeft(-ln*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(-this.keyPanSpeed,0),t=!0;break}t&&(e.preventDefault(),this.update())}_handleTouchStartRotate(e){if(this._pointers.length===1)this._rotateStart.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),i=.5*(e.pageY+t.y);this._rotateStart.set(n,i)}}_handleTouchStartPan(e){if(this._pointers.length===1)this._panStart.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),i=.5*(e.pageY+t.y);this._panStart.set(n,i)}}_handleTouchStartDolly(e){const t=this._getSecondPointerPosition(e),n=e.pageX-t.x,i=e.pageY-t.y,o=Math.sqrt(n*n+i*i);this._dollyStart.set(0,o)}_handleTouchStartDollyPan(e){this.enableZoom&&this._handleTouchStartDolly(e),this.enablePan&&this._handleTouchStartPan(e)}_handleTouchStartDollyRotate(e){this.enableZoom&&this._handleTouchStartDolly(e),this.enableRotate&&this._handleTouchStartRotate(e)}_handleTouchMoveRotate(e){if(this._pointers.length==1)this._rotateEnd.set(e.pageX,e.pageY);else{const n=this._getSecondPointerPosition(e),i=.5*(e.pageX+n.x),o=.5*(e.pageY+n.y);this._rotateEnd.set(i,o)}this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const t=this.domElement;this._rotateLeft(ln*this._rotateDelta.x/t.clientHeight),this._rotateUp(ln*this._rotateDelta.y/t.clientHeight),this._rotateStart.copy(this._rotateEnd)}_handleTouchMovePan(e){if(this._pointers.length===1)this._panEnd.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),i=.5*(e.pageY+t.y);this._panEnd.set(n,i)}this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd)}_handleTouchMoveDolly(e){const t=this._getSecondPointerPosition(e),n=e.pageX-t.x,i=e.pageY-t.y,o=Math.sqrt(n*n+i*i);this._dollyEnd.set(0,o),this._dollyDelta.set(0,Math.pow(this._dollyEnd.y/this._dollyStart.y,this.zoomSpeed)),this._dollyOut(this._dollyDelta.y),this._dollyStart.copy(this._dollyEnd);const s=(e.pageX+t.x)*.5,a=(e.pageY+t.y)*.5;this._updateZoomParameters(s,a)}_handleTouchMoveDollyPan(e){this.enableZoom&&this._handleTouchMoveDolly(e),this.enablePan&&this._handleTouchMovePan(e)}_handleTouchMoveDollyRotate(e){this.enableZoom&&this._handleTouchMoveDolly(e),this.enableRotate&&this._handleTouchMoveRotate(e)}_addPointer(e){this._pointers.push(e.pointerId)}_removePointer(e){delete this._pointerPositions[e.pointerId];for(let t=0;t<this._pointers.length;t++)if(this._pointers[t]==e.pointerId){this._pointers.splice(t,1);return}}_isTrackingPointer(e){for(let t=0;t<this._pointers.length;t++)if(this._pointers[t]==e.pointerId)return!0;return!1}_trackPointer(e){let t=this._pointerPositions[e.pointerId];t===void 0&&(t=new Oe,this._pointerPositions[e.pointerId]=t),t.set(e.pageX,e.pageY)}_getSecondPointerPosition(e){const t=e.pointerId===this._pointers[0]?this._pointers[1]:this._pointers[0];return this._pointerPositions[t]}_customWheelEvent(e){const t=e.deltaMode,n={clientX:e.clientX,clientY:e.clientY,deltaY:e.deltaY};switch(t){case 1:n.deltaY*=16;break;case 2:n.deltaY*=100;break}return e.ctrlKey&&!this._controlActive&&(n.deltaY*=10),n}}function Wy(r){this.enabled!==!1&&(this._pointers.length===0&&(this.domElement.setPointerCapture(r.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),!this._isTrackingPointer(r)&&(this._addPointer(r),r.pointerType==="touch"?this._onTouchStart(r):this._onMouseDown(r)))}function By(r){this.enabled!==!1&&(r.pointerType==="touch"?this._onTouchMove(r):this._onMouseMove(r))}function Gy(r){switch(this._removePointer(r),this._pointers.length){case 0:this.domElement.releasePointerCapture(r.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.dispatchEvent(qh),this.state=ut.NONE;break;case 1:const e=this._pointers[0],t=this._pointerPositions[e];this._onTouchStart({pointerId:e,pageX:t.x,pageY:t.y});break}}function Zy(r){let e;switch(r.button){case 0:e=this.mouseButtons.LEFT;break;case 1:e=this.mouseButtons.MIDDLE;break;case 2:e=this.mouseButtons.RIGHT;break;default:e=-1}switch(e){case Tr.DOLLY:if(this.enableZoom===!1)return;this._handleMouseDownDolly(r),this.state=ut.DOLLY;break;case Tr.ROTATE:if(r.ctrlKey||r.metaKey||r.shiftKey){if(this.enablePan===!1)return;this._handleMouseDownPan(r),this.state=ut.PAN}else{if(this.enableRotate===!1)return;this._handleMouseDownRotate(r),this.state=ut.ROTATE}break;case Tr.PAN:if(r.ctrlKey||r.metaKey||r.shiftKey){if(this.enableRotate===!1)return;this._handleMouseDownRotate(r),this.state=ut.ROTATE}else{if(this.enablePan===!1)return;this._handleMouseDownPan(r),this.state=ut.PAN}break;default:this.state=ut.NONE}this.state!==ut.NONE&&this.dispatchEvent(nd)}function Yy(r){switch(this.state){case ut.ROTATE:if(this.enableRotate===!1)return;this._handleMouseMoveRotate(r);break;case ut.DOLLY:if(this.enableZoom===!1)return;this._handleMouseMoveDolly(r);break;case ut.PAN:if(this.enablePan===!1)return;this._handleMouseMovePan(r);break}}function qy(r){this.enabled===!1||this.enableZoom===!1||this.state!==ut.NONE||(r.preventDefault(),this.dispatchEvent(nd),this._handleMouseWheel(this._customWheelEvent(r)),this.dispatchEvent(qh))}function Ky(r){this.enabled!==!1&&this._handleKeyDown(r)}function Jy(r){switch(this._trackPointer(r),this._pointers.length){case 1:switch(this.touches.ONE){case wr.ROTATE:if(this.enableRotate===!1)return;this._handleTouchStartRotate(r),this.state=ut.TOUCH_ROTATE;break;case wr.PAN:if(this.enablePan===!1)return;this._handleTouchStartPan(r),this.state=ut.TOUCH_PAN;break;default:this.state=ut.NONE}break;case 2:switch(this.touches.TWO){case wr.DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchStartDollyPan(r),this.state=ut.TOUCH_DOLLY_PAN;break;case wr.DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchStartDollyRotate(r),this.state=ut.TOUCH_DOLLY_ROTATE;break;default:this.state=ut.NONE}break;default:this.state=ut.NONE}this.state!==ut.NONE&&this.dispatchEvent(nd)}function Qy(r){switch(this._trackPointer(r),this.state){case ut.TOUCH_ROTATE:if(this.enableRotate===!1)return;this._handleTouchMoveRotate(r),this.update();break;case ut.TOUCH_PAN:if(this.enablePan===!1)return;this._handleTouchMovePan(r),this.update();break;case ut.TOUCH_DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchMoveDollyPan(r),this.update();break;case ut.TOUCH_DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchMoveDollyRotate(r),this.update();break;default:this.state=ut.NONE}}function $y(r){this.enabled!==!1&&r.preventDefault()}function eg(r){r.key==="Control"&&(this._controlActive=!0,this.domElement.getRootNode().addEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function tg(r){r.key==="Control"&&(this._controlActive=!1,this.domElement.getRootNode().removeEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}const ng=new A(0,.45,0);class ig{constructor({camera:e,containerElement:t}){this.#e=e,this.#t=t}#e;#t;initialize(){const e=new ky(this.#e,this.#t);e.target.copy(ng),e.update()}update(){}}class fr{static DEBUG_COLLIDERS=!1;static DEBUG_FPS=!1;static DEBUG_POLYGONS=!1;static DEBUG_CONTROLS=!1;static#e;static#t;static#n;static#i;static#r;static#o;static#s;static async initialize({scene:e,containerElement:t,camera:n}){this.#e=e,this.#t=t,this.#n=n,this.DEBUG_COLLIDERS&&(this.#i=new jy({scene:this.#e}),this.#i.initialize()),this.DEBUG_FPS&&(this.#r=new Fy({containerElement:this.#t}),this.#r.initialize()),this.DEBUG_POLYGONS&&(this.#o=new Vy({scene:this.#e,containerElement:this.#t}),this.#o.initialize()),this.DEBUG_CONTROLS&&(this.#s=new ig({scene:this.#e,containerElement:this.#t,camera:this.#n}),this.#s.initialize())}static update(){this.DEBUG_COLLIDERS&&this.#i.update(),this.DEBUG_FPS&&this.#r.update(),this.DEBUG_POLYGONS&&this.#o.update(),this.DEBUG_CONTROLS&&this.#s.update()}}function Y0(r,e){if(e===lf)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),r;if(e===hl||e===Sh){let t=r.getIndex();if(t===null){const s=[],a=r.getAttribute("position");if(a!==void 0){for(let c=0;c<a.count;c++)s.push(c);r.setIndex(s),t=r.getIndex()}else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),r}const n=t.count-2,i=[];if(e===hl)for(let s=1;s<=n;s++)i.push(t.getX(0)),i.push(t.getX(s)),i.push(t.getX(s+1));else for(let s=0;s<n;s++)s%2===0?(i.push(t.getX(s)),i.push(t.getX(s+1)),i.push(t.getX(s+2))):(i.push(t.getX(s+2)),i.push(t.getX(s+1)),i.push(t.getX(s)));i.length/3!==n&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");const o=r.clone();return o.setIndex(i),o.clearGroups(),o}else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",e),r}class rg extends Vr{constructor(e){super(e),this.dracoLoader=null,this.ktx2Loader=null,this.meshoptDecoder=null,this.pluginCallbacks=[],this.register(function(t){return new lg(t)}),this.register(function(t){return new dg(t)}),this.register(function(t){return new wg(t)}),this.register(function(t){return new xg(t)}),this.register(function(t){return new vg(t)}),this.register(function(t){return new hg(t)}),this.register(function(t){return new pg(t)}),this.register(function(t){return new fg(t)}),this.register(function(t){return new mg(t)}),this.register(function(t){return new cg(t)}),this.register(function(t){return new bg(t)}),this.register(function(t){return new ug(t)}),this.register(function(t){return new gg(t)}),this.register(function(t){return new yg(t)}),this.register(function(t){return new sg(t)}),this.register(function(t){return new Tg(t)}),this.register(function(t){return new Sg(t)})}load(e,t,n,i){const o=this;let s;if(this.resourcePath!=="")s=this.resourcePath;else if(this.path!==""){const l=ho.extractUrlBase(e);s=ho.resolveURL(l,this.path)}else s=ho.extractUrlBase(e);this.manager.itemStart(e);const a=function(l){i?i(l):console.error(l),o.manager.itemError(e),o.manager.itemEnd(e)},c=new Vh(this.manager);c.setPath(this.path),c.setResponseType("arraybuffer"),c.setRequestHeader(this.requestHeader),c.setWithCredentials(this.withCredentials),c.load(e,function(l){try{o.parse(l,s,function(d){t(d),o.manager.itemEnd(e)},a)}catch(d){a(d)}},n,a)}setDRACOLoader(e){return this.dracoLoader=e,this}setKTX2Loader(e){return this.ktx2Loader=e,this}setMeshoptDecoder(e){return this.meshoptDecoder=e,this}register(e){return this.pluginCallbacks.indexOf(e)===-1&&this.pluginCallbacks.push(e),this}unregister(e){return this.pluginCallbacks.indexOf(e)!==-1&&this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(e),1),this}parse(e,t,n,i){let o;const s={},a={},c=new TextDecoder;if(typeof e=="string")o=JSON.parse(e);else if(e instanceof ArrayBuffer)if(c.decode(new Uint8Array(e,0,4))===Kh){try{s[Ze.KHR_BINARY_GLTF]=new Mg(e)}catch(u){i&&i(u);return}o=JSON.parse(s[Ze.KHR_BINARY_GLTF].content)}else o=JSON.parse(c.decode(e));else o=e;if(o.asset===void 0||o.asset.version[0]<2){i&&i(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));return}const l=new zg(o,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,requestHeader:this.requestHeader,manager:this.manager,ktx2Loader:this.ktx2Loader,meshoptDecoder:this.meshoptDecoder});l.fileLoader.setRequestHeader(this.requestHeader);for(let d=0;d<this.pluginCallbacks.length;d++){const u=this.pluginCallbacks[d](l);u.name||console.error("THREE.GLTFLoader: Invalid plugin found: missing name"),a[u.name]=u,s[u.name]=!0}if(o.extensionsUsed)for(let d=0;d<o.extensionsUsed.length;++d){const u=o.extensionsUsed[d],h=o.extensionsRequired||[];switch(u){case Ze.KHR_MATERIALS_UNLIT:s[u]=new ag;break;case Ze.KHR_DRACO_MESH_COMPRESSION:s[u]=new Eg(o,this.dracoLoader);break;case Ze.KHR_TEXTURE_TRANSFORM:s[u]=new Rg;break;case Ze.KHR_MESH_QUANTIZATION:s[u]=new Pg;break;default:h.indexOf(u)>=0&&a[u]===void 0&&console.warn('THREE.GLTFLoader: Unknown extension "'+u+'".')}}l.setExtensions(s),l.setPlugins(a),l.parse(n,i)}parseAsync(e,t){const n=this;return new Promise(function(i,o){n.parse(e,t,i,o)})}}function og(){let r={};return{get:function(e){return r[e]},add:function(e,t){r[e]=t},remove:function(e){delete r[e]},removeAll:function(){r={}}}}const Ze={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_DISPERSION:"KHR_materials_dispersion",KHR_MATERIALS_IOR:"KHR_materials_ior",KHR_MATERIALS_SHEEN:"KHR_materials_sheen",KHR_MATERIALS_SPECULAR:"KHR_materials_specular",KHR_MATERIALS_TRANSMISSION:"KHR_materials_transmission",KHR_MATERIALS_IRIDESCENCE:"KHR_materials_iridescence",KHR_MATERIALS_ANISOTROPY:"KHR_materials_anisotropy",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_MATERIALS_VOLUME:"KHR_materials_volume",KHR_TEXTURE_BASISU:"KHR_texture_basisu",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",KHR_MATERIALS_EMISSIVE_STRENGTH:"KHR_materials_emissive_strength",EXT_MATERIALS_BUMP:"EXT_materials_bump",EXT_TEXTURE_WEBP:"EXT_texture_webp",EXT_TEXTURE_AVIF:"EXT_texture_avif",EXT_MESHOPT_COMPRESSION:"EXT_meshopt_compression",EXT_MESH_GPU_INSTANCING:"EXT_mesh_gpu_instancing"};class sg{constructor(e){this.parser=e,this.name=Ze.KHR_LIGHTS_PUNCTUAL,this.cache={refs:{},uses:{}}}_markDefs(){const e=this.parser,t=this.parser.json.nodes||[];for(let n=0,i=t.length;n<i;n++){const o=t[n];o.extensions&&o.extensions[this.name]&&o.extensions[this.name].light!==void 0&&e._addNodeRef(this.cache,o.extensions[this.name].light)}}_loadLight(e){const t=this.parser,n="light:"+e;let i=t.cache.get(n);if(i)return i;const o=t.json,c=((o.extensions&&o.extensions[this.name]||{}).lights||[])[e];let l;const d=new Ue(16777215);c.color!==void 0&&d.setRGB(c.color[0],c.color[1],c.color[2],an);const u=c.range!==void 0?c.range:0;switch(c.type){case"directional":l=new kh(d),l.target.position.set(0,0,-1),l.add(l.target);break;case"point":l=new Xh(d),l.distance=u;break;case"spot":l=new U1(d),l.distance=u,c.spot=c.spot||{},c.spot.innerConeAngle=c.spot.innerConeAngle!==void 0?c.spot.innerConeAngle:0,c.spot.outerConeAngle=c.spot.outerConeAngle!==void 0?c.spot.outerConeAngle:Math.PI/4,l.angle=c.spot.outerConeAngle,l.penumbra=1-c.spot.innerConeAngle/c.spot.outerConeAngle,l.target.position.set(0,0,-1),l.add(l.target);break;default:throw new Error("THREE.GLTFLoader: Unexpected light type: "+c.type)}return l.position.set(0,0,0),ri(l,c),c.intensity!==void 0&&(l.intensity=c.intensity),l.name=t.createUniqueName(c.name||"light_"+e),i=Promise.resolve(l),t.cache.add(n,i),i}getDependency(e,t){if(e==="light")return this._loadLight(t)}createNodeAttachment(e){const t=this,n=this.parser,o=n.json.nodes[e],a=(o.extensions&&o.extensions[this.name]||{}).light;return a===void 0?null:this._loadLight(a).then(function(c){return n._getNodeRef(t.cache,a,c)})}}class ag{constructor(){this.name=Ze.KHR_MATERIALS_UNLIT}getMaterialType(){return Bi}extendParams(e,t,n){const i=[];e.color=new Ue(1,1,1),e.opacity=1;const o=t.pbrMetallicRoughness;if(o){if(Array.isArray(o.baseColorFactor)){const s=o.baseColorFactor;e.color.setRGB(s[0],s[1],s[2],an),e.opacity=s[3]}o.baseColorTexture!==void 0&&i.push(n.assignTexture(e,"map",o.baseColorTexture,Gt))}return Promise.all(i)}}class cg{constructor(e){this.parser=e,this.name=Ze.KHR_MATERIALS_EMISSIVE_STRENGTH}extendMaterialParams(e,t){const i=this.parser.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const o=i.extensions[this.name].emissiveStrength;return o!==void 0&&(t.emissiveIntensity=o),Promise.resolve()}}class lg{constructor(e){this.parser=e,this.name=Ze.KHR_MATERIALS_CLEARCOAT}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:qn}extendMaterialParams(e,t){const n=this.parser,i=n.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const o=[],s=i.extensions[this.name];if(s.clearcoatFactor!==void 0&&(t.clearcoat=s.clearcoatFactor),s.clearcoatTexture!==void 0&&o.push(n.assignTexture(t,"clearcoatMap",s.clearcoatTexture)),s.clearcoatRoughnessFactor!==void 0&&(t.clearcoatRoughness=s.clearcoatRoughnessFactor),s.clearcoatRoughnessTexture!==void 0&&o.push(n.assignTexture(t,"clearcoatRoughnessMap",s.clearcoatRoughnessTexture)),s.clearcoatNormalTexture!==void 0&&(o.push(n.assignTexture(t,"clearcoatNormalMap",s.clearcoatNormalTexture)),s.clearcoatNormalTexture.scale!==void 0)){const a=s.clearcoatNormalTexture.scale;t.clearcoatNormalScale=new Oe(a,a)}return Promise.all(o)}}class dg{constructor(e){this.parser=e,this.name=Ze.KHR_MATERIALS_DISPERSION}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:qn}extendMaterialParams(e,t){const i=this.parser.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const o=i.extensions[this.name];return t.dispersion=o.dispersion!==void 0?o.dispersion:0,Promise.resolve()}}class ug{constructor(e){this.parser=e,this.name=Ze.KHR_MATERIALS_IRIDESCENCE}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:qn}extendMaterialParams(e,t){const n=this.parser,i=n.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const o=[],s=i.extensions[this.name];return s.iridescenceFactor!==void 0&&(t.iridescence=s.iridescenceFactor),s.iridescenceTexture!==void 0&&o.push(n.assignTexture(t,"iridescenceMap",s.iridescenceTexture)),s.iridescenceIor!==void 0&&(t.iridescenceIOR=s.iridescenceIor),t.iridescenceThicknessRange===void 0&&(t.iridescenceThicknessRange=[100,400]),s.iridescenceThicknessMinimum!==void 0&&(t.iridescenceThicknessRange[0]=s.iridescenceThicknessMinimum),s.iridescenceThicknessMaximum!==void 0&&(t.iridescenceThicknessRange[1]=s.iridescenceThicknessMaximum),s.iridescenceThicknessTexture!==void 0&&o.push(n.assignTexture(t,"iridescenceThicknessMap",s.iridescenceThicknessTexture)),Promise.all(o)}}class hg{constructor(e){this.parser=e,this.name=Ze.KHR_MATERIALS_SHEEN}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:qn}extendMaterialParams(e,t){const n=this.parser,i=n.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const o=[];t.sheenColor=new Ue(0,0,0),t.sheenRoughness=0,t.sheen=1;const s=i.extensions[this.name];if(s.sheenColorFactor!==void 0){const a=s.sheenColorFactor;t.sheenColor.setRGB(a[0],a[1],a[2],an)}return s.sheenRoughnessFactor!==void 0&&(t.sheenRoughness=s.sheenRoughnessFactor),s.sheenColorTexture!==void 0&&o.push(n.assignTexture(t,"sheenColorMap",s.sheenColorTexture,Gt)),s.sheenRoughnessTexture!==void 0&&o.push(n.assignTexture(t,"sheenRoughnessMap",s.sheenRoughnessTexture)),Promise.all(o)}}class pg{constructor(e){this.parser=e,this.name=Ze.KHR_MATERIALS_TRANSMISSION}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:qn}extendMaterialParams(e,t){const n=this.parser,i=n.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const o=[],s=i.extensions[this.name];return s.transmissionFactor!==void 0&&(t.transmission=s.transmissionFactor),s.transmissionTexture!==void 0&&o.push(n.assignTexture(t,"transmissionMap",s.transmissionTexture)),Promise.all(o)}}class fg{constructor(e){this.parser=e,this.name=Ze.KHR_MATERIALS_VOLUME}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:qn}extendMaterialParams(e,t){const n=this.parser,i=n.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const o=[],s=i.extensions[this.name];t.thickness=s.thicknessFactor!==void 0?s.thicknessFactor:0,s.thicknessTexture!==void 0&&o.push(n.assignTexture(t,"thicknessMap",s.thicknessTexture)),t.attenuationDistance=s.attenuationDistance||1/0;const a=s.attenuationColor||[1,1,1];return t.attenuationColor=new Ue().setRGB(a[0],a[1],a[2],an),Promise.all(o)}}class mg{constructor(e){this.parser=e,this.name=Ze.KHR_MATERIALS_IOR}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:qn}extendMaterialParams(e,t){const i=this.parser.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const o=i.extensions[this.name];return t.ior=o.ior!==void 0?o.ior:1.5,Promise.resolve()}}class bg{constructor(e){this.parser=e,this.name=Ze.KHR_MATERIALS_SPECULAR}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:qn}extendMaterialParams(e,t){const n=this.parser,i=n.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const o=[],s=i.extensions[this.name];t.specularIntensity=s.specularFactor!==void 0?s.specularFactor:1,s.specularTexture!==void 0&&o.push(n.assignTexture(t,"specularIntensityMap",s.specularTexture));const a=s.specularColorFactor||[1,1,1];return t.specularColor=new Ue().setRGB(a[0],a[1],a[2],an),s.specularColorTexture!==void 0&&o.push(n.assignTexture(t,"specularColorMap",s.specularColorTexture,Gt)),Promise.all(o)}}class yg{constructor(e){this.parser=e,this.name=Ze.EXT_MATERIALS_BUMP}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:qn}extendMaterialParams(e,t){const n=this.parser,i=n.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const o=[],s=i.extensions[this.name];return t.bumpScale=s.bumpFactor!==void 0?s.bumpFactor:1,s.bumpTexture!==void 0&&o.push(n.assignTexture(t,"bumpMap",s.bumpTexture)),Promise.all(o)}}class gg{constructor(e){this.parser=e,this.name=Ze.KHR_MATERIALS_ANISOTROPY}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:qn}extendMaterialParams(e,t){const n=this.parser,i=n.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const o=[],s=i.extensions[this.name];return s.anisotropyStrength!==void 0&&(t.anisotropy=s.anisotropyStrength),s.anisotropyRotation!==void 0&&(t.anisotropyRotation=s.anisotropyRotation),s.anisotropyTexture!==void 0&&o.push(n.assignTexture(t,"anisotropyMap",s.anisotropyTexture)),Promise.all(o)}}class wg{constructor(e){this.parser=e,this.name=Ze.KHR_TEXTURE_BASISU}loadTexture(e){const t=this.parser,n=t.json,i=n.textures[e];if(!i.extensions||!i.extensions[this.name])return null;const o=i.extensions[this.name],s=t.options.ktx2Loader;if(!s){if(n.extensionsRequired&&n.extensionsRequired.indexOf(this.name)>=0)throw new Error("THREE.GLTFLoader: setKTX2Loader must be called before loading KTX2 textures");return null}return t.loadTextureImage(e,o.source,s)}}class xg{constructor(e){this.parser=e,this.name=Ze.EXT_TEXTURE_WEBP}loadTexture(e){const t=this.name,n=this.parser,i=n.json,o=i.textures[e];if(!o.extensions||!o.extensions[t])return null;const s=o.extensions[t],a=i.images[s.source];let c=n.textureLoader;if(a.uri){const l=n.options.manager.getHandler(a.uri);l!==null&&(c=l)}return n.loadTextureImage(e,s.source,c)}}class vg{constructor(e){this.parser=e,this.name=Ze.EXT_TEXTURE_AVIF}loadTexture(e){const t=this.name,n=this.parser,i=n.json,o=i.textures[e];if(!o.extensions||!o.extensions[t])return null;const s=o.extensions[t],a=i.images[s.source];let c=n.textureLoader;if(a.uri){const l=n.options.manager.getHandler(a.uri);l!==null&&(c=l)}return n.loadTextureImage(e,s.source,c)}}class Tg{constructor(e){this.name=Ze.EXT_MESHOPT_COMPRESSION,this.parser=e}loadBufferView(e){const t=this.parser.json,n=t.bufferViews[e];if(n.extensions&&n.extensions[this.name]){const i=n.extensions[this.name],o=this.parser.getDependency("buffer",i.buffer),s=this.parser.options.meshoptDecoder;if(!s||!s.supported){if(t.extensionsRequired&&t.extensionsRequired.indexOf(this.name)>=0)throw new Error("THREE.GLTFLoader: setMeshoptDecoder must be called before loading compressed files");return null}return o.then(function(a){const c=i.byteOffset||0,l=i.byteLength||0,d=i.count,u=i.byteStride,h=new Uint8Array(a,c,l);return s.decodeGltfBufferAsync?s.decodeGltfBufferAsync(d,u,h,i.mode,i.filter).then(function(f){return f.buffer}):s.ready.then(function(){const f=new ArrayBuffer(d*u);return s.decodeGltfBuffer(new Uint8Array(f),d,u,h,i.mode,i.filter),f})})}else return null}}class Sg{constructor(e){this.name=Ze.EXT_MESH_GPU_INSTANCING,this.parser=e}createNodeMesh(e){const t=this.parser.json,n=t.nodes[e];if(!n.extensions||!n.extensions[this.name]||n.mesh===void 0)return null;const i=t.meshes[n.mesh];for(const l of i.primitives)if(l.mode!==Tn.TRIANGLES&&l.mode!==Tn.TRIANGLE_STRIP&&l.mode!==Tn.TRIANGLE_FAN&&l.mode!==void 0)return null;const s=n.extensions[this.name].attributes,a=[],c={};for(const l in s)a.push(this.parser.getDependency("accessor",s[l]).then(d=>(c[l]=d,c[l])));return a.length<1?null:(a.push(this.parser.createNodeMesh(e)),Promise.all(a).then(l=>{const d=l.pop(),u=d.isGroup?d.children:[d],h=l[0].count,f=[];for(const g of u){const w=new He,y=new A,m=new Rt,P=new A(1,1,1),E=new zr(g.geometry,g.material,h);for(let S=0;S<h;S++)c.TRANSLATION&&y.fromBufferAttribute(c.TRANSLATION,S),c.ROTATION&&m.fromBufferAttribute(c.ROTATION,S),c.SCALE&&P.fromBufferAttribute(c.SCALE,S),E.setMatrixAt(S,w.compose(y,m,P));for(const S in c)if(S==="_COLOR_0"){const D=c[S];E.instanceColor=new fl(D.array,D.itemSize,D.normalized)}else S!=="TRANSLATION"&&S!=="ROTATION"&&S!=="SCALE"&&g.geometry.setAttribute(S,c[S]);Tt.prototype.copy.call(E,g),this.parser.assignFinalMaterial(E),f.push(E)}return d.isGroup?(d.clear(),d.add(...f),d):f[0]}))}}const Kh="glTF",eo=12,q0={JSON:1313821514,BIN:5130562};class Mg{constructor(e){this.name=Ze.KHR_BINARY_GLTF,this.content=null,this.body=null;const t=new DataView(e,0,eo),n=new TextDecoder;if(this.header={magic:n.decode(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==Kh)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");const i=this.header.length-eo,o=new DataView(e,eo);let s=0;for(;s<i;){const a=o.getUint32(s,!0);s+=4;const c=o.getUint32(s,!0);if(s+=4,c===q0.JSON){const l=new Uint8Array(e,eo+s,a);this.content=n.decode(l)}else if(c===q0.BIN){const l=eo+s;this.body=e.slice(l,l+a)}s+=a}if(this.content===null)throw new Error("THREE.GLTFLoader: JSON content not found.")}}class Eg{constructor(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=Ze.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}decodePrimitive(e,t){const n=this.json,i=this.dracoLoader,o=e.extensions[this.name].bufferView,s=e.extensions[this.name].attributes,a={},c={},l={};for(const d in s){const u=gl[d]||d.toLowerCase();a[u]=s[d]}for(const d in e.attributes){const u=gl[d]||d.toLowerCase();if(s[d]!==void 0){const h=n.accessors[e.attributes[d]],f=Rr[h.componentType];l[u]=f.name,c[u]=h.normalized===!0}}return t.getDependency("bufferView",o).then(function(d){return new Promise(function(u,h){i.decodeDracoFile(d,function(f){for(const g in f.attributes){const w=f.attributes[g],y=c[g];y!==void 0&&(w.normalized=y)}u(f)},a,l,an,h)})})}}class Rg{constructor(){this.name=Ze.KHR_TEXTURE_TRANSFORM}extendTexture(e,t){return(t.texCoord===void 0||t.texCoord===e.channel)&&t.offset===void 0&&t.rotation===void 0&&t.scale===void 0||(e=e.clone(),t.texCoord!==void 0&&(e.channel=t.texCoord),t.offset!==void 0&&e.offset.fromArray(t.offset),t.rotation!==void 0&&(e.rotation=t.rotation),t.scale!==void 0&&e.repeat.fromArray(t.scale),e.needsUpdate=!0),e}}class Pg{constructor(){this.name=Ze.KHR_MESH_QUANTIZATION}}class Jh extends Oo{constructor(e,t,n,i){super(e,t,n,i)}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,i=this.valueSize,o=e*i*3+i;for(let s=0;s!==i;s++)t[s]=n[o+s];return t}interpolate_(e,t,n,i){const o=this.resultBuffer,s=this.sampleValues,a=this.valueSize,c=a*2,l=a*3,d=i-t,u=(n-t)/d,h=u*u,f=h*u,g=e*l,w=g-l,y=-2*f+3*h,m=f-h,P=1-y,E=m-h+u;for(let S=0;S!==a;S++){const D=s[w+S+a],H=s[w+S+c]*d,I=s[g+S+a],z=s[g+S]*d;o[S]=P*D+E*H+y*I+m*z}return o}}const Lg=new Rt;class Ag extends Jh{interpolate_(e,t,n,i){const o=super.interpolate_(e,t,n,i);return Lg.fromArray(o).normalize().toArray(o),o}}const Tn={POINTS:0,LINES:1,LINE_LOOP:2,LINE_STRIP:3,TRIANGLES:4,TRIANGLE_STRIP:5,TRIANGLE_FAN:6},Rr={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},K0={9728:rn,9729:bn,9984:mh,9985:Ms,9986:ao,9987:oi},J0={33071:Mi,33648:Ds,10497:Hr},Ya={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},gl={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv1",TEXCOORD_2:"uv2",TEXCOORD_3:"uv3",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},xi={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},Hg={CUBICSPLINE:void 0,LINEAR:So,STEP:To},qa={OPAQUE:"OPAQUE",MASK:"MASK",BLEND:"BLEND"};function Ig(r){return r.DefaultMaterial===void 0&&(r.DefaultMaterial=new Ur({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:ci})),r.DefaultMaterial}function ji(r,e,t){for(const n in t.extensions)r[n]===void 0&&(e.userData.gltfExtensions=e.userData.gltfExtensions||{},e.userData.gltfExtensions[n]=t.extensions[n])}function ri(r,e){e.extras!==void 0&&(typeof e.extras=="object"?Object.assign(r.userData,e.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+e.extras))}function Ng(r,e,t){let n=!1,i=!1,o=!1;for(let l=0,d=e.length;l<d;l++){const u=e[l];if(u.POSITION!==void 0&&(n=!0),u.NORMAL!==void 0&&(i=!0),u.COLOR_0!==void 0&&(o=!0),n&&i&&o)break}if(!n&&!i&&!o)return Promise.resolve(r);const s=[],a=[],c=[];for(let l=0,d=e.length;l<d;l++){const u=e[l];if(n){const h=u.POSITION!==void 0?t.getDependency("accessor",u.POSITION):r.attributes.position;s.push(h)}if(i){const h=u.NORMAL!==void 0?t.getDependency("accessor",u.NORMAL):r.attributes.normal;a.push(h)}if(o){const h=u.COLOR_0!==void 0?t.getDependency("accessor",u.COLOR_0):r.attributes.color;c.push(h)}}return Promise.all([Promise.all(s),Promise.all(a),Promise.all(c)]).then(function(l){const d=l[0],u=l[1],h=l[2];return n&&(r.morphAttributes.position=d),i&&(r.morphAttributes.normal=u),o&&(r.morphAttributes.color=h),r.morphTargetsRelative=!0,r})}function Og(r,e){if(r.updateMorphTargets(),e.weights!==void 0)for(let t=0,n=e.weights.length;t<n;t++)r.morphTargetInfluences[t]=e.weights[t];if(e.extras&&Array.isArray(e.extras.targetNames)){const t=e.extras.targetNames;if(r.morphTargetInfluences.length===t.length){r.morphTargetDictionary={};for(let n=0,i=t.length;n<i;n++)r.morphTargetDictionary[t[n]]=n}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function Cg(r){let e;const t=r.extensions&&r.extensions[Ze.KHR_DRACO_MESH_COMPRESSION];if(t?e="draco:"+t.bufferView+":"+t.indices+":"+Ka(t.attributes):e=r.indices+":"+Ka(r.attributes)+":"+r.mode,r.targets!==void 0)for(let n=0,i=r.targets.length;n<i;n++)e+=":"+Ka(r.targets[n]);return e}function Ka(r){let e="";const t=Object.keys(r).sort();for(let n=0,i=t.length;n<i;n++)e+=t[n]+":"+r[t[n]]+";";return e}function wl(r){switch(r){case Int8Array:return 1/127;case Uint8Array:return 1/255;case Int16Array:return 1/32767;case Uint16Array:return 1/65535;default:throw new Error("THREE.GLTFLoader: Unsupported normalized accessor component type.")}}function Dg(r){return r.search(/\.jpe?g($|\?)/i)>0||r.search(/^data\:image\/jpeg/)===0?"image/jpeg":r.search(/\.webp($|\?)/i)>0||r.search(/^data\:image\/webp/)===0?"image/webp":r.search(/\.ktx2($|\?)/i)>0||r.search(/^data\:image\/ktx2/)===0?"image/ktx2":"image/png"}const _g=new He;class zg{constructor(e={},t={}){this.json=e,this.extensions={},this.plugins={},this.options=t,this.cache=new og,this.associations=new Map,this.primitiveCache={},this.nodeCache={},this.meshCache={refs:{},uses:{}},this.cameraCache={refs:{},uses:{}},this.lightCache={refs:{},uses:{}},this.sourceCache={},this.textureCache={},this.nodeNamesUsed={};let n=!1,i=-1,o=!1,s=-1;if(typeof navigator<"u"){const a=navigator.userAgent;n=/^((?!chrome|android).)*safari/i.test(a)===!0;const c=a.match(/Version\/(\d+)/);i=n&&c?parseInt(c[1],10):-1,o=a.indexOf("Firefox")>-1,s=o?a.match(/Firefox\/([0-9]+)\./)[1]:-1}typeof createImageBitmap>"u"||n&&i<17||o&&s<98?this.textureLoader=new _1(this.options.manager):this.textureLoader=new X1(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.textureLoader.setRequestHeader(this.options.requestHeader),this.fileLoader=new Vh(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),this.options.crossOrigin==="use-credentials"&&this.fileLoader.setWithCredentials(!0)}setExtensions(e){this.extensions=e}setPlugins(e){this.plugins=e}parse(e,t){const n=this,i=this.json,o=this.extensions;this.cache.removeAll(),this.nodeCache={},this._invokeAll(function(s){return s._markDefs&&s._markDefs()}),Promise.all(this._invokeAll(function(s){return s.beforeRoot&&s.beforeRoot()})).then(function(){return Promise.all([n.getDependencies("scene"),n.getDependencies("animation"),n.getDependencies("camera")])}).then(function(s){const a={scene:s[0][i.scene||0],scenes:s[0],animations:s[1],cameras:s[2],asset:i.asset,parser:n,userData:{}};return ji(o,a,i),ri(a,i),Promise.all(n._invokeAll(function(c){return c.afterRoot&&c.afterRoot(a)})).then(function(){for(const c of a.scenes)c.updateMatrixWorld();e(a)})}).catch(t)}_markDefs(){const e=this.json.nodes||[],t=this.json.skins||[],n=this.json.meshes||[];for(let i=0,o=t.length;i<o;i++){const s=t[i].joints;for(let a=0,c=s.length;a<c;a++)e[s[a]].isBone=!0}for(let i=0,o=e.length;i<o;i++){const s=e[i];s.mesh!==void 0&&(this._addNodeRef(this.meshCache,s.mesh),s.skin!==void 0&&(n[s.mesh].isSkinnedMesh=!0)),s.camera!==void 0&&this._addNodeRef(this.cameraCache,s.camera)}}_addNodeRef(e,t){t!==void 0&&(e.refs[t]===void 0&&(e.refs[t]=e.uses[t]=0),e.refs[t]++)}_getNodeRef(e,t,n){if(e.refs[t]<=1)return n;const i=n.clone(),o=(s,a)=>{const c=this.associations.get(s);c!=null&&this.associations.set(a,c);for(const[l,d]of s.children.entries())o(d,a.children[l])};return o(n,i),i.name+="_instance_"+e.uses[t]++,i}_invokeOne(e){const t=Object.values(this.plugins);t.push(this);for(let n=0;n<t.length;n++){const i=e(t[n]);if(i)return i}return null}_invokeAll(e){const t=Object.values(this.plugins);t.unshift(this);const n=[];for(let i=0;i<t.length;i++){const o=e(t[i]);o&&n.push(o)}return n}getDependency(e,t){const n=e+":"+t;let i=this.cache.get(n);if(!i){switch(e){case"scene":i=this.loadScene(t);break;case"node":i=this._invokeOne(function(o){return o.loadNode&&o.loadNode(t)});break;case"mesh":i=this._invokeOne(function(o){return o.loadMesh&&o.loadMesh(t)});break;case"accessor":i=this.loadAccessor(t);break;case"bufferView":i=this._invokeOne(function(o){return o.loadBufferView&&o.loadBufferView(t)});break;case"buffer":i=this.loadBuffer(t);break;case"material":i=this._invokeOne(function(o){return o.loadMaterial&&o.loadMaterial(t)});break;case"texture":i=this._invokeOne(function(o){return o.loadTexture&&o.loadTexture(t)});break;case"skin":i=this.loadSkin(t);break;case"animation":i=this._invokeOne(function(o){return o.loadAnimation&&o.loadAnimation(t)});break;case"camera":i=this.loadCamera(t);break;default:if(i=this._invokeOne(function(o){return o!=this&&o.getDependency&&o.getDependency(e,t)}),!i)throw new Error("Unknown type: "+e);break}this.cache.add(n,i)}return i}getDependencies(e){let t=this.cache.get(e);if(!t){const n=this,i=this.json[e+(e==="mesh"?"es":"s")]||[];t=Promise.all(i.map(function(o,s){return n.getDependency(e,s)})),this.cache.add(e,t)}return t}loadBuffer(e){const t=this.json.buffers[e],n=this.fileLoader;if(t.type&&t.type!=="arraybuffer")throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(t.uri===void 0&&e===0)return Promise.resolve(this.extensions[Ze.KHR_BINARY_GLTF].body);const i=this.options;return new Promise(function(o,s){n.load(ho.resolveURL(t.uri,i.path),o,void 0,function(){s(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))})})}loadBufferView(e){const t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then(function(n){const i=t.byteLength||0,o=t.byteOffset||0;return n.slice(o,o+i)})}loadAccessor(e){const t=this,n=this.json,i=this.json.accessors[e];if(i.bufferView===void 0&&i.sparse===void 0){const s=Ya[i.type],a=Rr[i.componentType],c=i.normalized===!0,l=new a(i.count*s);return Promise.resolve(new on(l,s,c))}const o=[];return i.bufferView!==void 0?o.push(this.getDependency("bufferView",i.bufferView)):o.push(null),i.sparse!==void 0&&(o.push(this.getDependency("bufferView",i.sparse.indices.bufferView)),o.push(this.getDependency("bufferView",i.sparse.values.bufferView))),Promise.all(o).then(function(s){const a=s[0],c=Ya[i.type],l=Rr[i.componentType],d=l.BYTES_PER_ELEMENT,u=d*c,h=i.byteOffset||0,f=i.bufferView!==void 0?n.bufferViews[i.bufferView].byteStride:void 0,g=i.normalized===!0;let w,y;if(f&&f!==u){const m=Math.floor(h/f),P="InterleavedBuffer:"+i.bufferView+":"+i.componentType+":"+m+":"+i.count;let E=t.cache.get(P);E||(w=new l(a,m*f,i.count*f/d),E=new u1(w,f/d),t.cache.add(P,E)),y=new Gl(E,c,h%f/d,g)}else a===null?w=new l(i.count*c):w=new l(a,h,i.count*c),y=new on(w,c,g);if(i.sparse!==void 0){const m=Ya.SCALAR,P=Rr[i.sparse.indices.componentType],E=i.sparse.indices.byteOffset||0,S=i.sparse.values.byteOffset||0,D=new P(s[1],E,i.sparse.count*m),H=new l(s[2],S,i.sparse.count*c);a!==null&&(y=new on(y.array.slice(),y.itemSize,y.normalized)),y.normalized=!1;for(let I=0,z=D.length;I<z;I++){const M=D[I];if(y.setX(M,H[I*c]),c>=2&&y.setY(M,H[I*c+1]),c>=3&&y.setZ(M,H[I*c+2]),c>=4&&y.setW(M,H[I*c+3]),c>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}y.normalized=g}return y})}loadTexture(e){const t=this.json,n=this.options,o=t.textures[e].source,s=t.images[o];let a=this.textureLoader;if(s.uri){const c=n.manager.getHandler(s.uri);c!==null&&(a=c)}return this.loadTextureImage(e,o,a)}loadTextureImage(e,t,n){const i=this,o=this.json,s=o.textures[e],a=o.images[t],c=(a.uri||a.bufferView)+":"+s.sampler;if(this.textureCache[c])return this.textureCache[c];const l=this.loadImageSource(t,n).then(function(d){d.flipY=!1,d.name=s.name||a.name||"",d.name===""&&typeof a.uri=="string"&&a.uri.startsWith("data:image/")===!1&&(d.name=a.uri);const h=(o.samplers||{})[s.sampler]||{};return d.magFilter=K0[h.magFilter]||bn,d.minFilter=K0[h.minFilter]||oi,d.wrapS=J0[h.wrapS]||Hr,d.wrapT=J0[h.wrapT]||Hr,d.generateMipmaps=!d.isCompressedTexture&&d.minFilter!==rn&&d.minFilter!==bn,i.associations.set(d,{textures:e}),d}).catch(function(){return null});return this.textureCache[c]=l,l}loadImageSource(e,t){const n=this,i=this.json,o=this.options;if(this.sourceCache[e]!==void 0)return this.sourceCache[e].then(u=>u.clone());const s=i.images[e],a=self.URL||self.webkitURL;let c=s.uri||"",l=!1;if(s.bufferView!==void 0)c=n.getDependency("bufferView",s.bufferView).then(function(u){l=!0;const h=new Blob([u],{type:s.mimeType});return c=a.createObjectURL(h),c});else if(s.uri===void 0)throw new Error("THREE.GLTFLoader: Image "+e+" is missing URI and bufferView");const d=Promise.resolve(c).then(function(u){return new Promise(function(h,f){let g=h;t.isImageBitmapLoader===!0&&(g=function(w){const y=new kt(w);y.needsUpdate=!0,h(y)}),t.load(ho.resolveURL(u,o.path),g,void 0,f)})}).then(function(u){return l===!0&&a.revokeObjectURL(c),ri(u,s),u.userData.mimeType=s.mimeType||Dg(s.uri),u}).catch(function(u){throw console.error("THREE.GLTFLoader: Couldn't load texture",c),u});return this.sourceCache[e]=d,d}assignTexture(e,t,n,i){const o=this;return this.getDependency("texture",n.index).then(function(s){if(!s)return null;if(n.texCoord!==void 0&&n.texCoord>0&&(s=s.clone(),s.channel=n.texCoord),o.extensions[Ze.KHR_TEXTURE_TRANSFORM]){const a=n.extensions!==void 0?n.extensions[Ze.KHR_TEXTURE_TRANSFORM]:void 0;if(a){const c=o.associations.get(s);s=o.extensions[Ze.KHR_TEXTURE_TRANSFORM].extendTexture(s,a),o.associations.set(s,c)}}return i!==void 0&&(s.colorSpace=i),e[t]=s,s})}assignFinalMaterial(e){const t=e.geometry;let n=e.material;const i=t.attributes.tangent===void 0,o=t.attributes.color!==void 0,s=t.attributes.normal===void 0;if(e.isPoints){const a="PointsMaterial:"+n.uuid;let c=this.cache.get(a);c||(c=new zh,Bn.prototype.copy.call(c,n),c.color.copy(n.color),c.map=n.map,c.sizeAttenuation=!1,this.cache.add(a,c)),n=c}else if(e.isLine){const a="LineBasicMaterial:"+n.uuid;let c=this.cache.get(a);c||(c=new Ks,Bn.prototype.copy.call(c,n),c.color.copy(n.color),c.map=n.map,this.cache.add(a,c)),n=c}if(i||o||s){let a="ClonedMaterial:"+n.uuid+":";i&&(a+="derivative-tangents:"),o&&(a+="vertex-colors:"),s&&(a+="flat-shading:");let c=this.cache.get(a);c||(c=n.clone(),o&&(c.vertexColors=!0),s&&(c.flatShading=!0),i&&(c.normalScale&&(c.normalScale.y*=-1),c.clearcoatNormalScale&&(c.clearcoatNormalScale.y*=-1)),this.cache.add(a,c),this.associations.set(c,this.associations.get(n))),n=c}e.material=n}getMaterialType(){return Ur}loadMaterial(e){const t=this,n=this.json,i=this.extensions,o=n.materials[e];let s;const a={},c=o.extensions||{},l=[];if(c[Ze.KHR_MATERIALS_UNLIT]){const u=i[Ze.KHR_MATERIALS_UNLIT];s=u.getMaterialType(),l.push(u.extendParams(a,o,t))}else{const u=o.pbrMetallicRoughness||{};if(a.color=new Ue(1,1,1),a.opacity=1,Array.isArray(u.baseColorFactor)){const h=u.baseColorFactor;a.color.setRGB(h[0],h[1],h[2],an),a.opacity=h[3]}u.baseColorTexture!==void 0&&l.push(t.assignTexture(a,"map",u.baseColorTexture,Gt)),a.metalness=u.metallicFactor!==void 0?u.metallicFactor:1,a.roughness=u.roughnessFactor!==void 0?u.roughnessFactor:1,u.metallicRoughnessTexture!==void 0&&(l.push(t.assignTexture(a,"metalnessMap",u.metallicRoughnessTexture)),l.push(t.assignTexture(a,"roughnessMap",u.metallicRoughnessTexture))),s=this._invokeOne(function(h){return h.getMaterialType&&h.getMaterialType(e)}),l.push(Promise.all(this._invokeAll(function(h){return h.extendMaterialParams&&h.extendMaterialParams(e,a)})))}o.doubleSided===!0&&(a.side=Wn);const d=o.alphaMode||qa.OPAQUE;if(d===qa.BLEND?(a.transparent=!0,a.depthWrite=!1):(a.transparent=!1,d===qa.MASK&&(a.alphaTest=o.alphaCutoff!==void 0?o.alphaCutoff:.5)),o.normalTexture!==void 0&&s!==Bi&&(l.push(t.assignTexture(a,"normalMap",o.normalTexture)),a.normalScale=new Oe(1,1),o.normalTexture.scale!==void 0)){const u=o.normalTexture.scale;a.normalScale.set(u,u)}if(o.occlusionTexture!==void 0&&s!==Bi&&(l.push(t.assignTexture(a,"aoMap",o.occlusionTexture)),o.occlusionTexture.strength!==void 0&&(a.aoMapIntensity=o.occlusionTexture.strength)),o.emissiveFactor!==void 0&&s!==Bi){const u=o.emissiveFactor;a.emissive=new Ue().setRGB(u[0],u[1],u[2],an)}return o.emissiveTexture!==void 0&&s!==Bi&&l.push(t.assignTexture(a,"emissiveMap",o.emissiveTexture,Gt)),Promise.all(l).then(function(){const u=new s(a);return o.name&&(u.name=o.name),ri(u,o),t.associations.set(u,{materials:e}),o.extensions&&ji(i,u,o),u})}createUniqueName(e){const t=lt.sanitizeNodeName(e||"");return t in this.nodeNamesUsed?t+"_"+ ++this.nodeNamesUsed[t]:(this.nodeNamesUsed[t]=0,t)}loadGeometries(e){const t=this,n=this.extensions,i=this.primitiveCache;function o(a){return n[Ze.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(a,t).then(function(c){return Q0(c,a,t)})}const s=[];for(let a=0,c=e.length;a<c;a++){const l=e[a],d=Cg(l),u=i[d];if(u)s.push(u.promise);else{let h;l.extensions&&l.extensions[Ze.KHR_DRACO_MESH_COMPRESSION]?h=o(l):h=Q0(new un,l,t),i[d]={primitive:l,promise:h},s.push(h)}}return Promise.all(s)}loadMesh(e){const t=this,n=this.json,i=this.extensions,o=n.meshes[e],s=o.primitives,a=[];for(let c=0,l=s.length;c<l;c++){const d=s[c].material===void 0?Ig(this.cache):this.getDependency("material",s[c].material);a.push(d)}return a.push(t.loadGeometries(s)),Promise.all(a).then(function(c){const l=c.slice(0,c.length-1),d=c[c.length-1],u=[];for(let f=0,g=d.length;f<g;f++){const w=d[f],y=s[f];let m;const P=l[f];if(y.mode===Tn.TRIANGLES||y.mode===Tn.TRIANGLE_STRIP||y.mode===Tn.TRIANGLE_FAN||y.mode===void 0)m=o.isSkinnedMesh===!0?new p1(w,P):new Ht(w,P),m.isSkinnedMesh===!0&&m.normalizeSkinWeights(),y.mode===Tn.TRIANGLE_STRIP?m.geometry=Y0(m.geometry,Sh):y.mode===Tn.TRIANGLE_FAN&&(m.geometry=Y0(m.geometry,hl));else if(y.mode===Tn.LINES)m=new Kl(w,P);else if(y.mode===Tn.LINE_STRIP)m=new ql(w,P);else if(y.mode===Tn.LINE_LOOP)m=new g1(w,P);else if(y.mode===Tn.POINTS)m=new w1(w,P);else throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+y.mode);Object.keys(m.geometry.morphAttributes).length>0&&Og(m,o),m.name=t.createUniqueName(o.name||"mesh_"+e),ri(m,o),y.extensions&&ji(i,m,y),t.assignFinalMaterial(m),u.push(m)}for(let f=0,g=u.length;f<g;f++)t.associations.set(u[f],{meshes:e,primitives:f});if(u.length===1)return o.extensions&&ji(i,u[0],o),u[0];const h=new Ei;o.extensions&&ji(i,h,o),t.associations.set(h,{meshes:e});for(let f=0,g=u.length;f<g;f++)h.add(u[f]);return h})}loadCamera(e){let t;const n=this.json.cameras[e],i=n[n.type];if(!i){console.warn("THREE.GLTFLoader: Missing camera parameters.");return}return n.type==="perspective"?t=new nn(Rh.radToDeg(i.yfov),i.aspectRatio||1,i.znear||1,i.zfar||2e6):n.type==="orthographic"&&(t=new Ql(-i.xmag,i.xmag,i.ymag,-i.ymag,i.znear,i.zfar)),n.name&&(t.name=this.createUniqueName(n.name)),ri(t,n),Promise.resolve(t)}loadSkin(e){const t=this.json.skins[e],n=[];for(let i=0,o=t.joints.length;i<o;i++)n.push(this._loadNodeShallow(t.joints[i]));return t.inverseBindMatrices!==void 0?n.push(this.getDependency("accessor",t.inverseBindMatrices)):n.push(null),Promise.all(n).then(function(i){const o=i.pop(),s=i,a=[],c=[];for(let l=0,d=s.length;l<d;l++){const u=s[l];if(u){a.push(u);const h=new He;o!==null&&h.fromArray(o.array,l*16),c.push(h)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[l])}return new Zl(a,c)})}loadAnimation(e){const t=this.json,n=this,i=t.animations[e],o=i.name?i.name:"animation_"+e,s=[],a=[],c=[],l=[],d=[];for(let u=0,h=i.channels.length;u<h;u++){const f=i.channels[u],g=i.samplers[f.sampler],w=f.target,y=w.node,m=i.parameters!==void 0?i.parameters[g.input]:g.input,P=i.parameters!==void 0?i.parameters[g.output]:g.output;w.node!==void 0&&(s.push(this.getDependency("node",y)),a.push(this.getDependency("accessor",m)),c.push(this.getDependency("accessor",P)),l.push(g),d.push(w))}return Promise.all([Promise.all(s),Promise.all(a),Promise.all(c),Promise.all(l),Promise.all(d)]).then(function(u){const h=u[0],f=u[1],g=u[2],w=u[3],y=u[4],m=[];for(let P=0,E=h.length;P<E;P++){const S=h[P],D=f[P],H=g[P],I=w[P],z=y[P];if(S===void 0)continue;S.updateMatrix&&S.updateMatrix();const M=n._createAnimationTracks(S,D,H,I,z);if(M)for(let T=0;T<M.length;T++)m.push(M[T])}return new A1(o,void 0,m)})}createNodeMesh(e){const t=this.json,n=this,i=t.nodes[e];return i.mesh===void 0?null:n.getDependency("mesh",i.mesh).then(function(o){const s=n._getNodeRef(n.meshCache,i.mesh,o);return i.weights!==void 0&&s.traverse(function(a){if(a.isMesh)for(let c=0,l=i.weights.length;c<l;c++)a.morphTargetInfluences[c]=i.weights[c]}),s})}loadNode(e){const t=this.json,n=this,i=t.nodes[e],o=n._loadNodeShallow(e),s=[],a=i.children||[];for(let l=0,d=a.length;l<d;l++)s.push(n.getDependency("node",a[l]));const c=i.skin===void 0?Promise.resolve(null):n.getDependency("skin",i.skin);return Promise.all([o,Promise.all(s),c]).then(function(l){const d=l[0],u=l[1],h=l[2];h!==null&&d.traverse(function(f){f.isSkinnedMesh&&f.bind(h,_g)});for(let f=0,g=u.length;f<g;f++)d.add(u[f]);return d})}_loadNodeShallow(e){const t=this.json,n=this.extensions,i=this;if(this.nodeCache[e]!==void 0)return this.nodeCache[e];const o=t.nodes[e],s=o.name?i.createUniqueName(o.name):"",a=[],c=i._invokeOne(function(l){return l.createNodeMesh&&l.createNodeMesh(e)});return c&&a.push(c),o.camera!==void 0&&a.push(i.getDependency("camera",o.camera).then(function(l){return i._getNodeRef(i.cameraCache,o.camera,l)})),i._invokeAll(function(l){return l.createNodeAttachment&&l.createNodeAttachment(e)}).forEach(function(l){a.push(l)}),this.nodeCache[e]=Promise.all(a).then(function(l){let d;if(o.isBone===!0?d=new Dh:l.length>1?d=new Ei:l.length===1?d=l[0]:d=new Tt,d!==l[0])for(let u=0,h=l.length;u<h;u++)d.add(l[u]);if(o.name&&(d.userData.name=o.name,d.name=s),ri(d,o),o.extensions&&ji(n,d,o),o.matrix!==void 0){const u=new He;u.fromArray(o.matrix),d.applyMatrix4(u)}else o.translation!==void 0&&d.position.fromArray(o.translation),o.rotation!==void 0&&d.quaternion.fromArray(o.rotation),o.scale!==void 0&&d.scale.fromArray(o.scale);return i.associations.has(d)||i.associations.set(d,{}),i.associations.get(d).nodes=e,d}),this.nodeCache[e]}loadScene(e){const t=this.extensions,n=this.json.scenes[e],i=this,o=new Ei;n.name&&(o.name=i.createUniqueName(n.name)),ri(o,n),n.extensions&&ji(t,o,n);const s=n.nodes||[],a=[];for(let c=0,l=s.length;c<l;c++)a.push(i.getDependency("node",s[c]));return Promise.all(a).then(function(c){for(let d=0,u=c.length;d<u;d++)o.add(c[d]);const l=d=>{const u=new Map;for(const[h,f]of i.associations)(h instanceof Bn||h instanceof kt)&&u.set(h,f);return d.traverse(h=>{const f=i.associations.get(h);f!=null&&u.set(h,f)}),u};return i.associations=l(o),o})}_createAnimationTracks(e,t,n,i,o){const s=[],a=e.name?e.name:e.uuid,c=[];xi[o.path]===xi.weights?e.traverse(function(h){h.morphTargetInfluences&&c.push(h.name?h.name:h.uuid)}):c.push(a);let l;switch(xi[o.path]){case xi.weights:l=Or;break;case xi.rotation:l=Cr;break;case xi.translation:case xi.scale:l=Dr;break;default:switch(n.itemSize){case 1:l=Or;break;case 2:case 3:default:l=Dr;break}break}const d=i.interpolation!==void 0?Hg[i.interpolation]:So,u=this._getArrayFromAccessor(n);for(let h=0,f=c.length;h<f;h++){const g=new l(c[h]+"."+xi[o.path],t.array,u,d);i.interpolation==="CUBICSPLINE"&&this._createCubicSplineTrackInterpolant(g),s.push(g)}return s}_getArrayFromAccessor(e){let t=e.array;if(e.normalized){const n=wl(t.constructor),i=new Float32Array(t.length);for(let o=0,s=t.length;o<s;o++)i[o]=t[o]*n;t=i}return t}_createCubicSplineTrackInterpolant(e){e.createInterpolant=function(n){const i=this instanceof Cr?Ag:Jh;return new i(this.times,this.values,this.getValueSize()/3,n)},e.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0}}function Ug(r,e,t){const n=e.attributes,i=new hi;if(n.POSITION!==void 0){const a=t.json.accessors[n.POSITION],c=a.min,l=a.max;if(c!==void 0&&l!==void 0){if(i.set(new A(c[0],c[1],c[2]),new A(l[0],l[1],l[2])),a.normalized){const d=wl(Rr[a.componentType]);i.min.multiplyScalar(d),i.max.multiplyScalar(d)}}else{console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.");return}}else return;const o=e.targets;if(o!==void 0){const a=new A,c=new A;for(let l=0,d=o.length;l<d;l++){const u=o[l];if(u.POSITION!==void 0){const h=t.json.accessors[u.POSITION],f=h.min,g=h.max;if(f!==void 0&&g!==void 0){if(c.setX(Math.max(Math.abs(f[0]),Math.abs(g[0]))),c.setY(Math.max(Math.abs(f[1]),Math.abs(g[1]))),c.setZ(Math.max(Math.abs(f[2]),Math.abs(g[2]))),h.normalized){const w=wl(Rr[h.componentType]);c.multiplyScalar(w)}a.max(c)}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}i.expandByVector(a)}r.boundingBox=i;const s=new Yn;i.getCenter(s.center),s.radius=i.min.distanceTo(i.max)/2,r.boundingSphere=s}function Q0(r,e,t){const n=e.attributes,i=[];function o(s,a){return t.getDependency("accessor",s).then(function(c){r.setAttribute(a,c)})}for(const s in n){const a=gl[s]||s.toLowerCase();a in r.attributes||i.push(o(n[s],a))}if(e.indices!==void 0&&!r.index){const s=t.getDependency("accessor",e.indices).then(function(a){r.setIndex(a)});i.push(s)}return Qe.workingColorSpace!==an&&"COLOR_0"in n&&console.warn(`THREE.GLTFLoader: Converting vertex colors from "srgb-linear" to "${Qe.workingColorSpace}" not supported.`),ri(r,e),Ug(r,e,t),Promise.all(i).then(function(){return e.targets!==void 0?Ng(r,e.targets,t):r})}const jg=""+new URL("rapier_wasm3d_bg-F-GQkyDT.wasm",import.meta.url).href,Fg=async(r={},e)=>{let t;if(e.startsWith("data:")){const n=e.replace(/^data:.*?base64,/,"");let i;if(typeof Buffer=="function"&&typeof Buffer.from=="function")i=Buffer.from(n,"base64");else if(typeof atob=="function"){const o=atob(n);i=new Uint8Array(o.length);for(let s=0;s<o.length;s++)i[s]=o.charCodeAt(s)}else throw new Error("Cannot decode base64-encoded data URL");t=await WebAssembly.instantiate(i,r)}else{const n=await fetch(e),i=n.headers.get("Content-Type")||"";if("instantiateStreaming"in WebAssembly&&i.startsWith("application/wasm"))t=await WebAssembly.instantiateStreaming(n,r);else{const o=await n.arrayBuffer();t=await WebAssembly.instantiate(o,r)}}return t.instance.exports};let p;function Vg(r){p=r}const Je=new Array(128).fill(void 0);Je.push(void 0,null,!0,!1);function st(r){return Je[r]}let po=Je.length;function Nt(r){po===Je.length&&Je.push(Je.length+1);const e=po;return po=Je[e],Je[e]=r,e}function id(r,e){try{return r.apply(this,e)}catch(t){p.__wbindgen_export_0(Nt(t))}}function Pe(r){return r==null}let mr=null;function Xt(){return(mr===null||mr.buffer.detached===!0||mr.buffer.detached===void 0&&mr.buffer!==p.memory.buffer)&&(mr=new DataView(p.memory.buffer)),mr}function Xg(r){r<132||(Je[r]=po,po=r)}function Eo(r){const e=st(r);return Xg(r),e}const kg=typeof TextDecoder>"u"?(0,module.require)("util").TextDecoder:TextDecoder;let Qh=new kg("utf-8",{ignoreBOM:!0,fatal:!0});Qh.decode();let fs=null;function Wg(){return(fs===null||fs.byteLength===0)&&(fs=new Uint8Array(p.memory.buffer)),fs}function Bg(r,e){return r=r>>>0,Qh.decode(Wg().subarray(r,r+e))}function L(r,e){if(!(r instanceof e))throw new Error(`expected instance of ${e.name}`)}let pt=128;function gt(r){if(pt==1)throw new Error("out of js stack");return Je[--pt]=r,pt}let ms=null;function Gg(){return(ms===null||ms.byteLength===0)&&(ms=new Int32Array(p.memory.buffer)),ms}function Zg(r,e){return r=r>>>0,Gg().subarray(r/4,r/4+e)}let bs=null;function $h(){return(bs===null||bs.byteLength===0)&&(bs=new Float32Array(p.memory.buffer)),bs}function $0(r,e){return r=r>>>0,$h().subarray(r/4,r/4+e)}let ys=null;function ep(){return(ys===null||ys.byteLength===0)&&(ys=new Uint32Array(p.memory.buffer)),ys}function Yg(r,e){return r=r>>>0,ep().subarray(r/4,r/4+e)}let tn=0;function to(r,e){const t=e(r.length*4,4)>>>0;return ep().set(r,t/4),tn=r.length,t}function vi(r,e){const t=e(r.length*4,4)>>>0;return $h().set(r,t/4),tn=r.length,t}const ta=Object.freeze({LinX:0,0:"LinX",LinY:1,1:"LinY",LinZ:2,2:"LinZ",AngX:3,3:"AngX",AngY:4,4:"AngY",AngZ:5,5:"AngZ"}),Cn=Object.freeze({Revolute:0,0:"Revolute",Fixed:1,1:"Fixed",Prismatic:2,2:"Prismatic",Rope:3,3:"Rope",Spring:4,4:"Spring",Spherical:5,5:"Spherical",Generic:6,6:"Generic"}),Ft=Object.freeze({Ball:0,0:"Ball",Cuboid:1,1:"Cuboid",Capsule:2,2:"Capsule",Segment:3,3:"Segment",Polyline:4,4:"Polyline",Triangle:5,5:"Triangle",TriMesh:6,6:"TriMesh",HeightField:7,7:"HeightField",Compound:8,8:"Compound",ConvexPolyhedron:9,9:"ConvexPolyhedron",Cylinder:10,10:"Cylinder",Cone:11,11:"Cone",RoundCuboid:12,12:"RoundCuboid",RoundTriangle:13,13:"RoundTriangle",RoundCylinder:14,14:"RoundCylinder",RoundCone:15,15:"RoundCone",RoundConvexPolyhedron:16,16:"RoundConvexPolyhedron",HalfSpace:17,17:"HalfSpace",Voxels:18,18:"Voxels"}),qg=Object.freeze({PseudoBall:0,0:"PseudoBall",PseudoCube:1,1:"PseudoCube"}),Ja=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawbroadphase_free(r>>>0,1));class Yi{static __wrap(e){e=e>>>0;const t=Object.create(Yi.prototype);return t.__wbg_ptr=e,Ja.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,Ja.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawbroadphase_free(e,0)}constructor(){const e=p.rawbroadphase_new();return this.__wbg_ptr=e>>>0,Ja.register(this,this.__wbg_ptr,this),this}}const eu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawccdsolver_free(r>>>0,1));class xl{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,eu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawccdsolver_free(e,0)}constructor(){const e=p.rawccdsolver_new();return this.__wbg_ptr=e>>>0,eu.register(this,this.__wbg_ptr,this),this}}const tu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawcharactercollision_free(r>>>0,1));class tp{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,tu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawcharactercollision_free(e,0)}constructor(){const e=p.rawcharactercollision_new();return this.__wbg_ptr=e>>>0,tu.register(this,this.__wbg_ptr,this),this}handle(){return p.rawcharactercollision_handle(this.__wbg_ptr)}translationDeltaApplied(){const e=p.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return O.__wrap(e)}translationDeltaRemaining(){const e=p.rawcharactercollision_translationDeltaRemaining(this.__wbg_ptr);return O.__wrap(e)}toi(){return p.rawcharactercollision_toi(this.__wbg_ptr)}worldWitness1(){const e=p.rawcharactercollision_worldWitness1(this.__wbg_ptr);return O.__wrap(e)}worldWitness2(){const e=p.rawcharactercollision_worldWitness2(this.__wbg_ptr);return O.__wrap(e)}worldNormal1(){const e=p.rawcharactercollision_worldNormal1(this.__wbg_ptr);return O.__wrap(e)}worldNormal2(){const e=p.rawcharactercollision_worldNormal2(this.__wbg_ptr);return O.__wrap(e)}}const Qa=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawcolliderset_free(r>>>0,1));class vt{static __wrap(e){e=e>>>0;const t=Object.create(vt.prototype);return t.__wbg_ptr=e,Qa.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,Qa.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawcolliderset_free(e,0)}coTranslation(e){const t=p.rawcolliderset_coTranslation(this.__wbg_ptr,e);return O.__wrap(t)}coRotation(e){const t=p.rawcolliderset_coRotation(this.__wbg_ptr,e);return ke.__wrap(t)}coSetTranslation(e,t,n,i){p.rawcolliderset_coSetTranslation(this.__wbg_ptr,e,t,n,i)}coSetTranslationWrtParent(e,t,n,i){p.rawcolliderset_coSetTranslationWrtParent(this.__wbg_ptr,e,t,n,i)}coSetRotation(e,t,n,i,o){p.rawcolliderset_coSetRotation(this.__wbg_ptr,e,t,n,i,o)}coSetRotationWrtParent(e,t,n,i,o){p.rawcolliderset_coSetRotationWrtParent(this.__wbg_ptr,e,t,n,i,o)}coIsSensor(e){return p.rawcolliderset_coIsSensor(this.__wbg_ptr,e)!==0}coShapeType(e){return p.rawcolliderset_coShapeType(this.__wbg_ptr,e)}coHalfspaceNormal(e){const t=p.rawcolliderset_coHalfspaceNormal(this.__wbg_ptr,e);return t===0?void 0:O.__wrap(t)}coHalfExtents(e){const t=p.rawcolliderset_coHalfExtents(this.__wbg_ptr,e);return t===0?void 0:O.__wrap(t)}coSetHalfExtents(e,t){L(t,O),p.rawcolliderset_coSetHalfExtents(this.__wbg_ptr,e,t.__wbg_ptr)}coRadius(e){const t=p.rawcolliderset_coRadius(this.__wbg_ptr,e);return t===4294967297?void 0:t}coSetRadius(e,t){p.rawcolliderset_coSetRadius(this.__wbg_ptr,e,t)}coHalfHeight(e){const t=p.rawcolliderset_coHalfHeight(this.__wbg_ptr,e);return t===4294967297?void 0:t}coSetHalfHeight(e,t){p.rawcolliderset_coSetHalfHeight(this.__wbg_ptr,e,t)}coRoundRadius(e){const t=p.rawcolliderset_coRoundRadius(this.__wbg_ptr,e);return t===4294967297?void 0:t}coSetRoundRadius(e,t){p.rawcolliderset_coSetRoundRadius(this.__wbg_ptr,e,t)}coVoxelData(e){try{const i=p.__wbindgen_add_to_stack_pointer(-16);p.rawcolliderset_coVoxelData(i,this.__wbg_ptr,e);var t=Xt().getInt32(i+4*0,!0),n=Xt().getInt32(i+4*1,!0);let o;return t!==0&&(o=Zg(t,n).slice(),p.__wbindgen_export_1(t,n*4,4)),o}finally{p.__wbindgen_add_to_stack_pointer(16)}}coVoxelPrimitiveGeometry(e){const t=p.rawcolliderset_coVoxelPrimitiveGeometry(this.__wbg_ptr,e);return t===2?void 0:t}coVoxelSize(e){const t=p.rawcolliderset_coVoxelSize(this.__wbg_ptr,e);return t===0?void 0:O.__wrap(t)}coSetVoxel(e,t,n,i,o){p.rawcolliderset_coSetVoxel(this.__wbg_ptr,e,t,n,i,o)}coVertices(e){try{const i=p.__wbindgen_add_to_stack_pointer(-16);p.rawcolliderset_coVertices(i,this.__wbg_ptr,e);var t=Xt().getInt32(i+4*0,!0),n=Xt().getInt32(i+4*1,!0);let o;return t!==0&&(o=$0(t,n).slice(),p.__wbindgen_export_1(t,n*4,4)),o}finally{p.__wbindgen_add_to_stack_pointer(16)}}coIndices(e){try{const i=p.__wbindgen_add_to_stack_pointer(-16);p.rawcolliderset_coIndices(i,this.__wbg_ptr,e);var t=Xt().getInt32(i+4*0,!0),n=Xt().getInt32(i+4*1,!0);let o;return t!==0&&(o=Yg(t,n).slice(),p.__wbindgen_export_1(t,n*4,4)),o}finally{p.__wbindgen_add_to_stack_pointer(16)}}coTriMeshFlags(e){const t=p.rawcolliderset_coTriMeshFlags(this.__wbg_ptr,e);return t===4294967297?void 0:t}coHeightFieldFlags(e){const t=p.rawcolliderset_coHeightFieldFlags(this.__wbg_ptr,e);return t===4294967297?void 0:t}coHeightfieldHeights(e){try{const i=p.__wbindgen_add_to_stack_pointer(-16);p.rawcolliderset_coHeightfieldHeights(i,this.__wbg_ptr,e);var t=Xt().getInt32(i+4*0,!0),n=Xt().getInt32(i+4*1,!0);let o;return t!==0&&(o=$0(t,n).slice(),p.__wbindgen_export_1(t,n*4,4)),o}finally{p.__wbindgen_add_to_stack_pointer(16)}}coHeightfieldScale(e){const t=p.rawcolliderset_coHeightfieldScale(this.__wbg_ptr,e);return t===0?void 0:O.__wrap(t)}coHeightfieldNRows(e){const t=p.rawcolliderset_coHeightfieldNRows(this.__wbg_ptr,e);return t===4294967297?void 0:t}coHeightfieldNCols(e){const t=p.rawcolliderset_coHeightfieldNCols(this.__wbg_ptr,e);return t===4294967297?void 0:t}coParent(e){try{const i=p.__wbindgen_add_to_stack_pointer(-16);p.rawcolliderset_coParent(i,this.__wbg_ptr,e);var t=Xt().getInt32(i+4*0,!0),n=Xt().getFloat64(i+8*1,!0);return t===0?void 0:n}finally{p.__wbindgen_add_to_stack_pointer(16)}}coSetEnabled(e,t){p.rawcolliderset_coSetEnabled(this.__wbg_ptr,e,t)}coIsEnabled(e){return p.rawcolliderset_coIsEnabled(this.__wbg_ptr,e)!==0}coSetContactSkin(e,t){p.rawcolliderset_coSetContactSkin(this.__wbg_ptr,e,t)}coContactSkin(e){return p.rawcolliderset_coContactSkin(this.__wbg_ptr,e)}coFriction(e){return p.rawcolliderset_coFriction(this.__wbg_ptr,e)}coRestitution(e){return p.rawcolliderset_coRestitution(this.__wbg_ptr,e)}coDensity(e){return p.rawcolliderset_coDensity(this.__wbg_ptr,e)}coMass(e){return p.rawcolliderset_coMass(this.__wbg_ptr,e)}coVolume(e){return p.rawcolliderset_coVolume(this.__wbg_ptr,e)}coCollisionGroups(e){return p.rawcolliderset_coCollisionGroups(this.__wbg_ptr,e)>>>0}coSolverGroups(e){return p.rawcolliderset_coSolverGroups(this.__wbg_ptr,e)>>>0}coActiveHooks(e){return p.rawcolliderset_coActiveHooks(this.__wbg_ptr,e)>>>0}coActiveCollisionTypes(e){return p.rawcolliderset_coActiveCollisionTypes(this.__wbg_ptr,e)}coActiveEvents(e){return p.rawcolliderset_coActiveEvents(this.__wbg_ptr,e)>>>0}coContactForceEventThreshold(e){return p.rawcolliderset_coContactForceEventThreshold(this.__wbg_ptr,e)}coContainsPoint(e,t){return L(t,O),p.rawcolliderset_coContainsPoint(this.__wbg_ptr,e,t.__wbg_ptr)!==0}coCastShape(e,t,n,i,o,s,a,c,l){L(t,O),L(n,ve),L(i,O),L(o,ke),L(s,O);const d=p.rawcolliderset_coCastShape(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o.__wbg_ptr,s.__wbg_ptr,a,c,l);return d===0?void 0:sa.__wrap(d)}coCastCollider(e,t,n,i,o,s,a){L(t,O),L(i,O);const c=p.rawcolliderset_coCastCollider(this.__wbg_ptr,e,t.__wbg_ptr,n,i.__wbg_ptr,o,s,a);return c===0?void 0:na.__wrap(c)}coIntersectsShape(e,t,n,i){return L(t,ve),L(n,O),L(i,ke),p.rawcolliderset_coIntersectsShape(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr)!==0}coContactShape(e,t,n,i,o){L(t,ve),L(n,O),L(i,ke);const s=p.rawcolliderset_coContactShape(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o);return s===0?void 0:Ro.__wrap(s)}coContactCollider(e,t,n){const i=p.rawcolliderset_coContactCollider(this.__wbg_ptr,e,t,n);return i===0?void 0:Ro.__wrap(i)}coProjectPoint(e,t,n){L(t,O);const i=p.rawcolliderset_coProjectPoint(this.__wbg_ptr,e,t.__wbg_ptr,n);return ia.__wrap(i)}coIntersectsRay(e,t,n,i){return L(t,O),L(n,O),p.rawcolliderset_coIntersectsRay(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,i)!==0}coCastRay(e,t,n,i,o){return L(t,O),L(n,O),p.rawcolliderset_coCastRay(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,i,o)}coCastRayAndGetNormal(e,t,n,i,o){L(t,O),L(n,O);const s=p.rawcolliderset_coCastRayAndGetNormal(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,i,o);return s===0?void 0:oa.__wrap(s)}coSetSensor(e,t){p.rawcolliderset_coSetSensor(this.__wbg_ptr,e,t)}coSetRestitution(e,t){p.rawcolliderset_coSetRestitution(this.__wbg_ptr,e,t)}coSetFriction(e,t){p.rawcolliderset_coSetFriction(this.__wbg_ptr,e,t)}coFrictionCombineRule(e){return p.rawcolliderset_coFrictionCombineRule(this.__wbg_ptr,e)>>>0}coSetFrictionCombineRule(e,t){p.rawcolliderset_coSetFrictionCombineRule(this.__wbg_ptr,e,t)}coRestitutionCombineRule(e){return p.rawcolliderset_coRestitutionCombineRule(this.__wbg_ptr,e)>>>0}coSetRestitutionCombineRule(e,t){p.rawcolliderset_coSetRestitutionCombineRule(this.__wbg_ptr,e,t)}coSetCollisionGroups(e,t){p.rawcolliderset_coSetCollisionGroups(this.__wbg_ptr,e,t)}coSetSolverGroups(e,t){p.rawcolliderset_coSetSolverGroups(this.__wbg_ptr,e,t)}coSetActiveHooks(e,t){p.rawcolliderset_coSetActiveHooks(this.__wbg_ptr,e,t)}coSetActiveEvents(e,t){p.rawcolliderset_coSetActiveEvents(this.__wbg_ptr,e,t)}coSetActiveCollisionTypes(e,t){p.rawcolliderset_coSetActiveCollisionTypes(this.__wbg_ptr,e,t)}coSetShape(e,t){L(t,ve),p.rawcolliderset_coSetShape(this.__wbg_ptr,e,t.__wbg_ptr)}coSetContactForceEventThreshold(e,t){p.rawcolliderset_coSetContactForceEventThreshold(this.__wbg_ptr,e,t)}coSetDensity(e,t){p.rawcolliderset_coSetDensity(this.__wbg_ptr,e,t)}coSetMass(e,t){p.rawcolliderset_coSetMass(this.__wbg_ptr,e,t)}coSetMassProperties(e,t,n,i,o){L(n,O),L(i,O),L(o,ke),p.rawcolliderset_coSetMassProperties(this.__wbg_ptr,e,t,n.__wbg_ptr,i.__wbg_ptr,o.__wbg_ptr)}constructor(){const e=p.rawcolliderset_new();return this.__wbg_ptr=e>>>0,Qa.register(this,this.__wbg_ptr,this),this}len(){return p.rawcolliderset_len(this.__wbg_ptr)>>>0}contains(e){return p.rawcolliderset_contains(this.__wbg_ptr,e)!==0}createCollider(e,t,n,i,o,s,a,c,l,d,u,h,f,g,w,y,m,P,E,S,D,H,I,z,M){try{const B=p.__wbindgen_add_to_stack_pointer(-16);L(t,ve),L(n,O),L(i,ke),L(a,O),L(c,O),L(l,ke),L(M,bt),p.rawcolliderset_createCollider(B,this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o,s,a.__wbg_ptr,c.__wbg_ptr,l.__wbg_ptr,d,u,h,f,g,w,y,m,P,E,S,D,H,I,z,M.__wbg_ptr);var T=Xt().getInt32(B+4*0,!0),C=Xt().getFloat64(B+8*1,!0);return T===0?void 0:C}finally{p.__wbindgen_add_to_stack_pointer(16)}}remove(e,t,n,i){L(t,di),L(n,bt),p.rawcolliderset_remove(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,i)}isHandleValid(e){return p.rawcolliderset_contains(this.__wbg_ptr,e)!==0}forEachColliderHandle(e){try{p.rawcolliderset_forEachColliderHandle(this.__wbg_ptr,gt(e))}finally{Je[pt++]=void 0}}}const nu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawcollidershapecasthit_free(r>>>0,1));class na{static __wrap(e){e=e>>>0;const t=Object.create(na.prototype);return t.__wbg_ptr=e,nu.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,nu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawcollidershapecasthit_free(e,0)}colliderHandle(){return p.rawcharactercollision_handle(this.__wbg_ptr)}time_of_impact(){return p.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}witness1(){const e=p.rawcollidershapecasthit_witness1(this.__wbg_ptr);return O.__wrap(e)}witness2(){const e=p.rawcollidershapecasthit_witness2(this.__wbg_ptr);return O.__wrap(e)}normal1(){const e=p.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return O.__wrap(e)}normal2(){const e=p.rawcharactercollision_translationDeltaRemaining(this.__wbg_ptr);return O.__wrap(e)}}const iu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawcontactforceevent_free(r>>>0,1));class rd{static __wrap(e){e=e>>>0;const t=Object.create(rd.prototype);return t.__wbg_ptr=e,iu.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,iu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawcontactforceevent_free(e,0)}collider1(){return p.rawcharactercollision_handle(this.__wbg_ptr)}collider2(){return p.rawcontactforceevent_collider2(this.__wbg_ptr)}total_force(){const e=p.rawcontactforceevent_total_force(this.__wbg_ptr);return O.__wrap(e)}total_force_magnitude(){return p.rawcontactforceevent_total_force_magnitude(this.__wbg_ptr)}max_force_direction(){const e=p.rawcontactforceevent_max_force_direction(this.__wbg_ptr);return O.__wrap(e)}max_force_magnitude(){return p.rawcontactforceevent_max_force_magnitude(this.__wbg_ptr)}}const ru=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawcontactmanifold_free(r>>>0,1));class od{static __wrap(e){e=e>>>0;const t=Object.create(od.prototype);return t.__wbg_ptr=e,ru.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,ru.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawcontactmanifold_free(e,0)}normal(){const e=p.rawcontactmanifold_normal(this.__wbg_ptr);return O.__wrap(e)}local_n1(){const e=p.rawcontactmanifold_local_n1(this.__wbg_ptr);return O.__wrap(e)}local_n2(){const e=p.rawcontactmanifold_local_n2(this.__wbg_ptr);return O.__wrap(e)}subshape1(){return p.rawcontactmanifold_subshape1(this.__wbg_ptr)>>>0}subshape2(){return p.rawcontactmanifold_subshape2(this.__wbg_ptr)>>>0}num_contacts(){return p.rawcontactmanifold_num_contacts(this.__wbg_ptr)>>>0}contact_local_p1(e){const t=p.rawcontactmanifold_contact_local_p1(this.__wbg_ptr,e);return t===0?void 0:O.__wrap(t)}contact_local_p2(e){const t=p.rawcontactmanifold_contact_local_p2(this.__wbg_ptr,e);return t===0?void 0:O.__wrap(t)}contact_dist(e){return p.rawcontactmanifold_contact_dist(this.__wbg_ptr,e)}contact_fid1(e){return p.rawcontactmanifold_contact_fid1(this.__wbg_ptr,e)>>>0}contact_fid2(e){return p.rawcontactmanifold_contact_fid2(this.__wbg_ptr,e)>>>0}contact_impulse(e){return p.rawcontactmanifold_contact_impulse(this.__wbg_ptr,e)}contact_tangent_impulse_x(e){return p.rawcontactmanifold_contact_tangent_impulse_x(this.__wbg_ptr,e)}contact_tangent_impulse_y(e){return p.rawcontactmanifold_contact_tangent_impulse_y(this.__wbg_ptr,e)}num_solver_contacts(){return p.rawcontactmanifold_num_solver_contacts(this.__wbg_ptr)>>>0}solver_contact_point(e){const t=p.rawcontactmanifold_solver_contact_point(this.__wbg_ptr,e);return t===0?void 0:O.__wrap(t)}solver_contact_dist(e){return p.rawcontactmanifold_solver_contact_dist(this.__wbg_ptr,e)}solver_contact_friction(e){return p.rawcontactmanifold_solver_contact_friction(this.__wbg_ptr,e)}solver_contact_restitution(e){return p.rawcontactmanifold_solver_contact_restitution(this.__wbg_ptr,e)}solver_contact_tangent_velocity(e){const t=p.rawcontactmanifold_solver_contact_tangent_velocity(this.__wbg_ptr,e);return O.__wrap(t)}}const ou=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawcontactpair_free(r>>>0,1));class sd{static __wrap(e){e=e>>>0;const t=Object.create(sd.prototype);return t.__wbg_ptr=e,ou.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,ou.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawcontactpair_free(e,0)}collider1(){return p.rawcontactpair_collider1(this.__wbg_ptr)}collider2(){return p.rawcontactpair_collider2(this.__wbg_ptr)}numContactManifolds(){return p.rawcontactpair_numContactManifolds(this.__wbg_ptr)>>>0}contactManifold(e){const t=p.rawcontactpair_contactManifold(this.__wbg_ptr,e);return t===0?void 0:od.__wrap(t)}}const su=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawdebugrenderpipeline_free(r>>>0,1));class Kg{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,su.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawdebugrenderpipeline_free(e,0)}constructor(){const e=p.rawdebugrenderpipeline_new();return this.__wbg_ptr=e>>>0,su.register(this,this.__wbg_ptr,this),this}vertices(){const e=p.rawdebugrenderpipeline_vertices(this.__wbg_ptr);return Eo(e)}colors(){const e=p.rawdebugrenderpipeline_colors(this.__wbg_ptr);return Eo(e)}render(e,t,n,i,o){L(e,bt),L(t,vt),L(n,li),L(i,ui),L(o,Hi),p.rawdebugrenderpipeline_render(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o.__wbg_ptr)}}const au=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawdeserializedworld_free(r>>>0,1));class ad{static __wrap(e){e=e>>>0;const t=Object.create(ad.prototype);return t.__wbg_ptr=e,au.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,au.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawdeserializedworld_free(e,0)}takeGravity(){const e=p.rawdeserializedworld_takeGravity(this.__wbg_ptr);return e===0?void 0:O.__wrap(e)}takeIntegrationParameters(){const e=p.rawdeserializedworld_takeIntegrationParameters(this.__wbg_ptr);return e===0?void 0:qi.__wrap(e)}takeIslandManager(){const e=p.rawdeserializedworld_takeIslandManager(this.__wbg_ptr);return e===0?void 0:di.__wrap(e)}takeBroadPhase(){const e=p.rawdeserializedworld_takeBroadPhase(this.__wbg_ptr);return e===0?void 0:Yi.__wrap(e)}takeNarrowPhase(){const e=p.rawdeserializedworld_takeNarrowPhase(this.__wbg_ptr);return e===0?void 0:Hi.__wrap(e)}takeBodies(){const e=p.rawdeserializedworld_takeBodies(this.__wbg_ptr);return e===0?void 0:bt.__wrap(e)}takeColliders(){const e=p.rawdeserializedworld_takeColliders(this.__wbg_ptr);return e===0?void 0:vt.__wrap(e)}takeImpulseJoints(){const e=p.rawdeserializedworld_takeImpulseJoints(this.__wbg_ptr);return e===0?void 0:li.__wrap(e)}takeMultibodyJoints(){const e=p.rawdeserializedworld_takeMultibodyJoints(this.__wbg_ptr);return e===0?void 0:ui.__wrap(e)}}const cu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawdynamicraycastvehiclecontroller_free(r>>>0,1));class Jg{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,cu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawdynamicraycastvehiclecontroller_free(e,0)}constructor(e){const t=p.rawdynamicraycastvehiclecontroller_new(e);return this.__wbg_ptr=t>>>0,cu.register(this,this.__wbg_ptr,this),this}current_vehicle_speed(){return p.rawdynamicraycastvehiclecontroller_current_vehicle_speed(this.__wbg_ptr)}chassis(){return p.rawdynamicraycastvehiclecontroller_chassis(this.__wbg_ptr)}index_up_axis(){return p.rawdynamicraycastvehiclecontroller_index_up_axis(this.__wbg_ptr)>>>0}set_index_up_axis(e){p.rawdynamicraycastvehiclecontroller_set_index_up_axis(this.__wbg_ptr,e)}index_forward_axis(){return p.rawdynamicraycastvehiclecontroller_index_forward_axis(this.__wbg_ptr)>>>0}set_index_forward_axis(e){p.rawdynamicraycastvehiclecontroller_set_index_forward_axis(this.__wbg_ptr,e)}add_wheel(e,t,n,i,o){L(e,O),L(t,O),L(n,O),p.rawdynamicraycastvehiclecontroller_add_wheel(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i,o)}num_wheels(){return p.rawdynamicraycastvehiclecontroller_num_wheels(this.__wbg_ptr)>>>0}update_vehicle(e,t,n,i,o,s,a){try{L(t,bt),L(n,vt),L(i,cd),p.rawdynamicraycastvehiclecontroller_update_vehicle(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o,Pe(s)?4294967297:s>>>0,gt(a))}finally{Je[pt++]=void 0}}wheel_chassis_connection_point_cs(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs(this.__wbg_ptr,e);return t===0?void 0:O.__wrap(t)}set_wheel_chassis_connection_point_cs(e,t){L(t,O),p.rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs(this.__wbg_ptr,e,t.__wbg_ptr)}wheel_suspension_rest_length(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_suspension_rest_length(e,t){p.rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length(this.__wbg_ptr,e,t)}wheel_max_suspension_travel(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_max_suspension_travel(e,t){p.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel(this.__wbg_ptr,e,t)}wheel_radius(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_radius(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_radius(e,t){p.rawdynamicraycastvehiclecontroller_set_wheel_radius(this.__wbg_ptr,e,t)}wheel_suspension_stiffness(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_suspension_stiffness(e,t){p.rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness(this.__wbg_ptr,e,t)}wheel_suspension_compression(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_suspension_compression(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_suspension_compression(e,t){p.rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression(this.__wbg_ptr,e,t)}wheel_suspension_relaxation(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_suspension_relaxation(e,t){p.rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation(this.__wbg_ptr,e,t)}wheel_max_suspension_force(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_max_suspension_force(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_max_suspension_force(e,t){p.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force(this.__wbg_ptr,e,t)}wheel_brake(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_brake(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_brake(e,t){p.rawdynamicraycastvehiclecontroller_set_wheel_brake(this.__wbg_ptr,e,t)}wheel_steering(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_steering(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_steering(e,t){p.rawdynamicraycastvehiclecontroller_set_wheel_steering(this.__wbg_ptr,e,t)}wheel_engine_force(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_engine_force(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_engine_force(e,t){p.rawdynamicraycastvehiclecontroller_set_wheel_engine_force(this.__wbg_ptr,e,t)}wheel_direction_cs(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_direction_cs(this.__wbg_ptr,e);return t===0?void 0:O.__wrap(t)}set_wheel_direction_cs(e,t){L(t,O),p.rawdynamicraycastvehiclecontroller_set_wheel_direction_cs(this.__wbg_ptr,e,t.__wbg_ptr)}wheel_axle_cs(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_axle_cs(this.__wbg_ptr,e);return t===0?void 0:O.__wrap(t)}set_wheel_axle_cs(e,t){L(t,O),p.rawdynamicraycastvehiclecontroller_set_wheel_axle_cs(this.__wbg_ptr,e,t.__wbg_ptr)}wheel_friction_slip(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_friction_slip(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_friction_slip(e,t){p.rawdynamicraycastvehiclecontroller_set_wheel_friction_slip(this.__wbg_ptr,e,t)}wheel_side_friction_stiffness(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness(this.__wbg_ptr,e);return t===4294967297?void 0:t}set_wheel_side_friction_stiffness(e,t){p.rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness(this.__wbg_ptr,e,t)}wheel_rotation(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_rotation(this.__wbg_ptr,e);return t===4294967297?void 0:t}wheel_forward_impulse(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_forward_impulse(this.__wbg_ptr,e);return t===4294967297?void 0:t}wheel_side_impulse(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_side_impulse(this.__wbg_ptr,e);return t===4294967297?void 0:t}wheel_suspension_force(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_suspension_force(this.__wbg_ptr,e);return t===4294967297?void 0:t}wheel_contact_normal_ws(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws(this.__wbg_ptr,e);return t===0?void 0:O.__wrap(t)}wheel_contact_point_ws(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_contact_point_ws(this.__wbg_ptr,e);return t===0?void 0:O.__wrap(t)}wheel_suspension_length(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_suspension_length(this.__wbg_ptr,e);return t===4294967297?void 0:t}wheel_hard_point_ws(e){const t=p.rawdynamicraycastvehiclecontroller_wheel_hard_point_ws(this.__wbg_ptr,e);return t===0?void 0:O.__wrap(t)}wheel_is_in_contact(e){return p.rawdynamicraycastvehiclecontroller_wheel_is_in_contact(this.__wbg_ptr,e)!==0}wheel_ground_object(e){try{const i=p.__wbindgen_add_to_stack_pointer(-16);p.rawdynamicraycastvehiclecontroller_wheel_ground_object(i,this.__wbg_ptr,e);var t=Xt().getInt32(i+4*0,!0),n=Xt().getFloat64(i+8*1,!0);return t===0?void 0:n}finally{p.__wbindgen_add_to_stack_pointer(16)}}}const lu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_raweventqueue_free(r>>>0,1));class Qg{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,lu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_raweventqueue_free(e,0)}constructor(e){const t=p.raweventqueue_new(e);return this.__wbg_ptr=t>>>0,lu.register(this,this.__wbg_ptr,this),this}drainCollisionEvents(e){try{p.raweventqueue_drainCollisionEvents(this.__wbg_ptr,gt(e))}finally{Je[pt++]=void 0}}drainContactForceEvents(e){try{p.raweventqueue_drainContactForceEvents(this.__wbg_ptr,gt(e))}finally{Je[pt++]=void 0}}clear(){p.raweventqueue_clear(this.__wbg_ptr)}}const du=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawgenericjoint_free(r>>>0,1));class In{static __wrap(e){e=e>>>0;const t=Object.create(In.prototype);return t.__wbg_ptr=e,du.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,du.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawgenericjoint_free(e,0)}static generic(e,t,n,i){L(e,O),L(t,O),L(n,O);const o=p.rawgenericjoint_generic(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i);return o===0?void 0:In.__wrap(o)}static spring(e,t,n,i,o){L(i,O),L(o,O);const s=p.rawgenericjoint_spring(e,t,n,i.__wbg_ptr,o.__wbg_ptr);return In.__wrap(s)}static rope(e,t,n){L(t,O),L(n,O);const i=p.rawgenericjoint_rope(e,t.__wbg_ptr,n.__wbg_ptr);return In.__wrap(i)}static spherical(e,t){L(e,O),L(t,O);const n=p.rawgenericjoint_spherical(e.__wbg_ptr,t.__wbg_ptr);return In.__wrap(n)}static prismatic(e,t,n,i,o,s){L(e,O),L(t,O),L(n,O);const a=p.rawgenericjoint_prismatic(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i,o,s);return a===0?void 0:In.__wrap(a)}static fixed(e,t,n,i){L(e,O),L(t,ke),L(n,O),L(i,ke);const o=p.rawgenericjoint_fixed(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr);return In.__wrap(o)}static revolute(e,t,n){L(e,O),L(t,O),L(n,O);const i=p.rawgenericjoint_revolute(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr);return i===0?void 0:In.__wrap(i)}}const $a=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawimpulsejointset_free(r>>>0,1));class li{static __wrap(e){e=e>>>0;const t=Object.create(li.prototype);return t.__wbg_ptr=e,$a.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,$a.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawimpulsejointset_free(e,0)}jointType(e){return p.rawimpulsejointset_jointType(this.__wbg_ptr,e)}jointBodyHandle1(e){return p.rawimpulsejointset_jointBodyHandle1(this.__wbg_ptr,e)}jointBodyHandle2(e){return p.rawimpulsejointset_jointBodyHandle2(this.__wbg_ptr,e)}jointFrameX1(e){const t=p.rawimpulsejointset_jointFrameX1(this.__wbg_ptr,e);return ke.__wrap(t)}jointFrameX2(e){const t=p.rawimpulsejointset_jointFrameX2(this.__wbg_ptr,e);return ke.__wrap(t)}jointAnchor1(e){const t=p.rawimpulsejointset_jointAnchor1(this.__wbg_ptr,e);return O.__wrap(t)}jointAnchor2(e){const t=p.rawimpulsejointset_jointAnchor2(this.__wbg_ptr,e);return O.__wrap(t)}jointSetAnchor1(e,t){L(t,O),p.rawimpulsejointset_jointSetAnchor1(this.__wbg_ptr,e,t.__wbg_ptr)}jointSetAnchor2(e,t){L(t,O),p.rawimpulsejointset_jointSetAnchor2(this.__wbg_ptr,e,t.__wbg_ptr)}jointContactsEnabled(e){return p.rawimpulsejointset_jointContactsEnabled(this.__wbg_ptr,e)!==0}jointSetContactsEnabled(e,t){p.rawimpulsejointset_jointSetContactsEnabled(this.__wbg_ptr,e,t)}jointLimitsEnabled(e,t){return p.rawimpulsejointset_jointLimitsEnabled(this.__wbg_ptr,e,t)!==0}jointLimitsMin(e,t){return p.rawimpulsejointset_jointLimitsMin(this.__wbg_ptr,e,t)}jointLimitsMax(e,t){return p.rawimpulsejointset_jointLimitsMax(this.__wbg_ptr,e,t)}jointSetLimits(e,t,n,i){p.rawimpulsejointset_jointSetLimits(this.__wbg_ptr,e,t,n,i)}jointConfigureMotorModel(e,t,n){p.rawimpulsejointset_jointConfigureMotorModel(this.__wbg_ptr,e,t,n)}jointConfigureMotorVelocity(e,t,n,i){p.rawimpulsejointset_jointConfigureMotorVelocity(this.__wbg_ptr,e,t,n,i)}jointConfigureMotorPosition(e,t,n,i,o){p.rawimpulsejointset_jointConfigureMotorPosition(this.__wbg_ptr,e,t,n,i,o)}jointConfigureMotor(e,t,n,i,o,s){p.rawimpulsejointset_jointConfigureMotor(this.__wbg_ptr,e,t,n,i,o,s)}constructor(){const e=p.rawimpulsejointset_new();return this.__wbg_ptr=e>>>0,$a.register(this,this.__wbg_ptr,this),this}createJoint(e,t,n,i){return L(e,In),p.rawimpulsejointset_createJoint(this.__wbg_ptr,e.__wbg_ptr,t,n,i)}remove(e,t){p.rawimpulsejointset_remove(this.__wbg_ptr,e,t)}len(){return p.rawimpulsejointset_len(this.__wbg_ptr)>>>0}contains(e){return p.rawimpulsejointset_contains(this.__wbg_ptr,e)!==0}forEachJointHandle(e){try{p.rawimpulsejointset_forEachJointHandle(this.__wbg_ptr,gt(e))}finally{Je[pt++]=void 0}}forEachJointAttachedToRigidBody(e,t){try{p.rawimpulsejointset_forEachJointAttachedToRigidBody(this.__wbg_ptr,e,gt(t))}finally{Je[pt++]=void 0}}}const ec=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawintegrationparameters_free(r>>>0,1));class qi{static __wrap(e){e=e>>>0;const t=Object.create(qi.prototype);return t.__wbg_ptr=e,ec.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,ec.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawintegrationparameters_free(e,0)}constructor(){const e=p.rawintegrationparameters_new();return this.__wbg_ptr=e>>>0,ec.register(this,this.__wbg_ptr,this),this}get dt(){return p.rawintegrationparameters_dt(this.__wbg_ptr)}get contact_erp(){return p.rawintegrationparameters_contact_erp(this.__wbg_ptr)}get normalizedAllowedLinearError(){return p.rawdynamicraycastvehiclecontroller_current_vehicle_speed(this.__wbg_ptr)}get normalizedPredictionDistance(){return p.rawcontactforceevent_max_force_magnitude(this.__wbg_ptr)}get numSolverIterations(){return p.rawintegrationparameters_numSolverIterations(this.__wbg_ptr)>>>0}get numAdditionalFrictionIterations(){return p.rawdynamicraycastvehiclecontroller_index_up_axis(this.__wbg_ptr)>>>0}get numInternalPgsIterations(){return p.rawdynamicraycastvehiclecontroller_index_forward_axis(this.__wbg_ptr)>>>0}get minIslandSize(){return p.rawintegrationparameters_minIslandSize(this.__wbg_ptr)>>>0}get maxCcdSubsteps(){return p.rawintegrationparameters_maxCcdSubsteps(this.__wbg_ptr)>>>0}get lengthUnit(){return p.rawintegrationparameters_lengthUnit(this.__wbg_ptr)}set dt(e){p.rawintegrationparameters_set_dt(this.__wbg_ptr,e)}set contact_natural_frequency(e){p.rawintegrationparameters_set_contact_natural_frequency(this.__wbg_ptr,e)}set normalizedAllowedLinearError(e){p.rawintegrationparameters_set_normalizedAllowedLinearError(this.__wbg_ptr,e)}set normalizedPredictionDistance(e){p.rawintegrationparameters_set_normalizedPredictionDistance(this.__wbg_ptr,e)}set numSolverIterations(e){p.rawintegrationparameters_set_numSolverIterations(this.__wbg_ptr,e)}set numAdditionalFrictionIterations(e){p.rawdynamicraycastvehiclecontroller_set_index_up_axis(this.__wbg_ptr,e)}set numInternalPgsIterations(e){p.rawdynamicraycastvehiclecontroller_set_index_forward_axis(this.__wbg_ptr,e)}set minIslandSize(e){p.rawintegrationparameters_set_minIslandSize(this.__wbg_ptr,e)}set maxCcdSubsteps(e){p.rawintegrationparameters_set_maxCcdSubsteps(this.__wbg_ptr,e)}set lengthUnit(e){p.rawintegrationparameters_set_lengthUnit(this.__wbg_ptr,e)}switchToStandardPgsSolver(){p.rawintegrationparameters_switchToStandardPgsSolver(this.__wbg_ptr)}switchToSmallStepsPgsSolver(){p.rawintegrationparameters_switchToSmallStepsPgsSolver(this.__wbg_ptr)}switchToSmallStepsPgsSolverWithoutWarmstart(){p.rawintegrationparameters_switchToSmallStepsPgsSolverWithoutWarmstart(this.__wbg_ptr)}}const tc=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawislandmanager_free(r>>>0,1));class di{static __wrap(e){e=e>>>0;const t=Object.create(di.prototype);return t.__wbg_ptr=e,tc.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,tc.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawislandmanager_free(e,0)}constructor(){const e=p.rawislandmanager_new();return this.__wbg_ptr=e>>>0,tc.register(this,this.__wbg_ptr,this),this}forEachActiveRigidBodyHandle(e){try{p.rawislandmanager_forEachActiveRigidBodyHandle(this.__wbg_ptr,gt(e))}finally{Je[pt++]=void 0}}}const uu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawkinematiccharactercontroller_free(r>>>0,1));class $g{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,uu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawkinematiccharactercontroller_free(e,0)}constructor(e){const t=p.rawkinematiccharactercontroller_new(e);return this.__wbg_ptr=t>>>0,uu.register(this,this.__wbg_ptr,this),this}up(){const e=p.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return O.__wrap(e)}setUp(e){L(e,O),p.rawkinematiccharactercontroller_setUp(this.__wbg_ptr,e.__wbg_ptr)}normalNudgeFactor(){return p.rawkinematiccharactercontroller_normalNudgeFactor(this.__wbg_ptr)}setNormalNudgeFactor(e){p.rawkinematiccharactercontroller_setNormalNudgeFactor(this.__wbg_ptr,e)}offset(){return p.rawintegrationparameters_dt(this.__wbg_ptr)}setOffset(e){p.rawkinematiccharactercontroller_setOffset(this.__wbg_ptr,e)}slideEnabled(){return p.rawkinematiccharactercontroller_slideEnabled(this.__wbg_ptr)!==0}setSlideEnabled(e){p.rawkinematiccharactercontroller_setSlideEnabled(this.__wbg_ptr,e)}autostepMaxHeight(){const e=p.rawkinematiccharactercontroller_autostepMaxHeight(this.__wbg_ptr);return e===4294967297?void 0:e}autostepMinWidth(){const e=p.rawkinematiccharactercontroller_autostepMinWidth(this.__wbg_ptr);return e===4294967297?void 0:e}autostepIncludesDynamicBodies(){const e=p.rawkinematiccharactercontroller_autostepIncludesDynamicBodies(this.__wbg_ptr);return e===16777215?void 0:e!==0}autostepEnabled(){return p.rawkinematiccharactercontroller_autostepEnabled(this.__wbg_ptr)!==0}enableAutostep(e,t,n){p.rawkinematiccharactercontroller_enableAutostep(this.__wbg_ptr,e,t,n)}disableAutostep(){p.rawkinematiccharactercontroller_disableAutostep(this.__wbg_ptr)}maxSlopeClimbAngle(){return p.rawkinematiccharactercontroller_maxSlopeClimbAngle(this.__wbg_ptr)}setMaxSlopeClimbAngle(e){p.rawkinematiccharactercontroller_setMaxSlopeClimbAngle(this.__wbg_ptr,e)}minSlopeSlideAngle(){return p.rawkinematiccharactercontroller_minSlopeSlideAngle(this.__wbg_ptr)}setMinSlopeSlideAngle(e){p.rawkinematiccharactercontroller_setMinSlopeSlideAngle(this.__wbg_ptr,e)}snapToGroundDistance(){const e=p.rawkinematiccharactercontroller_snapToGroundDistance(this.__wbg_ptr);return e===4294967297?void 0:e}enableSnapToGround(e){p.rawkinematiccharactercontroller_enableSnapToGround(this.__wbg_ptr,e)}disableSnapToGround(){p.rawkinematiccharactercontroller_disableSnapToGround(this.__wbg_ptr)}snapToGroundEnabled(){return p.rawkinematiccharactercontroller_snapToGroundEnabled(this.__wbg_ptr)!==0}computeColliderMovement(e,t,n,i,o,s,a,c,l,d,u){try{L(t,bt),L(n,vt),L(i,cd),L(s,O),p.rawkinematiccharactercontroller_computeColliderMovement(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o,s.__wbg_ptr,a,Pe(c)?4294967297:Math.fround(c),l,Pe(d)?4294967297:d>>>0,gt(u))}finally{Je[pt++]=void 0}}computedMovement(){const e=p.rawkinematiccharactercontroller_computedMovement(this.__wbg_ptr);return O.__wrap(e)}computedGrounded(){return p.rawkinematiccharactercontroller_computedGrounded(this.__wbg_ptr)!==0}numComputedCollisions(){return p.rawkinematiccharactercontroller_numComputedCollisions(this.__wbg_ptr)>>>0}computedCollision(e,t){return L(t,tp),p.rawkinematiccharactercontroller_computedCollision(this.__wbg_ptr,e,t.__wbg_ptr)!==0}}const nc=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawmultibodyjointset_free(r>>>0,1));class ui{static __wrap(e){e=e>>>0;const t=Object.create(ui.prototype);return t.__wbg_ptr=e,nc.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,nc.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawmultibodyjointset_free(e,0)}jointType(e){return p.rawmultibodyjointset_jointType(this.__wbg_ptr,e)}jointFrameX1(e){const t=p.rawmultibodyjointset_jointFrameX1(this.__wbg_ptr,e);return ke.__wrap(t)}jointFrameX2(e){const t=p.rawmultibodyjointset_jointFrameX2(this.__wbg_ptr,e);return ke.__wrap(t)}jointAnchor1(e){const t=p.rawmultibodyjointset_jointAnchor1(this.__wbg_ptr,e);return O.__wrap(t)}jointAnchor2(e){const t=p.rawmultibodyjointset_jointAnchor2(this.__wbg_ptr,e);return O.__wrap(t)}jointContactsEnabled(e){return p.rawmultibodyjointset_jointContactsEnabled(this.__wbg_ptr,e)!==0}jointSetContactsEnabled(e,t){p.rawmultibodyjointset_jointSetContactsEnabled(this.__wbg_ptr,e,t)}jointLimitsEnabled(e,t){return p.rawmultibodyjointset_jointLimitsEnabled(this.__wbg_ptr,e,t)!==0}jointLimitsMin(e,t){return p.rawmultibodyjointset_jointLimitsMin(this.__wbg_ptr,e,t)}jointLimitsMax(e,t){return p.rawmultibodyjointset_jointLimitsMax(this.__wbg_ptr,e,t)}constructor(){const e=p.rawmultibodyjointset_new();return this.__wbg_ptr=e>>>0,nc.register(this,this.__wbg_ptr,this),this}createJoint(e,t,n,i){return L(e,In),p.rawmultibodyjointset_createJoint(this.__wbg_ptr,e.__wbg_ptr,t,n,i)}remove(e,t){p.rawmultibodyjointset_remove(this.__wbg_ptr,e,t)}contains(e){return p.rawmultibodyjointset_contains(this.__wbg_ptr,e)!==0}forEachJointHandle(e){try{p.rawmultibodyjointset_forEachJointHandle(this.__wbg_ptr,gt(e))}finally{Je[pt++]=void 0}}forEachJointAttachedToRigidBody(e,t){try{p.rawmultibodyjointset_forEachJointAttachedToRigidBody(this.__wbg_ptr,e,gt(t))}finally{Je[pt++]=void 0}}}const ic=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawnarrowphase_free(r>>>0,1));class Hi{static __wrap(e){e=e>>>0;const t=Object.create(Hi.prototype);return t.__wbg_ptr=e,ic.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,ic.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawnarrowphase_free(e,0)}constructor(){const e=p.rawnarrowphase_new();return this.__wbg_ptr=e>>>0,ic.register(this,this.__wbg_ptr,this),this}contact_pairs_with(e,t){p.rawnarrowphase_contact_pairs_with(this.__wbg_ptr,e,Nt(t))}contact_pair(e,t){const n=p.rawnarrowphase_contact_pair(this.__wbg_ptr,e,t);return n===0?void 0:sd.__wrap(n)}intersection_pairs_with(e,t){p.rawnarrowphase_intersection_pairs_with(this.__wbg_ptr,e,Nt(t))}intersection_pair(e,t){return p.rawnarrowphase_intersection_pair(this.__wbg_ptr,e,t)!==0}}const hu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawphysicspipeline_free(r>>>0,1));class ew{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,hu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawphysicspipeline_free(e,0)}constructor(){const e=p.rawphysicspipeline_new();return this.__wbg_ptr=e>>>0,hu.register(this,this.__wbg_ptr,this),this}step(e,t,n,i,o,s,a,c,l,d){L(e,O),L(t,qi),L(n,di),L(i,Yi),L(o,Hi),L(s,bt),L(a,vt),L(c,li),L(l,ui),L(d,xl),p.rawphysicspipeline_step(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o.__wbg_ptr,s.__wbg_ptr,a.__wbg_ptr,c.__wbg_ptr,l.__wbg_ptr,d.__wbg_ptr)}stepWithEvents(e,t,n,i,o,s,a,c,l,d,u,h,f,g){L(e,O),L(t,qi),L(n,di),L(i,Yi),L(o,Hi),L(s,bt),L(a,vt),L(c,li),L(l,ui),L(d,xl),L(u,Qg),p.rawphysicspipeline_stepWithEvents(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o.__wbg_ptr,s.__wbg_ptr,a.__wbg_ptr,c.__wbg_ptr,l.__wbg_ptr,d.__wbg_ptr,u.__wbg_ptr,Nt(h),Nt(f),Nt(g))}}const pu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawpidcontroller_free(r>>>0,1));class tw{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,pu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawpidcontroller_free(e,0)}constructor(e,t,n,i){const o=p.rawpidcontroller_new(e,t,n,i);return this.__wbg_ptr=o>>>0,pu.register(this,this.__wbg_ptr,this),this}set_kp(e,t){p.rawpidcontroller_set_kp(this.__wbg_ptr,e,t)}set_ki(e,t){p.rawpidcontroller_set_ki(this.__wbg_ptr,e,t)}set_kd(e,t){p.rawpidcontroller_set_kd(this.__wbg_ptr,e,t)}set_axes_mask(e){p.rawpidcontroller_set_axes_mask(this.__wbg_ptr,e)}reset_integrals(){p.rawpidcontroller_reset_integrals(this.__wbg_ptr)}apply_linear_correction(e,t,n,i,o){L(t,bt),L(i,O),L(o,O),p.rawpidcontroller_apply_linear_correction(this.__wbg_ptr,e,t.__wbg_ptr,n,i.__wbg_ptr,o.__wbg_ptr)}apply_angular_correction(e,t,n,i,o){L(t,bt),L(i,ke),L(o,O),p.rawpidcontroller_apply_angular_correction(this.__wbg_ptr,e,t.__wbg_ptr,n,i.__wbg_ptr,o.__wbg_ptr)}linear_correction(e,t,n,i,o){L(t,bt),L(i,O),L(o,O);const s=p.rawpidcontroller_linear_correction(this.__wbg_ptr,e,t.__wbg_ptr,n,i.__wbg_ptr,o.__wbg_ptr);return O.__wrap(s)}angular_correction(e,t,n,i,o){L(t,bt),L(i,ke),L(o,O);const s=p.rawpidcontroller_angular_correction(this.__wbg_ptr,e,t.__wbg_ptr,n,i.__wbg_ptr,o.__wbg_ptr);return O.__wrap(s)}}const fu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawpointcolliderprojection_free(r>>>0,1));class Fs{static __wrap(e){e=e>>>0;const t=Object.create(Fs.prototype);return t.__wbg_ptr=e,fu.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,fu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawpointcolliderprojection_free(e,0)}colliderHandle(){return p.rawpointcolliderprojection_colliderHandle(this.__wbg_ptr)}point(){const e=p.rawpointcolliderprojection_point(this.__wbg_ptr);return O.__wrap(e)}isInside(){return p.rawpointcolliderprojection_isInside(this.__wbg_ptr)!==0}featureType(){return p.rawpointcolliderprojection_featureType(this.__wbg_ptr)}featureId(){const e=p.rawpointcolliderprojection_featureId(this.__wbg_ptr);return e===4294967297?void 0:e}}const mu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawpointprojection_free(r>>>0,1));class ia{static __wrap(e){e=e>>>0;const t=Object.create(ia.prototype);return t.__wbg_ptr=e,mu.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,mu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawpointprojection_free(e,0)}point(){const e=p.rawpointprojection_point(this.__wbg_ptr);return O.__wrap(e)}isInside(){return p.rawpointprojection_isInside(this.__wbg_ptr)!==0}}const bu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawquerypipeline_free(r>>>0,1));class cd{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,bu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawquerypipeline_free(e,0)}constructor(){const e=p.rawquerypipeline_new();return this.__wbg_ptr=e>>>0,bu.register(this,this.__wbg_ptr,this),this}update(e){L(e,vt),p.rawquerypipeline_update(this.__wbg_ptr,e.__wbg_ptr)}castRay(e,t,n,i,o,s,a,c,l,d,u){try{L(e,bt),L(t,vt),L(n,O),L(i,O);const h=p.rawquerypipeline_castRay(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o,s,a,Pe(c)?4294967297:c>>>0,!Pe(l),Pe(l)?0:l,!Pe(d),Pe(d)?0:d,gt(u));return h===0?void 0:ld.__wrap(h)}finally{Je[pt++]=void 0}}castRayAndGetNormal(e,t,n,i,o,s,a,c,l,d,u){try{L(e,bt),L(t,vt),L(n,O),L(i,O);const h=p.rawquerypipeline_castRayAndGetNormal(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o,s,a,Pe(c)?4294967297:c>>>0,!Pe(l),Pe(l)?0:l,!Pe(d),Pe(d)?0:d,gt(u));return h===0?void 0:ra.__wrap(h)}finally{Je[pt++]=void 0}}intersectionsWithRay(e,t,n,i,o,s,a,c,l,d,u,h){try{L(e,bt),L(t,vt),L(n,O),L(i,O),p.rawquerypipeline_intersectionsWithRay(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o,s,gt(a),c,Pe(l)?4294967297:l>>>0,!Pe(d),Pe(d)?0:d,!Pe(u),Pe(u)?0:u,gt(h))}finally{Je[pt++]=void 0,Je[pt++]=void 0}}intersectionWithShape(e,t,n,i,o,s,a,c,l,d){try{const f=p.__wbindgen_add_to_stack_pointer(-16);L(e,bt),L(t,vt),L(n,O),L(i,ke),L(o,ve),p.rawquerypipeline_intersectionWithShape(f,this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o.__wbg_ptr,s,Pe(a)?4294967297:a>>>0,!Pe(c),Pe(c)?0:c,!Pe(l),Pe(l)?0:l,gt(d));var u=Xt().getInt32(f+4*0,!0),h=Xt().getFloat64(f+8*1,!0);return u===0?void 0:h}finally{p.__wbindgen_add_to_stack_pointer(16),Je[pt++]=void 0}}projectPoint(e,t,n,i,o,s,a,c,l){try{L(e,bt),L(t,vt),L(n,O);const d=p.rawquerypipeline_projectPoint(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i,o,Pe(s)?4294967297:s>>>0,!Pe(a),Pe(a)?0:a,!Pe(c),Pe(c)?0:c,gt(l));return d===0?void 0:Fs.__wrap(d)}finally{Je[pt++]=void 0}}projectPointAndGetFeature(e,t,n,i,o,s,a,c){try{L(e,bt),L(t,vt),L(n,O);const l=p.rawquerypipeline_projectPointAndGetFeature(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i,Pe(o)?4294967297:o>>>0,!Pe(s),Pe(s)?0:s,!Pe(a),Pe(a)?0:a,gt(c));return l===0?void 0:Fs.__wrap(l)}finally{Je[pt++]=void 0}}intersectionsWithPoint(e,t,n,i,o,s,a,c,l){try{L(e,bt),L(t,vt),L(n,O),p.rawquerypipeline_intersectionsWithPoint(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,gt(i),o,Pe(s)?4294967297:s>>>0,!Pe(a),Pe(a)?0:a,!Pe(c),Pe(c)?0:c,gt(l))}finally{Je[pt++]=void 0,Je[pt++]=void 0}}castShape(e,t,n,i,o,s,a,c,l,d,u,h,f,g){try{L(e,bt),L(t,vt),L(n,O),L(i,ke),L(o,O),L(s,ve);const w=p.rawquerypipeline_castShape(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o.__wbg_ptr,s.__wbg_ptr,a,c,l,d,Pe(u)?4294967297:u>>>0,!Pe(h),Pe(h)?0:h,!Pe(f),Pe(f)?0:f,gt(g));return w===0?void 0:na.__wrap(w)}finally{Je[pt++]=void 0}}intersectionsWithShape(e,t,n,i,o,s,a,c,l,d,u){try{L(e,bt),L(t,vt),L(n,O),L(i,ke),L(o,ve),p.rawquerypipeline_intersectionsWithShape(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o.__wbg_ptr,gt(s),a,Pe(c)?4294967297:c>>>0,!Pe(l),Pe(l)?0:l,!Pe(d),Pe(d)?0:d,gt(u))}finally{Je[pt++]=void 0,Je[pt++]=void 0}}collidersWithAabbIntersectingAabb(e,t,n){try{L(e,O),L(t,O),p.rawquerypipeline_collidersWithAabbIntersectingAabb(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,gt(n))}finally{Je[pt++]=void 0}}}const yu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawraycolliderhit_free(r>>>0,1));class ld{static __wrap(e){e=e>>>0;const t=Object.create(ld.prototype);return t.__wbg_ptr=e,yu.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,yu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawraycolliderhit_free(e,0)}colliderHandle(){return p.rawcharactercollision_handle(this.__wbg_ptr)}timeOfImpact(){return p.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}}const gu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawraycolliderintersection_free(r>>>0,1));class ra{static __wrap(e){e=e>>>0;const t=Object.create(ra.prototype);return t.__wbg_ptr=e,gu.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,gu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawraycolliderintersection_free(e,0)}colliderHandle(){return p.rawpointcolliderprojection_colliderHandle(this.__wbg_ptr)}normal(){const e=p.rawcollidershapecasthit_witness1(this.__wbg_ptr);return O.__wrap(e)}time_of_impact(){return p.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}featureType(){return p.rawpointcolliderprojection_featureType(this.__wbg_ptr)}featureId(){const e=p.rawpointcolliderprojection_featureId(this.__wbg_ptr);return e===4294967297?void 0:e}}const wu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawrayintersection_free(r>>>0,1));class oa{static __wrap(e){e=e>>>0;const t=Object.create(oa.prototype);return t.__wbg_ptr=e,wu.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,wu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawrayintersection_free(e,0)}normal(){const e=p.rawcollidershapecasthit_witness1(this.__wbg_ptr);return O.__wrap(e)}time_of_impact(){return p.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}featureType(){return p.rawpointcolliderprojection_featureType(this.__wbg_ptr)}featureId(){const e=p.rawpointcolliderprojection_featureId(this.__wbg_ptr);return e===4294967297?void 0:e}}const rc=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawrigidbodyset_free(r>>>0,1));class bt{static __wrap(e){e=e>>>0;const t=Object.create(bt.prototype);return t.__wbg_ptr=e,rc.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,rc.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawrigidbodyset_free(e,0)}rbTranslation(e){const t=p.rawrigidbodyset_rbTranslation(this.__wbg_ptr,e);return O.__wrap(t)}rbRotation(e){const t=p.rawrigidbodyset_rbRotation(this.__wbg_ptr,e);return ke.__wrap(t)}rbSleep(e){p.rawrigidbodyset_rbSleep(this.__wbg_ptr,e)}rbIsSleeping(e){return p.rawrigidbodyset_rbIsSleeping(this.__wbg_ptr,e)!==0}rbIsMoving(e){return p.rawrigidbodyset_rbIsMoving(this.__wbg_ptr,e)!==0}rbNextTranslation(e){const t=p.rawrigidbodyset_rbNextTranslation(this.__wbg_ptr,e);return O.__wrap(t)}rbNextRotation(e){const t=p.rawrigidbodyset_rbNextRotation(this.__wbg_ptr,e);return ke.__wrap(t)}rbSetTranslation(e,t,n,i,o){p.rawrigidbodyset_rbSetTranslation(this.__wbg_ptr,e,t,n,i,o)}rbSetRotation(e,t,n,i,o,s){p.rawrigidbodyset_rbSetRotation(this.__wbg_ptr,e,t,n,i,o,s)}rbSetLinvel(e,t,n){L(t,O),p.rawrigidbodyset_rbSetLinvel(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbSetAngvel(e,t,n){L(t,O),p.rawrigidbodyset_rbSetAngvel(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbSetNextKinematicTranslation(e,t,n,i){p.rawrigidbodyset_rbSetNextKinematicTranslation(this.__wbg_ptr,e,t,n,i)}rbSetNextKinematicRotation(e,t,n,i,o){p.rawrigidbodyset_rbSetNextKinematicRotation(this.__wbg_ptr,e,t,n,i,o)}rbRecomputeMassPropertiesFromColliders(e,t){L(t,vt),p.rawrigidbodyset_rbRecomputeMassPropertiesFromColliders(this.__wbg_ptr,e,t.__wbg_ptr)}rbSetAdditionalMass(e,t,n){p.rawrigidbodyset_rbSetAdditionalMass(this.__wbg_ptr,e,t,n)}rbSetAdditionalMassProperties(e,t,n,i,o,s){L(n,O),L(i,O),L(o,ke),p.rawrigidbodyset_rbSetAdditionalMassProperties(this.__wbg_ptr,e,t,n.__wbg_ptr,i.__wbg_ptr,o.__wbg_ptr,s)}rbLinvel(e){const t=p.rawrigidbodyset_rbLinvel(this.__wbg_ptr,e);return O.__wrap(t)}rbAngvel(e){const t=p.rawrigidbodyset_rbAngvel(this.__wbg_ptr,e);return O.__wrap(t)}rbVelocityAtPoint(e,t){L(t,O);const n=p.rawrigidbodyset_rbVelocityAtPoint(this.__wbg_ptr,e,t.__wbg_ptr);return O.__wrap(n)}rbLockTranslations(e,t,n){p.rawrigidbodyset_rbLockTranslations(this.__wbg_ptr,e,t,n)}rbSetEnabledTranslations(e,t,n,i,o){p.rawrigidbodyset_rbSetEnabledTranslations(this.__wbg_ptr,e,t,n,i,o)}rbLockRotations(e,t,n){p.rawrigidbodyset_rbLockRotations(this.__wbg_ptr,e,t,n)}rbSetEnabledRotations(e,t,n,i,o){p.rawrigidbodyset_rbSetEnabledRotations(this.__wbg_ptr,e,t,n,i,o)}rbDominanceGroup(e){return p.rawrigidbodyset_rbDominanceGroup(this.__wbg_ptr,e)}rbSetDominanceGroup(e,t){p.rawrigidbodyset_rbSetDominanceGroup(this.__wbg_ptr,e,t)}rbEnableCcd(e,t){p.rawrigidbodyset_rbEnableCcd(this.__wbg_ptr,e,t)}rbSetSoftCcdPrediction(e,t){p.rawrigidbodyset_rbSetSoftCcdPrediction(this.__wbg_ptr,e,t)}rbMass(e){return p.rawrigidbodyset_rbMass(this.__wbg_ptr,e)}rbInvMass(e){return p.rawrigidbodyset_rbInvMass(this.__wbg_ptr,e)}rbEffectiveInvMass(e){const t=p.rawrigidbodyset_rbEffectiveInvMass(this.__wbg_ptr,e);return O.__wrap(t)}rbLocalCom(e){const t=p.rawrigidbodyset_rbLocalCom(this.__wbg_ptr,e);return O.__wrap(t)}rbWorldCom(e){const t=p.rawrigidbodyset_rbWorldCom(this.__wbg_ptr,e);return O.__wrap(t)}rbInvPrincipalInertiaSqrt(e){const t=p.rawrigidbodyset_rbInvPrincipalInertiaSqrt(this.__wbg_ptr,e);return O.__wrap(t)}rbPrincipalInertiaLocalFrame(e){const t=p.rawrigidbodyset_rbPrincipalInertiaLocalFrame(this.__wbg_ptr,e);return ke.__wrap(t)}rbPrincipalInertia(e){const t=p.rawrigidbodyset_rbPrincipalInertia(this.__wbg_ptr,e);return O.__wrap(t)}rbEffectiveWorldInvInertiaSqrt(e){const t=p.rawrigidbodyset_rbEffectiveWorldInvInertiaSqrt(this.__wbg_ptr,e);return Vs.__wrap(t)}rbEffectiveAngularInertia(e){const t=p.rawrigidbodyset_rbEffectiveAngularInertia(this.__wbg_ptr,e);return Vs.__wrap(t)}rbWakeUp(e){p.rawrigidbodyset_rbWakeUp(this.__wbg_ptr,e)}rbIsCcdEnabled(e){return p.rawrigidbodyset_rbIsCcdEnabled(this.__wbg_ptr,e)!==0}rbSoftCcdPrediction(e){return p.rawrigidbodyset_rbSoftCcdPrediction(this.__wbg_ptr,e)}rbNumColliders(e){return p.rawrigidbodyset_rbNumColliders(this.__wbg_ptr,e)>>>0}rbCollider(e,t){return p.rawrigidbodyset_rbCollider(this.__wbg_ptr,e,t)}rbBodyType(e){return p.rawrigidbodyset_rbBodyType(this.__wbg_ptr,e)}rbSetBodyType(e,t,n){p.rawrigidbodyset_rbSetBodyType(this.__wbg_ptr,e,t,n)}rbIsFixed(e){return p.rawrigidbodyset_rbIsFixed(this.__wbg_ptr,e)!==0}rbIsKinematic(e){return p.rawrigidbodyset_rbIsKinematic(this.__wbg_ptr,e)!==0}rbIsDynamic(e){return p.rawrigidbodyset_rbIsDynamic(this.__wbg_ptr,e)!==0}rbLinearDamping(e){return p.rawrigidbodyset_rbLinearDamping(this.__wbg_ptr,e)}rbAngularDamping(e){return p.rawrigidbodyset_rbAngularDamping(this.__wbg_ptr,e)}rbSetLinearDamping(e,t){p.rawrigidbodyset_rbSetLinearDamping(this.__wbg_ptr,e,t)}rbSetAngularDamping(e,t){p.rawrigidbodyset_rbSetAngularDamping(this.__wbg_ptr,e,t)}rbSetEnabled(e,t){p.rawrigidbodyset_rbSetEnabled(this.__wbg_ptr,e,t)}rbIsEnabled(e){return p.rawrigidbodyset_rbIsEnabled(this.__wbg_ptr,e)!==0}rbGravityScale(e){return p.rawrigidbodyset_rbGravityScale(this.__wbg_ptr,e)}rbSetGravityScale(e,t,n){p.rawrigidbodyset_rbSetGravityScale(this.__wbg_ptr,e,t,n)}rbResetForces(e,t){p.rawrigidbodyset_rbResetForces(this.__wbg_ptr,e,t)}rbResetTorques(e,t){p.rawrigidbodyset_rbResetTorques(this.__wbg_ptr,e,t)}rbAddForce(e,t,n){L(t,O),p.rawrigidbodyset_rbAddForce(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbApplyImpulse(e,t,n){L(t,O),p.rawrigidbodyset_rbApplyImpulse(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbAddTorque(e,t,n){L(t,O),p.rawrigidbodyset_rbAddTorque(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbApplyTorqueImpulse(e,t,n){L(t,O),p.rawrigidbodyset_rbApplyTorqueImpulse(this.__wbg_ptr,e,t.__wbg_ptr,n)}rbAddForceAtPoint(e,t,n,i){L(t,O),L(n,O),p.rawrigidbodyset_rbAddForceAtPoint(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,i)}rbApplyImpulseAtPoint(e,t,n,i){L(t,O),L(n,O),p.rawrigidbodyset_rbApplyImpulseAtPoint(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,i)}rbAdditionalSolverIterations(e){return p.rawrigidbodyset_rbAdditionalSolverIterations(this.__wbg_ptr,e)>>>0}rbSetAdditionalSolverIterations(e,t){p.rawrigidbodyset_rbSetAdditionalSolverIterations(this.__wbg_ptr,e,t)}rbUserData(e){return p.rawrigidbodyset_rbUserData(this.__wbg_ptr,e)>>>0}rbSetUserData(e,t){p.rawrigidbodyset_rbSetUserData(this.__wbg_ptr,e,t)}rbUserForce(e){const t=p.rawrigidbodyset_rbUserForce(this.__wbg_ptr,e);return O.__wrap(t)}rbUserTorque(e){const t=p.rawrigidbodyset_rbUserTorque(this.__wbg_ptr,e);return O.__wrap(t)}constructor(){const e=p.rawrigidbodyset_new();return this.__wbg_ptr=e>>>0,rc.register(this,this.__wbg_ptr,this),this}createRigidBody(e,t,n,i,o,s,a,c,l,d,u,h,f,g,w,y,m,P,E,S,D,H,I,z,M,T){return L(t,O),L(n,ke),L(a,O),L(c,O),L(l,O),L(d,O),L(u,ke),p.rawrigidbodyset_createRigidBody(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,i,o,s,a.__wbg_ptr,c.__wbg_ptr,l.__wbg_ptr,d.__wbg_ptr,u.__wbg_ptr,h,f,g,w,y,m,P,E,S,D,H,I,z,M,T)}remove(e,t,n,i,o){L(t,di),L(n,vt),L(i,li),L(o,ui),p.rawrigidbodyset_remove(this.__wbg_ptr,e,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o.__wbg_ptr)}len(){return p.rawcolliderset_len(this.__wbg_ptr)>>>0}contains(e){return p.rawrigidbodyset_contains(this.__wbg_ptr,e)!==0}forEachRigidBodyHandle(e){try{p.rawrigidbodyset_forEachRigidBodyHandle(this.__wbg_ptr,gt(e))}finally{Je[pt++]=void 0}}propagateModifiedBodyPositionsToColliders(e){L(e,vt),p.rawrigidbodyset_propagateModifiedBodyPositionsToColliders(this.__wbg_ptr,e.__wbg_ptr)}}const oc=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawrotation_free(r>>>0,1));class ke{static __wrap(e){e=e>>>0;const t=Object.create(ke.prototype);return t.__wbg_ptr=e,oc.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,oc.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawrotation_free(e,0)}constructor(e,t,n,i){const o=p.rawrotation_new(e,t,n,i);return this.__wbg_ptr=o>>>0,oc.register(this,this.__wbg_ptr,this),this}static identity(){const e=p.rawrotation_identity();return ke.__wrap(e)}get x(){return p.rawrotation_x(this.__wbg_ptr)}get y(){return p.rawintegrationparameters_dt(this.__wbg_ptr)}get z(){return p.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}get w(){return p.rawrotation_w(this.__wbg_ptr)}}const xu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawsdpmatrix3_free(r>>>0,1));class Vs{static __wrap(e){e=e>>>0;const t=Object.create(Vs.prototype);return t.__wbg_ptr=e,xu.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,xu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawsdpmatrix3_free(e,0)}elements(){const e=p.rawsdpmatrix3_elements(this.__wbg_ptr);return Eo(e)}}const vu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawserializationpipeline_free(r>>>0,1));class nw{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,vu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawserializationpipeline_free(e,0)}constructor(){const e=p.rawserializationpipeline_new();return this.__wbg_ptr=e>>>0,vu.register(this,this.__wbg_ptr,this),this}serializeAll(e,t,n,i,o,s,a,c,l){L(e,O),L(t,qi),L(n,di),L(i,Yi),L(o,Hi),L(s,bt),L(a,vt),L(c,li),L(l,ui);const d=p.rawserializationpipeline_serializeAll(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o.__wbg_ptr,s.__wbg_ptr,a.__wbg_ptr,c.__wbg_ptr,l.__wbg_ptr);return Eo(d)}deserializeAll(e){const t=p.rawserializationpipeline_deserializeAll(this.__wbg_ptr,Nt(e));return t===0?void 0:ad.__wrap(t)}}const Tu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawshape_free(r>>>0,1));class ve{static __wrap(e){e=e>>>0;const t=Object.create(ve.prototype);return t.__wbg_ptr=e,Tu.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,Tu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawshape_free(e,0)}static cuboid(e,t,n){const i=p.rawshape_cuboid(e,t,n);return ve.__wrap(i)}static roundCuboid(e,t,n,i){const o=p.rawshape_roundCuboid(e,t,n,i);return ve.__wrap(o)}static ball(e){const t=p.rawshape_ball(e);return ve.__wrap(t)}static halfspace(e){L(e,O);const t=p.rawshape_halfspace(e.__wbg_ptr);return ve.__wrap(t)}static capsule(e,t){const n=p.rawshape_capsule(e,t);return ve.__wrap(n)}static cylinder(e,t){const n=p.rawshape_cylinder(e,t);return ve.__wrap(n)}static roundCylinder(e,t,n){const i=p.rawshape_roundCylinder(e,t,n);return ve.__wrap(i)}static cone(e,t){const n=p.rawshape_cone(e,t);return ve.__wrap(n)}static roundCone(e,t,n){const i=p.rawshape_roundCone(e,t,n);return ve.__wrap(i)}static voxels(e,t,n){L(t,O);const i=to(n,p.__wbindgen_export_2),o=tn,s=p.rawshape_voxels(e,t.__wbg_ptr,i,o);return ve.__wrap(s)}static voxelsFromPoints(e,t,n){L(t,O);const i=vi(n,p.__wbindgen_export_2),o=tn,s=p.rawshape_voxelsFromPoints(e,t.__wbg_ptr,i,o);return ve.__wrap(s)}static polyline(e,t){const n=vi(e,p.__wbindgen_export_2),i=tn,o=to(t,p.__wbindgen_export_2),s=tn,a=p.rawshape_polyline(n,i,o,s);return ve.__wrap(a)}static trimesh(e,t,n){const i=vi(e,p.__wbindgen_export_2),o=tn,s=to(t,p.__wbindgen_export_2),a=tn,c=p.rawshape_trimesh(i,o,s,a,n);return c===0?void 0:ve.__wrap(c)}static heightfield(e,t,n,i,o){const s=vi(n,p.__wbindgen_export_2),a=tn;L(i,O);const c=p.rawshape_heightfield(e,t,s,a,i.__wbg_ptr,o);return ve.__wrap(c)}static segment(e,t){L(e,O),L(t,O);const n=p.rawshape_segment(e.__wbg_ptr,t.__wbg_ptr);return ve.__wrap(n)}static triangle(e,t,n){L(e,O),L(t,O),L(n,O);const i=p.rawshape_triangle(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr);return ve.__wrap(i)}static roundTriangle(e,t,n,i){L(e,O),L(t,O),L(n,O);const o=p.rawshape_roundTriangle(e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i);return ve.__wrap(o)}static convexHull(e){const t=vi(e,p.__wbindgen_export_2),n=tn,i=p.rawshape_convexHull(t,n);return i===0?void 0:ve.__wrap(i)}static roundConvexHull(e,t){const n=vi(e,p.__wbindgen_export_2),i=tn,o=p.rawshape_roundConvexHull(n,i,t);return o===0?void 0:ve.__wrap(o)}static convexMesh(e,t){const n=vi(e,p.__wbindgen_export_2),i=tn,o=to(t,p.__wbindgen_export_2),s=tn,a=p.rawshape_convexMesh(n,i,o,s);return a===0?void 0:ve.__wrap(a)}static roundConvexMesh(e,t,n){const i=vi(e,p.__wbindgen_export_2),o=tn,s=to(t,p.__wbindgen_export_2),a=tn,c=p.rawshape_roundConvexMesh(i,o,s,a,n);return c===0?void 0:ve.__wrap(c)}castShape(e,t,n,i,o,s,a,c,l,d){L(e,O),L(t,ke),L(n,O),L(i,ve),L(o,O),L(s,ke),L(a,O);const u=p.rawshape_castShape(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o.__wbg_ptr,s.__wbg_ptr,a.__wbg_ptr,c,l,d);return u===0?void 0:sa.__wrap(u)}intersectsShape(e,t,n,i,o){return L(e,O),L(t,ke),L(n,ve),L(i,O),L(o,ke),p.rawshape_intersectsShape(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o.__wbg_ptr)!==0}contactShape(e,t,n,i,o,s){L(e,O),L(t,ke),L(n,ve),L(i,O),L(o,ke);const a=p.rawshape_contactShape(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o.__wbg_ptr,s);return a===0?void 0:Ro.__wrap(a)}containsPoint(e,t,n){return L(e,O),L(t,ke),L(n,O),p.rawshape_containsPoint(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr)!==0}projectPoint(e,t,n,i){L(e,O),L(t,ke),L(n,O);const o=p.rawshape_projectPoint(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i);return ia.__wrap(o)}intersectsRay(e,t,n,i,o){return L(e,O),L(t,ke),L(n,O),L(i,O),p.rawshape_intersectsRay(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o)!==0}castRay(e,t,n,i,o,s){return L(e,O),L(t,ke),L(n,O),L(i,O),p.rawshape_castRay(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o,s)}castRayAndGetNormal(e,t,n,i,o,s){L(e,O),L(t,ke),L(n,O),L(i,O);const a=p.rawshape_castRayAndGetNormal(this.__wbg_ptr,e.__wbg_ptr,t.__wbg_ptr,n.__wbg_ptr,i.__wbg_ptr,o,s);return a===0?void 0:oa.__wrap(a)}}const Su=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawshapecasthit_free(r>>>0,1));class sa{static __wrap(e){e=e>>>0;const t=Object.create(sa.prototype);return t.__wbg_ptr=e,Su.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,Su.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawshapecasthit_free(e,0)}time_of_impact(){return p.rawrotation_x(this.__wbg_ptr)}witness1(){const e=p.rawshapecasthit_witness1(this.__wbg_ptr);return O.__wrap(e)}witness2(){const e=p.rawcontactforceevent_total_force(this.__wbg_ptr);return O.__wrap(e)}normal1(){const e=p.rawshapecasthit_normal1(this.__wbg_ptr);return O.__wrap(e)}normal2(){const e=p.rawshapecasthit_normal2(this.__wbg_ptr);return O.__wrap(e)}}const Mu=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawshapecontact_free(r>>>0,1));class Ro{static __wrap(e){e=e>>>0;const t=Object.create(Ro.prototype);return t.__wbg_ptr=e,Mu.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,Mu.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawshapecontact_free(e,0)}distance(){return p.rawkinematiccharactercontroller_maxSlopeClimbAngle(this.__wbg_ptr)}point1(){const e=p.rawpointprojection_point(this.__wbg_ptr);return O.__wrap(e)}point2(){const e=p.rawcollidershapecasthit_witness1(this.__wbg_ptr);return O.__wrap(e)}normal1(){const e=p.rawcollidershapecasthit_witness2(this.__wbg_ptr);return O.__wrap(e)}normal2(){const e=p.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);return O.__wrap(e)}}const sc=typeof FinalizationRegistry>"u"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(r=>p.__wbg_rawvector_free(r>>>0,1));class O{static __wrap(e){e=e>>>0;const t=Object.create(O.prototype);return t.__wbg_ptr=e,sc.register(t,t.__wbg_ptr,t),t}__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,sc.unregister(this),e}free(){const e=this.__destroy_into_raw();p.__wbg_rawvector_free(e,0)}static zero(){const e=p.rawvector_zero();return O.__wrap(e)}constructor(e,t,n){const i=p.rawvector_new(e,t,n);return this.__wbg_ptr=i>>>0,sc.register(this,this.__wbg_ptr,this),this}get x(){return p.rawrotation_x(this.__wbg_ptr)}set x(e){p.rawvector_set_x(this.__wbg_ptr,e)}get y(){return p.rawintegrationparameters_dt(this.__wbg_ptr)}set y(e){p.rawintegrationparameters_set_dt(this.__wbg_ptr,e)}get z(){return p.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr)}set z(e){p.rawvector_set_z(this.__wbg_ptr,e)}xyz(){const e=p.rawvector_xyz(this.__wbg_ptr);return O.__wrap(e)}yxz(){const e=p.rawvector_yxz(this.__wbg_ptr);return O.__wrap(e)}zxy(){const e=p.rawvector_zxy(this.__wbg_ptr);return O.__wrap(e)}xzy(){const e=p.rawvector_xzy(this.__wbg_ptr);return O.__wrap(e)}yzx(){const e=p.rawvector_yzx(this.__wbg_ptr);return O.__wrap(e)}zyx(){const e=p.rawvector_zyx(this.__wbg_ptr);return O.__wrap(e)}}function iw(r,e,t,n){const i=st(r).bind(st(e),st(t),st(n));return Nt(i)}function rw(r){const e=st(r).buffer;return Nt(e)}function ow(){return id(function(r,e,t){const n=st(r).call(st(e),st(t));return Nt(n)},arguments)}function sw(){return id(function(r,e,t,n){const i=st(r).call(st(e),st(t),st(n));return Nt(i)},arguments)}function aw(){return id(function(r,e,t,n,i){const o=st(r).call(st(e),st(t),st(n),st(i));return Nt(o)},arguments)}function cw(r){return st(r).length}function lw(r){return st(r).length}function dw(r){const e=new Uint8Array(st(r));return Nt(e)}function uw(r,e,t){const n=new Uint8Array(st(r),e>>>0,t>>>0);return Nt(n)}function hw(r,e,t){const n=new Float32Array(st(r),e>>>0,t>>>0);return Nt(n)}function pw(r){const e=new Float32Array(r>>>0);return Nt(e)}function fw(r){const e=rd.__wrap(r);return Nt(e)}function mw(r){const e=ra.__wrap(r);return Nt(e)}function bw(r,e,t){st(r).set(st(e),t>>>0)}function yw(r,e,t){st(r).set(st(e),t>>>0)}function gw(r){const e=st(r);return typeof e=="boolean"?e?1:0:2}function ww(r){return typeof st(r)=="function"}function xw(){const r=p.memory;return Nt(r)}function vw(r,e){const t=st(e),n=typeof t=="number"?t:void 0;Xt().setFloat64(r+8*1,Pe(n)?0:n,!0),Xt().setInt32(r+4*0,!Pe(n),!0)}function Tw(r){return Nt(r)}function Sw(r){Eo(r)}function Mw(r,e){throw new Error(Bg(r,e))}URL=globalThis.URL;const b=await Fg({"./rapier_wasm3d_bg.js":{__wbindgen_number_new:Tw,__wbindgen_boolean_get:gw,__wbindgen_object_drop_ref:Sw,__wbindgen_number_get:vw,__wbindgen_is_function:ww,__wbg_rawraycolliderintersection_new:mw,__wbg_rawcontactforceevent_new:fw,__wbg_call_7cccdd69e0791ae2:ow,__wbg_call_833bed5770ea2041:sw,__wbg_call_b8adc8b1d0a0d8eb:aw,__wbg_bind_c8359b1cba058168:iw,__wbg_buffer_609cc3eee51ed158:rw,__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a:uw,__wbg_new_a12002a7f91c75be:dw,__wbg_set_65595bdd868b3009:yw,__wbg_length_a446193dc22c12f8:lw,__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354:hw,__wbg_set_10bad9bee0e9c58b:bw,__wbg_length_3b4f022188ae8db6:cw,__wbg_newwithlength_5a5efe313cfd59f1:pw,__wbindgen_throw:Mw,__wbindgen_memory:xw}},jg),Ew=b.memory,Rw=b.version,Pw=b.__wbg_rawkinematiccharactercontroller_free,Lw=b.rawkinematiccharactercontroller_new,Aw=b.rawkinematiccharactercontroller_setUp,Hw=b.rawkinematiccharactercontroller_normalNudgeFactor,Iw=b.rawkinematiccharactercontroller_setNormalNudgeFactor,Nw=b.rawkinematiccharactercontroller_setOffset,Ow=b.rawkinematiccharactercontroller_slideEnabled,Cw=b.rawkinematiccharactercontroller_setSlideEnabled,Dw=b.rawkinematiccharactercontroller_autostepMaxHeight,_w=b.rawkinematiccharactercontroller_autostepMinWidth,zw=b.rawkinematiccharactercontroller_autostepIncludesDynamicBodies,Uw=b.rawkinematiccharactercontroller_autostepEnabled,jw=b.rawkinematiccharactercontroller_enableAutostep,Fw=b.rawkinematiccharactercontroller_disableAutostep,Vw=b.rawkinematiccharactercontroller_maxSlopeClimbAngle,Xw=b.rawkinematiccharactercontroller_setMaxSlopeClimbAngle,kw=b.rawkinematiccharactercontroller_minSlopeSlideAngle,Ww=b.rawkinematiccharactercontroller_setMinSlopeSlideAngle,Bw=b.rawkinematiccharactercontroller_snapToGroundDistance,Gw=b.rawkinematiccharactercontroller_enableSnapToGround,Zw=b.rawkinematiccharactercontroller_disableSnapToGround,Yw=b.rawkinematiccharactercontroller_snapToGroundEnabled,qw=b.rawkinematiccharactercontroller_computeColliderMovement,Kw=b.rawkinematiccharactercontroller_computedMovement,Jw=b.rawkinematiccharactercontroller_computedGrounded,Qw=b.rawkinematiccharactercontroller_numComputedCollisions,$w=b.rawkinematiccharactercontroller_computedCollision,e5=b.__wbg_rawcharactercollision_free,t5=b.rawcharactercollision_new,n5=b.rawcharactercollision_handle,i5=b.rawcharactercollision_translationDeltaApplied,r5=b.rawcharactercollision_translationDeltaRemaining,o5=b.rawcharactercollision_toi,s5=b.rawcharactercollision_worldWitness1,a5=b.rawcharactercollision_worldWitness2,c5=b.rawcharactercollision_worldNormal1,l5=b.rawcharactercollision_worldNormal2,d5=b.__wbg_rawpidcontroller_free,u5=b.rawpidcontroller_new,h5=b.rawpidcontroller_set_kp,p5=b.rawpidcontroller_set_ki,f5=b.rawpidcontroller_set_kd,m5=b.rawpidcontroller_set_axes_mask,b5=b.rawpidcontroller_reset_integrals,y5=b.rawpidcontroller_apply_linear_correction,g5=b.rawpidcontroller_apply_angular_correction,w5=b.rawpidcontroller_linear_correction,x5=b.rawpidcontroller_angular_correction,v5=b.__wbg_rawdynamicraycastvehiclecontroller_free,T5=b.rawdynamicraycastvehiclecontroller_new,S5=b.rawdynamicraycastvehiclecontroller_current_vehicle_speed,M5=b.rawdynamicraycastvehiclecontroller_chassis,E5=b.rawdynamicraycastvehiclecontroller_index_up_axis,R5=b.rawdynamicraycastvehiclecontroller_set_index_up_axis,P5=b.rawdynamicraycastvehiclecontroller_index_forward_axis,L5=b.rawdynamicraycastvehiclecontroller_set_index_forward_axis,A5=b.rawdynamicraycastvehiclecontroller_add_wheel,H5=b.rawdynamicraycastvehiclecontroller_num_wheels,I5=b.rawdynamicraycastvehiclecontroller_update_vehicle,N5=b.rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs,O5=b.rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs,C5=b.rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length,D5=b.rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length,_5=b.rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel,z5=b.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel,U5=b.rawdynamicraycastvehiclecontroller_wheel_radius,j5=b.rawdynamicraycastvehiclecontroller_set_wheel_radius,F5=b.rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness,V5=b.rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness,X5=b.rawdynamicraycastvehiclecontroller_wheel_suspension_compression,k5=b.rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression,W5=b.rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation,B5=b.rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation,G5=b.rawdynamicraycastvehiclecontroller_wheel_max_suspension_force,Z5=b.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force,Y5=b.rawdynamicraycastvehiclecontroller_wheel_brake,q5=b.rawdynamicraycastvehiclecontroller_set_wheel_brake,K5=b.rawdynamicraycastvehiclecontroller_wheel_steering,J5=b.rawdynamicraycastvehiclecontroller_set_wheel_steering,Q5=b.rawdynamicraycastvehiclecontroller_wheel_engine_force,$5=b.rawdynamicraycastvehiclecontroller_set_wheel_engine_force,e7=b.rawdynamicraycastvehiclecontroller_wheel_direction_cs,t7=b.rawdynamicraycastvehiclecontroller_set_wheel_direction_cs,n7=b.rawdynamicraycastvehiclecontroller_wheel_axle_cs,i7=b.rawdynamicraycastvehiclecontroller_set_wheel_axle_cs,r7=b.rawdynamicraycastvehiclecontroller_wheel_friction_slip,o7=b.rawdynamicraycastvehiclecontroller_set_wheel_friction_slip,s7=b.rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness,a7=b.rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness,c7=b.rawdynamicraycastvehiclecontroller_wheel_rotation,l7=b.rawdynamicraycastvehiclecontroller_wheel_forward_impulse,d7=b.rawdynamicraycastvehiclecontroller_wheel_side_impulse,u7=b.rawdynamicraycastvehiclecontroller_wheel_suspension_force,h7=b.rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws,p7=b.rawdynamicraycastvehiclecontroller_wheel_contact_point_ws,f7=b.rawdynamicraycastvehiclecontroller_wheel_suspension_length,m7=b.rawdynamicraycastvehiclecontroller_wheel_hard_point_ws,b7=b.rawdynamicraycastvehiclecontroller_wheel_is_in_contact,y7=b.rawdynamicraycastvehiclecontroller_wheel_ground_object,g7=b.__wbg_rawccdsolver_free,w7=b.rawccdsolver_new,x7=b.rawimpulsejointset_jointType,v7=b.rawimpulsejointset_jointBodyHandle1,T7=b.rawimpulsejointset_jointBodyHandle2,S7=b.rawimpulsejointset_jointFrameX1,M7=b.rawimpulsejointset_jointFrameX2,E7=b.rawimpulsejointset_jointAnchor1,R7=b.rawimpulsejointset_jointAnchor2,P7=b.rawimpulsejointset_jointSetAnchor1,L7=b.rawimpulsejointset_jointSetAnchor2,A7=b.rawimpulsejointset_jointContactsEnabled,H7=b.rawimpulsejointset_jointSetContactsEnabled,I7=b.rawimpulsejointset_jointLimitsEnabled,N7=b.rawimpulsejointset_jointLimitsMin,O7=b.rawimpulsejointset_jointLimitsMax,C7=b.rawimpulsejointset_jointSetLimits,D7=b.rawimpulsejointset_jointConfigureMotorModel,_7=b.rawimpulsejointset_jointConfigureMotorVelocity,z7=b.rawimpulsejointset_jointConfigureMotorPosition,U7=b.rawimpulsejointset_jointConfigureMotor,j7=b.__wbg_rawimpulsejointset_free,F7=b.rawimpulsejointset_new,V7=b.rawimpulsejointset_createJoint,X7=b.rawimpulsejointset_remove,k7=b.rawimpulsejointset_len,W7=b.rawimpulsejointset_contains,B7=b.rawimpulsejointset_forEachJointHandle,G7=b.rawimpulsejointset_forEachJointAttachedToRigidBody,Z7=b.__wbg_rawintegrationparameters_free,Y7=b.rawintegrationparameters_new,q7=b.rawintegrationparameters_dt,K7=b.rawintegrationparameters_contact_erp,J7=b.rawintegrationparameters_numSolverIterations,Q7=b.rawintegrationparameters_minIslandSize,$7=b.rawintegrationparameters_maxCcdSubsteps,ex=b.rawintegrationparameters_lengthUnit,tx=b.rawintegrationparameters_set_dt,nx=b.rawintegrationparameters_set_contact_natural_frequency,ix=b.rawintegrationparameters_set_normalizedAllowedLinearError,rx=b.rawintegrationparameters_set_normalizedPredictionDistance,ox=b.rawintegrationparameters_set_numSolverIterations,sx=b.rawintegrationparameters_set_minIslandSize,ax=b.rawintegrationparameters_set_maxCcdSubsteps,cx=b.rawintegrationparameters_set_lengthUnit,lx=b.rawintegrationparameters_switchToStandardPgsSolver,dx=b.rawintegrationparameters_switchToSmallStepsPgsSolver,ux=b.rawintegrationparameters_switchToSmallStepsPgsSolverWithoutWarmstart,hx=b.__wbg_rawislandmanager_free,px=b.rawislandmanager_new,fx=b.rawislandmanager_forEachActiveRigidBodyHandle,mx=b.__wbg_rawgenericjoint_free,bx=b.rawgenericjoint_generic,yx=b.rawgenericjoint_spring,gx=b.rawgenericjoint_rope,wx=b.rawgenericjoint_spherical,xx=b.rawgenericjoint_prismatic,vx=b.rawgenericjoint_fixed,Tx=b.rawgenericjoint_revolute,Sx=b.rawmultibodyjointset_jointType,Mx=b.rawmultibodyjointset_jointFrameX1,Ex=b.rawmultibodyjointset_jointFrameX2,Rx=b.rawmultibodyjointset_jointAnchor1,Px=b.rawmultibodyjointset_jointAnchor2,Lx=b.rawmultibodyjointset_jointContactsEnabled,Ax=b.rawmultibodyjointset_jointSetContactsEnabled,Hx=b.rawmultibodyjointset_jointLimitsEnabled,Ix=b.rawmultibodyjointset_jointLimitsMin,Nx=b.rawmultibodyjointset_jointLimitsMax,Ox=b.__wbg_rawmultibodyjointset_free,Cx=b.rawmultibodyjointset_new,Dx=b.rawmultibodyjointset_createJoint,_x=b.rawmultibodyjointset_remove,zx=b.rawmultibodyjointset_contains,Ux=b.rawmultibodyjointset_forEachJointHandle,jx=b.rawmultibodyjointset_forEachJointAttachedToRigidBody,Fx=b.rawrigidbodyset_rbTranslation,Vx=b.rawrigidbodyset_rbRotation,Xx=b.rawrigidbodyset_rbSleep,kx=b.rawrigidbodyset_rbIsSleeping,Wx=b.rawrigidbodyset_rbIsMoving,Bx=b.rawrigidbodyset_rbNextTranslation,Gx=b.rawrigidbodyset_rbNextRotation,Zx=b.rawrigidbodyset_rbSetTranslation,Yx=b.rawrigidbodyset_rbSetRotation,qx=b.rawrigidbodyset_rbSetLinvel,Kx=b.rawrigidbodyset_rbSetAngvel,Jx=b.rawrigidbodyset_rbSetNextKinematicTranslation,Qx=b.rawrigidbodyset_rbSetNextKinematicRotation,$x=b.rawrigidbodyset_rbRecomputeMassPropertiesFromColliders,e9=b.rawrigidbodyset_rbSetAdditionalMass,t9=b.rawrigidbodyset_rbSetAdditionalMassProperties,n9=b.rawrigidbodyset_rbLinvel,i9=b.rawrigidbodyset_rbAngvel,r9=b.rawrigidbodyset_rbVelocityAtPoint,o9=b.rawrigidbodyset_rbLockTranslations,s9=b.rawrigidbodyset_rbSetEnabledTranslations,a9=b.rawrigidbodyset_rbLockRotations,c9=b.rawrigidbodyset_rbSetEnabledRotations,l9=b.rawrigidbodyset_rbDominanceGroup,d9=b.rawrigidbodyset_rbSetDominanceGroup,u9=b.rawrigidbodyset_rbEnableCcd,h9=b.rawrigidbodyset_rbSetSoftCcdPrediction,p9=b.rawrigidbodyset_rbMass,f9=b.rawrigidbodyset_rbInvMass,m9=b.rawrigidbodyset_rbEffectiveInvMass,b9=b.rawrigidbodyset_rbLocalCom,y9=b.rawrigidbodyset_rbWorldCom,g9=b.rawrigidbodyset_rbInvPrincipalInertiaSqrt,w9=b.rawrigidbodyset_rbPrincipalInertiaLocalFrame,x9=b.rawrigidbodyset_rbPrincipalInertia,v9=b.rawrigidbodyset_rbEffectiveWorldInvInertiaSqrt,T9=b.rawrigidbodyset_rbEffectiveAngularInertia,S9=b.rawrigidbodyset_rbWakeUp,M9=b.rawrigidbodyset_rbIsCcdEnabled,E9=b.rawrigidbodyset_rbSoftCcdPrediction,R9=b.rawrigidbodyset_rbNumColliders,P9=b.rawrigidbodyset_rbCollider,L9=b.rawrigidbodyset_rbBodyType,A9=b.rawrigidbodyset_rbSetBodyType,H9=b.rawrigidbodyset_rbIsFixed,I9=b.rawrigidbodyset_rbIsKinematic,N9=b.rawrigidbodyset_rbIsDynamic,O9=b.rawrigidbodyset_rbLinearDamping,C9=b.rawrigidbodyset_rbAngularDamping,D9=b.rawrigidbodyset_rbSetLinearDamping,_9=b.rawrigidbodyset_rbSetAngularDamping,z9=b.rawrigidbodyset_rbSetEnabled,U9=b.rawrigidbodyset_rbIsEnabled,j9=b.rawrigidbodyset_rbGravityScale,F9=b.rawrigidbodyset_rbSetGravityScale,V9=b.rawrigidbodyset_rbResetForces,X9=b.rawrigidbodyset_rbResetTorques,k9=b.rawrigidbodyset_rbAddForce,W9=b.rawrigidbodyset_rbApplyImpulse,B9=b.rawrigidbodyset_rbAddTorque,G9=b.rawrigidbodyset_rbApplyTorqueImpulse,Z9=b.rawrigidbodyset_rbAddForceAtPoint,Y9=b.rawrigidbodyset_rbApplyImpulseAtPoint,q9=b.rawrigidbodyset_rbAdditionalSolverIterations,K9=b.rawrigidbodyset_rbSetAdditionalSolverIterations,J9=b.rawrigidbodyset_rbUserData,Q9=b.rawrigidbodyset_rbSetUserData,$9=b.rawrigidbodyset_rbUserForce,e6=b.rawrigidbodyset_rbUserTorque,t6=b.__wbg_rawrigidbodyset_free,n6=b.rawrigidbodyset_new,i6=b.rawrigidbodyset_createRigidBody,r6=b.rawrigidbodyset_remove,o6=b.rawrigidbodyset_contains,s6=b.rawrigidbodyset_forEachRigidBodyHandle,a6=b.rawrigidbodyset_propagateModifiedBodyPositionsToColliders,c6=b.__wbg_rawbroadphase_free,l6=b.rawbroadphase_new,d6=b.rawcolliderset_coTranslation,u6=b.rawcolliderset_coRotation,h6=b.rawcolliderset_coSetTranslation,p6=b.rawcolliderset_coSetTranslationWrtParent,f6=b.rawcolliderset_coSetRotation,m6=b.rawcolliderset_coSetRotationWrtParent,b6=b.rawcolliderset_coIsSensor,y6=b.rawcolliderset_coShapeType,g6=b.rawcolliderset_coHalfspaceNormal,w6=b.rawcolliderset_coHalfExtents,x6=b.rawcolliderset_coSetHalfExtents,v6=b.rawcolliderset_coRadius,T6=b.rawcolliderset_coSetRadius,S6=b.rawcolliderset_coHalfHeight,M6=b.rawcolliderset_coSetHalfHeight,E6=b.rawcolliderset_coRoundRadius,R6=b.rawcolliderset_coSetRoundRadius,P6=b.rawcolliderset_coVoxelData,L6=b.rawcolliderset_coVoxelPrimitiveGeometry,A6=b.rawcolliderset_coVoxelSize,H6=b.rawcolliderset_coSetVoxel,I6=b.rawcolliderset_coVertices,N6=b.rawcolliderset_coIndices,O6=b.rawcolliderset_coTriMeshFlags,C6=b.rawcolliderset_coHeightFieldFlags,D6=b.rawcolliderset_coHeightfieldHeights,_6=b.rawcolliderset_coHeightfieldScale,z6=b.rawcolliderset_coHeightfieldNRows,U6=b.rawcolliderset_coHeightfieldNCols,j6=b.rawcolliderset_coParent,F6=b.rawcolliderset_coSetEnabled,V6=b.rawcolliderset_coIsEnabled,X6=b.rawcolliderset_coSetContactSkin,k6=b.rawcolliderset_coContactSkin,W6=b.rawcolliderset_coFriction,B6=b.rawcolliderset_coRestitution,G6=b.rawcolliderset_coDensity,Z6=b.rawcolliderset_coMass,Y6=b.rawcolliderset_coVolume,q6=b.rawcolliderset_coCollisionGroups,K6=b.rawcolliderset_coSolverGroups,J6=b.rawcolliderset_coActiveHooks,Q6=b.rawcolliderset_coActiveCollisionTypes,$6=b.rawcolliderset_coActiveEvents,ev=b.rawcolliderset_coContactForceEventThreshold,tv=b.rawcolliderset_coContainsPoint,nv=b.rawcolliderset_coCastShape,iv=b.rawcolliderset_coCastCollider,rv=b.rawcolliderset_coIntersectsShape,ov=b.rawcolliderset_coContactShape,sv=b.rawcolliderset_coContactCollider,av=b.rawcolliderset_coProjectPoint,cv=b.rawcolliderset_coIntersectsRay,lv=b.rawcolliderset_coCastRay,dv=b.rawcolliderset_coCastRayAndGetNormal,uv=b.rawcolliderset_coSetSensor,hv=b.rawcolliderset_coSetRestitution,pv=b.rawcolliderset_coSetFriction,fv=b.rawcolliderset_coFrictionCombineRule,mv=b.rawcolliderset_coSetFrictionCombineRule,bv=b.rawcolliderset_coRestitutionCombineRule,yv=b.rawcolliderset_coSetRestitutionCombineRule,gv=b.rawcolliderset_coSetCollisionGroups,wv=b.rawcolliderset_coSetSolverGroups,xv=b.rawcolliderset_coSetActiveHooks,vv=b.rawcolliderset_coSetActiveEvents,Tv=b.rawcolliderset_coSetActiveCollisionTypes,Sv=b.rawcolliderset_coSetShape,Mv=b.rawcolliderset_coSetContactForceEventThreshold,Ev=b.rawcolliderset_coSetDensity,Rv=b.rawcolliderset_coSetMass,Pv=b.rawcolliderset_coSetMassProperties,Lv=b.__wbg_rawcolliderset_free,Av=b.rawcolliderset_new,Hv=b.rawcolliderset_len,Iv=b.rawcolliderset_contains,Nv=b.rawcolliderset_createCollider,Ov=b.rawcolliderset_remove,Cv=b.rawcolliderset_forEachColliderHandle,Dv=b.__wbg_rawshapecontact_free,_v=b.__wbg_rawnarrowphase_free,zv=b.rawnarrowphase_new,Uv=b.rawnarrowphase_contact_pairs_with,jv=b.rawnarrowphase_contact_pair,Fv=b.rawnarrowphase_intersection_pairs_with,Vv=b.rawnarrowphase_intersection_pair,Xv=b.__wbg_rawcontactmanifold_free,kv=b.rawcontactpair_collider1,Wv=b.rawcontactpair_collider2,Bv=b.rawcontactpair_numContactManifolds,Gv=b.rawcontactpair_contactManifold,Zv=b.rawcontactmanifold_normal,Yv=b.rawcontactmanifold_local_n1,qv=b.rawcontactmanifold_local_n2,Kv=b.rawcontactmanifold_subshape1,Jv=b.rawcontactmanifold_subshape2,Qv=b.rawcontactmanifold_num_contacts,$v=b.rawcontactmanifold_contact_local_p1,e4=b.rawcontactmanifold_contact_local_p2,t4=b.rawcontactmanifold_contact_dist,n4=b.rawcontactmanifold_contact_fid1,i4=b.rawcontactmanifold_contact_fid2,r4=b.rawcontactmanifold_contact_impulse,o4=b.rawcontactmanifold_contact_tangent_impulse_x,s4=b.rawcontactmanifold_contact_tangent_impulse_y,a4=b.rawcontactmanifold_num_solver_contacts,c4=b.rawcontactmanifold_solver_contact_point,l4=b.rawcontactmanifold_solver_contact_dist,d4=b.rawcontactmanifold_solver_contact_friction,u4=b.rawcontactmanifold_solver_contact_restitution,h4=b.rawcontactmanifold_solver_contact_tangent_velocity,p4=b.__wbg_rawpointprojection_free,f4=b.rawpointprojection_point,m4=b.rawpointprojection_isInside,b4=b.__wbg_rawpointcolliderprojection_free,y4=b.rawpointcolliderprojection_colliderHandle,g4=b.rawpointcolliderprojection_point,w4=b.rawpointcolliderprojection_isInside,x4=b.rawpointcolliderprojection_featureType,v4=b.rawpointcolliderprojection_featureId,T4=b.__wbg_rawrayintersection_free,S4=b.__wbg_rawraycolliderhit_free,M4=b.__wbg_rawshape_free,E4=b.rawshape_cuboid,R4=b.rawshape_roundCuboid,P4=b.rawshape_ball,L4=b.rawshape_halfspace,A4=b.rawshape_capsule,H4=b.rawshape_cylinder,I4=b.rawshape_roundCylinder,N4=b.rawshape_cone,O4=b.rawshape_roundCone,C4=b.rawshape_voxels,D4=b.rawshape_voxelsFromPoints,_4=b.rawshape_polyline,z4=b.rawshape_trimesh,U4=b.rawshape_heightfield,j4=b.rawshape_segment,F4=b.rawshape_triangle,V4=b.rawshape_roundTriangle,X4=b.rawshape_convexHull,k4=b.rawshape_roundConvexHull,W4=b.rawshape_convexMesh,B4=b.rawshape_roundConvexMesh,G4=b.rawshape_castShape,Z4=b.rawshape_intersectsShape,Y4=b.rawshape_contactShape,q4=b.rawshape_containsPoint,K4=b.rawshape_projectPoint,J4=b.rawshape_intersectsRay,Q4=b.rawshape_castRay,$4=b.rawshape_castRayAndGetNormal,eT=b.__wbg_rawshapecasthit_free,tT=b.rawshapecasthit_witness1,nT=b.rawshapecasthit_normal1,iT=b.rawshapecasthit_normal2,rT=b.__wbg_rawcollidershapecasthit_free,oT=b.rawcollidershapecasthit_time_of_impact,sT=b.rawcollidershapecasthit_witness1,aT=b.rawcollidershapecasthit_witness2,cT=b.rawrotation_new,lT=b.rawrotation_identity,dT=b.rawrotation_x,uT=b.rawrotation_w,hT=b.rawvector_zero,pT=b.rawvector_new,fT=b.rawvector_set_x,mT=b.rawvector_set_z,bT=b.rawvector_xyz,yT=b.rawvector_yxz,gT=b.rawvector_zxy,wT=b.rawvector_xzy,xT=b.rawvector_yzx,vT=b.rawvector_zyx,TT=b.rawsdpmatrix3_elements,ST=b.__wbg_rawdebugrenderpipeline_free,MT=b.rawdebugrenderpipeline_new,ET=b.rawdebugrenderpipeline_vertices,RT=b.rawdebugrenderpipeline_colors,PT=b.rawdebugrenderpipeline_render,LT=b.__wbg_raweventqueue_free,AT=b.__wbg_rawcontactforceevent_free,HT=b.rawcontactforceevent_collider2,IT=b.rawcontactforceevent_total_force,NT=b.rawcontactforceevent_total_force_magnitude,OT=b.rawcontactforceevent_max_force_direction,CT=b.rawcontactforceevent_max_force_magnitude,DT=b.raweventqueue_new,_T=b.raweventqueue_drainCollisionEvents,zT=b.raweventqueue_drainContactForceEvents,UT=b.raweventqueue_clear,jT=b.__wbg_rawphysicspipeline_free,FT=b.rawphysicspipeline_new,VT=b.rawphysicspipeline_step,XT=b.rawphysicspipeline_stepWithEvents,kT=b.rawquerypipeline_new,WT=b.rawquerypipeline_update,BT=b.rawquerypipeline_castRay,GT=b.rawquerypipeline_castRayAndGetNormal,ZT=b.rawquerypipeline_intersectionsWithRay,YT=b.rawquerypipeline_intersectionWithShape,qT=b.rawquerypipeline_projectPoint,KT=b.rawquerypipeline_projectPointAndGetFeature,JT=b.rawquerypipeline_intersectionsWithPoint,QT=b.rawquerypipeline_castShape,$T=b.rawquerypipeline_intersectionsWithShape,e8=b.rawquerypipeline_collidersWithAabbIntersectingAabb,t8=b.__wbg_rawdeserializedworld_free,n8=b.rawdeserializedworld_takeGravity,i8=b.rawdeserializedworld_takeIntegrationParameters,r8=b.rawdeserializedworld_takeIslandManager,o8=b.rawdeserializedworld_takeBroadPhase,s8=b.rawdeserializedworld_takeNarrowPhase,a8=b.rawdeserializedworld_takeBodies,c8=b.rawdeserializedworld_takeColliders,l8=b.rawdeserializedworld_takeImpulseJoints,d8=b.rawdeserializedworld_takeMultibodyJoints,u8=b.__wbg_rawserializationpipeline_free,h8=b.rawserializationpipeline_new,p8=b.rawserializationpipeline_serializeAll,f8=b.rawserializationpipeline_deserializeAll,m8=b.rawcolliderset_isHandleValid,b8=b.rawkinematiccharactercontroller_offset,y8=b.rawintegrationparameters_normalizedAllowedLinearError,g8=b.rawintegrationparameters_numAdditionalFrictionIterations,w8=b.rawintegrationparameters_numInternalPgsIterations,x8=b.rawrigidbodyset_len,v8=b.rawshapecontact_distance,T8=b.rawrayintersection_featureType,S8=b.rawraycolliderintersection_colliderHandle,M8=b.rawrayintersection_time_of_impact,E8=b.rawraycolliderintersection_featureType,R8=b.rawraycolliderhit_colliderHandle,P8=b.rawraycolliderintersection_time_of_impact,L8=b.rawcollidershapecasthit_colliderHandle,A8=b.rawraycolliderhit_timeOfImpact,H8=b.rawshapecasthit_time_of_impact,I8=b.rawrotation_y,N8=b.rawrotation_z,O8=b.rawvector_x,C8=b.rawvector_y,D8=b.rawvector_z,_8=b.rawcontactforceevent_collider1,z8=b.rawintegrationparameters_normalizedPredictionDistance,U8=b.__wbg_rawquerypipeline_free,j8=b.rawrayintersection_featureId,F8=b.rawraycolliderintersection_featureId,V8=b.rawkinematiccharactercontroller_up,X8=b.rawshapecontact_normal2,k8=b.rawshapecontact_point1,W8=b.rawshapecontact_point2,B8=b.rawrayintersection_normal,G8=b.rawraycolliderintersection_normal,Z8=b.rawshapecontact_normal1,Y8=b.rawcollidershapecasthit_normal1,q8=b.rawcollidershapecasthit_normal2,K8=b.rawshapecasthit_witness2,J8=b.rawintegrationparameters_set_numAdditionalFrictionIterations,Q8=b.rawintegrationparameters_set_numInternalPgsIterations,$8=b.rawvector_set_y,eS=b.__wbg_rawrotation_free,tS=b.__wbg_rawvector_free,nS=b.__wbg_rawraycolliderintersection_free,iS=b.__wbg_rawsdpmatrix3_free,rS=b.__wbg_rawcontactpair_free,oS=b.__wbindgen_export_0,sS=b.__wbindgen_add_to_stack_pointer,aS=b.__wbindgen_export_1,cS=b.__wbindgen_export_2,lS=Object.freeze(Object.defineProperty({__proto__:null,__wbg_rawbroadphase_free:c6,__wbg_rawccdsolver_free:g7,__wbg_rawcharactercollision_free:e5,__wbg_rawcolliderset_free:Lv,__wbg_rawcollidershapecasthit_free:rT,__wbg_rawcontactforceevent_free:AT,__wbg_rawcontactmanifold_free:Xv,__wbg_rawcontactpair_free:rS,__wbg_rawdebugrenderpipeline_free:ST,__wbg_rawdeserializedworld_free:t8,__wbg_rawdynamicraycastvehiclecontroller_free:v5,__wbg_raweventqueue_free:LT,__wbg_rawgenericjoint_free:mx,__wbg_rawimpulsejointset_free:j7,__wbg_rawintegrationparameters_free:Z7,__wbg_rawislandmanager_free:hx,__wbg_rawkinematiccharactercontroller_free:Pw,__wbg_rawmultibodyjointset_free:Ox,__wbg_rawnarrowphase_free:_v,__wbg_rawphysicspipeline_free:jT,__wbg_rawpidcontroller_free:d5,__wbg_rawpointcolliderprojection_free:b4,__wbg_rawpointprojection_free:p4,__wbg_rawquerypipeline_free:U8,__wbg_rawraycolliderhit_free:S4,__wbg_rawraycolliderintersection_free:nS,__wbg_rawrayintersection_free:T4,__wbg_rawrigidbodyset_free:t6,__wbg_rawrotation_free:eS,__wbg_rawsdpmatrix3_free:iS,__wbg_rawserializationpipeline_free:u8,__wbg_rawshape_free:M4,__wbg_rawshapecasthit_free:eT,__wbg_rawshapecontact_free:Dv,__wbg_rawvector_free:tS,__wbindgen_add_to_stack_pointer:sS,__wbindgen_export_0:oS,__wbindgen_export_1:aS,__wbindgen_export_2:cS,memory:Ew,rawbroadphase_new:l6,rawccdsolver_new:w7,rawcharactercollision_handle:n5,rawcharactercollision_new:t5,rawcharactercollision_toi:o5,rawcharactercollision_translationDeltaApplied:i5,rawcharactercollision_translationDeltaRemaining:r5,rawcharactercollision_worldNormal1:c5,rawcharactercollision_worldNormal2:l5,rawcharactercollision_worldWitness1:s5,rawcharactercollision_worldWitness2:a5,rawcolliderset_coActiveCollisionTypes:Q6,rawcolliderset_coActiveEvents:$6,rawcolliderset_coActiveHooks:J6,rawcolliderset_coCastCollider:iv,rawcolliderset_coCastRay:lv,rawcolliderset_coCastRayAndGetNormal:dv,rawcolliderset_coCastShape:nv,rawcolliderset_coCollisionGroups:q6,rawcolliderset_coContactCollider:sv,rawcolliderset_coContactForceEventThreshold:ev,rawcolliderset_coContactShape:ov,rawcolliderset_coContactSkin:k6,rawcolliderset_coContainsPoint:tv,rawcolliderset_coDensity:G6,rawcolliderset_coFriction:W6,rawcolliderset_coFrictionCombineRule:fv,rawcolliderset_coHalfExtents:w6,rawcolliderset_coHalfHeight:S6,rawcolliderset_coHalfspaceNormal:g6,rawcolliderset_coHeightFieldFlags:C6,rawcolliderset_coHeightfieldHeights:D6,rawcolliderset_coHeightfieldNCols:U6,rawcolliderset_coHeightfieldNRows:z6,rawcolliderset_coHeightfieldScale:_6,rawcolliderset_coIndices:N6,rawcolliderset_coIntersectsRay:cv,rawcolliderset_coIntersectsShape:rv,rawcolliderset_coIsEnabled:V6,rawcolliderset_coIsSensor:b6,rawcolliderset_coMass:Z6,rawcolliderset_coParent:j6,rawcolliderset_coProjectPoint:av,rawcolliderset_coRadius:v6,rawcolliderset_coRestitution:B6,rawcolliderset_coRestitutionCombineRule:bv,rawcolliderset_coRotation:u6,rawcolliderset_coRoundRadius:E6,rawcolliderset_coSetActiveCollisionTypes:Tv,rawcolliderset_coSetActiveEvents:vv,rawcolliderset_coSetActiveHooks:xv,rawcolliderset_coSetCollisionGroups:gv,rawcolliderset_coSetContactForceEventThreshold:Mv,rawcolliderset_coSetContactSkin:X6,rawcolliderset_coSetDensity:Ev,rawcolliderset_coSetEnabled:F6,rawcolliderset_coSetFriction:pv,rawcolliderset_coSetFrictionCombineRule:mv,rawcolliderset_coSetHalfExtents:x6,rawcolliderset_coSetHalfHeight:M6,rawcolliderset_coSetMass:Rv,rawcolliderset_coSetMassProperties:Pv,rawcolliderset_coSetRadius:T6,rawcolliderset_coSetRestitution:hv,rawcolliderset_coSetRestitutionCombineRule:yv,rawcolliderset_coSetRotation:f6,rawcolliderset_coSetRotationWrtParent:m6,rawcolliderset_coSetRoundRadius:R6,rawcolliderset_coSetSensor:uv,rawcolliderset_coSetShape:Sv,rawcolliderset_coSetSolverGroups:wv,rawcolliderset_coSetTranslation:h6,rawcolliderset_coSetTranslationWrtParent:p6,rawcolliderset_coSetVoxel:H6,rawcolliderset_coShapeType:y6,rawcolliderset_coSolverGroups:K6,rawcolliderset_coTranslation:d6,rawcolliderset_coTriMeshFlags:O6,rawcolliderset_coVertices:I6,rawcolliderset_coVolume:Y6,rawcolliderset_coVoxelData:P6,rawcolliderset_coVoxelPrimitiveGeometry:L6,rawcolliderset_coVoxelSize:A6,rawcolliderset_contains:Iv,rawcolliderset_createCollider:Nv,rawcolliderset_forEachColliderHandle:Cv,rawcolliderset_isHandleValid:m8,rawcolliderset_len:Hv,rawcolliderset_new:Av,rawcolliderset_remove:Ov,rawcollidershapecasthit_colliderHandle:L8,rawcollidershapecasthit_normal1:Y8,rawcollidershapecasthit_normal2:q8,rawcollidershapecasthit_time_of_impact:oT,rawcollidershapecasthit_witness1:sT,rawcollidershapecasthit_witness2:aT,rawcontactforceevent_collider1:_8,rawcontactforceevent_collider2:HT,rawcontactforceevent_max_force_direction:OT,rawcontactforceevent_max_force_magnitude:CT,rawcontactforceevent_total_force:IT,rawcontactforceevent_total_force_magnitude:NT,rawcontactmanifold_contact_dist:t4,rawcontactmanifold_contact_fid1:n4,rawcontactmanifold_contact_fid2:i4,rawcontactmanifold_contact_impulse:r4,rawcontactmanifold_contact_local_p1:$v,rawcontactmanifold_contact_local_p2:e4,rawcontactmanifold_contact_tangent_impulse_x:o4,rawcontactmanifold_contact_tangent_impulse_y:s4,rawcontactmanifold_local_n1:Yv,rawcontactmanifold_local_n2:qv,rawcontactmanifold_normal:Zv,rawcontactmanifold_num_contacts:Qv,rawcontactmanifold_num_solver_contacts:a4,rawcontactmanifold_solver_contact_dist:l4,rawcontactmanifold_solver_contact_friction:d4,rawcontactmanifold_solver_contact_point:c4,rawcontactmanifold_solver_contact_restitution:u4,rawcontactmanifold_solver_contact_tangent_velocity:h4,rawcontactmanifold_subshape1:Kv,rawcontactmanifold_subshape2:Jv,rawcontactpair_collider1:kv,rawcontactpair_collider2:Wv,rawcontactpair_contactManifold:Gv,rawcontactpair_numContactManifolds:Bv,rawdebugrenderpipeline_colors:RT,rawdebugrenderpipeline_new:MT,rawdebugrenderpipeline_render:PT,rawdebugrenderpipeline_vertices:ET,rawdeserializedworld_takeBodies:a8,rawdeserializedworld_takeBroadPhase:o8,rawdeserializedworld_takeColliders:c8,rawdeserializedworld_takeGravity:n8,rawdeserializedworld_takeImpulseJoints:l8,rawdeserializedworld_takeIntegrationParameters:i8,rawdeserializedworld_takeIslandManager:r8,rawdeserializedworld_takeMultibodyJoints:d8,rawdeserializedworld_takeNarrowPhase:s8,rawdynamicraycastvehiclecontroller_add_wheel:A5,rawdynamicraycastvehiclecontroller_chassis:M5,rawdynamicraycastvehiclecontroller_current_vehicle_speed:S5,rawdynamicraycastvehiclecontroller_index_forward_axis:P5,rawdynamicraycastvehiclecontroller_index_up_axis:E5,rawdynamicraycastvehiclecontroller_new:T5,rawdynamicraycastvehiclecontroller_num_wheels:H5,rawdynamicraycastvehiclecontroller_set_index_forward_axis:L5,rawdynamicraycastvehiclecontroller_set_index_up_axis:R5,rawdynamicraycastvehiclecontroller_set_wheel_axle_cs:i7,rawdynamicraycastvehiclecontroller_set_wheel_brake:q5,rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs:O5,rawdynamicraycastvehiclecontroller_set_wheel_direction_cs:t7,rawdynamicraycastvehiclecontroller_set_wheel_engine_force:$5,rawdynamicraycastvehiclecontroller_set_wheel_friction_slip:o7,rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force:Z5,rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel:z5,rawdynamicraycastvehiclecontroller_set_wheel_radius:j5,rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness:a7,rawdynamicraycastvehiclecontroller_set_wheel_steering:J5,rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression:k5,rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation:B5,rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length:D5,rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness:V5,rawdynamicraycastvehiclecontroller_update_vehicle:I5,rawdynamicraycastvehiclecontroller_wheel_axle_cs:n7,rawdynamicraycastvehiclecontroller_wheel_brake:Y5,rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs:N5,rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws:h7,rawdynamicraycastvehiclecontroller_wheel_contact_point_ws:p7,rawdynamicraycastvehiclecontroller_wheel_direction_cs:e7,rawdynamicraycastvehiclecontroller_wheel_engine_force:Q5,rawdynamicraycastvehiclecontroller_wheel_forward_impulse:l7,rawdynamicraycastvehiclecontroller_wheel_friction_slip:r7,rawdynamicraycastvehiclecontroller_wheel_ground_object:y7,rawdynamicraycastvehiclecontroller_wheel_hard_point_ws:m7,rawdynamicraycastvehiclecontroller_wheel_is_in_contact:b7,rawdynamicraycastvehiclecontroller_wheel_max_suspension_force:G5,rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel:_5,rawdynamicraycastvehiclecontroller_wheel_radius:U5,rawdynamicraycastvehiclecontroller_wheel_rotation:c7,rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness:s7,rawdynamicraycastvehiclecontroller_wheel_side_impulse:d7,rawdynamicraycastvehiclecontroller_wheel_steering:K5,rawdynamicraycastvehiclecontroller_wheel_suspension_compression:X5,rawdynamicraycastvehiclecontroller_wheel_suspension_force:u7,rawdynamicraycastvehiclecontroller_wheel_suspension_length:f7,rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation:W5,rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length:C5,rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness:F5,raweventqueue_clear:UT,raweventqueue_drainCollisionEvents:_T,raweventqueue_drainContactForceEvents:zT,raweventqueue_new:DT,rawgenericjoint_fixed:vx,rawgenericjoint_generic:bx,rawgenericjoint_prismatic:xx,rawgenericjoint_revolute:Tx,rawgenericjoint_rope:gx,rawgenericjoint_spherical:wx,rawgenericjoint_spring:yx,rawimpulsejointset_contains:W7,rawimpulsejointset_createJoint:V7,rawimpulsejointset_forEachJointAttachedToRigidBody:G7,rawimpulsejointset_forEachJointHandle:B7,rawimpulsejointset_jointAnchor1:E7,rawimpulsejointset_jointAnchor2:R7,rawimpulsejointset_jointBodyHandle1:v7,rawimpulsejointset_jointBodyHandle2:T7,rawimpulsejointset_jointConfigureMotor:U7,rawimpulsejointset_jointConfigureMotorModel:D7,rawimpulsejointset_jointConfigureMotorPosition:z7,rawimpulsejointset_jointConfigureMotorVelocity:_7,rawimpulsejointset_jointContactsEnabled:A7,rawimpulsejointset_jointFrameX1:S7,rawimpulsejointset_jointFrameX2:M7,rawimpulsejointset_jointLimitsEnabled:I7,rawimpulsejointset_jointLimitsMax:O7,rawimpulsejointset_jointLimitsMin:N7,rawimpulsejointset_jointSetAnchor1:P7,rawimpulsejointset_jointSetAnchor2:L7,rawimpulsejointset_jointSetContactsEnabled:H7,rawimpulsejointset_jointSetLimits:C7,rawimpulsejointset_jointType:x7,rawimpulsejointset_len:k7,rawimpulsejointset_new:F7,rawimpulsejointset_remove:X7,rawintegrationparameters_contact_erp:K7,rawintegrationparameters_dt:q7,rawintegrationparameters_lengthUnit:ex,rawintegrationparameters_maxCcdSubsteps:$7,rawintegrationparameters_minIslandSize:Q7,rawintegrationparameters_new:Y7,rawintegrationparameters_normalizedAllowedLinearError:y8,rawintegrationparameters_normalizedPredictionDistance:z8,rawintegrationparameters_numAdditionalFrictionIterations:g8,rawintegrationparameters_numInternalPgsIterations:w8,rawintegrationparameters_numSolverIterations:J7,rawintegrationparameters_set_contact_natural_frequency:nx,rawintegrationparameters_set_dt:tx,rawintegrationparameters_set_lengthUnit:cx,rawintegrationparameters_set_maxCcdSubsteps:ax,rawintegrationparameters_set_minIslandSize:sx,rawintegrationparameters_set_normalizedAllowedLinearError:ix,rawintegrationparameters_set_normalizedPredictionDistance:rx,rawintegrationparameters_set_numAdditionalFrictionIterations:J8,rawintegrationparameters_set_numInternalPgsIterations:Q8,rawintegrationparameters_set_numSolverIterations:ox,rawintegrationparameters_switchToSmallStepsPgsSolver:dx,rawintegrationparameters_switchToSmallStepsPgsSolverWithoutWarmstart:ux,rawintegrationparameters_switchToStandardPgsSolver:lx,rawislandmanager_forEachActiveRigidBodyHandle:fx,rawislandmanager_new:px,rawkinematiccharactercontroller_autostepEnabled:Uw,rawkinematiccharactercontroller_autostepIncludesDynamicBodies:zw,rawkinematiccharactercontroller_autostepMaxHeight:Dw,rawkinematiccharactercontroller_autostepMinWidth:_w,rawkinematiccharactercontroller_computeColliderMovement:qw,rawkinematiccharactercontroller_computedCollision:$w,rawkinematiccharactercontroller_computedGrounded:Jw,rawkinematiccharactercontroller_computedMovement:Kw,rawkinematiccharactercontroller_disableAutostep:Fw,rawkinematiccharactercontroller_disableSnapToGround:Zw,rawkinematiccharactercontroller_enableAutostep:jw,rawkinematiccharactercontroller_enableSnapToGround:Gw,rawkinematiccharactercontroller_maxSlopeClimbAngle:Vw,rawkinematiccharactercontroller_minSlopeSlideAngle:kw,rawkinematiccharactercontroller_new:Lw,rawkinematiccharactercontroller_normalNudgeFactor:Hw,rawkinematiccharactercontroller_numComputedCollisions:Qw,rawkinematiccharactercontroller_offset:b8,rawkinematiccharactercontroller_setMaxSlopeClimbAngle:Xw,rawkinematiccharactercontroller_setMinSlopeSlideAngle:Ww,rawkinematiccharactercontroller_setNormalNudgeFactor:Iw,rawkinematiccharactercontroller_setOffset:Nw,rawkinematiccharactercontroller_setSlideEnabled:Cw,rawkinematiccharactercontroller_setUp:Aw,rawkinematiccharactercontroller_slideEnabled:Ow,rawkinematiccharactercontroller_snapToGroundDistance:Bw,rawkinematiccharactercontroller_snapToGroundEnabled:Yw,rawkinematiccharactercontroller_up:V8,rawmultibodyjointset_contains:zx,rawmultibodyjointset_createJoint:Dx,rawmultibodyjointset_forEachJointAttachedToRigidBody:jx,rawmultibodyjointset_forEachJointHandle:Ux,rawmultibodyjointset_jointAnchor1:Rx,rawmultibodyjointset_jointAnchor2:Px,rawmultibodyjointset_jointContactsEnabled:Lx,rawmultibodyjointset_jointFrameX1:Mx,rawmultibodyjointset_jointFrameX2:Ex,rawmultibodyjointset_jointLimitsEnabled:Hx,rawmultibodyjointset_jointLimitsMax:Nx,rawmultibodyjointset_jointLimitsMin:Ix,rawmultibodyjointset_jointSetContactsEnabled:Ax,rawmultibodyjointset_jointType:Sx,rawmultibodyjointset_new:Cx,rawmultibodyjointset_remove:_x,rawnarrowphase_contact_pair:jv,rawnarrowphase_contact_pairs_with:Uv,rawnarrowphase_intersection_pair:Vv,rawnarrowphase_intersection_pairs_with:Fv,rawnarrowphase_new:zv,rawphysicspipeline_new:FT,rawphysicspipeline_step:VT,rawphysicspipeline_stepWithEvents:XT,rawpidcontroller_angular_correction:x5,rawpidcontroller_apply_angular_correction:g5,rawpidcontroller_apply_linear_correction:y5,rawpidcontroller_linear_correction:w5,rawpidcontroller_new:u5,rawpidcontroller_reset_integrals:b5,rawpidcontroller_set_axes_mask:m5,rawpidcontroller_set_kd:f5,rawpidcontroller_set_ki:p5,rawpidcontroller_set_kp:h5,rawpointcolliderprojection_colliderHandle:y4,rawpointcolliderprojection_featureId:v4,rawpointcolliderprojection_featureType:x4,rawpointcolliderprojection_isInside:w4,rawpointcolliderprojection_point:g4,rawpointprojection_isInside:m4,rawpointprojection_point:f4,rawquerypipeline_castRay:BT,rawquerypipeline_castRayAndGetNormal:GT,rawquerypipeline_castShape:QT,rawquerypipeline_collidersWithAabbIntersectingAabb:e8,rawquerypipeline_intersectionWithShape:YT,rawquerypipeline_intersectionsWithPoint:JT,rawquerypipeline_intersectionsWithRay:ZT,rawquerypipeline_intersectionsWithShape:$T,rawquerypipeline_new:kT,rawquerypipeline_projectPoint:qT,rawquerypipeline_projectPointAndGetFeature:KT,rawquerypipeline_update:WT,rawraycolliderhit_colliderHandle:R8,rawraycolliderhit_timeOfImpact:A8,rawraycolliderintersection_colliderHandle:S8,rawraycolliderintersection_featureId:F8,rawraycolliderintersection_featureType:E8,rawraycolliderintersection_normal:G8,rawraycolliderintersection_time_of_impact:P8,rawrayintersection_featureId:j8,rawrayintersection_featureType:T8,rawrayintersection_normal:B8,rawrayintersection_time_of_impact:M8,rawrigidbodyset_contains:o6,rawrigidbodyset_createRigidBody:i6,rawrigidbodyset_forEachRigidBodyHandle:s6,rawrigidbodyset_len:x8,rawrigidbodyset_new:n6,rawrigidbodyset_propagateModifiedBodyPositionsToColliders:a6,rawrigidbodyset_rbAddForce:k9,rawrigidbodyset_rbAddForceAtPoint:Z9,rawrigidbodyset_rbAddTorque:B9,rawrigidbodyset_rbAdditionalSolverIterations:q9,rawrigidbodyset_rbAngularDamping:C9,rawrigidbodyset_rbAngvel:i9,rawrigidbodyset_rbApplyImpulse:W9,rawrigidbodyset_rbApplyImpulseAtPoint:Y9,rawrigidbodyset_rbApplyTorqueImpulse:G9,rawrigidbodyset_rbBodyType:L9,rawrigidbodyset_rbCollider:P9,rawrigidbodyset_rbDominanceGroup:l9,rawrigidbodyset_rbEffectiveAngularInertia:T9,rawrigidbodyset_rbEffectiveInvMass:m9,rawrigidbodyset_rbEffectiveWorldInvInertiaSqrt:v9,rawrigidbodyset_rbEnableCcd:u9,rawrigidbodyset_rbGravityScale:j9,rawrigidbodyset_rbInvMass:f9,rawrigidbodyset_rbInvPrincipalInertiaSqrt:g9,rawrigidbodyset_rbIsCcdEnabled:M9,rawrigidbodyset_rbIsDynamic:N9,rawrigidbodyset_rbIsEnabled:U9,rawrigidbodyset_rbIsFixed:H9,rawrigidbodyset_rbIsKinematic:I9,rawrigidbodyset_rbIsMoving:Wx,rawrigidbodyset_rbIsSleeping:kx,rawrigidbodyset_rbLinearDamping:O9,rawrigidbodyset_rbLinvel:n9,rawrigidbodyset_rbLocalCom:b9,rawrigidbodyset_rbLockRotations:a9,rawrigidbodyset_rbLockTranslations:o9,rawrigidbodyset_rbMass:p9,rawrigidbodyset_rbNextRotation:Gx,rawrigidbodyset_rbNextTranslation:Bx,rawrigidbodyset_rbNumColliders:R9,rawrigidbodyset_rbPrincipalInertia:x9,rawrigidbodyset_rbPrincipalInertiaLocalFrame:w9,rawrigidbodyset_rbRecomputeMassPropertiesFromColliders:$x,rawrigidbodyset_rbResetForces:V9,rawrigidbodyset_rbResetTorques:X9,rawrigidbodyset_rbRotation:Vx,rawrigidbodyset_rbSetAdditionalMass:e9,rawrigidbodyset_rbSetAdditionalMassProperties:t9,rawrigidbodyset_rbSetAdditionalSolverIterations:K9,rawrigidbodyset_rbSetAngularDamping:_9,rawrigidbodyset_rbSetAngvel:Kx,rawrigidbodyset_rbSetBodyType:A9,rawrigidbodyset_rbSetDominanceGroup:d9,rawrigidbodyset_rbSetEnabled:z9,rawrigidbodyset_rbSetEnabledRotations:c9,rawrigidbodyset_rbSetEnabledTranslations:s9,rawrigidbodyset_rbSetGravityScale:F9,rawrigidbodyset_rbSetLinearDamping:D9,rawrigidbodyset_rbSetLinvel:qx,rawrigidbodyset_rbSetNextKinematicRotation:Qx,rawrigidbodyset_rbSetNextKinematicTranslation:Jx,rawrigidbodyset_rbSetRotation:Yx,rawrigidbodyset_rbSetSoftCcdPrediction:h9,rawrigidbodyset_rbSetTranslation:Zx,rawrigidbodyset_rbSetUserData:Q9,rawrigidbodyset_rbSleep:Xx,rawrigidbodyset_rbSoftCcdPrediction:E9,rawrigidbodyset_rbTranslation:Fx,rawrigidbodyset_rbUserData:J9,rawrigidbodyset_rbUserForce:$9,rawrigidbodyset_rbUserTorque:e6,rawrigidbodyset_rbVelocityAtPoint:r9,rawrigidbodyset_rbWakeUp:S9,rawrigidbodyset_rbWorldCom:y9,rawrigidbodyset_remove:r6,rawrotation_identity:lT,rawrotation_new:cT,rawrotation_w:uT,rawrotation_x:dT,rawrotation_y:I8,rawrotation_z:N8,rawsdpmatrix3_elements:TT,rawserializationpipeline_deserializeAll:f8,rawserializationpipeline_new:h8,rawserializationpipeline_serializeAll:p8,rawshape_ball:P4,rawshape_capsule:A4,rawshape_castRay:Q4,rawshape_castRayAndGetNormal:$4,rawshape_castShape:G4,rawshape_cone:N4,rawshape_contactShape:Y4,rawshape_containsPoint:q4,rawshape_convexHull:X4,rawshape_convexMesh:W4,rawshape_cuboid:E4,rawshape_cylinder:H4,rawshape_halfspace:L4,rawshape_heightfield:U4,rawshape_intersectsRay:J4,rawshape_intersectsShape:Z4,rawshape_polyline:_4,rawshape_projectPoint:K4,rawshape_roundCone:O4,rawshape_roundConvexHull:k4,rawshape_roundConvexMesh:B4,rawshape_roundCuboid:R4,rawshape_roundCylinder:I4,rawshape_roundTriangle:V4,rawshape_segment:j4,rawshape_triangle:F4,rawshape_trimesh:z4,rawshape_voxels:C4,rawshape_voxelsFromPoints:D4,rawshapecasthit_normal1:nT,rawshapecasthit_normal2:iT,rawshapecasthit_time_of_impact:H8,rawshapecasthit_witness1:tT,rawshapecasthit_witness2:K8,rawshapecontact_distance:v8,rawshapecontact_normal1:Z8,rawshapecontact_normal2:X8,rawshapecontact_point1:k8,rawshapecontact_point2:W8,rawvector_new:pT,rawvector_set_x:fT,rawvector_set_y:$8,rawvector_set_z:mT,rawvector_x:O8,rawvector_xyz:bT,rawvector_xzy:wT,rawvector_y:C8,rawvector_yxz:yT,rawvector_yzx:xT,rawvector_z:D8,rawvector_zero:hT,rawvector_zxy:gT,rawvector_zyx:vT,version:Rw},Symbol.toStringTag,{value:"Module"}));Vg(lS);class dS{constructor(e,t,n){this.x=e,this.y=t,this.z=n}}class _{static new(e,t,n){return new dS(e,t,n)}static intoRaw(e){return new O(e.x,e.y,e.z)}static zeros(){return _.new(0,0,0)}static fromRaw(e){if(!e)return null;let t=_.new(e.x,e.y,e.z);return e.free(),t}static copy(e,t){e.x=t.x,e.y=t.y,e.z=t.z}}class Eu{constructor(e,t,n,i){this.x=e,this.y=t,this.z=n,this.w=i}}class We{static identity(){return new Eu(0,0,0,1)}static fromRaw(e){if(!e)return null;let t=new Eu(e.x,e.y,e.z,e.w);return e.free(),t}static intoRaw(e){return new ke(e.x,e.y,e.z,e.w)}static copy(e,t){e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w}}class uS{get m11(){return this.elements[0]}get m12(){return this.elements[1]}get m21(){return this.m12}get m13(){return this.elements[2]}get m31(){return this.m13}get m22(){return this.elements[3]}get m23(){return this.elements[4]}get m32(){return this.m23}get m33(){return this.elements[5]}constructor(e){this.elements=e}}class Ru{static fromRaw(e){const t=new uS(e.elements());return e.free(),t}}var Xn;(function(r){r[r.Dynamic=0]="Dynamic",r[r.Fixed=1]="Fixed",r[r.KinematicPositionBased=2]="KinematicPositionBased",r[r.KinematicVelocityBased=3]="KinematicVelocityBased"})(Xn||(Xn={}));class Pu{constructor(e,t,n){this.rawSet=e,this.colliderSet=t,this.handle=n}finalizeDeserialization(e){this.colliderSet=e}isValid(){return this.rawSet.contains(this.handle)}lockTranslations(e,t){return this.rawSet.rbLockTranslations(this.handle,e,t)}lockRotations(e,t){return this.rawSet.rbLockRotations(this.handle,e,t)}setEnabledTranslations(e,t,n,i){return this.rawSet.rbSetEnabledTranslations(this.handle,e,t,n,i)}restrictTranslations(e,t,n,i){this.setEnabledTranslations(e,t,n,i)}setEnabledRotations(e,t,n,i){return this.rawSet.rbSetEnabledRotations(this.handle,e,t,n,i)}restrictRotations(e,t,n,i){this.setEnabledRotations(e,t,n,i)}dominanceGroup(){return this.rawSet.rbDominanceGroup(this.handle)}setDominanceGroup(e){this.rawSet.rbSetDominanceGroup(this.handle,e)}additionalSolverIterations(){return this.rawSet.rbAdditionalSolverIterations(this.handle)}setAdditionalSolverIterations(e){this.rawSet.rbSetAdditionalSolverIterations(this.handle,e)}enableCcd(e){this.rawSet.rbEnableCcd(this.handle,e)}setSoftCcdPrediction(e){this.rawSet.rbSetSoftCcdPrediction(this.handle,e)}softCcdPrediction(){return this.rawSet.rbSoftCcdPrediction(this.handle)}translation(){let e=this.rawSet.rbTranslation(this.handle);return _.fromRaw(e)}rotation(){let e=this.rawSet.rbRotation(this.handle);return We.fromRaw(e)}nextTranslation(){let e=this.rawSet.rbNextTranslation(this.handle);return _.fromRaw(e)}nextRotation(){let e=this.rawSet.rbNextRotation(this.handle);return We.fromRaw(e)}setTranslation(e,t){this.rawSet.rbSetTranslation(this.handle,e.x,e.y,e.z,t)}setLinvel(e,t){let n=_.intoRaw(e);this.rawSet.rbSetLinvel(this.handle,n,t),n.free()}gravityScale(){return this.rawSet.rbGravityScale(this.handle)}setGravityScale(e,t){this.rawSet.rbSetGravityScale(this.handle,e,t)}setRotation(e,t){this.rawSet.rbSetRotation(this.handle,e.x,e.y,e.z,e.w,t)}setAngvel(e,t){let n=_.intoRaw(e);this.rawSet.rbSetAngvel(this.handle,n,t),n.free()}setNextKinematicTranslation(e){this.rawSet.rbSetNextKinematicTranslation(this.handle,e.x,e.y,e.z)}setNextKinematicRotation(e){this.rawSet.rbSetNextKinematicRotation(this.handle,e.x,e.y,e.z,e.w)}linvel(){return _.fromRaw(this.rawSet.rbLinvel(this.handle))}velocityAtPoint(e){const t=_.intoRaw(e);let n=_.fromRaw(this.rawSet.rbVelocityAtPoint(this.handle,t));return t.free(),n}angvel(){return _.fromRaw(this.rawSet.rbAngvel(this.handle))}mass(){return this.rawSet.rbMass(this.handle)}effectiveInvMass(){return _.fromRaw(this.rawSet.rbEffectiveInvMass(this.handle))}invMass(){return this.rawSet.rbInvMass(this.handle)}localCom(){return _.fromRaw(this.rawSet.rbLocalCom(this.handle))}worldCom(){return _.fromRaw(this.rawSet.rbWorldCom(this.handle))}invPrincipalInertiaSqrt(){return _.fromRaw(this.rawSet.rbInvPrincipalInertiaSqrt(this.handle))}principalInertia(){return _.fromRaw(this.rawSet.rbPrincipalInertia(this.handle))}principalInertiaLocalFrame(){return We.fromRaw(this.rawSet.rbPrincipalInertiaLocalFrame(this.handle))}effectiveWorldInvInertiaSqrt(){return Ru.fromRaw(this.rawSet.rbEffectiveWorldInvInertiaSqrt(this.handle))}effectiveAngularInertia(){return Ru.fromRaw(this.rawSet.rbEffectiveAngularInertia(this.handle))}sleep(){this.rawSet.rbSleep(this.handle)}wakeUp(){this.rawSet.rbWakeUp(this.handle)}isCcdEnabled(){return this.rawSet.rbIsCcdEnabled(this.handle)}numColliders(){return this.rawSet.rbNumColliders(this.handle)}collider(e){return this.colliderSet.get(this.rawSet.rbCollider(this.handle,e))}setEnabled(e){this.rawSet.rbSetEnabled(this.handle,e)}isEnabled(){return this.rawSet.rbIsEnabled(this.handle)}bodyType(){return this.rawSet.rbBodyType(this.handle)}setBodyType(e,t){return this.rawSet.rbSetBodyType(this.handle,e,t)}isSleeping(){return this.rawSet.rbIsSleeping(this.handle)}isMoving(){return this.rawSet.rbIsMoving(this.handle)}isFixed(){return this.rawSet.rbIsFixed(this.handle)}isKinematic(){return this.rawSet.rbIsKinematic(this.handle)}isDynamic(){return this.rawSet.rbIsDynamic(this.handle)}linearDamping(){return this.rawSet.rbLinearDamping(this.handle)}angularDamping(){return this.rawSet.rbAngularDamping(this.handle)}setLinearDamping(e){this.rawSet.rbSetLinearDamping(this.handle,e)}recomputeMassPropertiesFromColliders(){this.rawSet.rbRecomputeMassPropertiesFromColliders(this.handle,this.colliderSet.raw)}setAdditionalMass(e,t){this.rawSet.rbSetAdditionalMass(this.handle,e,t)}setAdditionalMassProperties(e,t,n,i,o){let s=_.intoRaw(t),a=_.intoRaw(n),c=We.intoRaw(i);this.rawSet.rbSetAdditionalMassProperties(this.handle,e,s,a,c,o),s.free(),a.free(),c.free()}setAngularDamping(e){this.rawSet.rbSetAngularDamping(this.handle,e)}resetForces(e){this.rawSet.rbResetForces(this.handle,e)}resetTorques(e){this.rawSet.rbResetTorques(this.handle,e)}addForce(e,t){const n=_.intoRaw(e);this.rawSet.rbAddForce(this.handle,n,t),n.free()}applyImpulse(e,t){const n=_.intoRaw(e);this.rawSet.rbApplyImpulse(this.handle,n,t),n.free()}addTorque(e,t){const n=_.intoRaw(e);this.rawSet.rbAddTorque(this.handle,n,t),n.free()}applyTorqueImpulse(e,t){const n=_.intoRaw(e);this.rawSet.rbApplyTorqueImpulse(this.handle,n,t),n.free()}addForceAtPoint(e,t,n){const i=_.intoRaw(e),o=_.intoRaw(t);this.rawSet.rbAddForceAtPoint(this.handle,i,o,n),i.free(),o.free()}applyImpulseAtPoint(e,t,n){const i=_.intoRaw(e),o=_.intoRaw(t);this.rawSet.rbApplyImpulseAtPoint(this.handle,i,o,n),i.free(),o.free()}userForce(){return _.fromRaw(this.rawSet.rbUserForce(this.handle))}userTorque(){return _.fromRaw(this.rawSet.rbUserTorque(this.handle))}}class Sn{constructor(e){this.enabled=!0,this.status=e,this.translation=_.zeros(),this.rotation=We.identity(),this.gravityScale=1,this.linvel=_.zeros(),this.mass=0,this.massOnly=!1,this.centerOfMass=_.zeros(),this.translationsEnabledX=!0,this.translationsEnabledY=!0,this.angvel=_.zeros(),this.principalAngularInertia=_.zeros(),this.angularInertiaLocalFrame=We.identity(),this.translationsEnabledZ=!0,this.rotationsEnabledX=!0,this.rotationsEnabledY=!0,this.rotationsEnabledZ=!0,this.linearDamping=0,this.angularDamping=0,this.canSleep=!0,this.sleeping=!1,this.ccdEnabled=!1,this.softCcdPrediction=0,this.dominanceGroup=0,this.additionalSolverIterations=0}static dynamic(){return new Sn(Xn.Dynamic)}static kinematicPositionBased(){return new Sn(Xn.KinematicPositionBased)}static kinematicVelocityBased(){return new Sn(Xn.KinematicVelocityBased)}static fixed(){return new Sn(Xn.Fixed)}static newDynamic(){return new Sn(Xn.Dynamic)}static newKinematicPositionBased(){return new Sn(Xn.KinematicPositionBased)}static newKinematicVelocityBased(){return new Sn(Xn.KinematicVelocityBased)}static newStatic(){return new Sn(Xn.Fixed)}setDominanceGroup(e){return this.dominanceGroup=e,this}setAdditionalSolverIterations(e){return this.additionalSolverIterations=e,this}setEnabled(e){return this.enabled=e,this}setTranslation(e,t,n){if(typeof e!="number"||typeof t!="number"||typeof n!="number")throw TypeError("The translation components must be numbers.");return this.translation={x:e,y:t,z:n},this}setRotation(e){return We.copy(this.rotation,e),this}setGravityScale(e){return this.gravityScale=e,this}setAdditionalMass(e){return this.mass=e,this.massOnly=!0,this}setLinvel(e,t,n){if(typeof e!="number"||typeof t!="number"||typeof n!="number")throw TypeError("The linvel components must be numbers.");return this.linvel={x:e,y:t,z:n},this}setAngvel(e){return _.copy(this.angvel,e),this}setAdditionalMassProperties(e,t,n,i){return this.mass=e,_.copy(this.centerOfMass,t),_.copy(this.principalAngularInertia,n),We.copy(this.angularInertiaLocalFrame,i),this.massOnly=!1,this}enabledTranslations(e,t,n){return this.translationsEnabledX=e,this.translationsEnabledY=t,this.translationsEnabledZ=n,this}restrictTranslations(e,t,n){return this.enabledTranslations(e,t,n)}lockTranslations(){return this.enabledTranslations(!1,!1,!1)}enabledRotations(e,t,n){return this.rotationsEnabledX=e,this.rotationsEnabledY=t,this.rotationsEnabledZ=n,this}restrictRotations(e,t,n){return this.enabledRotations(e,t,n)}lockRotations(){return this.restrictRotations(!1,!1,!1)}setLinearDamping(e){return this.linearDamping=e,this}setAngularDamping(e){return this.angularDamping=e,this}setCanSleep(e){return this.canSleep=e,this}setSleeping(e){return this.sleeping=e,this}setCcdEnabled(e){return this.ccdEnabled=e,this}setSoftCcdPrediction(e){return this.softCcdPrediction=e,this}setUserData(e){return this.userData=e,this}}class aa{constructor(){this.fconv=new Float64Array(1),this.uconv=new Uint32Array(this.fconv.buffer),this.data=new Array,this.size=0}set(e,t){let n=this.index(e);for(;this.data.length<=n;)this.data.push(null);this.data[n]==null&&(this.size+=1),this.data[n]=t}len(){return this.size}delete(e){let t=this.index(e);t<this.data.length&&(this.data[t]!=null&&(this.size-=1),this.data[t]=null)}clear(){this.data=new Array}get(e){let t=this.index(e);return t<this.data.length?this.data[t]:null}forEach(e){for(const t of this.data)t!=null&&e(t)}getAll(){return this.data.filter(e=>e!=null)}index(e){return this.fconv[0]=e,this.uconv[0]}}class hS{free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}constructor(e){this.raw=e||new bt,this.map=new aa,e&&e.forEachRigidBodyHandle(t=>{this.map.set(t,new Pu(e,null,t))})}finalizeDeserialization(e){this.map.forEach(t=>t.finalizeDeserialization(e))}createRigidBody(e,t){let n=_.intoRaw(t.translation),i=We.intoRaw(t.rotation),o=_.intoRaw(t.linvel),s=_.intoRaw(t.centerOfMass),a=_.intoRaw(t.angvel),c=_.intoRaw(t.principalAngularInertia),l=We.intoRaw(t.angularInertiaLocalFrame),d=this.raw.createRigidBody(t.enabled,n,i,t.gravityScale,t.mass,t.massOnly,s,o,a,c,l,t.translationsEnabledX,t.translationsEnabledY,t.translationsEnabledZ,t.rotationsEnabledX,t.rotationsEnabledY,t.rotationsEnabledZ,t.linearDamping,t.angularDamping,t.status,t.canSleep,t.sleeping,t.softCcdPrediction,t.ccdEnabled,t.dominanceGroup,t.additionalSolverIterations);n.free(),i.free(),o.free(),s.free(),a.free(),c.free(),l.free();const u=new Pu(this.raw,e,d);return u.userData=t.userData,this.map.set(d,u),u}remove(e,t,n,i,o){for(let s=0;s<this.raw.rbNumColliders(e);s+=1)n.unmap(this.raw.rbCollider(e,s));i.forEachJointHandleAttachedToRigidBody(e,s=>i.unmap(s)),o.forEachJointHandleAttachedToRigidBody(e,s=>o.unmap(s)),this.raw.remove(e,t.raw,n.raw,i.raw,o.raw),this.map.delete(e)}len(){return this.map.len()}contains(e){return this.get(e)!=null}get(e){return this.map.get(e)}forEach(e){this.map.forEach(e)}forEachActiveRigidBody(e,t){e.forEachActiveRigidBodyHandle(n=>{t(this.get(n))})}getAll(){return this.map.getAll()}}class pS{constructor(e){this.raw=e||new qi}free(){this.raw&&this.raw.free(),this.raw=void 0}get dt(){return this.raw.dt}get contact_erp(){return this.raw.contact_erp}get lengthUnit(){return this.raw.lengthUnit}get normalizedAllowedLinearError(){return this.raw.normalizedAllowedLinearError}get normalizedPredictionDistance(){return this.raw.normalizedPredictionDistance}get numSolverIterations(){return this.raw.numSolverIterations}get numAdditionalFrictionIterations(){return this.raw.numAdditionalFrictionIterations}get numInternalPgsIterations(){return this.raw.numInternalPgsIterations}get minIslandSize(){return this.raw.minIslandSize}get maxCcdSubsteps(){return this.raw.maxCcdSubsteps}set dt(e){this.raw.dt=e}set contact_natural_frequency(e){this.raw.contact_natural_frequency=e}set lengthUnit(e){this.raw.lengthUnit=e}set normalizedAllowedLinearError(e){this.raw.normalizedAllowedLinearError=e}set normalizedPredictionDistance(e){this.raw.normalizedPredictionDistance=e}set numSolverIterations(e){this.raw.numSolverIterations=e}set numAdditionalFrictionIterations(e){this.raw.numAdditionalFrictionIterations=e}set numInternalPgsIterations(e){this.raw.numInternalPgsIterations=e}set minIslandSize(e){this.raw.minIslandSize=e}set maxCcdSubsteps(e){this.raw.maxCcdSubsteps=e}switchToStandardPgsSolver(){this.raw.switchToStandardPgsSolver()}switchToSmallStepsPgsSolver(){this.raw.switchToSmallStepsPgsSolver()}switchToSmallStepsPgsSolverWithoutWarmstart(){this.raw.switchToSmallStepsPgsSolverWithoutWarmstart()}}var Lu;(function(r){r[r.Revolute=0]="Revolute",r[r.Fixed=1]="Fixed",r[r.Prismatic=2]="Prismatic",r[r.Rope=3]="Rope",r[r.Spring=4]="Spring",r[r.Spherical=5]="Spherical",r[r.Generic=6]="Generic"})(Lu||(Lu={}));var Au;(function(r){r[r.AccelerationBased=0]="AccelerationBased",r[r.ForceBased=1]="ForceBased"})(Au||(Au={}));var Hu;(function(r){r[r.LinX=1]="LinX",r[r.LinY=2]="LinY",r[r.LinZ=4]="LinZ",r[r.AngX=8]="AngX",r[r.AngY=16]="AngY",r[r.AngZ=32]="AngZ"})(Hu||(Hu={}));class Zn{constructor(e,t,n){this.rawSet=e,this.bodySet=t,this.handle=n}static newTyped(e,t,n){switch(e.jointType(n)){case Cn.Revolute:return new gS(e,t,n);case Cn.Prismatic:return new yS(e,t,n);case Cn.Fixed:return new fS(e,t,n);case Cn.Spring:return new bS(e,t,n);case Cn.Rope:return new mS(e,t,n);case Cn.Spherical:return new xS(e,t,n);case Cn.Generic:return new wS(e,t,n);default:return new Zn(e,t,n)}}finalizeDeserialization(e){this.bodySet=e}isValid(){return this.rawSet.contains(this.handle)}body1(){return this.bodySet.get(this.rawSet.jointBodyHandle1(this.handle))}body2(){return this.bodySet.get(this.rawSet.jointBodyHandle2(this.handle))}type(){return this.rawSet.jointType(this.handle)}frameX1(){return We.fromRaw(this.rawSet.jointFrameX1(this.handle))}frameX2(){return We.fromRaw(this.rawSet.jointFrameX2(this.handle))}anchor1(){return _.fromRaw(this.rawSet.jointAnchor1(this.handle))}anchor2(){return _.fromRaw(this.rawSet.jointAnchor2(this.handle))}setAnchor1(e){const t=_.intoRaw(e);this.rawSet.jointSetAnchor1(this.handle,t),t.free()}setAnchor2(e){const t=_.intoRaw(e);this.rawSet.jointSetAnchor2(this.handle,t),t.free()}setContactsEnabled(e){this.rawSet.jointSetContactsEnabled(this.handle,e)}contactsEnabled(){return this.rawSet.jointContactsEnabled(this.handle)}}class np extends Zn{limitsEnabled(){return this.rawSet.jointLimitsEnabled(this.handle,this.rawAxis())}limitsMin(){return this.rawSet.jointLimitsMin(this.handle,this.rawAxis())}limitsMax(){return this.rawSet.jointLimitsMax(this.handle,this.rawAxis())}setLimits(e,t){this.rawSet.jointSetLimits(this.handle,this.rawAxis(),e,t)}configureMotorModel(e){this.rawSet.jointConfigureMotorModel(this.handle,this.rawAxis(),e)}configureMotorVelocity(e,t){this.rawSet.jointConfigureMotorVelocity(this.handle,this.rawAxis(),e,t)}configureMotorPosition(e,t,n){this.rawSet.jointConfigureMotorPosition(this.handle,this.rawAxis(),e,t,n)}configureMotor(e,t,n,i){this.rawSet.jointConfigureMotor(this.handle,this.rawAxis(),e,t,n,i)}}class fS extends Zn{}class mS extends Zn{}class bS extends Zn{}class yS extends np{rawAxis(){return ta.LinX}}class gS extends np{rawAxis(){return ta.AngX}}class wS extends Zn{}class xS extends Zn{}class vS{free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}constructor(e){this.raw=e||new li,this.map=new aa,e&&e.forEachJointHandle(t=>{this.map.set(t,Zn.newTyped(e,null,t))})}finalizeDeserialization(e){this.map.forEach(t=>t.finalizeDeserialization(e))}createJoint(e,t,n,i,o){const s=t.intoRaw(),a=this.raw.createJoint(s,n,i,o);s.free();let c=Zn.newTyped(this.raw,e,a);return this.map.set(a,c),c}remove(e,t){this.raw.remove(e,t),this.unmap(e)}forEachJointHandleAttachedToRigidBody(e,t){this.raw.forEachJointAttachedToRigidBody(e,t)}unmap(e){this.map.delete(e)}len(){return this.map.len()}contains(e){return this.get(e)!=null}get(e){return this.map.get(e)}forEach(e){this.map.forEach(e)}getAll(){return this.map.getAll()}}class Ki{constructor(e,t){this.rawSet=e,this.handle=t}static newTyped(e,t){switch(e.jointType(t)){case Cn.Revolute:return new MS(e,t);case Cn.Prismatic:return new SS(e,t);case Cn.Fixed:return new TS(e,t);case Cn.Spherical:return new ES(e,t);default:return new Ki(e,t)}}isValid(){return this.rawSet.contains(this.handle)}setContactsEnabled(e){this.rawSet.jointSetContactsEnabled(this.handle,e)}contactsEnabled(){return this.rawSet.jointContactsEnabled(this.handle)}}class ip extends Ki{}class TS extends Ki{}class SS extends ip{rawAxis(){return ta.LinX}}class MS extends ip{rawAxis(){return ta.AngX}}class ES extends Ki{}class RS{free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}constructor(e){this.raw=e||new ui,this.map=new aa,e&&e.forEachJointHandle(t=>{this.map.set(t,Ki.newTyped(this.raw,t))})}createJoint(e,t,n,i){const o=e.intoRaw(),s=this.raw.createJoint(o,t,n,i);o.free();let a=Ki.newTyped(this.raw,s);return this.map.set(s,a),a}remove(e,t){this.raw.remove(e,t),this.map.delete(e)}unmap(e){this.map.delete(e)}len(){return this.map.len()}contains(e){return this.get(e)!=null}get(e){return this.map.get(e)}forEach(e){this.map.forEach(e)}forEachJointHandleAttachedToRigidBody(e,t){this.raw.forEachJointAttachedToRigidBody(e,t)}getAll(){return this.map.getAll()}}var Xs;(function(r){r[r.Average=0]="Average",r[r.Min=1]="Min",r[r.Multiply=2]="Multiply",r[r.Max=3]="Max"})(Xs||(Xs={}));class PS{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new xl}}class LS{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new di}forEachActiveRigidBodyHandle(e){this.raw.forEachActiveRigidBodyHandle(e)}}class AS{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new Yi}}class HS{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new Hi,this.tempManifold=new IS(null)}contactPairsWith(e,t){this.raw.contact_pairs_with(e,t)}intersectionPairsWith(e,t){this.raw.intersection_pairs_with(e,t)}contactPair(e,t,n){const i=this.raw.contact_pair(e,t);if(i){const o=i.collider1()!=e;let s;for(s=0;s<i.numContactManifolds();++s)this.tempManifold.raw=i.contactManifold(s),this.tempManifold.raw&&n(this.tempManifold,o),this.tempManifold.free();i.free()}}intersectionPair(e,t){return this.raw.intersection_pair(e,t)}}class IS{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e}normal(){return _.fromRaw(this.raw.normal())}localNormal1(){return _.fromRaw(this.raw.local_n1())}localNormal2(){return _.fromRaw(this.raw.local_n2())}subshape1(){return this.raw.subshape1()}subshape2(){return this.raw.subshape2()}numContacts(){return this.raw.num_contacts()}localContactPoint1(e){return _.fromRaw(this.raw.contact_local_p1(e))}localContactPoint2(e){return _.fromRaw(this.raw.contact_local_p2(e))}contactDist(e){return this.raw.contact_dist(e)}contactFid1(e){return this.raw.contact_fid1(e)}contactFid2(e){return this.raw.contact_fid2(e)}contactImpulse(e){return this.raw.contact_impulse(e)}contactTangentImpulseX(e){return this.raw.contact_tangent_impulse_x(e)}contactTangentImpulseY(e){return this.raw.contact_tangent_impulse_y(e)}numSolverContacts(){return this.raw.num_solver_contacts()}solverContactPoint(e){return _.fromRaw(this.raw.solver_contact_point(e))}solverContactDist(e){return this.raw.solver_contact_dist(e)}solverContactFriction(e){return this.raw.solver_contact_friction(e)}solverContactRestitution(e){return this.raw.solver_contact_restitution(e)}solverContactTangentVelocity(e){return _.fromRaw(this.raw.solver_contact_tangent_velocity(e))}}class Po{constructor(e,t,n,i,o){this.distance=e,this.point1=t,this.point2=n,this.normal1=i,this.normal2=o}static fromRaw(e){if(!e)return null;const t=new Po(e.distance(),_.fromRaw(e.point1()),_.fromRaw(e.point2()),_.fromRaw(e.normal1()),_.fromRaw(e.normal2()));return e.free(),t}}var Lo;(function(r){r[r.Vertex=0]="Vertex",r[r.Edge=1]="Edge",r[r.Face=2]="Face",r[r.Unknown=3]="Unknown"})(Lo||(Lo={}));class ca{constructor(e,t){this.point=e,this.isInside=t}static fromRaw(e){if(!e)return null;const t=new ca(_.fromRaw(e.point()),e.isInside());return e.free(),t}}class ks{constructor(e,t,n,i,o){this.featureType=Lo.Unknown,this.featureId=void 0,this.collider=e,this.point=t,this.isInside=n,o!==void 0&&(this.featureId=o),i!==void 0&&(this.featureType=i)}static fromRaw(e,t){if(!t)return null;const n=new ks(e.get(t.colliderHandle()),_.fromRaw(t.point()),t.isInside(),t.featureType(),t.featureId());return t.free(),n}}class la{constructor(e,t,n,i){this.featureType=Lo.Unknown,this.featureId=void 0,this.timeOfImpact=e,this.normal=t,i!==void 0&&(this.featureId=i),n!==void 0&&(this.featureType=n)}static fromRaw(e){if(!e)return null;const t=new la(e.time_of_impact(),_.fromRaw(e.normal()),e.featureType(),e.featureId());return e.free(),t}}class Ws{constructor(e,t,n,i,o){this.featureType=Lo.Unknown,this.featureId=void 0,this.collider=e,this.timeOfImpact=t,this.normal=n,o!==void 0&&(this.featureId=o),i!==void 0&&(this.featureType=i)}static fromRaw(e,t){if(!t)return null;const n=new Ws(e.get(t.colliderHandle()),t.time_of_impact(),_.fromRaw(t.normal()),t.featureType(),t.featureId());return t.free(),n}}class dd{constructor(e,t){this.collider=e,this.timeOfImpact=t}static fromRaw(e,t){if(!t)return null;const n=new dd(e.get(t.colliderHandle()),t.timeOfImpact());return t.free(),n}}class Co{constructor(e,t,n,i,o){this.time_of_impact=e,this.witness1=t,this.witness2=n,this.normal1=i,this.normal2=o}static fromRaw(e,t){if(!t)return null;const n=new Co(t.time_of_impact(),_.fromRaw(t.witness1()),_.fromRaw(t.witness2()),_.fromRaw(t.normal1()),_.fromRaw(t.normal2()));return t.free(),n}}class da extends Co{constructor(e,t,n,i,o,s){super(t,n,i,o,s),this.collider=e}static fromRaw(e,t){if(!t)return null;const n=new da(e.get(t.colliderHandle()),t.time_of_impact(),_.fromRaw(t.witness1()),_.fromRaw(t.witness2()),_.fromRaw(t.normal1()),_.fromRaw(t.normal2()));return t.free(),n}}class Ut{static fromRaw(e,t){const n=e.coShapeType(t);let i,o,s,a,c,l,d;switch(n){case Ft.Ball:return new rp(e.coRadius(t));case Ft.Cuboid:return i=e.coHalfExtents(t),new op(i.x,i.y,i.z);case Ft.RoundCuboid:return i=e.coHalfExtents(t),o=e.coRoundRadius(t),new sp(i.x,i.y,i.z,o);case Ft.Capsule:return c=e.coHalfHeight(t),l=e.coRadius(t),new ap(c,l);case Ft.Segment:return s=e.coVertices(t),new cp(_.new(s[0],s[1],s[2]),_.new(s[3],s[4],s[5]));case Ft.Polyline:return s=e.coVertices(t),a=e.coIndices(t),new up(s,a);case Ft.Triangle:return s=e.coVertices(t),new lp(_.new(s[0],s[1],s[2]),_.new(s[3],s[4],s[5]),_.new(s[6],s[7],s[8]));case Ft.RoundTriangle:return s=e.coVertices(t),o=e.coRoundRadius(t),new dp(_.new(s[0],s[1],s[2]),_.new(s[3],s[4],s[5]),_.new(s[6],s[7],s[8]),o);case Ft.HalfSpace:return d=_.fromRaw(e.coHalfspaceNormal(t)),new NS(d);case Ft.Voxels:const u=e.coVoxelData(t),h=e.coVoxelPrimitiveGeometry(t),f=e.coVoxelSize(t);return new hp(u,f,h);case Ft.TriMesh:s=e.coVertices(t),a=e.coIndices(t);const g=e.coTriMeshFlags(t);return new pp(s,a,g);case Ft.HeightField:const w=e.coHeightfieldScale(t),y=e.coHeightfieldHeights(t),m=e.coHeightfieldNRows(t),P=e.coHeightfieldNCols(t),E=e.coHeightFieldFlags(t);return new fp(m,P,y,w,E);case Ft.ConvexPolyhedron:return s=e.coVertices(t),a=e.coIndices(t),new Tl(s,a);case Ft.RoundConvexPolyhedron:return s=e.coVertices(t),a=e.coIndices(t),o=e.coRoundRadius(t),new Sl(s,a,o);case Ft.Cylinder:return c=e.coHalfHeight(t),l=e.coRadius(t),new mp(c,l);case Ft.RoundCylinder:return c=e.coHalfHeight(t),l=e.coRadius(t),o=e.coRoundRadius(t),new bp(c,l,o);case Ft.Cone:return c=e.coHalfHeight(t),l=e.coRadius(t),new yp(c,l);case Ft.RoundCone:return c=e.coHalfHeight(t),l=e.coRadius(t),o=e.coRoundRadius(t),new gp(c,l,o);default:throw new Error("unknown shape type: "+n)}}castShape(e,t,n,i,o,s,a,c,l,d){let u=_.intoRaw(e),h=We.intoRaw(t),f=_.intoRaw(n),g=_.intoRaw(o),w=We.intoRaw(s),y=_.intoRaw(a),m=this.intoRaw(),P=i.intoRaw(),E=Co.fromRaw(null,m.castShape(u,h,f,P,g,w,y,c,l,d));return u.free(),h.free(),f.free(),g.free(),w.free(),y.free(),m.free(),P.free(),E}intersectsShape(e,t,n,i,o){let s=_.intoRaw(e),a=We.intoRaw(t),c=_.intoRaw(i),l=We.intoRaw(o),d=this.intoRaw(),u=n.intoRaw(),h=d.intersectsShape(s,a,u,c,l);return s.free(),a.free(),c.free(),l.free(),d.free(),u.free(),h}contactShape(e,t,n,i,o,s){let a=_.intoRaw(e),c=We.intoRaw(t),l=_.intoRaw(i),d=We.intoRaw(o),u=this.intoRaw(),h=n.intoRaw(),f=Po.fromRaw(u.contactShape(a,c,h,l,d,s));return a.free(),c.free(),l.free(),d.free(),u.free(),h.free(),f}containsPoint(e,t,n){let i=_.intoRaw(e),o=We.intoRaw(t),s=_.intoRaw(n),a=this.intoRaw(),c=a.containsPoint(i,o,s);return i.free(),o.free(),s.free(),a.free(),c}projectPoint(e,t,n,i){let o=_.intoRaw(e),s=We.intoRaw(t),a=_.intoRaw(n),c=this.intoRaw(),l=ca.fromRaw(c.projectPoint(o,s,a,i));return o.free(),s.free(),a.free(),c.free(),l}intersectsRay(e,t,n,i){let o=_.intoRaw(t),s=We.intoRaw(n),a=_.intoRaw(e.origin),c=_.intoRaw(e.dir),l=this.intoRaw(),d=l.intersectsRay(o,s,a,c,i);return o.free(),s.free(),a.free(),c.free(),l.free(),d}castRay(e,t,n,i,o){let s=_.intoRaw(t),a=We.intoRaw(n),c=_.intoRaw(e.origin),l=_.intoRaw(e.dir),d=this.intoRaw(),u=d.castRay(s,a,c,l,i,o);return s.free(),a.free(),c.free(),l.free(),d.free(),u}castRayAndGetNormal(e,t,n,i,o){let s=_.intoRaw(t),a=We.intoRaw(n),c=_.intoRaw(e.origin),l=_.intoRaw(e.dir),d=this.intoRaw(),u=la.fromRaw(d.castRayAndGetNormal(s,a,c,l,i,o));return s.free(),a.free(),c.free(),l.free(),d.free(),u}}var Ot;(function(r){r[r.Ball=0]="Ball",r[r.Cuboid=1]="Cuboid",r[r.Capsule=2]="Capsule",r[r.Segment=3]="Segment",r[r.Polyline=4]="Polyline",r[r.Triangle=5]="Triangle",r[r.TriMesh=6]="TriMesh",r[r.HeightField=7]="HeightField",r[r.ConvexPolyhedron=9]="ConvexPolyhedron",r[r.Cylinder=10]="Cylinder",r[r.Cone=11]="Cone",r[r.RoundCuboid=12]="RoundCuboid",r[r.RoundTriangle=13]="RoundTriangle",r[r.RoundCylinder=14]="RoundCylinder",r[r.RoundCone=15]="RoundCone",r[r.RoundConvexPolyhedron=16]="RoundConvexPolyhedron",r[r.HalfSpace=17]="HalfSpace",r[r.Voxels=18]="Voxels"})(Ot||(Ot={}));var Iu;(function(r){r[r.FIX_INTERNAL_EDGES=1]="FIX_INTERNAL_EDGES"})(Iu||(Iu={}));var vl;(function(r){r[r.DELETE_BAD_TOPOLOGY_TRIANGLES=4]="DELETE_BAD_TOPOLOGY_TRIANGLES",r[r.ORIENTED=8]="ORIENTED",r[r.MERGE_DUPLICATE_VERTICES=16]="MERGE_DUPLICATE_VERTICES",r[r.DELETE_DEGENERATE_TRIANGLES=32]="DELETE_DEGENERATE_TRIANGLES",r[r.DELETE_DUPLICATE_TRIANGLES=64]="DELETE_DUPLICATE_TRIANGLES",r[r.FIX_INTERNAL_EDGES=144]="FIX_INTERNAL_EDGES"})(vl||(vl={}));class rp extends Ut{constructor(e){super(),this.type=Ot.Ball,this.radius=e}intoRaw(){return ve.ball(this.radius)}}class NS extends Ut{constructor(e){super(),this.type=Ot.HalfSpace,this.normal=e}intoRaw(){let e=_.intoRaw(this.normal),t=ve.halfspace(e);return e.free(),t}}class op extends Ut{constructor(e,t,n){super(),this.type=Ot.Cuboid,this.halfExtents=_.new(e,t,n)}intoRaw(){return ve.cuboid(this.halfExtents.x,this.halfExtents.y,this.halfExtents.z)}}class sp extends Ut{constructor(e,t,n,i){super(),this.type=Ot.RoundCuboid,this.halfExtents=_.new(e,t,n),this.borderRadius=i}intoRaw(){return ve.roundCuboid(this.halfExtents.x,this.halfExtents.y,this.halfExtents.z,this.borderRadius)}}class ap extends Ut{constructor(e,t){super(),this.type=Ot.Capsule,this.halfHeight=e,this.radius=t}intoRaw(){return ve.capsule(this.halfHeight,this.radius)}}class cp extends Ut{constructor(e,t){super(),this.type=Ot.Segment,this.a=e,this.b=t}intoRaw(){let e=_.intoRaw(this.a),t=_.intoRaw(this.b),n=ve.segment(e,t);return e.free(),t.free(),n}}class lp extends Ut{constructor(e,t,n){super(),this.type=Ot.Triangle,this.a=e,this.b=t,this.c=n}intoRaw(){let e=_.intoRaw(this.a),t=_.intoRaw(this.b),n=_.intoRaw(this.c),i=ve.triangle(e,t,n);return e.free(),t.free(),n.free(),i}}class dp extends Ut{constructor(e,t,n,i){super(),this.type=Ot.RoundTriangle,this.a=e,this.b=t,this.c=n,this.borderRadius=i}intoRaw(){let e=_.intoRaw(this.a),t=_.intoRaw(this.b),n=_.intoRaw(this.c),i=ve.roundTriangle(e,t,n,this.borderRadius);return e.free(),t.free(),n.free(),i}}class up extends Ut{constructor(e,t){super(),this.type=Ot.Polyline,this.vertices=e,this.indices=t??new Uint32Array(0)}intoRaw(){return ve.polyline(this.vertices,this.indices)}}class hp extends Ut{constructor(e,t,n){super(),this.type=Ot.Voxels,this.data=e,this.voxelSize=t,n!==void 0?this.primitiveGeometry=n:this.primitiveGeometry=qg.PseudoCube}intoRaw(){let e=_.intoRaw(this.voxelSize),t;return this.data instanceof Int32Array?t=ve.voxels(this.primitiveGeometry,e,this.data):t=ve.voxelsFromPoints(this.primitiveGeometry,e,this.data),e.free(),t}}class pp extends Ut{constructor(e,t,n){super(),this.type=Ot.TriMesh,this.vertices=e,this.indices=t,this.flags=n}intoRaw(){return ve.trimesh(this.vertices,this.indices,this.flags)}}class Tl extends Ut{constructor(e,t){super(),this.type=Ot.ConvexPolyhedron,this.vertices=e,this.indices=t}intoRaw(){return this.indices?ve.convexMesh(this.vertices,this.indices):ve.convexHull(this.vertices)}}class Sl extends Ut{constructor(e,t,n){super(),this.type=Ot.RoundConvexPolyhedron,this.vertices=e,this.indices=t,this.borderRadius=n}intoRaw(){return this.indices?ve.roundConvexMesh(this.vertices,this.indices,this.borderRadius):ve.roundConvexHull(this.vertices,this.borderRadius)}}class fp extends Ut{constructor(e,t,n,i,o){super(),this.type=Ot.HeightField,this.nrows=e,this.ncols=t,this.heights=n,this.scale=i,this.flags=o}intoRaw(){let e=_.intoRaw(this.scale),t=ve.heightfield(this.nrows,this.ncols,this.heights,e,this.flags);return e.free(),t}}class mp extends Ut{constructor(e,t){super(),this.type=Ot.Cylinder,this.halfHeight=e,this.radius=t}intoRaw(){return ve.cylinder(this.halfHeight,this.radius)}}class bp extends Ut{constructor(e,t,n){super(),this.type=Ot.RoundCylinder,this.borderRadius=n,this.halfHeight=e,this.radius=t}intoRaw(){return ve.roundCylinder(this.halfHeight,this.radius,this.borderRadius)}}class yp extends Ut{constructor(e,t){super(),this.type=Ot.Cone,this.halfHeight=e,this.radius=t}intoRaw(){return ve.cone(this.halfHeight,this.radius)}}class gp extends Ut{constructor(e,t,n){super(),this.type=Ot.RoundCone,this.halfHeight=e,this.radius=t,this.borderRadius=n}intoRaw(){return ve.roundCone(this.halfHeight,this.radius,this.borderRadius)}}class OS{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new ew}step(e,t,n,i,o,s,a,c,l,d,u,h){let f=_.intoRaw(e);u?this.raw.stepWithEvents(f,t.raw,n.raw,i.raw,o.raw,s.raw,a.raw,c.raw,l.raw,d.raw,u.raw,h,h?h.filterContactPair:null,h?h.filterIntersectionPair:null):this.raw.step(f,t.raw,n.raw,i.raw,o.raw,s.raw,a.raw,c.raw,l.raw,d.raw),f.free()}}var Nu;(function(r){r[r.EXCLUDE_FIXED=1]="EXCLUDE_FIXED",r[r.EXCLUDE_KINEMATIC=2]="EXCLUDE_KINEMATIC",r[r.EXCLUDE_DYNAMIC=4]="EXCLUDE_DYNAMIC",r[r.EXCLUDE_SENSORS=8]="EXCLUDE_SENSORS",r[r.EXCLUDE_SOLIDS=16]="EXCLUDE_SOLIDS",r[r.ONLY_DYNAMIC=3]="ONLY_DYNAMIC",r[r.ONLY_KINEMATIC=5]="ONLY_KINEMATIC",r[r.ONLY_FIXED=6]="ONLY_FIXED"})(Nu||(Nu={}));class CS{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new cd}update(e){this.raw.update(e.raw)}castRay(e,t,n,i,o,s,a,c,l,d){let u=_.intoRaw(n.origin),h=_.intoRaw(n.dir),f=dd.fromRaw(t,this.raw.castRay(e.raw,t.raw,u,h,i,o,s,a,c,l,d));return u.free(),h.free(),f}castRayAndGetNormal(e,t,n,i,o,s,a,c,l,d){let u=_.intoRaw(n.origin),h=_.intoRaw(n.dir),f=Ws.fromRaw(t,this.raw.castRayAndGetNormal(e.raw,t.raw,u,h,i,o,s,a,c,l,d));return u.free(),h.free(),f}intersectionsWithRay(e,t,n,i,o,s,a,c,l,d,u){let h=_.intoRaw(n.origin),f=_.intoRaw(n.dir),g=w=>s(Ws.fromRaw(t,w));this.raw.intersectionsWithRay(e.raw,t.raw,h,f,i,o,g,a,c,l,d,u),h.free(),f.free()}intersectionWithShape(e,t,n,i,o,s,a,c,l,d){let u=_.intoRaw(n),h=We.intoRaw(i),f=o.intoRaw(),g=this.raw.intersectionWithShape(e.raw,t.raw,u,h,f,s,a,c,l,d);return u.free(),h.free(),f.free(),g}projectPoint(e,t,n,i,o,s,a,c,l){let d=_.intoRaw(n),u=ks.fromRaw(t,this.raw.projectPoint(e.raw,t.raw,d,i,o,s,a,c,l));return d.free(),u}projectPointAndGetFeature(e,t,n,i,o,s,a,c){let l=_.intoRaw(n),d=ks.fromRaw(t,this.raw.projectPointAndGetFeature(e.raw,t.raw,l,i,o,s,a,c));return l.free(),d}intersectionsWithPoint(e,t,n,i,o,s,a,c,l){let d=_.intoRaw(n);this.raw.intersectionsWithPoint(e.raw,t.raw,d,i,o,s,a,c,l),d.free()}castShape(e,t,n,i,o,s,a,c,l,d,u,h,f,g){let w=_.intoRaw(n),y=We.intoRaw(i),m=_.intoRaw(o),P=s.intoRaw(),E=da.fromRaw(t,this.raw.castShape(e.raw,t.raw,w,y,m,P,a,c,l,d,u,h,f,g));return w.free(),y.free(),m.free(),P.free(),E}intersectionsWithShape(e,t,n,i,o,s,a,c,l,d,u){let h=_.intoRaw(n),f=We.intoRaw(i),g=o.intoRaw();this.raw.intersectionsWithShape(e.raw,t.raw,h,f,g,s,a,c,l,d,u),h.free(),f.free(),g.free()}collidersWithAabbIntersectingAabb(e,t,n){let i=_.intoRaw(e),o=_.intoRaw(t);this.raw.collidersWithAabbIntersectingAabb(i,o,n),i.free(),o.free()}}class Ou{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new nw}serializeAll(e,t,n,i,o,s,a,c,l){let d=_.intoRaw(e);const u=this.raw.serializeAll(d,t.raw,n.raw,i.raw,o.raw,s.raw,a.raw,c.raw,l.raw);return d.free(),u}deserializeAll(e){return Ao.fromRaw(this.raw.deserializeAll(e))}}class DS{constructor(e,t){this.vertices=e,this.colors=t}}class _S{free(){this.raw&&this.raw.free(),this.raw=void 0,this.vertices=void 0,this.colors=void 0}constructor(e){this.raw=e||new Kg}render(e,t,n,i,o){this.raw.render(e.raw,t.raw,n.raw,i.raw,o.raw),this.vertices=this.raw.vertices(),this.colors=this.raw.colors()}}class zS{}class US{constructor(e,t,n,i,o){this.params=t,this.bodies=n,this.colliders=i,this.queries=o,this.raw=new $g(e),this.rawCharacterCollision=new tp,this._applyImpulsesToDynamicBodies=!1,this._characterMass=null}free(){this.raw&&(this.raw.free(),this.rawCharacterCollision.free()),this.raw=void 0,this.rawCharacterCollision=void 0}up(){return this.raw.up()}setUp(e){let t=_.intoRaw(e);return this.raw.setUp(t)}applyImpulsesToDynamicBodies(){return this._applyImpulsesToDynamicBodies}setApplyImpulsesToDynamicBodies(e){this._applyImpulsesToDynamicBodies=e}characterMass(){return this._characterMass}setCharacterMass(e){this._characterMass=e}offset(){return this.raw.offset()}setOffset(e){this.raw.setOffset(e)}normalNudgeFactor(){return this.raw.normalNudgeFactor()}setNormalNudgeFactor(e){this.raw.setNormalNudgeFactor(e)}slideEnabled(){return this.raw.slideEnabled()}setSlideEnabled(e){this.raw.setSlideEnabled(e)}autostepMaxHeight(){return this.raw.autostepMaxHeight()}autostepMinWidth(){return this.raw.autostepMinWidth()}autostepIncludesDynamicBodies(){return this.raw.autostepIncludesDynamicBodies()}autostepEnabled(){return this.raw.autostepEnabled()}enableAutostep(e,t,n){this.raw.enableAutostep(e,t,n)}disableAutostep(){return this.raw.disableAutostep()}maxSlopeClimbAngle(){return this.raw.maxSlopeClimbAngle()}setMaxSlopeClimbAngle(e){this.raw.setMaxSlopeClimbAngle(e)}minSlopeSlideAngle(){return this.raw.minSlopeSlideAngle()}setMinSlopeSlideAngle(e){this.raw.setMinSlopeSlideAngle(e)}snapToGroundDistance(){return this.raw.snapToGroundDistance()}enableSnapToGround(e){this.raw.enableSnapToGround(e)}disableSnapToGround(){this.raw.disableSnapToGround()}snapToGroundEnabled(){return this.raw.snapToGroundEnabled()}computeColliderMovement(e,t,n,i,o){let s=_.intoRaw(t);this.raw.computeColliderMovement(this.params.dt,this.bodies.raw,this.colliders.raw,this.queries.raw,e.handle,s,this._applyImpulsesToDynamicBodies,this._characterMass,n,i,this.colliders.castClosure(o)),s.free()}computedMovement(){return _.fromRaw(this.raw.computedMovement())}computedGrounded(){return this.raw.computedGrounded()}numComputedCollisions(){return this.raw.numComputedCollisions()}computedCollision(e,t){if(this.raw.computedCollision(e,this.rawCharacterCollision)){let n=this.rawCharacterCollision;return t=t??new zS,t.translationDeltaApplied=_.fromRaw(n.translationDeltaApplied()),t.translationDeltaRemaining=_.fromRaw(n.translationDeltaRemaining()),t.toi=n.toi(),t.witness1=_.fromRaw(n.worldWitness1()),t.witness2=_.fromRaw(n.worldWitness2()),t.normal1=_.fromRaw(n.worldNormal1()),t.normal2=_.fromRaw(n.worldNormal2()),t.collider=this.colliders.get(n.handle()),t}else return null}}var Cu;(function(r){r[r.None=0]="None",r[r.LinX=1]="LinX",r[r.LinY=2]="LinY",r[r.LinZ=4]="LinZ",r[r.AngX=8]="AngX",r[r.AngY=16]="AngY",r[r.AngZ=32]="AngZ",r[r.AllLin=7]="AllLin",r[r.AllAng=56]="AllAng",r[r.All=63]="All"})(Cu||(Cu={}));class jS{constructor(e,t,n,i,o,s){this.params=e,this.bodies=t,this.raw=new tw(n,i,o,s)}free(){this.raw&&this.raw.free(),this.raw=void 0}setKp(e,t){this.raw.set_kp(e,t)}setKi(e,t){this.raw.set_kp(e,t)}setKd(e,t){this.raw.set_kp(e,t)}setAxes(e){this.raw.set_axes_mask(e)}resetIntegrals(){this.raw.reset_integrals()}applyLinearCorrection(e,t,n){let i=_.intoRaw(t),o=_.intoRaw(n);this.raw.apply_linear_correction(this.params.dt,this.bodies.raw,e.handle,i,o),i.free(),o.free()}applyAngularCorrection(e,t,n){let i=We.intoRaw(t),o=_.intoRaw(n);this.raw.apply_angular_correction(this.params.dt,this.bodies.raw,e.handle,i,o),i.free(),o.free()}linearCorrection(e,t,n){let i=_.intoRaw(t),o=_.intoRaw(n),s=this.raw.linear_correction(this.params.dt,this.bodies.raw,e.handle,i,o);return i.free(),o.free(),_.fromRaw(s)}angularCorrection(e,t,n){let i=We.intoRaw(t),o=_.intoRaw(n),s=this.raw.angular_correction(this.params.dt,this.bodies.raw,e.handle,i,o);return i.free(),o.free(),_.fromRaw(s)}}class FS{constructor(e,t,n,i){this.raw=new Jg(e.handle),this.bodies=t,this.colliders=n,this.queries=i,this._chassis=e}free(){this.raw&&this.raw.free(),this.raw=void 0}updateVehicle(e,t,n,i){this.raw.update_vehicle(e,this.bodies.raw,this.colliders.raw,this.queries.raw,t,n,this.colliders.castClosure(i))}currentVehicleSpeed(){return this.raw.current_vehicle_speed()}chassis(){return this._chassis}get indexUpAxis(){return this.raw.index_up_axis()}set indexUpAxis(e){this.raw.set_index_up_axis(e)}get indexForwardAxis(){return this.raw.index_forward_axis()}set setIndexForwardAxis(e){this.raw.set_index_forward_axis(e)}addWheel(e,t,n,i,o){let s=_.intoRaw(e),a=_.intoRaw(t),c=_.intoRaw(n);this.raw.add_wheel(s,a,c,i,o),s.free(),a.free(),c.free()}numWheels(){return this.raw.num_wheels()}wheelChassisConnectionPointCs(e){return _.fromRaw(this.raw.wheel_chassis_connection_point_cs(e))}setWheelChassisConnectionPointCs(e,t){let n=_.intoRaw(t);this.raw.set_wheel_chassis_connection_point_cs(e,n),n.free()}wheelSuspensionRestLength(e){return this.raw.wheel_suspension_rest_length(e)}setWheelSuspensionRestLength(e,t){this.raw.set_wheel_suspension_rest_length(e,t)}wheelMaxSuspensionTravel(e){return this.raw.wheel_max_suspension_travel(e)}setWheelMaxSuspensionTravel(e,t){this.raw.set_wheel_max_suspension_travel(e,t)}wheelRadius(e){return this.raw.wheel_radius(e)}setWheelRadius(e,t){this.raw.set_wheel_radius(e,t)}wheelSuspensionStiffness(e){return this.raw.wheel_suspension_stiffness(e)}setWheelSuspensionStiffness(e,t){this.raw.set_wheel_suspension_stiffness(e,t)}wheelSuspensionCompression(e){return this.raw.wheel_suspension_compression(e)}setWheelSuspensionCompression(e,t){this.raw.set_wheel_suspension_compression(e,t)}wheelSuspensionRelaxation(e){return this.raw.wheel_suspension_relaxation(e)}setWheelSuspensionRelaxation(e,t){this.raw.set_wheel_suspension_relaxation(e,t)}wheelMaxSuspensionForce(e){return this.raw.wheel_max_suspension_force(e)}setWheelMaxSuspensionForce(e,t){this.raw.set_wheel_max_suspension_force(e,t)}wheelBrake(e){return this.raw.wheel_brake(e)}setWheelBrake(e,t){this.raw.set_wheel_brake(e,t)}wheelSteering(e){return this.raw.wheel_steering(e)}setWheelSteering(e,t){this.raw.set_wheel_steering(e,t)}wheelEngineForce(e){return this.raw.wheel_engine_force(e)}setWheelEngineForce(e,t){this.raw.set_wheel_engine_force(e,t)}wheelDirectionCs(e){return _.fromRaw(this.raw.wheel_direction_cs(e))}setWheelDirectionCs(e,t){let n=_.intoRaw(t);this.raw.set_wheel_direction_cs(e,n),n.free()}wheelAxleCs(e){return _.fromRaw(this.raw.wheel_axle_cs(e))}setWheelAxleCs(e,t){let n=_.intoRaw(t);this.raw.set_wheel_axle_cs(e,n),n.free()}wheelFrictionSlip(e){return this.raw.wheel_friction_slip(e)}setWheelFrictionSlip(e,t){this.raw.set_wheel_friction_slip(e,t)}wheelSideFrictionStiffness(e){return this.raw.wheel_side_friction_stiffness(e)}setWheelSideFrictionStiffness(e,t){this.raw.set_wheel_side_friction_stiffness(e,t)}wheelRotation(e){return this.raw.wheel_rotation(e)}wheelForwardImpulse(e){return this.raw.wheel_forward_impulse(e)}wheelSideImpulse(e){return this.raw.wheel_side_impulse(e)}wheelSuspensionForce(e){return this.raw.wheel_suspension_force(e)}wheelContactNormal(e){return _.fromRaw(this.raw.wheel_contact_normal_ws(e))}wheelContactPoint(e){return _.fromRaw(this.raw.wheel_contact_point_ws(e))}wheelSuspensionLength(e){return this.raw.wheel_suspension_length(e)}wheelHardPoint(e){return _.fromRaw(this.raw.wheel_hard_point_ws(e))}wheelIsInContact(e){return this.raw.wheel_is_in_contact(e)}wheelGroundObject(e){return this.colliders.get(this.raw.wheel_ground_object(e))}}class Ao{free(){this.integrationParameters.free(),this.islands.free(),this.broadPhase.free(),this.narrowPhase.free(),this.bodies.free(),this.colliders.free(),this.impulseJoints.free(),this.multibodyJoints.free(),this.ccdSolver.free(),this.queryPipeline.free(),this.physicsPipeline.free(),this.serializationPipeline.free(),this.debugRenderPipeline.free(),this.characterControllers.forEach(e=>e.free()),this.pidControllers.forEach(e=>e.free()),this.vehicleControllers.forEach(e=>e.free()),this.integrationParameters=void 0,this.islands=void 0,this.broadPhase=void 0,this.narrowPhase=void 0,this.bodies=void 0,this.colliders=void 0,this.ccdSolver=void 0,this.impulseJoints=void 0,this.multibodyJoints=void 0,this.queryPipeline=void 0,this.physicsPipeline=void 0,this.serializationPipeline=void 0,this.debugRenderPipeline=void 0,this.characterControllers=void 0,this.pidControllers=void 0,this.vehicleControllers=void 0}constructor(e,t,n,i,o,s,a,c,l,d,u,h,f,g){this.gravity=e,this.integrationParameters=new pS(t),this.islands=new LS(n),this.broadPhase=new AS(i),this.narrowPhase=new HS(o),this.bodies=new hS(s),this.colliders=new VS(a),this.impulseJoints=new vS(c),this.multibodyJoints=new RS(l),this.ccdSolver=new PS(d),this.queryPipeline=new CS(u),this.physicsPipeline=new OS(h),this.serializationPipeline=new Ou(f),this.debugRenderPipeline=new _S(g),this.characterControllers=new Set,this.pidControllers=new Set,this.vehicleControllers=new Set,this.impulseJoints.finalizeDeserialization(this.bodies),this.bodies.finalizeDeserialization(this.colliders),this.colliders.finalizeDeserialization(this.bodies)}static fromRaw(e){return e?new Ao(_.fromRaw(e.takeGravity()),e.takeIntegrationParameters(),e.takeIslandManager(),e.takeBroadPhase(),e.takeNarrowPhase(),e.takeBodies(),e.takeColliders(),e.takeImpulseJoints(),e.takeMultibodyJoints()):null}takeSnapshot(){return this.serializationPipeline.serializeAll(this.gravity,this.integrationParameters,this.islands,this.broadPhase,this.narrowPhase,this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints)}static restoreSnapshot(e){return new Ou().deserializeAll(e)}debugRender(){return this.debugRenderPipeline.render(this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints,this.narrowPhase),new DS(this.debugRenderPipeline.vertices,this.debugRenderPipeline.colors)}step(e,t){this.physicsPipeline.step(this.gravity,this.integrationParameters,this.islands,this.broadPhase,this.narrowPhase,this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints,this.ccdSolver,e,t),this.queryPipeline.update(this.colliders)}propagateModifiedBodyPositionsToColliders(){this.bodies.raw.propagateModifiedBodyPositionsToColliders(this.colliders.raw)}updateSceneQueries(){this.propagateModifiedBodyPositionsToColliders(),this.queryPipeline.update(this.colliders)}get timestep(){return this.integrationParameters.dt}set timestep(e){this.integrationParameters.dt=e}get lengthUnit(){return this.integrationParameters.lengthUnit}set lengthUnit(e){this.integrationParameters.lengthUnit=e}get numSolverIterations(){return this.integrationParameters.numSolverIterations}set numSolverIterations(e){this.integrationParameters.numSolverIterations=e}get numAdditionalFrictionIterations(){return this.integrationParameters.numAdditionalFrictionIterations}set numAdditionalFrictionIterations(e){this.integrationParameters.numAdditionalFrictionIterations=e}get numInternalPgsIterations(){return this.integrationParameters.numInternalPgsIterations}set numInternalPgsIterations(e){this.integrationParameters.numInternalPgsIterations=e}switchToStandardPgsSolver(){this.integrationParameters.switchToStandardPgsSolver()}switchToSmallStepsPgsSolver(){this.integrationParameters.switchToSmallStepsPgsSolver()}switchToSmallStepsPgsSolverWithoutWarmstart(){this.integrationParameters.switchToSmallStepsPgsSolverWithoutWarmstart()}createRigidBody(e){return this.bodies.createRigidBody(this.colliders,e)}createCharacterController(e){let t=new US(e,this.integrationParameters,this.bodies,this.colliders,this.queryPipeline);return this.characterControllers.add(t),t}removeCharacterController(e){this.characterControllers.delete(e),e.free()}createPidController(e,t,n,i){let o=new jS(this.integrationParameters,this.bodies,e,t,n,i);return this.pidControllers.add(o),o}removePidController(e){this.pidControllers.delete(e),e.free()}createVehicleController(e){let t=new FS(e,this.bodies,this.colliders,this.queryPipeline);return this.vehicleControllers.add(t),t}removeVehicleController(e){this.vehicleControllers.delete(e),e.free()}createCollider(e,t){let n=t?t.handle:void 0;return this.colliders.createCollider(this.bodies,e,n)}createImpulseJoint(e,t,n,i){return this.impulseJoints.createJoint(this.bodies,e,t.handle,n.handle,i)}createMultibodyJoint(e,t,n,i){return this.multibodyJoints.createJoint(e,t.handle,n.handle,i)}getRigidBody(e){return this.bodies.get(e)}getCollider(e){return this.colliders.get(e)}getImpulseJoint(e){return this.impulseJoints.get(e)}getMultibodyJoint(e){return this.multibodyJoints.get(e)}removeRigidBody(e){this.bodies&&this.bodies.remove(e.handle,this.islands,this.colliders,this.impulseJoints,this.multibodyJoints)}removeCollider(e,t){this.colliders&&this.colliders.remove(e.handle,this.islands,this.bodies,t)}removeImpulseJoint(e,t){this.impulseJoints&&this.impulseJoints.remove(e.handle,t)}removeMultibodyJoint(e,t){this.impulseJoints&&this.multibodyJoints.remove(e.handle,t)}forEachCollider(e){this.colliders.forEach(e)}forEachRigidBody(e){this.bodies.forEach(e)}forEachActiveRigidBody(e){this.bodies.forEachActiveRigidBody(this.islands,e)}castRay(e,t,n,i,o,s,a,c){return this.queryPipeline.castRay(this.bodies,this.colliders,e,t,n,i,o,s?s.handle:null,a?a.handle:null,this.colliders.castClosure(c))}castRayAndGetNormal(e,t,n,i,o,s,a,c){return this.queryPipeline.castRayAndGetNormal(this.bodies,this.colliders,e,t,n,i,o,s?s.handle:null,a?a.handle:null,this.colliders.castClosure(c))}intersectionsWithRay(e,t,n,i,o,s,a,c,l){this.queryPipeline.intersectionsWithRay(this.bodies,this.colliders,e,t,n,i,o,s,a?a.handle:null,c?c.handle:null,this.colliders.castClosure(l))}intersectionWithShape(e,t,n,i,o,s,a,c){let l=this.queryPipeline.intersectionWithShape(this.bodies,this.colliders,e,t,n,i,o,s?s.handle:null,a?a.handle:null,this.colliders.castClosure(c));return l!=null?this.colliders.get(l):null}projectPoint(e,t,n,i,o,s,a){return this.queryPipeline.projectPoint(this.bodies,this.colliders,e,t,n,i,o?o.handle:null,s?s.handle:null,this.colliders.castClosure(a))}projectPointAndGetFeature(e,t,n,i,o,s){return this.queryPipeline.projectPointAndGetFeature(this.bodies,this.colliders,e,t,n,i?i.handle:null,o?o.handle:null,this.colliders.castClosure(s))}intersectionsWithPoint(e,t,n,i,o,s,a){this.queryPipeline.intersectionsWithPoint(this.bodies,this.colliders,e,this.colliders.castClosure(t),n,i,o?o.handle:null,s?s.handle:null,this.colliders.castClosure(a))}castShape(e,t,n,i,o,s,a,c,l,d,u,h){return this.queryPipeline.castShape(this.bodies,this.colliders,e,t,n,i,o,s,a,c,l,d?d.handle:null,u?u.handle:null,this.colliders.castClosure(h))}intersectionsWithShape(e,t,n,i,o,s,a,c,l){this.queryPipeline.intersectionsWithShape(this.bodies,this.colliders,e,t,n,this.colliders.castClosure(i),o,s,a?a.handle:null,c?c.handle:null,this.colliders.castClosure(l))}collidersWithAabbIntersectingAabb(e,t,n){this.queryPipeline.collidersWithAabbIntersectingAabb(e,t,this.colliders.castClosure(n))}contactPairsWith(e,t){this.narrowPhase.contactPairsWith(e.handle,this.colliders.castClosure(t))}intersectionPairsWith(e,t){this.narrowPhase.intersectionPairsWith(e.handle,this.colliders.castClosure(t))}contactPair(e,t,n){this.narrowPhase.contactPair(e.handle,t.handle,n)}intersectionPair(e,t){return this.narrowPhase.intersectionPair(e.handle,t.handle)}}var Ml;(function(r){r[r.NONE=0]="NONE",r[r.COLLISION_EVENTS=1]="COLLISION_EVENTS",r[r.CONTACT_FORCE_EVENTS=2]="CONTACT_FORCE_EVENTS"})(Ml||(Ml={}));var El;(function(r){r[r.NONE=0]="NONE",r[r.FILTER_CONTACT_PAIRS=1]="FILTER_CONTACT_PAIRS",r[r.FILTER_INTERSECTION_PAIRS=2]="FILTER_INTERSECTION_PAIRS"})(El||(El={}));var Du;(function(r){r[r.EMPTY=0]="EMPTY",r[r.COMPUTE_IMPULSE=1]="COMPUTE_IMPULSE"})(Du||(Du={}));var Rl;(function(r){r[r.DYNAMIC_DYNAMIC=1]="DYNAMIC_DYNAMIC",r[r.DYNAMIC_KINEMATIC=12]="DYNAMIC_KINEMATIC",r[r.DYNAMIC_FIXED=2]="DYNAMIC_FIXED",r[r.KINEMATIC_KINEMATIC=52224]="KINEMATIC_KINEMATIC",r[r.KINEMATIC_FIXED=8704]="KINEMATIC_FIXED",r[r.FIXED_FIXED=32]="FIXED_FIXED",r[r.DEFAULT=15]="DEFAULT",r[r.ALL=60943]="ALL"})(Rl||(Rl={}));class _u{constructor(e,t,n,i){this.colliderSet=e,this.handle=t,this._parent=n,this._shape=i}finalizeDeserialization(e){this.handle!=null&&(this._parent=e.get(this.colliderSet.raw.coParent(this.handle)))}ensureShapeIsCached(){this._shape||(this._shape=Ut.fromRaw(this.colliderSet.raw,this.handle))}get shape(){return this.ensureShapeIsCached(),this._shape}clearShapeCache(){this._shape=null}isValid(){return this.colliderSet.raw.contains(this.handle)}translation(){return _.fromRaw(this.colliderSet.raw.coTranslation(this.handle))}rotation(){return We.fromRaw(this.colliderSet.raw.coRotation(this.handle))}isSensor(){return this.colliderSet.raw.coIsSensor(this.handle)}setSensor(e){this.colliderSet.raw.coSetSensor(this.handle,e)}setShape(e){let t=e.intoRaw();this.colliderSet.raw.coSetShape(this.handle,t),t.free(),this._shape=e}setEnabled(e){this.colliderSet.raw.coSetEnabled(this.handle,e)}isEnabled(){return this.colliderSet.raw.coIsEnabled(this.handle)}setRestitution(e){this.colliderSet.raw.coSetRestitution(this.handle,e)}setFriction(e){this.colliderSet.raw.coSetFriction(this.handle,e)}frictionCombineRule(){return this.colliderSet.raw.coFrictionCombineRule(this.handle)}setFrictionCombineRule(e){this.colliderSet.raw.coSetFrictionCombineRule(this.handle,e)}restitutionCombineRule(){return this.colliderSet.raw.coRestitutionCombineRule(this.handle)}setRestitutionCombineRule(e){this.colliderSet.raw.coSetRestitutionCombineRule(this.handle,e)}setCollisionGroups(e){this.colliderSet.raw.coSetCollisionGroups(this.handle,e)}setSolverGroups(e){this.colliderSet.raw.coSetSolverGroups(this.handle,e)}contactSkin(){return this.colliderSet.raw.coContactSkin(this.handle)}setContactSkin(e){return this.colliderSet.raw.coSetContactSkin(this.handle,e)}activeHooks(){return this.colliderSet.raw.coActiveHooks(this.handle)}setActiveHooks(e){this.colliderSet.raw.coSetActiveHooks(this.handle,e)}activeEvents(){return this.colliderSet.raw.coActiveEvents(this.handle)}setActiveEvents(e){this.colliderSet.raw.coSetActiveEvents(this.handle,e)}activeCollisionTypes(){return this.colliderSet.raw.coActiveCollisionTypes(this.handle)}setContactForceEventThreshold(e){return this.colliderSet.raw.coSetContactForceEventThreshold(this.handle,e)}contactForceEventThreshold(){return this.colliderSet.raw.coContactForceEventThreshold(this.handle)}setActiveCollisionTypes(e){this.colliderSet.raw.coSetActiveCollisionTypes(this.handle,e)}setDensity(e){this.colliderSet.raw.coSetDensity(this.handle,e)}setMass(e){this.colliderSet.raw.coSetMass(this.handle,e)}setMassProperties(e,t,n,i){let o=_.intoRaw(t),s=_.intoRaw(n),a=We.intoRaw(i);this.colliderSet.raw.coSetMassProperties(this.handle,e,o,s,a),o.free(),s.free(),a.free()}setTranslation(e){this.colliderSet.raw.coSetTranslation(this.handle,e.x,e.y,e.z)}setTranslationWrtParent(e){this.colliderSet.raw.coSetTranslationWrtParent(this.handle,e.x,e.y,e.z)}setRotation(e){this.colliderSet.raw.coSetRotation(this.handle,e.x,e.y,e.z,e.w)}setRotationWrtParent(e){this.colliderSet.raw.coSetRotationWrtParent(this.handle,e.x,e.y,e.z,e.w)}shapeType(){return this.colliderSet.raw.coShapeType(this.handle)}halfExtents(){return _.fromRaw(this.colliderSet.raw.coHalfExtents(this.handle))}setHalfExtents(e){const t=_.intoRaw(e);this.colliderSet.raw.coSetHalfExtents(this.handle,t)}radius(){return this.colliderSet.raw.coRadius(this.handle)}setRadius(e){this.colliderSet.raw.coSetRadius(this.handle,e)}roundRadius(){return this.colliderSet.raw.coRoundRadius(this.handle)}setRoundRadius(e){this.colliderSet.raw.coSetRoundRadius(this.handle,e)}halfHeight(){return this.colliderSet.raw.coHalfHeight(this.handle)}setHalfHeight(e){this.colliderSet.raw.coSetHalfHeight(this.handle,e)}setVoxel(e,t,n,i){this.colliderSet.raw.coSetVoxel(this.handle,e,t,n,i),this._shape=null}vertices(){return this.colliderSet.raw.coVertices(this.handle)}indices(){return this.colliderSet.raw.coIndices(this.handle)}heightfieldHeights(){return this.colliderSet.raw.coHeightfieldHeights(this.handle)}heightfieldScale(){let e=this.colliderSet.raw.coHeightfieldScale(this.handle);return _.fromRaw(e)}heightfieldNRows(){return this.colliderSet.raw.coHeightfieldNRows(this.handle)}heightfieldNCols(){return this.colliderSet.raw.coHeightfieldNCols(this.handle)}parent(){return this._parent}friction(){return this.colliderSet.raw.coFriction(this.handle)}restitution(){return this.colliderSet.raw.coRestitution(this.handle)}density(){return this.colliderSet.raw.coDensity(this.handle)}mass(){return this.colliderSet.raw.coMass(this.handle)}volume(){return this.colliderSet.raw.coVolume(this.handle)}collisionGroups(){return this.colliderSet.raw.coCollisionGroups(this.handle)}solverGroups(){return this.colliderSet.raw.coSolverGroups(this.handle)}containsPoint(e){let t=_.intoRaw(e),n=this.colliderSet.raw.coContainsPoint(this.handle,t);return t.free(),n}projectPoint(e,t){let n=_.intoRaw(e),i=ca.fromRaw(this.colliderSet.raw.coProjectPoint(this.handle,n,t));return n.free(),i}intersectsRay(e,t){let n=_.intoRaw(e.origin),i=_.intoRaw(e.dir),o=this.colliderSet.raw.coIntersectsRay(this.handle,n,i,t);return n.free(),i.free(),o}castShape(e,t,n,i,o,s,a,c){let l=_.intoRaw(e),d=_.intoRaw(n),u=We.intoRaw(i),h=_.intoRaw(o),f=t.intoRaw(),g=Co.fromRaw(this.colliderSet,this.colliderSet.raw.coCastShape(this.handle,l,f,d,u,h,s,a,c));return l.free(),d.free(),u.free(),h.free(),f.free(),g}castCollider(e,t,n,i,o,s){let a=_.intoRaw(e),c=_.intoRaw(n),l=da.fromRaw(this.colliderSet,this.colliderSet.raw.coCastCollider(this.handle,a,t.handle,c,i,o,s));return a.free(),c.free(),l}intersectsShape(e,t,n){let i=_.intoRaw(t),o=We.intoRaw(n),s=e.intoRaw(),a=this.colliderSet.raw.coIntersectsShape(this.handle,s,i,o);return i.free(),o.free(),s.free(),a}contactShape(e,t,n,i){let o=_.intoRaw(t),s=We.intoRaw(n),a=e.intoRaw(),c=Po.fromRaw(this.colliderSet.raw.coContactShape(this.handle,a,o,s,i));return o.free(),s.free(),a.free(),c}contactCollider(e,t){return Po.fromRaw(this.colliderSet.raw.coContactCollider(this.handle,e.handle,t))}castRay(e,t,n){let i=_.intoRaw(e.origin),o=_.intoRaw(e.dir),s=this.colliderSet.raw.coCastRay(this.handle,i,o,t,n);return i.free(),o.free(),s}castRayAndGetNormal(e,t,n){let i=_.intoRaw(e.origin),o=_.intoRaw(e.dir),s=la.fromRaw(this.colliderSet.raw.coCastRayAndGetNormal(this.handle,i,o,t,n));return i.free(),o.free(),s}}var vr;(function(r){r[r.Density=0]="Density",r[r.Mass=1]="Mass",r[r.MassProps=2]="MassProps"})(vr||(vr={}));class xt{constructor(e){this.enabled=!0,this.shape=e,this.massPropsMode=vr.Density,this.density=1,this.friction=.5,this.restitution=0,this.rotation=We.identity(),this.translation=_.zeros(),this.isSensor=!1,this.collisionGroups=4294967295,this.solverGroups=4294967295,this.frictionCombineRule=Xs.Average,this.restitutionCombineRule=Xs.Average,this.activeCollisionTypes=Rl.DEFAULT,this.activeEvents=Ml.NONE,this.activeHooks=El.NONE,this.mass=0,this.centerOfMass=_.zeros(),this.contactForceEventThreshold=0,this.contactSkin=0,this.principalAngularInertia=_.zeros(),this.angularInertiaLocalFrame=We.identity()}static ball(e){const t=new rp(e);return new xt(t)}static capsule(e,t){const n=new ap(e,t);return new xt(n)}static segment(e,t){const n=new cp(e,t);return new xt(n)}static triangle(e,t,n){const i=new lp(e,t,n);return new xt(i)}static roundTriangle(e,t,n,i){const o=new dp(e,t,n,i);return new xt(o)}static polyline(e,t){const n=new up(e,t);return new xt(n)}static voxels(e,t,n){const i=new hp(e,t,n);return new xt(i)}static trimesh(e,t,n){const i=new pp(e,t,n);return new xt(i)}static cuboid(e,t,n){const i=new op(e,t,n);return new xt(i)}static roundCuboid(e,t,n,i){const o=new sp(e,t,n,i);return new xt(o)}static heightfield(e,t,n,i,o){const s=new fp(e,t,n,i,o);return new xt(s)}static cylinder(e,t){const n=new mp(e,t);return new xt(n)}static roundCylinder(e,t,n){const i=new bp(e,t,n);return new xt(i)}static cone(e,t){const n=new yp(e,t);return new xt(n)}static roundCone(e,t,n){const i=new gp(e,t,n);return new xt(i)}static convexHull(e){const t=new Tl(e,null);return new xt(t)}static convexMesh(e,t){const n=new Tl(e,t);return new xt(n)}static roundConvexHull(e,t){const n=new Sl(e,null,t);return new xt(n)}static roundConvexMesh(e,t,n){const i=new Sl(e,t,n);return new xt(i)}setTranslation(e,t,n){if(typeof e!="number"||typeof t!="number"||typeof n!="number")throw TypeError("The translation components must be numbers.");return this.translation={x:e,y:t,z:n},this}setRotation(e){return We.copy(this.rotation,e),this}setSensor(e){return this.isSensor=e,this}setEnabled(e){return this.enabled=e,this}setContactSkin(e){return this.contactSkin=e,this}setDensity(e){return this.massPropsMode=vr.Density,this.density=e,this}setMass(e){return this.massPropsMode=vr.Mass,this.mass=e,this}setMassProperties(e,t,n,i){return this.massPropsMode=vr.MassProps,this.mass=e,_.copy(this.centerOfMass,t),_.copy(this.principalAngularInertia,n),We.copy(this.angularInertiaLocalFrame,i),this}setRestitution(e){return this.restitution=e,this}setFriction(e){return this.friction=e,this}setFrictionCombineRule(e){return this.frictionCombineRule=e,this}setRestitutionCombineRule(e){return this.restitutionCombineRule=e,this}setCollisionGroups(e){return this.collisionGroups=e,this}setSolverGroups(e){return this.solverGroups=e,this}setActiveHooks(e){return this.activeHooks=e,this}setActiveEvents(e){return this.activeEvents=e,this}setActiveCollisionTypes(e){return this.activeCollisionTypes=e,this}setContactForceEventThreshold(e){return this.contactForceEventThreshold=e,this}}class VS{free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}constructor(e){this.raw=e||new vt,this.map=new aa,e&&e.forEachColliderHandle(t=>{this.map.set(t,new _u(this,t,null))})}castClosure(e){return t=>{if(e)return e(this.get(t))}}finalizeDeserialization(e){this.map.forEach(t=>t.finalizeDeserialization(e))}createCollider(e,t,n){let i=n!=null&&n!=null;if(i&&isNaN(n))throw Error("Cannot create a collider with a parent rigid-body handle that is not a number.");let o=t.shape.intoRaw(),s=_.intoRaw(t.translation),a=We.intoRaw(t.rotation),c=_.intoRaw(t.centerOfMass),l=_.intoRaw(t.principalAngularInertia),d=We.intoRaw(t.angularInertiaLocalFrame),u=this.raw.createCollider(t.enabled,o,s,a,t.massPropsMode,t.mass,c,l,d,t.density,t.friction,t.restitution,t.frictionCombineRule,t.restitutionCombineRule,t.isSensor,t.collisionGroups,t.solverGroups,t.activeCollisionTypes,t.activeHooks,t.activeEvents,t.contactForceEventThreshold,t.contactSkin,i,i?n:0,e.raw);o.free(),s.free(),a.free(),c.free(),l.free(),d.free();let h=i?e.get(n):null,f=new _u(this,u,h,t.shape);return this.map.set(u,f),f}remove(e,t,n,i){this.raw.remove(e,t.raw,n.raw,i),this.unmap(e)}unmap(e){this.map.delete(e)}get(e){return this.map.get(e)}len(){return this.map.len()}contains(e){return this.get(e)!=null}forEach(e){this.map.forEach(e)}getAll(){return this.map.getAll()}}const XS=2236962,kS=2,WS=1,BS=3,wp=1/60,GS=!0,ZS=!0,YS="high-performance",zu=512,qS=Vn,KS=new A(0,-9.81,0),JS=16777215,QS=.5,$S=16777215,eM=.75,tM=[.5,2.5,1],nM=!0,iM=-.003,rM=.5,oM=50,sM=-5,aM=5,cM=5,lM=-5;class ud{constructor({containerElement:e,camera:t}){this.#i=t,this.#e.background=new Ue(XS),this.#t.setSize(innerWidth,innerHeight),this.#t.shadowMap.enabled=!0,this.#t.shadowMap.type=qS,this.#n.integrationParameters.numSolverIterations=kS,this.#n.integrationParameters.numAdditionalFrictionIterations=WS,this.#n.integrationParameters.numInternalPgsIterations=BS,this.#n.timestep=wp,this.#e.add(new V1(JS,QS));const n=new kh($S,eM);n.shadow.mapSize.set(zu,zu),n.position.set(...tM),n.castShadow=nM,n.shadow.bias=iM,n.shadow.camera.near=rM,n.shadow.camera.far=oM,n.shadow.camera.left=sM,n.shadow.camera.right=aM,n.shadow.camera.top=cM,n.shadow.camera.bottom=lM,this.#e.add(n),e.appendChild(this.#t.domElement)}#e=new d1;#t=new zy({antialias:GS,preserveDrawingBuffer:ZS,powerPreference:YS});#n=new Ao(KS);#i=null;createFixedBody(){const e=Sn.fixed();return this.#n.createRigidBody(e)}createKinematicBody(){const e=Sn.kinematicPositionBased();return this.#n.createRigidBody(e)}createDynamicBody(){const e=Sn.dynamic();return this.#n.createRigidBody(e)}createCuboidCollider({width:e,height:t,depth:n,userData:i,position:o,rotation:s,sensor:a,friction:c,restitution:l,density:d},u=this.createFixedBody()){const h=xt.cuboid(e/2,t/2,n/2);o!==void 0&&h.setTranslation(...o),s!==void 0&&h.setRotation(new Rt().setFromEuler(new It(...s))),a!==void 0&&h.setSensor(a);const f=this.#n.createCollider(h,u);return c!==void 0&&f.setFriction(c),l!==void 0&&f.setRestitution(l),d!==void 0&&f.setDensity(d),i!==void 0&&(f.userData=i),f}createTrimeshCollider({vertices:e,indices:t,userData:n,position:i,rotation:o,sensor:s,friction:a,restitution:c,density:l},d=this.createFixedBody()){const u=xt.trimesh(e,t,vl.FIX_INTERNAL_EDGES);i!==void 0&&u.setTranslation(...i),o!==void 0&&u.setRotation(new Rt().setFromEuler(new It(...o))),s!==void 0&&u.setSensor(s);const h=this.#n.createCollider(u,d);return a!==void 0&&h.setFriction(a),c!==void 0&&h.setRestitution(c),l!==void 0&&h.setDensity(l),n!==void 0&&(h.userData=n),h}createCylinderCollider({radius:e,height:t,userData:n,position:i,rotation:o,sensor:s,friction:a,restitution:c,density:l},d=this.createFixedBody()){const u=xt.cylinder(t/2,e);i!==void 0&&u.setTranslation(...i),o!==void 0&&u.setRotation(new Rt().setFromEuler(new It(...o))),s!==void 0&&u.setSensor(s);const h=this.#n.createCollider(u,d);return a!==void 0&&h.setFriction(a),c!==void 0&&h.setRestitution(c),l!==void 0&&h.setDensity(l),n!==void 0&&(h.userData=n),h}addObject(e){this.#e.add(e)}render(){this.#t.render(this.#e,this.#i)}step(){this.#n.step()}resize(e,t){this.#t.setSize(e,t),this.#i.isPerspectiveCamera&&(this.#i.aspect=e/t,this.#i.updateProjectionMatrix())}set timestep(e){this.#n.timestep=e}get timestep(){return this.#n.timestep}get triangles(){return this.#t.info.render.triangles}get children(){return this.#e.children}forEachCollision(e){this.#n.forEachCollider(t=>this.#n.intersectionPairsWith(t,n=>{t.userData.objectType!==void 0&&n.userData.objectType!==void 0&&e(t.userData,n.userData)}))}forEachCollider(e){this.#n.forEachCollider(t=>{t.isEnabled()&&e(t)})}loadModel(e){return new rg().loadAsync(e)}async save(){return{world:await dM(this.#n.takeSnapshot())}}async load(e){this.#n=Ao.restoreSnapshot(await uM(e.world))}get worldBodies(){return this.#n.bodies}get worldColliders(){return this.#n.colliders}removeWorldBody(e){this.#n.removeRigidBody(e)}removeWorldCollider(e){this.#n.removeCollider(e)}}ud.TIMESTEP=wp;async function dM(r){const e=new Blob([r]).stream(),t=new CompressionStream("gzip"),n=await new Response(e.pipeThrough(t)).blob();return await new Promise((o,s)=>{const a=new FileReader;a.onloadend=()=>o(a.result.split(",")[1]),a.onerror=()=>s(a.error),a.readAsDataURL(n)})}async function uM(r){const t=(await(await fetch(`data:application/gzip;base64,${r}`)).blob()).stream().pipeThrough(new DecompressionStream("gzip")),n=await new Response(t).arrayBuffer();return new Uint8Array(n)}const hM=[0,.535,-.3725],Hn=[0,.6425,-.3],gs=.6,Uu=.7,pM=.9,no=.7,ju=.0065,ws=.1,io=0,ro=0,fM=.1,Fu=-.31,ac=.44,cc=.005,Vu=.05,Fn=.075,mM=6,xs=7,bM=0,Xu=.75,yM="#555";class gM{constructor({scene:e}){this.#e=e}#e;initialize(){const e=new zn(gs,no,ju),t=new Ur({transparent:!0,opacity:fM}),n=new Ht(e,t);n.castShadow=!0,n.receiveShadow=!0,n.position.set(...Hn),this.#e.addObject(n),this.#e.createCuboidCollider({width:Uu,height:pM,depth:ws,friction:io,restitution:ro,position:hM}),this.#e.createCuboidCollider({width:gs,height:no,depth:ju,friction:io,restitution:ro,position:Hn}),this.#e.createCuboidCollider({width:.05,height:no,depth:ws,friction:io,restitution:ro,position:[Hn[0]-gs/2-.025,Hn[1],Hn[2]]}),this.#e.createCuboidCollider({width:.05,height:no,depth:ws,friction:io,restitution:ro,position:[Hn[0]+gs/2+.025,Hn[1],Hn[2]]}),this.#e.createCuboidCollider({width:Uu,height:.05,depth:ws,friction:io,restitution:ro,position:[Hn[0],Hn[1]+no/2+.025,Hn[2]]}),wM({scene:this.#e})}}function wM({scene:r}){const t=-7*Fn/2+Fn/2;for(let i=0;i<xs;i++)n(t-Fn/2,ac-Fn,i,-1,cc/2,Fn,Xu);for(let i=0;i<xs;i++)n(t-.075/2,ac-Fn/2,i,-1,cc/2,Fn,Xu);for(let i=0;i<mM;i++)for(let o=0;o<(i%2===0?xs:xs-1);o++)n(t,ac,o,i,cc,.075,bM);function n(i,o,s,a,c,l,d){const u=i+s*Fn+(a%2===0?0:Fn/2),h=o+a*Fn,f=new Js(c,c,Vu,8),g=new Ur({color:yM}),w=new Ht(f,g);w.castShadow=!0,w.receiveShadow=!0,w.position.set(u,h,Fu),w.rotation.set(Math.PI/2,Math.PI/4,0),r.addObject(w),r.createCuboidCollider({width:c/8,height:Vu,depth:c/8,friction:l,restitution:d,position:[u,h,Fu],rotation:[Math.PI/2,Math.PI/4,0]})}}const hd=8,ku=new A(1,1,1),xM=-.005,Wu=75,Pl=.5,vM=16755200,TM=.03,SM=.1,MM=.00725,EM="./../assets/drop-button.glb",Bs=2,Ns=[{color:16777215,background:16711680}],Ho=Ns.length;class lo{static MAX_INSTANCES=hd;static TYPES=Bs;static COLORS=Ho;static#e;static#t;static#n=[];static#i=[];static async initialize({scene:e}){const{materials:t,geometries:n}=await RM({scene:e});this.#e=PM({scene:e,interactiveObjects:this.#i,materials:t,geometries:n,onClick:({color:i,type:o,instanceId:s})=>{const a=this.#t[i][o].find(c=>c.index===s);a.isPressing||(a.isPressing=!0),a.onPress()}}),this.#t=[],LM({scene:e,instances:this.#t,bulbLights:this.#n})}static update(e){const t=new He,n=new A,i=new Rt,o=new A;this.#i.forEach(s=>{const{color:a,type:c}=s.userData,l=this.#t[a][c];for(const d of l)if(d.isPressing)if(d.pressStartTime===void 0)d.pressStartTime=e,s.getMatrixAt(d.index,t),t.decompose(n,i,o),d.initialPosition=n.clone(),d.initialRotation=i.clone();else{const u=this.#n[a][c][d.index],h=e-d.pressStartTime;if(h<Wu){const f=new A(0,xM,0),g=h/Wu;u.intensity=g*Pl;const w=f.multiplyScalar(g);w.applyQuaternion(d.initialRotation);const y=d.initialPosition.clone().add(w);d.buttonPosition.copy(y)}else u.intensity=Pl,d.isPressing=!1,d.pressStartTime=void 0,d.buttonPosition.copy(d.initialPosition)}});for(let s=0;s<Ho;s++)for(let a=0;a<Bs;a++){for(const c of this.#t[s][a])c.used&&IM({instance:c,meshes:this.#e[s][a]});this.#e[s][a].forEach(c=>c.instanceMatrix.needsUpdate=!0)}}static addButton({type:e,color:t,position:n,rotation:i,onPress:o}){const s=this.#t[t][e].find(c=>!c.used);s.used=!0,s.initialPosition=n,s.initialRotation=i,s.onPress=o;const a=this.#n[t][e][s.index];return a.visible=!0,HM({instance:s,position:n,rotation:i,bulbLight:a}),s}static get interactiveObjects(){return this.#i}}async function RM({scene:r}){const e=await r.loadModel(EM);e.scene.traverse(o=>{o.isMesh&&(o.castShadow=!0,o.receiveShadow=!0)});const t=e.scene.children,n=[],i=[];for(let o=0;o<Ho;o++){const s=t[0],a=s.children[1].material.clone();a.color.setHex(Ns[o].color);const c=s.children[2].material.clone();c.color.setHex(Ns[o].background);const l=t[1],d=l.children[1].material.clone();d.color.setHex(Ns[o].background),n.push([[s.children[0].material,a,c],[s.children[0].material,d]]),i.push([[s.children[0].geometry,s.children[1].geometry,s.children[2].geometry],[l.children[0].geometry,l.children[1].geometry]])}return{materials:n,geometries:i}}function PM({scene:r,materials:e,geometries:t,interactiveObjects:n,onClick:i}){const o=[];for(let s=0;s<Ho;s++){const a=[];for(let c=0;c<Bs;c++){const l=[];for(let d=0;d<e[s][c].length;d++){const u=new zr(t[s][c][d],e[s][c][d],hd);u.active=d>0,u.userData={color:s,type:c,onClick:h=>i({color:s,type:c,instanceId:h})},u.castShadow=!0,u.receiveShadow=!0,r.addObject(u),l.push(u),n.push(u)}a.push(l)}o.push(a)}return o}function LM({scene:r,instances:e,bulbLights:t}){for(let n=0;n<Ho;n++){e[n]=[],t[n]=[];for(let i=0;i<Bs;i++){e[n][i]=[],t[n][i]=[];for(let o=e[n][i].length;o<hd;o++){AM({type:i,color:n,instances:e});const s=new Xh(vM,Pl,TM,SM);s.castShadow=!1,t[n][i][o]=s,s.visible=!1,r.addObject(s)}}}}function AM({type:r,color:e,instances:t}){const i={index:t[e][r].length,type:r,color:e,position:new A,buttonPosition:new A,rotation:new Rt,matrix:new He,used:!1};return t[e][r].push(i),i}function HM({instance:r,position:e,rotation:t,bulbLight:n}){r.position.fromArray([e.x,e.y,e.z]),r.rotation.setFromEuler(new It(t.x,t.y,t.z)),r.buttonPosition.fromArray([e.x,e.y,e.z]),n.position.fromArray([e.x,e.y+MM,e.z]),n.rotation.set(t.x,t.y,t.z)}function IM({instance:r,meshes:e}){r.matrix.compose(r.position,r.rotation,ku),e[0].setMatrixAt(r.index,r.matrix),r.matrix.compose(r.buttonPosition,r.rotation,ku);for(let t=1;t<e.length;t++)e[t].setMatrixAt(r.index,r.matrix)}const vs=[0,.16125,1.25],Bu=[2*Math.PI+Math.PI/10,0,0],lc=[-.2,0,.2,.4];class NM{constructor({onPressDropButton:e,onPressBonusButton:t}){this.#e=e,this.#t=t}#e;#t;async initialize(){for(let e=0;e<lc.length-1;e++)lo.addButton({type:0,color:0,position:new A(lc[e],vs[1],vs[2]),rotation:new A().fromArray(Bu),onPress:()=>this.#e(e)});lo.addButton({type:1,color:0,position:new A(lc[3],vs[1],vs[2]),rotation:new A().fromArray(Bu),onPress:()=>this.#t()})}update(e){lo.update(e)}get interactiveObjects(){return lo.interactiveObjects}}const OM=2,Ll=.1075,Ts=.6,oo=.05,gr=.6,CM=16777215,Fi=0,Vi=.05,fo=[0,.21,-.22],DM=Math.PI/4,_M=[0,.135,0],zM=[-.325,.285,-.12],UM=[.325,.285,-.12],jM=.7,FM=.1,VM=1.25,Gu=.05,Zu=.4,Yu=.6,XM=.05,kM=0,vn=.005,dc=1e-5,WM=800,qu=.002,BM=[0,.215,-.25],GM=.01,ZM=.01,YM="./../assets/pusher.glb",Kt={MOVING:Symbol.for("pusher-moving"),PREPARING_DELIVERY:Symbol.for("pusher-preparing-delivery"),OPENING_DOOR:Symbol.for("pusher-opening-door"),DELIVERING_BONUS:Symbol.for("pusher-delivering-bonus"),DELIVER_BONUS:Symbol.for("pusher-deliver-bonus"),CLOSING_DOOR:Symbol.for("pusher-closing-door")};class qM{constructor({scene:e,depositBonus:t}){this.#e=e,this.#t=t}#e;#t;#n=new A;#i={state:Kt.MOVING,pendingRewards:[],timeDelivery:-1,initialDeltaZ:-1,reward:{coinCount:0,cardCount:0,tokenCount:0},platform:{position:new A(...fo),bodies:[]},door:{position:0}};async initialize(){await JM({scene:this.#e,pusher:this.#i}),this.#i.platform.mesh.material.color.setHex(CM),this.#i.platform.bodies=[this.#e.createKinematicBody(),this.#e.createKinematicBody(),this.#e.createKinematicBody(),this.#e.createKinematicBody()],this.#e.createCuboidCollider({width:Ts,height:vn,depth:gr,friction:Fi,restitution:Vi,position:[0,(oo-vn)/2,0]},this.#i.platform.bodies[0]),this.#e.createCuboidCollider({width:vn,height:oo-vn,depth:gr,friction:Fi,restitution:Vi,position:[-.595/2,-.005/2,0]},this.#i.platform.bodies[1]),this.#e.createCuboidCollider({width:vn,height:oo-vn,depth:gr,friction:Fi,restitution:Vi,position:[(Ts-vn)/2,-.005/2,0]},this.#i.platform.bodies[2]),this.#e.createCuboidCollider({width:Ts,height:GM,depth:ZM,friction:Fi,restitution:Vi,position:[0,oo/2-vn,gr/2],rotation:[Math.PI/4,0,0]},this.#i.platform.bodies[3]),this.#i.door.body=this.#e.createKinematicBody(),this.#e.createCuboidCollider({width:Ts-vn*2,height:oo-vn,depth:vn,friction:Fi,restitution:Vi,position:[0,-.005/2,(gr-vn)/2-this.#i.door.position]},this.#i.door.body),this.#e.createCuboidCollider({width:jM,height:FM,depth:VM,friction:XM,restitution:kM,position:_M}),this.#e.createCuboidCollider({width:Gu,height:Zu,depth:Yu,friction:Fi,restitution:Vi,position:zM}),this.#e.createCuboidCollider({width:Gu,height:Zu,depth:Yu,friction:Fi,restitution:Vi,position:UM})}update(e){KM({pusher:this.#i,time:e}),this.#i.state===Kt.DELIVER_BONUS&&this.#t({reward:this.#i.reward,position:new A(...BM)});const t=this.#i.platform.position,n=t.z-this.#i.door.position;this.#n.set(t.x,t.y,n),this.#i.platform.bodies.forEach(i=>i.setNextKinematicTranslation(t)),this.#i.door.body.setNextKinematicTranslation(this.#n),this.#i.platform.mesh.position.set(t.x,t.y,t.z),this.#i.door.mesh.position.set(t.x,t.y,n)}deliverBonus(e){this.#i.pendingRewards.push(e),this.#i.reward=e,this.#i.state===Kt.MOVING&&(this.#i.state=Kt.PREPARING_DELIVERY)}get position(){return this.#i.platform.position}save(){return{state:this.#i.state.description,pendingRewards:this.#i.pendingRewards,timeDelivery:this.#i.timeDelivery,initialDeltaZ:this.#i.initialDeltaZ,reward:{coinCount:this.#i.reward.coinCount,cardCount:this.#i.reward.cardCount,tokenCount:this.#i.reward.tokenCount},platform:{position:this.#i.platform.position.z,bodyHandles:this.#i.platform.bodies.map(e=>e.handle)},door:{position:this.#i.door.position,bodyHandle:this.#i.door.body.handle}}}load(e){this.#i.state=Symbol.for(e.state),this.#i.pendingRewards=e.pendingRewards,this.#i.timeDelivery=e.timeDelivery,this.#i.initialDeltaZ=e.initialDeltaZ,this.#i.reward={coinCount:e.reward.coinCount,cardCount:e.reward.cardCount,tokenCount:e.reward.tokenCount},this.#i.platform.bodies=e.platform.bodyHandles.map(t=>this.#e.worldBodies.get(t)),this.#i.door.body=this.#e.worldBodies.get(e.door.bodyHandle),this.#i.platform.position.z=e.position,this.#i.door.position=e.door.position}}function KM({pusher:r,time:e}){switch(r.state){case Kt.MOVING:Ku({platform:r.platform,time:e});break;case Kt.PREPARING_DELIVERY:const t=Ku({platform:r.platform,time:e});r.platform.position.z<fo[2]-Ll+dc&&(r.platform.position.z=fo[2]-Ll,r.state=Kt.OPENING_DOOR,r.initialDeltaZ=t);break;case Kt.OPENING_DOOR:r.door.position=r.door.position+qu,r.door.position>fo[2]+gr&&(r.timeDelivery=e,r.state=Kt.DELIVERING_BONUS);break;case Kt.DELIVERING_BONUS:e-r.timeDelivery>WM&&(r.state=Kt.DELIVER_BONUS);break;case Kt.DELIVER_BONUS:r.state=Kt.CLOSING_DOOR;break;case Kt.CLOSING_DOOR:r.door.position>dc?r.door.position=r.door.position-qu:xp(e)-r.initialDeltaZ<dc&&(r.initialDeltaZ=-1,r.door.position=0,r.pendingRewards.shift(),r.pendingRewards.length>0?(r.reward=r.pendingRewards[0],r.state=Kt.PREPARING_DELIVERY):(r.reward={coinCount:0,cardCount:0,tokenCount:0},r.state=Kt.MOVING));break}}function Ku({platform:r,time:e}){const t=xp(e);return r.position.z=fo[2]+t,t}function xp(r){return Math.sin(r/1e3*OM+DM)*Ll}async function JM({scene:r,pusher:e}){const t=await r.loadModel(YM);t.scene.traverse(n=>{n.isMesh&&(n.castShadow=!0,n.receiveShadow=!0)}),e.platform.mesh=t.scene.children[0],e.door.mesh=t.scene.children[1],r.addObject(e.platform.mesh),r.addObject(e.door.mesh)}const Al="card",pd=8,QM=.11,$M=.175,eE=.005,uc=[0,.6,.5],Gs=.2,Ju=.2,tE=[0,0,0],nE=[0,0,0,1],iE=new A(0,0,0),rE=new A(0,0,0),oE=new A(1,1,1),hc=new It(0,0,0),sE=.05,aE=0,cE=0,lE=0,dE=.1,uE=.1,hE=.8,pE="./../assets/card.glb",Hl=[{color:16777215,background:12775},{color:16777215,background:47106},{color:16777215,background:16761095},{color:16777215,background:12189716},{color:16777215,background:5505255},{color:16777215,background:15155712},{color:0,background:16777215}],mo=Hl.length;class Nn{static TYPE=Al;static MAX_INSTANCES=pd;static TYPES=mo;static#e;static#t;static#n;static async initialize({scene:e}){this.#e=e;const{materials:t,geometries:n}=await fE({scene:e});this.#t=mE({scene:e,materials:t,geometries:n}),this.#n=[],bE({scene:e,instances:this.#n})}static getCard({type:e,index:t}){return this.#n[e][t]}static update(){for(let e=0;e<mo;e++){for(const t of this.#n[e])t.used&&fc({instance:t,meshes:this.#t[e]});this.#t[e].forEach(t=>t.instanceMatrix.needsUpdate=!0)}}static dropCard({type:e}){const t=this.#n[e].find(n=>!n.used);t.used=!0,pc({instance:t}),t.body.setEnabled(!0)}static depositCards({position:e,count:t}){for(let n=0;n<t;n++){const i=this.#n[Math.floor(Math.random()*(mo-1))].find(s=>!s.used);i.used=!0,e.x=Math.random()*Gs-Gs/2;const o=new A(0,0,0);pc({instance:i,position:e,rotation:o}),i.body.setEnabled(!0)}}static recycle(e){e.used=!1,e.body.setEnabled(!1),pc({instance:e,hidden:!0}),fc({instance:e,meshes:this.#t[e.type]})}static get dynamicBodies(){return this.#n.filter(e=>e.used).map(e=>({object:e,objects:this,body:e.body}))}static save(){return this.#n.map(e=>e.map(t=>({index:t.index,type:t.type,position:t.position.toArray(),rotation:t.rotation.toArray(),used:t.used,bodyHandle:this.#n[t.type][t.index].body.handle})))}static load(e){e.forEach(t=>{t.forEach(n=>{const i=this.#e.worldBodies.get(n.bodyHandle),o=this.#n[n.type][n.index];this.#n[n.type][n.index]={...o,position:new A().fromArray(n.position),rotation:new Rt().fromArray(n.rotation),used:n.used,body:i};for(let s=0;s<i.numColliders();s++){const a=i.collider(s);a.userData={objectType:n.objectType,index:n.index}}fc({instance:this.#n[n.type][n.index],meshes:this.#t[n.type]})})})}}async function fE({scene:r}){const e=await r.loadModel(pE);e.scene.traverse(o=>{o.isMesh&&(o.castShadow=!0,o.receiveShadow=!0)});const t=e.scene.children,n=[],i=[];for(let o=0;o<t.length;o++){const s=t[o],a=s.children[0].material.clone();a.color.setHex(Hl[o].color);const c=s.children[1].material.clone();c.color.setHex(Hl[o].background),n.push([a,c]),i.push([s.children[0].geometry,s.children[1].geometry])}return{materials:n,geometries:i}}function mE({scene:r,materials:e,geometries:t}){const n=[];for(let i=0;i<mo;i++){const o=[];for(let s=0;s<e[i].length;s++){const a=new zr(t[i][s],e[i][s],pd);a.castShadow=!0,a.receiveShadow=!0,r.addObject(a),o.push(a)}n.push(o)}return n}function bE({scene:r,instances:e}){for(let t=0;t<mo;t++){e[t]=[];for(let n=e[t].length;n<pd;n++)yE({scene:r,type:t,instances:e})}}function yE({scene:r,type:e,instances:t}){const n=r.createDynamicBody();n.setEnabled(!1),n.setSoftCcdPrediction(sE),n.setAngularDamping(cE),n.setLinearDamping(lE),n.setAdditionalSolverIterations(aE);const i=t[e].length;r.createCuboidCollider({userData:{objectType:Al,type:e,index:i},width:$M,height:eE,depth:QM,friction:dE,restitution:uE,density:hE},n);const o={objectType:Al,index:i,type:e,position:new A,rotation:new Rt,body:n,matrix:new He,used:!1};return t[e].push(o),o}function pc({instance:r,hidden:e,position:t,rotation:n}){e?(r.position.fromArray(tE),r.rotation.fromArray(nE),r.body.setLinvel(iE),r.body.setAngvel(rE)):(t?r.position.copy(t):r.position.fromArray([uc[0]+Math.random()*Gs-Gs/2,uc[1],uc[2]+Math.random()*Ju-Ju/2]),n?r.rotation.copy(n):r.rotation.setFromEuler(new It(hc.x+Math.random()*Math.PI*2,hc.y+Math.random()*Math.PI*2,hc.z+Math.random()*Math.PI*2))),r.body.setTranslation(r.position),r.body.setRotation(r.rotation)}function fc({instance:r,meshes:e}){r.position.copy(r.body.translation()),r.rotation.copy(r.body.rotation()),r.matrix.compose(r.position,r.rotation,oE),e.forEach(t=>t.setMatrixAt(r.index,r.matrix))}const Il="coin",fd=1024,Os=.03,md=.0075,gE=.025,wE=.001,xE=[-.1125,0,.1125],Qu=[0,.9,-.32+md/2],vE=[0,0,0],TE=[0,0,0,1],SE=new A(0,0,0),ME=new A(0,0,0),EE=new A(1,1,1),RE=new It(Math.PI/2,0,0),PE=.05,LE=0,AE=.3,HE=.3,IE=.15,NE=.3,OE=1,CE="./../assets/coin.glb",DE=60,_E=5e-9**2,zE=1e-6**2;class Bt{static TYPE=Il;static MAX_INSTANCES=fd;static RADIUS=Os;static DEPTH=md;static#e;static#t=[];static#n=[];static#i=[];static#r=0;static async initialize({scene:e}){this.#e=e;const{materials:t,geometries:n}=await UE({scene:e});this.#t=jE({scene:e,materials:t,geometries:n}),this.#n=[],FE({scene:e,instances:this.#n})}static getCoin({index:e}){return this.#n[e]}static update(e){if(this.#i.length&&e!==void 0&&e-this.#r>=DE){const{slot:t}=this.#i.shift(),n=this.#n.find(i=>!i.used);n.used=!0,mc({instance:n,slot:t}),n.body.setEnabled(!0),this.#r=e}for(const t of this.#n)t.used&&bc({instance:t,meshes:this.#t});this.#t.forEach(t=>t.instanceMatrix.needsUpdate=!0)}static dropCoin({slot:e}){this.#i.push({slot:e})}static dropCoins({count:e}){let t;for(let n=0;n<e;n++){let i;do i=Math.floor(Math.random()*3);while(i===t);t=i,this.#i.push({slot:i})}}static depositCoins({position:e,count:t}){e.x=-.3;for(let n=0;n<t;n++){const i=this.#n.find(s=>!s.used);i.used=!0,e.x+=Os*2,e.x>.3&&(e.x=-.3,e.z-=Os*2);const o=new A(0,0,0);mc({instance:i,position:e,rotation:o}),i.body.setEnabled(!0)}}static recycle(e){e.used=!1,e.body.setEnabled(!1),mc({instance:e,hidden:!0}),bc({instance:e,meshes:this.#t,forceRefresh:!0})}static get dynamicBodies(){return this.#n.filter(e=>e.used).map(e=>({object:e,objects:this,body:e.body}))}static get coinCount(){return this.#n.filter(e=>e.used).length}static save(){return this.#n.map(e=>({objectType:e.objectType,index:e.index,position:e.position.toArray(),rotation:e.rotation.toArray(),used:e.used,bodyHandle:this.#n[e.index].body.handle}))}static load(e){e.forEach(t=>{const n=this.#e.worldBodies.get(t.bodyHandle);this.#n[t.index]={...this.#n[t.index],position:new A().fromArray(t.position),rotation:new Rt().fromArray(t.rotation),used:t.used,body:n};for(let i=0;i<n.numColliders();i++){const o=n.collider(i);o.userData={objectType:t.objectType,index:t.index}}bc({instance:this.#n[t.index],meshes:this.#t,forceRefresh:!0})})}}async function UE({scene:r}){const e=await r.loadModel(CE);e.scene.traverse(a=>{a.isMesh&&(a.castShadow=!0,a.receiveShadow=!0)});const t=e.scene.children[0],n=t.children[0].material,i=t.children[1].material,o=t.children[0].geometry,s=t.children[1].geometry;return i.metalness=.35,n.metalness=.2,{materials:[n,i],geometries:[o,s]}}function jE({scene:r,materials:e,geometries:t}){const n=[];for(let i=0;i<e.length;i++){const o=new zr(t[i],e[i],fd);o.castShadow=!0,o.receiveShadow=!0,r.addObject(o),n.push(o)}return n}function FE({scene:r,instances:e}){for(let t=e.length;t<fd;t++)VE({scene:r,instances:e})}function VE({scene:r,instances:e}){const t=r.createDynamicBody();t.setEnabled(!1),t.setSoftCcdPrediction(PE),t.setAngularDamping(AE),t.setLinearDamping(HE),t.setAdditionalSolverIterations(LE);const n=e.length;r.createCylinderCollider({userData:{objectType:Il,index:n},radius:Os,height:md,friction:IE,restitution:NE,density:OE},t);const i={objectType:Il,index:n,position:new A,rotation:new Rt,body:t,matrix:new He,used:!1};return e.push(i),i}function mc({instance:r,hidden:e,position:t,rotation:n,slot:i=1}){if(e)r.position.fromArray(vE),r.rotation.fromArray(TE),r.body.setLinvel(SE),r.body.setAngvel(ME);else{if(t)r.position.copy(t);else{const o=Math.random();r.position.fromArray([xE[i]+(o<.5?-.025:gE)*Math.random()+(o<.5?-.001:wE),Qu[1],Qu[2]])}if(n)r.rotation.copy(n);else{const o=RE.clone();o.x+=Math.random()<=.5?Math.PI:0,r.rotation.setFromEuler(o)}}r.body.setTranslation(r.position),r.body.setRotation(r.rotation)}function bc({instance:r,meshes:e,forceRefresh:t}){const n=r.body.linvel(),i=r.body.angvel(),o=n.x*n.x+n.y*n.y+n.z*n.z,s=i.x*i.x+i.y*i.y+i.z*i.z;(o>_E||s>zE||t)&&(r.position.copy(r.body.translation()),r.rotation.copy(r.body.rotation()),r.matrix.compose(r.position,r.rotation,EE),e.forEach(a=>a.setMatrixAt(r.index,r.matrix)))}const Nl="token",bd=16,so=.0375,yc=.0075,gc=[0,.5,.55],Zs=.6,$u=.1,XE=[0,0,0],kE=[0,0,0,1],WE=new A(0,0,0),BE=new A(0,0,0),GE=new A(1,1,1),wc=new It(0,0,0),ZE=.05,YE=0,qE=0,KE=0,xc=.3,vc=.2,Tc=.5,JE="./../assets/token.glb",Ol=[{color:255,background:16777215},{color:32768,background:16777215},{color:0,background:16777215},{color:16711935,background:16777215},{color:16711680,background:16777215},{color:16777215,background:16777215}],bo=Ol.length;class On{static TYPE=Nl;static MAX_INSTANCES=bd;static TYPES=bo;static#e;static#t;static#n;static async initialize({scene:e}){this.#e=e;const{materials:t,geometries:n}=await QE({scene:e});this.#t=$E({scene:e,materials:t,geometries:n}),this.#n=[],eR({scene:e,instances:this.#n})}static getToken({type:e,index:t}){return this.#n[e][t]}static update(){for(let e=0;e<bo;e++){for(const t of this.#n[e])t.used&&Mc({instance:t,meshes:this.#t[e]});this.#t[e].forEach(t=>t.instanceMatrix.needsUpdate=!0)}}static dropToken({type:e}){const t=this.#n[e].find(n=>!n.used);t.used=!0,Sc({instance:t}),t.body.setEnabled(!0)}static depositTokens({position:e,count:t}){for(let n=0;n<t;n++){const i=this.#n[Math.floor(Math.random()*(bo-1))].find(s=>!s.used);i.used=!0,e.x=Math.random()*Zs-Zs/2;const o=new A(0,0,0);Sc({instance:i,position:e,rotation:o}),i.body.setEnabled(!0)}}static recycle(e){e.used=!1,e.body.setEnabled(!1),Sc({instance:e,hidden:!0}),Mc({instance:e,meshes:this.#t[e.type]})}static get dynamicBodies(){return this.#n.filter(e=>e.used).map(e=>({object:e,objects:this,body:e.body}))}static save(){return this.#n.map(e=>e.map(t=>({index:t.index,type:t.type,position:t.position.toArray(),rotation:t.rotation.toArray(),used:t.used,bodyHandle:this.#n[t.type][t.index].body.handle})))}static load(e){e.forEach(t=>{t.forEach(n=>{const i=this.#e.worldBodies.get(n.bodyHandle),o=this.#n[n.type][n.index];this.#n[n.type][n.index]={...o,position:new A().fromArray(n.position),rotation:new Rt().fromArray(n.rotation),used:n.used,body:i};for(let s=0;s<i.numColliders();s++){const a=i.collider(s);a.userData={objectType:n.objectType,index:n.index}}Mc({instance:this.#n[n.type][n.index],meshes:this.#t[n.type]})})})}}async function QE({scene:r}){const e=await r.loadModel(JE);e.scene.traverse(o=>{o.isMesh&&(o.castShadow=!0,o.receiveShadow=!0)});const t=e.scene.children,n=[],i=[];for(let o=0;o<t.length;o++){const s=t[o],a=s.children[0].material.clone();a.color.setHex(Ol[o].color);const c=s.children[1].material.clone();c.color.setHex(Ol[o].background),n.push([a,c]),i.push([s.children[0].geometry,s.children[1].geometry])}return{materials:n,geometries:i}}function $E({scene:r,materials:e,geometries:t}){const n=[];for(let i=0;i<bo;i++){const o=[];for(let s=0;s<e[i].length;s++){const a=new zr(t[i][s],e[i][s],bd);a.castShadow=!0,a.receiveShadow=!0,r.addObject(a),o.push(a)}n.push(o)}return n}function eR({scene:r,instances:e}){for(let t=0;t<bo;t++){e[t]=[];for(let n=e[t].length;n<bd;n++)tR({scene:r,type:t,instances:e})}}function tR({scene:r,type:e,instances:t}){const n=r.createDynamicBody();n.setEnabled(!1),n.setSoftCcdPrediction(ZE),n.setAngularDamping(qE),n.setLinearDamping(KE),n.setAdditionalSolverIterations(YE),r.createCuboidCollider({userData:{},width:so*1.4,height:yc*1.1,depth:so*1.4,friction:xc/3,restitution:vc,density:Tc/3},n),r.createCuboidCollider({userData:{},width:so*1.4,height:yc*1.1,depth:so*1.4,friction:xc/3,restitution:vc,density:Tc/3,rotation:new A(0,Math.PI/2,0)},n);const i=t[e].length;r.createCylinderCollider({userData:{objectType:Nl,type:e,index:i},radius:so,height:yc,friction:xc/3,restitution:vc,density:Tc/3},n);const o={objectType:Nl,index:i,type:e,position:new A,rotation:new Rt,body:n,matrix:new He,used:!1};return t[e].push(o),o}function Sc({instance:r,hidden:e,position:t,rotation:n}){e?(r.position.fromArray(XE),r.rotation.fromArray(kE),r.body.setLinvel(WE),r.body.setAngvel(BE)):(t?r.position.copy(t):r.position.fromArray([gc[0]+Math.random()*Zs-Zs/2,gc[1],gc[2]+Math.random()*$u-$u/2]),n?r.rotation.copy(n):r.rotation.setFromEuler(new It(wc.x+Math.random()*Math.PI*2,wc.y+Math.random()*Math.PI*2,wc.z+Math.random()*Math.PI*2))),r.body.setTranslation(r.position),r.body.setRotation(r.rotation)}function Mc({instance:r,meshes:e}){r.position.copy(r.body.translation()),r.rotation.copy(r.body.rotation()),r.matrix.compose(r.position,r.rotation,GE),e.forEach(t=>t.setMatrixAt(r.index,r.matrix))}const yd=16,nR=.04,iR=.055,rR=.002,oR=[0,0,0],sR=[0,0,0,1],aR=new A(1,1,1),cR="./../assets/digit.glb",Ys=11,yo=[{color:16777215,background:0},{color:0,background:16777215},{color:65280,background:0}],Io=yo.length;class Vt{static MAX_INSTANCES=yd;static TYPES=Ys;static COLORS=Io;static WIDTH=nR;static HEIGHT=iR;static DEPTH=rR;static#e;static#t;static async initialize({scene:e}){const{materials:t,geometries:n}=await lR({scene:e});this.#e=dR({scene:e,materials:t,geometries:n}),this.#t=[],uR({instances:this.#t})}static update(){for(let e=0;e<Io;e++)for(let t=0;t<Ys;t++){for(const n of this.#t[e][t])n.used&&th({instance:n,meshes:this.#e[e][t]});this.#e[e][t].forEach(n=>n.instanceMatrix.needsUpdate=!0)}}static addDigit({type:e,color:t,position:n,rotation:i}){const o=this.#t[t][e].find(s=>!s.used);return o.used=!0,o.initialPosition=n,o.initialRotation=i,eh({instance:o,position:n,rotation:i}),o}static setVisible(e,t){eh({instance:e,hidden:!t,position:e.initialPosition,rotation:e.initialRotation}),th({instance:e,meshes:this.#e[e.color][e.type]})}static getBackgroundColor(e){return yo[e].background}}async function lR({scene:r}){const e=await r.loadModel(cR);e.scene.traverse(o=>{o.isMesh&&(o.castShadow=!0,o.receiveShadow=!0)});const t=e.scene.children,n=[],i=[];for(let o=0;o<Io;o++){const s=[],a=[];for(let d=0;d<t.length-1;d++){const u=t[d],h=u.children[0].material.clone();h.color.setHex(yo[o].color);const f=u.children[1].material.clone();f.color.setHex(yo[o].background),s.push([h,f]),a.push([u.children[0].geometry,u.children[1].geometry])}const c=t[t.length-1],l=c.material.clone();l.color.setHex(yo[o].background),s.push([l]),a.push([c.geometry]),n.push(s),i.push(a)}return{materials:n,geometries:i}}function dR({scene:r,materials:e,geometries:t}){const n=[];for(let i=0;i<Io;i++){const o=[];for(let s=0;s<Ys;s++){const a=[];for(let c=0;c<e[i][s].length;c++){const l=new zr(t[i][s][c],e[i][s][c],yd);l.castShadow=!0,l.receiveShadow=!0,r.addObject(l),a.push(l)}o.push(a)}n.push(o)}return n}function uR({instances:r}){for(let e=0;e<Io;e++){r[e]=[];for(let t=0;t<Ys;t++){r[e][t]=[];for(let n=r[e][t].length;n<yd;n++)hR({type:t,color:e,instances:r})}}}function hR({type:r,color:e,instances:t}){const i={index:t[e][r].length,type:r,color:e,position:new A,rotation:new Rt,matrix:new He,used:!1};return t[e][r].push(i),i}function eh({instance:r,hidden:e,position:t,rotation:n}){e?(r.position.fromArray(oR),r.rotation.fromArray(sR)):(r.position.fromArray([t.x,t.y,t.z]),r.rotation.setFromEuler(new It(n.x,n.y,n.z)))}function th({instance:r,meshes:e}){r.matrix.compose(r.position,r.rotation,aR),e.forEach(t=>t.setMatrixAt(r.index,r.matrix))}class pR{static async initialize({scene:e}){await Promise.all([Nn.initialize({scene:e}),Bt.initialize({scene:e}),On.initialize({scene:e}),lo.initialize({scene:e}),Vt.initialize({scene:e})])}}class fR{constructor({scene:e}){this.#e=e,this.#t=new WeakMap}#e;#t;initialize(){}update(){const e=new WeakMap;this.#e.forEachCollision((t,n)=>{if(t.objectType!==void 0&&n.objectType!==void 0){nh(e,t,n),nh(e,n,t);let i=!1;this.#t.has(t)&&this.#t.get(t).has(n)&&(i=!0),i||t.onIntersect?.(n)}}),this.#t=e}}function nh(r,e,t){r.has(e)||r.set(e,new WeakSet),r.get(e).add(t)}const mR=1/10,ii=.015,bR=10;class Ec{constructor({scene:e,position:t,rotation:n,digitsCount:i,color:o}){this.#e=e,this.#t=i,this.#n=o,this.#i=t,this.#r=n}#e;#t;#n;#i;#r;#o=[];#s=0;async initialize(){for(let e=0;e<this.#t;e++){this.#o[e]=[];for(let t=0;t<bR;t++)this.#o[e][t]=Vt.addDigit({type:t,color:this.#n,position:new A(this.#i[0]+e*Vt.WIDTH,this.#i[1],this.#i[2]),rotation:new A(Math.PI/2+this.#r[0],this.#r[1],this.#r[2])})}this.#a()}#a(){const e=new Ei,t=this.#t*Vt.WIDTH,n=new Ur({color:Vt.getBackgroundColor(this.#n),roughness:.5,metalness:0}),i=new Ht(new zn(t+2*ii,ii,Vt.DEPTH),n);i.castShadow=!0,i.receiveShadow=!0,i.position.set(t/2-Vt.WIDTH/2,Vt.HEIGHT/2+ii/2,0);const o=new Ht(new zn(t+2*ii,ii,Vt.DEPTH),n);o.castShadow=!0,o.receiveShadow=!0,o.position.set(t/2-Vt.WIDTH/2,-.055/2-ii/2,0);const s=new Ht(new zn(ii,Vt.HEIGHT,Vt.DEPTH),n);s.castShadow=!0,s.receiveShadow=!0,s.position.set(-.015/2-Vt.WIDTH/2,0,0);const a=new Ht(new zn(ii,Vt.HEIGHT,Vt.DEPTH),n);a.castShadow=!0,a.receiveShadow=!0,a.position.set(t+ii/2-Vt.WIDTH/2,0,0),e.add(i),e.add(o),e.add(s),e.add(a),e.castShadow=!0,e.receiveShadow=!0,this.#e.addObject(e),e.position.fromArray(this.#i),e.rotation.fromArray([this.#r[0],this.#r[1],this.#r[2]])}set(e){const t=String(Math.max(0,e)).padStart(this.#t,"0").split("");for(let n=0;n<this.#t;n++)for(let i=0;i<10;i++){const o=this.#o[n][i];Vt.setVisible(o,i==t[n])}}update(e){e-this.#s>mR*1e3&&(Vt.update(),this.#s=e)}}const yR=6,gR=2,wR=[.5,.9,-.32],xR=[0,0,0],vR=6,TR=0,SR=[.5,.75,-.32],MR=[0,0,0],ER=3,RR=1,PR=[.7,.29,.65],LR=[-Math.PI/2,0,0];class AR{constructor({scene:e,cabinet:t,state:n}){this.#e=e,this.#t=t,this.#n=n}#e;#t;#n;#i;#r;#o;async initialize(){this.#i=new Ec({scene:this.#e,position:wR,rotation:xR,digitsCount:yR,color:gR}),await this.#i.initialize(),this.#r=new Ec({scene:this.#e,position:SR,rotation:MR,digitsCount:vR,color:TR}),await this.#r.initialize(),this.#o=new Ec({scene:this.#e,position:PR,rotation:LR,digitsCount:ER,color:RR}),await this.#o.initialize()}update(e){this.#i.set(this.#n.score),this.#r.set(this.#n.coinsInPool),this.#o.set(this.#t.coinCount),this.#i.update(e),this.#r.update(e),this.#o.update(e)}}const vp=15198183,HR=16711680,Tp=.1,IR=.25,NR=16711680,Sp=0,OR=.25,ih=150,rh=100,CR=6,Cs=[0,.33,-.27],DR=[0,0,0],_R=.6,zR=.03,oh=.04,UR=-.22,sh=.22,jR=.075,FR=1/5,VR=5,XR=5,ah="sensor-gate",kR="./../assets/sensor-gate.glb",Et={OFF:Symbol.for("sensor-gate-off"),ACTIVATING:Symbol.for("sensor-gate-activating"),FLASHING_ON:Symbol.for("sensor-gate-flashing-on"),FLASHING_OFF:Symbol.for("sensor-gate-flashing-off"),LOCKED_ON:Symbol.for("sensor-gate-locked-on")},Dt={IDLE:Symbol.for("sensor-letter-idle"),ACTIVATING:Symbol.for("sensor-letter-activating"),FLASHING_ON:Symbol.for("sensor-letter-flashing-on"),FLASHING_OFF:Symbol.for("sensor-letter-flashing-off"),AWAITING_BONUS_DELIVERY:Symbol.for("sensor-letter-awaiting-bonus-delivery"),BONUS_DELIVERED:Symbol.for("sensor-letter-bonus-delivered")};class WR{constructor({scene:e,onBonusWon:t}){this.#e=e,this.#t=t}#e;#t;#n;#i;#r={state:Dt.IDLE,flashStartTime:-1,flashCount:0,letters:[{state:Et.OFF,flashStartTime:-1,flashCount:0},{state:Et.OFF,flashStartTime:-1,flashCount:0},{state:Et.OFF,flashStartTime:-1,flashCount:0},{state:Et.OFF,flashStartTime:-1,flashCount:0},{state:Et.OFF,flashStartTime:-1,flashCount:0},{state:Et.OFF,flashStartTime:-1,flashCount:0}]};async initialize(){this.#n=await ZR({scene:this.#e}),this.#i=this.#e.createCuboidCollider({width:_R,height:zR,depth:oh,position:[Cs[0],Cs[1],Cs[2]-oh],rotation:DR,sensor:!0,userData:{objectType:ah,onIntersect:e=>ch({userData:e,sensor:this.#r})}})}update(e){this.#r.letters.forEach(t=>GR({letter:t,time:e})),this.#r.state===Dt.IDLE&&this.#r.letters.every(t=>t.state===Et.LOCKED_ON)&&(this.#r.state=Dt.ACTIVATING),BR({sensor:this.#r,time:e}),this.#r.state===Dt.BONUS_DELIVERED&&(this.#r.letters.forEach(t=>t.state=Et.OFF),this.#t()),this.#r.letters.forEach((t,n)=>{const i=this.#n[n];t.state===Et.FLASHING_ON||this.#r.state===Dt.FLASHING_ON||this.#r.state===Dt.AWAITING_BONUS_DELIVERY||this.#r.state===Dt.IDLE&&t.state===Et.LOCKED_ON?(i.color.setHex(HR),i.opacity=IR,i.emissiveIntensity=OR):(i.color.setHex(vp),i.opacity=Tp,i.emissiveIntensity=Sp)})}save(){return{colliderHandle:this.#i.handle,sensor:{state:this.#r.state.description,letters:this.#r.letters.map(e=>({state:e.state.description,flashStartTime:e.flashStartTime,flashCount:e.flashCount}))}}}load(e){this.#i=this.#e.worldColliders.get(e.colliderHandle),this.#i.userData={objectType:ah,onIntersect:t=>ch({sensor:this.#r,userData:t})},this.#r.state=Symbol.for(e.sensor.state),this.#r.letters.forEach((t,n)=>{t.state=Symbol.for(e.sensor.letters[n].state),t.flashStartTime=e.sensor.letters[n].flashStartTime,t.flashCount=e.sensor.letters[n].flashCount})}}function ch({sensor:r,userData:e}){if(e.objectType===Bt.TYPE){const t=Bt.getCoin(e);if(t){const n=t.position.x;if(n>UR&&n<sh){const i=Math.floor((n+sh)/jR),o=r.letters[i];r.state===Dt.IDLE&&o.state===Et.OFF&&(o.state=Et.ACTIVATING)}}}}function BR({sensor:r,time:e}){switch(r.state){case Dt.ACTIVATING:r.flashStartTime=e,r.state=Dt.FLASHING_ON;break;case Dt.FLASHING_ON:e-r.flashStartTime>=ih&&(r.flashStartTime=e,r.flashCount<VR?r.state=Dt.FLASHING_OFF:r.state=Dt.AWAITING_BONUS_DELIVERY);break;case Dt.FLASHING_OFF:e-r.flashStartTime>=ih&&(r.flashStartTime=e,r.flashCount++,r.state=Dt.FLASHING_ON);break;case Dt.AWAITING_BONUS_DELIVERY:r.flashCount=0,r.flashStartTime=-1,r.bonusWonStartTime=e,r.state=Dt.BONUS_DELIVERED;break;case Dt.BONUS_DELIVERED:r.bonusWonStartTime=-1,r.state=Dt.IDLE;break}}function GR({letter:r,time:e}){switch(r.state){case Et.OFF:break;case Et.ACTIVATING:Math.random()<FR?(r.state=Et.FLASHING_ON,r.flashStartTime=e):r.state=Et.OFF;break;case Et.FLASHING_ON:e-r.flashStartTime>=rh&&(r.flashStartTime=e,r.flashCount<XR?r.state=Et.FLASHING_OFF:r.state=Et.LOCKED_ON);break;case Et.FLASHING_OFF:e-r.flashStartTime>=rh&&(r.flashStartTime=e,r.flashCount++,r.state=Et.FLASHING_ON);break;case Et.LOCKED_ON:r.flashCount=0,r.flashStartTime=-1;break}}async function ZR({scene:r}){const e=await r.loadModel(kR);e.scene.traverse(i=>{i.isMesh&&(i.castShadow=!0,i.receiveShadow=!0)});const t=e.scene.children[0],n=[];for(let i=0;i<CR;i++){const o=t.children[i].material;o.color.setHex(vp),o.transparent=!0,o.opacity=Tp,o.emissiveIntensity=Sp,o.emissive.setHex(NR),t.children[i].material=o,n.push(o)}return t.position.set(...Cs),r.addObject(t),n}const YR=[-.6,.6,-.345],Ss=8,lh=Math.PI/20,qR=Math.PI/10,KR=Math.PI/90,JR=Math.PI/60,QR=10,dh=3,$R=1e3,eP="./../assets/reels-box.glb",mn={IDLE:Symbol.for("reels-box-idle"),ACTIVATING:Symbol.for("reels-box-activating"),ACTIVE:Symbol.for("reels-box-active"),STOPPING:Symbol.for("reels-box-stopping"),SETTLED:Symbol.for("reels-box-settled")},Jt={IDLE:Symbol.for("reel-idle"),STARTING:Symbol.for("reel-starting"),ACCELERATING:Symbol.for("reel-accelerating"),SPINNING:Symbol.for("reel-spinning"),DECELERATING:Symbol.for("reel-decelerating"),SETTLED:Symbol.for("reel-settled")};class tP{constructor({scene:e,onBonusWon:t}){this.#e=e,this.#t=t}#e;#t;#n={state:mn.IDLE,pendingSpins:0,timeNextSpin:-1,timeActive:-1,reels:[{state:Jt.IDLE,index:0,rotation:0,targetIndex:-1,targetRotation:-1},{state:Jt.IDLE,index:0,rotation:0,targetIndex:-1,targetRotation:-1},{state:Jt.IDLE,index:0,rotation:0,targetIndex:-1,targetRotation:-1}]};async initialize(){await rP({scene:this.#e,reels:this.#n.reels})}update(e){nP({reelsBox:this.#n,time:e}),this.#n.reels.forEach((t,n)=>iP({reel:t,indexReel:n})),this.#n.state===mn.SETTLED&&this.#t(this.#n.reels.map(t=>t.index)),this.#n.reels.forEach(t=>{t.mesh.rotation.x=t.rotation})}spinReels(){this.#n.pendingSpins++,this.#n.state===mn.IDLE&&(this.#n.state=mn.ACTIVATING)}save(){return{state:this.#n.state.description,pendingSpins:this.#n.pendingSpins,timeNextSpin:this.#n.timeNextSpin,timeActive:this.#n.timeActive,reels:this.#n.reels.map(e=>({state:e.state.description,index:e.index,rotation:e.rotation,targetIndex:e.targetIndex,targetRotation:e.targetRotation}))}}load(e){this.#n.state=Symbol.for(e.state),this.#n.pendingSpins=e.pendingSpins,this.#n.timeNextSpin=e.timeNextSpin,this.#n.timeActive=e.timeActive,this.#n.reels.forEach((t,n)=>{t.state=Symbol.for(e.reels[n].state),t.index=e.reels[n].index,t.rotation=e.reels[n].rotation,t.targetIndex=e.reels[n].targetIndex,t.targetRotation=e.reels[n].targetRotation})}}function nP({reelsBox:r,time:e}){switch(r.state){case mn.ACTIVATING:r.reels.forEach(t=>t.state=Jt.STARTING),r.state=mn.ACTIVE;break;case mn.ACTIVE:r.reels.every(t=>t.state===Jt.IDLE)&&(r.timeActive=e,r.state=mn.STOPPING);break;case mn.STOPPING:e-r.timeActive>$R&&(r.timeActive=-1,r.state=mn.SETTLED,r.pendingSpins--);break;case mn.SETTLED:r.pendingSpins>0?r.state=mn.ACTIVATING:r.state=mn.IDLE;break}}function iP({reel:r,indexReel:e}){switch(r.state){case Jt.IDLE:break;case Jt.STARTING:r.targetIndex=Math.floor(Math.random()*Ss);const t=Math.floor(Math.random()*(QR-dh+1))+dh,n=r.targetIndex-r.index+(r.targetIndex<=r.index?Ss:0);r.targetRotation=r.rotation+t*Math.PI*2+n*(Math.PI*2/Ss),r.previousRotation=r.rotation,r.currentSpeed=0,r.state=Jt.ACCELERATING;break;case Jt.ACCELERATING:r.currentSpeed<qR&&(r.currentSpeed+=KR),(r.rotation-r.previousRotation>Math.PI||r.targetRotation-r.rotation<0)&&(r.state=Jt.SPINNING),r.rotation+=r.currentSpeed;break;case Jt.SPINNING:r.targetRotation-r.rotation<Math.PI&&(r.state=Jt.DECELERATING),r.rotation+=r.currentSpeed;break;case Jt.DECELERATING:r.currentSpeed>lh?r.currentSpeed-=JR:r.currentSpeed=lh,r.targetRotation-r.rotation<0&&(r.state=Jt.SETTLED),r.rotation+=r.currentSpeed;break;case Jt.SETTLED:r.state=Jt.IDLE,r.index=r.targetIndex,r.rotation=r.index*(Math.PI*2/Ss),r.targetIndex=-1,r.targetRotation=-1;break}}async function rP({scene:r,reels:e}){const t=await r.loadModel(eP);t.scene.traverse(i=>{i.isMesh&&(i.castShadow=!0,i.receiveShadow=!0)});const n=t.scene;n.position.set(...YR);for(let i=0;i<e.length;i++)e[i].mesh=n.children[i];r.addObject(n)}const Rc=0,Pc=0,oP=0,sP=.05,aP="./../assets/cabinet.glb";class cP{DEBUG_AUTOPLAY=!1;constructor({scene:e,state:t}){this.#e=e,this.#t=t}#e;#t;#n;#i=new Map;#r={"left-trap-sensor":e=>{const t=this.#u(e);t&&Lc(t)},"right-trap-sensor":e=>{const t=this.#u(e);t&&Lc(t)},"gutter-sensor":e=>{const t=this.#u(e);t&&(Lc(t),t.objectType===Bt.TYPE&&(this.#t.score++,this.#t.coinsInPool++),t.objectType===On.TYPE&&(this.#t.score+=5),t.objectType===Nn.TYPE&&(this.#t.score+=10))}};#o;#s;#a;#c;#d;#l;async initialize(){const e=await lP({scene:this.#e,sensorListeners:this.#r,colliders:this.#i});this.#n=e,await pR.initialize({scene:this.#e}),new gM({scene:this.#e}).initialize(),this.#o=new NM({onPressDropButton:n=>{this.#t.coinsInPool&&(Bt.dropCoin({slot:n}),this.#t.coinsInPool--)},onPressBonusButton:()=>{Bt.dropCoins({count:50})}}),await this.#o.initialize(),this.#s=new qM({scene:this.#e,depositBonus:({reward:n,position:i})=>{Bt.depositCoins({position:i,count:n.coinCount}),On.depositTokens({position:i,count:n.tokenCount}),Nn.depositCards({position:i,count:n.cardCount})}}),this.#s.initialize(),this.#a=new AR({scene:this.#e,cabinet:this,state:this.#t}),await this.#a.initialize(),this.#d=new fR({scene:this.#e}),this.#d.initialize(),this.#c=new WR({scene:this.#e,onBonusWon:()=>{this.#t.score+=10,this.#l.spinReels()}}),await this.#c.initialize(),this.#l=new tP({scene:this.#e,onBonusWon:n=>{this.#s.deliverBonus({coinCount:10,cardCount:1,tokenCount:2})}}),await this.#l.initialize()}update(e){this.#d.update(),this.#a.update(e),this.#s.update(e),this.#o.update(e),Bt.update(e),On.update(),Nn.update(),this.#c.update(e),this.#l.update(e),this.dynamicBodies.forEach(({object:t,objects:n})=>{t.position.y<sP&&(console.warn("object recycled",t,structuredClone(t.position),structuredClone(t.rotation)),n.recycle(t))}),this.DEBUG_AUTOPLAY&&this.#h()}get interactiveObjects(){return this.#o.interactiveObjects}get coinCount(){return Bt.coinCount}get dynamicBodies(){return[...Bt.dynamicBodies,...On.dynamicBodies,...Nn.dynamicBodies]}async save(){const e={};return this.#i.forEach((t,n)=>e[n]=t.handle),{collidersHandles:e,scene:await this.#e.save(),coins:Bt.save(),tokens:On.save(),cards:Nn.save(),pusher:this.#s.save(),sensorGate:this.#c.save(),reelsBox:this.#l.save()}}async load(e){await this.#e.load(e.scene),this.#n.traverse(t=>{if(t.isMesh){const n=t.material.userData,i=t.material.name;if(n.sensor){const o=e.collidersHandles[i],s=this.#e.worldColliders.get(o);s.userData={objectType:i,onIntersect:this.#r[i]},this.#i.set(i,s)}}}),Bt.load(e.coins),On.load(e.tokens),Nn.load(e.cards),await this.#s.load(e.pusher),this.#c.load(e.sensorGate),this.#l.load(e.reelsBox)}#u(e){if(e.objectType===Bt.TYPE)return Bt.getCoin(e);if(e.objectType===On.TYPE)return On.getToken(e);if(e.objectType===Nn.TYPE)return Nn.getCard(e)}#h(){this.#s.position.z>-.215&&this.#s.position.z<-.213&&this.#s.position.z>this.lastPusherPosition&&Bt.dropCoins({count:2}),this.lastPusherPosition=this.#s.position.z}}function Lc(r){r.objectType===Bt.TYPE&&Bt.recycle(r),r.objectType===On.TYPE&&On.recycle(r),r.objectType===Nn.TYPE&&Nn.recycle(r)}async function lP({scene:r,sensorListeners:e,colliders:t}){const i=(await r.loadModel(aP)).scene.children[0],o=r.createFixedBody();return i.traverse(s=>{if(s.isMesh){s.castShadow=!0,s.receiveShadow=!0;const a=s.material.userData;if(a.collider||a.sensor){const c=s.material.name,l=s.geometry.index,d=s.geometry.attributes.position,u=[],h=[];for(let g=0;g<l.count;g+=3){const w=l.getX(g),y=l.getX(g+1),m=l.getX(g+2);u.push(d.getX(w),d.getY(w)+Rc,d.getZ(w)+Pc,d.getX(y),d.getY(y)+Rc,d.getZ(y)+Pc,d.getX(m),d.getY(m)+Rc,d.getZ(m)+Pc),h.push(g,g+1,g+2)}const f=r.createTrimeshCollider({vertices:new Float32Array(u),indices:new Uint16Array(h),friction:a.friction,restitution:oP,sensor:a.sensor,userData:a.sensor?{objectType:c,onIntersect:e[c]}:void 0},o);f.setFrictionCombineRule(1),a.sensor&&t.set(c,f)}}}),r.addObject(i),i}class dP{constructor({scene:e,camera:t,interactiveObjects:n}){this.#e=e,this.#t=t,this.#n=n}#e;#t;#n;#i=new Oe;#r=new $1;initialize(){addEventListener("mousemove",e=>{this.#i.x=e.clientX/innerWidth*2-1,this.#i.y=-(e.clientY/innerHeight)*2+1,this.#r.setFromCamera(this.#i,this.#t);const t=this.#r.intersectObjects(this.#e.children);t.length&&this.#n.includes(t[0].object)?document.body.style.cursor="pointer":document.body.style.cursor="default"}),addEventListener("click",e=>{this.#r.setFromCamera(this.#i,this.#t);const t=this.#r.intersectObjects(this.#e.children);t.length&&this.#n.includes(t[0].object)&&(e.defaultPrevented||(t[0].object.userData.onClick(t[0].instanceId),e.preventDefault()))})}update(){}}const uP=[0,2,4.95],hP=20,pP=innerWidth/innerHeight,fP=.1,mP=1e3,bP=[0,.5,0];class yP{constructor(){const e=new nn(hP,pP,fP,mP);return e.position.set(...uP),e.lookAt(...bP),e}}const gP={score:0,coinsInPool:100,time:1154933333332852e-9},wP=JSON.parse('{"collidersHandles":{"gutter-sensor":2e-323,"left-trap-sensor":2.5e-323,"right-trap-sensor":3e-323},"scene":{"world":""},"coins":[{"objectType":"coin","index":0,"position":[-0.2106124460697174,0.18746031820774078,0.21749727427959442],"rotation":[-0.00015856989193707705,-0.882060170173645,0.0016229420434683561,0.4711339771747589],"used":true,"bodyHandle":5e-324},{"objectType":"coin","index":1,"position":[0.21934692561626434,0.23746629059314728,-0.20176248252391815],"rotation":[-0.8211105465888977,0.0015730494633316994,0.5707669854164124,0.00007696142711210996],"used":true,"bodyHandle":1e-323},{"objectType":"coin","index":2,"position":[-0.28614094853401184,0.18740162253379822,0.468355268239975],"rotation":[0.00014929210010450333,0.44933396577835083,0.0020197583362460136,-0.8933615684509277],"used":true,"bodyHandle":1.5e-323},{"objectType":"coin","index":3,"position":[-0.21199744939804077,0.23746342957019806,-0.0594063401222229],"rotation":[-0.0011980915442109108,-0.05998379364609718,-0.0008895109058357775,-0.9981982111930847],"used":true,"bodyHandle":2e-323},{"objectType":"coin","index":4,"position":[0.27001720666885376,0.2386545091867447,-0.051628049463033676],"rotation":[-0.557482898235321,-0.01680067740380764,-0.829932689666748,-0.011935059912502766],"used":true,"bodyHandle":2.5e-323},{"objectType":"coin","index":5,"position":[-0.16884130239486694,0.23755477368831635,-0.23448128998279572],"rotation":[-0.9995800852775574,0.0021633245050907135,-0.028884805738925934,0.0007857410819269717],"used":true,"bodyHandle":3e-323},{"objectType":"coin","index":6,"position":[0.27128005027770996,0.1874106079339981,0.4300597906112671],"rotation":[-0.9707180261611938,0.00249855755828321,-0.24020729959011078,0.0008540785638615489],"used":true,"bodyHandle":3.5e-323},{"objectType":"coin","index":7,"position":[0.16885361075401306,0.1874595433473587,0.21728895604610443],"rotation":[0.0012586023658514023,-0.2334788292646408,0.0009952731197699904,0.9723605513572693],"used":true,"bodyHandle":4e-323},{"objectType":"coin","index":8,"position":[0.3285163938999176,0.18745379149913788,0.4158540964126587],"rotation":[-0.20154334604740143,0.000817017222288996,-0.979478657245636,0.0010462653590366244],"used":true,"bodyHandle":4.4e-323},{"objectType":"coin","index":9,"position":[-0.043423961848020554,0.23741325736045837,-0.292550265789032],"rotation":[0.0008361786603927612,0.515800416469574,-0.0007183817215263844,-0.8567080497741699],"used":true,"bodyHandle":5e-323},{"objectType":"coin","index":10,"position":[0.17385530471801758,0.23742659389972687,-0.2926812171936035],"rotation":[0.0016547858249396086,-0.7695637345314026,0.0004677593242377043,0.6385675668716431],"used":true,"bodyHandle":5.4e-323},{"objectType":"coin","index":11,"position":[0.2706517279148102,0.23745830357074738,-0.11072741448879242],"rotation":[-0.0016037652967497706,0.0740942731499672,-0.0005921630072407424,0.9972497820854187],"used":true,"bodyHandle":6e-323},{"objectType":"coin","index":12,"position":[-0.2120671272277832,0.23747830092906952,-0.2922980487346649],"rotation":[-0.0008272765553556383,0.9285488724708557,-0.0015613784780725837,0.3712061047554016],"used":true,"bodyHandle":6.4e-323},{"objectType":"coin","index":13,"position":[-0.12221793830394745,0.24332745373249054,-0.13822580873966217],"rotation":[0.0001874990266514942,0.9999873042106628,-0.003986806143075228,0.0030728629790246487],"used":true,"bodyHandle":7e-323},{"objectType":"coin","index":14,"position":[-0.11425156891345978,0.24357405304908752,-0.21660228073596954],"rotation":[0.16490459442138672,-0.00013675355876330286,0.9863057732582092,0.0027220856864005327],"used":true,"bodyHandle":7.4e-323},{"objectType":"coin","index":15,"position":[0.35427454113960266,0.1869824081659317,0.5873776078224182],"rotation":[-0.05295896530151367,-0.7403615117073059,-0.048847466707229614,0.6683368682861328],"used":true,"bodyHandle":8e-323},{"objectType":"coin","index":16,"position":[-0.0520436055958271,0.23734021186828613,-0.23380574584007263],"rotation":[0.5849630832672119,-0.0012391817290335894,-0.8110577464103699,-0.0013684158911928535],"used":true,"bodyHandle":8.4e-323},{"objectType":"coin","index":17,"position":[0.39996588230133057,0.18888269364833832,0.41054391860961914],"rotation":[-0.6350265145301819,-0.001902763731777668,0.7724878191947937,-0.00047975112101994455],"used":true,"bodyHandle":9e-323},{"objectType":"coin","index":18,"position":[-0.05293953791260719,0.18799446523189545,0.8194848299026489],"rotation":[-0.010341346263885498,0.7342023849487305,-0.0099336551502347,-0.6787792444229126],"used":true,"bodyHandle":9.4e-323},{"objectType":"coin","index":19,"position":[-0.1635553538799286,0.18250897526741028,0.7878115177154541],"rotation":[-0.000500949623528868,0.9540876746177673,-0.0009206222603097558,0.2995256185531616],"used":true,"bodyHandle":1e-322},{"objectType":"coin","index":20,"position":[0.5622129440307617,0.18251949548721313,0.773460328578949],"rotation":[-0.48445263504981995,-0.00346456584520638,-0.8748105764389038,-0.0002379994111834094],"used":true,"bodyHandle":1.04e-322},{"objectType":"coin","index":21,"position":[0.22717824578285217,0.23734314739704132,-0.2671509385108948],"rotation":[-0.9115636944770813,0.000332210271153599,-0.41115444898605347,-0.0018606131197884679],"used":true,"bodyHandle":1.1e-322},{"objectType":"coin","index":22,"position":[-0.2943451702594757,0.18216249346733093,0.7550715208053589],"rotation":[-0.6121591925621033,0.0008564385934732854,0.7907262444496155,-0.003515929915010929],"used":true,"bodyHandle":1.14e-322},{"objectType":"coin","index":23,"position":[-0.2710208296775818,0.2374887466430664,-0.29235443472862244],"rotation":[0.00028575927717611194,-0.00817430205643177,-0.0015712337335571647,-0.9999653100967407],"used":true,"bodyHandle":1.2e-322},{"objectType":"coin","index":24,"position":[0.10584263503551483,0.23748554289340973,-0.17586150765419006],"rotation":[0.9447140097618103,0.00047276870463974774,0.3278866708278656,-0.0023474437184631824],"used":true,"bodyHandle":1.24e-322},{"objectType":"coin","index":25,"position":[-0.492766410112381,0.18239611387252808,0.8086482286453247],"rotation":[-0.9418641328811646,-0.0016485531814396381,0.33598825335502625,-0.0010218506213277578],"used":true,"bodyHandle":1.3e-322},{"objectType":"coin","index":26,"position":[-0.34910041093826294,0.19416993856430054,0.3591699004173279],"rotation":[0.00043981248745694757,0.010877220891416073,0.008343162015080452,0.9999058842658997],"used":true,"bodyHandle":1.33e-322},{"objectType":"coin","index":27,"position":[0.26982346177101135,0.2404830902814865,-0.29224681854248047],"rotation":[-0.7615098357200623,0.02757362835109234,-0.645510733127594,-0.0515582337975502],"used":true,"bodyHandle":1.4e-322},{"objectType":"coin","index":28,"position":[0.5329673290252686,0.18261568248271942,0.8257482647895813],"rotation":[0.0006599898333661258,-0.43281131982803345,-0.0009383148280903697,0.9014837741851807],"used":true,"bodyHandle":1.43e-322},{"objectType":"coin","index":29,"position":[0.1148109883069992,0.23744429647922516,-0.29319077730178833],"rotation":[-0.9423316717147827,-0.001456785830669105,0.33467718958854675,0.0003461412852630019],"used":true,"bodyHandle":1.5e-322},{"objectType":"coin","index":30,"position":[-0.24619422852993011,0.18253101408481598,0.8496523499488831],"rotation":[0.00047204463044181466,-0.5064471364021301,0.0011594872921705246,0.8622700572013855],"used":true,"bodyHandle":1.53e-322},{"objectType":"coin","index":31,"position":[-0.12027213722467422,0.18864500522613525,0.8521627187728882],"rotation":[0.0012486655032262206,0.5156303644180298,0.0009690578444860876,0.8568096160888672],"used":true,"bodyHandle":1.6e-322},{"objectType":"coin","index":32,"position":[-0.22677764296531677,0.18740379810333252,0.3510337471961975],"rotation":[0.000007304081009351648,0.1909719556570053,0.0019510689890012145,0.9815935492515564],"used":true,"bodyHandle":1.63e-322},{"objectType":"coin","index":33,"position":[-0.261976957321167,0.2374541312456131,-0.11729395389556885],"rotation":[-0.001508525456301868,-0.3079042136669159,0.0007857712334953249,-0.9514158368110657],"used":true,"bodyHandle":1.7e-322},{"objectType":"coin","index":34,"position":[0.05909314006567001,0.18234722316265106,0.72247713804245],"rotation":[0.004262683913111687,0.09701097756624222,-0.0015552438562735915,-0.9952729344367981],"used":true,"bodyHandle":1.73e-322},{"objectType":"coin","index":35,"position":[-0.15975172817707062,0.18880943953990936,0.7945219874382019],"rotation":[0.9339485168457031,-0.0006435505347326398,0.35740166902542114,0.0019295730162411928],"used":true,"bodyHandle":1.8e-322},{"objectType":"coin","index":36,"position":[-0.05647175386548042,0.19035598635673523,0.3265977203845978],"rotation":[0.0005712790880352259,0.041515376418828964,0.0002328224218217656,0.9991376996040344],"used":true,"bodyHandle":1.83e-322},{"objectType":"coin","index":37,"position":[-0.5697514414787292,0.18249103426933289,0.7916625142097473],"rotation":[-0.012177670374512672,-0.6544387936592102,0.005927329882979393,0.7559936046600342],"used":true,"bodyHandle":1.9e-322},{"objectType":"coin","index":38,"position":[0.11139649897813797,0.23744045197963715,-0.23446398973464966],"rotation":[-0.0017925609136000276,-0.3975420296192169,0.0018670308636501431,-0.917580246925354],"used":true,"bodyHandle":1.93e-322},{"objectType":"coin","index":39,"position":[-0.16367727518081665,0.24342374503612518,-0.1802225112915039],"rotation":[0.997617244720459,-0.0026271564420312643,-0.06878335028886795,0.004661319777369499],"used":true,"bodyHandle":2e-322},{"objectType":"coin","index":40,"position":[-0.18361008167266846,0.18253193795681,0.8431640863418579],"rotation":[0.0011971581261605024,0.9999393820762634,0.0027547033969312906,0.010592462494969368],"used":true,"bodyHandle":2.03e-322},{"objectType":"coin","index":41,"position":[-0.011437458917498589,0.19030453264713287,0.28843703866004944],"rotation":[0.00010765672050183639,0.2037261575460434,-0.0012447331100702286,0.9790270924568176],"used":true,"bodyHandle":2.08e-322},{"objectType":"coin","index":42,"position":[-0.2375955879688263,0.18247589468955994,0.7882697582244873],"rotation":[-0.2019668072462082,-0.0008765753009356558,0.979380190372467,0.004793908447027206],"used":true,"bodyHandle":2.1e-322},{"objectType":"coin","index":43,"position":[-0.42719197273254395,0.1821785867214203,0.8074437975883484],"rotation":[0.5486270785331726,0.007999361492693424,0.8360151648521423,0.00478205643594265],"used":true,"bodyHandle":2.17e-322},{"objectType":"coin","index":44,"position":[-0.041052427142858505,0.1824495494365692,0.6964389085769653],"rotation":[0.7534655332565308,-0.0035220186691731215,-0.6574747562408447,-0.0020559646654874086],"used":true,"bodyHandle":2.2e-322},{"objectType":"coin","index":45,"position":[0.0820985808968544,0.18253599107265472,0.776818573474884],"rotation":[0.44541528820991516,0.00005773399243480526,-0.8953214287757874,0.002187741454690695],"used":true,"bodyHandle":2.27e-322},{"objectType":"coin","index":46,"position":[-0.11453617364168167,0.23724591732025146,-0.21324004232883453],"rotation":[-0.562464714050293,0.0021392430644482374,0.826815664768219,0.0021586394868791103],"used":true,"bodyHandle":2.3e-322},{"objectType":"coin","index":47,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.37e-322},{"objectType":"coin","index":48,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.4e-322},{"objectType":"coin","index":49,"position":[-0.6438714265823364,0.18872912228107452,0.48821428418159485],"rotation":[-0.0005027984152548015,-0.998818576335907,-0.0026317283045500517,0.048520930111408234],"used":true,"bodyHandle":2.47e-322},{"objectType":"coin","index":50,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.5e-322},{"objectType":"coin","index":51,"position":[-0.35493090748786926,0.18242394924163818,0.7527482509613037],"rotation":[-0.0013827498769387603,-0.8540472388267517,0.002542894333600998,0.5201873779296875],"used":true,"bodyHandle":2.57e-322},{"objectType":"coin","index":52,"position":[-0.5310828685760498,0.18231073021888733,0.3385714292526245],"rotation":[0.0020262806210666895,-0.7154150009155273,-0.002484157681465149,0.6986923813819885],"used":true,"bodyHandle":2.6e-322},{"objectType":"coin","index":53,"position":[0.46007591485977173,0.18842355906963348,0.8447355031967163],"rotation":[0.9980292320251465,0.0010217194212600589,0.06203380227088928,-0.0094021400436759],"used":true,"bodyHandle":2.67e-322},{"objectType":"coin","index":54,"position":[-0.08097121864557266,0.24355670809745789,-0.2735500931739807],"rotation":[0.002715921262279153,-0.20526652038097382,-0.0005242199986241758,-0.978702187538147],"used":true,"bodyHandle":2.7e-322},{"objectType":"coin","index":55,"position":[-0.4894741475582123,0.18203499913215637,0.7484637498855591],"rotation":[0.34815940260887146,-0.0003798758261837065,0.9374352693557739,-0.00003192744406987913],"used":true,"bodyHandle":2.77e-322},{"objectType":"coin","index":56,"position":[0.16635288298130035,0.23732002079486847,-0.11639022827148438],"rotation":[0.0003947920922655612,-0.7822630405426025,0.0015435477253049612,-0.6229462027549744],"used":true,"bodyHandle":2.8e-322},{"objectType":"coin","index":57,"position":[-0.49622443318367004,0.18858201801776886,0.8125411868095398],"rotation":[0.862309455871582,0.00242531462572515,0.5063686966896057,-0.002687524538487196],"used":true,"bodyHandle":2.87e-322},{"objectType":"coin","index":58,"position":[-0.12200291454792023,0.18237259984016418,0.8486672043800354],"rotation":[-0.2832701802253723,-0.0006566144293174148,0.9590396285057068,0.0007741879671812057],"used":true,"bodyHandle":2.9e-322},{"objectType":"coin","index":59,"position":[-0.638703465461731,0.18243014812469482,0.4903374910354614],"rotation":[0.0015694013563916087,-0.7399075627326965,-0.002616829238831997,0.6727015972137451],"used":true,"bodyHandle":2.96e-322},{"objectType":"coin","index":60,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3e-322},{"objectType":"coin","index":61,"position":[0.1257738173007965,0.18708424270153046,0.766367495059967],"rotation":[0.0026721374597400427,0.8369045853614807,-0.07923434674739838,0.5415768623352051],"used":true,"bodyHandle":3.06e-322},{"objectType":"coin","index":62,"position":[-0.40300771594047546,0.1887034922838211,0.7099727392196655],"rotation":[-0.8595715165138245,0.0005862753023393452,-0.511014997959137,-0.00021908970666117966],"used":true,"bodyHandle":3.1e-322},{"objectType":"coin","index":63,"position":[0.1311909705400467,0.18257318437099457,0.8141202926635742],"rotation":[0.000579331477638334,0.9992796778678894,0.000484595017042011,-0.037940867245197296],"used":true,"bodyHandle":3.16e-322},{"objectType":"coin","index":64,"position":[-0.5534939765930176,0.186491459608078,0.7572801113128662],"rotation":[0.3005829155445099,0.048740364611148834,0.951308012008667,0.04782608151435852],"used":true,"bodyHandle":3.2e-322},{"objectType":"coin","index":65,"position":[-0.2710053026676178,0.23747509717941284,-0.175800621509552],"rotation":[-0.0009523842600174248,0.5576969385147095,-0.0015531661920249462,0.8300426602363586],"used":true,"bodyHandle":3.26e-322},{"objectType":"coin","index":66,"position":[-0.24648436903953552,0.18849918246269226,0.8520675301551819],"rotation":[-0.002007656032219529,-0.20677943527698517,-0.0008165014442056417,0.9783851504325867],"used":true,"bodyHandle":3.3e-322},{"objectType":"coin","index":67,"position":[0.16205072402954102,0.18737639486789703,0.4688529670238495],"rotation":[0.9982858896255493,0.0019403757760301232,0.0584661103785038,-0.0017822884256020188],"used":true,"bodyHandle":3.36e-322},{"objectType":"coin","index":68,"position":[-0.2995908856391907,0.18877743184566498,0.8195174336433411],"rotation":[0.021487688645720482,0.004115087445825338,0.9997601509094238,0.0009703823016025126],"used":true,"bodyHandle":3.4e-322},{"objectType":"coin","index":69,"position":[0.5362899899482727,0.18226030468940735,0.7197966575622559],"rotation":[0.0004141323151998222,0.6207371354103088,0.0008462859550490975,-0.7840182185173035],"used":true,"bodyHandle":3.46e-322},{"objectType":"coin","index":70,"position":[0.19070297479629517,0.18228285014629364,0.786391019821167],"rotation":[0.30525484681129456,-0.00648068031296134,-0.9522473216056824,0.0015523837646469474],"used":true,"bodyHandle":3.5e-322},{"objectType":"coin","index":71,"position":[-0.4911884069442749,0.18829503655433655,0.7518308162689209],"rotation":[-0.0008220160962082446,-0.07270199805498123,-0.001629478414542973,-0.9973520040512085],"used":true,"bodyHandle":3.56e-322},{"objectType":"coin","index":72,"position":[-0.22962407767772675,0.18832379579544067,0.791517436504364],"rotation":[-0.002410906832665205,-0.4175781309604645,-0.010698428377509117,0.9085748195648193],"used":true,"bodyHandle":3.6e-322},{"objectType":"coin","index":73,"position":[0.45965757966041565,0.18244345486164093,0.826189398765564],"rotation":[0.8397066593170166,0.0015225093811750412,-0.5430304408073425,-0.002871172735467553],"used":true,"bodyHandle":3.66e-322},{"objectType":"coin","index":74,"position":[0.16239182651042938,0.24365155398845673,-0.14537197351455688],"rotation":[-0.00018663599621504545,0.878609836101532,0.0010408444795757532,-0.47753918170928955],"used":true,"bodyHandle":3.7e-322},{"objectType":"coin","index":75,"position":[-0.19915671646595,0.18251243233680725,0.738764226436615],"rotation":[-0.9276998043060303,-0.000500632100738585,-0.37329405546188354,-0.004924709443002939],"used":true,"bodyHandle":3.75e-322},{"objectType":"coin","index":76,"position":[0.005814192816615105,0.23748616874217987,-0.2600659430027008],"rotation":[-0.8407304286956787,-0.0006043725879862905,0.5414491295814514,-0.002209446858614683],"used":true,"bodyHandle":3.8e-322},{"objectType":"coin","index":77,"position":[0.011441309005022049,0.19167138636112213,0.7224642634391785],"rotation":[-0.06727195531129837,0.9974752068519592,-0.016780398786067963,0.015365510247647762],"used":true,"bodyHandle":3.85e-322},{"objectType":"coin","index":78,"position":[-0.3553023338317871,0.18870431184768677,0.7543526887893677],"rotation":[-0.003120220033451915,0.04565732926130295,0.0012138037709519267,0.9989515542984009],"used":true,"bodyHandle":3.9e-322},{"objectType":"coin","index":79,"position":[0.6643285751342773,0.1884605586528778,0.47251400351524353],"rotation":[0.0009233113960362971,-0.7493551969528198,-0.0004527981800492853,-0.6621673703193665],"used":true,"bodyHandle":3.95e-322},{"objectType":"coin","index":80,"position":[0.4385152757167816,0.18232592940330505,0.7702431082725525],"rotation":[-0.7190125584602356,0.00016365697956643999,-0.6949950456619263,0.001676857122220099],"used":true,"bodyHandle":4e-322},{"objectType":"coin","index":81,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.05e-322},{"objectType":"coin","index":82,"position":[-0.4704393148422241,0.18257246911525726,0.5992553234100342],"rotation":[0.557930052280426,-0.0010446503292769194,-0.8298848867416382,-0.0019936421886086464],"used":true,"bodyHandle":4.1e-322},{"objectType":"coin","index":83,"position":[-0.4292563796043396,0.18631447851657867,0.7683937549591064],"rotation":[0.5954012870788574,0.057688724249601364,0.8007490634918213,0.031147468835115433],"used":true,"bodyHandle":4.15e-322},{"objectType":"coin","index":84,"position":[-0.4619596600532532,0.18813391029834747,0.6976796984672546],"rotation":[0.0013805796625092626,0.9478890299797058,-0.0023277620784938335,0.31858915090560913],"used":true,"bodyHandle":4.2e-322},{"objectType":"coin","index":85,"position":[0.0231251809746027,0.18661241233348846,0.7139070630073547],"rotation":[-0.06400463730096817,0.011331252753734589,0.9954043030738831,-0.0703224241733551],"used":true,"bodyHandle":4.25e-322},{"objectType":"coin","index":86,"position":[-0.6344853043556213,0.18244901299476624,0.42386460304260254],"rotation":[0.0012887166813015938,0.8755205273628235,0.003138130297884345,-0.48316895961761475],"used":true,"bodyHandle":4.3e-322},{"objectType":"coin","index":87,"position":[0.17099878191947937,0.18871304392814636,0.7273563742637634],"rotation":[0.005499700084328651,-0.144154891371727,0.005077496636658907,0.9895268082618713],"used":true,"bodyHandle":4.35e-322},{"objectType":"coin","index":88,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.4e-322},{"objectType":"coin","index":89,"position":[0.4991215169429779,0.18258854746818542,0.7760398387908936],"rotation":[0.6179924607276917,-0.0006781526608392596,-0.7861828804016113,0.0011350197019055486],"used":true,"bodyHandle":4.45e-322},{"objectType":"coin","index":90,"position":[-0.2700243592262268,0.2375369369983673,-0.23268379271030426],"rotation":[0.9798247814178467,0.000371094822185114,0.19985024631023407,-0.0017346491804346442],"used":true,"bodyHandle":4.5e-322},{"objectType":"coin","index":91,"position":[0.04679623618721962,0.19037926197052002,0.27910125255584717],"rotation":[0.0011822564993053675,-0.10753345489501953,0.0007298545097000897,0.9942004680633545],"used":true,"bodyHandle":4.55e-322},{"objectType":"coin","index":92,"position":[-0.464169979095459,0.1820717751979828,0.6907443404197693],"rotation":[0.0000697577852406539,0.9937537312507629,0.0006607617833651602,-0.11159326136112213],"used":true,"bodyHandle":4.6e-322},{"objectType":"coin","index":93,"position":[-0.4033994972705841,0.18250852823257446,0.7102411985397339],"rotation":[0.9886121153831482,0.00028529230621643364,0.1504848152399063,0.0005149273201823235],"used":true,"bodyHandle":4.64e-322},{"objectType":"coin","index":94,"position":[-0.2954266667366028,0.18843936920166016,0.75412917137146],"rotation":[-0.07053004950284958,0.003474488155916333,0.9975008964538574,-0.002314857905730605],"used":true,"bodyHandle":4.7e-322},{"objectType":"coin","index":95,"position":[0.02447069063782692,0.1903771460056305,0.3389713764190674],"rotation":[0.00026815576711669564,-0.3294812738895416,0.0008717699092812836,0.944161593914032],"used":true,"bodyHandle":4.74e-322},{"objectType":"coin","index":96,"position":[-0.10472024977207184,0.1947365403175354,0.672102153301239],"rotation":[0.5283432006835938,0.0033206671942025423,-0.8489946722984314,-0.007108733523637056],"used":true,"bodyHandle":4.8e-322},{"objectType":"coin","index":97,"position":[0.2586105167865753,0.18257464468479156,0.7888145446777344],"rotation":[0.0001872348802862689,0.5020483136177063,0.0005639882874675095,-0.8648393154144287],"used":true,"bodyHandle":4.84e-322},{"objectType":"coin","index":98,"position":[-0.583861231803894,0.18207114934921265,0.5177282094955444],"rotation":[0.00009142758062807843,-0.9707445502281189,0.00008355845784535632,0.2401147037744522],"used":true,"bodyHandle":4.9e-322},{"objectType":"coin","index":99,"position":[0.5154431462287903,0.18847060203552246,0.6777324676513672],"rotation":[0.5830358266830444,-0.0002782183000817895,-0.8124443292617798,-0.0018239874625578523],"used":true,"bodyHandle":4.94e-322},{"objectType":"coin","index":100,"position":[0.1698528677225113,0.2372368425130844,-0.23377835750579834],"rotation":[-0.7001879811286926,0.001902397139929235,-0.7139518857002258,-0.0024118938017636538],"used":true,"bodyHandle":5e-322},{"objectType":"coin","index":101,"position":[-0.25256648659706116,0.182458758354187,0.7123619318008423],"rotation":[0.0009324957500211895,0.5335602164268494,-0.001567587722092867,-0.8457601070404053],"used":true,"bodyHandle":5.04e-322},{"objectType":"coin","index":102,"position":[-0.14063259959220886,0.18206995725631714,0.7295300960540771],"rotation":[0.9622927308082581,-0.00002911329283961095,0.27195143699645996,0.0059325676411390305],"used":true,"bodyHandle":5.1e-322},{"objectType":"coin","index":103,"position":[0.3995263874530792,0.18258856236934662,0.8304184079170227],"rotation":[0.002793910214677453,0.5723676085472107,0.0011312352726235986,0.8199915885925293],"used":true,"bodyHandle":5.14e-322},{"objectType":"coin","index":104,"position":[-0.11677099764347076,0.18798597157001495,0.7288971543312073],"rotation":[-0.1446099877357483,0.004984956234693527,0.9894389510154724,0.008583924733102322],"used":true,"bodyHandle":5.2e-322},{"objectType":"coin","index":105,"position":[0.004338287282735109,0.18243899941444397,0.6554545760154724],"rotation":[-0.4635569751262665,-0.0014152044896036386,-0.886063277721405,-0.002170655643567443],"used":true,"bodyHandle":5.24e-322},{"objectType":"coin","index":106,"position":[-0.3412725031375885,0.18228553235530853,0.6945015788078308],"rotation":[-0.3396032750606537,-0.001071734819561243,-0.9405525326728821,-0.005410547833889723],"used":true,"bodyHandle":5.3e-322},{"objectType":"coin","index":107,"position":[0.17006784677505493,0.18242120742797852,0.7271581292152405],"rotation":[0.006544452626258135,-0.7249757647514343,-0.00007233556971186772,0.6887432932853699],"used":true,"bodyHandle":5.34e-322},{"objectType":"coin","index":108,"position":[0.3840921223163605,0.1826210767030716,0.7813412547111511],"rotation":[0.9969455003738403,-0.0007841636543162167,-0.07809378206729889,-0.000615710683632642],"used":true,"bodyHandle":5.4e-322},{"objectType":"coin","index":109,"position":[-0.1098674014210701,0.18237924575805664,0.6672645807266235],"rotation":[-0.4880504608154297,-0.0019055471057072282,0.8727925419807434,0.006025189999490976],"used":true,"bodyHandle":5.43e-322},{"objectType":"coin","index":110,"position":[0.6537477970123291,0.18222351372241974,0.47414350509643555],"rotation":[0.07940913736820221,0.0014482318656519055,-0.9968395829200745,0.0016965154791250825],"used":true,"bodyHandle":5.5e-322},{"objectType":"coin","index":111,"position":[0.4366818964481354,0.18869464099407196,0.7798810601234436],"rotation":[-0.0036728563718497753,0.9963738918304443,-0.0003135611186735332,-0.08500269800424576],"used":true,"bodyHandle":5.53e-322},{"objectType":"coin","index":112,"position":[-0.426919549703598,0.1822444498538971,0.644829511642456],"rotation":[0.6658908128738403,-0.0036613550037145615,-0.7460253238677979,0.0047142524272203445],"used":true,"bodyHandle":5.6e-322},{"objectType":"coin","index":113,"position":[-0.5012414455413818,0.18210604786872864,0.6496672630310059],"rotation":[-0.878025472164154,0.00006124989886302501,0.47861248254776,-0.0011572276707738638],"used":true,"bodyHandle":5.63e-322},{"objectType":"coin","index":114,"position":[0.32299527525901794,0.18257832527160645,0.7886322736740112],"rotation":[0.0010045726085081697,-0.8111162185668945,0.0004206843441352248,-0.5848839282989502],"used":true,"bodyHandle":5.7e-322},{"objectType":"coin","index":115,"position":[-0.17183127999305725,0.18779127299785614,0.6885866522789001],"rotation":[-0.003630588762462139,-0.7200393080711365,-0.0117872953414917,0.6938236951828003],"used":true,"bodyHandle":5.73e-322},{"objectType":"coin","index":116,"position":[-0.584149956703186,0.18839943408966064,0.5175724625587463],"rotation":[-0.0001402103662258014,-0.45068857073783875,0.0006886975024826825,0.8926809430122375],"used":true,"bodyHandle":5.8e-322},{"objectType":"coin","index":117,"position":[0.22885443270206451,0.1824931502342224,0.7320220470428467],"rotation":[-0.0008204315672628582,0.5785829424858093,-0.0029859538190066814,0.8156176209449768],"used":true,"bodyHandle":5.83e-322},{"objectType":"coin","index":118,"position":[0.5368220806121826,0.18255732953548431,0.33594486117362976],"rotation":[0.0015663843369111419,-0.9935050010681152,0.0006980258622206748,-0.11377517133951187],"used":true,"bodyHandle":5.9e-322},{"objectType":"coin","index":119,"position":[-0.5011795163154602,0.18833249807357788,0.6495882272720337],"rotation":[0.9234432578086853,0.002647524233907461,0.383718341588974,0.0023855362087488174],"used":true,"bodyHandle":5.93e-322},{"objectType":"coin","index":120,"position":[0.3236958980560303,0.1887560933828354,0.7891947627067566],"rotation":[0.6783424019813538,0.0013073767768219113,-0.734744668006897,0.00021739288058597594],"used":true,"bodyHandle":6e-322},{"objectType":"coin","index":121,"position":[0.2710226774215698,0.2374630868434906,-0.1720111221075058],"rotation":[-0.001381116104312241,-0.8569584488868713,0.0006406211759895086,0.515383243560791],"used":true,"bodyHandle":6.03e-322},{"objectType":"coin","index":122,"position":[0.5100430250167847,0.18223778903484344,0.667391300201416],"rotation":[0.00039018099778331816,-0.10469662398099899,0.0028843216132372618,-0.994499921798706],"used":true,"bodyHandle":6.1e-322},{"objectType":"coin","index":123,"position":[0.11118751764297485,0.1912733018398285,0.7194990515708923],"rotation":[0.05193844065070152,0.4274892210960388,0.04988197237253189,-0.9011476635932922],"used":true,"bodyHandle":6.13e-322},{"objectType":"coin","index":124,"position":[0.14135779440402985,0.18251298367977142,0.668330192565918],"rotation":[0.001991117838770151,0.19518835842609406,-0.0002252864360343665,-0.9807637333869934],"used":true,"bodyHandle":6.2e-322},{"objectType":"coin","index":125,"position":[0.10047023743391037,0.18612539768218994,0.7125551104545593],"rotation":[0.8956672549247742,-0.06932317465543747,-0.43920180201530457,-0.00872782152146101],"used":true,"bodyHandle":6.23e-322},{"objectType":"coin","index":126,"position":[-0.5277113914489746,0.18207119405269623,0.702444314956665],"rotation":[0.0003198374470230192,-0.7033143043518066,-0.00013952954031992704,0.7108789086341858],"used":true,"bodyHandle":6.27e-322},{"objectType":"coin","index":127,"position":[-0.36489880084991455,0.18262696266174316,0.8132982850074768],"rotation":[-0.0008967187604866922,0.9850346446037292,-0.0006438197451643646,-0.17235280573368073],"used":true,"bodyHandle":6.3e-322},{"objectType":"coin","index":128,"position":[-0.30376186966896057,0.18257524073123932,0.818486213684082],"rotation":[-0.0029612865764647722,-0.12876665592193604,0.0012126920046284795,0.9916697144508362],"used":true,"bodyHandle":6.37e-322},{"objectType":"coin","index":129,"position":[-0.10131166130304337,0.18653948605060577,0.7858535647392273],"rotation":[-0.0015999007737264037,0.14457692205905914,0.014620283618569374,0.9893841743469238],"used":true,"bodyHandle":6.4e-322},{"objectType":"coin","index":130,"position":[-0.03628602996468544,0.18830950558185577,0.7619507312774658],"rotation":[-0.00532716466113925,0.2514726221561432,0.011841513216495514,0.9677772521972656],"used":true,"bodyHandle":6.47e-322},{"objectType":"coin","index":131,"position":[0.022851377725601196,0.1901450753211975,0.7890865802764893],"rotation":[0.0031415708363056183,-0.30028119683265686,0.013360199518501759,0.9537519216537476],"used":true,"bodyHandle":6.5e-322},{"objectType":"coin","index":132,"position":[0.1905035525560379,0.18851912021636963,0.7832244634628296],"rotation":[-0.005659001413732767,-0.5644493103027344,0.0034760870039463043,0.8254409432411194],"used":true,"bodyHandle":6.57e-322},{"objectType":"coin","index":133,"position":[-0.20949268341064453,0.2374456375837326,-0.14420025050640106],"rotation":[0.5644640922546387,-0.00008804078242974356,-0.8254554867744446,-0.0018499193247407675],"used":true,"bodyHandle":6.6e-322},{"objectType":"coin","index":134,"position":[0.54155033826828,0.1885761022567749,0.7307261824607849],"rotation":[-0.0024230750277638435,0.1527680903673172,-0.0005495183286257088,0.988258957862854],"used":true,"bodyHandle":6.67e-322},{"objectType":"coin","index":135,"position":[-0.2710055708885193,0.23749469220638275,-0.05901077762246132],"rotation":[-0.00023338719620369375,-0.2802155613899231,-0.0011023272527381778,-0.9599364399909973],"used":true,"bodyHandle":6.7e-322},{"objectType":"coin","index":136,"position":[0.256619930267334,0.18886195123195648,0.7923471927642822],"rotation":[0.00010282417497364804,0.4785788357257843,-0.00004208032987662591,-0.8780445456504822],"used":true,"bodyHandle":6.77e-322},{"objectType":"coin","index":137,"position":[0.4732266366481781,0.1821797639131546,0.7210075259208679],"rotation":[-0.4775952696800232,0.002505557844415307,0.8785763382911682,0.00034687339211814106],"used":true,"bodyHandle":6.8e-322},{"objectType":"coin","index":138,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":6.87e-322},{"objectType":"coin","index":139,"position":[0.06902364641427994,0.18246610462665558,0.6590031981468201],"rotation":[0.0007139847730286419,-0.39891278743743896,-0.00025331819779239595,-0.9169885516166687],"used":true,"bodyHandle":6.9e-322},{"objectType":"coin","index":140,"position":[0.1454276293516159,0.18872249126434326,0.671227753162384],"rotation":[-0.0028064653743058443,0.8629183769226074,-0.0038286554627120495,0.5053211450576782],"used":true,"bodyHandle":6.97e-322},{"objectType":"coin","index":141,"position":[0.41210052371025085,0.18251273036003113,0.719417154788971],"rotation":[0.0017659979639574885,0.5099459290504456,-0.0008952753851190209,0.8602041602134705],"used":true,"bodyHandle":7e-322},{"objectType":"coin","index":142,"position":[-0.3056109547615051,0.18700534105300903,0.6927379965782166],"rotation":[-0.07340879738330841,-0.9903303384780884,-0.004720717668533325,0.11762067675590515],"used":true,"bodyHandle":7.07e-322},{"objectType":"coin","index":143,"position":[-0.5890477895736694,0.18603317439556122,0.45811760425567627],"rotation":[0.6697012782096863,0.052122268825769424,-0.739825427532196,0.0379699282348156],"used":true,"bodyHandle":7.1e-322},{"objectType":"coin","index":144,"position":[-0.21034090220928192,0.19252490997314453,0.7543647885322571],"rotation":[0.8672356605529785,-0.05513337254524231,-0.4935690760612488,0.0353873148560524],"used":true,"bodyHandle":7.16e-322},{"objectType":"coin","index":145,"position":[-0.528365433216095,0.18826571106910706,0.7036635279655457],"rotation":[0.8128030300140381,0.0003918931179214269,-0.5825383067131042,-0.0003766260633710772],"used":true,"bodyHandle":7.2e-322},{"objectType":"coin","index":146,"position":[0.03909200429916382,0.18735367059707642,0.6048746705055237],"rotation":[-0.8948410749435425,0.0013994815526530147,-0.44637593626976013,-0.0024540440645068884],"used":true,"bodyHandle":7.26e-322},{"objectType":"coin","index":147,"position":[-0.19374299049377441,0.182091623544693,0.6692368388175964],"rotation":[0.7311920523643494,-0.0011520071420818567,0.6821662783622742,0.0024505078326910734],"used":true,"bodyHandle":7.3e-322},{"objectType":"coin","index":148,"position":[-0.38655829429626465,0.18736106157302856,0.6530221700668335],"rotation":[-0.9554067850112915,0.0714118629693985,-0.28435906767845154,0.035187337547540665],"used":true,"bodyHandle":7.36e-322},{"objectType":"coin","index":149,"position":[0.3518371284008026,0.18257756531238556,0.7316492199897766],"rotation":[0.001115018269047141,-0.48329880833625793,-0.0015572701813653111,0.8754532933235168],"used":true,"bodyHandle":7.4e-322},{"objectType":"coin","index":150,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":7.46e-322},{"objectType":"coin","index":151,"position":[-0.5901457667350769,0.1824452131986618,0.3508217930793762],"rotation":[-0.9980859756469727,0.003023577854037285,0.061707526445388794,0.00272858957760036],"used":true,"bodyHandle":7.5e-322},{"objectType":"coin","index":152,"position":[-0.5932695865631104,0.19193622469902039,0.45597654581069946],"rotation":[0.06289412081241608,-0.9227157235145569,0.010668949224054813,0.3801659643650055],"used":true,"bodyHandle":7.56e-322},{"objectType":"coin","index":153,"position":[0.11478425562381744,0.1875332146883011,0.620361864566803],"rotation":[0.00688810832798481,-0.44082432985305786,-0.0005284083308652043,-0.8975667953491211],"used":true,"bodyHandle":7.6e-322},{"objectType":"coin","index":154,"position":[-0.1738307923078537,0.19370192289352417,0.7076862454414368],"rotation":[-0.9965394139289856,0.0077262986451387405,0.08195147663354874,0.01155093964189291],"used":true,"bodyHandle":7.66e-322},{"objectType":"coin","index":155,"position":[-0.05712432041764259,0.18551917374134064,0.6394579410552979],"rotation":[-0.2667837142944336,-0.05702873319387436,0.9620002508163452,0.011385031044483185],"used":true,"bodyHandle":7.7e-322},{"objectType":"coin","index":156,"position":[0.2910102605819702,0.18238723278045654,0.7368078231811523],"rotation":[0.0018594262655824423,-0.8034111261367798,-0.0011977176181972027,0.5954205393791199],"used":true,"bodyHandle":7.76e-322},{"objectType":"coin","index":157,"position":[0.6049229502677917,0.18214449286460876,0.50783771276474],"rotation":[-0.588808536529541,0.0030452266801148653,0.8082606792449951,-0.0031265553552657366],"used":true,"bodyHandle":7.8e-322},{"objectType":"coin","index":158,"position":[-0.10740400105714798,0.18845142424106598,0.6706133484840393],"rotation":[-0.5569433569908142,-0.0031762202270329,0.8305121064186096,0.007323219906538725],"used":true,"bodyHandle":7.86e-322},{"objectType":"coin","index":159,"position":[0.2423817366361618,0.18868222832679749,0.7301973700523376],"rotation":[-0.0028944716323167086,-0.8496735692024231,0.0010629092575982213,0.5272999405860901],"used":true,"bodyHandle":7.9e-322},{"objectType":"coin","index":160,"position":[0.47433727979660034,0.18846045434474945,0.7244403958320618],"rotation":[-0.001115802675485611,0.2010928839445114,-0.003360672853887081,0.9795657396316528],"used":true,"bodyHandle":7.95e-322},{"objectType":"coin","index":161,"position":[-0.05827026814222336,0.19227290153503418,0.6354494690895081],"rotation":[0.9740816354751587,0.015131843276321888,-0.21881864964962006,-0.05526720732450485],"used":true,"bodyHandle":8e-322},{"objectType":"coin","index":162,"position":[0.32184499502182007,0.18259264528751373,0.6807491183280945],"rotation":[-0.00011637342686299235,-0.8917566537857056,0.00035587509046308696,-0.4525150656700134],"used":true,"bodyHandle":8.05e-322},{"objectType":"coin","index":163,"position":[-0.562991738319397,0.18850572407245636,0.392649382352829],"rotation":[0.002252626698464155,0.2581794857978821,-0.00096815952565521,0.9660938382148743],"used":true,"bodyHandle":8.1e-322},{"objectType":"coin","index":164,"position":[-0.0018139439634978771,0.18855969607830048,0.6602396368980408],"rotation":[-0.36543378233909607,0.0034200886730104685,0.9308291673660278,-0.0018602764466777444],"used":true,"bodyHandle":8.15e-322},{"objectType":"coin","index":165,"position":[-0.26101261377334595,0.18246111273765564,0.6539978384971619],"rotation":[-0.29216134548187256,0.0015804687282070518,0.9563677310943604,0.00015817864914424717],"used":true,"bodyHandle":8.2e-322},{"objectType":"coin","index":166,"position":[-0.0706140324473381,0.19350425899028778,0.5658813714981079],"rotation":[-0.11075114458799362,0.00014805809769313782,-0.9938374161720276,-0.004630904644727707],"used":true,"bodyHandle":8.25e-322},{"objectType":"coin","index":167,"position":[-0.14664232730865479,0.18721140921115875,0.5709664225578308],"rotation":[0.002288052113726735,0.9985203146934509,-0.0004316935082897544,-0.054329775273799896],"used":true,"bodyHandle":8.3e-322},{"objectType":"coin","index":168,"position":[0.4447651505470276,0.1825747787952423,0.6693447828292847],"rotation":[-0.00018288116552866995,-0.42014098167419434,0.0004625541332643479,0.9074587225914001],"used":true,"bodyHandle":8.35e-322},{"objectType":"coin","index":169,"position":[-0.5599989891052246,0.182156503200531,0.3956805467605591],"rotation":[0.0007442499045282602,-0.5821790099143982,-0.0012146972585469484,0.8130594491958618],"used":true,"bodyHandle":8.4e-322},{"objectType":"coin","index":170,"position":[0.06670208275318146,0.18871134519577026,0.6598374247550964],"rotation":[0.001647548284381628,-0.9361175298690796,-0.0003555468574631959,0.3516831398010254],"used":true,"bodyHandle":8.45e-322},{"objectType":"coin","index":171,"position":[0.14867620170116425,0.19349218904972076,0.5714865326881409],"rotation":[0.0005692968843504786,-0.07979502528905869,-0.0009889578213915229,-0.9968106150627136],"used":true,"bodyHandle":8.5e-322},{"objectType":"coin","index":172,"position":[-0.15850579738616943,0.1873675286769867,0.6290634870529175],"rotation":[0.0025949995033442974,0.9911725521087646,-0.00034996686736121774,0.1325521618127823],"used":true,"bodyHandle":8.55e-322},{"objectType":"coin","index":173,"position":[-0.018871499225497246,0.18741333484649658,0.5938310027122498],"rotation":[-0.0027468265034258366,-0.9637302160263062,-0.00014550270861946046,0.266864150762558],"used":true,"bodyHandle":8.6e-322},{"objectType":"coin","index":174,"position":[0.03880602493882179,0.19368380308151245,0.6055619716644287],"rotation":[-0.00276141962967813,-0.9413163661956787,0.0023748530074954033,-0.3375058174133301],"used":true,"bodyHandle":8.65e-322},{"objectType":"coin","index":175,"position":[0.23468802869319916,0.1937846690416336,0.5912735462188721],"rotation":[-0.8176475763320923,-0.00020850235887337476,0.5757179260253906,-0.0010831952095031738],"used":true,"bodyHandle":8.7e-322},{"objectType":"coin","index":176,"position":[-0.29165416955947876,0.1988922357559204,0.5504450798034668],"rotation":[-0.7127127647399902,0.014458633959293365,-0.701179027557373,0.013390406966209412],"used":true,"bodyHandle":8.74e-322},{"objectType":"coin","index":177,"position":[0.0896783098578453,0.19926226139068604,0.5750499367713928],"rotation":[-0.5139752626419067,-0.004279786255210638,0.8577942848205566,0.00005042837801738642],"used":true,"bodyHandle":8.8e-322},{"objectType":"coin","index":178,"position":[-0.5119858980178833,0.18251755833625793,0.5537259578704834],"rotation":[-0.0019297905964776874,-0.08531907945871353,0.0022399381268769503,0.9963492155075073],"used":true,"bodyHandle":8.84e-322},{"objectType":"coin","index":179,"position":[-0.04626695066690445,0.1872468739748001,0.5415626168251038],"rotation":[0.0008379319333471358,0.9998866319656372,0.001542420475743711,-0.014956772327423096],"used":true,"bodyHandle":8.9e-322},{"objectType":"coin","index":180,"position":[0.5925275087356567,0.18243373930454254,0.3553827404975891],"rotation":[-0.00020641177252400666,-0.6760499477386475,-0.00010668980394257233,0.7368557453155518],"used":true,"bodyHandle":8.94e-322},{"objectType":"coin","index":181,"position":[0.02227005362510681,0.18713590502738953,0.5513221025466919],"rotation":[0.4711909294128418,-0.001243017497472465,0.8820258378982544,0.0028349782805889845],"used":true,"bodyHandle":9e-322},{"objectType":"coin","index":182,"position":[0.36688682436943054,0.18847937881946564,0.6746132969856262],"rotation":[0.33894726634025574,-0.000831704877782613,-0.9408027529716492,0.0020573274232447147],"used":true,"bodyHandle":9.04e-322},{"objectType":"coin","index":183,"position":[0.4147280752658844,0.18877652287483215,0.7109438180923462],"rotation":[0.10370233654975891,0.00021165252837818116,0.9946069121360779,0.00169556331820786],"used":true,"bodyHandle":9.1e-322},{"objectType":"coin","index":184,"position":[0.11474359780550003,0.1938774436712265,0.6239738464355469],"rotation":[0.009031759575009346,-0.990764856338501,0.012573457323014736,-0.13470441102981567],"used":true,"bodyHandle":9.14e-322},{"objectType":"coin","index":185,"position":[-0.0866500660777092,0.18731549382209778,0.58638596534729],"rotation":[0.0016932775033637881,0.32764095067977905,0.00043810525676235557,-0.9448006749153137],"used":true,"bodyHandle":9.2e-322},{"objectType":"coin","index":186,"position":[0.5957686305046082,0.18219462037086487,0.4431508779525757],"rotation":[0.00005388208228396252,-0.9106649160385132,-0.0033946470357477665,0.4131317734718323],"used":true,"bodyHandle":9.24e-322},{"objectType":"coin","index":187,"position":[0.012088366784155369,0.18698184192180634,0.48968201875686646],"rotation":[0.7692215442657471,0.0035775762517005205,-0.6389718651771545,-0.0005112899816595018],"used":true,"bodyHandle":9.3e-322},{"objectType":"coin","index":188,"position":[-0.48026740550994873,0.18217122554779053,0.3685366213321686],"rotation":[-0.0012012706138193607,0.9589347839355469,0.005257573444396257,0.2835753560066223],"used":true,"bodyHandle":9.34e-322},{"objectType":"coin","index":189,"position":[0.3032221794128418,0.19365236163139343,0.6267334818840027],"rotation":[-0.5859330892562866,0.002426582621410489,-0.8103554844856262,-0.0006589597905986011],"used":true,"bodyHandle":9.4e-322},{"objectType":"coin","index":190,"position":[-0.025830280035734177,0.19720764458179474,0.5647666454315186],"rotation":[-0.38191887736320496,0.019878467544913292,-0.9218748211860657,-0.06236620619893074],"used":true,"bodyHandle":9.44e-322},{"objectType":"coin","index":191,"position":[0.6002941727638245,0.18831965327262878,0.46183833479881287],"rotation":[0.0017467471770942211,0.9996039271354675,0.002741936594247818,-0.02795392833650112],"used":true,"bodyHandle":9.5e-322},{"objectType":"coin","index":192,"position":[0.08607833832502365,0.18692055344581604,0.5683894157409668],"rotation":[0.0031541110947728157,0.4822821319103241,0.0012743627885356545,0.8760092854499817],"used":true,"bodyHandle":9.54e-322},{"objectType":"coin","index":193,"position":[0.07898449897766113,0.1935962289571762,0.5080430507659912],"rotation":[0.7460167407989502,-0.0006852759979665279,0.6659236550331116,-0.0020472672767937183],"used":true,"bodyHandle":9.6e-322},{"objectType":"coin","index":194,"position":[0.5559496283531189,0.18258865177631378,0.39849960803985596],"rotation":[-0.9484972357749939,0.0002561391447670758,0.31678521633148193,0.00009019171557156369],"used":true,"bodyHandle":9.63e-322},{"objectType":"coin","index":195,"position":[0.18211162090301514,0.19354131817817688,0.6235418915748596],"rotation":[0.036425769329071045,-0.0009183099027723074,-0.9993337988853455,-0.0020578624680638313],"used":true,"bodyHandle":9.7e-322},{"objectType":"coin","index":196,"position":[0.5516994595527649,0.18234041333198547,0.4823435842990875],"rotation":[0.9728559851646423,-0.004695434123277664,-0.23133808374404907,-0.0034374201204627752],"used":true,"bodyHandle":9.73e-322},{"objectType":"coin","index":197,"position":[0.03298969194293022,0.19335995614528656,0.5460125207901001],"rotation":[0.8569304347038269,-0.00011758000619011,0.5154294371604919,0.0016605190467089415],"used":true,"bodyHandle":9.8e-322},{"objectType":"coin","index":198,"position":[0.12158536911010742,0.19364136457443237,0.4668441414833069],"rotation":[0.23548276722431183,0.00143856939394027,-0.9718774557113647,-0.0001547674328321591],"used":true,"bodyHandle":9.83e-322},{"objectType":"coin","index":199,"position":[-0.45395323634147644,0.18850019574165344,0.6118423342704773],"rotation":[-0.006514796521514654,-0.7978676557540894,-0.006518800742924213,0.6027621626853943],"used":true,"bodyHandle":9.9e-322},{"objectType":"coin","index":200,"position":[0.5453112125396729,0.1886603683233261,0.487678587436676],"rotation":[0.2342934012413025,-0.004192986525595188,0.9721418023109436,0.005415782332420349],"used":true,"bodyHandle":9.93e-322},{"objectType":"coin","index":201,"position":[-0.2167990505695343,0.18737691640853882,0.6129152774810791],"rotation":[0.0006774320499971509,0.7374774217605591,-0.0016271077329292893,-0.6753695011138916],"used":true,"bodyHandle":1e-321},{"objectType":"coin","index":202,"position":[-0.5014583468437195,0.18803571164608002,0.380664199590683],"rotation":[-0.73743736743927,-0.012073628604412079,0.6753047108650208,0.0019525970565155149],"used":true,"bodyHandle":1.003e-321},{"objectType":"coin","index":203,"position":[-0.005135716404765844,0.19291266798973083,0.4991053640842438],"rotation":[0.003701552515849471,0.5714453458786011,0.009160610847175121,0.8205806016921997],"used":true,"bodyHandle":1.01e-321},{"objectType":"coin","index":204,"position":[-0.10429742187261581,0.18721382319927216,0.5299490690231323],"rotation":[0.5867465138435364,-0.0009107684018090367,0.8097684383392334,0.0016471125418320298],"used":true,"bodyHandle":1.013e-321},{"objectType":"coin","index":205,"position":[-0.26021403074264526,0.1871487945318222,0.5348538160324097],"rotation":[0.9961284399032593,0.0016804859042167664,-0.08788544684648514,0.0011919675162062049],"used":true,"bodyHandle":1.02e-321},{"objectType":"coin","index":206,"position":[-0.32956162095069885,0.18737652897834778,0.5759505033493042],"rotation":[-0.9812914133071899,-0.00009119525202549994,-0.19252686202526093,-0.0007384123164229095],"used":true,"bodyHandle":1.023e-321},{"objectType":"coin","index":207,"position":[-0.32896241545677185,0.1862836480140686,0.6358911395072937],"rotation":[0.9638875722885132,-0.009587551467120647,0.26312223076820374,-0.0399445965886116],"used":true,"bodyHandle":1.03e-321},{"objectType":"coin","index":208,"position":[0.3798152804374695,0.18226593732833862,0.6700234413146973],"rotation":[-0.8181388974189758,-0.0025195141788572073,-0.5750147700309753,-0.00053298199782148],"used":true,"bodyHandle":1.033e-321},{"objectType":"coin","index":209,"position":[0.20282025635242462,0.18245455622673035,0.6780415773391724],"rotation":[-0.0012338419910520315,-0.9999554753303528,0.00116965570487082,0.009282403625547886],"used":true,"bodyHandle":1.04e-321},{"objectType":"coin","index":210,"position":[0.21538777649402618,0.18738386034965515,0.573859691619873],"rotation":[0.6943225860595703,-0.0017535679508000612,0.7196615934371948,-0.000477470486657694],"used":true,"bodyHandle":1.042e-321},{"objectType":"coin","index":211,"position":[0.6078436970710754,0.1920166313648224,0.5066033005714417],"rotation":[-0.3983781933784485,-0.05691925063729286,0.9148080348968506,0.034371476620435715],"used":true,"bodyHandle":1.047e-321},{"objectType":"coin","index":212,"position":[-0.11907433718442917,0.19350166618824005,0.5297484993934631],"rotation":[0.19822385907173157,0.001885926816612482,0.9801549315452576,-0.000015853958757361397],"used":true,"bodyHandle":1.05e-321},{"objectType":"coin","index":213,"position":[0.5359928011894226,0.18256239593029022,0.5427812933921814],"rotation":[-0.001954456325620413,-0.8332672119140625,-0.001998544204980135,0.552863359451294],"used":true,"bodyHandle":1.057e-321},{"objectType":"coin","index":214,"position":[0.30185478925704956,0.1873863786458969,0.6232181191444397],"rotation":[0.0008551912032999098,0.4794813394546509,0.001721539068967104,-0.8775500059127808],"used":true,"bodyHandle":1.06e-321},{"objectType":"coin","index":215,"position":[-0.22906190156936646,0.18725740909576416,0.4848490357398987],"rotation":[0.9635871648788452,-0.0009981427574530244,0.2673916816711426,-0.0006355074583552778],"used":true,"bodyHandle":1.067e-321},{"objectType":"coin","index":216,"position":[0.2656659185886383,0.1936361938714981,0.5412136912345886],"rotation":[-0.8960257768630981,-0.0028200107626616955,-0.4439929723739624,-0.0004211930208839476],"used":true,"bodyHandle":1.07e-321},{"objectType":"coin","index":217,"position":[-0.02375182881951332,0.19336465001106262,0.4422043263912201],"rotation":[0.9453433752059937,0.0022027569357305765,0.32606422901153564,0.0017964435974135995],"used":true,"bodyHandle":1.077e-321},{"objectType":"coin","index":218,"position":[0.40227800607681274,0.18831565976142883,0.6219567656517029],"rotation":[-0.6390833258628845,0.0016965398099273443,-0.7691220641136169,0.004555488005280495],"used":true,"bodyHandle":1.08e-321},{"objectType":"coin","index":219,"position":[0.03808273747563362,0.19155097007751465,0.45747071504592896],"rotation":[-0.2635989785194397,0.06236699968576431,0.9622237086296082,0.027412159368395805],"used":true,"bodyHandle":1.087e-321},{"objectType":"coin","index":220,"position":[-0.26101168990135193,0.19424080848693848,0.47442635893821716],"rotation":[0.11431823670864105,-0.016334298998117447,0.9933056235313416,0.0028965582605451345],"used":true,"bodyHandle":1.09e-321},{"objectType":"coin","index":221,"position":[-0.17851212620735168,0.19357949495315552,0.46048349142074585],"rotation":[-0.0009773517958819866,0.9994208812713623,0.0012756020296365023,-0.03398923948407173],"used":true,"bodyHandle":1.097e-321},{"objectType":"coin","index":222,"position":[0.46376708149909973,0.1887708455324173,0.6233730316162109],"rotation":[0.0006530668470077217,0.9898630976676941,-0.003700856352224946,-0.14197497069835663],"used":true,"bodyHandle":1.1e-321},{"objectType":"coin","index":223,"position":[0.2422025501728058,0.18718254566192627,0.6270125508308411],"rotation":[-0.021431786939501762,0.008594630286097527,-0.9997323155403137,0.0014173196395859122],"used":true,"bodyHandle":1.107e-321},{"objectType":"coin","index":224,"position":[-0.062047623097896576,0.1872323751449585,0.48770636320114136],"rotation":[0.0014907188015058637,0.917033851146698,0.0022520110942423344,0.39880019426345825],"used":true,"bodyHandle":1.11e-321},{"objectType":"coin","index":225,"position":[0.13696034252643585,0.18741093575954437,0.41529303789138794],"rotation":[-0.0019131858134642243,-0.15843616425991058,0.0016873105196282268,-0.9873659014701843],"used":true,"bodyHandle":1.117e-321},{"objectType":"coin","index":226,"position":[-0.06506319344043732,0.1933360993862152,0.48566746711730957],"rotation":[0.0007989623700268567,0.6371794939041138,0.0014413465978577733,-0.7707136869430542],"used":true,"bodyHandle":1.12e-321},{"objectType":"coin","index":227,"position":[0.4772728681564331,0.18253637850284576,0.6183473467826843],"rotation":[0.22303597629070282,-0.0007420213660225272,-0.974808931350708,0.001362222246825695],"used":true,"bodyHandle":1.126e-321},{"objectType":"coin","index":228,"position":[-0.16186656057834625,0.18731342256069183,0.5145560503005981],"rotation":[0.30822086334228516,-0.0016448383685201406,-0.9513134360313416,-0.00004348438960732892],"used":true,"bodyHandle":1.13e-321},{"objectType":"coin","index":229,"position":[0.41178008913993835,0.18214565515518188,0.620462954044342],"rotation":[-0.0037644552066922188,0.02607736736536026,-0.0016082493821159005,-0.9996514916419983],"used":true,"bodyHandle":1.136e-321},{"objectType":"coin","index":230,"position":[0.14991706609725952,0.18719999492168427,0.5721855759620667],"rotation":[-0.0008406584965996444,0.8663652539253235,-0.0024064311292022467,-0.49940428137779236],"used":true,"bodyHandle":1.14e-321},{"objectType":"coin","index":231,"position":[-0.3990885019302368,0.1942736804485321,0.5802008509635925],"rotation":[-0.006273903418332338,-0.37525439262390137,0.0006767847226001322,-0.926900327205658],"used":true,"bodyHandle":1.146e-321},{"objectType":"coin","index":232,"position":[-0.5490471124649048,0.1821891814470291,0.4537677764892578],"rotation":[-0.9882081747055054,-0.00348396017216146,0.15278194844722748,0.009489690884947777],"used":true,"bodyHandle":1.15e-321},{"objectType":"coin","index":233,"position":[-0.13879947364330292,0.19354960322380066,0.4101889133453369],"rotation":[0.0015000842977315187,-0.4852767884731293,-0.0023253217805176973,0.874356210231781],"used":true,"bodyHandle":1.156e-321},{"objectType":"coin","index":234,"position":[-0.07717781513929367,0.1936406046152115,0.4162144064903259],"rotation":[0.5913001894950867,0.0010063407244160771,-0.8064508438110352,0.00005907176455366425],"used":true,"bodyHandle":1.16e-321},{"objectType":"coin","index":235,"position":[-0.46527716517448425,0.18249525129795074,0.5162744522094727],"rotation":[-0.00030531466472893953,-0.3204216957092285,-0.00013992372259963304,-0.9472748637199402],"used":true,"bodyHandle":1.166e-321},{"objectType":"coin","index":236,"position":[0.12662413716316223,0.18733642995357513,0.5180376768112183],"rotation":[-0.7695745825767517,0.00028049261891283095,-0.6385474801063538,0.003440326079726219],"used":true,"bodyHandle":1.17e-321},{"objectType":"coin","index":237,"position":[-0.39812999963760376,0.1882811337709427,0.5808959603309631],"rotation":[0.0004957765922881663,0.8162276148796082,0.0029735276475548744,-0.5777226090431213],"used":true,"bodyHandle":1.176e-321},{"objectType":"coin","index":238,"position":[0.24818281829357147,0.18712452054023743,0.5179750919342041],"rotation":[-0.0026772497221827507,0.9654242396354675,-0.003283414989709854,-0.26064929366111755],"used":true,"bodyHandle":1.18e-321},{"objectType":"coin","index":239,"position":[-0.31782257556915283,0.18724383413791656,0.518090009689331],"rotation":[-0.0021542885806411505,-0.3479616045951843,0.00024065990874078125,-0.9375062584877014],"used":true,"bodyHandle":1.186e-321},{"objectType":"coin","index":240,"position":[0.2756180167198181,0.1873580515384674,0.5704084038734436],"rotation":[-0.0003238834615331143,0.8841457366943359,0.0009470131481066346,0.46721017360687256],"used":true,"bodyHandle":1.19e-321},{"objectType":"coin","index":241,"position":[-0.2954282760620117,0.19334235787391663,0.5230117440223694],"rotation":[-0.0056600566022098064,-0.6425355076789856,-0.00318237766623497,-0.7662283778190613],"used":true,"bodyHandle":1.196e-321},{"objectType":"coin","index":242,"position":[0.4950847029685974,0.18255527317523956,0.4987216293811798],"rotation":[0.00025793685927055776,0.42757222056388855,0.0016415254212915897,-0.9039796590805054],"used":true,"bodyHandle":1.2e-321},{"objectType":"coin","index":243,"position":[-0.3812252879142761,0.1824595332145691,0.5240694880485535],"rotation":[-0.3009820580482483,0.0014500705292448401,-0.9536283016204834,0.0008603353053331375],"used":true,"bodyHandle":1.206e-321},{"objectType":"coin","index":244,"position":[-0.2729327082633972,0.18734169006347656,0.5924332141876221],"rotation":[0.00036843522684648633,0.8821010589599609,-0.0012662280350923538,-0.47105833888053894],"used":true,"bodyHandle":1.21e-321},{"objectType":"coin","index":245,"position":[-0.022480875253677368,0.18717047572135925,0.4413978159427643],"rotation":[0.001414783182553947,0.8327189087867737,-0.002730869920924306,-0.5536873936653137],"used":true,"bodyHandle":1.215e-321},{"objectType":"coin","index":246,"position":[0.06697904318571091,0.18726417422294617,0.5126059055328369],"rotation":[0.0002137072297045961,0.9928662180900574,0.002579167950898409,-0.11920569837093353],"used":true,"bodyHandle":1.22e-321},{"objectType":"coin","index":247,"position":[0.18546141684055328,0.18745757639408112,0.5230394005775452],"rotation":[-0.7997088432312012,0.0012959950836375356,-0.6003857851028442,-0.0009856955148279667],"used":true,"bodyHandle":1.225e-321},{"objectType":"coin","index":248,"position":[-0.3211803138256073,0.1874510794878006,0.42085930705070496],"rotation":[-0.8279286623001099,0.000811377598438412,-0.56083083152771,-0.0014821796212345362],"used":true,"bodyHandle":1.23e-321},{"objectType":"coin","index":249,"position":[0.5144355297088623,0.1823970526456833,0.43641602993011475],"rotation":[-0.0012323016999289393,0.92808598279953,-0.001871635438874364,-0.37235909700393677],"used":true,"bodyHandle":1.235e-321},{"objectType":"coin","index":250,"position":[-0.4613020122051239,0.18873248994350433,0.5233734846115112],"rotation":[-0.996130108833313,-0.0010904185473918915,0.08787908405065536,-0.0008700328762643039],"used":true,"bodyHandle":1.24e-321},{"objectType":"coin","index":251,"position":[0.10174670070409775,0.18730545043945312,0.4645695686340332],"rotation":[0.0009386387537233531,0.8587242960929871,-0.000919800833798945,0.5124361515045166],"used":true,"bodyHandle":1.245e-321},{"objectType":"coin","index":252,"position":[-0.07992888242006302,0.18733377754688263,0.42717453837394714],"rotation":[0.6963139176368713,0.0009387090103700757,-0.7177354097366333,0.0013991869054734707],"used":true,"bodyHandle":1.25e-321},{"objectType":"coin","index":253,"position":[0.017608094960451126,0.1874588578939438,0.3977724015712738],"rotation":[-0.7252658009529114,-0.0012960252352058887,-0.6884672045707703,0.000865493668243289],"used":true,"bodyHandle":1.255e-321},{"objectType":"coin","index":254,"position":[0.47531282901763916,0.18259167671203613,0.5592649579048157],"rotation":[0.0013661374105140567,-0.9874907732009888,-0.0005949189071543515,0.15766966342926025],"used":true,"bodyHandle":1.26e-321},{"objectType":"coin","index":255,"position":[0.07843281328678131,0.19341005384922028,0.40087634325027466],"rotation":[0.0022610914893448353,-0.262696772813797,0.001600812072865665,0.9648744463920593],"used":true,"bodyHandle":1.265e-321},{"objectType":"coin","index":256,"position":[0.3235308825969696,0.18728527426719666,0.5358617305755615],"rotation":[0.987990140914917,-0.00032116426154971123,0.15450754761695862,0.001648391829803586],"used":true,"bodyHandle":1.27e-321},{"objectType":"coin","index":257,"position":[0.2430250644683838,0.18741071224212646,0.3783266842365265],"rotation":[0.9973374605178833,-0.0013528711860999465,-0.07290729135274887,0.0008084357250481844],"used":true,"bodyHandle":1.275e-321},{"objectType":"coin","index":258,"position":[0.07549857348203659,0.1872633844614029,0.4116482138633728],"rotation":[-0.5719833970069885,-0.0011792168952524662,-0.8202586770057678,-0.003065946511924267],"used":true,"bodyHandle":1.28e-321},{"objectType":"coin","index":259,"position":[-0.4256194829940796,0.1824457049369812,0.5599456429481506],"rotation":[-0.32876256108283997,0.0012754637282341719,0.9444095492362976,0.0020364727824926376],"used":true,"bodyHandle":1.285e-321},{"objectType":"coin","index":260,"position":[-0.005499701481312513,0.18746626377105713,0.2172771841287613],"rotation":[-0.0008831903105601668,-0.9896073937416077,0.001458299346268177,-0.1437854915857315],"used":true,"bodyHandle":1.29e-321},{"objectType":"coin","index":261,"position":[-0.11969141662120819,0.18740740418434143,0.4720105230808258],"rotation":[0.28947606682777405,-0.0012035362888127565,0.9571841955184937,-0.0007182051776908338],"used":true,"bodyHandle":1.294e-321},{"objectType":"coin","index":262,"position":[-0.38395509123802185,0.18208761513233185,0.6034829020500183],"rotation":[-0.0033731735311448574,0.342953085899353,-0.000923173560295254,0.9393460154533386],"used":true,"bodyHandle":1.3e-321},{"objectType":"coin","index":263,"position":[-0.22116726636886597,0.19362647831439972,0.5192061066627502],"rotation":[-0.00023651821538805962,-0.5674283504486084,0.0005163064342923462,0.8234226107597351],"used":true,"bodyHandle":1.304e-321},{"objectType":"coin","index":264,"position":[-0.204469695687294,0.1872551590204239,0.555278480052948],"rotation":[-0.0012482425663620234,-0.06518366187810898,0.000022797950805397704,0.9978724718093872],"used":true,"bodyHandle":1.31e-321},{"objectType":"coin","index":265,"position":[-0.22552594542503357,0.19727440178394318,0.5890393257141113],"rotation":[0.0001623254211153835,0.06238691881299019,0.0010390117531642318,0.9980514645576477],"used":true,"bodyHandle":1.314e-321},{"objectType":"coin","index":266,"position":[-0.16677407920360565,0.19729182124137878,0.5819206237792969],"rotation":[-0.00021318132348824292,0.18648745119571686,-0.0011005998821929097,0.9824566841125488],"used":true,"bodyHandle":1.32e-321},{"objectType":"coin","index":267,"position":[0.18149444460868835,0.1873420625925064,0.6223336458206177],"rotation":[-0.002241681329905987,-0.2431192696094513,-0.0016738476697355509,0.9699923396110535],"used":true,"bodyHandle":1.324e-321},{"objectType":"coin","index":268,"position":[0.08858595788478851,0.19301147758960724,0.5675092339515686],"rotation":[0.0034442536998540163,-0.7829216718673706,-0.0032573207281529903,0.6221022009849548],"used":true,"bodyHandle":1.33e-321},{"objectType":"coin","index":269,"position":[0.26293376088142395,0.18240320682525635,0.6839757561683655],"rotation":[0.0011459648376330733,0.34246164560317993,0.0025382775347679853,0.9395276308059692],"used":true,"bodyHandle":1.334e-321},{"objectType":"coin","index":270,"position":[0.48992520570755005,0.18222704529762268,0.3717288672924042],"rotation":[-0.001512683928012848,0.8138107061386108,0.0009993776911869645,0.5811271667480469],"used":true,"bodyHandle":1.34e-321},{"objectType":"coin","index":271,"position":[0.47145766019821167,0.1882525533437729,0.36870309710502625],"rotation":[-0.006164009217172861,0.9833959937095642,-0.001009009894914925,0.1813649833202362],"used":true,"bodyHandle":1.344e-321},{"objectType":"coin","index":272,"position":[-0.5207322835922241,0.1856103539466858,0.4942088723182678],"rotation":[-0.08424398303031921,0.05386006087064743,-0.9947956204414368,-0.019586026668548584],"used":true,"bodyHandle":1.35e-321},{"objectType":"coin","index":273,"position":[-0.0974375382065773,0.18738561868667603,0.37086495757102966],"rotation":[-0.4161112904548645,-0.00009507346112513915,0.9093128442764282,0.0011910130269825459],"used":true,"bodyHandle":1.354e-321},{"objectType":"coin","index":274,"position":[0.18321529030799866,0.18739324808120728,0.378663569688797],"rotation":[-0.9830793738365173,0.0014962846180424094,0.18317313492298126,0.0005518107209354639],"used":true,"bodyHandle":1.36e-321},{"objectType":"coin","index":275,"position":[0.4366183280944824,0.18241074681282043,0.5063173770904541],"rotation":[-0.8690998554229736,-0.0011358861811459064,-0.494627982378006,0.002699265955016017],"used":true,"bodyHandle":1.364e-321},{"objectType":"coin","index":276,"position":[0.05387303978204727,0.18750527501106262,0.22050133347511292],"rotation":[0.0004831946862395853,0.34091609716415405,0.0017664260230958462,-0.9400919079780579],"used":true,"bodyHandle":1.37e-321},{"objectType":"coin","index":277,"position":[0.10837046802043915,0.18722295761108398,0.36108630895614624],"rotation":[0.00011544047447387129,0.3652942478656769,-0.001303458004258573,-0.930891215801239],"used":true,"bodyHandle":1.374e-321},{"objectType":"coin","index":278,"position":[0.21454332768917084,0.19373910129070282,0.34784021973609924],"rotation":[0.720521867275238,0.0005418536020442843,0.6934319138526917,-0.0003935474087484181],"used":true,"bodyHandle":1.38e-321},{"objectType":"coin","index":279,"position":[0.41629302501678467,0.18246081471443176,0.5616666674613953],"rotation":[0.0013874495634809136,-0.935905933380127,-0.001054273103363812,-0.35224559903144836],"used":true,"bodyHandle":1.383e-321},{"objectType":"coin","index":280,"position":[-0.49097752571105957,0.18233740329742432,0.43936455249786377],"rotation":[-0.6950027942657471,0.00388303748331964,-0.7189859747886658,0.003901076503098011],"used":true,"bodyHandle":1.39e-321},{"objectType":"coin","index":281,"position":[0.37087517976760864,0.18899928033351898,0.5242310762405396],"rotation":[0.06730550527572632,0.40355992317199707,0.08757293969392776,-0.9082621932029724],"used":true,"bodyHandle":1.393e-321},{"objectType":"coin","index":282,"position":[0.040022797882556915,0.23842768371105194,-0.048081282526254654],"rotation":[-0.5519029498100281,0.01696070469915867,0.8336975574493408,-0.007990079931914806],"used":true,"bodyHandle":1.4e-321},{"objectType":"coin","index":283,"position":[-0.17683710157871246,0.18728867173194885,0.45748400688171387],"rotation":[0.4220312535762787,-0.001465940265916288,0.9065774083137512,-0.002198906848207116],"used":true,"bodyHandle":1.403e-321},{"objectType":"coin","index":284,"position":[0.5106285810470581,0.18869544565677643,0.43625301122665405],"rotation":[-0.0005646354402415454,0.8440355658531189,-0.0022943117655813694,-0.536281943321228],"used":true,"bodyHandle":1.41e-321},{"objectType":"coin","index":285,"position":[0.23745448887348175,0.19184894859790802,0.48412275314331055],"rotation":[0.26355671882629395,0.07310903072357178,0.961869478225708,-0.00017952686175704002],"used":true,"bodyHandle":1.413e-321},{"objectType":"coin","index":286,"position":[-0.1971258670091629,0.19350723922252655,0.39441487193107605],"rotation":[0.0004373249539639801,0.6747757196426392,0.002119597280398011,0.7380196452140808],"used":true,"bodyHandle":1.42e-321},{"objectType":"coin","index":287,"position":[-0.13741916418075562,0.18720941245555878,0.41353482007980347],"rotation":[-0.0012640072964131832,0.48612526059150696,0.002645579632371664,-0.8738842010498047],"used":true,"bodyHandle":1.423e-321},{"objectType":"coin","index":288,"position":[0.20932671427726746,0.18745625019073486,0.43155941367149353],"rotation":[-0.08006583899259567,0.0003445067850407213,-0.9967880845069885,0.0016794046387076378],"used":true,"bodyHandle":1.43e-321},{"objectType":"coin","index":289,"position":[0.037921879440546036,0.24500028789043427,-0.04061513394117355],"rotation":[-0.7504749298095703,-0.009088084101676941,-0.6606494784355164,-0.0157172828912735],"used":true,"bodyHandle":1.433e-321},{"objectType":"coin","index":290,"position":[-0.48859602212905884,0.18841825425624847,0.43858110904693604],"rotation":[-0.9425837993621826,-0.0017647461500018835,0.333947092294693,0.0034657686483114958],"used":true,"bodyHandle":1.44e-321},{"objectType":"coin","index":291,"position":[0.21493805944919586,0.1873476505279541,0.32651907205581665],"rotation":[-0.0008907952578738332,-0.5827369093894958,0.0013713978696614504,0.8126592636108398],"used":true,"bodyHandle":1.443e-321},{"objectType":"coin","index":292,"position":[-0.3807358145713806,0.18244941532611847,0.4186718165874481],"rotation":[-0.0001501203078078106,-0.8760356903076172,-0.0015423907898366451,0.48224374651908875],"used":true,"bodyHandle":1.45e-321},{"objectType":"coin","index":293,"position":[0.1127910166978836,0.1874598115682602,0.21747572720050812],"rotation":[-0.9920792579650879,0.0012517465511336923,0.12560340762138367,0.0009731730096973479],"used":true,"bodyHandle":1.453e-321},{"objectType":"coin","index":294,"position":[-0.4235643446445465,0.1823391318321228,0.4745672345161438],"rotation":[-0.04259210079908371,0.0013276331592351198,-0.9990828633308411,-0.004187292419373989],"used":true,"bodyHandle":1.457e-321},{"objectType":"coin","index":295,"position":[0.15596610307693481,0.18746279180049896,0.326213002204895],"rotation":[0.0012265939731150866,-0.9763517379760742,0.0012323870323598385,0.2161809653043747],"used":true,"bodyHandle":1.46e-321},{"objectType":"coin","index":296,"position":[-0.15499871969223022,0.18720030784606934,0.3551219701766968],"rotation":[-0.7773261070251465,-0.0009426531032659113,0.629091203212738,-0.0027375956997275352],"used":true,"bodyHandle":1.467e-321},{"objectType":"coin","index":297,"position":[-0.1949719488620758,0.18722091615200043,0.4006947875022888],"rotation":[-0.9658249020576477,-0.0019200399983674288,0.25918716192245483,0.0007103967946022749],"used":true,"bodyHandle":1.47e-321},{"objectType":"coin","index":298,"position":[-0.03956299647688866,0.18741045892238617,0.38320258259773254],"rotation":[0.001963559538125992,0.9088310599327087,0.0018050611251965165,0.4171559810638428],"used":true,"bodyHandle":1.477e-321},{"objectType":"coin","index":299,"position":[-0.09673424065113068,0.18756206333637238,0.24091094732284546],"rotation":[0.001449630013667047,0.9889562129974365,0.000023306904040509835,-0.1482006162405014],"used":true,"bodyHandle":1.48e-321},{"objectType":"coin","index":300,"position":[-0.057429052889347076,0.24344193935394287,-0.04269275441765785],"rotation":[-0.0013627224834635854,-0.9921780228614807,-0.003467731876298785,-0.12477540224790573],"used":true,"bodyHandle":1.487e-321},{"objectType":"coin","index":301,"position":[-0.004242733120918274,0.23719756305217743,-0.08341885358095169],"rotation":[0.34503626823425293,0.002436746144667268,-0.9385815858840942,0.0029261671006679535],"used":true,"bodyHandle":1.49e-321},{"objectType":"coin","index":302,"position":[-0.4202001988887787,0.19433940947055817,0.47907936573028564],"rotation":[-0.6955140829086304,-0.001227543456479907,0.7184181809425354,0.011573148891329765],"used":true,"bodyHandle":1.497e-321},{"objectType":"coin","index":303,"position":[-0.057856734842061996,0.2372933030128479,-0.059129748493433],"rotation":[0.4814900755882263,-0.0008036286453716457,0.8764510154724121,0.0005403240211308002],"used":true,"bodyHandle":1.5e-321},{"objectType":"coin","index":304,"position":[-0.06157302483916283,0.23745572566986084,-0.1179509088397026],"rotation":[-0.0016456209123134613,-0.9992558360099792,0.0005640519666485488,-0.03853120282292366],"used":true,"bodyHandle":1.507e-321},{"objectType":"coin","index":305,"position":[0.436845600605011,0.18862634897232056,0.5049054026603699],"rotation":[-0.9288283586502075,-0.0010794807458296418,-0.3705000579357147,0.0025409511290490627],"used":true,"bodyHandle":1.51e-321},{"objectType":"coin","index":306,"position":[0.4563160538673401,0.18248970806598663,0.4264988303184509],"rotation":[-0.96616131067276,0.0022812094539403915,0.2579226791858673,0.001707690767943859],"used":true,"bodyHandle":1.517e-321},{"objectType":"coin","index":307,"position":[0.1301960051059723,0.1874503195285797,0.2738478481769562],"rotation":[0.0007423638016916811,-0.09502209722995758,0.0014160197461023927,0.9954738020896912],"used":true,"bodyHandle":1.52e-321},{"objectType":"coin","index":308,"position":[-0.267831951379776,0.1871737539768219,0.3934009373188019],"rotation":[-0.861361563205719,-0.0024623647332191467,0.5079764723777771,0.0031886703800410032],"used":true,"bodyHandle":1.527e-321},{"objectType":"coin","index":309,"position":[0.2741717994213104,0.18716922402381897,0.31286758184432983],"rotation":[0.005716700106859207,-0.9787740707397461,0.0052174231968820095,0.20479579269886017],"used":true,"bodyHandle":1.53e-321},{"objectType":"coin","index":310,"position":[0.05265826731920242,0.2432672083377838,-0.10685249418020248],"rotation":[0.9995251893997192,0.0056394534185528755,-0.029976865276694298,-0.004361371509730816],"used":true,"bodyHandle":1.537e-321},{"objectType":"coin","index":311,"position":[-0.008413529023528099,0.2434859424829483,-0.08946269750595093],"rotation":[-0.5960010290145874,-0.003434952814131975,0.8029717803001404,-0.0026808632537722588],"used":true,"bodyHandle":1.54e-321},{"objectType":"coin","index":312,"position":[0.3004685938358307,0.1934235394001007,0.4783629775047302],"rotation":[0.0040972973220050335,0.9920264482498169,-0.0005076533416286111,0.12596209347248077],"used":true,"bodyHandle":1.546e-321},{"objectType":"coin","index":313,"position":[-0.1698712706565857,0.193052738904953,0.33445271849632263],"rotation":[0.31096383929252625,0.016334984451532364,0.9502742290496826,-0.0036815146449953318],"used":true,"bodyHandle":1.55e-321},{"objectType":"coin","index":314,"position":[0.29963475465774536,0.18719899654388428,0.4818660020828247],"rotation":[-0.0003891008091159165,-0.4910627007484436,0.0033301275689154863,-0.8711177706718445],"used":true,"bodyHandle":1.556e-321},{"objectType":"coin","index":315,"position":[0.30099421739578247,0.18747788667678833,0.36729592084884644],"rotation":[-0.3364926874637604,0.0018119781743735075,-0.941684365272522,-0.000007392656698357314],"used":true,"bodyHandle":1.56e-321},{"objectType":"coin","index":316,"position":[-0.2501285672187805,0.19232405722141266,0.42173832654953003],"rotation":[-0.533473789691925,-0.05746329575777054,0.8418650031089783,0.05802515521645546],"used":true,"bodyHandle":1.566e-321},{"objectType":"coin","index":317,"position":[0.3902909755706787,0.18252363801002502,0.46872374415397644],"rotation":[0.7857688665390015,0.0007271727081388235,-0.6185194253921509,0.0005916862282902002],"used":true,"bodyHandle":1.57e-321},{"objectType":"coin","index":318,"position":[0.04876613989472389,0.23720894753932953,-0.10710250586271286],"rotation":[0.00029358331812545657,0.6878828406333923,0.0032282790634781122,0.7258145213127136],"used":true,"bodyHandle":1.576e-321},{"objectType":"coin","index":319,"position":[-0.007089666556566954,0.23739992082118988,-0.14235983788967133],"rotation":[0.5827059745788574,0.0023786588571965694,-0.8126769065856934,-0.0020751324482262135],"used":true,"bodyHandle":1.58e-321},{"objectType":"coin","index":320,"position":[-0.15873782336711884,0.18746086955070496,0.27550530433654785],"rotation":[-0.2972683906555176,0.0004904883680865169,0.954792320728302,-0.0016883077332749963],"used":true,"bodyHandle":1.586e-321},{"objectType":"coin","index":321,"position":[-0.11155720800161362,0.23714450001716614,-0.08237875998020172],"rotation":[0.0037871887907385826,0.9520569443702698,-0.0017317382153123617,0.3058926463127136],"used":true,"bodyHandle":1.59e-321},{"objectType":"coin","index":322,"position":[0.18915487825870514,0.1874719262123108,0.2727019786834717],"rotation":[0.0012806992745026946,0.5356894135475159,0.00008029652235563844,0.8444140553474426],"used":true,"bodyHandle":1.596e-321},{"objectType":"coin","index":323,"position":[-0.11430593580007553,0.1890476495027542,0.3143796920776367],"rotation":[-0.004626603331416845,0.13810668885707855,0.026351340115070343,0.9900559186935425],"used":true,"bodyHandle":1.6e-321},{"objectType":"coin","index":324,"position":[-0.35448992252349854,0.18677322566509247,0.4714743196964264],"rotation":[0.7324846982955933,0.05224664881825447,0.6772535443305969,-0.045431699603796005],"used":true,"bodyHandle":1.606e-321},{"objectType":"coin","index":325,"position":[-0.21511057019233704,0.18723949790000916,0.29286816716194153],"rotation":[-0.9973008632659912,0.003609237726777792,0.07330573350191116,-0.002058293204754591],"used":true,"bodyHandle":1.61e-321},{"objectType":"coin","index":326,"position":[0.04751374199986458,0.23724058270454407,-0.16645605862140656],"rotation":[0.002559094922617078,-0.901713490486145,0.0003886643098667264,-0.4323262870311737],"used":true,"bodyHandle":1.616e-321},{"objectType":"coin","index":327,"position":[-0.10716181993484497,0.2433198243379593,-0.07860174775123596],"rotation":[-0.9061084985733032,0.005321179516613483,-0.4230082631111145,-0.0017549004405736923],"used":true,"bodyHandle":1.62e-321},{"objectType":"coin","index":328,"position":[0.363246351480484,0.18845348060131073,0.4635753333568573],"rotation":[0.008515290915966034,-0.4649060070514679,-0.00871305726468563,-0.885276198387146],"used":true,"bodyHandle":1.625e-321},{"objectType":"coin","index":329,"position":[-0.420147567987442,0.18836776912212372,0.46253031492233276],"rotation":[-0.9997738599777222,0.0065496573224663734,-0.019627803936600685,0.004895799793303013],"used":true,"bodyHandle":1.63e-321},{"objectType":"coin","index":330,"position":[0.24816693365573883,0.19053249061107635,0.27432939410209656],"rotation":[0.5915055274963379,0.053398776799440384,0.8045173287391663,-0.004637730773538351],"used":true,"bodyHandle":1.635e-321},{"objectType":"coin","index":331,"position":[-0.43923667073249817,0.18257349729537964,0.4110631048679352],"rotation":[0.0004742987221106887,-0.5821080207824707,-0.0028187569696456194,-0.8131064176559448],"used":true,"bodyHandle":1.64e-321},{"objectType":"coin","index":332,"position":[0.11024338006973267,0.24385720491409302,-0.06256832927465439],"rotation":[-0.15498720109462738,-0.003258774057030678,-0.9878998398780823,0.004704994615167379],"used":true,"bodyHandle":1.645e-321},{"objectType":"coin","index":333,"position":[0.39977219700813293,0.182583287358284,0.409817099571228],"rotation":[-0.00007020193879725412,-0.9902399182319641,-0.0006314751808531582,-0.1393716037273407],"used":true,"bodyHandle":1.65e-321},{"objectType":"coin","index":334,"position":[0.10028780996799469,0.23751965165138245,-0.05855819210410118],"rotation":[0.003272960428148508,-0.635612964630127,0.0004741543089039624,-0.772000789642334],"used":true,"bodyHandle":1.655e-321},{"objectType":"coin","index":335,"position":[-0.06676222383975983,0.23727190494537354,-0.17667877674102783],"rotation":[-0.02877020835876465,-0.0016104336827993393,-0.9995846748352051,-0.00035719096194952726],"used":true,"bodyHandle":1.66e-321},{"objectType":"coin","index":336,"position":[-0.15085265040397644,0.1874580830335617,0.2170635610818863],"rotation":[0.0002598905412014574,0.43385711312294006,0.001611161744222045,-0.9009802341461182],"used":true,"bodyHandle":1.665e-321},{"objectType":"coin","index":337,"position":[-0.3264937996864319,0.18738387525081635,0.29776817560195923],"rotation":[0.0005349849234335124,-0.8317832350730896,0.0009061587043106556,-0.5550995469093323],"used":true,"bodyHandle":1.67e-321},{"objectType":"coin","index":338,"position":[-0.05202949792146683,0.24352042376995087,-0.18387632071971893],"rotation":[0.0009869933128356934,0.27452266216278076,-0.0008254402782768011,-0.9615797996520996],"used":true,"bodyHandle":1.675e-321},{"objectType":"coin","index":339,"position":[0.0480889156460762,0.24351239204406738,-0.16761460900306702],"rotation":[0.0018928060308098793,-0.714627206325531,-0.0029785095248371363,-0.6994966268539429],"used":true,"bodyHandle":1.68e-321},{"objectType":"coin","index":340,"position":[-0.32709261775016785,0.1937246173620224,0.30076906085014343],"rotation":[-0.001044818782247603,0.8060373067855835,-0.0013138349168002605,0.5918623208999634],"used":true,"bodyHandle":1.685e-321},{"objectType":"coin","index":341,"position":[0.1599624902009964,0.2378704994916916,-0.05787714198231697],"rotation":[-0.4897775948047638,0.006153646856546402,0.87180495262146,-0.006010852288454771],"used":true,"bodyHandle":1.69e-321},{"objectType":"coin","index":342,"position":[-0.2191367894411087,0.19342611730098724,0.27678993344306946],"rotation":[-0.999735414981842,0.004227708093822002,-0.022131629288196564,-0.004625460598617792],"used":true,"bodyHandle":1.695e-321},{"objectType":"coin","index":343,"position":[0.10695373266935349,0.23740050196647644,-0.11700379103422165],"rotation":[0.5362193584442139,0.0006926381029188633,-0.8440771102905273,-0.0014646585332229733],"used":true,"bodyHandle":1.7e-321},{"objectType":"coin","index":344,"position":[0.33596858382225037,0.1875290870666504,0.3186803460121155],"rotation":[-0.8945502638816833,0.0010259092086926103,-0.4469648599624634,0.001053833868354559],"used":true,"bodyHandle":1.705e-321},{"objectType":"coin","index":345,"position":[-0.2814042568206787,0.18740026652812958,0.3358480632305145],"rotation":[-0.7648072242736816,-0.0014887118013575673,0.644257128238678,-0.0006487235659733415],"used":true,"bodyHandle":1.71e-321},{"objectType":"coin","index":346,"position":[0.30960962176322937,0.18745484948158264,0.26591426134109497],"rotation":[-0.9655619859695435,-0.0014728349633514881,-0.26016807556152344,-0.000631391943898052],"used":true,"bodyHandle":1.714e-321},{"objectType":"coin","index":347,"position":[0.23105350136756897,0.18732541799545288,0.2173360139131546],"rotation":[-0.9759524464607239,0.0020814535673707724,0.21796591579914093,0.0018175123259425163],"used":true,"bodyHandle":1.72e-321},{"objectType":"coin","index":348,"position":[0.052789222449064255,0.23744629323482513,-0.22424918413162231],"rotation":[-0.001806772081181407,-0.9945838451385498,0.00030714613967575133,-0.10392105579376221],"used":true,"bodyHandle":1.724e-321},{"objectType":"coin","index":349,"position":[0.2184661328792572,0.2374587059020996,-0.08141393959522247],"rotation":[0.0011580934515222907,-0.8736976385116577,0.0011283198837190866,0.48646658658981323],"used":true,"bodyHandle":1.73e-321},{"objectType":"coin","index":350,"position":[-0.27161771059036255,0.18742182850837708,0.2762393057346344],"rotation":[0.00027197750750929117,-0.912824273109436,0.0009480364387854934,0.40835142135620117],"used":true,"bodyHandle":1.734e-321},{"objectType":"coin","index":351,"position":[-0.15460067987442017,0.23887427151203156,-0.041997138410806656],"rotation":[-0.5670093297958374,-0.01784268580377102,-0.8233968019485474,-0.014132133685052395],"used":true,"bodyHandle":1.74e-321},{"objectType":"coin","index":352,"position":[-0.1153830885887146,0.23720979690551758,-0.14210881292819977],"rotation":[0.39230579137802124,0.003304053796455264,0.9198281168937683,-0.001220639911480248],"used":true,"bodyHandle":1.744e-321},{"objectType":"coin","index":353,"position":[-0.0029558399692177773,0.2374221682548523,-0.20117393136024475],"rotation":[0.0007034353911876678,0.6580421924591064,0.0012921966845169663,0.752979576587677],"used":true,"bodyHandle":1.75e-321},{"objectType":"coin","index":354,"position":[0.2193017601966858,0.23742975294589996,-0.1422782689332962],"rotation":[0.17989122867584229,-0.0017491853795945644,0.9836845397949219,-0.0008595955441705883],"used":true,"bodyHandle":1.754e-321},{"objectType":"coin","index":355,"position":[-0.2699739634990692,0.18745917081832886,0.21729803085327148],"rotation":[0.5673677921295166,-0.0013243783032521605,0.8234630823135376,-0.0007639264804311097],"used":true,"bodyHandle":1.76e-321},{"objectType":"coin","index":356,"position":[-0.16827936470508575,0.23742122948169708,-0.10163382440805435],"rotation":[0.9433102607727051,-0.002066392684355378,0.3319026529788971,0.0014612488448619843],"used":true,"bodyHandle":1.764e-321},{"objectType":"coin","index":357,"position":[0.17151103913784027,0.24349121749401093,-0.2432677298784256],"rotation":[0.002458327915519476,0.7893030643463135,0.0017143931472674012,-0.6139963865280151],"used":true,"bodyHandle":1.77e-321},{"objectType":"coin","index":358,"position":[0.1648285686969757,0.23734010756015778,-0.17529058456420898],"rotation":[-0.0012862904695793986,-0.828072726726532,0.001378096523694694,-0.5606174468994141],"used":true,"bodyHandle":1.774e-321},{"objectType":"coin","index":359,"position":[0.27619513869285583,0.19126811623573303,0.2160414159297943],"rotation":[-0.9819737076759338,0.06232473999261856,0.178060844540596,0.011730033904314041],"used":true,"bodyHandle":1.78e-321},{"objectType":"coin","index":360,"position":[0.09509559720754623,0.1923982799053192,0.32250261306762695],"rotation":[-0.02390953153371811,-0.341931015253067,0.023372832685709,0.9391300678253174],"used":true,"bodyHandle":1.784e-321},{"objectType":"coin","index":361,"position":[0.24326398968696594,0.1975248008966446,0.28978949785232544],"rotation":[-0.04582518711686134,0.26149365305900574,0.029344020411372185,0.963670015335083],"used":true,"bodyHandle":1.79e-321},{"objectType":"coin","index":362,"position":[0.36006584763526917,0.18597270548343658,0.36603015661239624],"rotation":[-0.010252085514366627,-0.23373983800411224,-0.060783106833696365,0.9703432321548462],"used":true,"bodyHandle":1.793e-321},{"objectType":"coin","index":363,"position":[0.3612665832042694,0.19203723967075348,0.3677356243133545],"rotation":[-0.007885007187724113,-0.22730624675750732,-0.06026949733495712,0.9719245433807373],"used":true,"bodyHandle":1.8e-321},{"objectType":"coin","index":364,"position":[-0.16163437068462372,0.23720213770866394,-0.17888808250427246],"rotation":[-0.0031347584445029497,0.16678307950496674,-0.002535597886890173,0.9859853386878967],"used":true,"bodyHandle":1.803e-321},{"objectType":"coin","index":365,"position":[-0.0982087254524231,0.23727074265480042,-0.2709789574146271],"rotation":[0.9918326139450073,-0.002734297886490822,-0.12751483917236328,0.0007004120852798223],"used":true,"bodyHandle":1.81e-321},{"objectType":"coin","index":366,"position":[-0.2185111790895462,0.2374560534954071,-0.2026500701904297],"rotation":[0.0447891540825367,-0.00008240733586717397,0.998995304107666,0.0015453299274668097],"used":true,"bodyHandle":1.813e-321},{"objectType":"coin","index":367,"position":[0.27067774534225464,0.23745326697826385,-0.23084160685539246],"rotation":[0.0014048737939447165,-0.6688145995140076,-0.0009789465693756938,-0.7434272766113281],"used":true,"bodyHandle":1.82e-321},{"objectType":"coin","index":368,"position":[-0.15310455858707428,0.23745551705360413,-0.2923985421657562],"rotation":[0.6640647053718567,-0.0005024845595471561,-0.7476736307144165,-0.0013728520134463906],"used":true,"bodyHandle":1.823e-321},{"objectType":"coin","index":369,"position":[0.05513039603829384,0.23746614158153534,-0.2923552393913269],"rotation":[0.0013790272641927004,-0.03226865828037262,0.0003215957258362323,0.9994782209396362],"used":true,"bodyHandle":1.83e-321},{"objectType":"coin","index":370,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.833e-321},{"objectType":"coin","index":371,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.84e-321},{"objectType":"coin","index":372,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.843e-321},{"objectType":"coin","index":373,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.85e-321},{"objectType":"coin","index":374,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.853e-321},{"objectType":"coin","index":375,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.86e-321},{"objectType":"coin","index":376,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.863e-321},{"objectType":"coin","index":377,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.87e-321},{"objectType":"coin","index":378,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.873e-321},{"objectType":"coin","index":379,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.877e-321},{"objectType":"coin","index":380,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.88e-321},{"objectType":"coin","index":381,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.887e-321},{"objectType":"coin","index":382,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.89e-321},{"objectType":"coin","index":383,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.897e-321},{"objectType":"coin","index":384,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.9e-321},{"objectType":"coin","index":385,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.907e-321},{"objectType":"coin","index":386,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.91e-321},{"objectType":"coin","index":387,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.917e-321},{"objectType":"coin","index":388,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.92e-321},{"objectType":"coin","index":389,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.927e-321},{"objectType":"coin","index":390,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.93e-321},{"objectType":"coin","index":391,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.937e-321},{"objectType":"coin","index":392,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.94e-321},{"objectType":"coin","index":393,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.947e-321},{"objectType":"coin","index":394,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.95e-321},{"objectType":"coin","index":395,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.956e-321},{"objectType":"coin","index":396,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.96e-321},{"objectType":"coin","index":397,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.966e-321},{"objectType":"coin","index":398,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.97e-321},{"objectType":"coin","index":399,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.976e-321},{"objectType":"coin","index":400,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.98e-321},{"objectType":"coin","index":401,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.986e-321},{"objectType":"coin","index":402,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.99e-321},{"objectType":"coin","index":403,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":1.996e-321},{"objectType":"coin","index":404,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2e-321},{"objectType":"coin","index":405,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.006e-321},{"objectType":"coin","index":406,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.01e-321},{"objectType":"coin","index":407,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.016e-321},{"objectType":"coin","index":408,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.02e-321},{"objectType":"coin","index":409,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.026e-321},{"objectType":"coin","index":410,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.03e-321},{"objectType":"coin","index":411,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.036e-321},{"objectType":"coin","index":412,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.04e-321},{"objectType":"coin","index":413,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.045e-321},{"objectType":"coin","index":414,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.05e-321},{"objectType":"coin","index":415,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.055e-321},{"objectType":"coin","index":416,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.06e-321},{"objectType":"coin","index":417,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.065e-321},{"objectType":"coin","index":418,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.07e-321},{"objectType":"coin","index":419,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.075e-321},{"objectType":"coin","index":420,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.08e-321},{"objectType":"coin","index":421,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.085e-321},{"objectType":"coin","index":422,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.09e-321},{"objectType":"coin","index":423,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.095e-321},{"objectType":"coin","index":424,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.1e-321},{"objectType":"coin","index":425,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.105e-321},{"objectType":"coin","index":426,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.11e-321},{"objectType":"coin","index":427,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.115e-321},{"objectType":"coin","index":428,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.12e-321},{"objectType":"coin","index":429,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.124e-321},{"objectType":"coin","index":430,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.13e-321},{"objectType":"coin","index":431,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.134e-321},{"objectType":"coin","index":432,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.14e-321},{"objectType":"coin","index":433,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.144e-321},{"objectType":"coin","index":434,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.15e-321},{"objectType":"coin","index":435,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.154e-321},{"objectType":"coin","index":436,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.16e-321},{"objectType":"coin","index":437,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.164e-321},{"objectType":"coin","index":438,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.17e-321},{"objectType":"coin","index":439,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.174e-321},{"objectType":"coin","index":440,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.18e-321},{"objectType":"coin","index":441,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.184e-321},{"objectType":"coin","index":442,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.19e-321},{"objectType":"coin","index":443,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.194e-321},{"objectType":"coin","index":444,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.2e-321},{"objectType":"coin","index":445,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.204e-321},{"objectType":"coin","index":446,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.21e-321},{"objectType":"coin","index":447,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.213e-321},{"objectType":"coin","index":448,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.22e-321},{"objectType":"coin","index":449,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.223e-321},{"objectType":"coin","index":450,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.23e-321},{"objectType":"coin","index":451,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.233e-321},{"objectType":"coin","index":452,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.24e-321},{"objectType":"coin","index":453,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.243e-321},{"objectType":"coin","index":454,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.25e-321},{"objectType":"coin","index":455,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.253e-321},{"objectType":"coin","index":456,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.26e-321},{"objectType":"coin","index":457,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.263e-321},{"objectType":"coin","index":458,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.27e-321},{"objectType":"coin","index":459,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.273e-321},{"objectType":"coin","index":460,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.28e-321},{"objectType":"coin","index":461,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.283e-321},{"objectType":"coin","index":462,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.288e-321},{"objectType":"coin","index":463,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.29e-321},{"objectType":"coin","index":464,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.297e-321},{"objectType":"coin","index":465,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.3e-321},{"objectType":"coin","index":466,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.307e-321},{"objectType":"coin","index":467,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.31e-321},{"objectType":"coin","index":468,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.317e-321},{"objectType":"coin","index":469,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.32e-321},{"objectType":"coin","index":470,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.327e-321},{"objectType":"coin","index":471,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.33e-321},{"objectType":"coin","index":472,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.337e-321},{"objectType":"coin","index":473,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.34e-321},{"objectType":"coin","index":474,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.347e-321},{"objectType":"coin","index":475,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.35e-321},{"objectType":"coin","index":476,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.357e-321},{"objectType":"coin","index":477,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.36e-321},{"objectType":"coin","index":478,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.367e-321},{"objectType":"coin","index":479,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.37e-321},{"objectType":"coin","index":480,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.376e-321},{"objectType":"coin","index":481,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.38e-321},{"objectType":"coin","index":482,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.386e-321},{"objectType":"coin","index":483,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.39e-321},{"objectType":"coin","index":484,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.396e-321},{"objectType":"coin","index":485,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.4e-321},{"objectType":"coin","index":486,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.406e-321},{"objectType":"coin","index":487,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.41e-321},{"objectType":"coin","index":488,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.416e-321},{"objectType":"coin","index":489,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.42e-321},{"objectType":"coin","index":490,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.426e-321},{"objectType":"coin","index":491,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.43e-321},{"objectType":"coin","index":492,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.436e-321},{"objectType":"coin","index":493,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.44e-321},{"objectType":"coin","index":494,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.446e-321},{"objectType":"coin","index":495,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.45e-321},{"objectType":"coin","index":496,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.456e-321},{"objectType":"coin","index":497,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.46e-321},{"objectType":"coin","index":498,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.465e-321},{"objectType":"coin","index":499,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.47e-321},{"objectType":"coin","index":500,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.475e-321},{"objectType":"coin","index":501,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.48e-321},{"objectType":"coin","index":502,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.485e-321},{"objectType":"coin","index":503,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.49e-321},{"objectType":"coin","index":504,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.495e-321},{"objectType":"coin","index":505,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.5e-321},{"objectType":"coin","index":506,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.505e-321},{"objectType":"coin","index":507,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.51e-321},{"objectType":"coin","index":508,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.515e-321},{"objectType":"coin","index":509,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.52e-321},{"objectType":"coin","index":510,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.525e-321},{"objectType":"coin","index":511,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.53e-321},{"objectType":"coin","index":512,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.535e-321},{"objectType":"coin","index":513,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.54e-321},{"objectType":"coin","index":514,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.544e-321},{"objectType":"coin","index":515,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.55e-321},{"objectType":"coin","index":516,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.554e-321},{"objectType":"coin","index":517,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.56e-321},{"objectType":"coin","index":518,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.564e-321},{"objectType":"coin","index":519,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.57e-321},{"objectType":"coin","index":520,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.574e-321},{"objectType":"coin","index":521,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.58e-321},{"objectType":"coin","index":522,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.584e-321},{"objectType":"coin","index":523,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.59e-321},{"objectType":"coin","index":524,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.594e-321},{"objectType":"coin","index":525,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.6e-321},{"objectType":"coin","index":526,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.604e-321},{"objectType":"coin","index":527,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.61e-321},{"objectType":"coin","index":528,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.614e-321},{"objectType":"coin","index":529,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.62e-321},{"objectType":"coin","index":530,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.623e-321},{"objectType":"coin","index":531,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.63e-321},{"objectType":"coin","index":532,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.633e-321},{"objectType":"coin","index":533,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.64e-321},{"objectType":"coin","index":534,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.643e-321},{"objectType":"coin","index":535,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.65e-321},{"objectType":"coin","index":536,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.653e-321},{"objectType":"coin","index":537,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.66e-321},{"objectType":"coin","index":538,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.663e-321},{"objectType":"coin","index":539,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.67e-321},{"objectType":"coin","index":540,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.673e-321},{"objectType":"coin","index":541,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.68e-321},{"objectType":"coin","index":542,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.683e-321},{"objectType":"coin","index":543,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.69e-321},{"objectType":"coin","index":544,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.693e-321},{"objectType":"coin","index":545,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.7e-321},{"objectType":"coin","index":546,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.703e-321},{"objectType":"coin","index":547,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.707e-321},{"objectType":"coin","index":548,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.71e-321},{"objectType":"coin","index":549,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.717e-321},{"objectType":"coin","index":550,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.72e-321},{"objectType":"coin","index":551,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.727e-321},{"objectType":"coin","index":552,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.73e-321},{"objectType":"coin","index":553,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.737e-321},{"objectType":"coin","index":554,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.74e-321},{"objectType":"coin","index":555,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.747e-321},{"objectType":"coin","index":556,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.75e-321},{"objectType":"coin","index":557,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.757e-321},{"objectType":"coin","index":558,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.76e-321},{"objectType":"coin","index":559,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.767e-321},{"objectType":"coin","index":560,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.77e-321},{"objectType":"coin","index":561,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.777e-321},{"objectType":"coin","index":562,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.78e-321},{"objectType":"coin","index":563,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.787e-321},{"objectType":"coin","index":564,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.79e-321},{"objectType":"coin","index":565,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.796e-321},{"objectType":"coin","index":566,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.8e-321},{"objectType":"coin","index":567,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.806e-321},{"objectType":"coin","index":568,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.81e-321},{"objectType":"coin","index":569,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.816e-321},{"objectType":"coin","index":570,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.82e-321},{"objectType":"coin","index":571,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.826e-321},{"objectType":"coin","index":572,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.83e-321},{"objectType":"coin","index":573,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.836e-321},{"objectType":"coin","index":574,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.84e-321},{"objectType":"coin","index":575,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.846e-321},{"objectType":"coin","index":576,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.85e-321},{"objectType":"coin","index":577,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.856e-321},{"objectType":"coin","index":578,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.86e-321},{"objectType":"coin","index":579,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.866e-321},{"objectType":"coin","index":580,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.87e-321},{"objectType":"coin","index":581,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.875e-321},{"objectType":"coin","index":582,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.88e-321},{"objectType":"coin","index":583,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.885e-321},{"objectType":"coin","index":584,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.89e-321},{"objectType":"coin","index":585,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.895e-321},{"objectType":"coin","index":586,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.9e-321},{"objectType":"coin","index":587,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.905e-321},{"objectType":"coin","index":588,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.91e-321},{"objectType":"coin","index":589,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.915e-321},{"objectType":"coin","index":590,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.92e-321},{"objectType":"coin","index":591,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.925e-321},{"objectType":"coin","index":592,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.93e-321},{"objectType":"coin","index":593,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.935e-321},{"objectType":"coin","index":594,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.94e-321},{"objectType":"coin","index":595,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.945e-321},{"objectType":"coin","index":596,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.95e-321},{"objectType":"coin","index":597,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.955e-321},{"objectType":"coin","index":598,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.96e-321},{"objectType":"coin","index":599,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.964e-321},{"objectType":"coin","index":600,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.97e-321},{"objectType":"coin","index":601,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.974e-321},{"objectType":"coin","index":602,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.98e-321},{"objectType":"coin","index":603,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.984e-321},{"objectType":"coin","index":604,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.99e-321},{"objectType":"coin","index":605,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":2.994e-321},{"objectType":"coin","index":606,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3e-321},{"objectType":"coin","index":607,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.004e-321},{"objectType":"coin","index":608,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.01e-321},{"objectType":"coin","index":609,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.014e-321},{"objectType":"coin","index":610,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.02e-321},{"objectType":"coin","index":611,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.024e-321},{"objectType":"coin","index":612,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.03e-321},{"objectType":"coin","index":613,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.034e-321},{"objectType":"coin","index":614,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.04e-321},{"objectType":"coin","index":615,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.043e-321},{"objectType":"coin","index":616,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.05e-321},{"objectType":"coin","index":617,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.053e-321},{"objectType":"coin","index":618,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.06e-321},{"objectType":"coin","index":619,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.063e-321},{"objectType":"coin","index":620,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.07e-321},{"objectType":"coin","index":621,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.073e-321},{"objectType":"coin","index":622,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.08e-321},{"objectType":"coin","index":623,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.083e-321},{"objectType":"coin","index":624,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.09e-321},{"objectType":"coin","index":625,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.093e-321},{"objectType":"coin","index":626,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.1e-321},{"objectType":"coin","index":627,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.103e-321},{"objectType":"coin","index":628,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.11e-321},{"objectType":"coin","index":629,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.113e-321},{"objectType":"coin","index":630,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.12e-321},{"objectType":"coin","index":631,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.122e-321},{"objectType":"coin","index":632,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.127e-321},{"objectType":"coin","index":633,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.13e-321},{"objectType":"coin","index":634,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.137e-321},{"objectType":"coin","index":635,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.14e-321},{"objectType":"coin","index":636,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.147e-321},{"objectType":"coin","index":637,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.15e-321},{"objectType":"coin","index":638,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.157e-321},{"objectType":"coin","index":639,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.16e-321},{"objectType":"coin","index":640,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.167e-321},{"objectType":"coin","index":641,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.17e-321},{"objectType":"coin","index":642,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.177e-321},{"objectType":"coin","index":643,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.18e-321},{"objectType":"coin","index":644,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.187e-321},{"objectType":"coin","index":645,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.19e-321},{"objectType":"coin","index":646,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.197e-321},{"objectType":"coin","index":647,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.2e-321},{"objectType":"coin","index":648,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.206e-321},{"objectType":"coin","index":649,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.21e-321},{"objectType":"coin","index":650,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.216e-321},{"objectType":"coin","index":651,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.22e-321},{"objectType":"coin","index":652,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.226e-321},{"objectType":"coin","index":653,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.23e-321},{"objectType":"coin","index":654,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.236e-321},{"objectType":"coin","index":655,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.24e-321},{"objectType":"coin","index":656,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.246e-321},{"objectType":"coin","index":657,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.25e-321},{"objectType":"coin","index":658,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.256e-321},{"objectType":"coin","index":659,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.26e-321},{"objectType":"coin","index":660,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.266e-321},{"objectType":"coin","index":661,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.27e-321},{"objectType":"coin","index":662,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.276e-321},{"objectType":"coin","index":663,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.28e-321},{"objectType":"coin","index":664,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.286e-321},{"objectType":"coin","index":665,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.29e-321},{"objectType":"coin","index":666,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.295e-321},{"objectType":"coin","index":667,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.3e-321},{"objectType":"coin","index":668,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.305e-321},{"objectType":"coin","index":669,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.31e-321},{"objectType":"coin","index":670,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.315e-321},{"objectType":"coin","index":671,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.32e-321},{"objectType":"coin","index":672,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.325e-321},{"objectType":"coin","index":673,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.33e-321},{"objectType":"coin","index":674,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.335e-321},{"objectType":"coin","index":675,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.34e-321},{"objectType":"coin","index":676,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.345e-321},{"objectType":"coin","index":677,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.35e-321},{"objectType":"coin","index":678,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.355e-321},{"objectType":"coin","index":679,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.36e-321},{"objectType":"coin","index":680,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.365e-321},{"objectType":"coin","index":681,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.37e-321},{"objectType":"coin","index":682,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.374e-321},{"objectType":"coin","index":683,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.38e-321},{"objectType":"coin","index":684,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.384e-321},{"objectType":"coin","index":685,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.39e-321},{"objectType":"coin","index":686,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.394e-321},{"objectType":"coin","index":687,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.4e-321},{"objectType":"coin","index":688,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.404e-321},{"objectType":"coin","index":689,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.41e-321},{"objectType":"coin","index":690,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.414e-321},{"objectType":"coin","index":691,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.42e-321},{"objectType":"coin","index":692,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.424e-321},{"objectType":"coin","index":693,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.43e-321},{"objectType":"coin","index":694,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.434e-321},{"objectType":"coin","index":695,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.44e-321},{"objectType":"coin","index":696,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.444e-321},{"objectType":"coin","index":697,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.45e-321},{"objectType":"coin","index":698,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.454e-321},{"objectType":"coin","index":699,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.46e-321},{"objectType":"coin","index":700,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.463e-321},{"objectType":"coin","index":701,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.47e-321},{"objectType":"coin","index":702,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.473e-321},{"objectType":"coin","index":703,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.48e-321},{"objectType":"coin","index":704,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.483e-321},{"objectType":"coin","index":705,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.49e-321},{"objectType":"coin","index":706,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.493e-321},{"objectType":"coin","index":707,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.5e-321},{"objectType":"coin","index":708,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.503e-321},{"objectType":"coin","index":709,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.51e-321},{"objectType":"coin","index":710,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.513e-321},{"objectType":"coin","index":711,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.52e-321},{"objectType":"coin","index":712,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.523e-321},{"objectType":"coin","index":713,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.53e-321},{"objectType":"coin","index":714,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.533e-321},{"objectType":"coin","index":715,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.538e-321},{"objectType":"coin","index":716,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.54e-321},{"objectType":"coin","index":717,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.547e-321},{"objectType":"coin","index":718,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.55e-321},{"objectType":"coin","index":719,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.557e-321},{"objectType":"coin","index":720,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.56e-321},{"objectType":"coin","index":721,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.567e-321},{"objectType":"coin","index":722,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.57e-321},{"objectType":"coin","index":723,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.577e-321},{"objectType":"coin","index":724,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.58e-321},{"objectType":"coin","index":725,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.587e-321},{"objectType":"coin","index":726,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.59e-321},{"objectType":"coin","index":727,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.597e-321},{"objectType":"coin","index":728,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.6e-321},{"objectType":"coin","index":729,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.607e-321},{"objectType":"coin","index":730,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.61e-321},{"objectType":"coin","index":731,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.617e-321},{"objectType":"coin","index":732,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.62e-321},{"objectType":"coin","index":733,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.626e-321},{"objectType":"coin","index":734,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.63e-321},{"objectType":"coin","index":735,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.636e-321},{"objectType":"coin","index":736,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.64e-321},{"objectType":"coin","index":737,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.646e-321},{"objectType":"coin","index":738,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.65e-321},{"objectType":"coin","index":739,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.656e-321},{"objectType":"coin","index":740,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.66e-321},{"objectType":"coin","index":741,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.666e-321},{"objectType":"coin","index":742,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.67e-321},{"objectType":"coin","index":743,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.676e-321},{"objectType":"coin","index":744,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.68e-321},{"objectType":"coin","index":745,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.686e-321},{"objectType":"coin","index":746,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.69e-321},{"objectType":"coin","index":747,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.696e-321},{"objectType":"coin","index":748,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.7e-321},{"objectType":"coin","index":749,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.705e-321},{"objectType":"coin","index":750,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.71e-321},{"objectType":"coin","index":751,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.715e-321},{"objectType":"coin","index":752,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.72e-321},{"objectType":"coin","index":753,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.725e-321},{"objectType":"coin","index":754,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.73e-321},{"objectType":"coin","index":755,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.735e-321},{"objectType":"coin","index":756,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.74e-321},{"objectType":"coin","index":757,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.745e-321},{"objectType":"coin","index":758,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.75e-321},{"objectType":"coin","index":759,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.755e-321},{"objectType":"coin","index":760,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.76e-321},{"objectType":"coin","index":761,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.765e-321},{"objectType":"coin","index":762,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.77e-321},{"objectType":"coin","index":763,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.775e-321},{"objectType":"coin","index":764,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.78e-321},{"objectType":"coin","index":765,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.785e-321},{"objectType":"coin","index":766,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.79e-321},{"objectType":"coin","index":767,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.794e-321},{"objectType":"coin","index":768,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.8e-321},{"objectType":"coin","index":769,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.804e-321},{"objectType":"coin","index":770,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.81e-321},{"objectType":"coin","index":771,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.814e-321},{"objectType":"coin","index":772,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.82e-321},{"objectType":"coin","index":773,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.824e-321},{"objectType":"coin","index":774,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.83e-321},{"objectType":"coin","index":775,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.834e-321},{"objectType":"coin","index":776,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.84e-321},{"objectType":"coin","index":777,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.844e-321},{"objectType":"coin","index":778,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.85e-321},{"objectType":"coin","index":779,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.854e-321},{"objectType":"coin","index":780,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.86e-321},{"objectType":"coin","index":781,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.864e-321},{"objectType":"coin","index":782,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.87e-321},{"objectType":"coin","index":783,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.873e-321},{"objectType":"coin","index":784,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.88e-321},{"objectType":"coin","index":785,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.883e-321},{"objectType":"coin","index":786,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.89e-321},{"objectType":"coin","index":787,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.893e-321},{"objectType":"coin","index":788,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.9e-321},{"objectType":"coin","index":789,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.903e-321},{"objectType":"coin","index":790,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.91e-321},{"objectType":"coin","index":791,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.913e-321},{"objectType":"coin","index":792,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.92e-321},{"objectType":"coin","index":793,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.923e-321},{"objectType":"coin","index":794,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.93e-321},{"objectType":"coin","index":795,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.933e-321},{"objectType":"coin","index":796,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.94e-321},{"objectType":"coin","index":797,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.943e-321},{"objectType":"coin","index":798,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.95e-321},{"objectType":"coin","index":799,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.953e-321},{"objectType":"coin","index":800,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.957e-321},{"objectType":"coin","index":801,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.96e-321},{"objectType":"coin","index":802,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.967e-321},{"objectType":"coin","index":803,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.97e-321},{"objectType":"coin","index":804,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.977e-321},{"objectType":"coin","index":805,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.98e-321},{"objectType":"coin","index":806,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.987e-321},{"objectType":"coin","index":807,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.99e-321},{"objectType":"coin","index":808,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":3.997e-321},{"objectType":"coin","index":809,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4e-321},{"objectType":"coin","index":810,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.007e-321},{"objectType":"coin","index":811,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.01e-321},{"objectType":"coin","index":812,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.017e-321},{"objectType":"coin","index":813,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.02e-321},{"objectType":"coin","index":814,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.027e-321},{"objectType":"coin","index":815,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.03e-321},{"objectType":"coin","index":816,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.037e-321},{"objectType":"coin","index":817,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.04e-321},{"objectType":"coin","index":818,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.046e-321},{"objectType":"coin","index":819,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.05e-321},{"objectType":"coin","index":820,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.056e-321},{"objectType":"coin","index":821,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.06e-321},{"objectType":"coin","index":822,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.066e-321},{"objectType":"coin","index":823,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.07e-321},{"objectType":"coin","index":824,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.076e-321},{"objectType":"coin","index":825,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.08e-321},{"objectType":"coin","index":826,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.086e-321},{"objectType":"coin","index":827,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.09e-321},{"objectType":"coin","index":828,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.096e-321},{"objectType":"coin","index":829,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.1e-321},{"objectType":"coin","index":830,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.106e-321},{"objectType":"coin","index":831,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.11e-321},{"objectType":"coin","index":832,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.116e-321},{"objectType":"coin","index":833,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.12e-321},{"objectType":"coin","index":834,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.125e-321},{"objectType":"coin","index":835,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.13e-321},{"objectType":"coin","index":836,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.135e-321},{"objectType":"coin","index":837,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.14e-321},{"objectType":"coin","index":838,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.145e-321},{"objectType":"coin","index":839,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.15e-321},{"objectType":"coin","index":840,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.155e-321},{"objectType":"coin","index":841,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.16e-321},{"objectType":"coin","index":842,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.165e-321},{"objectType":"coin","index":843,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.17e-321},{"objectType":"coin","index":844,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.175e-321},{"objectType":"coin","index":845,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.18e-321},{"objectType":"coin","index":846,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.185e-321},{"objectType":"coin","index":847,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.19e-321},{"objectType":"coin","index":848,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.195e-321},{"objectType":"coin","index":849,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.2e-321},{"objectType":"coin","index":850,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.204e-321},{"objectType":"coin","index":851,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.21e-321},{"objectType":"coin","index":852,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.214e-321},{"objectType":"coin","index":853,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.22e-321},{"objectType":"coin","index":854,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.224e-321},{"objectType":"coin","index":855,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.23e-321},{"objectType":"coin","index":856,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.234e-321},{"objectType":"coin","index":857,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.24e-321},{"objectType":"coin","index":858,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.244e-321},{"objectType":"coin","index":859,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.25e-321},{"objectType":"coin","index":860,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.254e-321},{"objectType":"coin","index":861,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.26e-321},{"objectType":"coin","index":862,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.264e-321},{"objectType":"coin","index":863,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.27e-321},{"objectType":"coin","index":864,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.274e-321},{"objectType":"coin","index":865,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.28e-321},{"objectType":"coin","index":866,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.284e-321},{"objectType":"coin","index":867,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.29e-321},{"objectType":"coin","index":868,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.293e-321},{"objectType":"coin","index":869,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.3e-321},{"objectType":"coin","index":870,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.303e-321},{"objectType":"coin","index":871,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.31e-321},{"objectType":"coin","index":872,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.313e-321},{"objectType":"coin","index":873,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.32e-321},{"objectType":"coin","index":874,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.323e-321},{"objectType":"coin","index":875,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.33e-321},{"objectType":"coin","index":876,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.333e-321},{"objectType":"coin","index":877,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.34e-321},{"objectType":"coin","index":878,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.343e-321},{"objectType":"coin","index":879,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.35e-321},{"objectType":"coin","index":880,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.353e-321},{"objectType":"coin","index":881,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.36e-321},{"objectType":"coin","index":882,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.363e-321},{"objectType":"coin","index":883,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.37e-321},{"objectType":"coin","index":884,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.372e-321},{"objectType":"coin","index":885,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.377e-321},{"objectType":"coin","index":886,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.38e-321},{"objectType":"coin","index":887,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.387e-321},{"objectType":"coin","index":888,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.39e-321},{"objectType":"coin","index":889,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.397e-321},{"objectType":"coin","index":890,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.4e-321},{"objectType":"coin","index":891,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.407e-321},{"objectType":"coin","index":892,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.41e-321},{"objectType":"coin","index":893,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.417e-321},{"objectType":"coin","index":894,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.42e-321},{"objectType":"coin","index":895,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.427e-321},{"objectType":"coin","index":896,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.43e-321},{"objectType":"coin","index":897,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.437e-321},{"objectType":"coin","index":898,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.44e-321},{"objectType":"coin","index":899,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.447e-321},{"objectType":"coin","index":900,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.45e-321},{"objectType":"coin","index":901,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.456e-321},{"objectType":"coin","index":902,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.46e-321},{"objectType":"coin","index":903,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.466e-321},{"objectType":"coin","index":904,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.47e-321},{"objectType":"coin","index":905,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.476e-321},{"objectType":"coin","index":906,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.48e-321},{"objectType":"coin","index":907,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.486e-321},{"objectType":"coin","index":908,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.49e-321},{"objectType":"coin","index":909,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.496e-321},{"objectType":"coin","index":910,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.5e-321},{"objectType":"coin","index":911,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.506e-321},{"objectType":"coin","index":912,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.51e-321},{"objectType":"coin","index":913,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.516e-321},{"objectType":"coin","index":914,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.52e-321},{"objectType":"coin","index":915,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.526e-321},{"objectType":"coin","index":916,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.53e-321},{"objectType":"coin","index":917,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.536e-321},{"objectType":"coin","index":918,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.54e-321},{"objectType":"coin","index":919,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.545e-321},{"objectType":"coin","index":920,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.55e-321},{"objectType":"coin","index":921,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.555e-321},{"objectType":"coin","index":922,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.56e-321},{"objectType":"coin","index":923,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.565e-321},{"objectType":"coin","index":924,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.57e-321},{"objectType":"coin","index":925,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.575e-321},{"objectType":"coin","index":926,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.58e-321},{"objectType":"coin","index":927,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.585e-321},{"objectType":"coin","index":928,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.59e-321},{"objectType":"coin","index":929,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.595e-321},{"objectType":"coin","index":930,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.6e-321},{"objectType":"coin","index":931,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.605e-321},{"objectType":"coin","index":932,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.61e-321},{"objectType":"coin","index":933,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.615e-321},{"objectType":"coin","index":934,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.62e-321},{"objectType":"coin","index":935,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.624e-321},{"objectType":"coin","index":936,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.63e-321},{"objectType":"coin","index":937,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.634e-321},{"objectType":"coin","index":938,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.64e-321},{"objectType":"coin","index":939,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.644e-321},{"objectType":"coin","index":940,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.65e-321},{"objectType":"coin","index":941,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.654e-321},{"objectType":"coin","index":942,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.66e-321},{"objectType":"coin","index":943,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.664e-321},{"objectType":"coin","index":944,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.67e-321},{"objectType":"coin","index":945,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.674e-321},{"objectType":"coin","index":946,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.68e-321},{"objectType":"coin","index":947,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.684e-321},{"objectType":"coin","index":948,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.69e-321},{"objectType":"coin","index":949,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.694e-321},{"objectType":"coin","index":950,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.7e-321},{"objectType":"coin","index":951,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.704e-321},{"objectType":"coin","index":952,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.71e-321},{"objectType":"coin","index":953,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.713e-321},{"objectType":"coin","index":954,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.72e-321},{"objectType":"coin","index":955,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.723e-321},{"objectType":"coin","index":956,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.73e-321},{"objectType":"coin","index":957,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.733e-321},{"objectType":"coin","index":958,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.74e-321},{"objectType":"coin","index":959,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.743e-321},{"objectType":"coin","index":960,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.75e-321},{"objectType":"coin","index":961,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.753e-321},{"objectType":"coin","index":962,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.76e-321},{"objectType":"coin","index":963,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.763e-321},{"objectType":"coin","index":964,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.77e-321},{"objectType":"coin","index":965,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.773e-321},{"objectType":"coin","index":966,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.78e-321},{"objectType":"coin","index":967,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.783e-321},{"objectType":"coin","index":968,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.787e-321},{"objectType":"coin","index":969,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.79e-321},{"objectType":"coin","index":970,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.797e-321},{"objectType":"coin","index":971,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.8e-321},{"objectType":"coin","index":972,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.807e-321},{"objectType":"coin","index":973,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.81e-321},{"objectType":"coin","index":974,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.817e-321},{"objectType":"coin","index":975,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.82e-321},{"objectType":"coin","index":976,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.827e-321},{"objectType":"coin","index":977,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.83e-321},{"objectType":"coin","index":978,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.837e-321},{"objectType":"coin","index":979,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.84e-321},{"objectType":"coin","index":980,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.847e-321},{"objectType":"coin","index":981,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.85e-321},{"objectType":"coin","index":982,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.857e-321},{"objectType":"coin","index":983,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.86e-321},{"objectType":"coin","index":984,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.867e-321},{"objectType":"coin","index":985,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.87e-321},{"objectType":"coin","index":986,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.876e-321},{"objectType":"coin","index":987,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.88e-321},{"objectType":"coin","index":988,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.886e-321},{"objectType":"coin","index":989,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.89e-321},{"objectType":"coin","index":990,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.896e-321},{"objectType":"coin","index":991,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.9e-321},{"objectType":"coin","index":992,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.906e-321},{"objectType":"coin","index":993,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.91e-321},{"objectType":"coin","index":994,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.916e-321},{"objectType":"coin","index":995,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.92e-321},{"objectType":"coin","index":996,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.926e-321},{"objectType":"coin","index":997,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.93e-321},{"objectType":"coin","index":998,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.936e-321},{"objectType":"coin","index":999,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.94e-321},{"objectType":"coin","index":1000,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.946e-321},{"objectType":"coin","index":1001,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.95e-321},{"objectType":"coin","index":1002,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.955e-321},{"objectType":"coin","index":1003,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.96e-321},{"objectType":"coin","index":1004,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.965e-321},{"objectType":"coin","index":1005,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.97e-321},{"objectType":"coin","index":1006,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.975e-321},{"objectType":"coin","index":1007,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.98e-321},{"objectType":"coin","index":1008,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.985e-321},{"objectType":"coin","index":1009,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.99e-321},{"objectType":"coin","index":1010,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":4.995e-321},{"objectType":"coin","index":1011,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5e-321},{"objectType":"coin","index":1012,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.005e-321},{"objectType":"coin","index":1013,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.01e-321},{"objectType":"coin","index":1014,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.015e-321},{"objectType":"coin","index":1015,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.02e-321},{"objectType":"coin","index":1016,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.025e-321},{"objectType":"coin","index":1017,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.03e-321},{"objectType":"coin","index":1018,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.035e-321},{"objectType":"coin","index":1019,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.04e-321},{"objectType":"coin","index":1020,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.044e-321},{"objectType":"coin","index":1021,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.05e-321},{"objectType":"coin","index":1022,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.054e-321},{"objectType":"coin","index":1023,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.06e-321}],"tokens":[[{"index":0,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.34e-321},{"index":1,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.346e-321},{"index":2,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.35e-321},{"index":3,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.356e-321},{"index":4,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.36e-321},{"index":5,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.366e-321},{"index":6,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.37e-321},{"index":7,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.375e-321},{"index":8,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.38e-321},{"index":9,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.385e-321},{"index":10,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.39e-321},{"index":11,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.395e-321},{"index":12,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.4e-321},{"index":13,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.405e-321},{"index":14,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.41e-321},{"index":15,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.415e-321}],[{"index":0,"type":1,"position":[-0.34911447763442993,0.18761910498142242,0.3602602779865265],"rotation":[-0.0007119689253158867,-0.008470759727060795,0.007567974738776684,0.9999352097511292],"used":true,"bodyHandle":5.42e-321},{"index":1,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.425e-321},{"index":2,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.43e-321},{"index":3,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.435e-321},{"index":4,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.44e-321},{"index":5,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.445e-321},{"index":6,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.45e-321},{"index":7,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.454e-321},{"index":8,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.46e-321},{"index":9,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.464e-321},{"index":10,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.47e-321},{"index":11,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.474e-321},{"index":12,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.48e-321},{"index":13,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.484e-321},{"index":14,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.49e-321},{"index":15,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.494e-321}],[{"index":0,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.5e-321},{"index":1,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.504e-321},{"index":2,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.51e-321},{"index":3,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.514e-321},{"index":4,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.52e-321},{"index":5,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.524e-321},{"index":6,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.53e-321},{"index":7,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.534e-321},{"index":8,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.54e-321},{"index":9,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.543e-321},{"index":10,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.55e-321},{"index":11,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.553e-321},{"index":12,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.56e-321},{"index":13,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.563e-321},{"index":14,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.57e-321},{"index":15,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.573e-321}],[{"index":0,"type":3,"position":[0.0012053914833813906,0.18998965620994568,0.8523635268211365],"rotation":[0.0032721292227506638,-0.07326051592826843,0.014622104354202747,0.9972002506256104],"used":true,"bodyHandle":5.58e-321},{"index":1,"type":3,"position":[0.24242672324180603,0.1928780972957611,0.6610553860664368],"rotation":[0.03172853961586952,-0.8489894866943359,-0.04207752272486687,0.5257752537727356],"used":true,"bodyHandle":5.583e-321},{"index":2,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.59e-321},{"index":3,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.593e-321},{"index":4,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.6e-321},{"index":5,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.603e-321},{"index":6,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.61e-321},{"index":7,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.613e-321},{"index":8,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.618e-321},{"index":9,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.62e-321},{"index":10,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.627e-321},{"index":11,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.63e-321},{"index":12,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.637e-321},{"index":13,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.64e-321},{"index":14,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.647e-321},{"index":15,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.65e-321}],[{"index":0,"type":4,"position":[-0.447968453168869,0.19505804777145386,0.6269081830978394],"rotation":[-0.0014904472045600414,-0.4989350438117981,-0.00960481632500887,0.866584837436676],"used":true,"bodyHandle":5.657e-321},{"index":1,"type":4,"position":[-0.2675129771232605,0.19417764246463776,0.35463303327560425],"rotation":[0.0010046116076409817,0.1047041192650795,0.0003460059524513781,0.9945027828216553],"used":true,"bodyHandle":5.66e-321},{"index":2,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.667e-321},{"index":3,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.67e-321},{"index":4,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.677e-321},{"index":5,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.68e-321},{"index":6,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.687e-321},{"index":7,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.69e-321},{"index":8,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.697e-321},{"index":9,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.7e-321},{"index":10,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.706e-321},{"index":11,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.71e-321},{"index":12,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.716e-321},{"index":13,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.72e-321},{"index":14,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.726e-321},{"index":15,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.73e-321}],[{"index":0,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.736e-321},{"index":1,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.74e-321},{"index":2,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.746e-321},{"index":3,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.75e-321},{"index":4,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.756e-321},{"index":5,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.76e-321},{"index":6,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.766e-321},{"index":7,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.77e-321},{"index":8,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.776e-321},{"index":9,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.78e-321},{"index":10,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.786e-321},{"index":11,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.79e-321},{"index":12,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.795e-321},{"index":13,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.8e-321},{"index":14,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.805e-321},{"index":15,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.81e-321}]],"cards":[[{"index":0,"type":0,"position":[-0.22354428470134735,0.19239872694015503,0.6119592785835266],"rotation":[-0.00002223356750619132,0.09380318969488144,-0.0008520809933543205,0.9955903887748718],"used":true,"bodyHandle":5.064e-321},{"index":1,"type":0,"position":[0.002489411970600486,0.1853695809841156,0.3065471053123474],"rotation":[0.0004159312811680138,-0.13314072787761688,0.0003430659417062998,0.9910969138145447],"used":true,"bodyHandle":5.07e-321},{"index":2,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.074e-321},{"index":3,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.08e-321},{"index":4,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.084e-321},{"index":5,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.09e-321},{"index":6,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.094e-321},{"index":7,"type":0,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.1e-321}],[{"index":0,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.104e-321},{"index":1,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.11e-321},{"index":2,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.114e-321},{"index":3,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.12e-321},{"index":4,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.123e-321},{"index":5,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.13e-321},{"index":6,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.133e-321},{"index":7,"type":1,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.14e-321}],[{"index":0,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.143e-321},{"index":1,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.15e-321},{"index":2,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.153e-321},{"index":3,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.16e-321},{"index":4,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.163e-321},{"index":5,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.17e-321},{"index":6,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.173e-321},{"index":7,"type":2,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.18e-321}],[{"index":0,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.183e-321},{"index":1,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.19e-321},{"index":2,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.193e-321},{"index":3,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.2e-321},{"index":4,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.203e-321},{"index":5,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.207e-321},{"index":6,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.21e-321},{"index":7,"type":3,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.217e-321}],[{"index":0,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.22e-321},{"index":1,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.227e-321},{"index":2,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.23e-321},{"index":3,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.237e-321},{"index":4,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.24e-321},{"index":5,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.247e-321},{"index":6,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.25e-321},{"index":7,"type":4,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.257e-321}],[{"index":0,"type":5,"position":[-0.03594836965203285,0.18342535197734833,0.7874122262001038],"rotation":[0.0014618554851040244,-0.158395916223526,0.014233291149139404,0.9872720241546631],"used":true,"bodyHandle":5.26e-321},{"index":1,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.267e-321},{"index":2,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.27e-321},{"index":3,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.277e-321},{"index":4,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.28e-321},{"index":5,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.287e-321},{"index":6,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.29e-321},{"index":7,"type":5,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.296e-321}],[{"index":0,"type":6,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.3e-321},{"index":1,"type":6,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.306e-321},{"index":2,"type":6,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.31e-321},{"index":3,"type":6,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.316e-321},{"index":4,"type":6,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.32e-321},{"index":5,"type":6,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.326e-321},{"index":6,"type":6,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.33e-321},{"index":7,"type":6,"position":[0,0,0],"rotation":[0,0,0,1],"used":false,"bodyHandle":5.336e-321}]],"pusher":{"state":"pusher-moving","pendingRewards":[],"timeDelivery":1028666.6666657365,"initialDeltaZ":-1,"reward":{"coinCount":0,"cardCount":0,"tokenCount":0},"platform":{"position":-0.3268423721603658,"bodyHandles":[6.1e-321,6.107e-321,6.11e-321,6.117e-321]},"door":{"position":0,"bodyHandle":6.12e-321}},"sensorGate":{"colliderHandle":7.12e-321,"sensor":{"state":"sensor-letter-idle","letters":[{"state":"sensor-gate-off","flashStartTime":-1,"flashCount":0},{"state":"sensor-gate-off","flashStartTime":-1,"flashCount":0},{"state":"sensor-gate-off","flashStartTime":-1,"flashCount":0},{"state":"sensor-gate-off","flashStartTime":-1,"flashCount":0},{"state":"sensor-gate-off","flashStartTime":-1,"flashCount":0},{"state":"sensor-gate-off","flashStartTime":-1,"flashCount":0}]}},"reelsBox":{"state":"reels-box-idle","pendingSpins":0,"timeNextSpin":-1,"timeActive":-1,"reels":[{"state":"reel-idle","index":0,"rotation":0,"targetIndex":-1,"targetRotation":-1},{"state":"reel-idle","index":0,"rotation":0,"targetIndex":-1,"targetRotation":-1},{"state":"reel-idle","index":0,"rotation":0,"targetIndex":-1,"targetRotation":-1}]}}'),uh={state:gP,cabinet:wP},xP=ud.TIMESTEP*1e3;class pi{static DEBUG_STEP_NO_DELAY=!1;static DEBUG_EMPTY_POOL=!1;static DEBUG_COLLIDERS=!1;static DEBUG_FPS=!1;static DEBUG_POLYGONS=!1;static DEBUG_CONTROLS=!1;static DEBUG_AUTOPLAY=!1;static#e={score:0,coinsInPool:20,time:0};static#t;static#n;static#i=!1;static#r=!1;static#o;static#s;static async initialize(){const e=new yP;this.#n=document.body,addEventListener("resize",()=>this.#c()),new ResizeObserver(()=>this.#d()).observe(this.#n),this.#o=new ud({containerElement:this.#n,camera:e}),this.#t=new cP({scene:this.#o,state:this.#e}),this.#t.DEBUG_AUTOPLAY=this.DEBUG_AUTOPLAY,await this.#t.initialize(),this.DEBUG_EMPTY_POOL||await this.load(uh),this.#s=new dP({scene:this.#o,camera:e,interactiveObjects:this.#t.interactiveObjects}),this.#s.initialize(),fr.DEBUG_COLLIDERS=this.DEBUG_COLLIDERS,fr.DEBUG_FPS=this.DEBUG_FPS,fr.DEBUG_POLYGONS=this.DEBUG_POLYGONS,fr.DEBUG_CONTROLS=this.DEBUG_CONTROLS,await fr.initialize({scene:this.#o,camera:e,containerElement:this.#n}),onkeydown=async n=>{(n.key==="s"||n.key==="S")&&n.ctrlKey&&(n.preventDefault(),console.log(await this.save())),(n.key==="l"||n.key==="L")&&n.ctrlKey&&(n.preventDefault(),await this.load(uh))}}static run(){this.#a()}static#a(){this.#r&&(this.#r=!1,this.#i=!1),this.#i||(this.#t.update(this.#e.time),this.#s.update(),this.#o.step(),this.#o.render(),fr.update(),this.#e.time+=xP),this.DEBUG_STEP_NO_DELAY?setTimeout(()=>this.#a(),0):requestAnimationFrame(()=>this.#a())}static async save(){return{state:{score:this.#e.score,coinsInPool:this.#e.coinsInPool,time:this.#e.time},cabinet:await this.#t.save()}}static async load(e){this.#i=!0,this.#e.score=e.state.score,this.#e.coinsInPool=e.state.coinsInPool,this.#e.time=e.state.time,await this.#t.load(e.cabinet),this.#i=!1,this.#r=!0}static#c(){this.#o.resize(innerWidth,innerHeight)}static#d(){const e=this.#n.clientWidth,t=this.#n.clientHeight;this.#o.resize(e,t)}}pi.DEBUG_STEP_NO_DELAY=!1;pi.DEBUG_EMPTY_POOL=!1;pi.DEBUG_COLLIDERS=!1;pi.DEBUG_FPS=!0;pi.DEBUG_POLYGONS=!1;pi.DEBUG_CONTROLS=!0;pi.DEBUG_AUTOPLAY=!1;await pi.initialize();pi.run();
